
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca28  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a70  0800cbc8  0800cbc8  0001cbc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d638  0800d638  000201b4  2**0
                  CONTENTS
  4 .ARM          00000008  0800d638  0800d638  0001d638  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d640  0800d640  000201b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d640  0800d640  0001d640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d644  0800d644  0001d644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001b4  20000000  0800d648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000afc8  200001b4  0800d7fc  000201b4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000b17c  0800d7fc  0002b17c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201b4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d5b6  00000000  00000000  00020227  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004e6a  00000000  00000000  0003d7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  00042648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001292  00000000  00000000  00043e98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c226  00000000  00000000  0004512a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00022046  00000000  00000000  00061350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094139  00000000  00000000  00083396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d98  00000000  00000000  001174d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011e268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001b4 	.word	0x200001b4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800cbb0 	.word	0x0800cbb0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001b8 	.word	0x200001b8
 80001dc:	0800cbb0 	.word	0x0800cbb0

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> SPI4_MOSI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
 80005c6:	4b90      	ldr	r3, [pc, #576]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a8f      	ldr	r2, [pc, #572]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005cc:	f043 0310 	orr.w	r3, r3, #16
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b8d      	ldr	r3, [pc, #564]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0310 	and.w	r3, r3, #16
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	4b89      	ldr	r3, [pc, #548]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a88      	ldr	r2, [pc, #544]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b86      	ldr	r3, [pc, #536]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b82      	ldr	r3, [pc, #520]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a81      	ldr	r2, [pc, #516]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b7f      	ldr	r3, [pc, #508]	; (8000808 <MX_GPIO_Init+0x25c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b7b      	ldr	r3, [pc, #492]	; (8000808 <MX_GPIO_Init+0x25c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a7a      	ldr	r2, [pc, #488]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b78      	ldr	r3, [pc, #480]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b74      	ldr	r3, [pc, #464]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a73      	ldr	r2, [pc, #460]	; (8000808 <MX_GPIO_Init+0x25c>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b71      	ldr	r3, [pc, #452]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b6d      	ldr	r3, [pc, #436]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a6c      	ldr	r2, [pc, #432]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	4867      	ldr	r0, [pc, #412]	; (800080c <MX_GPIO_Init+0x260>)
 8000670:	f003 fa8a 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2101      	movs	r1, #1
 8000678:	4865      	ldr	r0, [pc, #404]	; (8000810 <MX_GPIO_Init+0x264>)
 800067a:	f003 fa85 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	210c      	movs	r1, #12
 8000682:	4864      	ldr	r0, [pc, #400]	; (8000814 <MX_GPIO_Init+0x268>)
 8000684:	f003 fa80 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2130      	movs	r1, #48	; 0x30
 800068c:	4860      	ldr	r0, [pc, #384]	; (8000810 <MX_GPIO_Init+0x264>)
 800068e:	f003 fa7b 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f240 1131 	movw	r1, #305	; 0x131
 8000698:	485f      	ldr	r0, [pc, #380]	; (8000818 <MX_GPIO_Init+0x26c>)
 800069a:	f003 fa75 	bl	8003b88 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800069e:	2200      	movs	r2, #0
 80006a0:	f24f 0150 	movw	r1, #61520	; 0xf050
 80006a4:	485d      	ldr	r0, [pc, #372]	; (800081c <MX_GPIO_Init+0x270>)
 80006a6:	f003 fa6f 	bl	8003b88 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80006aa:	2304      	movs	r3, #4
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	4853      	ldr	r0, [pc, #332]	; (800080c <MX_GPIO_Init+0x260>)
 80006be:	f003 f8c7 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006c2:	2308      	movs	r3, #8
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	484c      	ldr	r0, [pc, #304]	; (800080c <MX_GPIO_Init+0x260>)
 80006da:	f003 f8b9 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80006de:	2330      	movs	r3, #48	; 0x30
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4846      	ldr	r0, [pc, #280]	; (800080c <MX_GPIO_Init+0x260>)
 80006f4:	f003 f8ac 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80006f8:	2331      	movs	r3, #49	; 0x31
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4840      	ldr	r0, [pc, #256]	; (8000810 <MX_GPIO_Init+0x264>)
 8000710:	f003 f89e 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000724:	2305      	movs	r3, #5
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4839      	ldr	r0, [pc, #228]	; (8000814 <MX_GPIO_Init+0x268>)
 8000730:	f003 f88e 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000734:	230c      	movs	r3, #12
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4832      	ldr	r0, [pc, #200]	; (8000814 <MX_GPIO_Init+0x268>)
 800074c:	f003 f880 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8000750:	f240 1331 	movw	r3, #305	; 0x131
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	482b      	ldr	r0, [pc, #172]	; (8000818 <MX_GPIO_Init+0x26c>)
 800076a:	f003 f871 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PD6 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800076e:	f24f 0350 	movw	r3, #61520	; 0xf050
 8000772:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <MX_GPIO_Init+0x270>)
 8000788:	f003 f862 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800078c:	230f      	movs	r3, #15
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000796:	2301      	movs	r3, #1
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	481e      	ldr	r0, [pc, #120]	; (800081c <MX_GPIO_Init+0x270>)
 80007a2:	f003 f855 	bl	8003850 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4818      	ldr	r0, [pc, #96]	; (800081c <MX_GPIO_Init+0x270>)
 80007ba:	f003 f849 	bl	8003850 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2006      	movs	r0, #6
 80007c4:	f002 ff7b 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c8:	2006      	movs	r0, #6
 80007ca:	f002 ff94 	bl	80036f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2007      	movs	r0, #7
 80007d4:	f002 ff73 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007d8:	2007      	movs	r0, #7
 80007da:	f002 ff8c 	bl	80036f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2008      	movs	r0, #8
 80007e4:	f002 ff6b 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007e8:	2008      	movs	r0, #8
 80007ea:	f002 ff84 	bl	80036f6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2009      	movs	r0, #9
 80007f4:	f002 ff63 	bl	80036be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007f8:	2009      	movs	r0, #9
 80007fa:	f002 ff7c 	bl	80036f6 <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3730      	adds	r7, #48	; 0x30
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40021000 	.word	0x40021000
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
 800081c:	40020c00 	.word	0x40020c00

08000820 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2C1_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_I2C1_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2C1_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_I2C1_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2C1_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_I2C1_Init+0x50>)
 800085e:	f003 f9d1 	bl	8003c04 <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000868:	f002 fb1e 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200001d0 	.word	0x200001d0
 8000874:	40005400 	.word	0x40005400
 8000878:	000186a0 	.word	0x000186a0

0800087c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_I2C_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c0:	2312      	movs	r3, #18
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008cc:	2304      	movs	r3, #4
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <HAL_I2C_MspInit+0x8c>)
 80008d8:	f002 ffba 	bl	8003850 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40005400 	.word	0x40005400
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400

0800090c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2S2_Init+0x50>)
 8000912:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_I2S2_Init+0x54>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2S2_Init+0x50>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2S2_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_I2S2_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_I2S2_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_I2S2_Init+0x50>)
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <MX_I2S2_Init+0x58>)
 8000934:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_I2S2_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_I2S2_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2S2_Init+0x50>)
 8000944:	2201      	movs	r2, #1
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_I2S2_Init+0x50>)
 800094a:	f003 fa9f 	bl	8003e8c <HAL_I2S_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000954:	f002 faa8 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000224 	.word	0x20000224
 8000960:	40003800 	.word	0x40003800
 8000964:	00017700 	.word	0x00017700

08000968 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_I2S3_Init+0x54>)
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <MX_I2S3_Init+0x58>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2S3_Init+0x54>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_I2S3_Init+0x54>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2S3_Init+0x54>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_I2S3_Init+0x54>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_I2S3_Init+0x54>)
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <MX_I2S3_Init+0x5c>)
 8000992:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_I2S3_Init+0x54>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_I2S3_Init+0x54>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_I2S3_Init+0x54>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_I2S3_Init+0x54>)
 80009a8:	f003 fa70 	bl	8003e8c <HAL_I2S_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009b2:	f002 fa79 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	2000026c 	.word	0x2000026c
 80009c0:	40003c00 	.word	0x40003c00
 80009c4:	00017700 	.word	0x00017700

080009c8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a59      	ldr	r2, [pc, #356]	; (8000b4c <HAL_I2S_MspInit+0x184>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d15b      	bne.n	8000aa2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	4b58      	ldr	r3, [pc, #352]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a57      	ldr	r2, [pc, #348]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	4b51      	ldr	r3, [pc, #324]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a50      	ldr	r2, [pc, #320]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4e      	ldr	r3, [pc, #312]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a49      	ldr	r2, [pc, #292]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	483e      	ldr	r0, [pc, #248]	; (8000b54 <HAL_I2S_MspInit+0x18c>)
 8000a5a:	f002 fef9 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a5e:	2308      	movs	r3, #8
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4836      	ldr	r0, [pc, #216]	; (8000b54 <HAL_I2S_MspInit+0x18c>)
 8000a7a:	f002 fee9 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a90:	2305      	movs	r3, #5
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482f      	ldr	r0, [pc, #188]	; (8000b58 <HAL_I2S_MspInit+0x190>)
 8000a9c:	f002 fed8 	bl	8003850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000aa0:	e04f      	b.n	8000b42 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <HAL_I2S_MspInit+0x194>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d14a      	bne.n	8000b42 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b00:	2310      	movs	r3, #16
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b10:	2306      	movs	r3, #6
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <HAL_I2S_MspInit+0x198>)
 8000b1c:	f002 fe98 	bl	8003850 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b20:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b32:	2306      	movs	r3, #6
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_I2S_MspInit+0x18c>)
 8000b3e:	f002 fe87 	bl	8003850 <HAL_GPIO_Init>
}
 8000b42:	bf00      	nop
 8000b44:	3738      	adds	r7, #56	; 0x38
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40003800 	.word	0x40003800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40003c00 	.word	0x40003c00
 8000b60:	40020000 	.word	0x40020000

08000b64 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fd7b 	bl	800166a <LCD5110_refresh_ll>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 fa4e 	bl	8001034 <LCD5110_wset_cursor>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fb04 	bl	80011b8 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ffe1 	bl	8000b7c <LCD5110_set_cursor>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f000 fa61 	bl	80010a0 <LCD5110_wprint>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <LCD5110_max>:
extern inline void LCD5110_fill_scr(LCD5110_display* lcd_conf);
extern inline void LCD5110_fill_win(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
extern inline void LCD5110_endl(LCD5110_display* lcd_conf);
extern inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf);

static inline int LCD5110_max(int a, int b) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	return a > b ? a : b;
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	bfb8      	it	lt
 8000bf8:	4613      	movlt	r3, r2
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <LCD5110_min>:

static inline int LCD5110_min(int a, int b) {
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
	return a < b ? a : b;
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4293      	cmp	r3, r2
 8000c16:	bfa8      	it	ge
 8000c18:	4613      	movge	r3, r2
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LCD5110_wline>:
}
#endif

void LCD5110_wline(int x1, int y1, int x2, int y2, int color,
					LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b08e      	sub	sp, #56	; 0x38
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	603b      	str	r3, [r7, #0]
	x1 += win->frame.x0;
 8000c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
	y1 += win->frame.y0;
 8000c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
	x2 += win->frame.x0;
 8000c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	607b      	str	r3, [r7, #4]
	y2 += win->frame.y0;
 8000c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c64:	461a      	mov	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	603b      	str	r3, [r7, #0]

	int zn = x1 - x2;
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
	//float k = (y1-y2)/zn;
	//float b = y1 - k*x1;
	int yb = LCD5110_min(y1, y2);
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	f7ff ffc5 	bl	8000c06 <LCD5110_min>
 8000c7c:	62b8      	str	r0, [r7, #40]	; 0x28
	int ye = LCD5110_max(y1, y2);
 8000c7e:	6839      	ldr	r1, [r7, #0]
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	f7ff ffb0 	bl	8000be6 <LCD5110_max>
 8000c86:	6278      	str	r0, [r7, #36]	; 0x24
	int xb = LCD5110_min(x1, x2);
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff ffbb 	bl	8000c06 <LCD5110_min>
 8000c90:	6238      	str	r0, [r7, #32]
	int xe = LCD5110_max(x1, x2);
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff ffa6 	bl	8000be6 <LCD5110_max>
 8000c9a:	61f8      	str	r0, [r7, #28]
	if ((ye - yb) < (xe - xb)) {
 8000c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	1ad2      	subs	r2, r2, r3
 8000ca2:	69f9      	ldr	r1, [r7, #28]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	1acb      	subs	r3, r1, r3
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	da42      	bge.n	8000d32 <LCD5110_wline+0x10c>
		for (int i = xb; i <= xe; ++i) {
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb0:	e03a      	b.n	8000d28 <LCD5110_wline+0x102>
			int cury = (y1 - y2) * (i - x1) / zn + y1;
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	fb03 f202 	mul.w	r2, r3, r2
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	617b      	str	r3, [r7, #20]
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	db22      	blt.n	8000d22 <LCD5110_wline+0xfc>
 8000cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ce6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	da17      	bge.n	8000d22 <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cf8:	461a      	mov	r2, r3
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	db10      	blt.n	8000d22 <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d06:	461a      	mov	r2, r3
 8000d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d0e:	4413      	add	r3, r2
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	da05      	bge.n	8000d22 <LCD5110_wline+0xfc>
			{
				LCD5110_putpix(i, cury, color, &lcd_conf->hw_conf);
 8000d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d1a:	6979      	ldr	r1, [r7, #20]
 8000d1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d1e:	f000 fa66 	bl	80011ee <LCD5110_putpix>
		for (int i = xb; i <= xe; ++i) {
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	3301      	adds	r3, #1
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
 8000d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	ddc0      	ble.n	8000cb2 <LCD5110_wline+0x8c>
			{
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
			}
		}
	}
}
 8000d30:	e041      	b.n	8000db6 <LCD5110_wline+0x190>
		for (int i = yb; i <= ye; ++i) {
 8000d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
 8000d36:	e03a      	b.n	8000dae <LCD5110_wline+0x188>
			int curx = (i - y1) * zn / (y1 - y2) + x1;
 8000d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d40:	fb03 f202 	mul.w	r2, r3, r2
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	1acb      	subs	r3, r1, r3
 8000d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	db22      	blt.n	8000da8 <LCD5110_wline+0x182>
 8000d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	da17      	bge.n	8000da8 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d7e:	461a      	mov	r2, r3
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d82:	4293      	cmp	r3, r2
 8000d84:	db10      	blt.n	8000da8 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d94:	4413      	add	r3, r2
 8000d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	da05      	bge.n	8000da8 <LCD5110_wline+0x182>
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
 8000d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000da2:	69b8      	ldr	r0, [r7, #24]
 8000da4:	f000 fa23 	bl	80011ee <LCD5110_putpix>
		for (int i = yb; i <= ye; ++i) {
 8000da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000daa:	3301      	adds	r3, #1
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
 8000dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	429a      	cmp	r2, r3
 8000db4:	ddc0      	ble.n	8000d38 <LCD5110_wline+0x112>
}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <LCD5110_wrect>:

void LCD5110_wrect(rect_t* rect, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000dbe:	b590      	push	{r4, r7, lr}
 8000dc0:	b089      	sub	sp, #36	; 0x24
 8000dc2:	af04      	add	r7, sp, #16
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dda:	4619      	mov	r1, r3
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dea:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000dec:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000df4:	461c      	mov	r4, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4623      	mov	r3, r4
 8000e04:	f7ff ff0f 	bl	8000c26 <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0e:	461c      	mov	r4, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e1e:	4413      	add	r3, r2
 8000e20:	1e59      	subs	r1, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e30:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e32:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e42:	4403      	add	r3, r0
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e44:	1e58      	subs	r0, r3, #1
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4603      	mov	r3, r0
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff fee6 	bl	8000c26 <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	4618      	mov	r0, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e68:	4619      	mov	r1, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e70:	461c      	mov	r4, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e80:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4613      	mov	r3, r2
 8000e92:	4622      	mov	r2, r4
 8000e94:	f7ff fec7 	bl	8000c26 <LCD5110_wline>
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	1e58      	subs	r0, r3, #1
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eb0:	461c      	mov	r4, r3
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ec0:	4413      	add	r3, r2
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000ec2:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ed2:	440b      	add	r3, r1
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000ed4:	1e59      	subs	r1, r3, #1
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	f7ff fe9e 	bl	8000c26 <LCD5110_wline>
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}

08000ef2 <LCD5110_rect>:

void LCD5110_rect(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
	LCD5110_wrect(rect, color, &lcd_conf->def_scr, lcd_conf);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ff58 	bl	8000dbe <LCD5110_wrect>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <LCD5110_rect_fill>:
void LCD5110_win_draw_frame(int color, LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
	LCD5110_rect(&win->frame, color, lcd_conf);
}

void LCD5110_rect_fill(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
	//! Slow!
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e01b      	b.n	8000f64 <LCD5110_rect_fill+0x4e>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	e008      	b.n	8000f48 <LCD5110_rect_fill+0x32>
			LCD5110_putpix(i, j, color, &lcd_conf->hw_conf);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	6939      	ldr	r1, [r7, #16]
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f000 f956 	bl	80011ee <LCD5110_putpix>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3301      	adds	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f56:	4413      	add	r3, r2
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbeb      	blt.n	8000f36 <LCD5110_rect_fill+0x20>
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbd8      	blt.n	8000f2c <LCD5110_rect_fill+0x16>
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db41      	blt.n	8001022 <LCD5110_wputchar+0x9e>
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db3c      	blt.n	8001022 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	4413      	add	r3, r2
 8000fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fb6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d833      	bhi.n	8001026 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	4413      	add	r3, r2
 8000fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fcc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d828      	bhi.n	8001026 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <LCD5110_wputchar+0xac>)
 8000fd6:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8000fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	18d0      	adds	r0, r2, r3
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	18d1      	adds	r1, r2, r3
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	441a      	add	r2, r3
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	461e      	mov	r6, r3
 8001000:	2308      	movs	r3, #8
 8001002:	461c      	mov	r4, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf0c      	ite	eq
 800100a:	2301      	moveq	r3, #1
 800100c:	2300      	movne	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461d      	mov	r5, r3
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	9501      	str	r5, [sp, #4]
 8001018:	9400      	str	r4, [sp, #0]
 800101a:	4633      	mov	r3, r6
 800101c:	f000 f927 	bl	800126e <LCD5110_drawBitmap>
 8001020:	e002      	b.n	8001028 <LCD5110_wputchar+0xa4>
		return;
 8001022:	bf00      	nop
 8001024:	e000      	b.n	8001028 <LCD5110_wputchar+0xa4>
		return;
 8001026:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	bf00      	nop
 8001030:	0800cedc 	.word	0x0800cedc

08001034 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b21a      	sxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	b21a      	sxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	815a      	strh	r2, [r3, #10]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800106e:	b29a      	uxth	r2, r3
 8001070:	2308      	movs	r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	4413      	add	r3, r2
 8001076:	b29b      	uxth	r3, r3
 8001078:	3301      	adds	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	b21a      	sxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2202      	movs	r2, #2
 8001086:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7b1b      	ldrb	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f7ff fd67 	bl	8000b64 <LCD5110_refresh>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 80010ae:	e053      	b.n	8001158 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b0a      	cmp	r3, #10
 80010b6:	d010      	beq.n	80010da <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010be:	4618      	mov	r0, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010c6:	4619      	mov	r1, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f7ff ff55 	bl	8000f84 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	2306      	movs	r3, #6
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010f6:	461a      	mov	r2, r3
 80010f8:	2306      	movs	r3, #6
 80010fa:	4413      	add	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001102:	4293      	cmp	r3, r2
 8001104:	d904      	bls.n	8001110 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 800110c:	2b0a      	cmp	r3, #10
 800110e:	d103      	bne.n	8001118 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b0a      	cmp	r3, #10
 8001116:	d111      	bne.n	800113c <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff9f 	bl	800105e <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a10      	ldr	r2, [pc, #64]	; (800116c <LCD5110_wprint+0xcc>)
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <LCD5110_wprint+0x9c>
				++str;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001142:	461a      	mov	r2, r3
 8001144:	2308      	movs	r3, #8
 8001146:	4413      	add	r3, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800114e:	4293      	cmp	r3, r2
 8001150:	d807      	bhi.n	8001162 <LCD5110_wprint+0xc2>
			break;
		str++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1a7      	bne.n	80010b0 <LCD5110_wprint+0x10>

	}
}
 8001160:	e000      	b.n	8001164 <LCD5110_wprint+0xc4>
			break;
 8001162:	bf00      	nop
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800d504 	.word	0x0800d504

08001170 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	10db      	asrs	r3, r3, #3
 8001180:	2254      	movs	r2, #84	; 0x54
 8001182:	fb03 f202 	mul.w	r2, r3, r2
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4413      	add	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	2201      	movs	r2, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	753b      	strb	r3, [r7, #20]

	return res;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	461a      	mov	r2, r3
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011a8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e008      	b.n	80011d8 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	331c      	adds	r3, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80011de:	dbf2      	blt.n	80011c6 <LCD5110_clrscr+0xe>
	}
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db31      	blt.n	8001266 <LCD5110_putpix+0x78>
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db2e      	blt.n	8001266 <LCD5110_putpix+0x78>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b53      	cmp	r3, #83	; 0x53
 800120c:	dc2b      	bgt.n	8001266 <LCD5110_putpix+0x78>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b2f      	cmp	r3, #47	; 0x2f
 8001212:	dc28      	bgt.n	8001266 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffa7 	bl	8001170 <xy_to_pix>

	if (color)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	7f19      	ldrb	r1, [r3, #28]
 8001230:	7d3a      	ldrb	r2, [r7, #20]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	430a      	orrs	r2, r1
 8001236:	b2d1      	uxtb	r1, r2
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	4413      	add	r3, r2
 800123c:	460a      	mov	r2, r1
 800123e:	771a      	strb	r2, [r3, #28]
 8001240:	e012      	b.n	8001268 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	4413      	add	r3, r2
 8001248:	7f1b      	ldrb	r3, [r3, #28]
 800124a:	b25a      	sxtb	r2, r3
 800124c:	7d3b      	ldrb	r3, [r7, #20]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	b25b      	sxtb	r3, r3
 8001254:	4013      	ands	r3, r2
 8001256:	b25a      	sxtb	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	b2d1      	uxtb	r1, r2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	771a      	strb	r2, [r3, #28]
 8001264:	e000      	b.n	8001268 <LCD5110_putpix+0x7a>
		return;
 8001266:	bf00      	nop
}
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b088      	sub	sp, #32
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e03d      	b.n	80012fe <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	e033      	b.n	80012f0 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da00      	bge.n	8001290 <LCD5110_drawBitmap+0x22>
 800128e:	3307      	adds	r3, #7
 8001290:	10db      	asrs	r3, r3, #3
 8001292:	461a      	mov	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	fb03 f202 	mul.w	r2, r3, r2
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	4413      	add	r3, r2
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	2201      	movs	r2, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	4013      	ands	r3, r2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	18d0      	adds	r0, r2, r3
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	18d1      	adds	r1, r2, r3
 80012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <LCD5110_drawBitmap+0x74>
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	e000      	b.n	80012e4 <LCD5110_drawBitmap+0x76>
 80012e2:	7dfa      	ldrb	r2, [r7, #23]
 80012e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e6:	f7ff ff82 	bl	80011ee <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbc7      	blt.n	8001288 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3301      	adds	r3, #1
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbbd      	blt.n	8001282 <LCD5110_drawBitmap+0x14>
		}
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	1df9      	adds	r1, r7, #7
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	2201      	movs	r2, #1
 8001328:	f005 fb27 	bl	800697a <HAL_SPI_Transmit>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	460b      	mov	r3, r1
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	897a      	ldrh	r2, [r7, #10]
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	f005 fb13 	bl	800697a <HAL_SPI_Transmit>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6898      	ldr	r0, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	889b      	ldrh	r3, [r3, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	f002 fc09 	bl	8003b88 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6998      	ldr	r0, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8a9b      	ldrh	r3, [r3, #20]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f002 fbf9 	bl	8003b88 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6998      	ldr	r0, [r3, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	8a9b      	ldrh	r3, [r3, #20]
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	f002 fbe9 	bl	8003b88 <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6918      	ldr	r0, [r3, #16]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	899b      	ldrh	r3, [r3, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f002 fbd9 	bl	8003b88 <HAL_GPIO_WritePin>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6918      	ldr	r0, [r3, #16]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	899b      	ldrh	r3, [r3, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	f002 fbc9 	bl	8003b88 <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	6039      	str	r1, [r7, #0]
 8001408:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f023 0320 	bic.w	r3, r3, #32
 8001410:	2b07      	cmp	r3, #7
 8001412:	dd01      	ble.n	8001418 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8001414:	2301      	movs	r3, #1
 8001416:	e008      	b.n	800142a <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	b2db      	uxtb	r3, r3
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff74 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	6039      	str	r1, [r7, #0]
 800143c:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f023 030d 	bic.w	r3, r3, #13
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8001448:	2302      	movs	r3, #2
 800144a:	e005      	b.n	8001458 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	da01      	bge.n	8001478 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8001474:	2303      	movs	r3, #3
 8001476:	e008      	b.n	800148a <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147e:	b2db      	uxtb	r3, r3
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff44 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	6039      	str	r1, [r7, #0]
 800149c:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d901      	bls.n	80014a8 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 80014a4:	2304      	movs	r3, #4
 80014a6:	e008      	b.n	80014ba <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff2c 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	6039      	str	r1, [r7, #0]
 80014cc:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	d901      	bls.n	80014d8 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 80014d4:	2305      	movs	r3, #5
 80014d6:	e008      	b.n	80014ea <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff14 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	6039      	str	r1, [r7, #0]
 80014fc:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db03      	blt.n	800150e <LCD5110_set_X_base+0x1c>
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	2b53      	cmp	r3, #83	; 0x53
 800150c:	dd01      	ble.n	8001512 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 800150e:	2307      	movs	r3, #7
 8001510:	e00a      	b.n	8001528 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151a:	b25b      	sxtb	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fef5 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db03      	blt.n	800154c <LCD5110_set_Y_base+0x1c>
 8001544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001548:	2b05      	cmp	r3, #5
 800154a:	dd01      	ble.n	8001550 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 800154c:	2307      	movs	r3, #7
 800154e:	e00a      	b.n	8001566 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	b25b      	sxtb	r3, r3
 8001554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001558:	b25b      	sxtb	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	6839      	ldr	r1, [r7, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fed6 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	603a      	str	r2, [r7, #0]
 8001578:	80fb      	strh	r3, [r7, #6]
 800157a:	460b      	mov	r3, r1
 800157c:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ffb4 	bl	80014f2 <LCD5110_set_X_base>
 800158a:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <LCD5110_set_XY_base+0x28>
		return res;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	e00c      	b.n	80015b0 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8001596:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffc7 	bl	8001530 <LCD5110_set_Y_base>
 80015a2:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <LCD5110_set_XY_base+0x40>
		return res;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	e000      	b.n	80015b0 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d2:	601a      	str	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	70fb      	strb	r3, [r7, #3]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70bb      	strb	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffdc 	bl	80015b8 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff feac 	bl	800135e <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fee9 	bl	80013de <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8001610:	bf00      	nop
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b01      	subs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1fa      	bne.n	8001612 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fece 	bl	80013be <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff febb 	bl	800139e <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fee7 	bl	80013fe <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8001630:	78bb      	ldrb	r3, [r7, #2]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff13 	bl	8001460 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 800163a:	787b      	ldrb	r3, [r7, #1]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff27 	bl	8001492 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8001644:	7e3b      	ldrb	r3, [r7, #24]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff3a 	bl	80014c2 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fed4 	bl	80013fe <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fee9 	bl	8001432 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8001660:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe73 	bl	800135e <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fe90 	bl	800139e <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	2100      	movs	r1, #0
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ff73 	bl	800156e <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fe78 	bl	800137e <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	331c      	adds	r3, #28
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe4c 	bl	8001336 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <keypad_init>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

LCD5110_display lcd1;
void keypad_init(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	b086      	sub	sp, #24
 80016ac:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ae:	1d3b      	adds	r3, r7, #4
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 80016bc:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80016c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c2:	2300      	movs	r3, #0
 80016c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c6:	2301      	movs	r3, #1
 80016c8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 80016ca:	4b21      	ldr	r3, [pc, #132]	; (8001750 <keypad_init+0xa8>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1d3a      	adds	r2, r7, #4
 80016d0:	4611      	mov	r1, r2
 80016d2:	4618      	mov	r0, r3
 80016d4:	f002 f8bc 	bl	8003850 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80016d8:	4b1e      	ldr	r3, [pc, #120]	; (8001754 <keypad_init+0xac>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	1d3a      	adds	r2, r7, #4
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f002 f8b5 	bl	8003850 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80016e6:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <keypad_init+0xb0>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	1d3a      	adds	r2, r7, #4
 80016ec:	4611      	mov	r1, r2
 80016ee:	4618      	mov	r0, r3
 80016f0:	f002 f8ae 	bl	8003850 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <keypad_init+0xb4>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	1d3a      	adds	r2, r7, #4
 80016fa:	4611      	mov	r1, r2
 80016fc:	4618      	mov	r0, r3
 80016fe:	f002 f8a7 	bl	8003850 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 8001702:	230f      	movs	r3, #15
 8001704:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001706:	2301      	movs	r3, #1
 8001708:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800170a:	2300      	movs	r3, #0
 800170c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 800170e:	4b14      	ldr	r3, [pc, #80]	; (8001760 <keypad_init+0xb8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1d3a      	adds	r2, r7, #4
 8001714:	4611      	mov	r1, r2
 8001716:	4618      	mov	r0, r3
 8001718:	f002 f89a 	bl	8003850 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 800171c:	4b11      	ldr	r3, [pc, #68]	; (8001764 <keypad_init+0xbc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1d3a      	adds	r2, r7, #4
 8001722:	4611      	mov	r1, r2
 8001724:	4618      	mov	r0, r3
 8001726:	f002 f893 	bl	8003850 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 800172a:	4b0f      	ldr	r3, [pc, #60]	; (8001768 <keypad_init+0xc0>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	1d3a      	adds	r2, r7, #4
 8001730:	4611      	mov	r1, r2
 8001732:	4618      	mov	r0, r3
 8001734:	f002 f88c 	bl	8003850 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8001738:	4b0c      	ldr	r3, [pc, #48]	; (800176c <keypad_init+0xc4>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	1d3a      	adds	r2, r7, #4
 800173e:	4611      	mov	r1, r2
 8001740:	4618      	mov	r0, r3
 8001742:	f002 f885 	bl	8003850 <HAL_GPIO_Init>
}
 8001746:	bf00      	nop
 8001748:	3718      	adds	r7, #24
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	20000000 	.word	0x20000000
 8001754:	20000004 	.word	0x20000004
 8001758:	20000008 	.word	0x20000008
 800175c:	2000000c 	.word	0x2000000c
 8001760:	20000010 	.word	0x20000010
 8001764:	20000014 	.word	0x20000014
 8001768:	20000018 	.word	0x20000018
 800176c:	2000001c 	.word	0x2000001c

08001770 <keypad_scan>:

char keypad_scan(void)
{
 8001770:	b590      	push	{r4, r7, lr}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'A'},
 8001776:	4b69      	ldr	r3, [pc, #420]	; (800191c <keypad_scan+0x1ac>)
 8001778:	1d3c      	adds	r4, r7, #4
 800177a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800177c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'B'},
                     {'7', '8', '9', 'C'},
                     {'*', '0', '#', 'D'}};

  for(int i = 0; i < 4; i++)
 8001780:	2300      	movs	r3, #0
 8001782:	617b      	str	r3, [r7, #20]
 8001784:	e0c1      	b.n	800190a <keypad_scan+0x19a>
  {
    switch(i)
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	2b03      	cmp	r3, #3
 800178a:	d87f      	bhi.n	800188c <keypad_scan+0x11c>
 800178c:	a201      	add	r2, pc, #4	; (adr r2, 8001794 <keypad_scan+0x24>)
 800178e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001792:	bf00      	nop
 8001794:	080017a5 	.word	0x080017a5
 8001798:	080017df 	.word	0x080017df
 800179c:	08001819 	.word	0x08001819
 80017a0:	08001853 	.word	0x08001853
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 80017a4:	4b5e      	ldr	r3, [pc, #376]	; (8001920 <keypad_scan+0x1b0>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	2101      	movs	r1, #1
 80017ac:	4618      	mov	r0, r3
 80017ae:	f002 f9eb 	bl	8003b88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80017b2:	4b5c      	ldr	r3, [pc, #368]	; (8001924 <keypad_scan+0x1b4>)
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2201      	movs	r2, #1
 80017b8:	2102      	movs	r1, #2
 80017ba:	4618      	mov	r0, r3
 80017bc:	f002 f9e4 	bl	8003b88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80017c0:	4b59      	ldr	r3, [pc, #356]	; (8001928 <keypad_scan+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2201      	movs	r2, #1
 80017c6:	2104      	movs	r1, #4
 80017c8:	4618      	mov	r0, r3
 80017ca:	f002 f9dd 	bl	8003b88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80017ce:	4b57      	ldr	r3, [pc, #348]	; (800192c <keypad_scan+0x1bc>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	2201      	movs	r2, #1
 80017d4:	2108      	movs	r1, #8
 80017d6:	4618      	mov	r0, r3
 80017d8:	f002 f9d6 	bl	8003b88 <HAL_GPIO_WritePin>
        break;
 80017dc:	e056      	b.n	800188c <keypad_scan+0x11c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80017de:	4b50      	ldr	r3, [pc, #320]	; (8001920 <keypad_scan+0x1b0>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	2201      	movs	r2, #1
 80017e4:	2101      	movs	r1, #1
 80017e6:	4618      	mov	r0, r3
 80017e8:	f002 f9ce 	bl	8003b88 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80017ec:	4b4d      	ldr	r3, [pc, #308]	; (8001924 <keypad_scan+0x1b4>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	2200      	movs	r2, #0
 80017f2:	2102      	movs	r1, #2
 80017f4:	4618      	mov	r0, r3
 80017f6:	f002 f9c7 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80017fa:	4b4b      	ldr	r3, [pc, #300]	; (8001928 <keypad_scan+0x1b8>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	2201      	movs	r2, #1
 8001800:	2104      	movs	r1, #4
 8001802:	4618      	mov	r0, r3
 8001804:	f002 f9c0 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001808:	4b48      	ldr	r3, [pc, #288]	; (800192c <keypad_scan+0x1bc>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2201      	movs	r2, #1
 800180e:	2108      	movs	r1, #8
 8001810:	4618      	mov	r0, r3
 8001812:	f002 f9b9 	bl	8003b88 <HAL_GPIO_WritePin>
    break;
 8001816:	e039      	b.n	800188c <keypad_scan+0x11c>

  case 2:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001818:	4b41      	ldr	r3, [pc, #260]	; (8001920 <keypad_scan+0x1b0>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2201      	movs	r2, #1
 800181e:	2101      	movs	r1, #1
 8001820:	4618      	mov	r0, r3
 8001822:	f002 f9b1 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001826:	4b3f      	ldr	r3, [pc, #252]	; (8001924 <keypad_scan+0x1b4>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2201      	movs	r2, #1
 800182c:	2102      	movs	r1, #2
 800182e:	4618      	mov	r0, r3
 8001830:	f002 f9aa 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8001834:	4b3c      	ldr	r3, [pc, #240]	; (8001928 <keypad_scan+0x1b8>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2200      	movs	r2, #0
 800183a:	2104      	movs	r1, #4
 800183c:	4618      	mov	r0, r3
 800183e:	f002 f9a3 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001842:	4b3a      	ldr	r3, [pc, #232]	; (800192c <keypad_scan+0x1bc>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	2201      	movs	r2, #1
 8001848:	2108      	movs	r1, #8
 800184a:	4618      	mov	r0, r3
 800184c:	f002 f99c 	bl	8003b88 <HAL_GPIO_WritePin>
    break;
 8001850:	e01c      	b.n	800188c <keypad_scan+0x11c>

  case 3:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001852:	4b33      	ldr	r3, [pc, #204]	; (8001920 <keypad_scan+0x1b0>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2201      	movs	r2, #1
 8001858:	2101      	movs	r1, #1
 800185a:	4618      	mov	r0, r3
 800185c:	f002 f994 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001860:	4b30      	ldr	r3, [pc, #192]	; (8001924 <keypad_scan+0x1b4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	2201      	movs	r2, #1
 8001866:	2102      	movs	r1, #2
 8001868:	4618      	mov	r0, r3
 800186a:	f002 f98d 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 800186e:	4b2e      	ldr	r3, [pc, #184]	; (8001928 <keypad_scan+0x1b8>)
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2201      	movs	r2, #1
 8001874:	2104      	movs	r1, #4
 8001876:	4618      	mov	r0, r3
 8001878:	f002 f986 	bl	8003b88 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 800187c:	4b2b      	ldr	r3, [pc, #172]	; (800192c <keypad_scan+0x1bc>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2200      	movs	r2, #0
 8001882:	2108      	movs	r1, #8
 8001884:	4618      	mov	r0, r3
 8001886:	f002 f97f 	bl	8003b88 <HAL_GPIO_WritePin>
    break;
 800188a:	bf00      	nop
}
// Read current rows
if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 800188c:	4b28      	ldr	r3, [pc, #160]	; (8001930 <keypad_scan+0x1c0>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2110      	movs	r1, #16
 8001892:	4618      	mov	r0, r3
 8001894:	f002 f960 	bl	8003b58 <HAL_GPIO_ReadPin>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d104      	bne.n	80018a8 <keypad_scan+0x138>
  return keys[0][i];
 800189e:	1d3a      	adds	r2, r7, #4
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	4413      	add	r3, r2
 80018a4:	781b      	ldrb	r3, [r3, #0]
 80018a6:	e035      	b.n	8001914 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 80018a8:	4b22      	ldr	r3, [pc, #136]	; (8001934 <keypad_scan+0x1c4>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	2120      	movs	r1, #32
 80018ae:	4618      	mov	r0, r3
 80018b0:	f002 f952 	bl	8003b58 <HAL_GPIO_ReadPin>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d105      	bne.n	80018c6 <keypad_scan+0x156>
  return keys[1][i];
 80018ba:	f107 0208 	add.w	r2, r7, #8
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	4413      	add	r3, r2
 80018c2:	781b      	ldrb	r3, [r3, #0]
 80018c4:	e026      	b.n	8001914 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80018c6:	4b1c      	ldr	r3, [pc, #112]	; (8001938 <keypad_scan+0x1c8>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2140      	movs	r1, #64	; 0x40
 80018cc:	4618      	mov	r0, r3
 80018ce:	f002 f943 	bl	8003b58 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <keypad_scan+0x174>
  return keys[2][i];
 80018d8:	f107 020c 	add.w	r2, r7, #12
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	e017      	b.n	8001914 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <keypad_scan+0x1cc>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ec:	4618      	mov	r0, r3
 80018ee:	f002 f933 	bl	8003b58 <HAL_GPIO_ReadPin>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d105      	bne.n	8001904 <keypad_scan+0x194>
  return keys[3][i];
 80018f8:	f107 0210 	add.w	r2, r7, #16
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4413      	add	r3, r2
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	e007      	b.n	8001914 <keypad_scan+0x1a4>
  for(int i = 0; i < 4; i++)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	3301      	adds	r3, #1
 8001908:	617b      	str	r3, [r7, #20]
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b03      	cmp	r3, #3
 800190e:	f77f af3a 	ble.w	8001786 <keypad_scan+0x16>
}
return 0; // No key pressed
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	371c      	adds	r7, #28
 8001918:	46bd      	mov	sp, r7
 800191a:	bd90      	pop	{r4, r7, pc}
 800191c:	0800cbc8 	.word	0x0800cbc8
 8001920:	20000010 	.word	0x20000010
 8001924:	20000014 	.word	0x20000014
 8001928:	20000018 	.word	0x20000018
 800192c:	2000001c 	.word	0x2000001c
 8001930:	20000000 	.word	0x20000000
 8001934:	20000004 	.word	0x20000004
 8001938:	20000008 	.word	0x20000008
 800193c:	2000000c 	.word	0x2000000c

08001940 <init_module>:
	char *last_command;
} module_t;

module_t gsm_module;

module_t init_module() {
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
    module_t newModule;
    newModule.last_response = strdup("");
 8001948:	4813      	ldr	r0, [pc, #76]	; (8001998 <init_module+0x58>)
 800194a:	f00a fbab 	bl	800c0a4 <strdup>
 800194e:	4603      	mov	r3, r0
 8001950:	60bb      	str	r3, [r7, #8]
    newModule.last_command = strdup("");
 8001952:	4811      	ldr	r0, [pc, #68]	; (8001998 <init_module+0x58>)
 8001954:	f00a fba6 	bl	800c0a4 <strdup>
 8001958:	4603      	mov	r3, r0
 800195a:	60fb      	str	r3, [r7, #12]

    if (newModule.last_response == NULL || newModule.last_command == NULL) {
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d002      	beq.n	8001968 <init_module+0x28>
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	2b00      	cmp	r3, #0
 8001966:	d10a      	bne.n	800197e <init_module+0x3e>
        fprintf(stderr, "Memory allocation failed\n");
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <init_module+0x5c>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	2219      	movs	r2, #25
 8001970:	2101      	movs	r1, #1
 8001972:	480b      	ldr	r0, [pc, #44]	; (80019a0 <init_module+0x60>)
 8001974:	f00a fa78 	bl	800be68 <fwrite>
        exit(EXIT_FAILURE);
 8001978:	2001      	movs	r0, #1
 800197a:	f00a f8a9 	bl	800bad0 <exit>
    }
    return newModule;
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	461a      	mov	r2, r3
 8001982:	f107 0308 	add.w	r3, r7, #8
 8001986:	e893 0003 	ldmia.w	r3, {r0, r1}
 800198a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	3710      	adds	r7, #16
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	0800cc74 	.word	0x0800cc74
 800199c:	200001b0 	.word	0x200001b0
 80019a0:	0800cc78 	.word	0x0800cc78

080019a4 <answer_call>:
	strcat(call_command, number);
	strcat(call_command, "\r\n");
	HAL_UART_Transmit(&huart1,(uint8_t *)call_command,strlen(call_command),100);
}

char *answer_call(module_t gsm_module){
 80019a4:	b590      	push	{r4, r7, lr}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	463b      	mov	r3, r7
 80019ac:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart1, (uint8_t *)CALL_ANSWER, strlen(CALL_ANSWER), 100);
 80019b0:	4b0a      	ldr	r3, [pc, #40]	; (80019dc <answer_call+0x38>)
 80019b2:	681c      	ldr	r4, [r3, #0]
 80019b4:	4b09      	ldr	r3, [pc, #36]	; (80019dc <answer_call+0x38>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fc1b 	bl	80001f4 <strlen>
 80019be:	4603      	mov	r3, r0
 80019c0:	b29a      	uxth	r2, r3
 80019c2:	2364      	movs	r3, #100	; 0x64
 80019c4:	4621      	mov	r1, r4
 80019c6:	4806      	ldr	r0, [pc, #24]	; (80019e0 <answer_call+0x3c>)
 80019c8:	f005 fa2b 	bl	8006e22 <HAL_UART_Transmit>
	HAL_Delay(200);
 80019cc:	20c8      	movs	r0, #200	; 0xc8
 80019ce:	f001 fd77 	bl	80034c0 <HAL_Delay>
}
 80019d2:	bf00      	nop
 80019d4:	4618      	mov	r0, r3
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd90      	pop	{r4, r7, pc}
 80019dc:	20000034 	.word	0x20000034
 80019e0:	2000a5e8 	.word	0x2000a5e8

080019e4 <end_call>:

void end_call(){
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)END_CALL, 9,100);
 80019e8:	4b04      	ldr	r3, [pc, #16]	; (80019fc <end_call+0x18>)
 80019ea:	6819      	ldr	r1, [r3, #0]
 80019ec:	2364      	movs	r3, #100	; 0x64
 80019ee:	2209      	movs	r2, #9
 80019f0:	4803      	ldr	r0, [pc, #12]	; (8001a00 <end_call+0x1c>)
 80019f2:	f005 fa16 	bl	8006e22 <HAL_UART_Transmit>
}
 80019f6:	bf00      	nop
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	20000030 	.word	0x20000030
 8001a00:	2000a5e8 	.word	0x2000a5e8

08001a04 <read_message>:

void read_message(module_t gsm_module, int number){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b084      	sub	sp, #16
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	f107 0308 	add.w	r3, r7, #8
 8001a0e:	e883 0003 	stmia.w	r3, {r0, r1}
 8001a12:	607a      	str	r2, [r7, #4]
	LCD5110_set_cursor(0, 0, &lcd1);
 8001a14:	4a15      	ldr	r2, [pc, #84]	; (8001a6c <read_message+0x68>)
 8001a16:	2100      	movs	r1, #0
 8001a18:	2000      	movs	r0, #0
 8001a1a:	f7ff f8af 	bl	8000b7c <LCD5110_set_cursor>
	LCD5110_print(numbers[99 - number], 0, &lcd1);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8001a24:	4613      	mov	r3, r2
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	4413      	add	r3, r2
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	4413      	add	r3, r2
 8001a2e:	4a10      	ldr	r2, [pc, #64]	; (8001a70 <read_message+0x6c>)
 8001a30:	4413      	add	r3, r2
 8001a32:	4a0e      	ldr	r2, [pc, #56]	; (8001a6c <read_message+0x68>)
 8001a34:	2100      	movs	r1, #0
 8001a36:	4618      	mov	r0, r3
 8001a38:	f7ff f8c3 	bl	8000bc2 <LCD5110_print>
	LCD5110_set_cursor(0, 10, &lcd1);
 8001a3c:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <read_message+0x68>)
 8001a3e:	210a      	movs	r1, #10
 8001a40:	2000      	movs	r0, #0
 8001a42:	f7ff f89b 	bl	8000b7c <LCD5110_set_cursor>
	LCD5110_print(messages[99 - number], 0, &lcd1);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8001a4c:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a50:	fb02 f303 	mul.w	r3, r2, r3
 8001a54:	4a07      	ldr	r2, [pc, #28]	; (8001a74 <read_message+0x70>)
 8001a56:	4413      	add	r3, r2
 8001a58:	4a04      	ldr	r2, [pc, #16]	; (8001a6c <read_message+0x68>)
 8001a5a:	2100      	movs	r1, #0
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f7ff f8b0 	bl	8000bc2 <LCD5110_print>
}
 8001a62:	bf00      	nop
 8001a64:	3710      	adds	r7, #16
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	200002b4 	.word	0x200002b4
 8001a70:	2000a124 	.word	0x2000a124
 8001a74:	20002bf4 	.word	0x20002bf4

08001a78 <handle_interrupts>:

void handle_interrupts(module_t gsm_module, char *rx_buff, int count){
 8001a78:	b590      	push	{r4, r7, lr}
 8001a7a:	b089      	sub	sp, #36	; 0x24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	f107 0408 	add.w	r4, r7, #8
 8001a82:	e884 0003 	stmia.w	r4, {r0, r1}
 8001a86:	607a      	str	r2, [r7, #4]
 8001a88:	603b      	str	r3, [r7, #0]
	if (count >= 5){
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	2b04      	cmp	r3, #4
 8001a8e:	f340 808c 	ble.w	8001baa <handle_interrupts+0x132>
		char first[2];
		char second[2];
		char third[2];
		char fourth[2];
		first[0] = rx_buff[2];
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	789b      	ldrb	r3, [r3, #2]
 8001a96:	773b      	strb	r3, [r7, #28]
		first[1] = '\0';
 8001a98:	2300      	movs	r3, #0
 8001a9a:	777b      	strb	r3, [r7, #29]
		second[0] = rx_buff[3];
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	78db      	ldrb	r3, [r3, #3]
 8001aa0:	763b      	strb	r3, [r7, #24]
		second[1] = '\0';
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	767b      	strb	r3, [r7, #25]
		third[0] = rx_buff[4];
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	791b      	ldrb	r3, [r3, #4]
 8001aaa:	753b      	strb	r3, [r7, #20]
		third[1] = '\0';
 8001aac:	2300      	movs	r3, #0
 8001aae:	757b      	strb	r3, [r7, #21]
		fourth[0] = rx_buff[5];
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	795b      	ldrb	r3, [r3, #5]
 8001ab4:	743b      	strb	r3, [r7, #16]
		fourth[1] = '\0';
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	747b      	strb	r3, [r7, #17]

		if (message_read){
 8001aba:	4b3d      	ldr	r3, [pc, #244]	; (8001bb0 <handle_interrupts+0x138>)
 8001abc:	781b      	ldrb	r3, [r3, #0]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d009      	beq.n	8001ad6 <handle_interrupts+0x5e>
			LCD5110_set_cursor(0, 0, &lcd1);
 8001ac2:	4a3c      	ldr	r2, [pc, #240]	; (8001bb4 <handle_interrupts+0x13c>)
 8001ac4:	2100      	movs	r1, #0
 8001ac6:	2000      	movs	r0, #0
 8001ac8:	f7ff f858 	bl	8000b7c <LCD5110_set_cursor>
			LCD5110_print(rx_buff, 0, &lcd1);
 8001acc:	4a39      	ldr	r2, [pc, #228]	; (8001bb4 <handle_interrupts+0x13c>)
 8001ace:	2100      	movs	r1, #0
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f7ff f876 	bl	8000bc2 <LCD5110_print>

		}
		if (strcmp(rx_buff, "OK\r\n") == 0){
 8001ad6:	4938      	ldr	r1, [pc, #224]	; (8001bb8 <handle_interrupts+0x140>)
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7fe fb81 	bl	80001e0 <strcmp>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d05f      	beq.n	8001ba4 <handle_interrupts+0x12c>
			return;
		}
		if (strcmp(rx_buff, "ERROR\r\n") == 0){
 8001ae4:	4935      	ldr	r1, [pc, #212]	; (8001bbc <handle_interrupts+0x144>)
 8001ae6:	6878      	ldr	r0, [r7, #4]
 8001ae8:	f7fe fb7a 	bl	80001e0 <strcmp>
 8001aec:	4603      	mov	r3, r0
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d05a      	beq.n	8001ba8 <handle_interrupts+0x130>
			return;
		}
		if ((second[0] == 'C' && third[0] == 'A' && fourth[0] == 'R') || (first[0] == 'R' && second[0] == 'O' && third[0] == 'R')){
 8001af2:	7e3b      	ldrb	r3, [r7, #24]
 8001af4:	2b43      	cmp	r3, #67	; 0x43
 8001af6:	d105      	bne.n	8001b04 <handle_interrupts+0x8c>
 8001af8:	7d3b      	ldrb	r3, [r7, #20]
 8001afa:	2b41      	cmp	r3, #65	; 0x41
 8001afc:	d102      	bne.n	8001b04 <handle_interrupts+0x8c>
 8001afe:	7c3b      	ldrb	r3, [r7, #16]
 8001b00:	2b52      	cmp	r3, #82	; 0x52
 8001b02:	d008      	beq.n	8001b16 <handle_interrupts+0x9e>
 8001b04:	7f3b      	ldrb	r3, [r7, #28]
 8001b06:	2b52      	cmp	r3, #82	; 0x52
 8001b08:	d108      	bne.n	8001b1c <handle_interrupts+0xa4>
 8001b0a:	7e3b      	ldrb	r3, [r7, #24]
 8001b0c:	2b4f      	cmp	r3, #79	; 0x4f
 8001b0e:	d105      	bne.n	8001b1c <handle_interrupts+0xa4>
 8001b10:	7d3b      	ldrb	r3, [r7, #20]
 8001b12:	2b52      	cmp	r3, #82	; 0x52
 8001b14:	d102      	bne.n	8001b1c <handle_interrupts+0xa4>
			end_call_flag = true;
 8001b16:	4b2a      	ldr	r3, [pc, #168]	; (8001bc0 <handle_interrupts+0x148>)
 8001b18:	2201      	movs	r2, #1
 8001b1a:	701a      	strb	r2, [r3, #0]
		}
		if (first[0] == 'R' && second[0] == 'I' && third[0] == 'N' && fourth[0] == 'G'){
 8001b1c:	7f3b      	ldrb	r3, [r7, #28]
 8001b1e:	2b52      	cmp	r3, #82	; 0x52
 8001b20:	d12d      	bne.n	8001b7e <handle_interrupts+0x106>
 8001b22:	7e3b      	ldrb	r3, [r7, #24]
 8001b24:	2b49      	cmp	r3, #73	; 0x49
 8001b26:	d12a      	bne.n	8001b7e <handle_interrupts+0x106>
 8001b28:	7d3b      	ldrb	r3, [r7, #20]
 8001b2a:	2b4e      	cmp	r3, #78	; 0x4e
 8001b2c:	d127      	bne.n	8001b7e <handle_interrupts+0x106>
 8001b2e:	7c3b      	ldrb	r3, [r7, #16]
 8001b30:	2b47      	cmp	r3, #71	; 0x47
 8001b32:	d124      	bne.n	8001b7e <handle_interrupts+0x106>
			cursor_on_phone = false;
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <handle_interrupts+0x14c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	701a      	strb	r2, [r3, #0]
			screen_main = false;
 8001b3a:	4b23      	ldr	r3, [pc, #140]	; (8001bc8 <handle_interrupts+0x150>)
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
			cursor_on_message = false;
 8001b40:	4b22      	ldr	r3, [pc, #136]	; (8001bcc <handle_interrupts+0x154>)
 8001b42:	2200      	movs	r2, #0
 8001b44:	701a      	strb	r2, [r3, #0]
			screen_message = false;
 8001b46:	4b22      	ldr	r3, [pc, #136]	; (8001bd0 <handle_interrupts+0x158>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	701a      	strb	r2, [r3, #0]
			type_message_screen = false;
 8001b4c:	4b21      	ldr	r3, [pc, #132]	; (8001bd4 <handle_interrupts+0x15c>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
			screen_begin = false;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <handle_interrupts+0x160>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	701a      	strb	r2, [r3, #0]
			want_to_send_digits = false;
 8001b58:	4b20      	ldr	r3, [pc, #128]	; (8001bdc <handle_interrupts+0x164>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	701a      	strb	r2, [r3, #0]
			get_call = true;
 8001b5e:	4b20      	ldr	r3, [pc, #128]	; (8001be0 <handle_interrupts+0x168>)
 8001b60:	2201      	movs	r2, #1
 8001b62:	701a      	strb	r2, [r3, #0]
			memcpy(buf, &rx_buff[10], 10);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f103 020a 	add.w	r2, r3, #10
 8001b6a:	4b1e      	ldr	r3, [pc, #120]	; (8001be4 <handle_interrupts+0x16c>)
 8001b6c:	6810      	ldr	r0, [r2, #0]
 8001b6e:	6851      	ldr	r1, [r2, #4]
 8001b70:	c303      	stmia	r3!, {r0, r1}
 8001b72:	8912      	ldrh	r2, [r2, #8]
 8001b74:	801a      	strh	r2, [r3, #0]
			buf[10] = '\0';
 8001b76:	4b1b      	ldr	r3, [pc, #108]	; (8001be4 <handle_interrupts+0x16c>)
 8001b78:	2200      	movs	r2, #0
 8001b7a:	729a      	strb	r2, [r3, #10]
			return;
 8001b7c:	e015      	b.n	8001baa <handle_interrupts+0x132>
		}
		if (rx_buff[0] == '+' && rx_buff[0] == 'C' && rx_buff[0] == 'M' && rx_buff[0] == 'G'){
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b2b      	cmp	r3, #43	; 0x2b
 8001b84:	d111      	bne.n	8001baa <handle_interrupts+0x132>
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	2b43      	cmp	r3, #67	; 0x43
 8001b8c:	d10d      	bne.n	8001baa <handle_interrupts+0x132>
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	781b      	ldrb	r3, [r3, #0]
 8001b92:	2b4d      	cmp	r3, #77	; 0x4d
 8001b94:	d109      	bne.n	8001baa <handle_interrupts+0x132>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b47      	cmp	r3, #71	; 0x47
 8001b9c:	d105      	bne.n	8001baa <handle_interrupts+0x132>
			gsm_module.last_response = rx_buff;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	60bb      	str	r3, [r7, #8]
			return;
 8001ba2:	e002      	b.n	8001baa <handle_interrupts+0x132>
			return;
 8001ba4:	bf00      	nop
 8001ba6:	e000      	b.n	8001baa <handle_interrupts+0x132>
			return;
 8001ba8:	bf00      	nop
		}
	}

}
 8001baa:	3724      	adds	r7, #36	; 0x24
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd90      	pop	{r4, r7, pc}
 8001bb0:	2000a583 	.word	0x2000a583
 8001bb4:	200002b4 	.word	0x200002b4
 8001bb8:	0800cca0 	.word	0x0800cca0
 8001bbc:	0800cca8 	.word	0x0800cca8
 8001bc0:	2000a581 	.word	0x2000a581
 8001bc4:	20000020 	.word	0x20000020
 8001bc8:	2000a57d 	.word	0x2000a57d
 8001bcc:	2000a57e 	.word	0x2000a57e
 8001bd0:	2000a57f 	.word	0x2000a57f
 8001bd4:	2000a580 	.word	0x2000a580
 8001bd8:	20000021 	.word	0x20000021
 8001bdc:	20000022 	.word	0x20000022
 8001be0:	2000a57c 	.word	0x2000a57c
 8001be4:	200004d8 	.word	0x200004d8

08001be8 <init_screen.2>:

    gsm_module = init_module();

    keypad_init();

    void init_screen() {
 8001be8:	b590      	push	{r4, r7, lr}
 8001bea:	b083      	sub	sp, #12
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	4664      	mov	r4, ip
 8001bf0:	f8c7 c004 	str.w	ip, [r7, #4]
		LCD5110_clear_scr(&lcd1);
 8001bf4:	4818      	ldr	r0, [pc, #96]	; (8001c58 <init_screen.2+0x70>)
 8001bf6:	f7fe ffd3 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8001bfa:	4817      	ldr	r0, [pc, #92]	; (8001c58 <init_screen.2+0x70>)
 8001bfc:	f7fe ffb2 	bl	8000b64 <LCD5110_refresh>
		LCD5110_rect(&rect, 1, &lcd1);
 8001c00:	4623      	mov	r3, r4
 8001c02:	4a15      	ldr	r2, [pc, #84]	; (8001c58 <init_screen.2+0x70>)
 8001c04:	2101      	movs	r1, #1
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff f973 	bl	8000ef2 <LCD5110_rect>
		LCD5110_rect_fill(&rect, 1, &lcd1);
 8001c0c:	4623      	mov	r3, r4
 8001c0e:	4a12      	ldr	r2, [pc, #72]	; (8001c58 <init_screen.2+0x70>)
 8001c10:	2101      	movs	r1, #1
 8001c12:	4618      	mov	r0, r3
 8001c14:	f7ff f97f 	bl	8000f16 <LCD5110_rect_fill>
		LCD5110_set_cursor(10, 15, &lcd1);
 8001c18:	4a0f      	ldr	r2, [pc, #60]	; (8001c58 <init_screen.2+0x70>)
 8001c1a:	210f      	movs	r1, #15
 8001c1c:	200a      	movs	r0, #10
 8001c1e:	f7fe ffad 	bl	8000b7c <LCD5110_set_cursor>

		LCD5110_print("A-call", 0, &lcd1);
 8001c22:	4a0d      	ldr	r2, [pc, #52]	; (8001c58 <init_screen.2+0x70>)
 8001c24:	2100      	movs	r1, #0
 8001c26:	480d      	ldr	r0, [pc, #52]	; (8001c5c <init_screen.2+0x74>)
 8001c28:	f7fe ffcb 	bl	8000bc2 <LCD5110_print>

		LCD5110_set_cursor(10, 35, &lcd1);
 8001c2c:	4a0a      	ldr	r2, [pc, #40]	; (8001c58 <init_screen.2+0x70>)
 8001c2e:	2123      	movs	r1, #35	; 0x23
 8001c30:	200a      	movs	r0, #10
 8001c32:	f7fe ffa3 	bl	8000b7c <LCD5110_set_cursor>

		LCD5110_print("B-back", 0, &lcd1);
 8001c36:	4a08      	ldr	r2, [pc, #32]	; (8001c58 <init_screen.2+0x70>)
 8001c38:	2100      	movs	r1, #0
 8001c3a:	4809      	ldr	r0, [pc, #36]	; (8001c60 <init_screen.2+0x78>)
 8001c3c:	f7fe ffc1 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 8001c40:	4a05      	ldr	r2, [pc, #20]	; (8001c58 <init_screen.2+0x70>)
 8001c42:	2100      	movs	r1, #0
 8001c44:	2000      	movs	r0, #0
 8001c46:	f7fe ff99 	bl	8000b7c <LCD5110_set_cursor>
		is_call = false;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    }
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd90      	pop	{r4, r7, pc}
 8001c58:	200002b4 	.word	0x200002b4
 8001c5c:	0800ccb0 	.word	0x0800ccb0
 8001c60:	0800ccb8 	.word	0x0800ccb8

08001c64 <main>:
{
 8001c64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c66:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8001c6a:	af02      	add	r7, sp, #8
int main(void)
 8001c6c:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8001c70:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001c74:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001c78:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  HAL_Init();
 8001c7c:	f001 fbae 	bl	80033dc <HAL_Init>
  SystemClock_Config();
 8001c80:	f001 f812 	bl	8002ca8 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001c84:	f001 f878 	bl	8002d78 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 8001c88:	f7fe fc90 	bl	80005ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8001c8c:	f7fe fdc8 	bl	8000820 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001c90:	f7fe fe3c 	bl	800090c <MX_I2S2_Init>
  MX_I2S3_Init();
 8001c94:	f7fe fe68 	bl	8000968 <MX_I2S3_Init>
  MX_SPI1_Init();
 8001c98:	f001 f90c 	bl	8002eb4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8001c9c:	f009 fadc 	bl	800b258 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8001ca0:	f001 fad8 	bl	8003254 <MX_USART1_UART_Init>
  	lcd1.hw_conf.spi_handle = &hspi1;
 8001ca4:	4bb7      	ldr	r3, [pc, #732]	; (8001f84 <main+0x320>)
 8001ca6:	4ab8      	ldr	r2, [pc, #736]	; (8001f88 <main+0x324>)
 8001ca8:	601a      	str	r2, [r3, #0]
    lcd1.hw_conf.spi_cs_pin =  GPIO_PIN_2;
 8001caa:	4bb6      	ldr	r3, [pc, #728]	; (8001f84 <main+0x320>)
 8001cac:	2204      	movs	r2, #4
 8001cae:	809a      	strh	r2, [r3, #4]
    lcd1.hw_conf.spi_cs_port = GPIOA;
 8001cb0:	4bb4      	ldr	r3, [pc, #720]	; (8001f84 <main+0x320>)
 8001cb2:	4ab6      	ldr	r2, [pc, #728]	; (8001f8c <main+0x328>)
 8001cb4:	609a      	str	r2, [r3, #8]
    lcd1.hw_conf.rst_pin =  GPIO_PIN_0;
 8001cb6:	4bb3      	ldr	r3, [pc, #716]	; (8001f84 <main+0x320>)
 8001cb8:	2201      	movs	r2, #1
 8001cba:	819a      	strh	r2, [r3, #12]
    lcd1.hw_conf.rst_port = GPIOC;
 8001cbc:	4bb1      	ldr	r3, [pc, #708]	; (8001f84 <main+0x320>)
 8001cbe:	4ab4      	ldr	r2, [pc, #720]	; (8001f90 <main+0x32c>)
 8001cc0:	611a      	str	r2, [r3, #16]
    lcd1.hw_conf.dc_pin =  GPIO_PIN_3;
 8001cc2:	4bb0      	ldr	r3, [pc, #704]	; (8001f84 <main+0x320>)
 8001cc4:	2208      	movs	r2, #8
 8001cc6:	829a      	strh	r2, [r3, #20]
    lcd1.hw_conf.dc_port = GPIOA;
 8001cc8:	4bae      	ldr	r3, [pc, #696]	; (8001f84 <main+0x320>)
 8001cca:	4ab0      	ldr	r2, [pc, #704]	; (8001f8c <main+0x328>)
 8001ccc:	619a      	str	r2, [r3, #24]
    lcd1.def_scr = lcd5110_def_scr;
 8001cce:	4bad      	ldr	r3, [pc, #692]	; (8001f84 <main+0x320>)
 8001cd0:	4ab0      	ldr	r2, [pc, #704]	; (8001f94 <main+0x330>)
 8001cd2:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001cd6:	4614      	mov	r4, r2
 8001cd8:	6820      	ldr	r0, [r4, #0]
 8001cda:	6861      	ldr	r1, [r4, #4]
 8001cdc:	68a2      	ldr	r2, [r4, #8]
 8001cde:	c307      	stmia	r3!, {r0, r1, r2}
 8001ce0:	89a2      	ldrh	r2, [r4, #12]
 8001ce2:	801a      	strh	r2, [r3, #0]
    LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	9300      	str	r3, [sp, #0]
 8001ce8:	2302      	movs	r3, #2
 8001cea:	2240      	movs	r2, #64	; 0x40
 8001cec:	210c      	movs	r1, #12
 8001cee:	48a5      	ldr	r0, [pc, #660]	; (8001f84 <main+0x320>)
 8001cf0:	f7ff fc76 	bl	80015e0 <LCD5110_init>
		sprintf(ATcommand,"AT\r\n");
 8001cf4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001cf8:	49a7      	ldr	r1, [pc, #668]	; (8001f98 <main+0x334>)
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f00a f8c2 	bl	800be84 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),100);
 8001d00:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7fe fa75 	bl	80001f4 <strlen>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b29a      	uxth	r2, r3
 8001d0e:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8001d12:	2364      	movs	r3, #100	; 0x64
 8001d14:	48a1      	ldr	r0, [pc, #644]	; (8001f9c <main+0x338>)
 8001d16:	f005 f884 	bl	8006e22 <HAL_UART_Transmit>
		HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8001d1a:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8001d1e:	230a      	movs	r3, #10
 8001d20:	220a      	movs	r2, #10
 8001d22:	489e      	ldr	r0, [pc, #632]	; (8001f9c <main+0x338>)
 8001d24:	f005 f90f 	bl	8006f46 <HAL_UART_Receive>
		if(strstr((char *)res,"OK"))
 8001d28:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d2c:	499c      	ldr	r1, [pc, #624]	; (8001fa0 <main+0x33c>)
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00a f9d5 	bl	800c0de <strstr>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d006      	beq.n	8001d48 <main+0xe4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001d40:	4898      	ldr	r0, [pc, #608]	; (8001fa4 <main+0x340>)
 8001d42:	f001 ff21 	bl	8003b88 <HAL_GPIO_WritePin>
 8001d46:	e005      	b.n	8001d54 <main+0xf0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);    // red
 8001d48:	2201      	movs	r2, #1
 8001d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001d4e:	4895      	ldr	r0, [pc, #596]	; (8001fa4 <main+0x340>)
 8001d50:	f001 ff1a 	bl	8003b88 <HAL_GPIO_WritePin>
    int pos = 0;
 8001d54:	2300      	movs	r3, #0
 8001d56:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    char key_pressed = 0;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
    rect_t rect={0,0, 83, 10};
 8001d60:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d64:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d68:	4a8f      	ldr	r2, [pc, #572]	; (8001fa8 <main+0x344>)
 8001d6a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001d6e:	e883 0003 	stmia.w	r3, {r0, r1}
    const unsigned char main_screen_image[] = {
 8001d72:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d76:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d7a:	4a8c      	ldr	r2, [pc, #560]	; (8001fac <main+0x348>)
 8001d7c:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8001d80:	4615      	mov	r5, r2
 8001d82:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d8e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d92:	c403      	stmia	r4!, {r0, r1}
 8001d94:	7022      	strb	r2, [r4, #0]
    const unsigned char main_screen_snake[] = {
 8001d96:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001d9a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d9e:	4a84      	ldr	r2, [pc, #528]	; (8001fb0 <main+0x34c>)
 8001da0:	4614      	mov	r4, r2
 8001da2:	f103 0c7b 	add.w	ip, r3, #123	; 0x7b
 8001da6:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001daa:	4665      	mov	r5, ip
 8001dac:	4626      	mov	r6, r4
 8001dae:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001db0:	6028      	str	r0, [r5, #0]
 8001db2:	6069      	str	r1, [r5, #4]
 8001db4:	60aa      	str	r2, [r5, #8]
 8001db6:	60eb      	str	r3, [r5, #12]
 8001db8:	3410      	adds	r4, #16
 8001dba:	f10c 0c10 	add.w	ip, ip, #16
 8001dbe:	4574      	cmp	r4, lr
 8001dc0:	d1f3      	bne.n	8001daa <main+0x146>
 8001dc2:	4662      	mov	r2, ip
 8001dc4:	4623      	mov	r3, r4
 8001dc6:	cb03      	ldmia	r3!, {r0, r1}
 8001dc8:	6010      	str	r0, [r2, #0]
 8001dca:	6051      	str	r1, [r2, #4]
 8001dcc:	781b      	ldrb	r3, [r3, #0]
 8001dce:	7213      	strb	r3, [r2, #8]
    const unsigned char main_message[] = {
 8001dd0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001dd4:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001dd8:	4a76      	ldr	r2, [pc, #472]	; (8001fb4 <main+0x350>)
 8001dda:	4614      	mov	r4, r2
 8001ddc:	f103 0c09 	add.w	ip, r3, #9
 8001de0:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001de4:	4665      	mov	r5, ip
 8001de6:	4626      	mov	r6, r4
 8001de8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001dea:	6028      	str	r0, [r5, #0]
 8001dec:	6069      	str	r1, [r5, #4]
 8001dee:	60aa      	str	r2, [r5, #8]
 8001df0:	60eb      	str	r3, [r5, #12]
 8001df2:	3410      	adds	r4, #16
 8001df4:	f10c 0c10 	add.w	ip, ip, #16
 8001df8:	4574      	cmp	r4, lr
 8001dfa:	d1f3      	bne.n	8001de4 <main+0x180>
 8001dfc:	4662      	mov	r2, ip
 8001dfe:	4623      	mov	r3, r4
 8001e00:	cb03      	ldmia	r3!, {r0, r1}
 8001e02:	6010      	str	r0, [r2, #0]
 8001e04:	6051      	str	r1, [r2, #4]
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	7213      	strb	r3, [r2, #8]
    const unsigned char write_message[] = {
 8001e0a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e0e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001e12:	4a69      	ldr	r2, [pc, #420]	; (8001fb8 <main+0x354>)
 8001e14:	4614      	mov	r4, r2
 8001e16:	f103 0c42 	add.w	ip, r3, #66	; 0x42
 8001e1a:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001e1e:	4665      	mov	r5, ip
 8001e20:	4626      	mov	r6, r4
 8001e22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001e24:	6028      	str	r0, [r5, #0]
 8001e26:	6069      	str	r1, [r5, #4]
 8001e28:	60aa      	str	r2, [r5, #8]
 8001e2a:	60eb      	str	r3, [r5, #12]
 8001e2c:	3410      	adds	r4, #16
 8001e2e:	f10c 0c10 	add.w	ip, ip, #16
 8001e32:	4574      	cmp	r4, lr
 8001e34:	d1f3      	bne.n	8001e1e <main+0x1ba>
 8001e36:	4662      	mov	r2, ip
 8001e38:	4623      	mov	r3, r4
 8001e3a:	cb03      	ldmia	r3!, {r0, r1}
 8001e3c:	6010      	str	r0, [r2, #0]
 8001e3e:	6051      	str	r1, [r2, #4]
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	7213      	strb	r3, [r2, #8]
    char* letters_for_keys[] = {
 8001e44:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e48:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8001e4c:	4a5b      	ldr	r2, [pc, #364]	; (8001fbc <main+0x358>)
 8001e4e:	461c      	mov	r4, r3
 8001e50:	4615      	mov	r5, r2
 8001e52:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e54:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e5a:	682b      	ldr	r3, [r5, #0]
 8001e5c:	6023      	str	r3, [r4, #0]
    int letters[] = {0,0,0,0,0,0,0,0,0};
 8001e5e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e62:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8001e66:	4618      	mov	r0, r3
 8001e68:	2324      	movs	r3, #36	; 0x24
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	2100      	movs	r1, #0
 8001e6e:	f00a f901 	bl	800c074 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t *)REC_MODE,strlen(REC_MODE),100);
 8001e72:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <main+0x35c>)
 8001e74:	681c      	ldr	r4, [r3, #0]
 8001e76:	4b52      	ldr	r3, [pc, #328]	; (8001fc0 <main+0x35c>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe f9ba 	bl	80001f4 <strlen>
 8001e80:	4603      	mov	r3, r0
 8001e82:	b29a      	uxth	r2, r3
 8001e84:	2364      	movs	r3, #100	; 0x64
 8001e86:	4621      	mov	r1, r4
 8001e88:	4844      	ldr	r0, [pc, #272]	; (8001f9c <main+0x338>)
 8001e8a:	f004 ffca 	bl	8006e22 <HAL_UART_Transmit>
    char message[32] = {0};
 8001e8e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001e92:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001e96:	2200      	movs	r2, #0
 8001e98:	601a      	str	r2, [r3, #0]
 8001e9a:	3304      	adds	r3, #4
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
 8001ea0:	605a      	str	r2, [r3, #4]
 8001ea2:	609a      	str	r2, [r3, #8]
 8001ea4:	60da      	str	r2, [r3, #12]
 8001ea6:	611a      	str	r2, [r3, #16]
 8001ea8:	615a      	str	r2, [r3, #20]
 8001eaa:	619a      	str	r2, [r3, #24]
    int message_pos = 0;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    gsm_module = init_module();
 8001eb2:	4c44      	ldr	r4, [pc, #272]	; (8001fc4 <main+0x360>)
 8001eb4:	463b      	mov	r3, r7
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7ff fd42 	bl	8001940 <init_module>
 8001ebc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8001ec0:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 8001ec4:	4623      	mov	r3, r4
 8001ec6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001eca:	e883 0003 	stmia.w	r3, {r0, r1}
    keypad_init();
 8001ece:	f7ff fbeb 	bl	80016a8 <keypad_init>





    main_screen(cursor_on_phone - 1);
 8001ed2:	4b3d      	ldr	r3, [pc, #244]	; (8001fc8 <main+0x364>)
 8001ed4:	781b      	ldrb	r3, [r3, #0]
 8001ed6:	3b01      	subs	r3, #1
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001ede:	4694      	mov	ip, r2
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 fdcf 	bl	8002a84 <main_screen.5>

    HAL_UART_Receive_IT(&huart1, usart1_rx_buf, 1);
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	4938      	ldr	r1, [pc, #224]	; (8001fcc <main+0x368>)
 8001eea:	482c      	ldr	r0, [pc, #176]	; (8001f9c <main+0x338>)
 8001eec:	f005 f8cd 	bl	800708a <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    key_pressed = keypad_scan();
 8001ef0:	f7ff fc3e 	bl	8001770 <keypad_scan>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
    	if (get_call){
 8001efa:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <main+0x36c>)
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d06c      	beq.n	8001fdc <main+0x378>
    		get_call_screen(buf);
 8001f02:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001f06:	469c      	mov	ip, r3
 8001f08:	4832      	ldr	r0, [pc, #200]	; (8001fd4 <main+0x370>)
 8001f0a:	f000 fd85 	bl	8002a18 <get_call_screen.0>
    		if (key_pressed == 'A'){
 8001f0e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001f12:	2b41      	cmp	r3, #65	; 0x41
 8001f14:	d111      	bne.n	8001f3a <main+0x2d6>
    			answer_call(gsm_module);
 8001f16:	4b2b      	ldr	r3, [pc, #172]	; (8001fc4 <main+0x360>)
 8001f18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001f1c:	f7ff fd42 	bl	80019a4 <answer_call>
    			get_call = false;
 8001f20:	4b2b      	ldr	r3, [pc, #172]	; (8001fd0 <main+0x36c>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	701a      	strb	r2, [r3, #0]
    			screen_main = true;
 8001f26:	4b2c      	ldr	r3, [pc, #176]	; (8001fd8 <main+0x374>)
 8001f28:	2201      	movs	r2, #1
 8001f2a:	701a      	strb	r2, [r3, #0]
    			call_screen();
 8001f2c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8001f30:	469c      	mov	ip, r3
 8001f32:	f000 fced 	bl	8002910 <call_screen.6>
 8001f36:	f000 bcc3 	b.w	80028c0 <main+0xc5c>
    		}
    		else if (key_pressed == 'B'){
 8001f3a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001f3e:	2b42      	cmp	r3, #66	; 0x42
 8001f40:	f040 84be 	bne.w	80028c0 <main+0xc5c>
    			end_call();
 8001f44:	f7ff fd4e 	bl	80019e4 <end_call>
    			get_call = false;
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <main+0x36c>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
    			screen_main = true;
 8001f4e:	4b22      	ldr	r3, [pc, #136]	; (8001fd8 <main+0x374>)
 8001f50:	2201      	movs	r2, #1
 8001f52:	701a      	strb	r2, [r3, #0]
				memset(buf, ' ', sizeof(buf) - 1);
 8001f54:	2209      	movs	r2, #9
 8001f56:	2120      	movs	r1, #32
 8001f58:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <main+0x370>)
 8001f5a:	f00a f88b 	bl	800c074 <memset>
				buf[0] = '\0';
 8001f5e:	4b1d      	ldr	r3, [pc, #116]	; (8001fd4 <main+0x370>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
				pos = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    			main_screen(cursor_on_phone - 1);
 8001f6a:	4b17      	ldr	r3, [pc, #92]	; (8001fc8 <main+0x364>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8001f76:	4694      	mov	ip, r2
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f000 fd83 	bl	8002a84 <main_screen.5>
 8001f7e:	f000 bc9f 	b.w	80028c0 <main+0xc5c>
 8001f82:	bf00      	nop
 8001f84:	200002b4 	.word	0x200002b4
 8001f88:	2000a58c 	.word	0x2000a58c
 8001f8c:	40020000 	.word	0x40020000
 8001f90:	40020800 	.word	0x40020800
 8001f94:	0800d4dc 	.word	0x0800d4dc
 8001f98:	0800ccc0 	.word	0x0800ccc0
 8001f9c:	2000a5e8 	.word	0x2000a5e8
 8001fa0:	0800ccc8 	.word	0x0800ccc8
 8001fa4:	40020c00 	.word	0x40020c00
 8001fa8:	0800cccc 	.word	0x0800cccc
 8001fac:	0800ccd4 	.word	0x0800ccd4
 8001fb0:	0800cd10 	.word	0x0800cd10
 8001fb4:	0800cd4c 	.word	0x0800cd4c
 8001fb8:	0800cd88 	.word	0x0800cd88
 8001fbc:	0800cde8 	.word	0x0800cde8
 8001fc0:	20000038 	.word	0x20000038
 8001fc4:	2000a584 	.word	0x2000a584
 8001fc8:	20000020 	.word	0x20000020
 8001fcc:	200004e4 	.word	0x200004e4
 8001fd0:	2000a57c 	.word	0x2000a57c
 8001fd4:	200004d8 	.word	0x200004d8
 8001fd8:	2000a57d 	.word	0x2000a57d
    		}
    	}
    	else if(key_pressed != 0 || end_call_flag)
 8001fdc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d104      	bne.n	8001fee <main+0x38a>
 8001fe4:	4bd1      	ldr	r3, [pc, #836]	; (800232c <main+0x6c8>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8469 	beq.w	80028c0 <main+0xc5c>
	    {
	    	if (type_message_screen) {
 8001fee:	4bd0      	ldr	r3, [pc, #832]	; (8002330 <main+0x6cc>)
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 817f 	beq.w	80022f6 <main+0x692>
	    		if (!want_to_send_digits) {
 8001ff8:	4bce      	ldr	r3, [pc, #824]	; (8002334 <main+0x6d0>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	f083 0301 	eor.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 80eb 	beq.w	80021de <main+0x57a>
					if (key_pressed >= '0' && key_pressed <= '9') {
 8002008:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800200c:	2b2f      	cmp	r3, #47	; 0x2f
 800200e:	d918      	bls.n	8002042 <main+0x3de>
 8002010:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002014:	2b39      	cmp	r3, #57	; 0x39
 8002016:	d814      	bhi.n	8002042 <main+0x3de>
						int num = key_pressed - '0';
 8002018:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800201c:	3b30      	subs	r3, #48	; 0x30
 800201e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
						letters[num - 1]++;
 8002022:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002026:	3b01      	subs	r3, #1
 8002028:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800202c:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002030:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002034:	1c51      	adds	r1, r2, #1
 8002036:	f507 7208 	add.w	r2, r7, #544	; 0x220
 800203a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800203e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (key_pressed == 'C') {
 8002042:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002046:	2b43      	cmp	r3, #67	; 0x43
 8002048:	d169      	bne.n	800211e <main+0x4ba>
						int maxindex = 0;
 800204a:	2300      	movs	r3, #0
 800204c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
						for (int i = 0; i < 9; i++) {
 8002050:	2300      	movs	r3, #0
 8002052:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002056:	e01a      	b.n	800208e <main+0x42a>
								if (letters[i] > letters[maxindex]) {
 8002058:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800205c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002060:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002064:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002068:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800206c:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002070:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8002074:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002078:	429a      	cmp	r2, r3
 800207a:	dd03      	ble.n	8002084 <main+0x420>
									maxindex = i;
 800207c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002080:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
						for (int i = 0; i < 9; i++) {
 8002084:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002088:	3301      	adds	r3, #1
 800208a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 800208e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002092:	2b08      	cmp	r3, #8
 8002094:	dde0      	ble.n	8002058 <main+0x3f4>
								}
							}
							char *message_t = letters_for_keys[maxindex];
 8002096:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800209a:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800209e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80020a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020a6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
							message[message_pos] = message_t[letters[maxindex] - 1];
 80020aa:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020ae:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 80020b2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80020b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 80020c0:	4413      	add	r3, r2
 80020c2:	7819      	ldrb	r1, [r3, #0]
 80020c4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020c8:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 80020cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020d0:	4413      	add	r3, r2
 80020d2:	460a      	mov	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
							message_pos++;
 80020d6:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020da:	3301      	adds	r3, #1
 80020dc:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
							message[message_pos] = '\0';
 80020e0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80020e4:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 80020e8:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80020ec:	4413      	add	r3, r2
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
							LCD5110_set_cursor(0, 0, &lcd1);
 80020f2:	4a91      	ldr	r2, [pc, #580]	; (8002338 <main+0x6d4>)
 80020f4:	2100      	movs	r1, #0
 80020f6:	2000      	movs	r0, #0
 80020f8:	f7fe fd40 	bl	8000b7c <LCD5110_set_cursor>
							LCD5110_print(message, 0, &lcd1);
 80020fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002100:	4a8d      	ldr	r2, [pc, #564]	; (8002338 <main+0x6d4>)
 8002102:	2100      	movs	r1, #0
 8002104:	4618      	mov	r0, r3
 8002106:	f7fe fd5c 	bl	8000bc2 <LCD5110_print>
							LCD5110_refresh(&lcd1);
 800210a:	488b      	ldr	r0, [pc, #556]	; (8002338 <main+0x6d4>)
 800210c:	f7fe fd2a 	bl	8000b64 <LCD5110_refresh>
							memset(letters, 0, sizeof(letters));
 8002110:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002114:	2224      	movs	r2, #36	; 0x24
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f009 ffab 	bl	800c074 <memset>
						}
					if (key_pressed == 'A') {
 800211e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002122:	2b41      	cmp	r3, #65	; 0x41
 8002124:	f040 83cc 	bne.w	80028c0 <main+0xc5c>
						strcat(message, "\r\n\x1A");
 8002128:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800212c:	4618      	mov	r0, r3
 800212e:	f7fe f861 	bl	80001f4 <strlen>
 8002132:	4603      	mov	r3, r0
 8002134:	461a      	mov	r2, r3
 8002136:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800213a:	4413      	add	r3, r2
 800213c:	4a7f      	ldr	r2, [pc, #508]	; (800233c <main+0x6d8>)
 800213e:	6810      	ldr	r0, [r2, #0]
 8002140:	6018      	str	r0, [r3, #0]
						HAL_UART_Transmit(&huart1,(uint8_t *)message,strlen(message),100);
 8002142:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe f854 	bl	80001f4 <strlen>
 800214c:	4603      	mov	r3, r0
 800214e:	b29a      	uxth	r2, r3
 8002150:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002154:	2364      	movs	r3, #100	; 0x64
 8002156:	487a      	ldr	r0, [pc, #488]	; (8002340 <main+0x6dc>)
 8002158:	f004 fe63 	bl	8006e22 <HAL_UART_Transmit>
						HAL_Delay(5000);
 800215c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002160:	f001 f9ae 	bl	80034c0 <HAL_Delay>
						HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002164:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002168:	230a      	movs	r3, #10
 800216a:	220a      	movs	r2, #10
 800216c:	4874      	ldr	r0, [pc, #464]	; (8002340 <main+0x6dc>)
 800216e:	f004 feea 	bl	8006f46 <HAL_UART_Receive>
						LCD5110_refresh(&lcd1);
 8002172:	4871      	ldr	r0, [pc, #452]	; (8002338 <main+0x6d4>)
 8002174:	f7fe fcf6 	bl	8000b64 <LCD5110_refresh>
						HAL_Delay(5000);
 8002178:	f241 3088 	movw	r0, #5000	; 0x1388
 800217c:	f001 f9a0 	bl	80034c0 <HAL_Delay>
						message[0] = '\0';
 8002180:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002184:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002188:	2200      	movs	r2, #0
 800218a:	701a      	strb	r2, [r3, #0]
						message_pos = 0;
 800218c:	2300      	movs	r3, #0
 800218e:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						LCD5110_refresh(&lcd1);
 8002192:	4869      	ldr	r0, [pc, #420]	; (8002338 <main+0x6d4>)
 8002194:	f7fe fce6 	bl	8000b64 <LCD5110_refresh>
						type_message_screen = false;
 8002198:	4b65      	ldr	r3, [pc, #404]	; (8002330 <main+0x6cc>)
 800219a:	2200      	movs	r2, #0
 800219c:	701a      	strb	r2, [r3, #0]
						screen_begin = true;
 800219e:	4b69      	ldr	r3, [pc, #420]	; (8002344 <main+0x6e0>)
 80021a0:	2201      	movs	r2, #1
 80021a2:	701a      	strb	r2, [r3, #0]
						want_to_send_digits = true;
 80021a4:	4b63      	ldr	r3, [pc, #396]	; (8002334 <main+0x6d0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	701a      	strb	r2, [r3, #0]
						buf[0] = '\0';
 80021aa:	4b67      	ldr	r3, [pc, #412]	; (8002348 <main+0x6e4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	701a      	strb	r2, [r3, #0]
						message[0] = '\0';
 80021b0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80021b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80021b8:	2200      	movs	r2, #0
 80021ba:	701a      	strb	r2, [r3, #0]
						message_pos = 0;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						pos = 0;
 80021c2:	2300      	movs	r3, #0
 80021c4:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						main_screen(cursor_on_phone - 1);
 80021c8:	4b60      	ldr	r3, [pc, #384]	; (800234c <main+0x6e8>)
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	3b01      	subs	r3, #1
 80021ce:	b2db      	uxtb	r3, r3
 80021d0:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80021d4:	4694      	mov	ip, r2
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fc54 	bl	8002a84 <main_screen.5>
 80021dc:	e370      	b.n	80028c0 <main+0xc5c>
					}
	    		}
	    		else {
	    			if (key_pressed == 'C') { // changing mode to letters
 80021de:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80021e2:	2b43      	cmp	r3, #67	; 0x43
 80021e4:	d103      	bne.n	80021ee <main+0x58a>
						want_to_send_digits = false;
 80021e6:	4b53      	ldr	r3, [pc, #332]	; (8002334 <main+0x6d0>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	701a      	strb	r2, [r3, #0]
 80021ec:	e02f      	b.n	800224e <main+0x5ea>
					}

					else if (key_pressed >= '0' && key_pressed <= '9' && message_pos < sizeof(message))
 80021ee:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80021f2:	2b2f      	cmp	r3, #47	; 0x2f
 80021f4:	d92b      	bls.n	800224e <main+0x5ea>
 80021f6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80021fa:	2b39      	cmp	r3, #57	; 0x39
 80021fc:	d827      	bhi.n	800224e <main+0x5ea>
 80021fe:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002202:	2b1f      	cmp	r3, #31
 8002204:	d823      	bhi.n	800224e <main+0x5ea>
						{
							message[message_pos] = key_pressed;
 8002206:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800220a:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 800220e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002212:	4413      	add	r3, r2
 8002214:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8002218:	701a      	strb	r2, [r3, #0]
							message_pos++;
 800221a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800221e:	3301      	adds	r3, #1
 8002220:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
							message[message_pos] = '\0';
 8002224:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002228:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 800222c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002230:	4413      	add	r3, r2
 8002232:	2200      	movs	r2, #0
 8002234:	701a      	strb	r2, [r3, #0]

							LCD5110_set_cursor(0, 0, &lcd1);
 8002236:	4a40      	ldr	r2, [pc, #256]	; (8002338 <main+0x6d4>)
 8002238:	2100      	movs	r1, #0
 800223a:	2000      	movs	r0, #0
 800223c:	f7fe fc9e 	bl	8000b7c <LCD5110_set_cursor>
							LCD5110_print(message, 0, &lcd1);
 8002240:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002244:	4a3c      	ldr	r2, [pc, #240]	; (8002338 <main+0x6d4>)
 8002246:	2100      	movs	r1, #0
 8002248:	4618      	mov	r0, r3
 800224a:	f7fe fcba 	bl	8000bc2 <LCD5110_print>
						}
						if (key_pressed == 'A') {
 800224e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002252:	2b41      	cmp	r3, #65	; 0x41
 8002254:	f040 8334 	bne.w	80028c0 <main+0xc5c>


							strcat(message, "\r\n\x1A");
 8002258:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800225c:	4618      	mov	r0, r3
 800225e:	f7fd ffc9 	bl	80001f4 <strlen>
 8002262:	4603      	mov	r3, r0
 8002264:	461a      	mov	r2, r3
 8002266:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800226a:	4413      	add	r3, r2
 800226c:	4a33      	ldr	r2, [pc, #204]	; (800233c <main+0x6d8>)
 800226e:	6810      	ldr	r0, [r2, #0]
 8002270:	6018      	str	r0, [r3, #0]

							HAL_UART_Transmit(&huart1,(uint8_t *)message,strlen(message),100);
 8002272:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002276:	4618      	mov	r0, r3
 8002278:	f7fd ffbc 	bl	80001f4 <strlen>
 800227c:	4603      	mov	r3, r0
 800227e:	b29a      	uxth	r2, r3
 8002280:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002284:	2364      	movs	r3, #100	; 0x64
 8002286:	482e      	ldr	r0, [pc, #184]	; (8002340 <main+0x6dc>)
 8002288:	f004 fdcb 	bl	8006e22 <HAL_UART_Transmit>
							HAL_Delay(5000);
 800228c:	f241 3088 	movw	r0, #5000	; 0x1388
 8002290:	f001 f916 	bl	80034c0 <HAL_Delay>
							HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002294:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002298:	230a      	movs	r3, #10
 800229a:	220a      	movs	r2, #10
 800229c:	4828      	ldr	r0, [pc, #160]	; (8002340 <main+0x6dc>)
 800229e:	f004 fe52 	bl	8006f46 <HAL_UART_Receive>
							LCD5110_refresh(&lcd1);
 80022a2:	4825      	ldr	r0, [pc, #148]	; (8002338 <main+0x6d4>)
 80022a4:	f7fe fc5e 	bl	8000b64 <LCD5110_refresh>
							HAL_Delay(5000);
 80022a8:	f241 3088 	movw	r0, #5000	; 0x1388
 80022ac:	f001 f908 	bl	80034c0 <HAL_Delay>
							message[0] = '\0';
 80022b0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80022b4:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 80022b8:	2200      	movs	r2, #0
 80022ba:	701a      	strb	r2, [r3, #0]
							message_pos = 0;
 80022bc:	2300      	movs	r3, #0
 80022be:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
							LCD5110_refresh(&lcd1);
 80022c2:	481d      	ldr	r0, [pc, #116]	; (8002338 <main+0x6d4>)
 80022c4:	f7fe fc4e 	bl	8000b64 <LCD5110_refresh>
							type_message_screen = false;
 80022c8:	4b19      	ldr	r3, [pc, #100]	; (8002330 <main+0x6cc>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
							screen_begin = true;
 80022ce:	4b1d      	ldr	r3, [pc, #116]	; (8002344 <main+0x6e0>)
 80022d0:	2201      	movs	r2, #1
 80022d2:	701a      	strb	r2, [r3, #0]
							buf[0] = '\0';
 80022d4:	4b1c      	ldr	r3, [pc, #112]	; (8002348 <main+0x6e4>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	701a      	strb	r2, [r3, #0]
							pos = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
							main_screen(cursor_on_phone - 1);
 80022e0:	4b1a      	ldr	r3, [pc, #104]	; (800234c <main+0x6e8>)
 80022e2:	781b      	ldrb	r3, [r3, #0]
 80022e4:	3b01      	subs	r3, #1
 80022e6:	b2db      	uxtb	r3, r3
 80022e8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80022ec:	4694      	mov	ip, r2
 80022ee:	4618      	mov	r0, r3
 80022f0:	f000 fbc8 	bl	8002a84 <main_screen.5>
 80022f4:	e2e4      	b.n	80028c0 <main+0xc5c>
						}
	    			}
	    		}
	    	else if (message_read){
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <main+0x6ec>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d02a      	beq.n	8002354 <main+0x6f0>

	    		if (key_pressed == 'B') {
 80022fe:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002302:	2b42      	cmp	r3, #66	; 0x42
 8002304:	f040 82dc 	bne.w	80028c0 <main+0xc5c>
	    			message_read = false;
 8002308:	4b11      	ldr	r3, [pc, #68]	; (8002350 <main+0x6ec>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
	    			screen_begin = true;
 800230e:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <main+0x6e0>)
 8002310:	2201      	movs	r2, #1
 8002312:	701a      	strb	r2, [r3, #0]
	    			main_screen(cursor_on_phone - 1);
 8002314:	4b0d      	ldr	r3, [pc, #52]	; (800234c <main+0x6e8>)
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	3b01      	subs	r3, #1
 800231a:	b2db      	uxtb	r3, r3
 800231c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002320:	4694      	mov	ip, r2
 8002322:	4618      	mov	r0, r3
 8002324:	f000 fbae 	bl	8002a84 <main_screen.5>
 8002328:	e2ca      	b.n	80028c0 <main+0xc5c>
 800232a:	bf00      	nop
 800232c:	2000a581 	.word	0x2000a581
 8002330:	2000a580 	.word	0x2000a580
 8002334:	20000022 	.word	0x20000022
 8002338:	200002b4 	.word	0x200002b4
 800233c:	0800cc98 	.word	0x0800cc98
 8002340:	2000a5e8 	.word	0x2000a5e8
 8002344:	20000021 	.word	0x20000021
 8002348:	200004d8 	.word	0x200004d8
 800234c:	20000020 	.word	0x20000020
 8002350:	2000a583 	.word	0x2000a583
	    		}

	    	}
	    	else if (screen_message) {
 8002354:	4b9d      	ldr	r3, [pc, #628]	; (80025cc <main+0x968>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	f000 80fd 	beq.w	8002558 <main+0x8f4>
	    		if (key_pressed == 'B') {
 800235e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002362:	2b42      	cmp	r3, #66	; 0x42
 8002364:	d11d      	bne.n	80023a2 <main+0x73e>
	    			screen_message = false;
 8002366:	4b99      	ldr	r3, [pc, #612]	; (80025cc <main+0x968>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
	    			type_message_screen = false;
 800236c:	4b98      	ldr	r3, [pc, #608]	; (80025d0 <main+0x96c>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
	    			screen_begin = true;
 8002372:	4b98      	ldr	r3, [pc, #608]	; (80025d4 <main+0x970>)
 8002374:	2201      	movs	r2, #1
 8002376:	701a      	strb	r2, [r3, #0]
	    			memset(buf, ' ', sizeof(buf) - 1);
 8002378:	2209      	movs	r2, #9
 800237a:	2120      	movs	r1, #32
 800237c:	4896      	ldr	r0, [pc, #600]	; (80025d8 <main+0x974>)
 800237e:	f009 fe79 	bl	800c074 <memset>
					buf[0] = '\0';
 8002382:	4b95      	ldr	r3, [pc, #596]	; (80025d8 <main+0x974>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
					pos = 0;
 8002388:	2300      	movs	r3, #0
 800238a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					main_screen(cursor_on_phone - 1);
 800238e:	4b93      	ldr	r3, [pc, #588]	; (80025dc <main+0x978>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	3b01      	subs	r3, #1
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800239a:	4694      	mov	ip, r2
 800239c:	4618      	mov	r0, r3
 800239e:	f000 fb71 	bl	8002a84 <main_screen.5>
	    		}
	    		if (key_pressed >= '0' && key_pressed <= '9' && pos < sizeof(buf))
 80023a2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80023a6:	2b2f      	cmp	r3, #47	; 0x2f
 80023a8:	d923      	bls.n	80023f2 <main+0x78e>
 80023aa:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80023ae:	2b39      	cmp	r3, #57	; 0x39
 80023b0:	d81f      	bhi.n	80023f2 <main+0x78e>
 80023b2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80023b6:	2b09      	cmp	r3, #9
 80023b8:	d81b      	bhi.n	80023f2 <main+0x78e>
					{
						buf[pos] = key_pressed;
 80023ba:	4a87      	ldr	r2, [pc, #540]	; (80025d8 <main+0x974>)
 80023bc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80023c0:	4413      	add	r3, r2
 80023c2:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 80023c6:	701a      	strb	r2, [r3, #0]
						pos++;
 80023c8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80023cc:	3301      	adds	r3, #1
 80023ce:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						buf[pos] = '\0';
 80023d2:	4a81      	ldr	r2, [pc, #516]	; (80025d8 <main+0x974>)
 80023d4:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80023d8:	4413      	add	r3, r2
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]

						LCD5110_set_cursor(0, 0, &lcd1);
 80023de:	4a80      	ldr	r2, [pc, #512]	; (80025e0 <main+0x97c>)
 80023e0:	2100      	movs	r1, #0
 80023e2:	2000      	movs	r0, #0
 80023e4:	f7fe fbca 	bl	8000b7c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 80023e8:	4a7d      	ldr	r2, [pc, #500]	; (80025e0 <main+0x97c>)
 80023ea:	2100      	movs	r1, #0
 80023ec:	487a      	ldr	r0, [pc, #488]	; (80025d8 <main+0x974>)
 80023ee:	f7fe fbe8 	bl	8000bc2 <LCD5110_print>
					}
	    		if (key_pressed == 'A') {
 80023f2:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80023f6:	2b41      	cmp	r3, #65	; 0x41
 80023f8:	d165      	bne.n	80024c6 <main+0x862>
					  HAL_UART_Transmit(&huart1,(uint8_t *)MESSAGE_MODE,strlen(MESSAGE_MODE),100);
 80023fa:	4b7a      	ldr	r3, [pc, #488]	; (80025e4 <main+0x980>)
 80023fc:	681c      	ldr	r4, [r3, #0]
 80023fe:	4b79      	ldr	r3, [pc, #484]	; (80025e4 <main+0x980>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fd fef6 	bl	80001f4 <strlen>
 8002408:	4603      	mov	r3, r0
 800240a:	b29a      	uxth	r2, r3
 800240c:	2364      	movs	r3, #100	; 0x64
 800240e:	4621      	mov	r1, r4
 8002410:	4875      	ldr	r0, [pc, #468]	; (80025e8 <main+0x984>)
 8002412:	f004 fd06 	bl	8006e22 <HAL_UART_Transmit>
					  HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002416:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 800241a:	230a      	movs	r3, #10
 800241c:	220a      	movs	r2, #10
 800241e:	4872      	ldr	r0, [pc, #456]	; (80025e8 <main+0x984>)
 8002420:	f004 fd91 	bl	8006f46 <HAL_UART_Receive>
					  if(strstr((char *)res,"OK")){
 8002424:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002428:	4970      	ldr	r1, [pc, #448]	; (80025ec <main+0x988>)
 800242a:	4618      	mov	r0, r3
 800242c:	f009 fe57 	bl	800c0de <strstr>
 8002430:	4603      	mov	r3, r0
 8002432:	2b00      	cmp	r3, #0
 8002434:	d006      	beq.n	8002444 <main+0x7e0>
						  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 8002436:	2201      	movs	r2, #1
 8002438:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800243c:	486c      	ldr	r0, [pc, #432]	; (80025f0 <main+0x98c>)
 800243e:	f001 fba3 	bl	8003b88 <HAL_GPIO_WritePin>
 8002442:	e005      	b.n	8002450 <main+0x7ec>
					  }
					  else{
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002444:	2201      	movs	r2, #1
 8002446:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800244a:	4869      	ldr	r0, [pc, #420]	; (80025f0 <main+0x98c>)
 800244c:	f001 fb9c 	bl	8003b88 <HAL_GPIO_WritePin>
					  }

					  char current_number[25];
					  strcpy(current_number, MSG_NUMBER_INIT);
 8002450:	4b68      	ldr	r3, [pc, #416]	; (80025f4 <main+0x990>)
 8002452:	681a      	ldr	r2, [r3, #0]
 8002454:	f107 0318 	add.w	r3, r7, #24
 8002458:	4611      	mov	r1, r2
 800245a:	4618      	mov	r0, r3
 800245c:	f009 fed9 	bl	800c212 <strcpy>
					  strcat(current_number, buf);
 8002460:	f107 0318 	add.w	r3, r7, #24
 8002464:	495c      	ldr	r1, [pc, #368]	; (80025d8 <main+0x974>)
 8002466:	4618      	mov	r0, r3
 8002468:	f009 fe0c 	bl	800c084 <strcat>
					  strcat(current_number, "\"\r\n");
 800246c:	f107 0318 	add.w	r3, r7, #24
 8002470:	4618      	mov	r0, r3
 8002472:	f7fd febf 	bl	80001f4 <strlen>
 8002476:	4603      	mov	r3, r0
 8002478:	461a      	mov	r2, r3
 800247a:	f107 0318 	add.w	r3, r7, #24
 800247e:	4413      	add	r3, r2
 8002480:	4a5d      	ldr	r2, [pc, #372]	; (80025f8 <main+0x994>)
 8002482:	6810      	ldr	r0, [r2, #0]
 8002484:	6018      	str	r0, [r3, #0]
					  HAL_UART_Transmit(&huart1,(uint8_t *)current_number,strlen(current_number),100);
 8002486:	f107 0318 	add.w	r3, r7, #24
 800248a:	4618      	mov	r0, r3
 800248c:	f7fd feb2 	bl	80001f4 <strlen>
 8002490:	4603      	mov	r3, r0
 8002492:	b29a      	uxth	r2, r3
 8002494:	f107 0118 	add.w	r1, r7, #24
 8002498:	2364      	movs	r3, #100	; 0x64
 800249a:	4853      	ldr	r0, [pc, #332]	; (80025e8 <main+0x984>)
 800249c:	f004 fcc1 	bl	8006e22 <HAL_UART_Transmit>
					  HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 80024a0:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 80024a4:	230a      	movs	r3, #10
 80024a6:	220a      	movs	r2, #10
 80024a8:	484f      	ldr	r0, [pc, #316]	; (80025e8 <main+0x984>)
 80024aa:	f004 fd4c 	bl	8006f46 <HAL_UART_Receive>

	    			screen_message = false;
 80024ae:	4b47      	ldr	r3, [pc, #284]	; (80025cc <main+0x968>)
 80024b0:	2200      	movs	r2, #0
 80024b2:	701a      	strb	r2, [r3, #0]
	    			type_message_screen = true;
 80024b4:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <main+0x96c>)
 80024b6:	2201      	movs	r2, #1
 80024b8:	701a      	strb	r2, [r3, #0]
	    			type_message_scren();
 80024ba:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80024be:	469c      	mov	ip, r3
 80024c0:	f000 fbc8 	bl	8002c54 <type_message_scren.1>
 80024c4:	e1fc      	b.n	80028c0 <main+0xc5c>
	    			}
	    		else if (key_pressed == 'D')
 80024c6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80024ca:	2b44      	cmp	r3, #68	; 0x44
 80024cc:	d11a      	bne.n	8002504 <main+0x8a0>
					{
						memset(buf, ' ', sizeof(buf) - 1);
 80024ce:	2209      	movs	r2, #9
 80024d0:	2120      	movs	r1, #32
 80024d2:	4841      	ldr	r0, [pc, #260]	; (80025d8 <main+0x974>)
 80024d4:	f009 fdce 	bl	800c074 <memset>
						buf[0] = '\0';
 80024d8:	4b3f      	ldr	r3, [pc, #252]	; (80025d8 <main+0x974>)
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]
						pos = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						LCD5110_refresh(&lcd1);
 80024e4:	483e      	ldr	r0, [pc, #248]	; (80025e0 <main+0x97c>)
 80024e6:	f7fe fb3d 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 80024ea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80024ee:	4a3c      	ldr	r2, [pc, #240]	; (80025e0 <main+0x97c>)
 80024f0:	2101      	movs	r1, #1
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fe fd0f 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 80024f8:	4a39      	ldr	r2, [pc, #228]	; (80025e0 <main+0x97c>)
 80024fa:	2100      	movs	r1, #0
 80024fc:	2000      	movs	r0, #0
 80024fe:	f7fe fb3d 	bl	8000b7c <LCD5110_set_cursor>
 8002502:	e1dd      	b.n	80028c0 <main+0xc5c>
					}
	    		else if (key_pressed == 'C' && pos > 0)
 8002504:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002508:	2b43      	cmp	r3, #67	; 0x43
 800250a:	f040 81d9 	bne.w	80028c0 <main+0xc5c>
 800250e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002512:	2b00      	cmp	r3, #0
 8002514:	f340 81d4 	ble.w	80028c0 <main+0xc5c>
					{
						pos--;
 8002518:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800251c:	3b01      	subs	r3, #1
 800251e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						buf[pos] = '\0';
 8002522:	4a2d      	ldr	r2, [pc, #180]	; (80025d8 <main+0x974>)
 8002524:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002528:	4413      	add	r3, r2
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]

						LCD5110_refresh(&lcd1);
 800252e:	482c      	ldr	r0, [pc, #176]	; (80025e0 <main+0x97c>)
 8002530:	f7fe fb18 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 8002534:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002538:	4a29      	ldr	r2, [pc, #164]	; (80025e0 <main+0x97c>)
 800253a:	2101      	movs	r1, #1
 800253c:	4618      	mov	r0, r3
 800253e:	f7fe fcea 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 8002542:	4a27      	ldr	r2, [pc, #156]	; (80025e0 <main+0x97c>)
 8002544:	2100      	movs	r1, #0
 8002546:	2000      	movs	r0, #0
 8002548:	f7fe fb18 	bl	8000b7c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 800254c:	4a24      	ldr	r2, [pc, #144]	; (80025e0 <main+0x97c>)
 800254e:	2100      	movs	r1, #0
 8002550:	4821      	ldr	r0, [pc, #132]	; (80025d8 <main+0x974>)
 8002552:	f7fe fb36 	bl	8000bc2 <LCD5110_print>
 8002556:	e1b3      	b.n	80028c0 <main+0xc5c>
					}
	    	}
	    	else if (screen_begin) {
 8002558:	4b1e      	ldr	r3, [pc, #120]	; (80025d4 <main+0x970>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2b00      	cmp	r3, #0
 800255e:	f000 80a8 	beq.w	80026b2 <main+0xa4e>
	    		end_call_flag = false;
 8002562:	4b26      	ldr	r3, [pc, #152]	; (80025fc <main+0x998>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
	    		if (key_pressed == '1' || key_pressed == '2' || key_pressed == '3' || key_pressed == '4') {
 8002568:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800256c:	2b31      	cmp	r3, #49	; 0x31
 800256e:	d00b      	beq.n	8002588 <main+0x924>
 8002570:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002574:	2b32      	cmp	r3, #50	; 0x32
 8002576:	d007      	beq.n	8002588 <main+0x924>
 8002578:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800257c:	2b33      	cmp	r3, #51	; 0x33
 800257e:	d003      	beq.n	8002588 <main+0x924>
 8002580:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002584:	2b34      	cmp	r3, #52	; 0x34
 8002586:	d157      	bne.n	8002638 <main+0x9d4>
	    			int num = key_pressed - '0';
 8002588:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800258c:	3b30      	subs	r3, #48	; 0x30
 800258e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	    			if (num == 3) {
 8002592:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002596:	2b03      	cmp	r3, #3
 8002598:	d109      	bne.n	80025ae <main+0x94a>
	    				cursor_on_message = true;
 800259a:	4b19      	ldr	r3, [pc, #100]	; (8002600 <main+0x99c>)
 800259c:	2201      	movs	r2, #1
 800259e:	701a      	strb	r2, [r3, #0]
	    				cursor_on_read = false;
 80025a0:	4b18      	ldr	r3, [pc, #96]	; (8002604 <main+0x9a0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	701a      	strb	r2, [r3, #0]
	    				cursor_on_phone = false;
 80025a6:	4b0d      	ldr	r3, [pc, #52]	; (80025dc <main+0x978>)
 80025a8:	2200      	movs	r2, #0
 80025aa:	701a      	strb	r2, [r3, #0]
 80025ac:	e039      	b.n	8002622 <main+0x9be>
	    			} else if (num == 1) {
 80025ae:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d128      	bne.n	8002608 <main+0x9a4>
	    				cursor_on_message = false;
 80025b6:	4b12      	ldr	r3, [pc, #72]	; (8002600 <main+0x99c>)
 80025b8:	2200      	movs	r2, #0
 80025ba:	701a      	strb	r2, [r3, #0]
	    				cursor_on_read = false;
 80025bc:	4b11      	ldr	r3, [pc, #68]	; (8002604 <main+0x9a0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
	    				cursor_on_phone = true;
 80025c2:	4b06      	ldr	r3, [pc, #24]	; (80025dc <main+0x978>)
 80025c4:	2201      	movs	r2, #1
 80025c6:	701a      	strb	r2, [r3, #0]
 80025c8:	e02b      	b.n	8002622 <main+0x9be>
 80025ca:	bf00      	nop
 80025cc:	2000a57f 	.word	0x2000a57f
 80025d0:	2000a580 	.word	0x2000a580
 80025d4:	20000021 	.word	0x20000021
 80025d8:	200004d8 	.word	0x200004d8
 80025dc:	20000020 	.word	0x20000020
 80025e0:	200002b4 	.word	0x200002b4
 80025e4:	20000024 	.word	0x20000024
 80025e8:	2000a5e8 	.word	0x2000a5e8
 80025ec:	0800ccc8 	.word	0x0800ccc8
 80025f0:	40020c00 	.word	0x40020c00
 80025f4:	20000028 	.word	0x20000028
 80025f8:	0800cc94 	.word	0x0800cc94
 80025fc:	2000a581 	.word	0x2000a581
 8002600:	2000a57e 	.word	0x2000a57e
 8002604:	2000a582 	.word	0x2000a582
	    			} else if (num == 4){
 8002608:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800260c:	2b04      	cmp	r3, #4
 800260e:	d108      	bne.n	8002622 <main+0x9be>
	    				cursor_on_read = true;
 8002610:	4bb1      	ldr	r3, [pc, #708]	; (80028d8 <main+0xc74>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
	    				cursor_on_phone = false;
 8002616:	4bb1      	ldr	r3, [pc, #708]	; (80028dc <main+0xc78>)
 8002618:	2200      	movs	r2, #0
 800261a:	701a      	strb	r2, [r3, #0]
	    				cursor_on_message = false;
 800261c:	4bb0      	ldr	r3, [pc, #704]	; (80028e0 <main+0xc7c>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
	    			}
	    			main_screen(num - 1);
 8002622:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002626:	b2db      	uxtb	r3, r3
 8002628:	3b01      	subs	r3, #1
 800262a:	b2db      	uxtb	r3, r3
 800262c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002630:	4694      	mov	ip, r2
 8002632:	4618      	mov	r0, r3
 8002634:	f000 fa26 	bl	8002a84 <main_screen.5>
	    		}
				if (key_pressed == '*' && cursor_on_phone) {
 8002638:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800263c:	2b2a      	cmp	r3, #42	; 0x2a
 800263e:	d10e      	bne.n	800265e <main+0x9fa>
 8002640:	4ba6      	ldr	r3, [pc, #664]	; (80028dc <main+0xc78>)
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <main+0x9fa>
						screen_main = true;
 8002648:	4ba6      	ldr	r3, [pc, #664]	; (80028e4 <main+0xc80>)
 800264a:	2201      	movs	r2, #1
 800264c:	701a      	strb	r2, [r3, #0]
						screen_begin = false;
 800264e:	4ba6      	ldr	r3, [pc, #664]	; (80028e8 <main+0xc84>)
 8002650:	2200      	movs	r2, #0
 8002652:	701a      	strb	r2, [r3, #0]
						init_screen();
 8002654:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002658:	469c      	mov	ip, r3
 800265a:	f7ff fac5 	bl	8001be8 <init_screen.2>
					}
				if (key_pressed == '*' && cursor_on_message) {
 800265e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002662:	2b2a      	cmp	r3, #42	; 0x2a
 8002664:	d10e      	bne.n	8002684 <main+0xa20>
 8002666:	4b9e      	ldr	r3, [pc, #632]	; (80028e0 <main+0xc7c>)
 8002668:	781b      	ldrb	r3, [r3, #0]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d00a      	beq.n	8002684 <main+0xa20>
					screen_message = true;
 800266e:	4b9f      	ldr	r3, [pc, #636]	; (80028ec <main+0xc88>)
 8002670:	2201      	movs	r2, #1
 8002672:	701a      	strb	r2, [r3, #0]
					screen_begin = false;
 8002674:	4b9c      	ldr	r3, [pc, #624]	; (80028e8 <main+0xc84>)
 8002676:	2200      	movs	r2, #0
 8002678:	701a      	strb	r2, [r3, #0]
					screen_for_message_sending();
 800267a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800267e:	469c      	mov	ip, r3
 8002680:	f000 faaa 	bl	8002bd8 <screen_for_message_sending.3>
				}
				if (key_pressed == '*' && cursor_on_read){
 8002684:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002688:	2b2a      	cmp	r3, #42	; 0x2a
 800268a:	f040 8119 	bne.w	80028c0 <main+0xc5c>
 800268e:	4b92      	ldr	r3, [pc, #584]	; (80028d8 <main+0xc74>)
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	2b00      	cmp	r3, #0
 8002694:	f000 8114 	beq.w	80028c0 <main+0xc5c>
					screen_begin = false;
 8002698:	4b93      	ldr	r3, [pc, #588]	; (80028e8 <main+0xc84>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
					message_read = true;
 800269e:	4b94      	ldr	r3, [pc, #592]	; (80028f0 <main+0xc8c>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	701a      	strb	r2, [r3, #0]
					screen_on_read(0);
 80026a4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80026a8:	469c      	mov	ip, r3
 80026aa:	2000      	movs	r0, #0
 80026ac:	f000 f972 	bl	8002994 <screen_on_read.4>
 80026b0:	e106      	b.n	80028c0 <main+0xc5c>
				}
	    	}
	    	else if (screen_main){
 80026b2:	4b8c      	ldr	r3, [pc, #560]	; (80028e4 <main+0xc80>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	f000 8102 	beq.w	80028c0 <main+0xc5c>
	    		if (key_pressed == 'B') {
 80026bc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80026c0:	2b42      	cmp	r3, #66	; 0x42
 80026c2:	d11a      	bne.n	80026fa <main+0xa96>
						screen_main = false;
 80026c4:	4b87      	ldr	r3, [pc, #540]	; (80028e4 <main+0xc80>)
 80026c6:	2200      	movs	r2, #0
 80026c8:	701a      	strb	r2, [r3, #0]
						screen_begin = true;
 80026ca:	4b87      	ldr	r3, [pc, #540]	; (80028e8 <main+0xc84>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	701a      	strb	r2, [r3, #0]
						memset(buf, ' ', sizeof(buf) - 1);
 80026d0:	2209      	movs	r2, #9
 80026d2:	2120      	movs	r1, #32
 80026d4:	4887      	ldr	r0, [pc, #540]	; (80028f4 <main+0xc90>)
 80026d6:	f009 fccd 	bl	800c074 <memset>
						buf[0] = '\0';
 80026da:	4b86      	ldr	r3, [pc, #536]	; (80028f4 <main+0xc90>)
 80026dc:	2200      	movs	r2, #0
 80026de:	701a      	strb	r2, [r3, #0]
						pos = 0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						main_screen(cursor_on_phone - 1);
 80026e6:	4b7d      	ldr	r3, [pc, #500]	; (80028dc <main+0xc78>)
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	3b01      	subs	r3, #1
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80026f2:	4694      	mov	ip, r2
 80026f4:	4618      	mov	r0, r3
 80026f6:	f000 f9c5 	bl	8002a84 <main_screen.5>
				}
				if ((end_call_flag || key_pressed == 'A') && screen_main) {
 80026fa:	4b7f      	ldr	r3, [pc, #508]	; (80028f8 <main+0xc94>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <main+0xaa6>
 8002702:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002706:	2b41      	cmp	r3, #65	; 0x41
 8002708:	d15f      	bne.n	80027ca <main+0xb66>
 800270a:	4b76      	ldr	r3, [pc, #472]	; (80028e4 <main+0xc80>)
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d05b      	beq.n	80027ca <main+0xb66>
					if (is_call) {
 8002712:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002716:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800271a:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 800271e:	2b00      	cmp	r3, #0
 8002720:	d023      	beq.n	800276a <main+0xb06>
						buf[0] = '\0';
 8002722:	4b74      	ldr	r3, [pc, #464]	; (80028f4 <main+0xc90>)
 8002724:	2200      	movs	r2, #0
 8002726:	701a      	strb	r2, [r3, #0]
						pos = 0;
 8002728:	2300      	movs	r3, #0
 800272a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						end_call();
 800272e:	f7ff f959 	bl	80019e4 <end_call>
						get_call = false;
 8002732:	4b72      	ldr	r3, [pc, #456]	; (80028fc <main+0xc98>)
 8002734:	2200      	movs	r2, #0
 8002736:	701a      	strb	r2, [r3, #0]
						LCD5110_refresh(&lcd1);
 8002738:	4871      	ldr	r0, [pc, #452]	; (8002900 <main+0xc9c>)
 800273a:	f7fe fa13 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 800273e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002742:	4a6f      	ldr	r2, [pc, #444]	; (8002900 <main+0xc9c>)
 8002744:	2101      	movs	r1, #1
 8002746:	4618      	mov	r0, r3
 8002748:	f7fe fbe5 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 800274c:	4a6c      	ldr	r2, [pc, #432]	; (8002900 <main+0xc9c>)
 800274e:	2100      	movs	r1, #0
 8002750:	2000      	movs	r0, #0
 8002752:	f7fe fa13 	bl	8000b7c <LCD5110_set_cursor>
						screen_begin = true;
 8002756:	4b64      	ldr	r3, [pc, #400]	; (80028e8 <main+0xc84>)
 8002758:	2201      	movs	r2, #1
 800275a:	701a      	strb	r2, [r3, #0]
						main_screen(0);
 800275c:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002760:	469c      	mov	ip, r3
 8002762:	2000      	movs	r0, #0
 8002764:	f000 f98e 	bl	8002a84 <main_screen.5>
					if (is_call) {
 8002768:	e0aa      	b.n	80028c0 <main+0xc5c>
					}
					else {
						char call_number[16];
						strcpy(call_number, CALL_NUMBER);
 800276a:	4b66      	ldr	r3, [pc, #408]	; (8002904 <main+0xca0>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	f107 0308 	add.w	r3, r7, #8
 8002772:	4611      	mov	r1, r2
 8002774:	4618      	mov	r0, r3
 8002776:	f009 fd4c 	bl	800c212 <strcpy>
						strcat(call_number, buf);
 800277a:	f107 0308 	add.w	r3, r7, #8
 800277e:	495d      	ldr	r1, [pc, #372]	; (80028f4 <main+0xc90>)
 8002780:	4618      	mov	r0, r3
 8002782:	f009 fc7f 	bl	800c084 <strcat>
						strcat(call_number, "\r\n");
 8002786:	f107 0308 	add.w	r3, r7, #8
 800278a:	4618      	mov	r0, r3
 800278c:	f7fd fd32 	bl	80001f4 <strlen>
 8002790:	4603      	mov	r3, r0
 8002792:	461a      	mov	r2, r3
 8002794:	f107 0308 	add.w	r3, r7, #8
 8002798:	4413      	add	r3, r2
 800279a:	4a5b      	ldr	r2, [pc, #364]	; (8002908 <main+0xca4>)
 800279c:	8811      	ldrh	r1, [r2, #0]
 800279e:	7892      	ldrb	r2, [r2, #2]
 80027a0:	8019      	strh	r1, [r3, #0]
 80027a2:	709a      	strb	r2, [r3, #2]
						HAL_UART_Transmit(&huart1,(uint8_t *)call_number,strlen(call_number),100);
 80027a4:	f107 0308 	add.w	r3, r7, #8
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fd23 	bl	80001f4 <strlen>
 80027ae:	4603      	mov	r3, r0
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	f107 0108 	add.w	r1, r7, #8
 80027b6:	2364      	movs	r3, #100	; 0x64
 80027b8:	4854      	ldr	r0, [pc, #336]	; (800290c <main+0xca8>)
 80027ba:	f004 fb32 	bl	8006e22 <HAL_UART_Transmit>
						call_screen();
 80027be:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80027c2:	469c      	mov	ip, r3
 80027c4:	f000 f8a4 	bl	8002910 <call_screen.6>
					if (is_call) {
 80027c8:	e07a      	b.n	80028c0 <main+0xc5c>

					}
				}
				else if (key_pressed == 'D' && screen_main)
 80027ca:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80027ce:	2b44      	cmp	r3, #68	; 0x44
 80027d0:	d11e      	bne.n	8002810 <main+0xbac>
 80027d2:	4b44      	ldr	r3, [pc, #272]	; (80028e4 <main+0xc80>)
 80027d4:	781b      	ldrb	r3, [r3, #0]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d01a      	beq.n	8002810 <main+0xbac>
				{
					memset(buf, ' ', sizeof(buf) - 1);
 80027da:	2209      	movs	r2, #9
 80027dc:	2120      	movs	r1, #32
 80027de:	4845      	ldr	r0, [pc, #276]	; (80028f4 <main+0xc90>)
 80027e0:	f009 fc48 	bl	800c074 <memset>
					buf[0] = '\0';
 80027e4:	4b43      	ldr	r3, [pc, #268]	; (80028f4 <main+0xc90>)
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
					pos = 0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					LCD5110_refresh(&lcd1);
 80027f0:	4843      	ldr	r0, [pc, #268]	; (8002900 <main+0xc9c>)
 80027f2:	f7fe f9b7 	bl	8000b64 <LCD5110_refresh>
					LCD5110_rect_fill(&rect, 1, &lcd1);
 80027f6:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80027fa:	4a41      	ldr	r2, [pc, #260]	; (8002900 <main+0xc9c>)
 80027fc:	2101      	movs	r1, #1
 80027fe:	4618      	mov	r0, r3
 8002800:	f7fe fb89 	bl	8000f16 <LCD5110_rect_fill>
					LCD5110_set_cursor(0, 0, &lcd1);
 8002804:	4a3e      	ldr	r2, [pc, #248]	; (8002900 <main+0xc9c>)
 8002806:	2100      	movs	r1, #0
 8002808:	2000      	movs	r0, #0
 800280a:	f7fe f9b7 	bl	8000b7c <LCD5110_set_cursor>
 800280e:	e057      	b.n	80028c0 <main+0xc5c>
				}
				else if (key_pressed == 'C' && pos > 0 && screen_main)
 8002810:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002814:	2b43      	cmp	r3, #67	; 0x43
 8002816:	d127      	bne.n	8002868 <main+0xc04>
 8002818:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800281c:	2b00      	cmp	r3, #0
 800281e:	dd23      	ble.n	8002868 <main+0xc04>
 8002820:	4b30      	ldr	r3, [pc, #192]	; (80028e4 <main+0xc80>)
 8002822:	781b      	ldrb	r3, [r3, #0]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d01f      	beq.n	8002868 <main+0xc04>
					{
						pos--;
 8002828:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800282c:	3b01      	subs	r3, #1
 800282e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						buf[pos] = '\0';
 8002832:	4a30      	ldr	r2, [pc, #192]	; (80028f4 <main+0xc90>)
 8002834:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002838:	4413      	add	r3, r2
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]

						LCD5110_refresh(&lcd1);
 800283e:	4830      	ldr	r0, [pc, #192]	; (8002900 <main+0xc9c>)
 8002840:	f7fe f990 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 8002844:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002848:	4a2d      	ldr	r2, [pc, #180]	; (8002900 <main+0xc9c>)
 800284a:	2101      	movs	r1, #1
 800284c:	4618      	mov	r0, r3
 800284e:	f7fe fb62 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 8002852:	4a2b      	ldr	r2, [pc, #172]	; (8002900 <main+0xc9c>)
 8002854:	2100      	movs	r1, #0
 8002856:	2000      	movs	r0, #0
 8002858:	f7fe f990 	bl	8000b7c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 800285c:	4a28      	ldr	r2, [pc, #160]	; (8002900 <main+0xc9c>)
 800285e:	2100      	movs	r1, #0
 8002860:	4824      	ldr	r0, [pc, #144]	; (80028f4 <main+0xc90>)
 8002862:	f7fe f9ae 	bl	8000bc2 <LCD5110_print>
 8002866:	e02b      	b.n	80028c0 <main+0xc5c>
					}
				else if (key_pressed >= '0' && key_pressed <= '9' && pos < sizeof(buf) && screen_main)
 8002868:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800286c:	2b2f      	cmp	r3, #47	; 0x2f
 800286e:	d927      	bls.n	80028c0 <main+0xc5c>
 8002870:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002874:	2b39      	cmp	r3, #57	; 0x39
 8002876:	d823      	bhi.n	80028c0 <main+0xc5c>
 8002878:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800287c:	2b09      	cmp	r3, #9
 800287e:	d81f      	bhi.n	80028c0 <main+0xc5c>
 8002880:	4b18      	ldr	r3, [pc, #96]	; (80028e4 <main+0xc80>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d01b      	beq.n	80028c0 <main+0xc5c>
				{
					buf[pos] = key_pressed;
 8002888:	4a1a      	ldr	r2, [pc, #104]	; (80028f4 <main+0xc90>)
 800288a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800288e:	4413      	add	r3, r2
 8002890:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8002894:	701a      	strb	r2, [r3, #0]
					pos++;
 8002896:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 800289a:	3301      	adds	r3, #1
 800289c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					buf[pos] = '\0';
 80028a0:	4a14      	ldr	r2, [pc, #80]	; (80028f4 <main+0xc90>)
 80028a2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80028a6:	4413      	add	r3, r2
 80028a8:	2200      	movs	r2, #0
 80028aa:	701a      	strb	r2, [r3, #0]

					LCD5110_set_cursor(0, 0, &lcd1);
 80028ac:	4a14      	ldr	r2, [pc, #80]	; (8002900 <main+0xc9c>)
 80028ae:	2100      	movs	r1, #0
 80028b0:	2000      	movs	r0, #0
 80028b2:	f7fe f963 	bl	8000b7c <LCD5110_set_cursor>
					LCD5110_print(buf, 0, &lcd1);
 80028b6:	4a12      	ldr	r2, [pc, #72]	; (8002900 <main+0xc9c>)
 80028b8:	2100      	movs	r1, #0
 80028ba:	480e      	ldr	r0, [pc, #56]	; (80028f4 <main+0xc90>)
 80028bc:	f7fe f981 	bl	8000bc2 <LCD5110_print>
				}
	    	}

	    }
	    LCD5110_refresh(&lcd1);
 80028c0:	480f      	ldr	r0, [pc, #60]	; (8002900 <main+0xc9c>)
 80028c2:	f7fe f94f 	bl	8000b64 <LCD5110_refresh>
	    HAL_Delay(1000);
 80028c6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80028ca:	f000 fdf9 	bl	80034c0 <HAL_Delay>
	    LCD5110_refresh(&lcd1);
 80028ce:	480c      	ldr	r0, [pc, #48]	; (8002900 <main+0xc9c>)
 80028d0:	f7fe f948 	bl	8000b64 <LCD5110_refresh>
	    key_pressed = keypad_scan();
 80028d4:	f7ff bb0c 	b.w	8001ef0 <main+0x28c>
 80028d8:	2000a582 	.word	0x2000a582
 80028dc:	20000020 	.word	0x20000020
 80028e0:	2000a57e 	.word	0x2000a57e
 80028e4:	2000a57d 	.word	0x2000a57d
 80028e8:	20000021 	.word	0x20000021
 80028ec:	2000a57f 	.word	0x2000a57f
 80028f0:	2000a583 	.word	0x2000a583
 80028f4:	200004d8 	.word	0x200004d8
 80028f8:	2000a581 	.word	0x2000a581
 80028fc:	2000a57c 	.word	0x2000a57c
 8002900:	200002b4 	.word	0x200002b4
 8002904:	2000002c 	.word	0x2000002c
 8002908:	0800cc9c 	.word	0x0800cc9c
 800290c:	2000a5e8 	.word	0x2000a5e8

08002910 <call_screen.6>:
    void call_screen() {
 8002910:	b590      	push	{r4, r7, lr}
 8002912:	b08b      	sub	sp, #44	; 0x2c
 8002914:	af00      	add	r7, sp, #0
 8002916:	4664      	mov	r4, ip
 8002918:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 800291c:	4819      	ldr	r0, [pc, #100]	; (8002984 <call_screen.6+0x74>)
 800291e:	f7fe f93f 	bl	8000ba0 <LCD5110_clear_scr>
    	LCD5110_refresh(&lcd1);
 8002922:	4818      	ldr	r0, [pc, #96]	; (8002984 <call_screen.6+0x74>)
 8002924:	f7fe f91e 	bl	8000b64 <LCD5110_refresh>
    	LCD5110_set_cursor(18, 1, &lcd1);
 8002928:	4a16      	ldr	r2, [pc, #88]	; (8002984 <call_screen.6+0x74>)
 800292a:	2101      	movs	r1, #1
 800292c:	2012      	movs	r0, #18
 800292e:	f7fe f925 	bl	8000b7c <LCD5110_set_cursor>
    	strcpy(phone_info, "Calling\n");
 8002932:	f107 030c 	add.w	r3, r7, #12
 8002936:	4a14      	ldr	r2, [pc, #80]	; (8002988 <call_screen.6+0x78>)
 8002938:	ca07      	ldmia	r2, {r0, r1, r2}
 800293a:	c303      	stmia	r3!, {r0, r1}
 800293c:	701a      	strb	r2, [r3, #0]
    	LCD5110_print(phone_info, BLACK, &lcd1);
 800293e:	f107 030c 	add.w	r3, r7, #12
 8002942:	4a10      	ldr	r2, [pc, #64]	; (8002984 <call_screen.6+0x74>)
 8002944:	2101      	movs	r1, #1
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe f93b 	bl	8000bc2 <LCD5110_print>
    	LCD5110_set_cursor(10, 20, &lcd1);
 800294c:	4a0d      	ldr	r2, [pc, #52]	; (8002984 <call_screen.6+0x74>)
 800294e:	2114      	movs	r1, #20
 8002950:	200a      	movs	r0, #10
 8002952:	f7fe f913 	bl	8000b7c <LCD5110_set_cursor>
    	LCD5110_print(buf, WHITE, &lcd1);
 8002956:	4a0b      	ldr	r2, [pc, #44]	; (8002984 <call_screen.6+0x74>)
 8002958:	2100      	movs	r1, #0
 800295a:	480c      	ldr	r0, [pc, #48]	; (800298c <call_screen.6+0x7c>)
 800295c:	f7fe f931 	bl	8000bc2 <LCD5110_print>
    	LCD5110_set_cursor(10, 40, &lcd1);
 8002960:	4a08      	ldr	r2, [pc, #32]	; (8002984 <call_screen.6+0x74>)
 8002962:	2128      	movs	r1, #40	; 0x28
 8002964:	200a      	movs	r0, #10
 8002966:	f7fe f909 	bl	8000b7c <LCD5110_set_cursor>
    	LCD5110_print("A-end call", 0, &lcd1);
 800296a:	4a06      	ldr	r2, [pc, #24]	; (8002984 <call_screen.6+0x74>)
 800296c:	2100      	movs	r1, #0
 800296e:	4808      	ldr	r0, [pc, #32]	; (8002990 <call_screen.6+0x80>)
 8002970:	f7fe f927 	bl	8000bc2 <LCD5110_print>
    	is_call = true;
 8002974:	2301      	movs	r3, #1
 8002976:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    }
 800297a:	bf00      	nop
 800297c:	372c      	adds	r7, #44	; 0x2c
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}
 8002982:	bf00      	nop
 8002984:	200002b4 	.word	0x200002b4
 8002988:	0800ce0c 	.word	0x0800ce0c
 800298c:	200004d8 	.word	0x200004d8
 8002990:	0800ce18 	.word	0x0800ce18

08002994 <screen_on_read.4>:
    void screen_on_read(int number) {
 8002994:	b580      	push	{r7, lr}
 8002996:	b082      	sub	sp, #8
 8002998:	af00      	add	r7, sp, #0
 800299a:	6078      	str	r0, [r7, #4]
 800299c:	f8c7 c000 	str.w	ip, [r7]
    	LCD5110_clear_scr(&lcd1);
 80029a0:	4818      	ldr	r0, [pc, #96]	; (8002a04 <screen_on_read.4+0x70>)
 80029a2:	f7fe f8fd 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 80029a6:	4817      	ldr	r0, [pc, #92]	; (8002a04 <screen_on_read.4+0x70>)
 80029a8:	f7fe f8dc 	bl	8000b64 <LCD5110_refresh>
		LCD5110_set_cursor(65, 40, &lcd1);
 80029ac:	4a15      	ldr	r2, [pc, #84]	; (8002a04 <screen_on_read.4+0x70>)
 80029ae:	2128      	movs	r1, #40	; 0x28
 80029b0:	2041      	movs	r0, #65	; 0x41
 80029b2:	f7fe f8e3 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("A->", 0, &lcd1);
 80029b6:	4a13      	ldr	r2, [pc, #76]	; (8002a04 <screen_on_read.4+0x70>)
 80029b8:	2100      	movs	r1, #0
 80029ba:	4813      	ldr	r0, [pc, #76]	; (8002a08 <screen_on_read.4+0x74>)
 80029bc:	f7fe f901 	bl	8000bc2 <LCD5110_print>
		read_message(gsm_module, number);
 80029c0:	4b12      	ldr	r3, [pc, #72]	; (8002a0c <screen_on_read.4+0x78>)
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029c8:	f7ff f81c 	bl	8001a04 <read_message>
		if (number != 0){
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d009      	beq.n	80029e6 <screen_on_read.4+0x52>
			LCD5110_set_cursor(5, 40, &lcd1);
 80029d2:	4a0c      	ldr	r2, [pc, #48]	; (8002a04 <screen_on_read.4+0x70>)
 80029d4:	2128      	movs	r1, #40	; 0x28
 80029d6:	2005      	movs	r0, #5
 80029d8:	f7fe f8d0 	bl	8000b7c <LCD5110_set_cursor>
			LCD5110_print("<-C", 0, &lcd1);
 80029dc:	4a09      	ldr	r2, [pc, #36]	; (8002a04 <screen_on_read.4+0x70>)
 80029de:	2100      	movs	r1, #0
 80029e0:	480b      	ldr	r0, [pc, #44]	; (8002a10 <screen_on_read.4+0x7c>)
 80029e2:	f7fe f8ee 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(20, 40, &lcd1);
 80029e6:	4a07      	ldr	r2, [pc, #28]	; (8002a04 <screen_on_read.4+0x70>)
 80029e8:	2128      	movs	r1, #40	; 0x28
 80029ea:	2014      	movs	r0, #20
 80029ec:	f7fe f8c6 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("B-exit", 0, &lcd1);
 80029f0:	4a04      	ldr	r2, [pc, #16]	; (8002a04 <screen_on_read.4+0x70>)
 80029f2:	2100      	movs	r1, #0
 80029f4:	4807      	ldr	r0, [pc, #28]	; (8002a14 <screen_on_read.4+0x80>)
 80029f6:	f7fe f8e4 	bl	8000bc2 <LCD5110_print>
    }
 80029fa:	bf00      	nop
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	200002b4 	.word	0x200002b4
 8002a08:	0800ce24 	.word	0x0800ce24
 8002a0c:	2000a584 	.word	0x2000a584
 8002a10:	0800ce28 	.word	0x0800ce28
 8002a14:	0800ce2c 	.word	0x0800ce2c

08002a18 <get_call_screen.0>:
    void get_call_screen(){
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b082      	sub	sp, #8
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 8002a22:	4814      	ldr	r0, [pc, #80]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a24:	f7fe f8bc 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8002a28:	4812      	ldr	r0, [pc, #72]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a2a:	f7fe f89b 	bl	8000b64 <LCD5110_refresh>
		LCD5110_print(buf, 0, &lcd1);
 8002a2e:	4a11      	ldr	r2, [pc, #68]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a30:	2100      	movs	r1, #0
 8002a32:	4811      	ldr	r0, [pc, #68]	; (8002a78 <get_call_screen.0+0x60>)
 8002a34:	f7fe f8c5 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(5, 15, &lcd1);
 8002a38:	4a0e      	ldr	r2, [pc, #56]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a3a:	210f      	movs	r1, #15
 8002a3c:	2005      	movs	r0, #5
 8002a3e:	f7fe f89d 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("A-accept call", 0, &lcd1);
 8002a42:	4a0c      	ldr	r2, [pc, #48]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a44:	2100      	movs	r1, #0
 8002a46:	480d      	ldr	r0, [pc, #52]	; (8002a7c <get_call_screen.0+0x64>)
 8002a48:	f7fe f8bb 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(5, 25, &lcd1);
 8002a4c:	4a09      	ldr	r2, [pc, #36]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a4e:	2119      	movs	r1, #25
 8002a50:	2005      	movs	r0, #5
 8002a52:	f7fe f893 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("B-reject call", 0, &lcd1);
 8002a56:	4a07      	ldr	r2, [pc, #28]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a58:	2100      	movs	r1, #0
 8002a5a:	4809      	ldr	r0, [pc, #36]	; (8002a80 <get_call_screen.0+0x68>)
 8002a5c:	f7fe f8b1 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 8002a60:	4a04      	ldr	r2, [pc, #16]	; (8002a74 <get_call_screen.0+0x5c>)
 8002a62:	2100      	movs	r1, #0
 8002a64:	2000      	movs	r0, #0
 8002a66:	f7fe f889 	bl	8000b7c <LCD5110_set_cursor>
    }
 8002a6a:	bf00      	nop
 8002a6c:	3708      	adds	r7, #8
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	200002b4 	.word	0x200002b4
 8002a78:	200004d8 	.word	0x200004d8
 8002a7c:	0800ce34 	.word	0x0800ce34
 8002a80:	0800ce44 	.word	0x0800ce44

08002a84 <main_screen.5>:
    void main_screen(Screen type_screen) {
 8002a84:	b590      	push	{r4, r7, lr}
 8002a86:	b08f      	sub	sp, #60	; 0x3c
 8002a88:	af04      	add	r7, sp, #16
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	71fb      	strb	r3, [r7, #7]
 8002a8e:	4664      	mov	r4, ip
 8002a90:	f8c7 c000 	str.w	ip, [r7]
    	LCD5110_clear_scr(&lcd1);
 8002a94:	484b      	ldr	r0, [pc, #300]	; (8002bc4 <main_screen.5+0x140>)
 8002a96:	f7fe f883 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8002a9a:	484a      	ldr	r0, [pc, #296]	; (8002bc4 <main_screen.5+0x140>)
 8002a9c:	f7fe f862 	bl	8000b64 <LCD5110_refresh>
		LCD5110_drawBitmap(8, 3, main_screen_image, 19, 19, 0, &lcd1.hw_conf);
 8002aa0:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8002aa4:	4b47      	ldr	r3, [pc, #284]	; (8002bc4 <main_screen.5+0x140>)
 8002aa6:	9302      	str	r3, [sp, #8]
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	9301      	str	r3, [sp, #4]
 8002aac:	2313      	movs	r3, #19
 8002aae:	9300      	str	r3, [sp, #0]
 8002ab0:	2313      	movs	r3, #19
 8002ab2:	2103      	movs	r1, #3
 8002ab4:	2008      	movs	r0, #8
 8002ab6:	f7fe fbda 	bl	800126e <LCD5110_drawBitmap>
		rect_t rectbox_phone={6, 1, 23, 23};
 8002aba:	4a43      	ldr	r2, [pc, #268]	; (8002bc8 <main_screen.5+0x144>)
 8002abc:	f107 0320 	add.w	r3, r7, #32
 8002ac0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ac4:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_snake={49,1, 23, 23};
 8002ac8:	4a40      	ldr	r2, [pc, #256]	; (8002bcc <main_screen.5+0x148>)
 8002aca:	f107 0318 	add.w	r3, r7, #24
 8002ace:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ad2:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_message={6,23, 23, 23};
 8002ad6:	4a3e      	ldr	r2, [pc, #248]	; (8002bd0 <main_screen.5+0x14c>)
 8002ad8:	f107 0310 	add.w	r3, r7, #16
 8002adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002ae0:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_message_history = {48, 23, 23, 23};
 8002ae4:	4a3b      	ldr	r2, [pc, #236]	; (8002bd4 <main_screen.5+0x150>)
 8002ae6:	f107 0308 	add.w	r3, r7, #8
 8002aea:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002aee:	e883 0003 	stmia.w	r3, {r0, r1}
		if (type_screen==0) {
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d107      	bne.n	8002b08 <main_screen.5+0x84>
			LCD5110_rect(&rectbox_phone, 1, &lcd1);
 8002af8:	f107 0320 	add.w	r3, r7, #32
 8002afc:	4a31      	ldr	r2, [pc, #196]	; (8002bc4 <main_screen.5+0x140>)
 8002afe:	2101      	movs	r1, #1
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe f9f6 	bl	8000ef2 <LCD5110_rect>
 8002b06:	e01c      	b.n	8002b42 <main_screen.5+0xbe>
		else if (type_screen==1) {
 8002b08:	79fb      	ldrb	r3, [r7, #7]
 8002b0a:	2b01      	cmp	r3, #1
 8002b0c:	d107      	bne.n	8002b1e <main_screen.5+0x9a>
			LCD5110_rect(&rectbox_snake, 1, &lcd1);
 8002b0e:	f107 0318 	add.w	r3, r7, #24
 8002b12:	4a2c      	ldr	r2, [pc, #176]	; (8002bc4 <main_screen.5+0x140>)
 8002b14:	2101      	movs	r1, #1
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe f9eb 	bl	8000ef2 <LCD5110_rect>
 8002b1c:	e011      	b.n	8002b42 <main_screen.5+0xbe>
		else if (type_screen == 2) {
 8002b1e:	79fb      	ldrb	r3, [r7, #7]
 8002b20:	2b02      	cmp	r3, #2
 8002b22:	d107      	bne.n	8002b34 <main_screen.5+0xb0>
			LCD5110_rect(&rectbox_message, 1, &lcd1);
 8002b24:	f107 0310 	add.w	r3, r7, #16
 8002b28:	4a26      	ldr	r2, [pc, #152]	; (8002bc4 <main_screen.5+0x140>)
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	f7fe f9e0 	bl	8000ef2 <LCD5110_rect>
 8002b32:	e006      	b.n	8002b42 <main_screen.5+0xbe>
			LCD5110_rect(&rectbox_message_history, 1, &lcd1);
 8002b34:	f107 0308 	add.w	r3, r7, #8
 8002b38:	4a22      	ldr	r2, [pc, #136]	; (8002bc4 <main_screen.5+0x140>)
 8002b3a:	2101      	movs	r1, #1
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe f9d8 	bl	8000ef2 <LCD5110_rect>
		LCD5110_refresh(&lcd1);
 8002b42:	4820      	ldr	r0, [pc, #128]	; (8002bc4 <main_screen.5+0x140>)
 8002b44:	f7fe f80e 	bl	8000b64 <LCD5110_refresh>
		LCD5110_set_cursor(50, 10, &lcd1);
 8002b48:	4a1e      	ldr	r2, [pc, #120]	; (8002bc4 <main_screen.5+0x140>)
 8002b4a:	210a      	movs	r1, #10
 8002b4c:	2032      	movs	r0, #50	; 0x32
 8002b4e:	f7fe f815 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_drawBitmap(50, 3, main_screen_snake, 19, 19, 0, &lcd1.hw_conf);
 8002b52:	f104 027b 	add.w	r2, r4, #123	; 0x7b
 8002b56:	4b1b      	ldr	r3, [pc, #108]	; (8002bc4 <main_screen.5+0x140>)
 8002b58:	9302      	str	r3, [sp, #8]
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	9301      	str	r3, [sp, #4]
 8002b5e:	2313      	movs	r3, #19
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	2313      	movs	r3, #19
 8002b64:	2103      	movs	r1, #3
 8002b66:	2032      	movs	r0, #50	; 0x32
 8002b68:	f7fe fb81 	bl	800126e <LCD5110_drawBitmap>
		LCD5110_refresh(&lcd1);
 8002b6c:	4815      	ldr	r0, [pc, #84]	; (8002bc4 <main_screen.5+0x140>)
 8002b6e:	f7fd fff9 	bl	8000b64 <LCD5110_refresh>
		LCD5110_set_cursor(8, 28, &lcd1);
 8002b72:	4a14      	ldr	r2, [pc, #80]	; (8002bc4 <main_screen.5+0x140>)
 8002b74:	211c      	movs	r1, #28
 8002b76:	2008      	movs	r0, #8
 8002b78:	f7fe f800 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_drawBitmap(8, 25, write_message, 19, 19, 0, &lcd1.hw_conf);
 8002b7c:	f104 0242 	add.w	r2, r4, #66	; 0x42
 8002b80:	4b10      	ldr	r3, [pc, #64]	; (8002bc4 <main_screen.5+0x140>)
 8002b82:	9302      	str	r3, [sp, #8]
 8002b84:	2300      	movs	r3, #0
 8002b86:	9301      	str	r3, [sp, #4]
 8002b88:	2313      	movs	r3, #19
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2313      	movs	r3, #19
 8002b8e:	2119      	movs	r1, #25
 8002b90:	2008      	movs	r0, #8
 8002b92:	f7fe fb6c 	bl	800126e <LCD5110_drawBitmap>
		LCD5110_set_cursor(50, 28, &lcd1);
 8002b96:	4a0b      	ldr	r2, [pc, #44]	; (8002bc4 <main_screen.5+0x140>)
 8002b98:	211c      	movs	r1, #28
 8002b9a:	2032      	movs	r0, #50	; 0x32
 8002b9c:	f7fd ffee 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_drawBitmap(50, 25, main_message, 19, 19, 0, &lcd1.hw_conf);
 8002ba0:	f104 0209 	add.w	r2, r4, #9
 8002ba4:	4b07      	ldr	r3, [pc, #28]	; (8002bc4 <main_screen.5+0x140>)
 8002ba6:	9302      	str	r3, [sp, #8]
 8002ba8:	2300      	movs	r3, #0
 8002baa:	9301      	str	r3, [sp, #4]
 8002bac:	2313      	movs	r3, #19
 8002bae:	9300      	str	r3, [sp, #0]
 8002bb0:	2313      	movs	r3, #19
 8002bb2:	2119      	movs	r1, #25
 8002bb4:	2032      	movs	r0, #50	; 0x32
 8002bb6:	f7fe fb5a 	bl	800126e <LCD5110_drawBitmap>
    }
 8002bba:	bf00      	nop
 8002bbc:	372c      	adds	r7, #44	; 0x2c
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd90      	pop	{r4, r7, pc}
 8002bc2:	bf00      	nop
 8002bc4:	200002b4 	.word	0x200002b4
 8002bc8:	0800ce54 	.word	0x0800ce54
 8002bcc:	0800ce5c 	.word	0x0800ce5c
 8002bd0:	0800ce64 	.word	0x0800ce64
 8002bd4:	0800ce6c 	.word	0x0800ce6c

08002bd8 <screen_for_message_sending.3>:
    void screen_for_message_sending() {
 8002bd8:	b590      	push	{r4, r7, lr}
 8002bda:	b083      	sub	sp, #12
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	4664      	mov	r4, ip
 8002be0:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 8002be4:	4818      	ldr	r0, [pc, #96]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002be6:	f7fd ffdb 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8002bea:	4817      	ldr	r0, [pc, #92]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002bec:	f7fd ffba 	bl	8000b64 <LCD5110_refresh>
		LCD5110_rect(&rect, 1, &lcd1);
 8002bf0:	4623      	mov	r3, r4
 8002bf2:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe f97b 	bl	8000ef2 <LCD5110_rect>
		LCD5110_rect_fill(&rect, 1, &lcd1);
 8002bfc:	4623      	mov	r3, r4
 8002bfe:	4a12      	ldr	r2, [pc, #72]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002c00:	2101      	movs	r1, #1
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe f987 	bl	8000f16 <LCD5110_rect_fill>
		LCD5110_set_cursor(10, 15, &lcd1);
 8002c08:	4a0f      	ldr	r2, [pc, #60]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002c0a:	210f      	movs	r1, #15
 8002c0c:	200a      	movs	r0, #10
 8002c0e:	f7fd ffb5 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("A-go to message", 0, &lcd1);
 8002c12:	4a0d      	ldr	r2, [pc, #52]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002c14:	2100      	movs	r1, #0
 8002c16:	480d      	ldr	r0, [pc, #52]	; (8002c4c <screen_for_message_sending.3+0x74>)
 8002c18:	f7fd ffd3 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(10, 35, &lcd1);
 8002c1c:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002c1e:	2123      	movs	r1, #35	; 0x23
 8002c20:	200a      	movs	r0, #10
 8002c22:	f7fd ffab 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("B-back", 0, &lcd1);
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4809      	ldr	r0, [pc, #36]	; (8002c50 <screen_for_message_sending.3+0x78>)
 8002c2c:	f7fd ffc9 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 8002c30:	4a05      	ldr	r2, [pc, #20]	; (8002c48 <screen_for_message_sending.3+0x70>)
 8002c32:	2100      	movs	r1, #0
 8002c34:	2000      	movs	r0, #0
 8002c36:	f7fd ffa1 	bl	8000b7c <LCD5110_set_cursor>
		is_message = false;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	7223      	strb	r3, [r4, #8]
    }
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd90      	pop	{r4, r7, pc}
 8002c46:	bf00      	nop
 8002c48:	200002b4 	.word	0x200002b4
 8002c4c:	0800ce74 	.word	0x0800ce74
 8002c50:	0800ccb8 	.word	0x0800ccb8

08002c54 <type_message_scren.1>:
    void type_message_scren() {
 8002c54:	b590      	push	{r4, r7, lr}
 8002c56:	b085      	sub	sp, #20
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4664      	mov	r4, ip
 8002c5c:	f8c7 c004 	str.w	ip, [r7, #4]
        	LCD5110_clear_scr(&lcd1);
 8002c60:	480e      	ldr	r0, [pc, #56]	; (8002c9c <type_message_scren.1+0x48>)
 8002c62:	f7fd ff9d 	bl	8000ba0 <LCD5110_clear_scr>
        	LCD5110_refresh(&lcd1);
 8002c66:	480d      	ldr	r0, [pc, #52]	; (8002c9c <type_message_scren.1+0x48>)
 8002c68:	f7fd ff7c 	bl	8000b64 <LCD5110_refresh>
        	rect_t rectbox_phone={1, 1, 60, 30};
 8002c6c:	4a0c      	ldr	r2, [pc, #48]	; (8002ca0 <type_message_scren.1+0x4c>)
 8002c6e:	f107 0308 	add.w	r3, r7, #8
 8002c72:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002c76:	e883 0003 	stmia.w	r3, {r0, r1}
        	LCD5110_set_cursor(5, 40, &lcd1);
 8002c7a:	4a08      	ldr	r2, [pc, #32]	; (8002c9c <type_message_scren.1+0x48>)
 8002c7c:	2128      	movs	r1, #40	; 0x28
 8002c7e:	2005      	movs	r0, #5
 8002c80:	f7fd ff7c 	bl	8000b7c <LCD5110_set_cursor>
        	LCD5110_print("A-send", 0, &lcd1);
 8002c84:	4a05      	ldr	r2, [pc, #20]	; (8002c9c <type_message_scren.1+0x48>)
 8002c86:	2100      	movs	r1, #0
 8002c88:	4806      	ldr	r0, [pc, #24]	; (8002ca4 <type_message_scren.1+0x50>)
 8002c8a:	f7fd ff9a 	bl	8000bc2 <LCD5110_print>
        	is_message = true;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	7223      	strb	r3, [r4, #8]
        }
 8002c92:	bf00      	nop
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd90      	pop	{r4, r7, pc}
 8002c9a:	bf00      	nop
 8002c9c:	200002b4 	.word	0x200002b4
 8002ca0:	0800ce8c 	.word	0x0800ce8c
 8002ca4:	0800ce84 	.word	0x0800ce84

08002ca8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b094      	sub	sp, #80	; 0x50
 8002cac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002cae:	f107 0320 	add.w	r3, r7, #32
 8002cb2:	2230      	movs	r2, #48	; 0x30
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	f009 f9dc 	bl	800c074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002cbc:	f107 030c 	add.w	r3, r7, #12
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]
 8002cc4:	605a      	str	r2, [r3, #4]
 8002cc6:	609a      	str	r2, [r3, #8]
 8002cc8:	60da      	str	r2, [r3, #12]
 8002cca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002ccc:	2300      	movs	r3, #0
 8002cce:	60bb      	str	r3, [r7, #8]
 8002cd0:	4b27      	ldr	r3, [pc, #156]	; (8002d70 <SystemClock_Config+0xc8>)
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	4a26      	ldr	r2, [pc, #152]	; (8002d70 <SystemClock_Config+0xc8>)
 8002cd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cda:	6413      	str	r3, [r2, #64]	; 0x40
 8002cdc:	4b24      	ldr	r3, [pc, #144]	; (8002d70 <SystemClock_Config+0xc8>)
 8002cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ce0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ce4:	60bb      	str	r3, [r7, #8]
 8002ce6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ce8:	2300      	movs	r3, #0
 8002cea:	607b      	str	r3, [r7, #4]
 8002cec:	4b21      	ldr	r3, [pc, #132]	; (8002d74 <SystemClock_Config+0xcc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <SystemClock_Config+0xcc>)
 8002cf2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cf6:	6013      	str	r3, [r2, #0]
 8002cf8:	4b1e      	ldr	r3, [pc, #120]	; (8002d74 <SystemClock_Config+0xcc>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002d00:	607b      	str	r3, [r7, #4]
 8002d02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002d04:	2301      	movs	r3, #1
 8002d06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002d08:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002d0e:	2302      	movs	r3, #2
 8002d10:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002d12:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002d18:	2304      	movs	r3, #4
 8002d1a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002d1c:	23a8      	movs	r3, #168	; 0xa8
 8002d1e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8002d20:	2304      	movs	r3, #4
 8002d22:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8002d24:	2307      	movs	r3, #7
 8002d26:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002d28:	f107 0320 	add.w	r3, r7, #32
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f002 ffb3 	bl	8005c98 <HAL_RCC_OscConfig>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8002d38:	f000 f8b6 	bl	8002ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002d3c:	230f      	movs	r3, #15
 8002d3e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d40:	2302      	movs	r3, #2
 8002d42:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d44:	2300      	movs	r3, #0
 8002d46:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002d48:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d4c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002d52:	f107 030c 	add.w	r3, r7, #12
 8002d56:	2102      	movs	r1, #2
 8002d58:	4618      	mov	r0, r3
 8002d5a:	f003 fa15 	bl	8006188 <HAL_RCC_ClockConfig>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002d64:	f000 f8a0 	bl	8002ea8 <Error_Handler>
  }
}
 8002d68:	bf00      	nop
 8002d6a:	3750      	adds	r7, #80	; 0x50
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40007000 	.word	0x40007000

08002d78 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002d7e:	463b      	mov	r3, r7
 8002d80:	2200      	movs	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	605a      	str	r2, [r3, #4]
 8002d86:	609a      	str	r2, [r3, #8]
 8002d88:	60da      	str	r2, [r3, #12]
 8002d8a:	611a      	str	r2, [r3, #16]
 8002d8c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002d92:	23c8      	movs	r3, #200	; 0xc8
 8002d94:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002d96:	2305      	movs	r3, #5
 8002d98:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d9e:	463b      	mov	r3, r7
 8002da0:	4618      	mov	r0, r3
 8002da2:	f003 fc11 	bl	80065c8 <HAL_RCCEx_PeriphCLKConfig>
 8002da6:	4603      	mov	r3, r0
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d001      	beq.n	8002db0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8002dac:	f000 f87c 	bl	8002ea8 <Error_Handler>
  }
}
 8002db0:	bf00      	nop
 8002db2:	3718      	adds	r7, #24
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}

08002db8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	6078      	str	r0, [r7, #4]

  if(huart == &huart1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4a32      	ldr	r2, [pc, #200]	; (8002e8c <HAL_UART_RxCpltCallback+0xd4>)
 8002dc4:	4293      	cmp	r3, r2
 8002dc6:	d15d      	bne.n	8002e84 <HAL_UART_RxCpltCallback+0xcc>
   {

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&usart1_byte, 1);
 8002dc8:	2201      	movs	r2, #1
 8002dca:	4931      	ldr	r1, [pc, #196]	; (8002e90 <HAL_UART_RxCpltCallback+0xd8>)
 8002dcc:	482f      	ldr	r0, [pc, #188]	; (8002e8c <HAL_UART_RxCpltCallback+0xd4>)
 8002dce:	f004 f95c 	bl	800708a <HAL_UART_Receive_IT>


    if(usart1_byte_count< 10000)
 8002dd2:	4b30      	ldr	r3, [pc, #192]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002dd4:	781b      	ldrb	r3, [r3, #0]
    {
      usart1_rx_buf[usart1_byte_count++] = usart1_byte;
 8002dd6:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002dd8:	781b      	ldrb	r3, [r3, #0]
 8002dda:	b2db      	uxtb	r3, r3
 8002ddc:	1c5a      	adds	r2, r3, #1
 8002dde:	b2d1      	uxtb	r1, r2
 8002de0:	4a2c      	ldr	r2, [pc, #176]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002de2:	7011      	strb	r1, [r2, #0]
 8002de4:	461a      	mov	r2, r3
 8002de6:	4b2a      	ldr	r3, [pc, #168]	; (8002e90 <HAL_UART_RxCpltCallback+0xd8>)
 8002de8:	781b      	ldrb	r3, [r3, #0]
 8002dea:	b2d9      	uxtb	r1, r3
 8002dec:	4b2a      	ldr	r3, [pc, #168]	; (8002e98 <HAL_UART_RxCpltCallback+0xe0>)
 8002dee:	5499      	strb	r1, [r3, r2]
    }

    if (check > 0){
 8002df0:	4b2a      	ldr	r3, [pc, #168]	; (8002e9c <HAL_UART_RxCpltCallback+0xe4>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	dd40      	ble.n	8002e7a <HAL_UART_RxCpltCallback+0xc2>
      if(usart1_rx_buf[usart1_byte_count- 1 ] == '\n' && usart1_rx_buf[usart1_byte_count - 2] == '\r' && end_r < 2){
 8002df8:	4b26      	ldr	r3, [pc, #152]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	b2db      	uxtb	r3, r3
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	4a25      	ldr	r2, [pc, #148]	; (8002e98 <HAL_UART_RxCpltCallback+0xe0>)
 8002e02:	5cd3      	ldrb	r3, [r2, r3]
 8002e04:	2b0a      	cmp	r3, #10
 8002e06:	d117      	bne.n	8002e38 <HAL_UART_RxCpltCallback+0x80>
 8002e08:	4b22      	ldr	r3, [pc, #136]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	3b02      	subs	r3, #2
 8002e10:	4a21      	ldr	r2, [pc, #132]	; (8002e98 <HAL_UART_RxCpltCallback+0xe0>)
 8002e12:	5cd3      	ldrb	r3, [r2, r3]
 8002e14:	2b0d      	cmp	r3, #13
 8002e16:	d10f      	bne.n	8002e38 <HAL_UART_RxCpltCallback+0x80>
 8002e18:	4b21      	ldr	r3, [pc, #132]	; (8002ea0 <HAL_UART_RxCpltCallback+0xe8>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	dc0b      	bgt.n	8002e38 <HAL_UART_RxCpltCallback+0x80>
        usart1_byte_count = 0;
 8002e20:	4b1c      	ldr	r3, [pc, #112]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	701a      	strb	r2, [r3, #0]
        usart1_rx_buf[0] = '\0';
 8002e26:	4b1c      	ldr	r3, [pc, #112]	; (8002e98 <HAL_UART_RxCpltCallback+0xe0>)
 8002e28:	2200      	movs	r2, #0
 8002e2a:	701a      	strb	r2, [r3, #0]
        end_r++;
 8002e2c:	4b1c      	ldr	r3, [pc, #112]	; (8002ea0 <HAL_UART_RxCpltCallback+0xe8>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	3301      	adds	r3, #1
 8002e32:	4a1b      	ldr	r2, [pc, #108]	; (8002ea0 <HAL_UART_RxCpltCallback+0xe8>)
 8002e34:	6013      	str	r3, [r2, #0]
 8002e36:	e020      	b.n	8002e7a <HAL_UART_RxCpltCallback+0xc2>
      } else if(usart1_rx_buf[usart1_byte_count - 1] == '\r' && end_r > 1){
 8002e38:	4b16      	ldr	r3, [pc, #88]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002e3a:	781b      	ldrb	r3, [r3, #0]
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	4a15      	ldr	r2, [pc, #84]	; (8002e98 <HAL_UART_RxCpltCallback+0xe0>)
 8002e42:	5cd3      	ldrb	r3, [r2, r3]
 8002e44:	2b0d      	cmp	r3, #13
 8002e46:	d118      	bne.n	8002e7a <HAL_UART_RxCpltCallback+0xc2>
 8002e48:	4b15      	ldr	r3, [pc, #84]	; (8002ea0 <HAL_UART_RxCpltCallback+0xe8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	dd14      	ble.n	8002e7a <HAL_UART_RxCpltCallback+0xc2>
        if (usart1_byte_count > 1){
 8002e50:	4b10      	ldr	r3, [pc, #64]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	2b01      	cmp	r3, #1
 8002e58:	d90f      	bls.n	8002e7a <HAL_UART_RxCpltCallback+0xc2>
          handle_interrupts(gsm_module, usart1_rx_buf, check);
 8002e5a:	4b10      	ldr	r3, [pc, #64]	; (8002e9c <HAL_UART_RxCpltCallback+0xe4>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4911      	ldr	r1, [pc, #68]	; (8002ea4 <HAL_UART_RxCpltCallback+0xec>)
 8002e60:	4a0d      	ldr	r2, [pc, #52]	; (8002e98 <HAL_UART_RxCpltCallback+0xe0>)
 8002e62:	c903      	ldmia	r1, {r0, r1}
 8002e64:	f7fe fe08 	bl	8001a78 <handle_interrupts>
          check = 0;
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_UART_RxCpltCallback+0xe4>)
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	601a      	str	r2, [r3, #0]
          end_r = 0;
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_UART_RxCpltCallback+0xe8>)
 8002e70:	2200      	movs	r2, #0
 8002e72:	601a      	str	r2, [r3, #0]
          usart1_byte_count = 0;
 8002e74:	4b07      	ldr	r3, [pc, #28]	; (8002e94 <HAL_UART_RxCpltCallback+0xdc>)
 8002e76:	2200      	movs	r2, #0
 8002e78:	701a      	strb	r2, [r3, #0]
        }
      }
    }

    check++;
 8002e7a:	4b08      	ldr	r3, [pc, #32]	; (8002e9c <HAL_UART_RxCpltCallback+0xe4>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	3301      	adds	r3, #1
 8002e80:	4a06      	ldr	r2, [pc, #24]	; (8002e9c <HAL_UART_RxCpltCallback+0xe4>)
 8002e82:	6013      	str	r3, [r2, #0]
  }


}
 8002e84:	bf00      	nop
 8002e86:	3708      	adds	r7, #8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}
 8002e8c:	2000a5e8 	.word	0x2000a5e8
 8002e90:	2000a570 	.word	0x2000a570
 8002e94:	2000a571 	.word	0x2000a571
 8002e98:	200004e4 	.word	0x200004e4
 8002e9c:	2000a574 	.word	0x2000a574
 8002ea0:	2000a578 	.word	0x2000a578
 8002ea4:	2000a584 	.word	0x2000a584

08002ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002eac:	b672      	cpsid	i
}
 8002eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002eb0:	e7fe      	b.n	8002eb0 <Error_Handler+0x8>
	...

08002eb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002eb8:	4b17      	ldr	r3, [pc, #92]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002eba:	4a18      	ldr	r2, [pc, #96]	; (8002f1c <MX_SPI1_Init+0x68>)
 8002ebc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8002ebe:	4b16      	ldr	r3, [pc, #88]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002ec0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ec4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002ec6:	4b14      	ldr	r3, [pc, #80]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002ecc:	4b12      	ldr	r3, [pc, #72]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ed2:	4b11      	ldr	r3, [pc, #68]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ed8:	4b0f      	ldr	r3, [pc, #60]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002eda:	2200      	movs	r2, #0
 8002edc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002ede:	4b0e      	ldr	r3, [pc, #56]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002ee0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ee4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002ee6:	4b0c      	ldr	r3, [pc, #48]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002ee8:	2210      	movs	r2, #16
 8002eea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002eec:	4b0a      	ldr	r3, [pc, #40]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002eee:	2200      	movs	r2, #0
 8002ef0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ef2:	4b09      	ldr	r3, [pc, #36]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002ef8:	4b07      	ldr	r3, [pc, #28]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002efa:	2200      	movs	r2, #0
 8002efc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002efe:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002f00:	220a      	movs	r2, #10
 8002f02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002f04:	4804      	ldr	r0, [pc, #16]	; (8002f18 <MX_SPI1_Init+0x64>)
 8002f06:	f003 fcaf 	bl	8006868 <HAL_SPI_Init>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002f10:	f7ff ffca 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002f14:	bf00      	nop
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	2000a58c 	.word	0x2000a58c
 8002f1c:	40013000 	.word	0x40013000

08002f20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b08a      	sub	sp, #40	; 0x28
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f28:	f107 0314 	add.w	r3, r7, #20
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	601a      	str	r2, [r3, #0]
 8002f30:	605a      	str	r2, [r3, #4]
 8002f32:	609a      	str	r2, [r3, #8]
 8002f34:	60da      	str	r2, [r3, #12]
 8002f36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a19      	ldr	r2, [pc, #100]	; (8002fa4 <HAL_SPI_MspInit+0x84>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d12b      	bne.n	8002f9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f42:	2300      	movs	r3, #0
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	4b18      	ldr	r3, [pc, #96]	; (8002fa8 <HAL_SPI_MspInit+0x88>)
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	4a17      	ldr	r2, [pc, #92]	; (8002fa8 <HAL_SPI_MspInit+0x88>)
 8002f4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f50:	6453      	str	r3, [r2, #68]	; 0x44
 8002f52:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_SPI_MspInit+0x88>)
 8002f54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f5a:	613b      	str	r3, [r7, #16]
 8002f5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60fb      	str	r3, [r7, #12]
 8002f62:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_SPI_MspInit+0x88>)
 8002f64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f66:	4a10      	ldr	r2, [pc, #64]	; (8002fa8 <HAL_SPI_MspInit+0x88>)
 8002f68:	f043 0301 	orr.w	r3, r3, #1
 8002f6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f6e:	4b0e      	ldr	r3, [pc, #56]	; (8002fa8 <HAL_SPI_MspInit+0x88>)
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60fb      	str	r3, [r7, #12]
 8002f78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8002f7a:	23e0      	movs	r3, #224	; 0xe0
 8002f7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f7e:	2302      	movs	r3, #2
 8002f80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f82:	2300      	movs	r3, #0
 8002f84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f86:	2303      	movs	r3, #3
 8002f88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002f8a:	2305      	movs	r3, #5
 8002f8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4619      	mov	r1, r3
 8002f94:	4805      	ldr	r0, [pc, #20]	; (8002fac <HAL_SPI_MspInit+0x8c>)
 8002f96:	f000 fc5b 	bl	8003850 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8002f9a:	bf00      	nop
 8002f9c:	3728      	adds	r7, #40	; 0x28
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40013000 	.word	0x40013000
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40020000 	.word	0x40020000

08002fb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	607b      	str	r3, [r7, #4]
 8002fba:	4b10      	ldr	r3, [pc, #64]	; (8002ffc <HAL_MspInit+0x4c>)
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	4a0f      	ldr	r2, [pc, #60]	; (8002ffc <HAL_MspInit+0x4c>)
 8002fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002fc6:	4b0d      	ldr	r3, [pc, #52]	; (8002ffc <HAL_MspInit+0x4c>)
 8002fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fce:	607b      	str	r3, [r7, #4]
 8002fd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	603b      	str	r3, [r7, #0]
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_MspInit+0x4c>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <HAL_MspInit+0x4c>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_MspInit+0x4c>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002fee:	2007      	movs	r0, #7
 8002ff0:	f000 fb5a 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ff4:	bf00      	nop
 8002ff6:	3708      	adds	r7, #8
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bd80      	pop	{r7, pc}
 8002ffc:	40023800 	.word	0x40023800

08003000 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003004:	e7fe      	b.n	8003004 <NMI_Handler+0x4>

08003006 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003006:	b480      	push	{r7}
 8003008:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800300a:	e7fe      	b.n	800300a <HardFault_Handler+0x4>

0800300c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800300c:	b480      	push	{r7}
 800300e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003010:	e7fe      	b.n	8003010 <MemManage_Handler+0x4>

08003012 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003012:	b480      	push	{r7}
 8003014:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003016:	e7fe      	b.n	8003016 <BusFault_Handler+0x4>

08003018 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800301c:	e7fe      	b.n	800301c <UsageFault_Handler+0x4>

0800301e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800301e:	b480      	push	{r7}
 8003020:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003022:	bf00      	nop
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr

0800302c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800302c:	b480      	push	{r7}
 800302e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003030:	bf00      	nop
 8003032:	46bd      	mov	sp, r7
 8003034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003038:	4770      	bx	lr

0800303a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800303a:	b480      	push	{r7}
 800303c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800303e:	bf00      	nop
 8003040:	46bd      	mov	sp, r7
 8003042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003046:	4770      	bx	lr

08003048 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800304c:	f000 fa18 	bl	8003480 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003050:	bf00      	nop
 8003052:	bd80      	pop	{r7, pc}

08003054 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003058:	2001      	movs	r0, #1
 800305a:	f000 fdaf 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800305e:	bf00      	nop
 8003060:	bd80      	pop	{r7, pc}

08003062 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003062:	b580      	push	{r7, lr}
 8003064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003066:	2002      	movs	r0, #2
 8003068:	f000 fda8 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800306c:	bf00      	nop
 800306e:	bd80      	pop	{r7, pc}

08003070 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003074:	2004      	movs	r0, #4
 8003076:	f000 fda1 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}

0800307e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 800307e:	b580      	push	{r7, lr}
 8003080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003082:	2008      	movs	r0, #8
 8003084:	f000 fd9a 	bl	8003bbc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003088:	bf00      	nop
 800308a:	bd80      	pop	{r7, pc}

0800308c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003090:	4802      	ldr	r0, [pc, #8]	; (800309c <USART1_IRQHandler+0x10>)
 8003092:	f004 f82b 	bl	80070ec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003096:	bf00      	nop
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	2000a5e8 	.word	0x2000a5e8

080030a0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80030a4:	4802      	ldr	r0, [pc, #8]	; (80030b0 <OTG_FS_IRQHandler+0x10>)
 80030a6:	f001 fce1 	bl	8004a6c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80030aa:	bf00      	nop
 80030ac:	bd80      	pop	{r7, pc}
 80030ae:	bf00      	nop
 80030b0:	2000ab10 	.word	0x2000ab10

080030b4 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
 80030bc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80030be:	f009 f87b 	bl	800c1b8 <__errno>
 80030c2:	4603      	mov	r3, r0
 80030c4:	2216      	movs	r2, #22
 80030c6:	601a      	str	r2, [r3, #0]
  return -1;
 80030c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}

080030d4 <_exit>:

void _exit (int status)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80030dc:	f04f 31ff 	mov.w	r1, #4294967295
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f7ff ffe7 	bl	80030b4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80030e6:	e7fe      	b.n	80030e6 <_exit+0x12>

080030e8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b086      	sub	sp, #24
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	60f8      	str	r0, [r7, #12]
 80030f0:	60b9      	str	r1, [r7, #8]
 80030f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80030f4:	2300      	movs	r3, #0
 80030f6:	617b      	str	r3, [r7, #20]
 80030f8:	e00a      	b.n	8003110 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80030fa:	f3af 8000 	nop.w
 80030fe:	4601      	mov	r1, r0
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	60ba      	str	r2, [r7, #8]
 8003106:	b2ca      	uxtb	r2, r1
 8003108:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	3301      	adds	r3, #1
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	429a      	cmp	r2, r3
 8003116:	dbf0      	blt.n	80030fa <_read+0x12>
  }

  return len;
 8003118:	687b      	ldr	r3, [r7, #4]
}
 800311a:	4618      	mov	r0, r3
 800311c:	3718      	adds	r7, #24
 800311e:	46bd      	mov	sp, r7
 8003120:	bd80      	pop	{r7, pc}

08003122 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003122:	b580      	push	{r7, lr}
 8003124:	b086      	sub	sp, #24
 8003126:	af00      	add	r7, sp, #0
 8003128:	60f8      	str	r0, [r7, #12]
 800312a:	60b9      	str	r1, [r7, #8]
 800312c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800312e:	2300      	movs	r3, #0
 8003130:	617b      	str	r3, [r7, #20]
 8003132:	e009      	b.n	8003148 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	1c5a      	adds	r2, r3, #1
 8003138:	60ba      	str	r2, [r7, #8]
 800313a:	781b      	ldrb	r3, [r3, #0]
 800313c:	4618      	mov	r0, r3
 800313e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003142:	697b      	ldr	r3, [r7, #20]
 8003144:	3301      	adds	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	697a      	ldr	r2, [r7, #20]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	429a      	cmp	r2, r3
 800314e:	dbf1      	blt.n	8003134 <_write+0x12>
  }
  return len;
 8003150:	687b      	ldr	r3, [r7, #4]
}
 8003152:	4618      	mov	r0, r3
 8003154:	3718      	adds	r7, #24
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <_close>:

int _close(int file)
{
 800315a:	b480      	push	{r7}
 800315c:	b083      	sub	sp, #12
 800315e:	af00      	add	r7, sp, #0
 8003160:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003162:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003166:	4618      	mov	r0, r3
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003170:	4770      	bx	lr

08003172 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003172:	b480      	push	{r7}
 8003174:	b083      	sub	sp, #12
 8003176:	af00      	add	r7, sp, #0
 8003178:	6078      	str	r0, [r7, #4]
 800317a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800317c:	683b      	ldr	r3, [r7, #0]
 800317e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003182:	605a      	str	r2, [r3, #4]
  return 0;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	370c      	adds	r7, #12
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <_isatty>:

int _isatty(int file)
{
 8003192:	b480      	push	{r7}
 8003194:	b083      	sub	sp, #12
 8003196:	af00      	add	r7, sp, #0
 8003198:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800319a:	2301      	movs	r3, #1
}
 800319c:	4618      	mov	r0, r3
 800319e:	370c      	adds	r7, #12
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b085      	sub	sp, #20
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	60f8      	str	r0, [r7, #12]
 80031b0:	60b9      	str	r1, [r7, #8]
 80031b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr
	...

080031c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b086      	sub	sp, #24
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80031cc:	4a14      	ldr	r2, [pc, #80]	; (8003220 <_sbrk+0x5c>)
 80031ce:	4b15      	ldr	r3, [pc, #84]	; (8003224 <_sbrk+0x60>)
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80031d8:	4b13      	ldr	r3, [pc, #76]	; (8003228 <_sbrk+0x64>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d102      	bne.n	80031e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80031e0:	4b11      	ldr	r3, [pc, #68]	; (8003228 <_sbrk+0x64>)
 80031e2:	4a12      	ldr	r2, [pc, #72]	; (800322c <_sbrk+0x68>)
 80031e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80031e6:	4b10      	ldr	r3, [pc, #64]	; (8003228 <_sbrk+0x64>)
 80031e8:	681a      	ldr	r2, [r3, #0]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	4413      	add	r3, r2
 80031ee:	693a      	ldr	r2, [r7, #16]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d207      	bcs.n	8003204 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80031f4:	f008 ffe0 	bl	800c1b8 <__errno>
 80031f8:	4603      	mov	r3, r0
 80031fa:	220c      	movs	r2, #12
 80031fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80031fe:	f04f 33ff 	mov.w	r3, #4294967295
 8003202:	e009      	b.n	8003218 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003204:	4b08      	ldr	r3, [pc, #32]	; (8003228 <_sbrk+0x64>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <_sbrk+0x64>)
 800320c:	681a      	ldr	r2, [r3, #0]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	4a05      	ldr	r2, [pc, #20]	; (8003228 <_sbrk+0x64>)
 8003214:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003216:	68fb      	ldr	r3, [r7, #12]
}
 8003218:	4618      	mov	r0, r3
 800321a:	3718      	adds	r7, #24
 800321c:	46bd      	mov	sp, r7
 800321e:	bd80      	pop	{r7, pc}
 8003220:	20020000 	.word	0x20020000
 8003224:	00000400 	.word	0x00000400
 8003228:	2000a5e4 	.word	0x2000a5e4
 800322c:	2000b180 	.word	0x2000b180

08003230 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003230:	b480      	push	{r7}
 8003232:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003234:	4b06      	ldr	r3, [pc, #24]	; (8003250 <SystemInit+0x20>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	4a05      	ldr	r2, [pc, #20]	; (8003250 <SystemInit+0x20>)
 800323c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003244:	bf00      	nop
 8003246:	46bd      	mov	sp, r7
 8003248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324c:	4770      	bx	lr
 800324e:	bf00      	nop
 8003250:	e000ed00 	.word	0xe000ed00

08003254 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003258:	4b11      	ldr	r3, [pc, #68]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 800325a:	4a12      	ldr	r2, [pc, #72]	; (80032a4 <MX_USART1_UART_Init+0x50>)
 800325c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 8003260:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003264:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003266:	4b0e      	ldr	r3, [pc, #56]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 8003268:	2200      	movs	r2, #0
 800326a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800326c:	4b0c      	ldr	r3, [pc, #48]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 800326e:	2200      	movs	r2, #0
 8003270:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003272:	4b0b      	ldr	r3, [pc, #44]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 8003274:	2200      	movs	r2, #0
 8003276:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003278:	4b09      	ldr	r3, [pc, #36]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 800327a:	220c      	movs	r2, #12
 800327c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800327e:	4b08      	ldr	r3, [pc, #32]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 8003280:	2200      	movs	r2, #0
 8003282:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003284:	4b06      	ldr	r3, [pc, #24]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 8003286:	2200      	movs	r2, #0
 8003288:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800328a:	4805      	ldr	r0, [pc, #20]	; (80032a0 <MX_USART1_UART_Init+0x4c>)
 800328c:	f003 fd7c 	bl	8006d88 <HAL_UART_Init>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003296:	f7ff fe07 	bl	8002ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800329a:	bf00      	nop
 800329c:	bd80      	pop	{r7, pc}
 800329e:	bf00      	nop
 80032a0:	2000a5e8 	.word	0x2000a5e8
 80032a4:	40011000 	.word	0x40011000

080032a8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b08a      	sub	sp, #40	; 0x28
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032b0:	f107 0314 	add.w	r3, r7, #20
 80032b4:	2200      	movs	r2, #0
 80032b6:	601a      	str	r2, [r3, #0]
 80032b8:	605a      	str	r2, [r3, #4]
 80032ba:	609a      	str	r2, [r3, #8]
 80032bc:	60da      	str	r2, [r3, #12]
 80032be:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a2c      	ldr	r2, [pc, #176]	; (8003378 <HAL_UART_MspInit+0xd0>)
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d152      	bne.n	8003370 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80032ca:	2300      	movs	r3, #0
 80032cc:	613b      	str	r3, [r7, #16]
 80032ce:	4b2b      	ldr	r3, [pc, #172]	; (800337c <HAL_UART_MspInit+0xd4>)
 80032d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d2:	4a2a      	ldr	r2, [pc, #168]	; (800337c <HAL_UART_MspInit+0xd4>)
 80032d4:	f043 0310 	orr.w	r3, r3, #16
 80032d8:	6453      	str	r3, [r2, #68]	; 0x44
 80032da:	4b28      	ldr	r3, [pc, #160]	; (800337c <HAL_UART_MspInit+0xd4>)
 80032dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	613b      	str	r3, [r7, #16]
 80032e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
 80032ea:	4b24      	ldr	r3, [pc, #144]	; (800337c <HAL_UART_MspInit+0xd4>)
 80032ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ee:	4a23      	ldr	r2, [pc, #140]	; (800337c <HAL_UART_MspInit+0xd4>)
 80032f0:	f043 0301 	orr.w	r3, r3, #1
 80032f4:	6313      	str	r3, [r2, #48]	; 0x30
 80032f6:	4b21      	ldr	r3, [pc, #132]	; (800337c <HAL_UART_MspInit+0xd4>)
 80032f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fa:	f003 0301 	and.w	r3, r3, #1
 80032fe:	60fb      	str	r3, [r7, #12]
 8003300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003302:	2300      	movs	r3, #0
 8003304:	60bb      	str	r3, [r7, #8]
 8003306:	4b1d      	ldr	r3, [pc, #116]	; (800337c <HAL_UART_MspInit+0xd4>)
 8003308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330a:	4a1c      	ldr	r2, [pc, #112]	; (800337c <HAL_UART_MspInit+0xd4>)
 800330c:	f043 0302 	orr.w	r3, r3, #2
 8003310:	6313      	str	r3, [r2, #48]	; 0x30
 8003312:	4b1a      	ldr	r3, [pc, #104]	; (800337c <HAL_UART_MspInit+0xd4>)
 8003314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	60bb      	str	r3, [r7, #8]
 800331c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800331e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003322:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003324:	2302      	movs	r3, #2
 8003326:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003328:	2300      	movs	r3, #0
 800332a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800332c:	2303      	movs	r3, #3
 800332e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003330:	2307      	movs	r3, #7
 8003332:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003334:	f107 0314 	add.w	r3, r7, #20
 8003338:	4619      	mov	r1, r3
 800333a:	4811      	ldr	r0, [pc, #68]	; (8003380 <HAL_UART_MspInit+0xd8>)
 800333c:	f000 fa88 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003340:	2380      	movs	r3, #128	; 0x80
 8003342:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003344:	2302      	movs	r3, #2
 8003346:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003348:	2300      	movs	r3, #0
 800334a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800334c:	2303      	movs	r3, #3
 800334e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003350:	2307      	movs	r3, #7
 8003352:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	4619      	mov	r1, r3
 800335a:	480a      	ldr	r0, [pc, #40]	; (8003384 <HAL_UART_MspInit+0xdc>)
 800335c:	f000 fa78 	bl	8003850 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	2100      	movs	r1, #0
 8003364:	2025      	movs	r0, #37	; 0x25
 8003366:	f000 f9aa 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800336a:	2025      	movs	r0, #37	; 0x25
 800336c:	f000 f9c3 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003370:	bf00      	nop
 8003372:	3728      	adds	r7, #40	; 0x28
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	40011000 	.word	0x40011000
 800337c:	40023800 	.word	0x40023800
 8003380:	40020000 	.word	0x40020000
 8003384:	40020400 	.word	0x40020400

08003388 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003388:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800338c:	480d      	ldr	r0, [pc, #52]	; (80033c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800338e:	490e      	ldr	r1, [pc, #56]	; (80033c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003390:	4a0e      	ldr	r2, [pc, #56]	; (80033cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003392:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003394:	e002      	b.n	800339c <LoopCopyDataInit>

08003396 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003396:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003398:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800339a:	3304      	adds	r3, #4

0800339c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800339c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800339e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033a0:	d3f9      	bcc.n	8003396 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033a2:	4a0b      	ldr	r2, [pc, #44]	; (80033d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033a4:	4c0b      	ldr	r4, [pc, #44]	; (80033d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033a8:	e001      	b.n	80033ae <LoopFillZerobss>

080033aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033ac:	3204      	adds	r2, #4

080033ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033b0:	d3fb      	bcc.n	80033aa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80033b2:	f7ff ff3d 	bl	8003230 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033b6:	f008 ff05 	bl	800c1c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033ba:	f7fe fc53 	bl	8001c64 <main>
  bx  lr    
 80033be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80033c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80033c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033c8:	200001b4 	.word	0x200001b4
  ldr r2, =_sidata
 80033cc:	0800d648 	.word	0x0800d648
  ldr r2, =_sbss
 80033d0:	200001b4 	.word	0x200001b4
  ldr r4, =_ebss
 80033d4:	2000b17c 	.word	0x2000b17c

080033d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033d8:	e7fe      	b.n	80033d8 <ADC_IRQHandler>
	...

080033dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033dc:	b580      	push	{r7, lr}
 80033de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80033e0:	4b0e      	ldr	r3, [pc, #56]	; (800341c <HAL_Init+0x40>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a0d      	ldr	r2, [pc, #52]	; (800341c <HAL_Init+0x40>)
 80033e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80033ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80033ec:	4b0b      	ldr	r3, [pc, #44]	; (800341c <HAL_Init+0x40>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a0a      	ldr	r2, [pc, #40]	; (800341c <HAL_Init+0x40>)
 80033f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80033f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80033f8:	4b08      	ldr	r3, [pc, #32]	; (800341c <HAL_Init+0x40>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_Init+0x40>)
 80033fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003402:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003404:	2003      	movs	r0, #3
 8003406:	f000 f94f 	bl	80036a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800340a:	2000      	movs	r0, #0
 800340c:	f000 f808 	bl	8003420 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003410:	f7ff fdce 	bl	8002fb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40023c00 	.word	0x40023c00

08003420 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b082      	sub	sp, #8
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003428:	4b12      	ldr	r3, [pc, #72]	; (8003474 <HAL_InitTick+0x54>)
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	4b12      	ldr	r3, [pc, #72]	; (8003478 <HAL_InitTick+0x58>)
 800342e:	781b      	ldrb	r3, [r3, #0]
 8003430:	4619      	mov	r1, r3
 8003432:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003436:	fbb3 f3f1 	udiv	r3, r3, r1
 800343a:	fbb2 f3f3 	udiv	r3, r2, r3
 800343e:	4618      	mov	r0, r3
 8003440:	f000 f967 	bl	8003712 <HAL_SYSTICK_Config>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800344a:	2301      	movs	r3, #1
 800344c:	e00e      	b.n	800346c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2b0f      	cmp	r3, #15
 8003452:	d80a      	bhi.n	800346a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003454:	2200      	movs	r2, #0
 8003456:	6879      	ldr	r1, [r7, #4]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	f000 f92f 	bl	80036be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003460:	4a06      	ldr	r2, [pc, #24]	; (800347c <HAL_InitTick+0x5c>)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003466:	2300      	movs	r3, #0
 8003468:	e000      	b.n	800346c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
}
 800346c:	4618      	mov	r0, r3
 800346e:	3708      	adds	r7, #8
 8003470:	46bd      	mov	sp, r7
 8003472:	bd80      	pop	{r7, pc}
 8003474:	2000003c 	.word	0x2000003c
 8003478:	20000044 	.word	0x20000044
 800347c:	20000040 	.word	0x20000040

08003480 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003480:	b480      	push	{r7}
 8003482:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <HAL_IncTick+0x20>)
 8003486:	781b      	ldrb	r3, [r3, #0]
 8003488:	461a      	mov	r2, r3
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_IncTick+0x24>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4413      	add	r3, r2
 8003490:	4a04      	ldr	r2, [pc, #16]	; (80034a4 <HAL_IncTick+0x24>)
 8003492:	6013      	str	r3, [r2, #0]
}
 8003494:	bf00      	nop
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	20000044 	.word	0x20000044
 80034a4:	2000a62c 	.word	0x2000a62c

080034a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034a8:	b480      	push	{r7}
 80034aa:	af00      	add	r7, sp, #0
  return uwTick;
 80034ac:	4b03      	ldr	r3, [pc, #12]	; (80034bc <HAL_GetTick+0x14>)
 80034ae:	681b      	ldr	r3, [r3, #0]
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	2000a62c 	.word	0x2000a62c

080034c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034c8:	f7ff ffee 	bl	80034a8 <HAL_GetTick>
 80034cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d8:	d005      	beq.n	80034e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034da:	4b0a      	ldr	r3, [pc, #40]	; (8003504 <HAL_Delay+0x44>)
 80034dc:	781b      	ldrb	r3, [r3, #0]
 80034de:	461a      	mov	r2, r3
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4413      	add	r3, r2
 80034e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80034e6:	bf00      	nop
 80034e8:	f7ff ffde 	bl	80034a8 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	429a      	cmp	r2, r3
 80034f6:	d8f7      	bhi.n	80034e8 <HAL_Delay+0x28>
  {
  }
}
 80034f8:	bf00      	nop
 80034fa:	bf00      	nop
 80034fc:	3710      	adds	r7, #16
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	20000044 	.word	0x20000044

08003508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003508:	b480      	push	{r7}
 800350a:	b085      	sub	sp, #20
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003518:	4b0c      	ldr	r3, [pc, #48]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800351a:	68db      	ldr	r3, [r3, #12]
 800351c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003524:	4013      	ands	r3, r2
 8003526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003530:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800353a:	4a04      	ldr	r2, [pc, #16]	; (800354c <__NVIC_SetPriorityGrouping+0x44>)
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	60d3      	str	r3, [r2, #12]
}
 8003540:	bf00      	nop
 8003542:	3714      	adds	r7, #20
 8003544:	46bd      	mov	sp, r7
 8003546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354a:	4770      	bx	lr
 800354c:	e000ed00 	.word	0xe000ed00

08003550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003550:	b480      	push	{r7}
 8003552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003554:	4b04      	ldr	r3, [pc, #16]	; (8003568 <__NVIC_GetPriorityGrouping+0x18>)
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	0a1b      	lsrs	r3, r3, #8
 800355a:	f003 0307 	and.w	r3, r3, #7
}
 800355e:	4618      	mov	r0, r3
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr
 8003568:	e000ed00 	.word	0xe000ed00

0800356c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800356c:	b480      	push	{r7}
 800356e:	b083      	sub	sp, #12
 8003570:	af00      	add	r7, sp, #0
 8003572:	4603      	mov	r3, r0
 8003574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800357a:	2b00      	cmp	r3, #0
 800357c:	db0b      	blt.n	8003596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800357e:	79fb      	ldrb	r3, [r7, #7]
 8003580:	f003 021f 	and.w	r2, r3, #31
 8003584:	4907      	ldr	r1, [pc, #28]	; (80035a4 <__NVIC_EnableIRQ+0x38>)
 8003586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800358a:	095b      	lsrs	r3, r3, #5
 800358c:	2001      	movs	r0, #1
 800358e:	fa00 f202 	lsl.w	r2, r0, r2
 8003592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003596:	bf00      	nop
 8003598:	370c      	adds	r7, #12
 800359a:	46bd      	mov	sp, r7
 800359c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a0:	4770      	bx	lr
 80035a2:	bf00      	nop
 80035a4:	e000e100 	.word	0xe000e100

080035a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	4603      	mov	r3, r0
 80035b0:	6039      	str	r1, [r7, #0]
 80035b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	db0a      	blt.n	80035d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	b2da      	uxtb	r2, r3
 80035c0:	490c      	ldr	r1, [pc, #48]	; (80035f4 <__NVIC_SetPriority+0x4c>)
 80035c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035c6:	0112      	lsls	r2, r2, #4
 80035c8:	b2d2      	uxtb	r2, r2
 80035ca:	440b      	add	r3, r1
 80035cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035d0:	e00a      	b.n	80035e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	4908      	ldr	r1, [pc, #32]	; (80035f8 <__NVIC_SetPriority+0x50>)
 80035d8:	79fb      	ldrb	r3, [r7, #7]
 80035da:	f003 030f 	and.w	r3, r3, #15
 80035de:	3b04      	subs	r3, #4
 80035e0:	0112      	lsls	r2, r2, #4
 80035e2:	b2d2      	uxtb	r2, r2
 80035e4:	440b      	add	r3, r1
 80035e6:	761a      	strb	r2, [r3, #24]
}
 80035e8:	bf00      	nop
 80035ea:	370c      	adds	r7, #12
 80035ec:	46bd      	mov	sp, r7
 80035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f2:	4770      	bx	lr
 80035f4:	e000e100 	.word	0xe000e100
 80035f8:	e000ed00 	.word	0xe000ed00

080035fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b089      	sub	sp, #36	; 0x24
 8003600:	af00      	add	r7, sp, #0
 8003602:	60f8      	str	r0, [r7, #12]
 8003604:	60b9      	str	r1, [r7, #8]
 8003606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	f003 0307 	and.w	r3, r3, #7
 800360e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003610:	69fb      	ldr	r3, [r7, #28]
 8003612:	f1c3 0307 	rsb	r3, r3, #7
 8003616:	2b04      	cmp	r3, #4
 8003618:	bf28      	it	cs
 800361a:	2304      	movcs	r3, #4
 800361c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	3304      	adds	r3, #4
 8003622:	2b06      	cmp	r3, #6
 8003624:	d902      	bls.n	800362c <NVIC_EncodePriority+0x30>
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	3b03      	subs	r3, #3
 800362a:	e000      	b.n	800362e <NVIC_EncodePriority+0x32>
 800362c:	2300      	movs	r3, #0
 800362e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003630:	f04f 32ff 	mov.w	r2, #4294967295
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	43da      	mvns	r2, r3
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	401a      	ands	r2, r3
 8003640:	697b      	ldr	r3, [r7, #20]
 8003642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003644:	f04f 31ff 	mov.w	r1, #4294967295
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	fa01 f303 	lsl.w	r3, r1, r3
 800364e:	43d9      	mvns	r1, r3
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003654:	4313      	orrs	r3, r2
         );
}
 8003656:	4618      	mov	r0, r3
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
	...

08003664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3b01      	subs	r3, #1
 8003670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003674:	d301      	bcc.n	800367a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003676:	2301      	movs	r3, #1
 8003678:	e00f      	b.n	800369a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800367a:	4a0a      	ldr	r2, [pc, #40]	; (80036a4 <SysTick_Config+0x40>)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	3b01      	subs	r3, #1
 8003680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003682:	210f      	movs	r1, #15
 8003684:	f04f 30ff 	mov.w	r0, #4294967295
 8003688:	f7ff ff8e 	bl	80035a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800368c:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <SysTick_Config+0x40>)
 800368e:	2200      	movs	r2, #0
 8003690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003692:	4b04      	ldr	r3, [pc, #16]	; (80036a4 <SysTick_Config+0x40>)
 8003694:	2207      	movs	r2, #7
 8003696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003698:	2300      	movs	r3, #0
}
 800369a:	4618      	mov	r0, r3
 800369c:	3708      	adds	r7, #8
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}
 80036a2:	bf00      	nop
 80036a4:	e000e010 	.word	0xe000e010

080036a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b082      	sub	sp, #8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f7ff ff29 	bl	8003508 <__NVIC_SetPriorityGrouping>
}
 80036b6:	bf00      	nop
 80036b8:	3708      	adds	r7, #8
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}

080036be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036be:	b580      	push	{r7, lr}
 80036c0:	b086      	sub	sp, #24
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	4603      	mov	r3, r0
 80036c6:	60b9      	str	r1, [r7, #8]
 80036c8:	607a      	str	r2, [r7, #4]
 80036ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036cc:	2300      	movs	r3, #0
 80036ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036d0:	f7ff ff3e 	bl	8003550 <__NVIC_GetPriorityGrouping>
 80036d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	68b9      	ldr	r1, [r7, #8]
 80036da:	6978      	ldr	r0, [r7, #20]
 80036dc:	f7ff ff8e 	bl	80035fc <NVIC_EncodePriority>
 80036e0:	4602      	mov	r2, r0
 80036e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80036e6:	4611      	mov	r1, r2
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7ff ff5d 	bl	80035a8 <__NVIC_SetPriority>
}
 80036ee:	bf00      	nop
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}

080036f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f6:	b580      	push	{r7, lr}
 80036f8:	b082      	sub	sp, #8
 80036fa:	af00      	add	r7, sp, #0
 80036fc:	4603      	mov	r3, r0
 80036fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003704:	4618      	mov	r0, r3
 8003706:	f7ff ff31 	bl	800356c <__NVIC_EnableIRQ>
}
 800370a:	bf00      	nop
 800370c:	3708      	adds	r7, #8
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b082      	sub	sp, #8
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffa2 	bl	8003664 <SysTick_Config>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003736:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003738:	f7ff feb6 	bl	80034a8 <HAL_GetTick>
 800373c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b02      	cmp	r3, #2
 8003748:	d008      	beq.n	800375c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2280      	movs	r2, #128	; 0x80
 800374e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e052      	b.n	8003802 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f022 0216 	bic.w	r2, r2, #22
 800376a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	695a      	ldr	r2, [r3, #20]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800377a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003780:	2b00      	cmp	r3, #0
 8003782:	d103      	bne.n	800378c <HAL_DMA_Abort+0x62>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003788:	2b00      	cmp	r3, #0
 800378a:	d007      	beq.n	800379c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0208 	bic.w	r2, r2, #8
 800379a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0201 	bic.w	r2, r2, #1
 80037aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037ac:	e013      	b.n	80037d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037ae:	f7ff fe7b 	bl	80034a8 <HAL_GetTick>
 80037b2:	4602      	mov	r2, r0
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	1ad3      	subs	r3, r2, r3
 80037b8:	2b05      	cmp	r3, #5
 80037ba:	d90c      	bls.n	80037d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2220      	movs	r2, #32
 80037c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2203      	movs	r2, #3
 80037c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e015      	b.n	8003802 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0301 	and.w	r3, r3, #1
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e4      	bne.n	80037ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e8:	223f      	movs	r2, #63	; 0x3f
 80037ea:	409a      	lsls	r2, r3
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b02      	cmp	r3, #2
 800381c:	d004      	beq.n	8003828 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2280      	movs	r2, #128	; 0x80
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e00c      	b.n	8003842 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2205      	movs	r2, #5
 800382c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003850:	b480      	push	{r7}
 8003852:	b089      	sub	sp, #36	; 0x24
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]
 800386a:	e159      	b.n	8003b20 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800386c:	2201      	movs	r2, #1
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	697a      	ldr	r2, [r7, #20]
 800387c:	4013      	ands	r3, r2
 800387e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003880:	693a      	ldr	r2, [r7, #16]
 8003882:	697b      	ldr	r3, [r7, #20]
 8003884:	429a      	cmp	r2, r3
 8003886:	f040 8148 	bne.w	8003b1a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	f003 0303 	and.w	r3, r3, #3
 8003892:	2b01      	cmp	r3, #1
 8003894:	d005      	beq.n	80038a2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d130      	bne.n	8003904 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	689b      	ldr	r3, [r3, #8]
 80038a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	2203      	movs	r2, #3
 80038ae:	fa02 f303 	lsl.w	r3, r2, r3
 80038b2:	43db      	mvns	r3, r3
 80038b4:	69ba      	ldr	r2, [r7, #24]
 80038b6:	4013      	ands	r3, r2
 80038b8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	68da      	ldr	r2, [r3, #12]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	fa02 f303 	lsl.w	r3, r2, r3
 80038c6:	69ba      	ldr	r2, [r7, #24]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80038d8:	2201      	movs	r2, #1
 80038da:	69fb      	ldr	r3, [r7, #28]
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43db      	mvns	r3, r3
 80038e2:	69ba      	ldr	r2, [r7, #24]
 80038e4:	4013      	ands	r3, r2
 80038e6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 0201 	and.w	r2, r3, #1
 80038f2:	69fb      	ldr	r3, [r7, #28]
 80038f4:	fa02 f303 	lsl.w	r3, r2, r3
 80038f8:	69ba      	ldr	r2, [r7, #24]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	685b      	ldr	r3, [r3, #4]
 8003908:	f003 0303 	and.w	r3, r3, #3
 800390c:	2b03      	cmp	r3, #3
 800390e:	d017      	beq.n	8003940 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	68db      	ldr	r3, [r3, #12]
 8003914:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	005b      	lsls	r3, r3, #1
 800391a:	2203      	movs	r2, #3
 800391c:	fa02 f303 	lsl.w	r3, r2, r3
 8003920:	43db      	mvns	r3, r3
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	4013      	ands	r3, r2
 8003926:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	69fb      	ldr	r3, [r7, #28]
 800392e:	005b      	lsls	r3, r3, #1
 8003930:	fa02 f303 	lsl.w	r3, r2, r3
 8003934:	69ba      	ldr	r2, [r7, #24]
 8003936:	4313      	orrs	r3, r2
 8003938:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	69ba      	ldr	r2, [r7, #24]
 800393e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f003 0303 	and.w	r3, r3, #3
 8003948:	2b02      	cmp	r3, #2
 800394a:	d123      	bne.n	8003994 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800394c:	69fb      	ldr	r3, [r7, #28]
 800394e:	08da      	lsrs	r2, r3, #3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	3208      	adds	r2, #8
 8003954:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003958:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	f003 0307 	and.w	r3, r3, #7
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	220f      	movs	r2, #15
 8003964:	fa02 f303 	lsl.w	r3, r2, r3
 8003968:	43db      	mvns	r3, r3
 800396a:	69ba      	ldr	r2, [r7, #24]
 800396c:	4013      	ands	r3, r2
 800396e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691a      	ldr	r2, [r3, #16]
 8003974:	69fb      	ldr	r3, [r7, #28]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	69ba      	ldr	r2, [r7, #24]
 8003982:	4313      	orrs	r3, r2
 8003984:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003986:	69fb      	ldr	r3, [r7, #28]
 8003988:	08da      	lsrs	r2, r3, #3
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	3208      	adds	r2, #8
 800398e:	69b9      	ldr	r1, [r7, #24]
 8003990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800399a:	69fb      	ldr	r3, [r7, #28]
 800399c:	005b      	lsls	r3, r3, #1
 800399e:	2203      	movs	r2, #3
 80039a0:	fa02 f303 	lsl.w	r3, r2, r3
 80039a4:	43db      	mvns	r3, r3
 80039a6:	69ba      	ldr	r2, [r7, #24]
 80039a8:	4013      	ands	r3, r2
 80039aa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0203 	and.w	r2, r3, #3
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	fa02 f303 	lsl.w	r3, r2, r3
 80039bc:	69ba      	ldr	r2, [r7, #24]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69ba      	ldr	r2, [r7, #24]
 80039c6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	f000 80a2 	beq.w	8003b1a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b57      	ldr	r3, [pc, #348]	; (8003b38 <HAL_GPIO_Init+0x2e8>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	4a56      	ldr	r2, [pc, #344]	; (8003b38 <HAL_GPIO_Init+0x2e8>)
 80039e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80039e4:	6453      	str	r3, [r2, #68]	; 0x44
 80039e6:	4b54      	ldr	r3, [pc, #336]	; (8003b38 <HAL_GPIO_Init+0x2e8>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80039f2:	4a52      	ldr	r2, [pc, #328]	; (8003b3c <HAL_GPIO_Init+0x2ec>)
 80039f4:	69fb      	ldr	r3, [r7, #28]
 80039f6:	089b      	lsrs	r3, r3, #2
 80039f8:	3302      	adds	r3, #2
 80039fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a00:	69fb      	ldr	r3, [r7, #28]
 8003a02:	f003 0303 	and.w	r3, r3, #3
 8003a06:	009b      	lsls	r3, r3, #2
 8003a08:	220f      	movs	r2, #15
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	43db      	mvns	r3, r3
 8003a10:	69ba      	ldr	r2, [r7, #24]
 8003a12:	4013      	ands	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	4a49      	ldr	r2, [pc, #292]	; (8003b40 <HAL_GPIO_Init+0x2f0>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d019      	beq.n	8003a52 <HAL_GPIO_Init+0x202>
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a48      	ldr	r2, [pc, #288]	; (8003b44 <HAL_GPIO_Init+0x2f4>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d013      	beq.n	8003a4e <HAL_GPIO_Init+0x1fe>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a47      	ldr	r2, [pc, #284]	; (8003b48 <HAL_GPIO_Init+0x2f8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d00d      	beq.n	8003a4a <HAL_GPIO_Init+0x1fa>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a46      	ldr	r2, [pc, #280]	; (8003b4c <HAL_GPIO_Init+0x2fc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d007      	beq.n	8003a46 <HAL_GPIO_Init+0x1f6>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a45      	ldr	r2, [pc, #276]	; (8003b50 <HAL_GPIO_Init+0x300>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d101      	bne.n	8003a42 <HAL_GPIO_Init+0x1f2>
 8003a3e:	2304      	movs	r3, #4
 8003a40:	e008      	b.n	8003a54 <HAL_GPIO_Init+0x204>
 8003a42:	2307      	movs	r3, #7
 8003a44:	e006      	b.n	8003a54 <HAL_GPIO_Init+0x204>
 8003a46:	2303      	movs	r3, #3
 8003a48:	e004      	b.n	8003a54 <HAL_GPIO_Init+0x204>
 8003a4a:	2302      	movs	r3, #2
 8003a4c:	e002      	b.n	8003a54 <HAL_GPIO_Init+0x204>
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e000      	b.n	8003a54 <HAL_GPIO_Init+0x204>
 8003a52:	2300      	movs	r3, #0
 8003a54:	69fa      	ldr	r2, [r7, #28]
 8003a56:	f002 0203 	and.w	r2, r2, #3
 8003a5a:	0092      	lsls	r2, r2, #2
 8003a5c:	4093      	lsls	r3, r2
 8003a5e:	69ba      	ldr	r2, [r7, #24]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a64:	4935      	ldr	r1, [pc, #212]	; (8003b3c <HAL_GPIO_Init+0x2ec>)
 8003a66:	69fb      	ldr	r3, [r7, #28]
 8003a68:	089b      	lsrs	r3, r3, #2
 8003a6a:	3302      	adds	r3, #2
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a72:	4b38      	ldr	r3, [pc, #224]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	43db      	mvns	r3, r3
 8003a7c:	69ba      	ldr	r2, [r7, #24]
 8003a7e:	4013      	ands	r3, r2
 8003a80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003a8e:	69ba      	ldr	r2, [r7, #24]
 8003a90:	693b      	ldr	r3, [r7, #16]
 8003a92:	4313      	orrs	r3, r2
 8003a94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a96:	4a2f      	ldr	r2, [pc, #188]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003a98:	69bb      	ldr	r3, [r7, #24]
 8003a9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a9c:	4b2d      	ldr	r3, [pc, #180]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003aa2:	693b      	ldr	r3, [r7, #16]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	69ba      	ldr	r2, [r7, #24]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003ab8:	69ba      	ldr	r2, [r7, #24]
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ac0:	4a24      	ldr	r2, [pc, #144]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003ac2:	69bb      	ldr	r3, [r7, #24]
 8003ac4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003ac6:	4b23      	ldr	r3, [pc, #140]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003acc:	693b      	ldr	r3, [r7, #16]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003ae2:	69ba      	ldr	r2, [r7, #24]
 8003ae4:	693b      	ldr	r3, [r7, #16]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003aea:	4a1a      	ldr	r2, [pc, #104]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003aec:	69bb      	ldr	r3, [r7, #24]
 8003aee:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003af0:	4b18      	ldr	r3, [pc, #96]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	69ba      	ldr	r2, [r7, #24]
 8003afc:	4013      	ands	r3, r2
 8003afe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b0c:	69ba      	ldr	r2, [r7, #24]
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b14:	4a0f      	ldr	r2, [pc, #60]	; (8003b54 <HAL_GPIO_Init+0x304>)
 8003b16:	69bb      	ldr	r3, [r7, #24]
 8003b18:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b1a:	69fb      	ldr	r3, [r7, #28]
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	61fb      	str	r3, [r7, #28]
 8003b20:	69fb      	ldr	r3, [r7, #28]
 8003b22:	2b0f      	cmp	r3, #15
 8003b24:	f67f aea2 	bls.w	800386c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b28:	bf00      	nop
 8003b2a:	bf00      	nop
 8003b2c:	3724      	adds	r7, #36	; 0x24
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40023800 	.word	0x40023800
 8003b3c:	40013800 	.word	0x40013800
 8003b40:	40020000 	.word	0x40020000
 8003b44:	40020400 	.word	0x40020400
 8003b48:	40020800 	.word	0x40020800
 8003b4c:	40020c00 	.word	0x40020c00
 8003b50:	40021000 	.word	0x40021000
 8003b54:	40013c00 	.word	0x40013c00

08003b58 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003b58:	b480      	push	{r7}
 8003b5a:	b085      	sub	sp, #20
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	460b      	mov	r3, r1
 8003b62:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	691a      	ldr	r2, [r3, #16]
 8003b68:	887b      	ldrh	r3, [r7, #2]
 8003b6a:	4013      	ands	r3, r2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d002      	beq.n	8003b76 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003b70:	2301      	movs	r3, #1
 8003b72:	73fb      	strb	r3, [r7, #15]
 8003b74:	e001      	b.n	8003b7a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003b76:	2300      	movs	r3, #0
 8003b78:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	3714      	adds	r7, #20
 8003b80:	46bd      	mov	sp, r7
 8003b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b86:	4770      	bx	lr

08003b88 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
 8003b94:	4613      	mov	r3, r2
 8003b96:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b98:	787b      	ldrb	r3, [r7, #1]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d003      	beq.n	8003ba6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ba4:	e003      	b.n	8003bae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	041a      	lsls	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	619a      	str	r2, [r3, #24]
}
 8003bae:	bf00      	nop
 8003bb0:	370c      	adds	r7, #12
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
	...

08003bbc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b082      	sub	sp, #8
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003bc6:	4b08      	ldr	r3, [pc, #32]	; (8003be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bc8:	695a      	ldr	r2, [r3, #20]
 8003bca:	88fb      	ldrh	r3, [r7, #6]
 8003bcc:	4013      	ands	r3, r2
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d006      	beq.n	8003be0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bd4:	88fb      	ldrh	r3, [r7, #6]
 8003bd6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003bd8:	88fb      	ldrh	r3, [r7, #6]
 8003bda:	4618      	mov	r0, r3
 8003bdc:	f000 f806 	bl	8003bec <HAL_GPIO_EXTI_Callback>
  }
}
 8003be0:	bf00      	nop
 8003be2:	3708      	adds	r7, #8
 8003be4:	46bd      	mov	sp, r7
 8003be6:	bd80      	pop	{r7, pc}
 8003be8:	40013c00 	.word	0x40013c00

08003bec <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003bec:	b480      	push	{r7}
 8003bee:	b083      	sub	sp, #12
 8003bf0:	af00      	add	r7, sp, #0
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003bf6:	bf00      	nop
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
	...

08003c04 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d101      	bne.n	8003c16 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	e12b      	b.n	8003e6e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c1c:	b2db      	uxtb	r3, r3
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d106      	bne.n	8003c30 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c2a:	6878      	ldr	r0, [r7, #4]
 8003c2c:	f7fc fe26 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2224      	movs	r2, #36	; 0x24
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0201 	bic.w	r2, r2, #1
 8003c46:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	681a      	ldr	r2, [r3, #0]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c56:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c66:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c68:	f002 fc86 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 8003c6c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	4a81      	ldr	r2, [pc, #516]	; (8003e78 <HAL_I2C_Init+0x274>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d807      	bhi.n	8003c88 <HAL_I2C_Init+0x84>
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	4a80      	ldr	r2, [pc, #512]	; (8003e7c <HAL_I2C_Init+0x278>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	bf94      	ite	ls
 8003c80:	2301      	movls	r3, #1
 8003c82:	2300      	movhi	r3, #0
 8003c84:	b2db      	uxtb	r3, r3
 8003c86:	e006      	b.n	8003c96 <HAL_I2C_Init+0x92>
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4a7d      	ldr	r2, [pc, #500]	; (8003e80 <HAL_I2C_Init+0x27c>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	bf94      	ite	ls
 8003c90:	2301      	movls	r3, #1
 8003c92:	2300      	movhi	r3, #0
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d001      	beq.n	8003c9e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e0e7      	b.n	8003e6e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	4a78      	ldr	r2, [pc, #480]	; (8003e84 <HAL_I2C_Init+0x280>)
 8003ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ca6:	0c9b      	lsrs	r3, r3, #18
 8003ca8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68ba      	ldr	r2, [r7, #8]
 8003cba:	430a      	orrs	r2, r1
 8003cbc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	4a6a      	ldr	r2, [pc, #424]	; (8003e78 <HAL_I2C_Init+0x274>)
 8003cce:	4293      	cmp	r3, r2
 8003cd0:	d802      	bhi.n	8003cd8 <HAL_I2C_Init+0xd4>
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	e009      	b.n	8003cec <HAL_I2C_Init+0xe8>
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cde:	fb02 f303 	mul.w	r3, r2, r3
 8003ce2:	4a69      	ldr	r2, [pc, #420]	; (8003e88 <HAL_I2C_Init+0x284>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	099b      	lsrs	r3, r3, #6
 8003cea:	3301      	adds	r3, #1
 8003cec:	687a      	ldr	r2, [r7, #4]
 8003cee:	6812      	ldr	r2, [r2, #0]
 8003cf0:	430b      	orrs	r3, r1
 8003cf2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	69db      	ldr	r3, [r3, #28]
 8003cfa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003cfe:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	495c      	ldr	r1, [pc, #368]	; (8003e78 <HAL_I2C_Init+0x274>)
 8003d08:	428b      	cmp	r3, r1
 8003d0a:	d819      	bhi.n	8003d40 <HAL_I2C_Init+0x13c>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	1e59      	subs	r1, r3, #1
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	005b      	lsls	r3, r3, #1
 8003d16:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d1a:	1c59      	adds	r1, r3, #1
 8003d1c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d20:	400b      	ands	r3, r1
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00a      	beq.n	8003d3c <HAL_I2C_Init+0x138>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	1e59      	subs	r1, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d34:	3301      	adds	r3, #1
 8003d36:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d3a:	e051      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003d3c:	2304      	movs	r3, #4
 8003d3e:	e04f      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d111      	bne.n	8003d6c <HAL_I2C_Init+0x168>
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	1e58      	subs	r0, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6859      	ldr	r1, [r3, #4]
 8003d50:	460b      	mov	r3, r1
 8003d52:	005b      	lsls	r3, r3, #1
 8003d54:	440b      	add	r3, r1
 8003d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	bf0c      	ite	eq
 8003d64:	2301      	moveq	r3, #1
 8003d66:	2300      	movne	r3, #0
 8003d68:	b2db      	uxtb	r3, r3
 8003d6a:	e012      	b.n	8003d92 <HAL_I2C_Init+0x18e>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	1e58      	subs	r0, r3, #1
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6859      	ldr	r1, [r3, #4]
 8003d74:	460b      	mov	r3, r1
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	440b      	add	r3, r1
 8003d7a:	0099      	lsls	r1, r3, #2
 8003d7c:	440b      	add	r3, r1
 8003d7e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d82:	3301      	adds	r3, #1
 8003d84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	bf0c      	ite	eq
 8003d8c:	2301      	moveq	r3, #1
 8003d8e:	2300      	movne	r3, #0
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d001      	beq.n	8003d9a <HAL_I2C_Init+0x196>
 8003d96:	2301      	movs	r3, #1
 8003d98:	e022      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d10e      	bne.n	8003dc0 <HAL_I2C_Init+0x1bc>
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	1e58      	subs	r0, r3, #1
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6859      	ldr	r1, [r3, #4]
 8003daa:	460b      	mov	r3, r1
 8003dac:	005b      	lsls	r3, r3, #1
 8003dae:	440b      	add	r3, r1
 8003db0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003db4:	3301      	adds	r3, #1
 8003db6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dbe:	e00f      	b.n	8003de0 <HAL_I2C_Init+0x1dc>
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	1e58      	subs	r0, r3, #1
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6859      	ldr	r1, [r3, #4]
 8003dc8:	460b      	mov	r3, r1
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	440b      	add	r3, r1
 8003dce:	0099      	lsls	r1, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd6:	3301      	adds	r3, #1
 8003dd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ddc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003de0:	6879      	ldr	r1, [r7, #4]
 8003de2:	6809      	ldr	r1, [r1, #0]
 8003de4:	4313      	orrs	r3, r2
 8003de6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	69da      	ldr	r2, [r3, #28]
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a1b      	ldr	r3, [r3, #32]
 8003dfa:	431a      	orrs	r2, r3
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	689b      	ldr	r3, [r3, #8]
 8003e0a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e0e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e12:	687a      	ldr	r2, [r7, #4]
 8003e14:	6911      	ldr	r1, [r2, #16]
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	68d2      	ldr	r2, [r2, #12]
 8003e1a:	4311      	orrs	r1, r2
 8003e1c:	687a      	ldr	r2, [r7, #4]
 8003e1e:	6812      	ldr	r2, [r2, #0]
 8003e20:	430b      	orrs	r3, r1
 8003e22:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68db      	ldr	r3, [r3, #12]
 8003e2a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	695a      	ldr	r2, [r3, #20]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	699b      	ldr	r3, [r3, #24]
 8003e36:	431a      	orrs	r2, r3
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f042 0201 	orr.w	r2, r2, #1
 8003e4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2220      	movs	r2, #32
 8003e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2200      	movs	r2, #0
 8003e62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e6c:	2300      	movs	r3, #0
}
 8003e6e:	4618      	mov	r0, r3
 8003e70:	3710      	adds	r7, #16
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	000186a0 	.word	0x000186a0
 8003e7c:	001e847f 	.word	0x001e847f
 8003e80:	003d08ff 	.word	0x003d08ff
 8003e84:	431bde83 	.word	0x431bde83
 8003e88:	10624dd3 	.word	0x10624dd3

08003e8c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b088      	sub	sp, #32
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e128      	b.n	80040f0 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d109      	bne.n	8003ebe <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a90      	ldr	r2, [pc, #576]	; (80040f8 <HAL_I2S_Init+0x26c>)
 8003eb6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7fc fd85 	bl	80009c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2202      	movs	r2, #2
 8003ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	69db      	ldr	r3, [r3, #28]
 8003ecc:	687a      	ldr	r2, [r7, #4]
 8003ece:	6812      	ldr	r2, [r2, #0]
 8003ed0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003ed4:	f023 030f 	bic.w	r3, r3, #15
 8003ed8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	2202      	movs	r2, #2
 8003ee0:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d060      	beq.n	8003fac <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	68db      	ldr	r3, [r3, #12]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d102      	bne.n	8003ef8 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003ef2:	2310      	movs	r3, #16
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e001      	b.n	8003efc <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003ef8:	2320      	movs	r3, #32
 8003efa:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d802      	bhi.n	8003f0a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	005b      	lsls	r3, r3, #1
 8003f08:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003f0a:	2001      	movs	r0, #1
 8003f0c:	f002 fc4c 	bl	80067a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003f10:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003f1a:	d125      	bne.n	8003f68 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d010      	beq.n	8003f46 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f2e:	4613      	mov	r3, r2
 8003f30:	009b      	lsls	r3, r3, #2
 8003f32:	4413      	add	r3, r2
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	461a      	mov	r2, r3
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f40:	3305      	adds	r3, #5
 8003f42:	613b      	str	r3, [r7, #16]
 8003f44:	e01f      	b.n	8003f86 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	00db      	lsls	r3, r3, #3
 8003f4a:	68fa      	ldr	r2, [r7, #12]
 8003f4c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f50:	4613      	mov	r3, r2
 8003f52:	009b      	lsls	r3, r3, #2
 8003f54:	4413      	add	r3, r2
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	461a      	mov	r2, r3
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	695b      	ldr	r3, [r3, #20]
 8003f5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f62:	3305      	adds	r3, #5
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	e00e      	b.n	8003f86 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003f70:	4613      	mov	r3, r2
 8003f72:	009b      	lsls	r3, r3, #2
 8003f74:	4413      	add	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	461a      	mov	r2, r3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f82:	3305      	adds	r3, #5
 8003f84:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	4a5c      	ldr	r2, [pc, #368]	; (80040fc <HAL_I2S_Init+0x270>)
 8003f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f8e:	08db      	lsrs	r3, r3, #3
 8003f90:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8003f9a:	693a      	ldr	r2, [r7, #16]
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	1ad3      	subs	r3, r2, r3
 8003fa0:	085b      	lsrs	r3, r3, #1
 8003fa2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	021b      	lsls	r3, r3, #8
 8003fa8:	61bb      	str	r3, [r7, #24]
 8003faa:	e003      	b.n	8003fb4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003fac:	2302      	movs	r3, #2
 8003fae:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d902      	bls.n	8003fc0 <HAL_I2S_Init+0x134>
 8003fba:	69fb      	ldr	r3, [r7, #28]
 8003fbc:	2bff      	cmp	r3, #255	; 0xff
 8003fbe:	d907      	bls.n	8003fd0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc4:	f043 0210 	orr.w	r2, r3, #16
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e08f      	b.n	80040f0 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	691a      	ldr	r2, [r3, #16]
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	ea42 0103 	orr.w	r1, r2, r3
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	69fa      	ldr	r2, [r7, #28]
 8003fe0:	430a      	orrs	r2, r1
 8003fe2:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	69db      	ldr	r3, [r3, #28]
 8003fea:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003fee:	f023 030f 	bic.w	r3, r3, #15
 8003ff2:	687a      	ldr	r2, [r7, #4]
 8003ff4:	6851      	ldr	r1, [r2, #4]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6892      	ldr	r2, [r2, #8]
 8003ffa:	4311      	orrs	r1, r2
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	68d2      	ldr	r2, [r2, #12]
 8004000:	4311      	orrs	r1, r2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6992      	ldr	r2, [r2, #24]
 8004006:	430a      	orrs	r2, r1
 8004008:	431a      	orrs	r2, r3
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004012:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6a1b      	ldr	r3, [r3, #32]
 8004018:	2b01      	cmp	r3, #1
 800401a:	d161      	bne.n	80040e0 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	4a38      	ldr	r2, [pc, #224]	; (8004100 <HAL_I2S_Init+0x274>)
 8004020:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a37      	ldr	r2, [pc, #220]	; (8004104 <HAL_I2S_Init+0x278>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d101      	bne.n	8004030 <HAL_I2S_Init+0x1a4>
 800402c:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_I2S_Init+0x27c>)
 800402e:	e001      	b.n	8004034 <HAL_I2S_Init+0x1a8>
 8004030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004034:	69db      	ldr	r3, [r3, #28]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	4932      	ldr	r1, [pc, #200]	; (8004104 <HAL_I2S_Init+0x278>)
 800403c:	428a      	cmp	r2, r1
 800403e:	d101      	bne.n	8004044 <HAL_I2S_Init+0x1b8>
 8004040:	4a31      	ldr	r2, [pc, #196]	; (8004108 <HAL_I2S_Init+0x27c>)
 8004042:	e001      	b.n	8004048 <HAL_I2S_Init+0x1bc>
 8004044:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004048:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800404c:	f023 030f 	bic.w	r3, r3, #15
 8004050:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	4a2b      	ldr	r2, [pc, #172]	; (8004104 <HAL_I2S_Init+0x278>)
 8004058:	4293      	cmp	r3, r2
 800405a:	d101      	bne.n	8004060 <HAL_I2S_Init+0x1d4>
 800405c:	4b2a      	ldr	r3, [pc, #168]	; (8004108 <HAL_I2S_Init+0x27c>)
 800405e:	e001      	b.n	8004064 <HAL_I2S_Init+0x1d8>
 8004060:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004064:	2202      	movs	r2, #2
 8004066:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a25      	ldr	r2, [pc, #148]	; (8004104 <HAL_I2S_Init+0x278>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d101      	bne.n	8004076 <HAL_I2S_Init+0x1ea>
 8004072:	4b25      	ldr	r3, [pc, #148]	; (8004108 <HAL_I2S_Init+0x27c>)
 8004074:	e001      	b.n	800407a <HAL_I2S_Init+0x1ee>
 8004076:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407a:	69db      	ldr	r3, [r3, #28]
 800407c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	685b      	ldr	r3, [r3, #4]
 8004082:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004086:	d003      	beq.n	8004090 <HAL_I2S_Init+0x204>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d103      	bne.n	8004098 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004090:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004094:	613b      	str	r3, [r7, #16]
 8004096:	e001      	b.n	800409c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004098:	2300      	movs	r3, #0
 800409a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040a6:	4313      	orrs	r3, r2
 80040a8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	68db      	ldr	r3, [r3, #12]
 80040ae:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040b0:	4313      	orrs	r3, r2
 80040b2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80040ba:	4313      	orrs	r3, r2
 80040bc:	b29a      	uxth	r2, r3
 80040be:	897b      	ldrh	r3, [r7, #10]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80040c8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4a0d      	ldr	r2, [pc, #52]	; (8004104 <HAL_I2S_Init+0x278>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d101      	bne.n	80040d8 <HAL_I2S_Init+0x24c>
 80040d4:	4b0c      	ldr	r3, [pc, #48]	; (8004108 <HAL_I2S_Init+0x27c>)
 80040d6:	e001      	b.n	80040dc <HAL_I2S_Init+0x250>
 80040d8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040dc:	897a      	ldrh	r2, [r7, #10]
 80040de:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	2200      	movs	r2, #0
 80040e4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80040ee:	2300      	movs	r3, #0
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3720      	adds	r7, #32
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	08004203 	.word	0x08004203
 80040fc:	cccccccd 	.word	0xcccccccd
 8004100:	08004319 	.word	0x08004319
 8004104:	40003800 	.word	0x40003800
 8004108:	40003400 	.word	0x40003400

0800410c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800413c:	bf00      	nop
 800413e:	370c      	adds	r7, #12
 8004140:	46bd      	mov	sp, r7
 8004142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004146:	4770      	bx	lr

08004148 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004154:	881a      	ldrh	r2, [r3, #0]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004160:	1c9a      	adds	r2, r3, #2
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800416a:	b29b      	uxth	r3, r3
 800416c:	3b01      	subs	r3, #1
 800416e:	b29a      	uxth	r2, r3
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004178:	b29b      	uxth	r3, r3
 800417a:	2b00      	cmp	r3, #0
 800417c:	d10e      	bne.n	800419c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800418c:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff ffb8 	bl	800410c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800419c:	bf00      	nop
 800419e:	3708      	adds	r7, #8
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b082      	sub	sp, #8
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68da      	ldr	r2, [r3, #12]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	b292      	uxth	r2, r2
 80041b8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041be:	1c9a      	adds	r2, r3, #2
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041c8:	b29b      	uxth	r3, r3
 80041ca:	3b01      	subs	r3, #1
 80041cc:	b29a      	uxth	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d10e      	bne.n	80041fa <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	685a      	ldr	r2, [r3, #4]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041ea:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2201      	movs	r2, #1
 80041f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80041f4:	6878      	ldr	r0, [r7, #4]
 80041f6:	f7ff ff93 	bl	8004120 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}

08004202 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004202:	b580      	push	{r7, lr}
 8004204:	b086      	sub	sp, #24
 8004206:	af00      	add	r7, sp, #0
 8004208:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004218:	b2db      	uxtb	r3, r3
 800421a:	2b04      	cmp	r3, #4
 800421c:	d13a      	bne.n	8004294 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	f003 0301 	and.w	r3, r3, #1
 8004224:	2b01      	cmp	r3, #1
 8004226:	d109      	bne.n	800423c <I2S_IRQHandler+0x3a>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004232:	2b40      	cmp	r3, #64	; 0x40
 8004234:	d102      	bne.n	800423c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004236:	6878      	ldr	r0, [r7, #4]
 8004238:	f7ff ffb4 	bl	80041a4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004242:	2b40      	cmp	r3, #64	; 0x40
 8004244:	d126      	bne.n	8004294 <I2S_IRQHandler+0x92>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f003 0320 	and.w	r3, r3, #32
 8004250:	2b20      	cmp	r3, #32
 8004252:	d11f      	bne.n	8004294 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004262:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004264:	2300      	movs	r3, #0
 8004266:	613b      	str	r3, [r7, #16]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	68db      	ldr	r3, [r3, #12]
 800426e:	613b      	str	r3, [r7, #16]
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	689b      	ldr	r3, [r3, #8]
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2201      	movs	r2, #1
 800427e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004286:	f043 0202 	orr.w	r2, r3, #2
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800428e:	6878      	ldr	r0, [r7, #4]
 8004290:	f7ff ff50 	bl	8004134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800429a:	b2db      	uxtb	r3, r3
 800429c:	2b03      	cmp	r3, #3
 800429e:	d136      	bne.n	800430e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d109      	bne.n	80042be <I2S_IRQHandler+0xbc>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b4:	2b80      	cmp	r3, #128	; 0x80
 80042b6:	d102      	bne.n	80042be <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80042b8:	6878      	ldr	r0, [r7, #4]
 80042ba:	f7ff ff45 	bl	8004148 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f003 0308 	and.w	r3, r3, #8
 80042c4:	2b08      	cmp	r3, #8
 80042c6:	d122      	bne.n	800430e <I2S_IRQHandler+0x10c>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	f003 0320 	and.w	r3, r3, #32
 80042d2:	2b20      	cmp	r3, #32
 80042d4:	d11b      	bne.n	800430e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	685a      	ldr	r2, [r3, #4]
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80042e4:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80042e6:	2300      	movs	r3, #0
 80042e8:	60fb      	str	r3, [r7, #12]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60fb      	str	r3, [r7, #12]
 80042f2:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2201      	movs	r2, #1
 80042f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004300:	f043 0204 	orr.w	r2, r3, #4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7ff ff13 	bl	8004134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800430e:	bf00      	nop
 8004310:	3718      	adds	r7, #24
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}
	...

08004318 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b088      	sub	sp, #32
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a92      	ldr	r2, [pc, #584]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d101      	bne.n	8004336 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004332:	4b92      	ldr	r3, [pc, #584]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004334:	e001      	b.n	800433a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004336:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a8b      	ldr	r2, [pc, #556]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004350:	4b8a      	ldr	r3, [pc, #552]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004352:	e001      	b.n	8004358 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004354:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004358:	685b      	ldr	r3, [r3, #4]
 800435a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	685b      	ldr	r3, [r3, #4]
 8004360:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004364:	d004      	beq.n	8004370 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	f040 8099 	bne.w	80044a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	f003 0302 	and.w	r3, r3, #2
 8004376:	2b02      	cmp	r3, #2
 8004378:	d107      	bne.n	800438a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004380:	2b00      	cmp	r3, #0
 8004382:	d002      	beq.n	800438a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f925 	bl	80045d4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	f003 0301 	and.w	r3, r3, #1
 8004390:	2b01      	cmp	r3, #1
 8004392:	d107      	bne.n	80043a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800439a:	2b00      	cmp	r3, #0
 800439c:	d002      	beq.n	80043a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9c8 	bl	8004734 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d13a      	bne.n	8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	f003 0320 	and.w	r3, r3, #32
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d035      	beq.n	8004424 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4a6e      	ldr	r2, [pc, #440]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d101      	bne.n	80043c6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80043c2:	4b6e      	ldr	r3, [pc, #440]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043c4:	e001      	b.n	80043ca <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80043c6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043ca:	685a      	ldr	r2, [r3, #4]
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4969      	ldr	r1, [pc, #420]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80043d2:	428b      	cmp	r3, r1
 80043d4:	d101      	bne.n	80043da <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80043d6:	4b69      	ldr	r3, [pc, #420]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80043d8:	e001      	b.n	80043de <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80043da:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80043de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80043e2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685a      	ldr	r2, [r3, #4]
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043f2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68db      	ldr	r3, [r3, #12]
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	689b      	ldr	r3, [r3, #8]
 8004406:	60fb      	str	r3, [r7, #12]
 8004408:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004416:	f043 0202 	orr.w	r2, r3, #2
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff fe88 	bl	8004134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	f003 0308 	and.w	r3, r3, #8
 800442a:	2b08      	cmp	r3, #8
 800442c:	f040 80c3 	bne.w	80045b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f003 0320 	and.w	r3, r3, #32
 8004436:	2b00      	cmp	r3, #0
 8004438:	f000 80bd 	beq.w	80045b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	685a      	ldr	r2, [r3, #4]
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800444a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a49      	ldr	r2, [pc, #292]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d101      	bne.n	800445a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004456:	4b49      	ldr	r3, [pc, #292]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004458:	e001      	b.n	800445e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800445a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4944      	ldr	r1, [pc, #272]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004466:	428b      	cmp	r3, r1
 8004468:	d101      	bne.n	800446e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800446a:	4b44      	ldr	r3, [pc, #272]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800446c:	e001      	b.n	8004472 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800446e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004472:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004476:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004478:	2300      	movs	r3, #0
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	689b      	ldr	r3, [r3, #8]
 8004482:	60bb      	str	r3, [r7, #8]
 8004484:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004492:	f043 0204 	orr.w	r2, r3, #4
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f7ff fe4a 	bl	8004134 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044a0:	e089      	b.n	80045b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d107      	bne.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d002      	beq.n	80044bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80044b6:	6878      	ldr	r0, [r7, #4]
 80044b8:	f000 f8be 	bl	8004638 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	f003 0301 	and.w	r3, r3, #1
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d107      	bne.n	80044d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d002      	beq.n	80044d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f000 f8fd 	bl	80046d0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044dc:	2b40      	cmp	r3, #64	; 0x40
 80044de:	d12f      	bne.n	8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80044e0:	697b      	ldr	r3, [r7, #20]
 80044e2:	f003 0320 	and.w	r3, r3, #32
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d02a      	beq.n	8004540 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	685a      	ldr	r2, [r3, #4]
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80044f8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	4a1e      	ldr	r2, [pc, #120]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004500:	4293      	cmp	r3, r2
 8004502:	d101      	bne.n	8004508 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004504:	4b1d      	ldr	r3, [pc, #116]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004506:	e001      	b.n	800450c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004508:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800450c:	685a      	ldr	r2, [r3, #4]
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	4919      	ldr	r1, [pc, #100]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004514:	428b      	cmp	r3, r1
 8004516:	d101      	bne.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004518:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800451a:	e001      	b.n	8004520 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800451c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004520:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004524:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	2201      	movs	r2, #1
 800452a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004532:	f043 0202 	orr.w	r2, r3, #2
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800453a:	6878      	ldr	r0, [r7, #4]
 800453c:	f7ff fdfa 	bl	8004134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f003 0308 	and.w	r3, r3, #8
 8004546:	2b08      	cmp	r3, #8
 8004548:	d136      	bne.n	80045b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	f003 0320 	and.w	r3, r3, #32
 8004550:	2b00      	cmp	r3, #0
 8004552:	d031      	beq.n	80045b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a07      	ldr	r2, [pc, #28]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d101      	bne.n	8004562 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004560:	e001      	b.n	8004566 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004562:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4902      	ldr	r1, [pc, #8]	; (8004578 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800456e:	428b      	cmp	r3, r1
 8004570:	d106      	bne.n	8004580 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004572:	4b02      	ldr	r3, [pc, #8]	; (800457c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004574:	e006      	b.n	8004584 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004576:	bf00      	nop
 8004578:	40003800 	.word	0x40003800
 800457c:	40003400 	.word	0x40003400
 8004580:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004584:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004588:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004598:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2201      	movs	r2, #1
 800459e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045a6:	f043 0204 	orr.w	r2, r3, #4
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f7ff fdc0 	bl	8004134 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80045b4:	e000      	b.n	80045b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045b6:	bf00      	nop
}
 80045b8:	bf00      	nop
 80045ba:	3720      	adds	r7, #32
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}

080045c0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b083      	sub	sp, #12
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80045c8:	bf00      	nop
 80045ca:	370c      	adds	r7, #12
 80045cc:	46bd      	mov	sp, r7
 80045ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d2:	4770      	bx	lr

080045d4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b082      	sub	sp, #8
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	1c99      	adds	r1, r3, #2
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	6251      	str	r1, [r2, #36]	; 0x24
 80045e6:	881a      	ldrh	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045f2:	b29b      	uxth	r3, r3
 80045f4:	3b01      	subs	r3, #1
 80045f6:	b29a      	uxth	r2, r3
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004600:	b29b      	uxth	r3, r3
 8004602:	2b00      	cmp	r3, #0
 8004604:	d113      	bne.n	800462e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685a      	ldr	r2, [r3, #4]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004614:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800461a:	b29b      	uxth	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f7ff ffc9 	bl	80045c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800462e:	bf00      	nop
 8004630:	3708      	adds	r7, #8
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
	...

08004638 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004638:	b580      	push	{r7, lr}
 800463a:	b082      	sub	sp, #8
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004644:	1c99      	adds	r1, r3, #2
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6251      	str	r1, [r2, #36]	; 0x24
 800464a:	8819      	ldrh	r1, [r3, #0]
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a1d      	ldr	r2, [pc, #116]	; (80046c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d101      	bne.n	800465a <I2SEx_TxISR_I2SExt+0x22>
 8004656:	4b1d      	ldr	r3, [pc, #116]	; (80046cc <I2SEx_TxISR_I2SExt+0x94>)
 8004658:	e001      	b.n	800465e <I2SEx_TxISR_I2SExt+0x26>
 800465a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800465e:	460a      	mov	r2, r1
 8004660:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004666:	b29b      	uxth	r3, r3
 8004668:	3b01      	subs	r3, #1
 800466a:	b29a      	uxth	r2, r3
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004674:	b29b      	uxth	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d121      	bne.n	80046be <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a12      	ldr	r2, [pc, #72]	; (80046c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d101      	bne.n	8004688 <I2SEx_TxISR_I2SExt+0x50>
 8004684:	4b11      	ldr	r3, [pc, #68]	; (80046cc <I2SEx_TxISR_I2SExt+0x94>)
 8004686:	e001      	b.n	800468c <I2SEx_TxISR_I2SExt+0x54>
 8004688:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800468c:	685a      	ldr	r2, [r3, #4]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	490d      	ldr	r1, [pc, #52]	; (80046c8 <I2SEx_TxISR_I2SExt+0x90>)
 8004694:	428b      	cmp	r3, r1
 8004696:	d101      	bne.n	800469c <I2SEx_TxISR_I2SExt+0x64>
 8004698:	4b0c      	ldr	r3, [pc, #48]	; (80046cc <I2SEx_TxISR_I2SExt+0x94>)
 800469a:	e001      	b.n	80046a0 <I2SEx_TxISR_I2SExt+0x68>
 800469c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80046a0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046a4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046aa:	b29b      	uxth	r3, r3
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d106      	bne.n	80046be <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	2201      	movs	r2, #1
 80046b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80046b8:	6878      	ldr	r0, [r7, #4]
 80046ba:	f7ff ff81 	bl	80045c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80046be:	bf00      	nop
 80046c0:	3708      	adds	r7, #8
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40003800 	.word	0x40003800
 80046cc:	40003400 	.word	0x40003400

080046d0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b082      	sub	sp, #8
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68d8      	ldr	r0, [r3, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046e2:	1c99      	adds	r1, r3, #2
 80046e4:	687a      	ldr	r2, [r7, #4]
 80046e6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80046e8:	b282      	uxth	r2, r0
 80046ea:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046f0:	b29b      	uxth	r3, r3
 80046f2:	3b01      	subs	r3, #1
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80046fe:	b29b      	uxth	r3, r3
 8004700:	2b00      	cmp	r3, #0
 8004702:	d113      	bne.n	800472c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004712:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004718:	b29b      	uxth	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d106      	bne.n	800472c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2201      	movs	r2, #1
 8004722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff ff4a 	bl	80045c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3708      	adds	r7, #8
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d101      	bne.n	800474a <I2SEx_RxISR_I2SExt+0x16>
 8004746:	4b20      	ldr	r3, [pc, #128]	; (80047c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004748:	e001      	b.n	800474e <I2SEx_RxISR_I2SExt+0x1a>
 800474a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800474e:	68d8      	ldr	r0, [r3, #12]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	1c99      	adds	r1, r3, #2
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	62d1      	str	r1, [r2, #44]	; 0x2c
 800475a:	b282      	uxth	r2, r0
 800475c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004762:	b29b      	uxth	r3, r3
 8004764:	3b01      	subs	r3, #1
 8004766:	b29a      	uxth	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004770:	b29b      	uxth	r3, r3
 8004772:	2b00      	cmp	r3, #0
 8004774:	d121      	bne.n	80047ba <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a12      	ldr	r2, [pc, #72]	; (80047c4 <I2SEx_RxISR_I2SExt+0x90>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <I2SEx_RxISR_I2SExt+0x50>
 8004780:	4b11      	ldr	r3, [pc, #68]	; (80047c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004782:	e001      	b.n	8004788 <I2SEx_RxISR_I2SExt+0x54>
 8004784:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	490d      	ldr	r1, [pc, #52]	; (80047c4 <I2SEx_RxISR_I2SExt+0x90>)
 8004790:	428b      	cmp	r3, r1
 8004792:	d101      	bne.n	8004798 <I2SEx_RxISR_I2SExt+0x64>
 8004794:	4b0c      	ldr	r3, [pc, #48]	; (80047c8 <I2SEx_RxISR_I2SExt+0x94>)
 8004796:	e001      	b.n	800479c <I2SEx_RxISR_I2SExt+0x68>
 8004798:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800479c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047a0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d106      	bne.n	80047ba <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2201      	movs	r2, #1
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff ff03 	bl	80045c0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047ba:	bf00      	nop
 80047bc:	3708      	adds	r7, #8
 80047be:	46bd      	mov	sp, r7
 80047c0:	bd80      	pop	{r7, pc}
 80047c2:	bf00      	nop
 80047c4:	40003800 	.word	0x40003800
 80047c8:	40003400 	.word	0x40003400

080047cc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80047cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80047ce:	b08f      	sub	sp, #60	; 0x3c
 80047d0:	af0a      	add	r7, sp, #40	; 0x28
 80047d2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d101      	bne.n	80047de <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80047da:	2301      	movs	r3, #1
 80047dc:	e10f      	b.n	80049fe <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d106      	bne.n	80047fe <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80047f8:	6878      	ldr	r0, [r7, #4]
 80047fa:	f006 fe63 	bl	800b4c4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2203      	movs	r2, #3
 8004802:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800480a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800480e:	2b00      	cmp	r3, #0
 8004810:	d102      	bne.n	8004818 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2200      	movs	r2, #0
 8004816:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4618      	mov	r0, r3
 800481e:	f003 fce2 	bl	80081e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	603b      	str	r3, [r7, #0]
 8004828:	687e      	ldr	r6, [r7, #4]
 800482a:	466d      	mov	r5, sp
 800482c:	f106 0410 	add.w	r4, r6, #16
 8004830:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004832:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004834:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004836:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004838:	e894 0003 	ldmia.w	r4, {r0, r1}
 800483c:	e885 0003 	stmia.w	r5, {r0, r1}
 8004840:	1d33      	adds	r3, r6, #4
 8004842:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004844:	6838      	ldr	r0, [r7, #0]
 8004846:	f003 fbb9 	bl	8007fbc <USB_CoreInit>
 800484a:	4603      	mov	r3, r0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d005      	beq.n	800485c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2202      	movs	r2, #2
 8004854:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	e0d0      	b.n	80049fe <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	2100      	movs	r1, #0
 8004862:	4618      	mov	r0, r3
 8004864:	f003 fcd0 	bl	8008208 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004868:	2300      	movs	r3, #0
 800486a:	73fb      	strb	r3, [r7, #15]
 800486c:	e04a      	b.n	8004904 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800486e:	7bfa      	ldrb	r2, [r7, #15]
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	00db      	lsls	r3, r3, #3
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	333d      	adds	r3, #61	; 0x3d
 800487e:	2201      	movs	r2, #1
 8004880:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004882:	7bfa      	ldrb	r2, [r7, #15]
 8004884:	6879      	ldr	r1, [r7, #4]
 8004886:	4613      	mov	r3, r2
 8004888:	00db      	lsls	r3, r3, #3
 800488a:	4413      	add	r3, r2
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	440b      	add	r3, r1
 8004890:	333c      	adds	r3, #60	; 0x3c
 8004892:	7bfa      	ldrb	r2, [r7, #15]
 8004894:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004896:	7bfa      	ldrb	r2, [r7, #15]
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	b298      	uxth	r0, r3
 800489c:	6879      	ldr	r1, [r7, #4]
 800489e:	4613      	mov	r3, r2
 80048a0:	00db      	lsls	r3, r3, #3
 80048a2:	4413      	add	r3, r2
 80048a4:	009b      	lsls	r3, r3, #2
 80048a6:	440b      	add	r3, r1
 80048a8:	3344      	adds	r3, #68	; 0x44
 80048aa:	4602      	mov	r2, r0
 80048ac:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80048ae:	7bfa      	ldrb	r2, [r7, #15]
 80048b0:	6879      	ldr	r1, [r7, #4]
 80048b2:	4613      	mov	r3, r2
 80048b4:	00db      	lsls	r3, r3, #3
 80048b6:	4413      	add	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	440b      	add	r3, r1
 80048bc:	3340      	adds	r3, #64	; 0x40
 80048be:	2200      	movs	r2, #0
 80048c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80048c2:	7bfa      	ldrb	r2, [r7, #15]
 80048c4:	6879      	ldr	r1, [r7, #4]
 80048c6:	4613      	mov	r3, r2
 80048c8:	00db      	lsls	r3, r3, #3
 80048ca:	4413      	add	r3, r2
 80048cc:	009b      	lsls	r3, r3, #2
 80048ce:	440b      	add	r3, r1
 80048d0:	3348      	adds	r3, #72	; 0x48
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80048d6:	7bfa      	ldrb	r2, [r7, #15]
 80048d8:	6879      	ldr	r1, [r7, #4]
 80048da:	4613      	mov	r3, r2
 80048dc:	00db      	lsls	r3, r3, #3
 80048de:	4413      	add	r3, r2
 80048e0:	009b      	lsls	r3, r3, #2
 80048e2:	440b      	add	r3, r1
 80048e4:	334c      	adds	r3, #76	; 0x4c
 80048e6:	2200      	movs	r2, #0
 80048e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80048ea:	7bfa      	ldrb	r2, [r7, #15]
 80048ec:	6879      	ldr	r1, [r7, #4]
 80048ee:	4613      	mov	r3, r2
 80048f0:	00db      	lsls	r3, r3, #3
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	440b      	add	r3, r1
 80048f8:	3354      	adds	r3, #84	; 0x54
 80048fa:	2200      	movs	r2, #0
 80048fc:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80048fe:	7bfb      	ldrb	r3, [r7, #15]
 8004900:	3301      	adds	r3, #1
 8004902:	73fb      	strb	r3, [r7, #15]
 8004904:	7bfa      	ldrb	r2, [r7, #15]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	685b      	ldr	r3, [r3, #4]
 800490a:	429a      	cmp	r2, r3
 800490c:	d3af      	bcc.n	800486e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800490e:	2300      	movs	r3, #0
 8004910:	73fb      	strb	r3, [r7, #15]
 8004912:	e044      	b.n	800499e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004914:	7bfa      	ldrb	r2, [r7, #15]
 8004916:	6879      	ldr	r1, [r7, #4]
 8004918:	4613      	mov	r3, r2
 800491a:	00db      	lsls	r3, r3, #3
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	440b      	add	r3, r1
 8004922:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004926:	2200      	movs	r2, #0
 8004928:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800492a:	7bfa      	ldrb	r2, [r7, #15]
 800492c:	6879      	ldr	r1, [r7, #4]
 800492e:	4613      	mov	r3, r2
 8004930:	00db      	lsls	r3, r3, #3
 8004932:	4413      	add	r3, r2
 8004934:	009b      	lsls	r3, r3, #2
 8004936:	440b      	add	r3, r1
 8004938:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800493c:	7bfa      	ldrb	r2, [r7, #15]
 800493e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004940:	7bfa      	ldrb	r2, [r7, #15]
 8004942:	6879      	ldr	r1, [r7, #4]
 8004944:	4613      	mov	r3, r2
 8004946:	00db      	lsls	r3, r3, #3
 8004948:	4413      	add	r3, r2
 800494a:	009b      	lsls	r3, r3, #2
 800494c:	440b      	add	r3, r1
 800494e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004952:	2200      	movs	r2, #0
 8004954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004956:	7bfa      	ldrb	r2, [r7, #15]
 8004958:	6879      	ldr	r1, [r7, #4]
 800495a:	4613      	mov	r3, r2
 800495c:	00db      	lsls	r3, r3, #3
 800495e:	4413      	add	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	440b      	add	r3, r1
 8004964:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800496c:	7bfa      	ldrb	r2, [r7, #15]
 800496e:	6879      	ldr	r1, [r7, #4]
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800497e:	2200      	movs	r2, #0
 8004980:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004982:	7bfa      	ldrb	r2, [r7, #15]
 8004984:	6879      	ldr	r1, [r7, #4]
 8004986:	4613      	mov	r3, r2
 8004988:	00db      	lsls	r3, r3, #3
 800498a:	4413      	add	r3, r2
 800498c:	009b      	lsls	r3, r3, #2
 800498e:	440b      	add	r3, r1
 8004990:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004994:	2200      	movs	r2, #0
 8004996:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004998:	7bfb      	ldrb	r3, [r7, #15]
 800499a:	3301      	adds	r3, #1
 800499c:	73fb      	strb	r3, [r7, #15]
 800499e:	7bfa      	ldrb	r2, [r7, #15]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	429a      	cmp	r2, r3
 80049a6:	d3b5      	bcc.n	8004914 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	603b      	str	r3, [r7, #0]
 80049ae:	687e      	ldr	r6, [r7, #4]
 80049b0:	466d      	mov	r5, sp
 80049b2:	f106 0410 	add.w	r4, r6, #16
 80049b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80049bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80049be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80049c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80049c6:	1d33      	adds	r3, r6, #4
 80049c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049ca:	6838      	ldr	r0, [r7, #0]
 80049cc:	f003 fc68 	bl	80082a0 <USB_DevInit>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2202      	movs	r2, #2
 80049da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e00d      	b.n	80049fe <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2201      	movs	r2, #1
 80049ee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 fdb7 	bl	800956a <USB_DevDisconnect>

  return HAL_OK;
 80049fc:	2300      	movs	r3, #0
}
 80049fe:	4618      	mov	r0, r3
 8004a00:	3714      	adds	r7, #20
 8004a02:	46bd      	mov	sp, r7
 8004a04:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a06 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004a06:	b580      	push	{r7, lr}
 8004a08:	b084      	sub	sp, #16
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d101      	bne.n	8004a22 <HAL_PCD_Start+0x1c>
 8004a1e:	2302      	movs	r3, #2
 8004a20:	e020      	b.n	8004a64 <HAL_PCD_Start+0x5e>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d109      	bne.n	8004a46 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d005      	beq.n	8004a46 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f003 fbba 	bl	80081c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4618      	mov	r0, r3
 8004a56:	f004 fd67 	bl	8009528 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004a62:	2300      	movs	r3, #0
}
 8004a64:	4618      	mov	r0, r3
 8004a66:	3710      	adds	r7, #16
 8004a68:	46bd      	mov	sp, r7
 8004a6a:	bd80      	pop	{r7, pc}

08004a6c <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004a6c:	b590      	push	{r4, r7, lr}
 8004a6e:	b08d      	sub	sp, #52	; 0x34
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a7a:	6a3b      	ldr	r3, [r7, #32]
 8004a7c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	4618      	mov	r0, r3
 8004a84:	f004 fe25 	bl	80096d2 <USB_GetMode>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f040 848a 	bne.w	80053a4 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f004 fd89 	bl	80095ac <USB_ReadInterrupts>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	f000 8480 	beq.w	80053a2 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004aa2:	69fb      	ldr	r3, [r7, #28]
 8004aa4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	0a1b      	lsrs	r3, r3, #8
 8004aac:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	4618      	mov	r0, r3
 8004abc:	f004 fd76 	bl	80095ac <USB_ReadInterrupts>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f003 0302 	and.w	r3, r3, #2
 8004ac6:	2b02      	cmp	r3, #2
 8004ac8:	d107      	bne.n	8004ada <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	695a      	ldr	r2, [r3, #20]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f002 0202 	and.w	r2, r2, #2
 8004ad8:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f004 fd64 	bl	80095ac <USB_ReadInterrupts>
 8004ae4:	4603      	mov	r3, r0
 8004ae6:	f003 0310 	and.w	r3, r3, #16
 8004aea:	2b10      	cmp	r3, #16
 8004aec:	d161      	bne.n	8004bb2 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	699a      	ldr	r2, [r3, #24]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f022 0210 	bic.w	r2, r2, #16
 8004afc:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004afe:	6a3b      	ldr	r3, [r7, #32]
 8004b00:	6a1b      	ldr	r3, [r3, #32]
 8004b02:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	f003 020f 	and.w	r2, r3, #15
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	00db      	lsls	r3, r3, #3
 8004b0e:	4413      	add	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004b16:	687a      	ldr	r2, [r7, #4]
 8004b18:	4413      	add	r3, r2
 8004b1a:	3304      	adds	r3, #4
 8004b1c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004b1e:	69bb      	ldr	r3, [r7, #24]
 8004b20:	0c5b      	lsrs	r3, r3, #17
 8004b22:	f003 030f 	and.w	r3, r3, #15
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d124      	bne.n	8004b74 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004b2a:	69ba      	ldr	r2, [r7, #24]
 8004b2c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004b30:	4013      	ands	r3, r2
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d035      	beq.n	8004ba2 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b36:	697b      	ldr	r3, [r7, #20]
 8004b38:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004b3a:	69bb      	ldr	r3, [r7, #24]
 8004b3c:	091b      	lsrs	r3, r3, #4
 8004b3e:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004b40:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	461a      	mov	r2, r3
 8004b48:	6a38      	ldr	r0, [r7, #32]
 8004b4a:	f004 fb9b 	bl	8009284 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	691a      	ldr	r2, [r3, #16]
 8004b52:	69bb      	ldr	r3, [r7, #24]
 8004b54:	091b      	lsrs	r3, r3, #4
 8004b56:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b5a:	441a      	add	r2, r3
 8004b5c:	697b      	ldr	r3, [r7, #20]
 8004b5e:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	6a1a      	ldr	r2, [r3, #32]
 8004b64:	69bb      	ldr	r3, [r7, #24]
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b6c:	441a      	add	r2, r3
 8004b6e:	697b      	ldr	r3, [r7, #20]
 8004b70:	621a      	str	r2, [r3, #32]
 8004b72:	e016      	b.n	8004ba2 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	0c5b      	lsrs	r3, r3, #17
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	2b06      	cmp	r3, #6
 8004b7e:	d110      	bne.n	8004ba2 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004b86:	2208      	movs	r2, #8
 8004b88:	4619      	mov	r1, r3
 8004b8a:	6a38      	ldr	r0, [r7, #32]
 8004b8c:	f004 fb7a 	bl	8009284 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	6a1a      	ldr	r2, [r3, #32]
 8004b94:	69bb      	ldr	r3, [r7, #24]
 8004b96:	091b      	lsrs	r3, r3, #4
 8004b98:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004b9c:	441a      	add	r2, r3
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	699a      	ldr	r2, [r3, #24]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0210 	orr.w	r2, r2, #16
 8004bb0:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f004 fcf8 	bl	80095ac <USB_ReadInterrupts>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004bc2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004bc6:	f040 80a7 	bne.w	8004d18 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f004 fcfd 	bl	80095d2 <USB_ReadDevAllOutEpInterrupt>
 8004bd8:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004bda:	e099      	b.n	8004d10 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bde:	f003 0301 	and.w	r3, r3, #1
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 808e 	beq.w	8004d04 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bee:	b2d2      	uxtb	r2, r2
 8004bf0:	4611      	mov	r1, r2
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	f004 fd21 	bl	800963a <USB_ReadDevOutEPInterrupt>
 8004bf8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	f003 0301 	and.w	r3, r3, #1
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d00c      	beq.n	8004c1e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c06:	015a      	lsls	r2, r3, #5
 8004c08:	69fb      	ldr	r3, [r7, #28]
 8004c0a:	4413      	add	r3, r2
 8004c0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c10:	461a      	mov	r2, r3
 8004c12:	2301      	movs	r3, #1
 8004c14:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004c16:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f000 feab 	bl	8005974 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004c1e:	693b      	ldr	r3, [r7, #16]
 8004c20:	f003 0308 	and.w	r3, r3, #8
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d00c      	beq.n	8004c42 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	69fb      	ldr	r3, [r7, #28]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c34:	461a      	mov	r2, r3
 8004c36:	2308      	movs	r3, #8
 8004c38:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004c3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 ff81 	bl	8005b44 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	f003 0310 	and.w	r3, r3, #16
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d008      	beq.n	8004c5e <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c4e:	015a      	lsls	r2, r3, #5
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	4413      	add	r3, r2
 8004c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c58:	461a      	mov	r2, r3
 8004c5a:	2310      	movs	r3, #16
 8004c5c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004c5e:	693b      	ldr	r3, [r7, #16]
 8004c60:	f003 0302 	and.w	r3, r3, #2
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d030      	beq.n	8004cca <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	695b      	ldr	r3, [r3, #20]
 8004c6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c70:	2b80      	cmp	r3, #128	; 0x80
 8004c72:	d109      	bne.n	8004c88 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c7a:	685b      	ldr	r3, [r3, #4]
 8004c7c:	69fa      	ldr	r2, [r7, #28]
 8004c7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c82:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c86:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004c88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c8a:	4613      	mov	r3, r2
 8004c8c:	00db      	lsls	r3, r3, #3
 8004c8e:	4413      	add	r3, r2
 8004c90:	009b      	lsls	r3, r3, #2
 8004c92:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c96:	687a      	ldr	r2, [r7, #4]
 8004c98:	4413      	add	r3, r2
 8004c9a:	3304      	adds	r3, #4
 8004c9c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004c9e:	697b      	ldr	r3, [r7, #20]
 8004ca0:	78db      	ldrb	r3, [r3, #3]
 8004ca2:	2b01      	cmp	r3, #1
 8004ca4:	d108      	bne.n	8004cb8 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	2200      	movs	r2, #0
 8004caa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cae:	b2db      	uxtb	r3, r3
 8004cb0:	4619      	mov	r1, r3
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f006 fd10 	bl	800b6d8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	015a      	lsls	r2, r3, #5
 8004cbc:	69fb      	ldr	r3, [r7, #28]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc4:	461a      	mov	r2, r3
 8004cc6:	2302      	movs	r3, #2
 8004cc8:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	f003 0320 	and.w	r3, r3, #32
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d008      	beq.n	8004ce6 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	69fb      	ldr	r3, [r7, #28]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	2320      	movs	r3, #32
 8004ce4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d009      	beq.n	8004d04 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d02:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d06:	3301      	adds	r3, #1
 8004d08:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	085b      	lsrs	r3, r3, #1
 8004d0e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004d10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	f47f af62 	bne.w	8004bdc <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4618      	mov	r0, r3
 8004d1e:	f004 fc45 	bl	80095ac <USB_ReadInterrupts>
 8004d22:	4603      	mov	r3, r0
 8004d24:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004d28:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004d2c:	f040 80db 	bne.w	8004ee6 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4618      	mov	r0, r3
 8004d36:	f004 fc66 	bl	8009606 <USB_ReadDevAllInEpInterrupt>
 8004d3a:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004d40:	e0cd      	b.n	8004ede <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d44:	f003 0301 	and.w	r3, r3, #1
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	f000 80c2 	beq.w	8004ed2 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	4611      	mov	r1, r2
 8004d58:	4618      	mov	r0, r3
 8004d5a:	f004 fc8c 	bl	8009676 <USB_ReadDevInEPInterrupt>
 8004d5e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004d60:	693b      	ldr	r3, [r7, #16]
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d057      	beq.n	8004e1a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d6c:	f003 030f 	and.w	r3, r3, #15
 8004d70:	2201      	movs	r2, #1
 8004d72:	fa02 f303 	lsl.w	r3, r2, r3
 8004d76:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	43db      	mvns	r3, r3
 8004d84:	69f9      	ldr	r1, [r7, #28]
 8004d86:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d8a:	4013      	ands	r3, r2
 8004d8c:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004d8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d90:	015a      	lsls	r2, r3, #5
 8004d92:	69fb      	ldr	r3, [r7, #28]
 8004d94:	4413      	add	r3, r2
 8004d96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d9a:	461a      	mov	r2, r3
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	691b      	ldr	r3, [r3, #16]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d132      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004da8:	6879      	ldr	r1, [r7, #4]
 8004daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dac:	4613      	mov	r3, r2
 8004dae:	00db      	lsls	r3, r3, #3
 8004db0:	4413      	add	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	440b      	add	r3, r1
 8004db6:	334c      	adds	r3, #76	; 0x4c
 8004db8:	6819      	ldr	r1, [r3, #0]
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dbe:	4613      	mov	r3, r2
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	009b      	lsls	r3, r3, #2
 8004dc6:	4403      	add	r3, r0
 8004dc8:	3348      	adds	r3, #72	; 0x48
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4419      	add	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	4613      	mov	r3, r2
 8004dd4:	00db      	lsls	r3, r3, #3
 8004dd6:	4413      	add	r3, r2
 8004dd8:	009b      	lsls	r3, r3, #2
 8004dda:	4403      	add	r3, r0
 8004ddc:	334c      	adds	r3, #76	; 0x4c
 8004dde:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d113      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x3a2>
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dea:	4613      	mov	r3, r2
 8004dec:	00db      	lsls	r3, r3, #3
 8004dee:	4413      	add	r3, r2
 8004df0:	009b      	lsls	r3, r3, #2
 8004df2:	440b      	add	r3, r1
 8004df4:	3354      	adds	r3, #84	; 0x54
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d108      	bne.n	8004e0e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e06:	461a      	mov	r2, r3
 8004e08:	2101      	movs	r1, #1
 8004e0a:	f004 fc93 	bl	8009734 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e10:	b2db      	uxtb	r3, r3
 8004e12:	4619      	mov	r1, r3
 8004e14:	6878      	ldr	r0, [r7, #4]
 8004e16:	f006 fbe4 	bl	800b5e2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	f003 0308 	and.w	r3, r3, #8
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d008      	beq.n	8004e36 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e26:	015a      	lsls	r2, r3, #5
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	4413      	add	r3, r2
 8004e2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e30:	461a      	mov	r2, r3
 8004e32:	2308      	movs	r3, #8
 8004e34:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	f003 0310 	and.w	r3, r3, #16
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e42:	015a      	lsls	r2, r3, #5
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	4413      	add	r3, r2
 8004e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	2310      	movs	r3, #16
 8004e50:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d008      	beq.n	8004e6e <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	69fb      	ldr	r3, [r7, #28]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e68:	461a      	mov	r2, r3
 8004e6a:	2340      	movs	r3, #64	; 0x40
 8004e6c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004e6e:	693b      	ldr	r3, [r7, #16]
 8004e70:	f003 0302 	and.w	r3, r3, #2
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d023      	beq.n	8004ec0 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004e78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004e7a:	6a38      	ldr	r0, [r7, #32]
 8004e7c:	f003 fb74 	bl	8008568 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004e80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e82:	4613      	mov	r3, r2
 8004e84:	00db      	lsls	r3, r3, #3
 8004e86:	4413      	add	r3, r2
 8004e88:	009b      	lsls	r3, r3, #2
 8004e8a:	3338      	adds	r3, #56	; 0x38
 8004e8c:	687a      	ldr	r2, [r7, #4]
 8004e8e:	4413      	add	r3, r2
 8004e90:	3304      	adds	r3, #4
 8004e92:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	78db      	ldrb	r3, [r3, #3]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d108      	bne.n	8004eae <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8004e9c:	697b      	ldr	r3, [r7, #20]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8004ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	4619      	mov	r1, r3
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f006 fc27 	bl	800b6fc <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004eb0:	015a      	lsls	r2, r3, #5
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	4413      	add	r3, r2
 8004eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eba:	461a      	mov	r2, r3
 8004ebc:	2302      	movs	r3, #2
 8004ebe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004eca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004ecc:	6878      	ldr	r0, [r7, #4]
 8004ece:	f000 fcc3 	bl	8005858 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8004ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ed4:	3301      	adds	r3, #1
 8004ed6:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004ed8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eda:	085b      	lsrs	r3, r3, #1
 8004edc:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	f47f af2e 	bne.w	8004d42 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f004 fb5e 	bl	80095ac <USB_ReadInterrupts>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004efa:	d122      	bne.n	8004f42 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004f0a:	f023 0301 	bic.w	r3, r3, #1
 8004f0e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8004f16:	2b01      	cmp	r3, #1
 8004f18:	d108      	bne.n	8004f2c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8004f22:	2100      	movs	r1, #0
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	f000 feab 	bl	8005c80 <HAL_PCDEx_LPM_Callback>
 8004f2a:	e002      	b.n	8004f32 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f006 fbc5 	bl	800b6bc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	695a      	ldr	r2, [r3, #20]
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004f40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4618      	mov	r0, r3
 8004f48:	f004 fb30 	bl	80095ac <USB_ReadInterrupts>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f56:	d112      	bne.n	8004f7e <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0301 	and.w	r3, r3, #1
 8004f64:	2b01      	cmp	r3, #1
 8004f66:	d102      	bne.n	8004f6e <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8004f68:	6878      	ldr	r0, [r7, #4]
 8004f6a:	f006 fb81 	bl	800b670 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	695a      	ldr	r2, [r3, #20]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8004f7c:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4618      	mov	r0, r3
 8004f84:	f004 fb12 	bl	80095ac <USB_ReadInterrupts>
 8004f88:	4603      	mov	r3, r0
 8004f8a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f92:	f040 80b7 	bne.w	8005104 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004f96:	69fb      	ldr	r3, [r7, #28]
 8004f98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fa4:	f023 0301 	bic.w	r3, r3, #1
 8004fa8:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	2110      	movs	r1, #16
 8004fb0:	4618      	mov	r0, r3
 8004fb2:	f003 fad9 	bl	8008568 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004fba:	e046      	b.n	800504a <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fbe:	015a      	lsls	r2, r3, #5
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fc8:	461a      	mov	r2, r3
 8004fca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fce:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004fd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004fd2:	015a      	lsls	r2, r3, #5
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fe0:	0151      	lsls	r1, r2, #5
 8004fe2:	69fa      	ldr	r2, [r7, #28]
 8004fe4:	440a      	add	r2, r1
 8004fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fea:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004fee:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ff2:	015a      	lsls	r2, r3, #5
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	4413      	add	r3, r2
 8004ff8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffc:	461a      	mov	r2, r3
 8004ffe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005002:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005014:	0151      	lsls	r1, r2, #5
 8005016:	69fa      	ldr	r2, [r7, #28]
 8005018:	440a      	add	r2, r1
 800501a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800501e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005022:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	015a      	lsls	r2, r3, #5
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	4413      	add	r3, r2
 800502c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005034:	0151      	lsls	r1, r2, #5
 8005036:	69fa      	ldr	r2, [r7, #28]
 8005038:	440a      	add	r2, r1
 800503a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800503e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005042:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005044:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005046:	3301      	adds	r3, #1
 8005048:	62fb      	str	r3, [r7, #44]	; 0x2c
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005050:	429a      	cmp	r2, r3
 8005052:	d3b3      	bcc.n	8004fbc <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800505a:	69db      	ldr	r3, [r3, #28]
 800505c:	69fa      	ldr	r2, [r7, #28]
 800505e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005062:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005066:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800506c:	2b00      	cmp	r3, #0
 800506e:	d016      	beq.n	800509e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005076:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800507a:	69fa      	ldr	r2, [r7, #28]
 800507c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005080:	f043 030b 	orr.w	r3, r3, #11
 8005084:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800508e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005090:	69fa      	ldr	r2, [r7, #28]
 8005092:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005096:	f043 030b 	orr.w	r3, r3, #11
 800509a:	6453      	str	r3, [r2, #68]	; 0x44
 800509c:	e015      	b.n	80050ca <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050a4:	695b      	ldr	r3, [r3, #20]
 80050a6:	69fa      	ldr	r2, [r7, #28]
 80050a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050ac:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80050b0:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80050b4:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050bc:	691b      	ldr	r3, [r3, #16]
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050c4:	f043 030b 	orr.w	r3, r3, #11
 80050c8:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	69fa      	ldr	r2, [r7, #28]
 80050d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80050d8:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80050dc:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6818      	ldr	r0, [r3, #0]
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	691b      	ldr	r3, [r3, #16]
 80050e6:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80050ee:	461a      	mov	r2, r3
 80050f0:	f004 fb20 	bl	8009734 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	695a      	ldr	r2, [r3, #20]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005102:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	4618      	mov	r0, r3
 800510a:	f004 fa4f 	bl	80095ac <USB_ReadInterrupts>
 800510e:	4603      	mov	r3, r0
 8005110:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005114:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005118:	d124      	bne.n	8005164 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4618      	mov	r0, r3
 8005120:	f004 fae5 	bl	80096ee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f003 fa9a 	bl	8008662 <USB_GetDevSpeed>
 800512e:	4603      	mov	r3, r0
 8005130:	461a      	mov	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681c      	ldr	r4, [r3, #0]
 800513a:	f001 fa11 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 800513e:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005144:	b2db      	uxtb	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	4620      	mov	r0, r4
 800514a:	f002 ff99 	bl	8008080 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f006 fa6f 	bl	800b632 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	695a      	ldr	r2, [r3, #20]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005162:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4618      	mov	r0, r3
 800516a:	f004 fa1f 	bl	80095ac <USB_ReadInterrupts>
 800516e:	4603      	mov	r3, r0
 8005170:	f003 0308 	and.w	r3, r3, #8
 8005174:	2b08      	cmp	r3, #8
 8005176:	d10a      	bne.n	800518e <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005178:	6878      	ldr	r0, [r7, #4]
 800517a:	f006 fa4c 	bl	800b616 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	695a      	ldr	r2, [r3, #20]
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f002 0208 	and.w	r2, r2, #8
 800518c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4618      	mov	r0, r3
 8005194:	f004 fa0a 	bl	80095ac <USB_ReadInterrupts>
 8005198:	4603      	mov	r3, r0
 800519a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800519e:	2b80      	cmp	r3, #128	; 0x80
 80051a0:	d122      	bne.n	80051e8 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80051a2:	6a3b      	ldr	r3, [r7, #32]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051aa:	6a3b      	ldr	r3, [r7, #32]
 80051ac:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051ae:	2301      	movs	r3, #1
 80051b0:	627b      	str	r3, [r7, #36]	; 0x24
 80051b2:	e014      	b.n	80051de <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80051b4:	6879      	ldr	r1, [r7, #4]
 80051b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b8:	4613      	mov	r3, r2
 80051ba:	00db      	lsls	r3, r3, #3
 80051bc:	4413      	add	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	440b      	add	r3, r1
 80051c2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d105      	bne.n	80051d8 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80051cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ce:	b2db      	uxtb	r3, r3
 80051d0:	4619      	mov	r1, r3
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fb0f 	bl	80057f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051da:	3301      	adds	r3, #1
 80051dc:	627b      	str	r3, [r7, #36]	; 0x24
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051e4:	429a      	cmp	r2, r3
 80051e6:	d3e5      	bcc.n	80051b4 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	4618      	mov	r0, r3
 80051ee:	f004 f9dd 	bl	80095ac <USB_ReadInterrupts>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80051f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fc:	d13b      	bne.n	8005276 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80051fe:	2301      	movs	r3, #1
 8005200:	627b      	str	r3, [r7, #36]	; 0x24
 8005202:	e02b      	b.n	800525c <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	015a      	lsls	r2, r3, #5
 8005208:	69fb      	ldr	r3, [r7, #28]
 800520a:	4413      	add	r3, r2
 800520c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005214:	6879      	ldr	r1, [r7, #4]
 8005216:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005218:	4613      	mov	r3, r2
 800521a:	00db      	lsls	r3, r3, #3
 800521c:	4413      	add	r3, r2
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	440b      	add	r3, r1
 8005222:	3340      	adds	r3, #64	; 0x40
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	2b01      	cmp	r3, #1
 8005228:	d115      	bne.n	8005256 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800522a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800522c:	2b00      	cmp	r3, #0
 800522e:	da12      	bge.n	8005256 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005230:	6879      	ldr	r1, [r7, #4]
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	4613      	mov	r3, r2
 8005236:	00db      	lsls	r3, r3, #3
 8005238:	4413      	add	r3, r2
 800523a:	009b      	lsls	r3, r3, #2
 800523c:	440b      	add	r3, r1
 800523e:	333f      	adds	r3, #63	; 0x3f
 8005240:	2201      	movs	r2, #1
 8005242:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005246:	b2db      	uxtb	r3, r3
 8005248:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800524c:	b2db      	uxtb	r3, r3
 800524e:	4619      	mov	r1, r3
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 fad0 	bl	80057f6 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005258:	3301      	adds	r3, #1
 800525a:	627b      	str	r3, [r7, #36]	; 0x24
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005262:	429a      	cmp	r2, r3
 8005264:	d3ce      	bcc.n	8005204 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	695a      	ldr	r2, [r3, #20]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005274:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4618      	mov	r0, r3
 800527c:	f004 f996 	bl	80095ac <USB_ReadInterrupts>
 8005280:	4603      	mov	r3, r0
 8005282:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005286:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800528a:	d155      	bne.n	8005338 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800528c:	2301      	movs	r3, #1
 800528e:	627b      	str	r3, [r7, #36]	; 0x24
 8005290:	e045      	b.n	800531e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	69fb      	ldr	r3, [r7, #28]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052a2:	6879      	ldr	r1, [r7, #4]
 80052a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052a6:	4613      	mov	r3, r2
 80052a8:	00db      	lsls	r3, r3, #3
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80052b4:	781b      	ldrb	r3, [r3, #0]
 80052b6:	2b01      	cmp	r3, #1
 80052b8:	d12e      	bne.n	8005318 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052ba:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80052bc:	2b00      	cmp	r3, #0
 80052be:	da2b      	bge.n	8005318 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80052cc:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d121      	bne.n	8005318 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80052d4:	6879      	ldr	r1, [r7, #4]
 80052d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052d8:	4613      	mov	r3, r2
 80052da:	00db      	lsls	r3, r3, #3
 80052dc:	4413      	add	r3, r2
 80052de:	009b      	lsls	r3, r3, #2
 80052e0:	440b      	add	r3, r1
 80052e2:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80052e6:	2201      	movs	r2, #1
 80052e8:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80052ea:	6a3b      	ldr	r3, [r7, #32]
 80052ec:	699b      	ldr	r3, [r3, #24]
 80052ee:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80052f6:	6a3b      	ldr	r3, [r7, #32]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10a      	bne.n	8005318 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005302:	69fb      	ldr	r3, [r7, #28]
 8005304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005308:	685b      	ldr	r3, [r3, #4]
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005310:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005314:	6053      	str	r3, [r2, #4]
            break;
 8005316:	e007      	b.n	8005328 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531a:	3301      	adds	r3, #1
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005324:	429a      	cmp	r2, r3
 8005326:	d3b4      	bcc.n	8005292 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695a      	ldr	r2, [r3, #20]
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005336:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	4618      	mov	r0, r3
 800533e:	f004 f935 	bl	80095ac <USB_ReadInterrupts>
 8005342:	4603      	mov	r3, r0
 8005344:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800534c:	d10a      	bne.n	8005364 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f006 f9e6 	bl	800b720 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	695a      	ldr	r2, [r3, #20]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4618      	mov	r0, r3
 800536a:	f004 f91f 	bl	80095ac <USB_ReadInterrupts>
 800536e:	4603      	mov	r3, r0
 8005370:	f003 0304 	and.w	r3, r3, #4
 8005374:	2b04      	cmp	r3, #4
 8005376:	d115      	bne.n	80053a4 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	f003 0304 	and.w	r3, r3, #4
 8005386:	2b00      	cmp	r3, #0
 8005388:	d002      	beq.n	8005390 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f006 f9d6 	bl	800b73c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6859      	ldr	r1, [r3, #4]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	69ba      	ldr	r2, [r7, #24]
 800539c:	430a      	orrs	r2, r1
 800539e:	605a      	str	r2, [r3, #4]
 80053a0:	e000      	b.n	80053a4 <HAL_PCD_IRQHandler+0x938>
      return;
 80053a2:	bf00      	nop
    }
  }
}
 80053a4:	3734      	adds	r7, #52	; 0x34
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd90      	pop	{r4, r7, pc}

080053aa <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80053aa:	b580      	push	{r7, lr}
 80053ac:	b082      	sub	sp, #8
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	460b      	mov	r3, r1
 80053b4:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d101      	bne.n	80053c4 <HAL_PCD_SetAddress+0x1a>
 80053c0:	2302      	movs	r3, #2
 80053c2:	e013      	b.n	80053ec <HAL_PCD_SetAddress+0x42>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	78fa      	ldrb	r2, [r7, #3]
 80053d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	78fa      	ldrb	r2, [r7, #3]
 80053da:	4611      	mov	r1, r2
 80053dc:	4618      	mov	r0, r3
 80053de:	f004 f87d 	bl	80094dc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2200      	movs	r2, #0
 80053e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80053ea:	2300      	movs	r3, #0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af00      	add	r7, sp, #0
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	4608      	mov	r0, r1
 80053fe:	4611      	mov	r1, r2
 8005400:	461a      	mov	r2, r3
 8005402:	4603      	mov	r3, r0
 8005404:	70fb      	strb	r3, [r7, #3]
 8005406:	460b      	mov	r3, r1
 8005408:	803b      	strh	r3, [r7, #0]
 800540a:	4613      	mov	r3, r2
 800540c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800540e:	2300      	movs	r3, #0
 8005410:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005412:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005416:	2b00      	cmp	r3, #0
 8005418:	da0f      	bge.n	800543a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800541a:	78fb      	ldrb	r3, [r7, #3]
 800541c:	f003 020f 	and.w	r2, r3, #15
 8005420:	4613      	mov	r3, r2
 8005422:	00db      	lsls	r3, r3, #3
 8005424:	4413      	add	r3, r2
 8005426:	009b      	lsls	r3, r3, #2
 8005428:	3338      	adds	r3, #56	; 0x38
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	4413      	add	r3, r2
 800542e:	3304      	adds	r3, #4
 8005430:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2201      	movs	r2, #1
 8005436:	705a      	strb	r2, [r3, #1]
 8005438:	e00f      	b.n	800545a <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800543a:	78fb      	ldrb	r3, [r7, #3]
 800543c:	f003 020f 	and.w	r2, r3, #15
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	4413      	add	r3, r2
 8005450:	3304      	adds	r3, #4
 8005452:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800545a:	78fb      	ldrb	r3, [r7, #3]
 800545c:	f003 030f 	and.w	r3, r3, #15
 8005460:	b2da      	uxtb	r2, r3
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005466:	883a      	ldrh	r2, [r7, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	78ba      	ldrb	r2, [r7, #2]
 8005470:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	785b      	ldrb	r3, [r3, #1]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005484:	78bb      	ldrb	r3, [r7, #2]
 8005486:	2b02      	cmp	r3, #2
 8005488:	d102      	bne.n	8005490 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	2200      	movs	r2, #0
 800548e:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005496:	2b01      	cmp	r3, #1
 8005498:	d101      	bne.n	800549e <HAL_PCD_EP_Open+0xaa>
 800549a:	2302      	movs	r3, #2
 800549c:	e00e      	b.n	80054bc <HAL_PCD_EP_Open+0xc8>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2201      	movs	r2, #1
 80054a2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	68f9      	ldr	r1, [r7, #12]
 80054ac:	4618      	mov	r0, r3
 80054ae:	f003 f8fd 	bl	80086ac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80054ba:	7afb      	ldrb	r3, [r7, #11]
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3710      	adds	r7, #16
 80054c0:	46bd      	mov	sp, r7
 80054c2:	bd80      	pop	{r7, pc}

080054c4 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	b084      	sub	sp, #16
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80054d0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	da0f      	bge.n	80054f8 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	f003 020f 	and.w	r2, r3, #15
 80054de:	4613      	mov	r3, r2
 80054e0:	00db      	lsls	r3, r3, #3
 80054e2:	4413      	add	r3, r2
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	3338      	adds	r3, #56	; 0x38
 80054e8:	687a      	ldr	r2, [r7, #4]
 80054ea:	4413      	add	r3, r2
 80054ec:	3304      	adds	r3, #4
 80054ee:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2201      	movs	r2, #1
 80054f4:	705a      	strb	r2, [r3, #1]
 80054f6:	e00f      	b.n	8005518 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80054f8:	78fb      	ldrb	r3, [r7, #3]
 80054fa:	f003 020f 	and.w	r2, r3, #15
 80054fe:	4613      	mov	r3, r2
 8005500:	00db      	lsls	r3, r3, #3
 8005502:	4413      	add	r3, r2
 8005504:	009b      	lsls	r3, r3, #2
 8005506:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800550a:	687a      	ldr	r2, [r7, #4]
 800550c:	4413      	add	r3, r2
 800550e:	3304      	adds	r3, #4
 8005510:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	2200      	movs	r2, #0
 8005516:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8005518:	78fb      	ldrb	r3, [r7, #3]
 800551a:	f003 030f 	and.w	r3, r3, #15
 800551e:	b2da      	uxtb	r2, r3
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_PCD_EP_Close+0x6e>
 800552e:	2302      	movs	r3, #2
 8005530:	e00e      	b.n	8005550 <HAL_PCD_EP_Close+0x8c>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	68f9      	ldr	r1, [r7, #12]
 8005540:	4618      	mov	r0, r3
 8005542:	f003 f93b 	bl	80087bc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800554e:	2300      	movs	r3, #0
}
 8005550:	4618      	mov	r0, r3
 8005552:	3710      	adds	r7, #16
 8005554:	46bd      	mov	sp, r7
 8005556:	bd80      	pop	{r7, pc}

08005558 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b086      	sub	sp, #24
 800555c:	af00      	add	r7, sp, #0
 800555e:	60f8      	str	r0, [r7, #12]
 8005560:	607a      	str	r2, [r7, #4]
 8005562:	603b      	str	r3, [r7, #0]
 8005564:	460b      	mov	r3, r1
 8005566:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005568:	7afb      	ldrb	r3, [r7, #11]
 800556a:	f003 020f 	and.w	r2, r3, #15
 800556e:	4613      	mov	r3, r2
 8005570:	00db      	lsls	r3, r3, #3
 8005572:	4413      	add	r3, r2
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800557a:	68fa      	ldr	r2, [r7, #12]
 800557c:	4413      	add	r3, r2
 800557e:	3304      	adds	r3, #4
 8005580:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005582:	697b      	ldr	r3, [r7, #20]
 8005584:	687a      	ldr	r2, [r7, #4]
 8005586:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8005588:	697b      	ldr	r3, [r7, #20]
 800558a:	683a      	ldr	r2, [r7, #0]
 800558c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2200      	movs	r2, #0
 8005592:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8005594:	697b      	ldr	r3, [r7, #20]
 8005596:	2200      	movs	r2, #0
 8005598:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800559a:	7afb      	ldrb	r3, [r7, #11]
 800559c:	f003 030f 	and.w	r3, r3, #15
 80055a0:	b2da      	uxtb	r2, r3
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	2b01      	cmp	r3, #1
 80055ac:	d102      	bne.n	80055b4 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80055ae:	687a      	ldr	r2, [r7, #4]
 80055b0:	697b      	ldr	r3, [r7, #20]
 80055b2:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80055b4:	7afb      	ldrb	r3, [r7, #11]
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d109      	bne.n	80055d2 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6818      	ldr	r0, [r3, #0]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	b2db      	uxtb	r3, r3
 80055c8:	461a      	mov	r2, r3
 80055ca:	6979      	ldr	r1, [r7, #20]
 80055cc:	f003 fc1a 	bl	8008e04 <USB_EP0StartXfer>
 80055d0:	e008      	b.n	80055e4 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	6818      	ldr	r0, [r3, #0]
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	b2db      	uxtb	r3, r3
 80055dc:	461a      	mov	r2, r3
 80055de:	6979      	ldr	r1, [r7, #20]
 80055e0:	f003 f9c8 	bl	8008974 <USB_EPStartXfer>
  }

  return HAL_OK;
 80055e4:	2300      	movs	r3, #0
}
 80055e6:	4618      	mov	r0, r3
 80055e8:	3718      	adds	r7, #24
 80055ea:	46bd      	mov	sp, r7
 80055ec:	bd80      	pop	{r7, pc}

080055ee <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80055ee:	b580      	push	{r7, lr}
 80055f0:	b086      	sub	sp, #24
 80055f2:	af00      	add	r7, sp, #0
 80055f4:	60f8      	str	r0, [r7, #12]
 80055f6:	607a      	str	r2, [r7, #4]
 80055f8:	603b      	str	r3, [r7, #0]
 80055fa:	460b      	mov	r3, r1
 80055fc:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80055fe:	7afb      	ldrb	r3, [r7, #11]
 8005600:	f003 020f 	and.w	r2, r3, #15
 8005604:	4613      	mov	r3, r2
 8005606:	00db      	lsls	r3, r3, #3
 8005608:	4413      	add	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	3338      	adds	r3, #56	; 0x38
 800560e:	68fa      	ldr	r2, [r7, #12]
 8005610:	4413      	add	r3, r2
 8005612:	3304      	adds	r3, #4
 8005614:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	687a      	ldr	r2, [r7, #4]
 800561a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800561c:	697b      	ldr	r3, [r7, #20]
 800561e:	683a      	ldr	r2, [r7, #0]
 8005620:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	2200      	movs	r2, #0
 8005626:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8005628:	697b      	ldr	r3, [r7, #20]
 800562a:	2201      	movs	r2, #1
 800562c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800562e:	7afb      	ldrb	r3, [r7, #11]
 8005630:	f003 030f 	and.w	r3, r3, #15
 8005634:	b2da      	uxtb	r2, r3
 8005636:	697b      	ldr	r3, [r7, #20]
 8005638:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	691b      	ldr	r3, [r3, #16]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d102      	bne.n	8005648 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005642:	687a      	ldr	r2, [r7, #4]
 8005644:	697b      	ldr	r3, [r7, #20]
 8005646:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005648:	7afb      	ldrb	r3, [r7, #11]
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	2b00      	cmp	r3, #0
 8005650:	d109      	bne.n	8005666 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	6818      	ldr	r0, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	691b      	ldr	r3, [r3, #16]
 800565a:	b2db      	uxtb	r3, r3
 800565c:	461a      	mov	r2, r3
 800565e:	6979      	ldr	r1, [r7, #20]
 8005660:	f003 fbd0 	bl	8008e04 <USB_EP0StartXfer>
 8005664:	e008      	b.n	8005678 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	6818      	ldr	r0, [r3, #0]
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	691b      	ldr	r3, [r3, #16]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	6979      	ldr	r1, [r7, #20]
 8005674:	f003 f97e 	bl	8008974 <USB_EPStartXfer>
  }

  return HAL_OK;
 8005678:	2300      	movs	r3, #0
}
 800567a:	4618      	mov	r0, r3
 800567c:	3718      	adds	r7, #24
 800567e:	46bd      	mov	sp, r7
 8005680:	bd80      	pop	{r7, pc}

08005682 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005682:	b580      	push	{r7, lr}
 8005684:	b084      	sub	sp, #16
 8005686:	af00      	add	r7, sp, #0
 8005688:	6078      	str	r0, [r7, #4]
 800568a:	460b      	mov	r3, r1
 800568c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800568e:	78fb      	ldrb	r3, [r7, #3]
 8005690:	f003 020f 	and.w	r2, r3, #15
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	685b      	ldr	r3, [r3, #4]
 8005698:	429a      	cmp	r2, r3
 800569a:	d901      	bls.n	80056a0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800569c:	2301      	movs	r3, #1
 800569e:	e050      	b.n	8005742 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80056a0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	da0f      	bge.n	80056c8 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80056a8:	78fb      	ldrb	r3, [r7, #3]
 80056aa:	f003 020f 	and.w	r2, r3, #15
 80056ae:	4613      	mov	r3, r2
 80056b0:	00db      	lsls	r3, r3, #3
 80056b2:	4413      	add	r3, r2
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	3338      	adds	r3, #56	; 0x38
 80056b8:	687a      	ldr	r2, [r7, #4]
 80056ba:	4413      	add	r3, r2
 80056bc:	3304      	adds	r3, #4
 80056be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2201      	movs	r2, #1
 80056c4:	705a      	strb	r2, [r3, #1]
 80056c6:	e00d      	b.n	80056e4 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80056c8:	78fa      	ldrb	r2, [r7, #3]
 80056ca:	4613      	mov	r3, r2
 80056cc:	00db      	lsls	r3, r3, #3
 80056ce:	4413      	add	r3, r2
 80056d0:	009b      	lsls	r3, r3, #2
 80056d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80056d6:	687a      	ldr	r2, [r7, #4]
 80056d8:	4413      	add	r3, r2
 80056da:	3304      	adds	r3, #4
 80056dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	2200      	movs	r2, #0
 80056e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	2201      	movs	r2, #1
 80056e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80056ea:	78fb      	ldrb	r3, [r7, #3]
 80056ec:	f003 030f 	and.w	r3, r3, #15
 80056f0:	b2da      	uxtb	r2, r3
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d101      	bne.n	8005704 <HAL_PCD_EP_SetStall+0x82>
 8005700:	2302      	movs	r3, #2
 8005702:	e01e      	b.n	8005742 <HAL_PCD_EP_SetStall+0xc0>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68f9      	ldr	r1, [r7, #12]
 8005712:	4618      	mov	r0, r3
 8005714:	f003 fe0e 	bl	8009334 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005718:	78fb      	ldrb	r3, [r7, #3]
 800571a:	f003 030f 	and.w	r3, r3, #15
 800571e:	2b00      	cmp	r3, #0
 8005720:	d10a      	bne.n	8005738 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6818      	ldr	r0, [r3, #0]
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	691b      	ldr	r3, [r3, #16]
 800572a:	b2d9      	uxtb	r1, r3
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005732:	461a      	mov	r2, r3
 8005734:	f003 fffe 	bl	8009734 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	2200      	movs	r2, #0
 800573c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005740:	2300      	movs	r3, #0
}
 8005742:	4618      	mov	r0, r3
 8005744:	3710      	adds	r7, #16
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800574a:	b580      	push	{r7, lr}
 800574c:	b084      	sub	sp, #16
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	460b      	mov	r3, r1
 8005754:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005756:	78fb      	ldrb	r3, [r7, #3]
 8005758:	f003 020f 	and.w	r2, r3, #15
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	429a      	cmp	r2, r3
 8005762:	d901      	bls.n	8005768 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005764:	2301      	movs	r3, #1
 8005766:	e042      	b.n	80057ee <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005768:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800576c:	2b00      	cmp	r3, #0
 800576e:	da0f      	bge.n	8005790 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005770:	78fb      	ldrb	r3, [r7, #3]
 8005772:	f003 020f 	and.w	r2, r3, #15
 8005776:	4613      	mov	r3, r2
 8005778:	00db      	lsls	r3, r3, #3
 800577a:	4413      	add	r3, r2
 800577c:	009b      	lsls	r3, r3, #2
 800577e:	3338      	adds	r3, #56	; 0x38
 8005780:	687a      	ldr	r2, [r7, #4]
 8005782:	4413      	add	r3, r2
 8005784:	3304      	adds	r3, #4
 8005786:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2201      	movs	r2, #1
 800578c:	705a      	strb	r2, [r3, #1]
 800578e:	e00f      	b.n	80057b0 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005790:	78fb      	ldrb	r3, [r7, #3]
 8005792:	f003 020f 	and.w	r2, r3, #15
 8005796:	4613      	mov	r3, r2
 8005798:	00db      	lsls	r3, r3, #3
 800579a:	4413      	add	r3, r2
 800579c:	009b      	lsls	r3, r3, #2
 800579e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057a2:	687a      	ldr	r2, [r7, #4]
 80057a4:	4413      	add	r3, r2
 80057a6:	3304      	adds	r3, #4
 80057a8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	2200      	movs	r2, #0
 80057ae:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2200      	movs	r2, #0
 80057b4:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057b6:	78fb      	ldrb	r3, [r7, #3]
 80057b8:	f003 030f 	and.w	r3, r3, #15
 80057bc:	b2da      	uxtb	r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d101      	bne.n	80057d0 <HAL_PCD_EP_ClrStall+0x86>
 80057cc:	2302      	movs	r3, #2
 80057ce:	e00e      	b.n	80057ee <HAL_PCD_EP_ClrStall+0xa4>
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2201      	movs	r2, #1
 80057d4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68f9      	ldr	r1, [r7, #12]
 80057de:	4618      	mov	r0, r3
 80057e0:	f003 fe16 	bl	8009410 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3710      	adds	r7, #16
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}

080057f6 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057f6:	b580      	push	{r7, lr}
 80057f8:	b084      	sub	sp, #16
 80057fa:	af00      	add	r7, sp, #0
 80057fc:	6078      	str	r0, [r7, #4]
 80057fe:	460b      	mov	r3, r1
 8005800:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005802:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005806:	2b00      	cmp	r3, #0
 8005808:	da0c      	bge.n	8005824 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800580a:	78fb      	ldrb	r3, [r7, #3]
 800580c:	f003 020f 	and.w	r2, r3, #15
 8005810:	4613      	mov	r3, r2
 8005812:	00db      	lsls	r3, r3, #3
 8005814:	4413      	add	r3, r2
 8005816:	009b      	lsls	r3, r3, #2
 8005818:	3338      	adds	r3, #56	; 0x38
 800581a:	687a      	ldr	r2, [r7, #4]
 800581c:	4413      	add	r3, r2
 800581e:	3304      	adds	r3, #4
 8005820:	60fb      	str	r3, [r7, #12]
 8005822:	e00c      	b.n	800583e <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005824:	78fb      	ldrb	r3, [r7, #3]
 8005826:	f003 020f 	and.w	r2, r3, #15
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	3304      	adds	r3, #4
 800583c:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	68f9      	ldr	r1, [r7, #12]
 8005844:	4618      	mov	r0, r3
 8005846:	f003 fc35 	bl	80090b4 <USB_EPStopXfer>
 800584a:	4603      	mov	r3, r0
 800584c:	72fb      	strb	r3, [r7, #11]

  return ret;
 800584e:	7afb      	ldrb	r3, [r7, #11]
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b08a      	sub	sp, #40	; 0x28
 800585c:	af02      	add	r7, sp, #8
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800586c:	683a      	ldr	r2, [r7, #0]
 800586e:	4613      	mov	r3, r2
 8005870:	00db      	lsls	r3, r3, #3
 8005872:	4413      	add	r3, r2
 8005874:	009b      	lsls	r3, r3, #2
 8005876:	3338      	adds	r3, #56	; 0x38
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	4413      	add	r3, r2
 800587c:	3304      	adds	r3, #4
 800587e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	6a1a      	ldr	r2, [r3, #32]
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	429a      	cmp	r2, r3
 800588a:	d901      	bls.n	8005890 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800588c:	2301      	movs	r3, #1
 800588e:	e06c      	b.n	800596a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	699a      	ldr	r2, [r3, #24]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	6a1b      	ldr	r3, [r3, #32]
 8005898:	1ad3      	subs	r3, r2, r3
 800589a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d902      	bls.n	80058ac <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	3303      	adds	r3, #3
 80058b0:	089b      	lsrs	r3, r3, #2
 80058b2:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80058b4:	e02b      	b.n	800590e <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	699a      	ldr	r2, [r3, #24]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6a1b      	ldr	r3, [r3, #32]
 80058be:	1ad3      	subs	r3, r2, r3
 80058c0:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	69fa      	ldr	r2, [r7, #28]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d902      	bls.n	80058d2 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	68db      	ldr	r3, [r3, #12]
 80058d0:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80058d2:	69fb      	ldr	r3, [r7, #28]
 80058d4:	3303      	adds	r3, #3
 80058d6:	089b      	lsrs	r3, r3, #2
 80058d8:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	6919      	ldr	r1, [r3, #16]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	9300      	str	r3, [sp, #0]
 80058ee:	4603      	mov	r3, r0
 80058f0:	6978      	ldr	r0, [r7, #20]
 80058f2:	f003 fc89 	bl	8009208 <USB_WritePacket>

    ep->xfer_buff  += len;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	691a      	ldr	r2, [r3, #16]
 80058fa:	69fb      	ldr	r3, [r7, #28]
 80058fc:	441a      	add	r2, r3
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	6a1a      	ldr	r2, [r3, #32]
 8005906:	69fb      	ldr	r3, [r7, #28]
 8005908:	441a      	add	r2, r3
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	015a      	lsls	r2, r3, #5
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	4413      	add	r3, r2
 8005916:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800591e:	69ba      	ldr	r2, [r7, #24]
 8005920:	429a      	cmp	r2, r3
 8005922:	d809      	bhi.n	8005938 <PCD_WriteEmptyTxFifo+0xe0>
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6a1a      	ldr	r2, [r3, #32]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800592c:	429a      	cmp	r2, r3
 800592e:	d203      	bcs.n	8005938 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	699b      	ldr	r3, [r3, #24]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1be      	bne.n	80058b6 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	699a      	ldr	r2, [r3, #24]
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6a1b      	ldr	r3, [r3, #32]
 8005940:	429a      	cmp	r2, r3
 8005942:	d811      	bhi.n	8005968 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	f003 030f 	and.w	r3, r3, #15
 800594a:	2201      	movs	r2, #1
 800594c:	fa02 f303 	lsl.w	r3, r2, r3
 8005950:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	43db      	mvns	r3, r3
 800595e:	6939      	ldr	r1, [r7, #16]
 8005960:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005964:	4013      	ands	r3, r2
 8005966:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3720      	adds	r7, #32
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}
	...

08005974 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	b088      	sub	sp, #32
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
 800597c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005984:	69fb      	ldr	r3, [r7, #28]
 8005986:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	333c      	adds	r3, #60	; 0x3c
 800598c:	3304      	adds	r3, #4
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005992:	683b      	ldr	r3, [r7, #0]
 8005994:	015a      	lsls	r2, r3, #5
 8005996:	69bb      	ldr	r3, [r7, #24]
 8005998:	4413      	add	r3, r2
 800599a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800599e:	689b      	ldr	r3, [r3, #8]
 80059a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d17b      	bne.n	8005aa2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	f003 0308 	and.w	r3, r3, #8
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d015      	beq.n	80059e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4a61      	ldr	r2, [pc, #388]	; (8005b3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80059b8:	4293      	cmp	r3, r2
 80059ba:	f240 80b9 	bls.w	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80059be:	693b      	ldr	r3, [r7, #16]
 80059c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	f000 80b3 	beq.w	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	69bb      	ldr	r3, [r7, #24]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	461a      	mov	r2, r3
 80059d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80059dc:	6093      	str	r3, [r2, #8]
 80059de:	e0a7      	b.n	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80059e0:	693b      	ldr	r3, [r7, #16]
 80059e2:	f003 0320 	and.w	r3, r3, #32
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d009      	beq.n	80059fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	015a      	lsls	r2, r3, #5
 80059ee:	69bb      	ldr	r3, [r7, #24]
 80059f0:	4413      	add	r3, r2
 80059f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f6:	461a      	mov	r2, r3
 80059f8:	2320      	movs	r3, #32
 80059fa:	6093      	str	r3, [r2, #8]
 80059fc:	e098      	b.n	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80059fe:	693b      	ldr	r3, [r7, #16]
 8005a00:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	f040 8093 	bne.w	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	4a4b      	ldr	r2, [pc, #300]	; (8005b3c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d90f      	bls.n	8005a32 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00a      	beq.n	8005a32 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	69bb      	ldr	r3, [r7, #24]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a28:	461a      	mov	r2, r3
 8005a2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005a2e:	6093      	str	r3, [r2, #8]
 8005a30:	e07e      	b.n	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005a32:	683a      	ldr	r2, [r7, #0]
 8005a34:	4613      	mov	r3, r2
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	4413      	add	r3, r2
 8005a3a:	009b      	lsls	r3, r3, #2
 8005a3c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	4413      	add	r3, r2
 8005a44:	3304      	adds	r3, #4
 8005a46:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	69da      	ldr	r2, [r3, #28]
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	0159      	lsls	r1, r3, #5
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	440b      	add	r3, r1
 8005a54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a58:	691b      	ldr	r3, [r3, #16]
 8005a5a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005a5e:	1ad2      	subs	r2, r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d114      	bne.n	8005a94 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d109      	bne.n	8005a86 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6818      	ldr	r0, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005a7c:	461a      	mov	r2, r3
 8005a7e:	2101      	movs	r1, #1
 8005a80:	f003 fe58 	bl	8009734 <USB_EP0_OutStart>
 8005a84:	e006      	b.n	8005a94 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691a      	ldr	r2, [r3, #16]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	441a      	add	r2, r3
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	b2db      	uxtb	r3, r3
 8005a98:	4619      	mov	r1, r3
 8005a9a:	6878      	ldr	r0, [r7, #4]
 8005a9c:	f005 fd86 	bl	800b5ac <HAL_PCD_DataOutStageCallback>
 8005aa0:	e046      	b.n	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	4a26      	ldr	r2, [pc, #152]	; (8005b40 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d124      	bne.n	8005af4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005aaa:	693b      	ldr	r3, [r7, #16]
 8005aac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d00a      	beq.n	8005aca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	69bb      	ldr	r3, [r7, #24]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ac0:	461a      	mov	r2, r3
 8005ac2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005ac6:	6093      	str	r3, [r2, #8]
 8005ac8:	e032      	b.n	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005aca:	693b      	ldr	r3, [r7, #16]
 8005acc:	f003 0320 	and.w	r3, r3, #32
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	015a      	lsls	r2, r3, #5
 8005ad8:	69bb      	ldr	r3, [r7, #24]
 8005ada:	4413      	add	r3, r2
 8005adc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ae0:	461a      	mov	r2, r3
 8005ae2:	2320      	movs	r3, #32
 8005ae4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005ae6:	683b      	ldr	r3, [r7, #0]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	4619      	mov	r1, r3
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	f005 fd5d 	bl	800b5ac <HAL_PCD_DataOutStageCallback>
 8005af2:	e01d      	b.n	8005b30 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005af4:	683b      	ldr	r3, [r7, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d114      	bne.n	8005b24 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005afa:	6879      	ldr	r1, [r7, #4]
 8005afc:	683a      	ldr	r2, [r7, #0]
 8005afe:	4613      	mov	r3, r2
 8005b00:	00db      	lsls	r3, r3, #3
 8005b02:	4413      	add	r3, r2
 8005b04:	009b      	lsls	r3, r3, #2
 8005b06:	440b      	add	r3, r1
 8005b08:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d108      	bne.n	8005b24 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6818      	ldr	r0, [r3, #0]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005b1c:	461a      	mov	r2, r3
 8005b1e:	2100      	movs	r1, #0
 8005b20:	f003 fe08 	bl	8009734 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	b2db      	uxtb	r3, r3
 8005b28:	4619      	mov	r1, r3
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f005 fd3e 	bl	800b5ac <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3720      	adds	r7, #32
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	4f54300a 	.word	0x4f54300a
 8005b40:	4f54310a 	.word	0x4f54310a

08005b44 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b086      	sub	sp, #24
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	333c      	adds	r3, #60	; 0x3c
 8005b5c:	3304      	adds	r3, #4
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	015a      	lsls	r2, r3, #5
 8005b66:	693b      	ldr	r3, [r7, #16]
 8005b68:	4413      	add	r3, r2
 8005b6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	4a15      	ldr	r2, [pc, #84]	; (8005bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d90e      	bls.n	8005b98 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d009      	beq.n	8005b98 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	015a      	lsls	r2, r3, #5
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b90:	461a      	mov	r2, r3
 8005b92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005b96:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f005 fcf5 	bl	800b588 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	4a0a      	ldr	r2, [pc, #40]	; (8005bcc <PCD_EP_OutSetupPacket_int+0x88>)
 8005ba2:	4293      	cmp	r3, r2
 8005ba4:	d90c      	bls.n	8005bc0 <PCD_EP_OutSetupPacket_int+0x7c>
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	691b      	ldr	r3, [r3, #16]
 8005baa:	2b01      	cmp	r3, #1
 8005bac:	d108      	bne.n	8005bc0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6818      	ldr	r0, [r3, #0]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005bb8:	461a      	mov	r2, r3
 8005bba:	2101      	movs	r1, #1
 8005bbc:	f003 fdba 	bl	8009734 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005bc0:	2300      	movs	r3, #0
}
 8005bc2:	4618      	mov	r0, r3
 8005bc4:	3718      	adds	r7, #24
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	bd80      	pop	{r7, pc}
 8005bca:	bf00      	nop
 8005bcc:	4f54300a 	.word	0x4f54300a

08005bd0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
 8005bd8:	460b      	mov	r3, r1
 8005bda:	70fb      	strb	r3, [r7, #3]
 8005bdc:	4613      	mov	r3, r2
 8005bde:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005be8:	78fb      	ldrb	r3, [r7, #3]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d107      	bne.n	8005bfe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005bee:	883b      	ldrh	r3, [r7, #0]
 8005bf0:	0419      	lsls	r1, r3, #16
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	430a      	orrs	r2, r1
 8005bfa:	629a      	str	r2, [r3, #40]	; 0x28
 8005bfc:	e028      	b.n	8005c50 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c04:	0c1b      	lsrs	r3, r3, #16
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	4413      	add	r3, r2
 8005c0a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	73fb      	strb	r3, [r7, #15]
 8005c10:	e00d      	b.n	8005c2e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	7bfb      	ldrb	r3, [r7, #15]
 8005c18:	3340      	adds	r3, #64	; 0x40
 8005c1a:	009b      	lsls	r3, r3, #2
 8005c1c:	4413      	add	r3, r2
 8005c1e:	685b      	ldr	r3, [r3, #4]
 8005c20:	0c1b      	lsrs	r3, r3, #16
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4413      	add	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
 8005c2a:	3301      	adds	r3, #1
 8005c2c:	73fb      	strb	r3, [r7, #15]
 8005c2e:	7bfa      	ldrb	r2, [r7, #15]
 8005c30:	78fb      	ldrb	r3, [r7, #3]
 8005c32:	3b01      	subs	r3, #1
 8005c34:	429a      	cmp	r2, r3
 8005c36:	d3ec      	bcc.n	8005c12 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005c38:	883b      	ldrh	r3, [r7, #0]
 8005c3a:	0418      	lsls	r0, r3, #16
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6819      	ldr	r1, [r3, #0]
 8005c40:	78fb      	ldrb	r3, [r7, #3]
 8005c42:	3b01      	subs	r3, #1
 8005c44:	68ba      	ldr	r2, [r7, #8]
 8005c46:	4302      	orrs	r2, r0
 8005c48:	3340      	adds	r3, #64	; 0x40
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	440b      	add	r3, r1
 8005c4e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr

08005c5e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
 8005c66:	460b      	mov	r3, r1
 8005c68:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	887a      	ldrh	r2, [r7, #2]
 8005c70:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	370c      	adds	r7, #12
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7e:	4770      	bx	lr

08005c80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005c80:	b480      	push	{r7}
 8005c82:	b083      	sub	sp, #12
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	460b      	mov	r3, r1
 8005c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005c8c:	bf00      	nop
 8005c8e:	370c      	adds	r7, #12
 8005c90:	46bd      	mov	sp, r7
 8005c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c96:	4770      	bx	lr

08005c98 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b086      	sub	sp, #24
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d101      	bne.n	8005caa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005ca6:	2301      	movs	r3, #1
 8005ca8:	e267      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f003 0301 	and.w	r3, r3, #1
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d075      	beq.n	8005da2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cb6:	4b88      	ldr	r3, [pc, #544]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cb8:	689b      	ldr	r3, [r3, #8]
 8005cba:	f003 030c 	and.w	r3, r3, #12
 8005cbe:	2b04      	cmp	r3, #4
 8005cc0:	d00c      	beq.n	8005cdc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cc2:	4b85      	ldr	r3, [pc, #532]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cca:	2b08      	cmp	r3, #8
 8005ccc:	d112      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cce:	4b82      	ldr	r3, [pc, #520]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cd0:	685b      	ldr	r3, [r3, #4]
 8005cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cd6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cda:	d10b      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cdc:	4b7e      	ldr	r3, [pc, #504]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d05b      	beq.n	8005da0 <HAL_RCC_OscConfig+0x108>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d157      	bne.n	8005da0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e242      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	685b      	ldr	r3, [r3, #4]
 8005cf8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005cfc:	d106      	bne.n	8005d0c <HAL_RCC_OscConfig+0x74>
 8005cfe:	4b76      	ldr	r3, [pc, #472]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a75      	ldr	r2, [pc, #468]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d08:	6013      	str	r3, [r2, #0]
 8005d0a:	e01d      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d14:	d10c      	bne.n	8005d30 <HAL_RCC_OscConfig+0x98>
 8005d16:	4b70      	ldr	r3, [pc, #448]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a6f      	ldr	r2, [pc, #444]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	4b6d      	ldr	r3, [pc, #436]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	4a6c      	ldr	r2, [pc, #432]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d2c:	6013      	str	r3, [r2, #0]
 8005d2e:	e00b      	b.n	8005d48 <HAL_RCC_OscConfig+0xb0>
 8005d30:	4b69      	ldr	r3, [pc, #420]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a68      	ldr	r2, [pc, #416]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d36:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	4b66      	ldr	r3, [pc, #408]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a65      	ldr	r2, [pc, #404]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d46:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	685b      	ldr	r3, [r3, #4]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d013      	beq.n	8005d78 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d50:	f7fd fbaa 	bl	80034a8 <HAL_GetTick>
 8005d54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d56:	e008      	b.n	8005d6a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d58:	f7fd fba6 	bl	80034a8 <HAL_GetTick>
 8005d5c:	4602      	mov	r2, r0
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	1ad3      	subs	r3, r2, r3
 8005d62:	2b64      	cmp	r3, #100	; 0x64
 8005d64:	d901      	bls.n	8005d6a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d66:	2303      	movs	r3, #3
 8005d68:	e207      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6a:	4b5b      	ldr	r3, [pc, #364]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d0f0      	beq.n	8005d58 <HAL_RCC_OscConfig+0xc0>
 8005d76:	e014      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d78:	f7fd fb96 	bl	80034a8 <HAL_GetTick>
 8005d7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d7e:	e008      	b.n	8005d92 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d80:	f7fd fb92 	bl	80034a8 <HAL_GetTick>
 8005d84:	4602      	mov	r2, r0
 8005d86:	693b      	ldr	r3, [r7, #16]
 8005d88:	1ad3      	subs	r3, r2, r3
 8005d8a:	2b64      	cmp	r3, #100	; 0x64
 8005d8c:	d901      	bls.n	8005d92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005d8e:	2303      	movs	r3, #3
 8005d90:	e1f3      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d92:	4b51      	ldr	r3, [pc, #324]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d1f0      	bne.n	8005d80 <HAL_RCC_OscConfig+0xe8>
 8005d9e:	e000      	b.n	8005da2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005da0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0302 	and.w	r3, r3, #2
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d063      	beq.n	8005e76 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dae:	4b4a      	ldr	r3, [pc, #296]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	f003 030c 	and.w	r3, r3, #12
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00b      	beq.n	8005dd2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dba:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dbc:	689b      	ldr	r3, [r3, #8]
 8005dbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dc2:	2b08      	cmp	r3, #8
 8005dc4:	d11c      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dc6:	4b44      	ldr	r3, [pc, #272]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d116      	bne.n	8005e00 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dd2:	4b41      	ldr	r3, [pc, #260]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f003 0302 	and.w	r3, r3, #2
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d005      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d001      	beq.n	8005dea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005de6:	2301      	movs	r3, #1
 8005de8:	e1c7      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005dea:	4b3b      	ldr	r3, [pc, #236]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	00db      	lsls	r3, r3, #3
 8005df8:	4937      	ldr	r1, [pc, #220]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dfe:	e03a      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d020      	beq.n	8005e4a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e08:	4b34      	ldr	r3, [pc, #208]	; (8005edc <HAL_RCC_OscConfig+0x244>)
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e0e:	f7fd fb4b 	bl	80034a8 <HAL_GetTick>
 8005e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e14:	e008      	b.n	8005e28 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e16:	f7fd fb47 	bl	80034a8 <HAL_GetTick>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	693b      	ldr	r3, [r7, #16]
 8005e1e:	1ad3      	subs	r3, r2, r3
 8005e20:	2b02      	cmp	r3, #2
 8005e22:	d901      	bls.n	8005e28 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e24:	2303      	movs	r3, #3
 8005e26:	e1a8      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e28:	4b2b      	ldr	r3, [pc, #172]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d0f0      	beq.n	8005e16 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e34:	4b28      	ldr	r3, [pc, #160]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	691b      	ldr	r3, [r3, #16]
 8005e40:	00db      	lsls	r3, r3, #3
 8005e42:	4925      	ldr	r1, [pc, #148]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e44:	4313      	orrs	r3, r2
 8005e46:	600b      	str	r3, [r1, #0]
 8005e48:	e015      	b.n	8005e76 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e4a:	4b24      	ldr	r3, [pc, #144]	; (8005edc <HAL_RCC_OscConfig+0x244>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e50:	f7fd fb2a 	bl	80034a8 <HAL_GetTick>
 8005e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e56:	e008      	b.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e58:	f7fd fb26 	bl	80034a8 <HAL_GetTick>
 8005e5c:	4602      	mov	r2, r0
 8005e5e:	693b      	ldr	r3, [r7, #16]
 8005e60:	1ad3      	subs	r3, r2, r3
 8005e62:	2b02      	cmp	r3, #2
 8005e64:	d901      	bls.n	8005e6a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e66:	2303      	movs	r3, #3
 8005e68:	e187      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6a:	4b1b      	ldr	r3, [pc, #108]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	f003 0302 	and.w	r3, r3, #2
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f0      	bne.n	8005e58 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f003 0308 	and.w	r3, r3, #8
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d036      	beq.n	8005ef0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	695b      	ldr	r3, [r3, #20]
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d016      	beq.n	8005eb8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005e8a:	4b15      	ldr	r3, [pc, #84]	; (8005ee0 <HAL_RCC_OscConfig+0x248>)
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e90:	f7fd fb0a 	bl	80034a8 <HAL_GetTick>
 8005e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005e96:	e008      	b.n	8005eaa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005e98:	f7fd fb06 	bl	80034a8 <HAL_GetTick>
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	1ad3      	subs	r3, r2, r3
 8005ea2:	2b02      	cmp	r3, #2
 8005ea4:	d901      	bls.n	8005eaa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ea6:	2303      	movs	r3, #3
 8005ea8:	e167      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eaa:	4b0b      	ldr	r3, [pc, #44]	; (8005ed8 <HAL_RCC_OscConfig+0x240>)
 8005eac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005eae:	f003 0302 	and.w	r3, r3, #2
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d0f0      	beq.n	8005e98 <HAL_RCC_OscConfig+0x200>
 8005eb6:	e01b      	b.n	8005ef0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005eb8:	4b09      	ldr	r3, [pc, #36]	; (8005ee0 <HAL_RCC_OscConfig+0x248>)
 8005eba:	2200      	movs	r2, #0
 8005ebc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ebe:	f7fd faf3 	bl	80034a8 <HAL_GetTick>
 8005ec2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ec4:	e00e      	b.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ec6:	f7fd faef 	bl	80034a8 <HAL_GetTick>
 8005eca:	4602      	mov	r2, r0
 8005ecc:	693b      	ldr	r3, [r7, #16]
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	2b02      	cmp	r3, #2
 8005ed2:	d907      	bls.n	8005ee4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005ed4:	2303      	movs	r3, #3
 8005ed6:	e150      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	42470000 	.word	0x42470000
 8005ee0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ee4:	4b88      	ldr	r3, [pc, #544]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005ee6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ee8:	f003 0302 	and.w	r3, r3, #2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d1ea      	bne.n	8005ec6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f003 0304 	and.w	r3, r3, #4
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8097 	beq.w	800602c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efe:	2300      	movs	r3, #0
 8005f00:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f02:	4b81      	ldr	r3, [pc, #516]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d10f      	bne.n	8005f2e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0e:	2300      	movs	r3, #0
 8005f10:	60bb      	str	r3, [r7, #8]
 8005f12:	4b7d      	ldr	r3, [pc, #500]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f16:	4a7c      	ldr	r2, [pc, #496]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f1c:	6413      	str	r3, [r2, #64]	; 0x40
 8005f1e:	4b7a      	ldr	r3, [pc, #488]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f26:	60bb      	str	r3, [r7, #8]
 8005f28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f2a:	2301      	movs	r3, #1
 8005f2c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f2e:	4b77      	ldr	r3, [pc, #476]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d118      	bne.n	8005f6c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f3a:	4b74      	ldr	r3, [pc, #464]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a73      	ldr	r2, [pc, #460]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f46:	f7fd faaf 	bl	80034a8 <HAL_GetTick>
 8005f4a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f4c:	e008      	b.n	8005f60 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f4e:	f7fd faab 	bl	80034a8 <HAL_GetTick>
 8005f52:	4602      	mov	r2, r0
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	1ad3      	subs	r3, r2, r3
 8005f58:	2b02      	cmp	r3, #2
 8005f5a:	d901      	bls.n	8005f60 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005f5c:	2303      	movs	r3, #3
 8005f5e:	e10c      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f60:	4b6a      	ldr	r3, [pc, #424]	; (800610c <HAL_RCC_OscConfig+0x474>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d0f0      	beq.n	8005f4e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	689b      	ldr	r3, [r3, #8]
 8005f70:	2b01      	cmp	r3, #1
 8005f72:	d106      	bne.n	8005f82 <HAL_RCC_OscConfig+0x2ea>
 8005f74:	4b64      	ldr	r3, [pc, #400]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f78:	4a63      	ldr	r2, [pc, #396]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f7a:	f043 0301 	orr.w	r3, r3, #1
 8005f7e:	6713      	str	r3, [r2, #112]	; 0x70
 8005f80:	e01c      	b.n	8005fbc <HAL_RCC_OscConfig+0x324>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	689b      	ldr	r3, [r3, #8]
 8005f86:	2b05      	cmp	r3, #5
 8005f88:	d10c      	bne.n	8005fa4 <HAL_RCC_OscConfig+0x30c>
 8005f8a:	4b5f      	ldr	r3, [pc, #380]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f8e:	4a5e      	ldr	r2, [pc, #376]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f90:	f043 0304 	orr.w	r3, r3, #4
 8005f94:	6713      	str	r3, [r2, #112]	; 0x70
 8005f96:	4b5c      	ldr	r3, [pc, #368]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f9a:	4a5b      	ldr	r2, [pc, #364]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005f9c:	f043 0301 	orr.w	r3, r3, #1
 8005fa0:	6713      	str	r3, [r2, #112]	; 0x70
 8005fa2:	e00b      	b.n	8005fbc <HAL_RCC_OscConfig+0x324>
 8005fa4:	4b58      	ldr	r3, [pc, #352]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fa6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fa8:	4a57      	ldr	r2, [pc, #348]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005faa:	f023 0301 	bic.w	r3, r3, #1
 8005fae:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb0:	4b55      	ldr	r3, [pc, #340]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb4:	4a54      	ldr	r2, [pc, #336]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fb6:	f023 0304 	bic.w	r3, r3, #4
 8005fba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d015      	beq.n	8005ff0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc4:	f7fd fa70 	bl	80034a8 <HAL_GetTick>
 8005fc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fca:	e00a      	b.n	8005fe2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fcc:	f7fd fa6c 	bl	80034a8 <HAL_GetTick>
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	693b      	ldr	r3, [r7, #16]
 8005fd4:	1ad3      	subs	r3, r2, r3
 8005fd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d901      	bls.n	8005fe2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005fde:	2303      	movs	r3, #3
 8005fe0:	e0cb      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe2:	4b49      	ldr	r3, [pc, #292]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8005fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fe6:	f003 0302 	and.w	r3, r3, #2
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0ee      	beq.n	8005fcc <HAL_RCC_OscConfig+0x334>
 8005fee:	e014      	b.n	800601a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ff0:	f7fd fa5a 	bl	80034a8 <HAL_GetTick>
 8005ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ff6:	e00a      	b.n	800600e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ff8:	f7fd fa56 	bl	80034a8 <HAL_GetTick>
 8005ffc:	4602      	mov	r2, r0
 8005ffe:	693b      	ldr	r3, [r7, #16]
 8006000:	1ad3      	subs	r3, r2, r3
 8006002:	f241 3288 	movw	r2, #5000	; 0x1388
 8006006:	4293      	cmp	r3, r2
 8006008:	d901      	bls.n	800600e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800600a:	2303      	movs	r3, #3
 800600c:	e0b5      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800600e:	4b3e      	ldr	r3, [pc, #248]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006012:	f003 0302 	and.w	r3, r3, #2
 8006016:	2b00      	cmp	r3, #0
 8006018:	d1ee      	bne.n	8005ff8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800601a:	7dfb      	ldrb	r3, [r7, #23]
 800601c:	2b01      	cmp	r3, #1
 800601e:	d105      	bne.n	800602c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006020:	4b39      	ldr	r3, [pc, #228]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	4a38      	ldr	r2, [pc, #224]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006026:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800602a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	699b      	ldr	r3, [r3, #24]
 8006030:	2b00      	cmp	r3, #0
 8006032:	f000 80a1 	beq.w	8006178 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006036:	4b34      	ldr	r3, [pc, #208]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 030c 	and.w	r3, r3, #12
 800603e:	2b08      	cmp	r3, #8
 8006040:	d05c      	beq.n	80060fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	699b      	ldr	r3, [r3, #24]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d141      	bne.n	80060ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800604a:	4b31      	ldr	r3, [pc, #196]	; (8006110 <HAL_RCC_OscConfig+0x478>)
 800604c:	2200      	movs	r2, #0
 800604e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006050:	f7fd fa2a 	bl	80034a8 <HAL_GetTick>
 8006054:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006056:	e008      	b.n	800606a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006058:	f7fd fa26 	bl	80034a8 <HAL_GetTick>
 800605c:	4602      	mov	r2, r0
 800605e:	693b      	ldr	r3, [r7, #16]
 8006060:	1ad3      	subs	r3, r2, r3
 8006062:	2b02      	cmp	r3, #2
 8006064:	d901      	bls.n	800606a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006066:	2303      	movs	r3, #3
 8006068:	e087      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800606a:	4b27      	ldr	r3, [pc, #156]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006072:	2b00      	cmp	r3, #0
 8006074:	d1f0      	bne.n	8006058 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	69da      	ldr	r2, [r3, #28]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	431a      	orrs	r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006084:	019b      	lsls	r3, r3, #6
 8006086:	431a      	orrs	r2, r3
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800608c:	085b      	lsrs	r3, r3, #1
 800608e:	3b01      	subs	r3, #1
 8006090:	041b      	lsls	r3, r3, #16
 8006092:	431a      	orrs	r2, r3
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006098:	061b      	lsls	r3, r3, #24
 800609a:	491b      	ldr	r1, [pc, #108]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 800609c:	4313      	orrs	r3, r2
 800609e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060a0:	4b1b      	ldr	r3, [pc, #108]	; (8006110 <HAL_RCC_OscConfig+0x478>)
 80060a2:	2201      	movs	r2, #1
 80060a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060a6:	f7fd f9ff 	bl	80034a8 <HAL_GetTick>
 80060aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ac:	e008      	b.n	80060c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060ae:	f7fd f9fb 	bl	80034a8 <HAL_GetTick>
 80060b2:	4602      	mov	r2, r0
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	1ad3      	subs	r3, r2, r3
 80060b8:	2b02      	cmp	r3, #2
 80060ba:	d901      	bls.n	80060c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80060bc:	2303      	movs	r3, #3
 80060be:	e05c      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060c0:	4b11      	ldr	r3, [pc, #68]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d0f0      	beq.n	80060ae <HAL_RCC_OscConfig+0x416>
 80060cc:	e054      	b.n	8006178 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ce:	4b10      	ldr	r3, [pc, #64]	; (8006110 <HAL_RCC_OscConfig+0x478>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060d4:	f7fd f9e8 	bl	80034a8 <HAL_GetTick>
 80060d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060da:	e008      	b.n	80060ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060dc:	f7fd f9e4 	bl	80034a8 <HAL_GetTick>
 80060e0:	4602      	mov	r2, r0
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	1ad3      	subs	r3, r2, r3
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d901      	bls.n	80060ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80060ea:	2303      	movs	r3, #3
 80060ec:	e045      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060ee:	4b06      	ldr	r3, [pc, #24]	; (8006108 <HAL_RCC_OscConfig+0x470>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d1f0      	bne.n	80060dc <HAL_RCC_OscConfig+0x444>
 80060fa:	e03d      	b.n	8006178 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b01      	cmp	r3, #1
 8006102:	d107      	bne.n	8006114 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006104:	2301      	movs	r3, #1
 8006106:	e038      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
 8006108:	40023800 	.word	0x40023800
 800610c:	40007000 	.word	0x40007000
 8006110:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006114:	4b1b      	ldr	r3, [pc, #108]	; (8006184 <HAL_RCC_OscConfig+0x4ec>)
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d028      	beq.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612c:	429a      	cmp	r2, r3
 800612e:	d121      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800613a:	429a      	cmp	r2, r3
 800613c:	d11a      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800613e:	68fa      	ldr	r2, [r7, #12]
 8006140:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006144:	4013      	ands	r3, r2
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800614a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800614c:	4293      	cmp	r3, r2
 800614e:	d111      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800615a:	085b      	lsrs	r3, r3, #1
 800615c:	3b01      	subs	r3, #1
 800615e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006160:	429a      	cmp	r2, r3
 8006162:	d107      	bne.n	8006174 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800616e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006170:	429a      	cmp	r2, r3
 8006172:	d001      	beq.n	8006178 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006174:	2301      	movs	r3, #1
 8006176:	e000      	b.n	800617a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006178:	2300      	movs	r3, #0
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	40023800 	.word	0x40023800

08006188 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006188:	b580      	push	{r7, lr}
 800618a:	b084      	sub	sp, #16
 800618c:	af00      	add	r7, sp, #0
 800618e:	6078      	str	r0, [r7, #4]
 8006190:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d101      	bne.n	800619c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006198:	2301      	movs	r3, #1
 800619a:	e0cc      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800619c:	4b68      	ldr	r3, [pc, #416]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f003 0307 	and.w	r3, r3, #7
 80061a4:	683a      	ldr	r2, [r7, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d90c      	bls.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061aa:	4b65      	ldr	r3, [pc, #404]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061ac:	683a      	ldr	r2, [r7, #0]
 80061ae:	b2d2      	uxtb	r2, r2
 80061b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061b2:	4b63      	ldr	r3, [pc, #396]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f003 0307 	and.w	r3, r3, #7
 80061ba:	683a      	ldr	r2, [r7, #0]
 80061bc:	429a      	cmp	r2, r3
 80061be:	d001      	beq.n	80061c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061c0:	2301      	movs	r3, #1
 80061c2:	e0b8      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f003 0302 	and.w	r3, r3, #2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d020      	beq.n	8006212 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f003 0304 	and.w	r3, r3, #4
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d005      	beq.n	80061e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061dc:	4b59      	ldr	r3, [pc, #356]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	4a58      	ldr	r2, [pc, #352]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0308 	and.w	r3, r3, #8
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80061f4:	4b53      	ldr	r3, [pc, #332]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a52      	ldr	r2, [pc, #328]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80061fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006200:	4b50      	ldr	r3, [pc, #320]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006202:	689b      	ldr	r3, [r3, #8]
 8006204:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	689b      	ldr	r3, [r3, #8]
 800620c:	494d      	ldr	r1, [pc, #308]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	4313      	orrs	r3, r2
 8006210:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 0301 	and.w	r3, r3, #1
 800621a:	2b00      	cmp	r3, #0
 800621c:	d044      	beq.n	80062a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	2b01      	cmp	r3, #1
 8006224:	d107      	bne.n	8006236 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006226:	4b47      	ldr	r3, [pc, #284]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800622e:	2b00      	cmp	r3, #0
 8006230:	d119      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006232:	2301      	movs	r3, #1
 8006234:	e07f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b02      	cmp	r3, #2
 800623c:	d003      	beq.n	8006246 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006242:	2b03      	cmp	r3, #3
 8006244:	d107      	bne.n	8006256 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006246:	4b3f      	ldr	r3, [pc, #252]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800624e:	2b00      	cmp	r3, #0
 8006250:	d109      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006252:	2301      	movs	r3, #1
 8006254:	e06f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006256:	4b3b      	ldr	r3, [pc, #236]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b00      	cmp	r3, #0
 8006260:	d101      	bne.n	8006266 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006262:	2301      	movs	r3, #1
 8006264:	e067      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006266:	4b37      	ldr	r3, [pc, #220]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006268:	689b      	ldr	r3, [r3, #8]
 800626a:	f023 0203 	bic.w	r2, r3, #3
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	4934      	ldr	r1, [pc, #208]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006274:	4313      	orrs	r3, r2
 8006276:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006278:	f7fd f916 	bl	80034a8 <HAL_GetTick>
 800627c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627e:	e00a      	b.n	8006296 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006280:	f7fd f912 	bl	80034a8 <HAL_GetTick>
 8006284:	4602      	mov	r2, r0
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	1ad3      	subs	r3, r2, r3
 800628a:	f241 3288 	movw	r2, #5000	; 0x1388
 800628e:	4293      	cmp	r3, r2
 8006290:	d901      	bls.n	8006296 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006292:	2303      	movs	r3, #3
 8006294:	e04f      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	4b2b      	ldr	r3, [pc, #172]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006298:	689b      	ldr	r3, [r3, #8]
 800629a:	f003 020c 	and.w	r2, r3, #12
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	009b      	lsls	r3, r3, #2
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d1eb      	bne.n	8006280 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062a8:	4b25      	ldr	r3, [pc, #148]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f003 0307 	and.w	r3, r3, #7
 80062b0:	683a      	ldr	r2, [r7, #0]
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d20c      	bcs.n	80062d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b6:	4b22      	ldr	r3, [pc, #136]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062b8:	683a      	ldr	r2, [r7, #0]
 80062ba:	b2d2      	uxtb	r2, r2
 80062bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062be:	4b20      	ldr	r3, [pc, #128]	; (8006340 <HAL_RCC_ClockConfig+0x1b8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f003 0307 	and.w	r3, r3, #7
 80062c6:	683a      	ldr	r2, [r7, #0]
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d001      	beq.n	80062d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062cc:	2301      	movs	r3, #1
 80062ce:	e032      	b.n	8006336 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f003 0304 	and.w	r3, r3, #4
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d008      	beq.n	80062ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062dc:	4b19      	ldr	r3, [pc, #100]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062de:	689b      	ldr	r3, [r3, #8]
 80062e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	4916      	ldr	r1, [pc, #88]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062ea:	4313      	orrs	r3, r2
 80062ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f003 0308 	and.w	r3, r3, #8
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d009      	beq.n	800630e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	00db      	lsls	r3, r3, #3
 8006308:	490e      	ldr	r1, [pc, #56]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 800630a:	4313      	orrs	r3, r2
 800630c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800630e:	f000 f821 	bl	8006354 <HAL_RCC_GetSysClockFreq>
 8006312:	4602      	mov	r2, r0
 8006314:	4b0b      	ldr	r3, [pc, #44]	; (8006344 <HAL_RCC_ClockConfig+0x1bc>)
 8006316:	689b      	ldr	r3, [r3, #8]
 8006318:	091b      	lsrs	r3, r3, #4
 800631a:	f003 030f 	and.w	r3, r3, #15
 800631e:	490a      	ldr	r1, [pc, #40]	; (8006348 <HAL_RCC_ClockConfig+0x1c0>)
 8006320:	5ccb      	ldrb	r3, [r1, r3]
 8006322:	fa22 f303 	lsr.w	r3, r2, r3
 8006326:	4a09      	ldr	r2, [pc, #36]	; (800634c <HAL_RCC_ClockConfig+0x1c4>)
 8006328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800632a:	4b09      	ldr	r3, [pc, #36]	; (8006350 <HAL_RCC_ClockConfig+0x1c8>)
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	4618      	mov	r0, r3
 8006330:	f7fd f876 	bl	8003420 <HAL_InitTick>

  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
 800633e:	bf00      	nop
 8006340:	40023c00 	.word	0x40023c00
 8006344:	40023800 	.word	0x40023800
 8006348:	0800d4ec 	.word	0x0800d4ec
 800634c:	2000003c 	.word	0x2000003c
 8006350:	20000040 	.word	0x20000040

08006354 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006358:	b094      	sub	sp, #80	; 0x50
 800635a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800635c:	2300      	movs	r3, #0
 800635e:	647b      	str	r3, [r7, #68]	; 0x44
 8006360:	2300      	movs	r3, #0
 8006362:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006364:	2300      	movs	r3, #0
 8006366:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006368:	2300      	movs	r3, #0
 800636a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800636c:	4b79      	ldr	r3, [pc, #484]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f003 030c 	and.w	r3, r3, #12
 8006374:	2b08      	cmp	r3, #8
 8006376:	d00d      	beq.n	8006394 <HAL_RCC_GetSysClockFreq+0x40>
 8006378:	2b08      	cmp	r3, #8
 800637a:	f200 80e1 	bhi.w	8006540 <HAL_RCC_GetSysClockFreq+0x1ec>
 800637e:	2b00      	cmp	r3, #0
 8006380:	d002      	beq.n	8006388 <HAL_RCC_GetSysClockFreq+0x34>
 8006382:	2b04      	cmp	r3, #4
 8006384:	d003      	beq.n	800638e <HAL_RCC_GetSysClockFreq+0x3a>
 8006386:	e0db      	b.n	8006540 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006388:	4b73      	ldr	r3, [pc, #460]	; (8006558 <HAL_RCC_GetSysClockFreq+0x204>)
 800638a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800638c:	e0db      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800638e:	4b73      	ldr	r3, [pc, #460]	; (800655c <HAL_RCC_GetSysClockFreq+0x208>)
 8006390:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006392:	e0d8      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006394:	4b6f      	ldr	r3, [pc, #444]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 8006396:	685b      	ldr	r3, [r3, #4]
 8006398:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800639c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800639e:	4b6d      	ldr	r3, [pc, #436]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 80063a0:	685b      	ldr	r3, [r3, #4]
 80063a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d063      	beq.n	8006472 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063aa:	4b6a      	ldr	r3, [pc, #424]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	099b      	lsrs	r3, r3, #6
 80063b0:	2200      	movs	r2, #0
 80063b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80063b4:	63fa      	str	r2, [r7, #60]	; 0x3c
 80063b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30
 80063be:	2300      	movs	r3, #0
 80063c0:	637b      	str	r3, [r7, #52]	; 0x34
 80063c2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80063c6:	4622      	mov	r2, r4
 80063c8:	462b      	mov	r3, r5
 80063ca:	f04f 0000 	mov.w	r0, #0
 80063ce:	f04f 0100 	mov.w	r1, #0
 80063d2:	0159      	lsls	r1, r3, #5
 80063d4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80063d8:	0150      	lsls	r0, r2, #5
 80063da:	4602      	mov	r2, r0
 80063dc:	460b      	mov	r3, r1
 80063de:	4621      	mov	r1, r4
 80063e0:	1a51      	subs	r1, r2, r1
 80063e2:	6139      	str	r1, [r7, #16]
 80063e4:	4629      	mov	r1, r5
 80063e6:	eb63 0301 	sbc.w	r3, r3, r1
 80063ea:	617b      	str	r3, [r7, #20]
 80063ec:	f04f 0200 	mov.w	r2, #0
 80063f0:	f04f 0300 	mov.w	r3, #0
 80063f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063f8:	4659      	mov	r1, fp
 80063fa:	018b      	lsls	r3, r1, #6
 80063fc:	4651      	mov	r1, sl
 80063fe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006402:	4651      	mov	r1, sl
 8006404:	018a      	lsls	r2, r1, #6
 8006406:	4651      	mov	r1, sl
 8006408:	ebb2 0801 	subs.w	r8, r2, r1
 800640c:	4659      	mov	r1, fp
 800640e:	eb63 0901 	sbc.w	r9, r3, r1
 8006412:	f04f 0200 	mov.w	r2, #0
 8006416:	f04f 0300 	mov.w	r3, #0
 800641a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800641e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006422:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006426:	4690      	mov	r8, r2
 8006428:	4699      	mov	r9, r3
 800642a:	4623      	mov	r3, r4
 800642c:	eb18 0303 	adds.w	r3, r8, r3
 8006430:	60bb      	str	r3, [r7, #8]
 8006432:	462b      	mov	r3, r5
 8006434:	eb49 0303 	adc.w	r3, r9, r3
 8006438:	60fb      	str	r3, [r7, #12]
 800643a:	f04f 0200 	mov.w	r2, #0
 800643e:	f04f 0300 	mov.w	r3, #0
 8006442:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006446:	4629      	mov	r1, r5
 8006448:	024b      	lsls	r3, r1, #9
 800644a:	4621      	mov	r1, r4
 800644c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006450:	4621      	mov	r1, r4
 8006452:	024a      	lsls	r2, r1, #9
 8006454:	4610      	mov	r0, r2
 8006456:	4619      	mov	r1, r3
 8006458:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800645a:	2200      	movs	r2, #0
 800645c:	62bb      	str	r3, [r7, #40]	; 0x28
 800645e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006460:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006464:	f7f9 ff24 	bl	80002b0 <__aeabi_uldivmod>
 8006468:	4602      	mov	r2, r0
 800646a:	460b      	mov	r3, r1
 800646c:	4613      	mov	r3, r2
 800646e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006470:	e058      	b.n	8006524 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006472:	4b38      	ldr	r3, [pc, #224]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	099b      	lsrs	r3, r3, #6
 8006478:	2200      	movs	r2, #0
 800647a:	4618      	mov	r0, r3
 800647c:	4611      	mov	r1, r2
 800647e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006482:	623b      	str	r3, [r7, #32]
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	; 0x24
 8006488:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800648c:	4642      	mov	r2, r8
 800648e:	464b      	mov	r3, r9
 8006490:	f04f 0000 	mov.w	r0, #0
 8006494:	f04f 0100 	mov.w	r1, #0
 8006498:	0159      	lsls	r1, r3, #5
 800649a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800649e:	0150      	lsls	r0, r2, #5
 80064a0:	4602      	mov	r2, r0
 80064a2:	460b      	mov	r3, r1
 80064a4:	4641      	mov	r1, r8
 80064a6:	ebb2 0a01 	subs.w	sl, r2, r1
 80064aa:	4649      	mov	r1, r9
 80064ac:	eb63 0b01 	sbc.w	fp, r3, r1
 80064b0:	f04f 0200 	mov.w	r2, #0
 80064b4:	f04f 0300 	mov.w	r3, #0
 80064b8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80064bc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80064c0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80064c4:	ebb2 040a 	subs.w	r4, r2, sl
 80064c8:	eb63 050b 	sbc.w	r5, r3, fp
 80064cc:	f04f 0200 	mov.w	r2, #0
 80064d0:	f04f 0300 	mov.w	r3, #0
 80064d4:	00eb      	lsls	r3, r5, #3
 80064d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80064da:	00e2      	lsls	r2, r4, #3
 80064dc:	4614      	mov	r4, r2
 80064de:	461d      	mov	r5, r3
 80064e0:	4643      	mov	r3, r8
 80064e2:	18e3      	adds	r3, r4, r3
 80064e4:	603b      	str	r3, [r7, #0]
 80064e6:	464b      	mov	r3, r9
 80064e8:	eb45 0303 	adc.w	r3, r5, r3
 80064ec:	607b      	str	r3, [r7, #4]
 80064ee:	f04f 0200 	mov.w	r2, #0
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80064fa:	4629      	mov	r1, r5
 80064fc:	028b      	lsls	r3, r1, #10
 80064fe:	4621      	mov	r1, r4
 8006500:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006504:	4621      	mov	r1, r4
 8006506:	028a      	lsls	r2, r1, #10
 8006508:	4610      	mov	r0, r2
 800650a:	4619      	mov	r1, r3
 800650c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800650e:	2200      	movs	r2, #0
 8006510:	61bb      	str	r3, [r7, #24]
 8006512:	61fa      	str	r2, [r7, #28]
 8006514:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006518:	f7f9 feca 	bl	80002b0 <__aeabi_uldivmod>
 800651c:	4602      	mov	r2, r0
 800651e:	460b      	mov	r3, r1
 8006520:	4613      	mov	r3, r2
 8006522:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006524:	4b0b      	ldr	r3, [pc, #44]	; (8006554 <HAL_RCC_GetSysClockFreq+0x200>)
 8006526:	685b      	ldr	r3, [r3, #4]
 8006528:	0c1b      	lsrs	r3, r3, #16
 800652a:	f003 0303 	and.w	r3, r3, #3
 800652e:	3301      	adds	r3, #1
 8006530:	005b      	lsls	r3, r3, #1
 8006532:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8006534:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006536:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006538:	fbb2 f3f3 	udiv	r3, r2, r3
 800653c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800653e:	e002      	b.n	8006546 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006540:	4b05      	ldr	r3, [pc, #20]	; (8006558 <HAL_RCC_GetSysClockFreq+0x204>)
 8006542:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006546:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8006548:	4618      	mov	r0, r3
 800654a:	3750      	adds	r7, #80	; 0x50
 800654c:	46bd      	mov	sp, r7
 800654e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006552:	bf00      	nop
 8006554:	40023800 	.word	0x40023800
 8006558:	00f42400 	.word	0x00f42400
 800655c:	007a1200 	.word	0x007a1200

08006560 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_RCC_GetHCLKFreq+0x14>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	2000003c 	.word	0x2000003c

08006578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800657c:	f7ff fff0 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 8006580:	4602      	mov	r2, r0
 8006582:	4b05      	ldr	r3, [pc, #20]	; (8006598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006584:	689b      	ldr	r3, [r3, #8]
 8006586:	0a9b      	lsrs	r3, r3, #10
 8006588:	f003 0307 	and.w	r3, r3, #7
 800658c:	4903      	ldr	r1, [pc, #12]	; (800659c <HAL_RCC_GetPCLK1Freq+0x24>)
 800658e:	5ccb      	ldrb	r3, [r1, r3]
 8006590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006594:	4618      	mov	r0, r3
 8006596:	bd80      	pop	{r7, pc}
 8006598:	40023800 	.word	0x40023800
 800659c:	0800d4fc 	.word	0x0800d4fc

080065a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80065a4:	f7ff ffdc 	bl	8006560 <HAL_RCC_GetHCLKFreq>
 80065a8:	4602      	mov	r2, r0
 80065aa:	4b05      	ldr	r3, [pc, #20]	; (80065c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80065ac:	689b      	ldr	r3, [r3, #8]
 80065ae:	0b5b      	lsrs	r3, r3, #13
 80065b0:	f003 0307 	and.w	r3, r3, #7
 80065b4:	4903      	ldr	r1, [pc, #12]	; (80065c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80065b6:	5ccb      	ldrb	r3, [r1, r3]
 80065b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80065bc:	4618      	mov	r0, r3
 80065be:	bd80      	pop	{r7, pc}
 80065c0:	40023800 	.word	0x40023800
 80065c4:	0800d4fc 	.word	0x0800d4fc

080065c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b086      	sub	sp, #24
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80065d0:	2300      	movs	r3, #0
 80065d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80065d4:	2300      	movs	r3, #0
 80065d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d105      	bne.n	80065f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d038      	beq.n	8006662 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80065f0:	4b68      	ldr	r3, [pc, #416]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80065f2:	2200      	movs	r2, #0
 80065f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80065f6:	f7fc ff57 	bl	80034a8 <HAL_GetTick>
 80065fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80065fc:	e008      	b.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80065fe:	f7fc ff53 	bl	80034a8 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	2b02      	cmp	r3, #2
 800660a:	d901      	bls.n	8006610 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800660c:	2303      	movs	r3, #3
 800660e:	e0bd      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006610:	4b61      	ldr	r3, [pc, #388]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f0      	bne.n	80065fe <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685a      	ldr	r2, [r3, #4]
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	689b      	ldr	r3, [r3, #8]
 8006624:	019b      	lsls	r3, r3, #6
 8006626:	431a      	orrs	r2, r3
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	071b      	lsls	r3, r3, #28
 800662e:	495a      	ldr	r1, [pc, #360]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006630:	4313      	orrs	r3, r2
 8006632:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006636:	4b57      	ldr	r3, [pc, #348]	; (8006794 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8006638:	2201      	movs	r2, #1
 800663a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800663c:	f7fc ff34 	bl	80034a8 <HAL_GetTick>
 8006640:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006642:	e008      	b.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006644:	f7fc ff30 	bl	80034a8 <HAL_GetTick>
 8006648:	4602      	mov	r2, r0
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	1ad3      	subs	r3, r2, r3
 800664e:	2b02      	cmp	r3, #2
 8006650:	d901      	bls.n	8006656 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006652:	2303      	movs	r3, #3
 8006654:	e09a      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006656:	4b50      	ldr	r3, [pc, #320]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0f0      	beq.n	8006644 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 8083 	beq.w	8006776 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006670:	2300      	movs	r3, #0
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	4b48      	ldr	r3, [pc, #288]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006678:	4a47      	ldr	r2, [pc, #284]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800667a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800667e:	6413      	str	r3, [r2, #64]	; 0x40
 8006680:	4b45      	ldr	r3, [pc, #276]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006688:	60fb      	str	r3, [r7, #12]
 800668a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800668c:	4b43      	ldr	r3, [pc, #268]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	4a42      	ldr	r2, [pc, #264]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8006692:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006696:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006698:	f7fc ff06 	bl	80034a8 <HAL_GetTick>
 800669c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800669e:	e008      	b.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80066a0:	f7fc ff02 	bl	80034a8 <HAL_GetTick>
 80066a4:	4602      	mov	r2, r0
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	1ad3      	subs	r3, r2, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d901      	bls.n	80066b2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80066ae:	2303      	movs	r3, #3
 80066b0:	e06c      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80066b2:	4b3a      	ldr	r3, [pc, #232]	; (800679c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d0f0      	beq.n	80066a0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80066be:	4b36      	ldr	r3, [pc, #216]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066c6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d02f      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066d6:	693a      	ldr	r2, [r7, #16]
 80066d8:	429a      	cmp	r2, r3
 80066da:	d028      	beq.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80066dc:	4b2e      	ldr	r3, [pc, #184]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066e4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80066e6:	4b2e      	ldr	r3, [pc, #184]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066e8:	2201      	movs	r2, #1
 80066ea:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80066ec:	4b2c      	ldr	r3, [pc, #176]	; (80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80066ee:	2200      	movs	r2, #0
 80066f0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80066f2:	4a29      	ldr	r2, [pc, #164]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066f4:	693b      	ldr	r3, [r7, #16]
 80066f6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80066f8:	4b27      	ldr	r3, [pc, #156]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80066fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80066fc:	f003 0301 	and.w	r3, r3, #1
 8006700:	2b01      	cmp	r3, #1
 8006702:	d114      	bne.n	800672e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006704:	f7fc fed0 	bl	80034a8 <HAL_GetTick>
 8006708:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800670a:	e00a      	b.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800670c:	f7fc fecc 	bl	80034a8 <HAL_GetTick>
 8006710:	4602      	mov	r2, r0
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	1ad3      	subs	r3, r2, r3
 8006716:	f241 3288 	movw	r2, #5000	; 0x1388
 800671a:	4293      	cmp	r3, r2
 800671c:	d901      	bls.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e034      	b.n	800678c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006722:	4b1d      	ldr	r3, [pc, #116]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006726:	f003 0302 	and.w	r3, r3, #2
 800672a:	2b00      	cmp	r3, #0
 800672c:	d0ee      	beq.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006736:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800673a:	d10d      	bne.n	8006758 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800673c:	4b16      	ldr	r3, [pc, #88]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800673e:	689b      	ldr	r3, [r3, #8]
 8006740:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	691b      	ldr	r3, [r3, #16]
 8006748:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800674c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006750:	4911      	ldr	r1, [pc, #68]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006752:	4313      	orrs	r3, r2
 8006754:	608b      	str	r3, [r1, #8]
 8006756:	e005      	b.n	8006764 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8006758:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675a:	689b      	ldr	r3, [r3, #8]
 800675c:	4a0e      	ldr	r2, [pc, #56]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800675e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006762:	6093      	str	r3, [r2, #8]
 8006764:	4b0c      	ldr	r3, [pc, #48]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006766:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006770:	4909      	ldr	r1, [pc, #36]	; (8006798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8006772:	4313      	orrs	r3, r2
 8006774:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f003 0308 	and.w	r3, r3, #8
 800677e:	2b00      	cmp	r3, #0
 8006780:	d003      	beq.n	800678a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	7d1a      	ldrb	r2, [r3, #20]
 8006786:	4b07      	ldr	r3, [pc, #28]	; (80067a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8006788:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800678a:	2300      	movs	r3, #0
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	42470068 	.word	0x42470068
 8006798:	40023800 	.word	0x40023800
 800679c:	40007000 	.word	0x40007000
 80067a0:	42470e40 	.word	0x42470e40
 80067a4:	424711e0 	.word	0x424711e0

080067a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b087      	sub	sp, #28
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80067b0:	2300      	movs	r3, #0
 80067b2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80067b4:	2300      	movs	r3, #0
 80067b6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80067bc:	2300      	movs	r3, #0
 80067be:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d140      	bne.n	8006848 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80067c6:	4b24      	ldr	r3, [pc, #144]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067ce:	60fb      	str	r3, [r7, #12]
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d005      	beq.n	80067e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d131      	bne.n	8006840 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80067dc:	4b1f      	ldr	r3, [pc, #124]	; (800685c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80067de:	617b      	str	r3, [r7, #20]
          break;
 80067e0:	e031      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80067e2:	4b1d      	ldr	r3, [pc, #116]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067e4:	685b      	ldr	r3, [r3, #4]
 80067e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ee:	d109      	bne.n	8006804 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80067f0:	4b19      	ldr	r3, [pc, #100]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80067f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067f6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80067fa:	4a19      	ldr	r2, [pc, #100]	; (8006860 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	613b      	str	r3, [r7, #16]
 8006802:	e008      	b.n	8006816 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8006804:	4b14      	ldr	r3, [pc, #80]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006806:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800680a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800680e:	4a15      	ldr	r2, [pc, #84]	; (8006864 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8006810:	fbb2 f3f3 	udiv	r3, r2, r3
 8006814:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006816:	4b10      	ldr	r3, [pc, #64]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800681c:	099b      	lsrs	r3, r3, #6
 800681e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006822:	693b      	ldr	r3, [r7, #16]
 8006824:	fb02 f303 	mul.w	r3, r2, r3
 8006828:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800682a:	4b0b      	ldr	r3, [pc, #44]	; (8006858 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800682c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006830:	0f1b      	lsrs	r3, r3, #28
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	68ba      	ldr	r2, [r7, #8]
 8006838:	fbb2 f3f3 	udiv	r3, r2, r3
 800683c:	617b      	str	r3, [r7, #20]
          break;
 800683e:	e002      	b.n	8006846 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006840:	2300      	movs	r3, #0
 8006842:	617b      	str	r3, [r7, #20]
          break;
 8006844:	bf00      	nop
        }
      }
      break;
 8006846:	bf00      	nop
    }
  }
  return frequency;
 8006848:	697b      	ldr	r3, [r7, #20]
}
 800684a:	4618      	mov	r0, r3
 800684c:	371c      	adds	r7, #28
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40023800 	.word	0x40023800
 800685c:	00bb8000 	.word	0x00bb8000
 8006860:	007a1200 	.word	0x007a1200
 8006864:	00f42400 	.word	0x00f42400

08006868 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	b082      	sub	sp, #8
 800686c:	af00      	add	r7, sp, #0
 800686e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d101      	bne.n	800687a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	e07b      	b.n	8006972 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800687e:	2b00      	cmp	r3, #0
 8006880:	d108      	bne.n	8006894 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800688a:	d009      	beq.n	80068a0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	61da      	str	r2, [r3, #28]
 8006892:	e005      	b.n	80068a0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2200      	movs	r2, #0
 800689e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2200      	movs	r2, #0
 80068a4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d106      	bne.n	80068c0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	2200      	movs	r2, #0
 80068b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f7fc fb30 	bl	8002f20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	2202      	movs	r2, #2
 80068c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068d6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	689b      	ldr	r3, [r3, #8]
 80068e4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80068e8:	431a      	orrs	r2, r3
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	68db      	ldr	r3, [r3, #12]
 80068ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80068f2:	431a      	orrs	r2, r3
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	691b      	ldr	r3, [r3, #16]
 80068f8:	f003 0302 	and.w	r3, r3, #2
 80068fc:	431a      	orrs	r2, r3
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	695b      	ldr	r3, [r3, #20]
 8006902:	f003 0301 	and.w	r3, r3, #1
 8006906:	431a      	orrs	r2, r3
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	699b      	ldr	r3, [r3, #24]
 800690c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006910:	431a      	orrs	r2, r3
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	69db      	ldr	r3, [r3, #28]
 8006916:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800691a:	431a      	orrs	r2, r3
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6a1b      	ldr	r3, [r3, #32]
 8006920:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006924:	ea42 0103 	orr.w	r1, r2, r3
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800692c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	430a      	orrs	r2, r1
 8006936:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	0c1b      	lsrs	r3, r3, #16
 800693e:	f003 0104 	and.w	r1, r3, #4
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006946:	f003 0210 	and.w	r2, r3, #16
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	69da      	ldr	r2, [r3, #28]
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006960:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2200      	movs	r2, #0
 8006966:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	2201      	movs	r2, #1
 800696c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006970:	2300      	movs	r3, #0
}
 8006972:	4618      	mov	r0, r3
 8006974:	3708      	adds	r7, #8
 8006976:	46bd      	mov	sp, r7
 8006978:	bd80      	pop	{r7, pc}

0800697a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800697a:	b580      	push	{r7, lr}
 800697c:	b088      	sub	sp, #32
 800697e:	af00      	add	r7, sp, #0
 8006980:	60f8      	str	r0, [r7, #12]
 8006982:	60b9      	str	r1, [r7, #8]
 8006984:	603b      	str	r3, [r7, #0]
 8006986:	4613      	mov	r3, r2
 8006988:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800698a:	2300      	movs	r3, #0
 800698c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006994:	2b01      	cmp	r3, #1
 8006996:	d101      	bne.n	800699c <HAL_SPI_Transmit+0x22>
 8006998:	2302      	movs	r3, #2
 800699a:	e126      	b.n	8006bea <HAL_SPI_Transmit+0x270>
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	2201      	movs	r2, #1
 80069a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80069a4:	f7fc fd80 	bl	80034a8 <HAL_GetTick>
 80069a8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80069aa:	88fb      	ldrh	r3, [r7, #6]
 80069ac:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b01      	cmp	r3, #1
 80069b8:	d002      	beq.n	80069c0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80069ba:	2302      	movs	r3, #2
 80069bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069be:	e10b      	b.n	8006bd8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d002      	beq.n	80069cc <HAL_SPI_Transmit+0x52>
 80069c6:	88fb      	ldrh	r3, [r7, #6]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d102      	bne.n	80069d2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80069cc:	2301      	movs	r3, #1
 80069ce:	77fb      	strb	r3, [r7, #31]
    goto error;
 80069d0:	e102      	b.n	8006bd8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	2203      	movs	r2, #3
 80069d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	2200      	movs	r2, #0
 80069de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	68ba      	ldr	r2, [r7, #8]
 80069e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	88fa      	ldrh	r2, [r7, #6]
 80069ea:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	88fa      	ldrh	r2, [r7, #6]
 80069f0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2200      	movs	r2, #0
 80069fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	2200      	movs	r2, #0
 8006a02:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2200      	movs	r2, #0
 8006a08:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a18:	d10f      	bne.n	8006a3a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	681a      	ldr	r2, [r3, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	681a      	ldr	r2, [r3, #0]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006a38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a44:	2b40      	cmp	r3, #64	; 0x40
 8006a46:	d007      	beq.n	8006a58 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006a60:	d14b      	bne.n	8006afa <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	685b      	ldr	r3, [r3, #4]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <HAL_SPI_Transmit+0xf6>
 8006a6a:	8afb      	ldrh	r3, [r7, #22]
 8006a6c:	2b01      	cmp	r3, #1
 8006a6e:	d13e      	bne.n	8006aee <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a74:	881a      	ldrh	r2, [r3, #0]
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a80:	1c9a      	adds	r2, r3, #2
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	3b01      	subs	r3, #1
 8006a8e:	b29a      	uxth	r2, r3
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006a94:	e02b      	b.n	8006aee <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	689b      	ldr	r3, [r3, #8]
 8006a9c:	f003 0302 	and.w	r3, r3, #2
 8006aa0:	2b02      	cmp	r3, #2
 8006aa2:	d112      	bne.n	8006aca <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa8:	881a      	ldrh	r2, [r3, #0]
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ab4:	1c9a      	adds	r2, r3, #2
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006abe:	b29b      	uxth	r3, r3
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	86da      	strh	r2, [r3, #54]	; 0x36
 8006ac8:	e011      	b.n	8006aee <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006aca:	f7fc fced 	bl	80034a8 <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	683a      	ldr	r2, [r7, #0]
 8006ad6:	429a      	cmp	r2, r3
 8006ad8:	d803      	bhi.n	8006ae2 <HAL_SPI_Transmit+0x168>
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ae0:	d102      	bne.n	8006ae8 <HAL_SPI_Transmit+0x16e>
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d102      	bne.n	8006aee <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006ae8:	2303      	movs	r3, #3
 8006aea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006aec:	e074      	b.n	8006bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006af2:	b29b      	uxth	r3, r3
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d1ce      	bne.n	8006a96 <HAL_SPI_Transmit+0x11c>
 8006af8:	e04c      	b.n	8006b94 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	685b      	ldr	r3, [r3, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d002      	beq.n	8006b08 <HAL_SPI_Transmit+0x18e>
 8006b02:	8afb      	ldrh	r3, [r7, #22]
 8006b04:	2b01      	cmp	r3, #1
 8006b06:	d140      	bne.n	8006b8a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	330c      	adds	r3, #12
 8006b12:	7812      	ldrb	r2, [r2, #0]
 8006b14:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1a:	1c5a      	adds	r2, r3, #1
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	3b01      	subs	r3, #1
 8006b28:	b29a      	uxth	r2, r3
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006b2e:	e02c      	b.n	8006b8a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	f003 0302 	and.w	r3, r3, #2
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d113      	bne.n	8006b66 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	330c      	adds	r3, #12
 8006b48:	7812      	ldrb	r2, [r2, #0]
 8006b4a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b5a:	b29b      	uxth	r3, r3
 8006b5c:	3b01      	subs	r3, #1
 8006b5e:	b29a      	uxth	r2, r3
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	86da      	strh	r2, [r3, #54]	; 0x36
 8006b64:	e011      	b.n	8006b8a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b66:	f7fc fc9f 	bl	80034a8 <HAL_GetTick>
 8006b6a:	4602      	mov	r2, r0
 8006b6c:	69bb      	ldr	r3, [r7, #24]
 8006b6e:	1ad3      	subs	r3, r2, r3
 8006b70:	683a      	ldr	r2, [r7, #0]
 8006b72:	429a      	cmp	r2, r3
 8006b74:	d803      	bhi.n	8006b7e <HAL_SPI_Transmit+0x204>
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b7c:	d102      	bne.n	8006b84 <HAL_SPI_Transmit+0x20a>
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d102      	bne.n	8006b8a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8006b84:	2303      	movs	r3, #3
 8006b86:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006b88:	e026      	b.n	8006bd8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006b8e:	b29b      	uxth	r3, r3
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d1cd      	bne.n	8006b30 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006b94:	69ba      	ldr	r2, [r7, #24]
 8006b96:	6839      	ldr	r1, [r7, #0]
 8006b98:	68f8      	ldr	r0, [r7, #12]
 8006b9a:	f000 f8b3 	bl	8006d04 <SPI_EndRxTxTransaction>
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d002      	beq.n	8006baa <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	2220      	movs	r2, #32
 8006ba8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d10a      	bne.n	8006bc8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006bb2:	2300      	movs	r3, #0
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	68db      	ldr	r3, [r3, #12]
 8006bbc:	613b      	str	r3, [r7, #16]
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	613b      	str	r3, [r7, #16]
 8006bc6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d002      	beq.n	8006bd6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	77fb      	strb	r3, [r7, #31]
 8006bd4:	e000      	b.n	8006bd8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8006bd6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	2201      	movs	r2, #1
 8006bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006be8:	7ffb      	ldrb	r3, [r7, #31]
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3720      	adds	r7, #32
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}
	...

08006bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b088      	sub	sp, #32
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	60f8      	str	r0, [r7, #12]
 8006bfc:	60b9      	str	r1, [r7, #8]
 8006bfe:	603b      	str	r3, [r7, #0]
 8006c00:	4613      	mov	r3, r2
 8006c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c04:	f7fc fc50 	bl	80034a8 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	1a9b      	subs	r3, r3, r2
 8006c0e:	683a      	ldr	r2, [r7, #0]
 8006c10:	4413      	add	r3, r2
 8006c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c14:	f7fc fc48 	bl	80034a8 <HAL_GetTick>
 8006c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c1a:	4b39      	ldr	r3, [pc, #228]	; (8006d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	015b      	lsls	r3, r3, #5
 8006c20:	0d1b      	lsrs	r3, r3, #20
 8006c22:	69fa      	ldr	r2, [r7, #28]
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c2a:	e054      	b.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c2c:	683b      	ldr	r3, [r7, #0]
 8006c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c32:	d050      	beq.n	8006cd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c34:	f7fc fc38 	bl	80034a8 <HAL_GetTick>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	69bb      	ldr	r3, [r7, #24]
 8006c3c:	1ad3      	subs	r3, r2, r3
 8006c3e:	69fa      	ldr	r2, [r7, #28]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d902      	bls.n	8006c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d13d      	bne.n	8006cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006c62:	d111      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c6c:	d004      	beq.n	8006c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	689b      	ldr	r3, [r3, #8]
 8006c72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c76:	d107      	bne.n	8006c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c90:	d10f      	bne.n	8006cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	681a      	ldr	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ca0:	601a      	str	r2, [r3, #0]
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681a      	ldr	r2, [r3, #0]
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2200      	movs	r2, #0
 8006cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8006cc2:	2303      	movs	r3, #3
 8006cc4:	e017      	b.n	8006cf6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006cc6:	697b      	ldr	r3, [r7, #20]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006ccc:	2300      	movs	r3, #0
 8006cce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	3b01      	subs	r3, #1
 8006cd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	689a      	ldr	r2, [r3, #8]
 8006cdc:	68bb      	ldr	r3, [r7, #8]
 8006cde:	4013      	ands	r3, r2
 8006ce0:	68ba      	ldr	r2, [r7, #8]
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	bf0c      	ite	eq
 8006ce6:	2301      	moveq	r3, #1
 8006ce8:	2300      	movne	r3, #0
 8006cea:	b2db      	uxtb	r3, r3
 8006cec:	461a      	mov	r2, r3
 8006cee:	79fb      	ldrb	r3, [r7, #7]
 8006cf0:	429a      	cmp	r2, r3
 8006cf2:	d19b      	bne.n	8006c2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3720      	adds	r7, #32
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	2000003c 	.word	0x2000003c

08006d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b088      	sub	sp, #32
 8006d08:	af02      	add	r7, sp, #8
 8006d0a:	60f8      	str	r0, [r7, #12]
 8006d0c:	60b9      	str	r1, [r7, #8]
 8006d0e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006d10:	4b1b      	ldr	r3, [pc, #108]	; (8006d80 <SPI_EndRxTxTransaction+0x7c>)
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	4a1b      	ldr	r2, [pc, #108]	; (8006d84 <SPI_EndRxTxTransaction+0x80>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	0d5b      	lsrs	r3, r3, #21
 8006d1c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006d20:	fb02 f303 	mul.w	r3, r2, r3
 8006d24:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	685b      	ldr	r3, [r3, #4]
 8006d2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006d2e:	d112      	bne.n	8006d56 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	9300      	str	r3, [sp, #0]
 8006d34:	68bb      	ldr	r3, [r7, #8]
 8006d36:	2200      	movs	r2, #0
 8006d38:	2180      	movs	r1, #128	; 0x80
 8006d3a:	68f8      	ldr	r0, [r7, #12]
 8006d3c:	f7ff ff5a 	bl	8006bf4 <SPI_WaitFlagStateUntilTimeout>
 8006d40:	4603      	mov	r3, r0
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d016      	beq.n	8006d74 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d4a:	f043 0220 	orr.w	r2, r3, #32
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8006d52:	2303      	movs	r3, #3
 8006d54:	e00f      	b.n	8006d76 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d00a      	beq.n	8006d72 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3b01      	subs	r3, #1
 8006d60:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	689b      	ldr	r3, [r3, #8]
 8006d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d6c:	2b80      	cmp	r3, #128	; 0x80
 8006d6e:	d0f2      	beq.n	8006d56 <SPI_EndRxTxTransaction+0x52>
 8006d70:	e000      	b.n	8006d74 <SPI_EndRxTxTransaction+0x70>
        break;
 8006d72:	bf00      	nop
  }

  return HAL_OK;
 8006d74:	2300      	movs	r3, #0
}
 8006d76:	4618      	mov	r0, r3
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	2000003c 	.word	0x2000003c
 8006d84:	165e9f81 	.word	0x165e9f81

08006d88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b082      	sub	sp, #8
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d101      	bne.n	8006d9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e03f      	b.n	8006e1a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d106      	bne.n	8006db4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	2200      	movs	r2, #0
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006dae:	6878      	ldr	r0, [r7, #4]
 8006db0:	f7fc fa7a 	bl	80032a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	2224      	movs	r2, #36	; 0x24
 8006db8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	68da      	ldr	r2, [r3, #12]
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006dca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fe81 	bl	8007ad4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	691a      	ldr	r2, [r3, #16]
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006de0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	695a      	ldr	r2, [r3, #20]
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006df0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	68da      	ldr	r2, [r3, #12]
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	2200      	movs	r2, #0
 8006e06:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2220      	movs	r2, #32
 8006e14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006e18:	2300      	movs	r3, #0
}
 8006e1a:	4618      	mov	r0, r3
 8006e1c:	3708      	adds	r7, #8
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	bd80      	pop	{r7, pc}

08006e22 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e22:	b580      	push	{r7, lr}
 8006e24:	b08a      	sub	sp, #40	; 0x28
 8006e26:	af02      	add	r7, sp, #8
 8006e28:	60f8      	str	r0, [r7, #12]
 8006e2a:	60b9      	str	r1, [r7, #8]
 8006e2c:	603b      	str	r3, [r7, #0]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006e32:	2300      	movs	r3, #0
 8006e34:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	2b20      	cmp	r3, #32
 8006e40:	d17c      	bne.n	8006f3c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d002      	beq.n	8006e4e <HAL_UART_Transmit+0x2c>
 8006e48:	88fb      	ldrh	r3, [r7, #6]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d101      	bne.n	8006e52 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006e4e:	2301      	movs	r3, #1
 8006e50:	e075      	b.n	8006f3e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e58:	2b01      	cmp	r3, #1
 8006e5a:	d101      	bne.n	8006e60 <HAL_UART_Transmit+0x3e>
 8006e5c:	2302      	movs	r3, #2
 8006e5e:	e06e      	b.n	8006f3e <HAL_UART_Transmit+0x11c>
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	2201      	movs	r2, #1
 8006e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2221      	movs	r2, #33	; 0x21
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006e76:	f7fc fb17 	bl	80034a8 <HAL_GetTick>
 8006e7a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	88fa      	ldrh	r2, [r7, #6]
 8006e80:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	88fa      	ldrh	r2, [r7, #6]
 8006e86:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	689b      	ldr	r3, [r3, #8]
 8006e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e90:	d108      	bne.n	8006ea4 <HAL_UART_Transmit+0x82>
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	691b      	ldr	r3, [r3, #16]
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d104      	bne.n	8006ea4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006e9a:	2300      	movs	r3, #0
 8006e9c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	61bb      	str	r3, [r7, #24]
 8006ea2:	e003      	b.n	8006eac <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	2200      	movs	r2, #0
 8006eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006eb4:	e02a      	b.n	8006f0c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006eb6:	683b      	ldr	r3, [r7, #0]
 8006eb8:	9300      	str	r3, [sp, #0]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	2180      	movs	r1, #128	; 0x80
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 fbc1 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 8006ec6:	4603      	mov	r3, r0
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d001      	beq.n	8006ed0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e036      	b.n	8006f3e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ed0:	69fb      	ldr	r3, [r7, #28]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d10b      	bne.n	8006eee <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ed6:	69bb      	ldr	r3, [r7, #24]
 8006ed8:	881b      	ldrh	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ee4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006ee6:	69bb      	ldr	r3, [r7, #24]
 8006ee8:	3302      	adds	r3, #2
 8006eea:	61bb      	str	r3, [r7, #24]
 8006eec:	e007      	b.n	8006efe <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006eee:	69fb      	ldr	r3, [r7, #28]
 8006ef0:	781a      	ldrb	r2, [r3, #0]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	3301      	adds	r3, #1
 8006efc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f02:	b29b      	uxth	r3, r3
 8006f04:	3b01      	subs	r3, #1
 8006f06:	b29a      	uxth	r2, r3
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d1cf      	bne.n	8006eb6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	9300      	str	r3, [sp, #0]
 8006f1a:	697b      	ldr	r3, [r7, #20]
 8006f1c:	2200      	movs	r2, #0
 8006f1e:	2140      	movs	r1, #64	; 0x40
 8006f20:	68f8      	ldr	r0, [r7, #12]
 8006f22:	f000 fb91 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 8006f26:	4603      	mov	r3, r0
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d001      	beq.n	8006f30 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006f2c:	2303      	movs	r3, #3
 8006f2e:	e006      	b.n	8006f3e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2220      	movs	r2, #32
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006f38:	2300      	movs	r3, #0
 8006f3a:	e000      	b.n	8006f3e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006f3c:	2302      	movs	r3, #2
  }
}
 8006f3e:	4618      	mov	r0, r3
 8006f40:	3720      	adds	r7, #32
 8006f42:	46bd      	mov	sp, r7
 8006f44:	bd80      	pop	{r7, pc}

08006f46 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f46:	b580      	push	{r7, lr}
 8006f48:	b08a      	sub	sp, #40	; 0x28
 8006f4a:	af02      	add	r7, sp, #8
 8006f4c:	60f8      	str	r0, [r7, #12]
 8006f4e:	60b9      	str	r1, [r7, #8]
 8006f50:	603b      	str	r3, [r7, #0]
 8006f52:	4613      	mov	r3, r2
 8006f54:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006f56:	2300      	movs	r3, #0
 8006f58:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f60:	b2db      	uxtb	r3, r3
 8006f62:	2b20      	cmp	r3, #32
 8006f64:	f040 808c 	bne.w	8007080 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d002      	beq.n	8006f74 <HAL_UART_Receive+0x2e>
 8006f6e:	88fb      	ldrh	r3, [r7, #6]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d101      	bne.n	8006f78 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8006f74:	2301      	movs	r3, #1
 8006f76:	e084      	b.n	8007082 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f7e:	2b01      	cmp	r3, #1
 8006f80:	d101      	bne.n	8006f86 <HAL_UART_Receive+0x40>
 8006f82:	2302      	movs	r3, #2
 8006f84:	e07d      	b.n	8007082 <HAL_UART_Receive+0x13c>
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	2201      	movs	r2, #1
 8006f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	2200      	movs	r2, #0
 8006f92:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	2222      	movs	r2, #34	; 0x22
 8006f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006fa2:	f7fc fa81 	bl	80034a8 <HAL_GetTick>
 8006fa6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	88fa      	ldrh	r2, [r7, #6]
 8006fac:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	88fa      	ldrh	r2, [r7, #6]
 8006fb2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fbc:	d108      	bne.n	8006fd0 <HAL_UART_Receive+0x8a>
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	691b      	ldr	r3, [r3, #16]
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d104      	bne.n	8006fd0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006fca:	68bb      	ldr	r3, [r7, #8]
 8006fcc:	61bb      	str	r3, [r7, #24]
 8006fce:	e003      	b.n	8006fd8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006fd4:	2300      	movs	r3, #0
 8006fd6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	2200      	movs	r2, #0
 8006fdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006fe0:	e043      	b.n	800706a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	2120      	movs	r1, #32
 8006fec:	68f8      	ldr	r0, [r7, #12]
 8006fee:	f000 fb2b 	bl	8007648 <UART_WaitOnFlagUntilTimeout>
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d001      	beq.n	8006ffc <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006ff8:	2303      	movs	r3, #3
 8006ffa:	e042      	b.n	8007082 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	2b00      	cmp	r3, #0
 8007000:	d10c      	bne.n	800701c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	685b      	ldr	r3, [r3, #4]
 8007008:	b29b      	uxth	r3, r3
 800700a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800700e:	b29a      	uxth	r2, r3
 8007010:	69bb      	ldr	r3, [r7, #24]
 8007012:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007014:	69bb      	ldr	r3, [r7, #24]
 8007016:	3302      	adds	r3, #2
 8007018:	61bb      	str	r3, [r7, #24]
 800701a:	e01f      	b.n	800705c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007024:	d007      	beq.n	8007036 <HAL_UART_Receive+0xf0>
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	689b      	ldr	r3, [r3, #8]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d10a      	bne.n	8007044 <HAL_UART_Receive+0xfe>
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	691b      	ldr	r3, [r3, #16]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d106      	bne.n	8007044 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	b2da      	uxtb	r2, r3
 800703e:	69fb      	ldr	r3, [r7, #28]
 8007040:	701a      	strb	r2, [r3, #0]
 8007042:	e008      	b.n	8007056 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	685b      	ldr	r3, [r3, #4]
 800704a:	b2db      	uxtb	r3, r3
 800704c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007050:	b2da      	uxtb	r2, r3
 8007052:	69fb      	ldr	r3, [r7, #28]
 8007054:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007056:	69fb      	ldr	r3, [r7, #28]
 8007058:	3301      	adds	r3, #1
 800705a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007060:	b29b      	uxth	r3, r3
 8007062:	3b01      	subs	r3, #1
 8007064:	b29a      	uxth	r2, r3
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800706e:	b29b      	uxth	r3, r3
 8007070:	2b00      	cmp	r3, #0
 8007072:	d1b6      	bne.n	8006fe2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2220      	movs	r2, #32
 8007078:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 800707c:	2300      	movs	r3, #0
 800707e:	e000      	b.n	8007082 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007080:	2302      	movs	r3, #2
  }
}
 8007082:	4618      	mov	r0, r3
 8007084:	3720      	adds	r7, #32
 8007086:	46bd      	mov	sp, r7
 8007088:	bd80      	pop	{r7, pc}

0800708a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800708a:	b580      	push	{r7, lr}
 800708c:	b084      	sub	sp, #16
 800708e:	af00      	add	r7, sp, #0
 8007090:	60f8      	str	r0, [r7, #12]
 8007092:	60b9      	str	r1, [r7, #8]
 8007094:	4613      	mov	r3, r2
 8007096:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800709e:	b2db      	uxtb	r3, r3
 80070a0:	2b20      	cmp	r3, #32
 80070a2:	d11d      	bne.n	80070e0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d002      	beq.n	80070b0 <HAL_UART_Receive_IT+0x26>
 80070aa:	88fb      	ldrh	r3, [r7, #6]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d101      	bne.n	80070b4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e016      	b.n	80070e2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070ba:	2b01      	cmp	r3, #1
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Receive_IT+0x38>
 80070be:	2302      	movs	r3, #2
 80070c0:	e00f      	b.n	80070e2 <HAL_UART_Receive_IT+0x58>
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2201      	movs	r2, #1
 80070c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2200      	movs	r2, #0
 80070ce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80070d0:	88fb      	ldrh	r3, [r7, #6]
 80070d2:	461a      	mov	r2, r3
 80070d4:	68b9      	ldr	r1, [r7, #8]
 80070d6:	68f8      	ldr	r0, [r7, #12]
 80070d8:	f000 fb24 	bl	8007724 <UART_Start_Receive_IT>
 80070dc:	4603      	mov	r3, r0
 80070de:	e000      	b.n	80070e2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80070e0:	2302      	movs	r3, #2
  }
}
 80070e2:	4618      	mov	r0, r3
 80070e4:	3710      	adds	r7, #16
 80070e6:	46bd      	mov	sp, r7
 80070e8:	bd80      	pop	{r7, pc}
	...

080070ec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b0ba      	sub	sp, #232	; 0xe8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	68db      	ldr	r3, [r3, #12]
 8007104:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007112:	2300      	movs	r3, #0
 8007114:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007118:	2300      	movs	r3, #0
 800711a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800711e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007122:	f003 030f 	and.w	r3, r3, #15
 8007126:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800712a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800712e:	2b00      	cmp	r3, #0
 8007130:	d10f      	bne.n	8007152 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007132:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d009      	beq.n	8007152 <HAL_UART_IRQHandler+0x66>
 800713e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007142:	f003 0320 	and.w	r3, r3, #32
 8007146:	2b00      	cmp	r3, #0
 8007148:	d003      	beq.n	8007152 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800714a:	6878      	ldr	r0, [r7, #4]
 800714c:	f000 fc07 	bl	800795e <UART_Receive_IT>
      return;
 8007150:	e256      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007152:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007156:	2b00      	cmp	r3, #0
 8007158:	f000 80de 	beq.w	8007318 <HAL_UART_IRQHandler+0x22c>
 800715c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007160:	f003 0301 	and.w	r3, r3, #1
 8007164:	2b00      	cmp	r3, #0
 8007166:	d106      	bne.n	8007176 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007168:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800716c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007170:	2b00      	cmp	r3, #0
 8007172:	f000 80d1 	beq.w	8007318 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b00      	cmp	r3, #0
 8007180:	d00b      	beq.n	800719a <HAL_UART_IRQHandler+0xae>
 8007182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007186:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007192:	f043 0201 	orr.w	r2, r3, #1
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800719a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800719e:	f003 0304 	and.w	r3, r3, #4
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d00b      	beq.n	80071be <HAL_UART_IRQHandler+0xd2>
 80071a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071aa:	f003 0301 	and.w	r3, r3, #1
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d005      	beq.n	80071be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	f043 0202 	orr.w	r2, r3, #2
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80071be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071c2:	f003 0302 	and.w	r3, r3, #2
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <HAL_UART_IRQHandler+0xf6>
 80071ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071ce:	f003 0301 	and.w	r3, r3, #1
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d005      	beq.n	80071e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f043 0204 	orr.w	r2, r3, #4
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80071e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071e6:	f003 0308 	and.w	r3, r3, #8
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d011      	beq.n	8007212 <HAL_UART_IRQHandler+0x126>
 80071ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071f2:	f003 0320 	and.w	r3, r3, #32
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d105      	bne.n	8007206 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80071fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80071fe:	f003 0301 	and.w	r3, r3, #1
 8007202:	2b00      	cmp	r3, #0
 8007204:	d005      	beq.n	8007212 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800720a:	f043 0208 	orr.w	r2, r3, #8
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007216:	2b00      	cmp	r3, #0
 8007218:	f000 81ed 	beq.w	80075f6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800721c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007220:	f003 0320 	and.w	r3, r3, #32
 8007224:	2b00      	cmp	r3, #0
 8007226:	d008      	beq.n	800723a <HAL_UART_IRQHandler+0x14e>
 8007228:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800722c:	f003 0320 	and.w	r3, r3, #32
 8007230:	2b00      	cmp	r3, #0
 8007232:	d002      	beq.n	800723a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fb92 	bl	800795e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	695b      	ldr	r3, [r3, #20]
 8007240:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007244:	2b40      	cmp	r3, #64	; 0x40
 8007246:	bf0c      	ite	eq
 8007248:	2301      	moveq	r3, #1
 800724a:	2300      	movne	r3, #0
 800724c:	b2db      	uxtb	r3, r3
 800724e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f003 0308 	and.w	r3, r3, #8
 800725a:	2b00      	cmp	r3, #0
 800725c:	d103      	bne.n	8007266 <HAL_UART_IRQHandler+0x17a>
 800725e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007262:	2b00      	cmp	r3, #0
 8007264:	d04f      	beq.n	8007306 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007266:	6878      	ldr	r0, [r7, #4]
 8007268:	f000 fa9a 	bl	80077a0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	695b      	ldr	r3, [r3, #20]
 8007272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007276:	2b40      	cmp	r3, #64	; 0x40
 8007278:	d141      	bne.n	80072fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	3314      	adds	r3, #20
 8007280:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007284:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007288:	e853 3f00 	ldrex	r3, [r3]
 800728c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007290:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007294:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007298:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	3314      	adds	r3, #20
 80072a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80072a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80072aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80072b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80072be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d1d9      	bne.n	800727a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d013      	beq.n	80072f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d2:	4a7d      	ldr	r2, [pc, #500]	; (80074c8 <HAL_UART_IRQHandler+0x3dc>)
 80072d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fc fa95 	bl	800380a <HAL_DMA_Abort_IT>
 80072e0:	4603      	mov	r3, r0
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d016      	beq.n	8007314 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072ec:	687a      	ldr	r2, [r7, #4]
 80072ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80072f0:	4610      	mov	r0, r2
 80072f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072f4:	e00e      	b.n	8007314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80072f6:	6878      	ldr	r0, [r7, #4]
 80072f8:	f000 f990 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80072fc:	e00a      	b.n	8007314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f000 f98c 	bl	800761c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007304:	e006      	b.n	8007314 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007306:	6878      	ldr	r0, [r7, #4]
 8007308:	f000 f988 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007312:	e170      	b.n	80075f6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007314:	bf00      	nop
    return;
 8007316:	e16e      	b.n	80075f6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800731c:	2b01      	cmp	r3, #1
 800731e:	f040 814a 	bne.w	80075b6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f003 0310 	and.w	r3, r3, #16
 800732a:	2b00      	cmp	r3, #0
 800732c:	f000 8143 	beq.w	80075b6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007334:	f003 0310 	and.w	r3, r3, #16
 8007338:	2b00      	cmp	r3, #0
 800733a:	f000 813c 	beq.w	80075b6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800733e:	2300      	movs	r3, #0
 8007340:	60bb      	str	r3, [r7, #8]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	60bb      	str	r3, [r7, #8]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685b      	ldr	r3, [r3, #4]
 8007350:	60bb      	str	r3, [r7, #8]
 8007352:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
 800735a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800735e:	2b40      	cmp	r3, #64	; 0x40
 8007360:	f040 80b4 	bne.w	80074cc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	685b      	ldr	r3, [r3, #4]
 800736c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007370:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007374:	2b00      	cmp	r3, #0
 8007376:	f000 8140 	beq.w	80075fa <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800737e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007382:	429a      	cmp	r2, r3
 8007384:	f080 8139 	bcs.w	80075fa <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800738e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007394:	69db      	ldr	r3, [r3, #28]
 8007396:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800739a:	f000 8088 	beq.w	80074ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	330c      	adds	r3, #12
 80073a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80073ac:	e853 3f00 	ldrex	r3, [r3]
 80073b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80073b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80073b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80073bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	330c      	adds	r3, #12
 80073c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80073ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80073ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80073d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80073da:	e841 2300 	strex	r3, r2, [r1]
 80073de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80073e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d1d9      	bne.n	800739e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3314      	adds	r3, #20
 80073f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80073f4:	e853 3f00 	ldrex	r3, [r3]
 80073f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80073fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80073fc:	f023 0301 	bic.w	r3, r3, #1
 8007400:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	3314      	adds	r3, #20
 800740a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800740e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007412:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007414:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007416:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800741a:	e841 2300 	strex	r3, r2, [r1]
 800741e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007420:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007422:	2b00      	cmp	r3, #0
 8007424:	d1e1      	bne.n	80073ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	3314      	adds	r3, #20
 800742c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007430:	e853 3f00 	ldrex	r3, [r3]
 8007434:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007436:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007438:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800743c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	3314      	adds	r3, #20
 8007446:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800744a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800744c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800744e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007450:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007452:	e841 2300 	strex	r3, r2, [r1]
 8007456:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007458:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800745a:	2b00      	cmp	r3, #0
 800745c:	d1e3      	bne.n	8007426 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2220      	movs	r2, #32
 8007462:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2200      	movs	r2, #0
 800746a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	330c      	adds	r3, #12
 8007472:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800747c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800747e:	f023 0310 	bic.w	r3, r3, #16
 8007482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	330c      	adds	r3, #12
 800748c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007490:	65ba      	str	r2, [r7, #88]	; 0x58
 8007492:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007494:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007496:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007498:	e841 2300 	strex	r3, r2, [r1]
 800749c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800749e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d1e3      	bne.n	800746c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074a8:	4618      	mov	r0, r3
 80074aa:	f7fc f93e 	bl	800372a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074b6:	b29b      	uxth	r3, r3
 80074b8:	1ad3      	subs	r3, r2, r3
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	4619      	mov	r1, r3
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f8b6 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80074c4:	e099      	b.n	80075fa <HAL_UART_IRQHandler+0x50e>
 80074c6:	bf00      	nop
 80074c8:	08007867 	.word	0x08007867
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074d4:	b29b      	uxth	r3, r3
 80074d6:	1ad3      	subs	r3, r2, r3
 80074d8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	f000 808b 	beq.w	80075fe <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80074e8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	f000 8086 	beq.w	80075fe <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	330c      	adds	r3, #12
 80074f8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007508:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	330c      	adds	r3, #12
 8007512:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007516:	647a      	str	r2, [r7, #68]	; 0x44
 8007518:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800751a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800751c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800751e:	e841 2300 	strex	r3, r2, [r1]
 8007522:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007524:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007526:	2b00      	cmp	r3, #0
 8007528:	d1e3      	bne.n	80074f2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	3314      	adds	r3, #20
 8007530:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	e853 3f00 	ldrex	r3, [r3]
 8007538:	623b      	str	r3, [r7, #32]
   return(result);
 800753a:	6a3b      	ldr	r3, [r7, #32]
 800753c:	f023 0301 	bic.w	r3, r3, #1
 8007540:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	3314      	adds	r3, #20
 800754a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800754e:	633a      	str	r2, [r7, #48]	; 0x30
 8007550:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007552:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007556:	e841 2300 	strex	r3, r2, [r1]
 800755a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800755c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800755e:	2b00      	cmp	r3, #0
 8007560:	d1e3      	bne.n	800752a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	2220      	movs	r2, #32
 8007566:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	2200      	movs	r2, #0
 800756e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	330c      	adds	r3, #12
 8007576:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	e853 3f00 	ldrex	r3, [r3]
 800757e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0310 	bic.w	r3, r3, #16
 8007586:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	330c      	adds	r3, #12
 8007590:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007594:	61fa      	str	r2, [r7, #28]
 8007596:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007598:	69b9      	ldr	r1, [r7, #24]
 800759a:	69fa      	ldr	r2, [r7, #28]
 800759c:	e841 2300 	strex	r3, r2, [r1]
 80075a0:	617b      	str	r3, [r7, #20]
   return(result);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d1e3      	bne.n	8007570 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80075a8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80075ac:	4619      	mov	r1, r3
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f000 f83e 	bl	8007630 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075b4:	e023      	b.n	80075fe <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80075b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d009      	beq.n	80075d6 <HAL_UART_IRQHandler+0x4ea>
 80075c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d003      	beq.n	80075d6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80075ce:	6878      	ldr	r0, [r7, #4]
 80075d0:	f000 f95d 	bl	800788e <UART_Transmit_IT>
    return;
 80075d4:	e014      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80075d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80075da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d00e      	beq.n	8007600 <HAL_UART_IRQHandler+0x514>
 80075e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d008      	beq.n	8007600 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 f99d 	bl	800792e <UART_EndTransmit_IT>
    return;
 80075f4:	e004      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
    return;
 80075f6:	bf00      	nop
 80075f8:	e002      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
      return;
 80075fa:	bf00      	nop
 80075fc:	e000      	b.n	8007600 <HAL_UART_IRQHandler+0x514>
      return;
 80075fe:	bf00      	nop
  }
}
 8007600:	37e8      	adds	r7, #232	; 0xe8
 8007602:	46bd      	mov	sp, r7
 8007604:	bd80      	pop	{r7, pc}
 8007606:	bf00      	nop

08007608 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007610:	bf00      	nop
 8007612:	370c      	adds	r7, #12
 8007614:	46bd      	mov	sp, r7
 8007616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800761a:	4770      	bx	lr

0800761c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800761c:	b480      	push	{r7}
 800761e:	b083      	sub	sp, #12
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007624:	bf00      	nop
 8007626:	370c      	adds	r7, #12
 8007628:	46bd      	mov	sp, r7
 800762a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762e:	4770      	bx	lr

08007630 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007630:	b480      	push	{r7}
 8007632:	b083      	sub	sp, #12
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	460b      	mov	r3, r1
 800763a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800763c:	bf00      	nop
 800763e:	370c      	adds	r7, #12
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr

08007648 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007648:	b580      	push	{r7, lr}
 800764a:	b090      	sub	sp, #64	; 0x40
 800764c:	af00      	add	r7, sp, #0
 800764e:	60f8      	str	r0, [r7, #12]
 8007650:	60b9      	str	r1, [r7, #8]
 8007652:	603b      	str	r3, [r7, #0]
 8007654:	4613      	mov	r3, r2
 8007656:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007658:	e050      	b.n	80076fc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800765a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800765c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007660:	d04c      	beq.n	80076fc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007662:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007664:	2b00      	cmp	r3, #0
 8007666:	d007      	beq.n	8007678 <UART_WaitOnFlagUntilTimeout+0x30>
 8007668:	f7fb ff1e 	bl	80034a8 <HAL_GetTick>
 800766c:	4602      	mov	r2, r0
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	1ad3      	subs	r3, r2, r3
 8007672:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007674:	429a      	cmp	r2, r3
 8007676:	d241      	bcs.n	80076fc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	330c      	adds	r3, #12
 800767e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800768e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007698:	637a      	str	r2, [r7, #52]	; 0x34
 800769a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800769e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80076a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e5      	bne.n	8007678 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	3314      	adds	r3, #20
 80076b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076b4:	697b      	ldr	r3, [r7, #20]
 80076b6:	e853 3f00 	ldrex	r3, [r3]
 80076ba:	613b      	str	r3, [r7, #16]
   return(result);
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	f023 0301 	bic.w	r3, r3, #1
 80076c2:	63bb      	str	r3, [r7, #56]	; 0x38
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	3314      	adds	r3, #20
 80076ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80076cc:	623a      	str	r2, [r7, #32]
 80076ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076d0:	69f9      	ldr	r1, [r7, #28]
 80076d2:	6a3a      	ldr	r2, [r7, #32]
 80076d4:	e841 2300 	strex	r3, r2, [r1]
 80076d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80076da:	69bb      	ldr	r3, [r7, #24]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d1e5      	bne.n	80076ac <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	2220      	movs	r2, #32
 80076e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	2220      	movs	r2, #32
 80076ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	2200      	movs	r2, #0
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80076f8:	2303      	movs	r3, #3
 80076fa:	e00f      	b.n	800771c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	681a      	ldr	r2, [r3, #0]
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	4013      	ands	r3, r2
 8007706:	68ba      	ldr	r2, [r7, #8]
 8007708:	429a      	cmp	r2, r3
 800770a:	bf0c      	ite	eq
 800770c:	2301      	moveq	r3, #1
 800770e:	2300      	movne	r3, #0
 8007710:	b2db      	uxtb	r3, r3
 8007712:	461a      	mov	r2, r3
 8007714:	79fb      	ldrb	r3, [r7, #7]
 8007716:	429a      	cmp	r2, r3
 8007718:	d09f      	beq.n	800765a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800771a:	2300      	movs	r3, #0
}
 800771c:	4618      	mov	r0, r3
 800771e:	3740      	adds	r7, #64	; 0x40
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	60f8      	str	r0, [r7, #12]
 800772c:	60b9      	str	r1, [r7, #8]
 800772e:	4613      	mov	r3, r2
 8007730:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	68ba      	ldr	r2, [r7, #8]
 8007736:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	88fa      	ldrh	r2, [r7, #6]
 800773c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	88fa      	ldrh	r2, [r7, #6]
 8007742:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	2200      	movs	r2, #0
 8007748:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2222      	movs	r2, #34	; 0x22
 800774e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d007      	beq.n	8007772 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68da      	ldr	r2, [r3, #12]
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007770:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	695a      	ldr	r2, [r3, #20]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f042 0201 	orr.w	r2, r2, #1
 8007780:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	68da      	ldr	r2, [r3, #12]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	f042 0220 	orr.w	r2, r2, #32
 8007790:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007792:	2300      	movs	r3, #0
}
 8007794:	4618      	mov	r0, r3
 8007796:	3714      	adds	r7, #20
 8007798:	46bd      	mov	sp, r7
 800779a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779e:	4770      	bx	lr

080077a0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b095      	sub	sp, #84	; 0x54
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	330c      	adds	r3, #12
 80077ae:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077b2:	e853 3f00 	ldrex	r3, [r3]
 80077b6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077ba:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	330c      	adds	r3, #12
 80077c6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80077c8:	643a      	str	r2, [r7, #64]	; 0x40
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077cc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80077ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80077d0:	e841 2300 	strex	r3, r2, [r1]
 80077d4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d1e5      	bne.n	80077a8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	3314      	adds	r3, #20
 80077e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	e853 3f00 	ldrex	r3, [r3]
 80077ea:	61fb      	str	r3, [r7, #28]
   return(result);
 80077ec:	69fb      	ldr	r3, [r7, #28]
 80077ee:	f023 0301 	bic.w	r3, r3, #1
 80077f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	3314      	adds	r3, #20
 80077fa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077fc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007800:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007802:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007804:	e841 2300 	strex	r3, r2, [r1]
 8007808:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800780a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800780c:	2b00      	cmp	r3, #0
 800780e:	d1e5      	bne.n	80077dc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007814:	2b01      	cmp	r3, #1
 8007816:	d119      	bne.n	800784c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	330c      	adds	r3, #12
 800781e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	e853 3f00 	ldrex	r3, [r3]
 8007826:	60bb      	str	r3, [r7, #8]
   return(result);
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	f023 0310 	bic.w	r3, r3, #16
 800782e:	647b      	str	r3, [r7, #68]	; 0x44
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	330c      	adds	r3, #12
 8007836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007838:	61ba      	str	r2, [r7, #24]
 800783a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800783c:	6979      	ldr	r1, [r7, #20]
 800783e:	69ba      	ldr	r2, [r7, #24]
 8007840:	e841 2300 	strex	r3, r2, [r1]
 8007844:	613b      	str	r3, [r7, #16]
   return(result);
 8007846:	693b      	ldr	r3, [r7, #16]
 8007848:	2b00      	cmp	r3, #0
 800784a:	d1e5      	bne.n	8007818 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2220      	movs	r2, #32
 8007850:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2200      	movs	r2, #0
 8007858:	631a      	str	r2, [r3, #48]	; 0x30
}
 800785a:	bf00      	nop
 800785c:	3754      	adds	r7, #84	; 0x54
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr

08007866 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007866:	b580      	push	{r7, lr}
 8007868:	b084      	sub	sp, #16
 800786a:	af00      	add	r7, sp, #0
 800786c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007872:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	2200      	movs	r2, #0
 8007878:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	2200      	movs	r2, #0
 800787e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f7ff fecb 	bl	800761c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007886:	bf00      	nop
 8007888:	3710      	adds	r7, #16
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800788e:	b480      	push	{r7}
 8007890:	b085      	sub	sp, #20
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789c:	b2db      	uxtb	r3, r3
 800789e:	2b21      	cmp	r3, #33	; 0x21
 80078a0:	d13e      	bne.n	8007920 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	689b      	ldr	r3, [r3, #8]
 80078a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078aa:	d114      	bne.n	80078d6 <UART_Transmit_IT+0x48>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	691b      	ldr	r3, [r3, #16]
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d110      	bne.n	80078d6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a1b      	ldr	r3, [r3, #32]
 80078b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078ba:	68fb      	ldr	r3, [r7, #12]
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	461a      	mov	r2, r3
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6a1b      	ldr	r3, [r3, #32]
 80078ce:	1c9a      	adds	r2, r3, #2
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	621a      	str	r2, [r3, #32]
 80078d4:	e008      	b.n	80078e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a1b      	ldr	r3, [r3, #32]
 80078da:	1c59      	adds	r1, r3, #1
 80078dc:	687a      	ldr	r2, [r7, #4]
 80078de:	6211      	str	r1, [r2, #32]
 80078e0:	781a      	ldrb	r2, [r3, #0]
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80078ec:	b29b      	uxth	r3, r3
 80078ee:	3b01      	subs	r3, #1
 80078f0:	b29b      	uxth	r3, r3
 80078f2:	687a      	ldr	r2, [r7, #4]
 80078f4:	4619      	mov	r1, r3
 80078f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80078f8:	2b00      	cmp	r3, #0
 80078fa:	d10f      	bne.n	800791c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	68da      	ldr	r2, [r3, #12]
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800790a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	68da      	ldr	r2, [r3, #12]
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800791a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800791c:	2300      	movs	r3, #0
 800791e:	e000      	b.n	8007922 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007920:	2302      	movs	r3, #2
  }
}
 8007922:	4618      	mov	r0, r3
 8007924:	3714      	adds	r7, #20
 8007926:	46bd      	mov	sp, r7
 8007928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792c:	4770      	bx	lr

0800792e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800792e:	b580      	push	{r7, lr}
 8007930:	b082      	sub	sp, #8
 8007932:	af00      	add	r7, sp, #0
 8007934:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	68da      	ldr	r2, [r3, #12]
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007944:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2220      	movs	r2, #32
 800794a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800794e:	6878      	ldr	r0, [r7, #4]
 8007950:	f7ff fe5a 	bl	8007608 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007954:	2300      	movs	r3, #0
}
 8007956:	4618      	mov	r0, r3
 8007958:	3708      	adds	r7, #8
 800795a:	46bd      	mov	sp, r7
 800795c:	bd80      	pop	{r7, pc}

0800795e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800795e:	b580      	push	{r7, lr}
 8007960:	b08c      	sub	sp, #48	; 0x30
 8007962:	af00      	add	r7, sp, #0
 8007964:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800796c:	b2db      	uxtb	r3, r3
 800796e:	2b22      	cmp	r3, #34	; 0x22
 8007970:	f040 80ab 	bne.w	8007aca <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	689b      	ldr	r3, [r3, #8]
 8007978:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800797c:	d117      	bne.n	80079ae <UART_Receive_IT+0x50>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	691b      	ldr	r3, [r3, #16]
 8007982:	2b00      	cmp	r3, #0
 8007984:	d113      	bne.n	80079ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007986:	2300      	movs	r3, #0
 8007988:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800798e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	685b      	ldr	r3, [r3, #4]
 8007996:	b29b      	uxth	r3, r3
 8007998:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800799c:	b29a      	uxth	r2, r3
 800799e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079a6:	1c9a      	adds	r2, r3, #2
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
 80079ac:	e026      	b.n	80079fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079b2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079b4:	2300      	movs	r3, #0
 80079b6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	d007      	beq.n	80079d2 <UART_Receive_IT+0x74>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d10a      	bne.n	80079e0 <UART_Receive_IT+0x82>
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	691b      	ldr	r3, [r3, #16]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d106      	bne.n	80079e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	685b      	ldr	r3, [r3, #4]
 80079d8:	b2da      	uxtb	r2, r3
 80079da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079dc:	701a      	strb	r2, [r3, #0]
 80079de:	e008      	b.n	80079f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	685b      	ldr	r3, [r3, #4]
 80079e6:	b2db      	uxtb	r3, r3
 80079e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079ec:	b2da      	uxtb	r2, r3
 80079ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	1c5a      	adds	r2, r3, #1
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a00:	b29b      	uxth	r3, r3
 8007a02:	3b01      	subs	r3, #1
 8007a04:	b29b      	uxth	r3, r3
 8007a06:	687a      	ldr	r2, [r7, #4]
 8007a08:	4619      	mov	r1, r3
 8007a0a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d15a      	bne.n	8007ac6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68da      	ldr	r2, [r3, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f022 0220 	bic.w	r2, r2, #32
 8007a1e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a2e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	695a      	ldr	r2, [r3, #20]
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f022 0201 	bic.w	r2, r2, #1
 8007a3e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	2220      	movs	r2, #32
 8007a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d135      	bne.n	8007abc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	2200      	movs	r2, #0
 8007a54:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	330c      	adds	r3, #12
 8007a5c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	697b      	ldr	r3, [r7, #20]
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	613b      	str	r3, [r7, #16]
   return(result);
 8007a66:	693b      	ldr	r3, [r7, #16]
 8007a68:	f023 0310 	bic.w	r3, r3, #16
 8007a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	330c      	adds	r3, #12
 8007a74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007a76:	623a      	str	r2, [r7, #32]
 8007a78:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	69f9      	ldr	r1, [r7, #28]
 8007a7c:	6a3a      	ldr	r2, [r7, #32]
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a84:	69bb      	ldr	r3, [r7, #24]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e5      	bne.n	8007a56 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	f003 0310 	and.w	r3, r3, #16
 8007a94:	2b10      	cmp	r3, #16
 8007a96:	d10a      	bne.n	8007aae <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	60fb      	str	r3, [r7, #12]
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	60fb      	str	r3, [r7, #12]
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	685b      	ldr	r3, [r3, #4]
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f7ff fdbb 	bl	8007630 <HAL_UARTEx_RxEventCallback>
 8007aba:	e002      	b.n	8007ac2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007abc:	6878      	ldr	r0, [r7, #4]
 8007abe:	f7fb f97b 	bl	8002db8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	e002      	b.n	8007acc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007ac6:	2300      	movs	r3, #0
 8007ac8:	e000      	b.n	8007acc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007aca:	2302      	movs	r3, #2
  }
}
 8007acc:	4618      	mov	r0, r3
 8007ace:	3730      	adds	r7, #48	; 0x30
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	bd80      	pop	{r7, pc}

08007ad4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007ad4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007ad8:	b0c0      	sub	sp, #256	; 0x100
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ae0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	691b      	ldr	r3, [r3, #16]
 8007ae8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007aec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af0:	68d9      	ldr	r1, [r3, #12]
 8007af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	ea40 0301 	orr.w	r3, r0, r1
 8007afc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007afe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b02:	689a      	ldr	r2, [r3, #8]
 8007b04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b08:	691b      	ldr	r3, [r3, #16]
 8007b0a:	431a      	orrs	r2, r3
 8007b0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b10:	695b      	ldr	r3, [r3, #20]
 8007b12:	431a      	orrs	r2, r3
 8007b14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b18:	69db      	ldr	r3, [r3, #28]
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	68db      	ldr	r3, [r3, #12]
 8007b28:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b2c:	f021 010c 	bic.w	r1, r1, #12
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	681a      	ldr	r2, [r3, #0]
 8007b36:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b3a:	430b      	orrs	r3, r1
 8007b3c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	695b      	ldr	r3, [r3, #20]
 8007b46:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4e:	6999      	ldr	r1, [r3, #24]
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b54:	681a      	ldr	r2, [r3, #0]
 8007b56:	ea40 0301 	orr.w	r3, r0, r1
 8007b5a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007b5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	4b8f      	ldr	r3, [pc, #572]	; (8007da0 <UART_SetConfig+0x2cc>)
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d005      	beq.n	8007b74 <UART_SetConfig+0xa0>
 8007b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	4b8d      	ldr	r3, [pc, #564]	; (8007da4 <UART_SetConfig+0x2d0>)
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d104      	bne.n	8007b7e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007b74:	f7fe fd14 	bl	80065a0 <HAL_RCC_GetPCLK2Freq>
 8007b78:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007b7c:	e003      	b.n	8007b86 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007b7e:	f7fe fcfb 	bl	8006578 <HAL_RCC_GetPCLK1Freq>
 8007b82:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007b86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b8a:	69db      	ldr	r3, [r3, #28]
 8007b8c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007b90:	f040 810c 	bne.w	8007dac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007b94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b9e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007ba2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007ba6:	4622      	mov	r2, r4
 8007ba8:	462b      	mov	r3, r5
 8007baa:	1891      	adds	r1, r2, r2
 8007bac:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bae:	415b      	adcs	r3, r3
 8007bb0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bb2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bb6:	4621      	mov	r1, r4
 8007bb8:	eb12 0801 	adds.w	r8, r2, r1
 8007bbc:	4629      	mov	r1, r5
 8007bbe:	eb43 0901 	adc.w	r9, r3, r1
 8007bc2:	f04f 0200 	mov.w	r2, #0
 8007bc6:	f04f 0300 	mov.w	r3, #0
 8007bca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007bce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007bd2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007bd6:	4690      	mov	r8, r2
 8007bd8:	4699      	mov	r9, r3
 8007bda:	4623      	mov	r3, r4
 8007bdc:	eb18 0303 	adds.w	r3, r8, r3
 8007be0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007be4:	462b      	mov	r3, r5
 8007be6:	eb49 0303 	adc.w	r3, r9, r3
 8007bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bfa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007bfe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c02:	460b      	mov	r3, r1
 8007c04:	18db      	adds	r3, r3, r3
 8007c06:	653b      	str	r3, [r7, #80]	; 0x50
 8007c08:	4613      	mov	r3, r2
 8007c0a:	eb42 0303 	adc.w	r3, r2, r3
 8007c0e:	657b      	str	r3, [r7, #84]	; 0x54
 8007c10:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c14:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c18:	f7f8 fb4a 	bl	80002b0 <__aeabi_uldivmod>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4b61      	ldr	r3, [pc, #388]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007c22:	fba3 2302 	umull	r2, r3, r3, r2
 8007c26:	095b      	lsrs	r3, r3, #5
 8007c28:	011c      	lsls	r4, r3, #4
 8007c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c2e:	2200      	movs	r2, #0
 8007c30:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c34:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c38:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c3c:	4642      	mov	r2, r8
 8007c3e:	464b      	mov	r3, r9
 8007c40:	1891      	adds	r1, r2, r2
 8007c42:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c44:	415b      	adcs	r3, r3
 8007c46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c48:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c4c:	4641      	mov	r1, r8
 8007c4e:	eb12 0a01 	adds.w	sl, r2, r1
 8007c52:	4649      	mov	r1, r9
 8007c54:	eb43 0b01 	adc.w	fp, r3, r1
 8007c58:	f04f 0200 	mov.w	r2, #0
 8007c5c:	f04f 0300 	mov.w	r3, #0
 8007c60:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007c64:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007c68:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007c6c:	4692      	mov	sl, r2
 8007c6e:	469b      	mov	fp, r3
 8007c70:	4643      	mov	r3, r8
 8007c72:	eb1a 0303 	adds.w	r3, sl, r3
 8007c76:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007c7a:	464b      	mov	r3, r9
 8007c7c:	eb4b 0303 	adc.w	r3, fp, r3
 8007c80:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c88:	685b      	ldr	r3, [r3, #4]
 8007c8a:	2200      	movs	r2, #0
 8007c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c90:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007c94:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007c98:	460b      	mov	r3, r1
 8007c9a:	18db      	adds	r3, r3, r3
 8007c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	eb42 0303 	adc.w	r3, r2, r3
 8007ca4:	647b      	str	r3, [r7, #68]	; 0x44
 8007ca6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007caa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cae:	f7f8 faff 	bl	80002b0 <__aeabi_uldivmod>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4611      	mov	r1, r2
 8007cb8:	4b3b      	ldr	r3, [pc, #236]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007cba:	fba3 2301 	umull	r2, r3, r3, r1
 8007cbe:	095b      	lsrs	r3, r3, #5
 8007cc0:	2264      	movs	r2, #100	; 0x64
 8007cc2:	fb02 f303 	mul.w	r3, r2, r3
 8007cc6:	1acb      	subs	r3, r1, r3
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007cce:	4b36      	ldr	r3, [pc, #216]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007cd0:	fba3 2302 	umull	r2, r3, r3, r2
 8007cd4:	095b      	lsrs	r3, r3, #5
 8007cd6:	005b      	lsls	r3, r3, #1
 8007cd8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007cdc:	441c      	add	r4, r3
 8007cde:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ce8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007cec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007cf0:	4642      	mov	r2, r8
 8007cf2:	464b      	mov	r3, r9
 8007cf4:	1891      	adds	r1, r2, r2
 8007cf6:	63b9      	str	r1, [r7, #56]	; 0x38
 8007cf8:	415b      	adcs	r3, r3
 8007cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007cfc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d00:	4641      	mov	r1, r8
 8007d02:	1851      	adds	r1, r2, r1
 8007d04:	6339      	str	r1, [r7, #48]	; 0x30
 8007d06:	4649      	mov	r1, r9
 8007d08:	414b      	adcs	r3, r1
 8007d0a:	637b      	str	r3, [r7, #52]	; 0x34
 8007d0c:	f04f 0200 	mov.w	r2, #0
 8007d10:	f04f 0300 	mov.w	r3, #0
 8007d14:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d18:	4659      	mov	r1, fp
 8007d1a:	00cb      	lsls	r3, r1, #3
 8007d1c:	4651      	mov	r1, sl
 8007d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d22:	4651      	mov	r1, sl
 8007d24:	00ca      	lsls	r2, r1, #3
 8007d26:	4610      	mov	r0, r2
 8007d28:	4619      	mov	r1, r3
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	4642      	mov	r2, r8
 8007d2e:	189b      	adds	r3, r3, r2
 8007d30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d34:	464b      	mov	r3, r9
 8007d36:	460a      	mov	r2, r1
 8007d38:	eb42 0303 	adc.w	r3, r2, r3
 8007d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d4c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d54:	460b      	mov	r3, r1
 8007d56:	18db      	adds	r3, r3, r3
 8007d58:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d5a:	4613      	mov	r3, r2
 8007d5c:	eb42 0303 	adc.w	r3, r2, r3
 8007d60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d62:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007d66:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007d6a:	f7f8 faa1 	bl	80002b0 <__aeabi_uldivmod>
 8007d6e:	4602      	mov	r2, r0
 8007d70:	460b      	mov	r3, r1
 8007d72:	4b0d      	ldr	r3, [pc, #52]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007d74:	fba3 1302 	umull	r1, r3, r3, r2
 8007d78:	095b      	lsrs	r3, r3, #5
 8007d7a:	2164      	movs	r1, #100	; 0x64
 8007d7c:	fb01 f303 	mul.w	r3, r1, r3
 8007d80:	1ad3      	subs	r3, r2, r3
 8007d82:	00db      	lsls	r3, r3, #3
 8007d84:	3332      	adds	r3, #50	; 0x32
 8007d86:	4a08      	ldr	r2, [pc, #32]	; (8007da8 <UART_SetConfig+0x2d4>)
 8007d88:	fba2 2303 	umull	r2, r3, r2, r3
 8007d8c:	095b      	lsrs	r3, r3, #5
 8007d8e:	f003 0207 	and.w	r2, r3, #7
 8007d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4422      	add	r2, r4
 8007d9a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007d9c:	e106      	b.n	8007fac <UART_SetConfig+0x4d8>
 8007d9e:	bf00      	nop
 8007da0:	40011000 	.word	0x40011000
 8007da4:	40011400 	.word	0x40011400
 8007da8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db0:	2200      	movs	r2, #0
 8007db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007db6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007dba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007dbe:	4642      	mov	r2, r8
 8007dc0:	464b      	mov	r3, r9
 8007dc2:	1891      	adds	r1, r2, r2
 8007dc4:	6239      	str	r1, [r7, #32]
 8007dc6:	415b      	adcs	r3, r3
 8007dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8007dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007dce:	4641      	mov	r1, r8
 8007dd0:	1854      	adds	r4, r2, r1
 8007dd2:	4649      	mov	r1, r9
 8007dd4:	eb43 0501 	adc.w	r5, r3, r1
 8007dd8:	f04f 0200 	mov.w	r2, #0
 8007ddc:	f04f 0300 	mov.w	r3, #0
 8007de0:	00eb      	lsls	r3, r5, #3
 8007de2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007de6:	00e2      	lsls	r2, r4, #3
 8007de8:	4614      	mov	r4, r2
 8007dea:	461d      	mov	r5, r3
 8007dec:	4643      	mov	r3, r8
 8007dee:	18e3      	adds	r3, r4, r3
 8007df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007df4:	464b      	mov	r3, r9
 8007df6:	eb45 0303 	adc.w	r3, r5, r3
 8007dfa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e02:	685b      	ldr	r3, [r3, #4]
 8007e04:	2200      	movs	r2, #0
 8007e06:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e0a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e0e:	f04f 0200 	mov.w	r2, #0
 8007e12:	f04f 0300 	mov.w	r3, #0
 8007e16:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	008b      	lsls	r3, r1, #2
 8007e1e:	4621      	mov	r1, r4
 8007e20:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e24:	4621      	mov	r1, r4
 8007e26:	008a      	lsls	r2, r1, #2
 8007e28:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e2c:	f7f8 fa40 	bl	80002b0 <__aeabi_uldivmod>
 8007e30:	4602      	mov	r2, r0
 8007e32:	460b      	mov	r3, r1
 8007e34:	4b60      	ldr	r3, [pc, #384]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007e36:	fba3 2302 	umull	r2, r3, r3, r2
 8007e3a:	095b      	lsrs	r3, r3, #5
 8007e3c:	011c      	lsls	r4, r3, #4
 8007e3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e42:	2200      	movs	r2, #0
 8007e44:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e48:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e4c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e50:	4642      	mov	r2, r8
 8007e52:	464b      	mov	r3, r9
 8007e54:	1891      	adds	r1, r2, r2
 8007e56:	61b9      	str	r1, [r7, #24]
 8007e58:	415b      	adcs	r3, r3
 8007e5a:	61fb      	str	r3, [r7, #28]
 8007e5c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e60:	4641      	mov	r1, r8
 8007e62:	1851      	adds	r1, r2, r1
 8007e64:	6139      	str	r1, [r7, #16]
 8007e66:	4649      	mov	r1, r9
 8007e68:	414b      	adcs	r3, r1
 8007e6a:	617b      	str	r3, [r7, #20]
 8007e6c:	f04f 0200 	mov.w	r2, #0
 8007e70:	f04f 0300 	mov.w	r3, #0
 8007e74:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007e78:	4659      	mov	r1, fp
 8007e7a:	00cb      	lsls	r3, r1, #3
 8007e7c:	4651      	mov	r1, sl
 8007e7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e82:	4651      	mov	r1, sl
 8007e84:	00ca      	lsls	r2, r1, #3
 8007e86:	4610      	mov	r0, r2
 8007e88:	4619      	mov	r1, r3
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	4642      	mov	r2, r8
 8007e8e:	189b      	adds	r3, r3, r2
 8007e90:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007e94:	464b      	mov	r3, r9
 8007e96:	460a      	mov	r2, r1
 8007e98:	eb42 0303 	adc.w	r3, r2, r3
 8007e9c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ea0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ea4:	685b      	ldr	r3, [r3, #4]
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eaa:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007eac:	f04f 0200 	mov.w	r2, #0
 8007eb0:	f04f 0300 	mov.w	r3, #0
 8007eb4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007eb8:	4649      	mov	r1, r9
 8007eba:	008b      	lsls	r3, r1, #2
 8007ebc:	4641      	mov	r1, r8
 8007ebe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007ec2:	4641      	mov	r1, r8
 8007ec4:	008a      	lsls	r2, r1, #2
 8007ec6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007eca:	f7f8 f9f1 	bl	80002b0 <__aeabi_uldivmod>
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	4611      	mov	r1, r2
 8007ed4:	4b38      	ldr	r3, [pc, #224]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007ed6:	fba3 2301 	umull	r2, r3, r3, r1
 8007eda:	095b      	lsrs	r3, r3, #5
 8007edc:	2264      	movs	r2, #100	; 0x64
 8007ede:	fb02 f303 	mul.w	r3, r2, r3
 8007ee2:	1acb      	subs	r3, r1, r3
 8007ee4:	011b      	lsls	r3, r3, #4
 8007ee6:	3332      	adds	r3, #50	; 0x32
 8007ee8:	4a33      	ldr	r2, [pc, #204]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007eea:	fba2 2303 	umull	r2, r3, r2, r3
 8007eee:	095b      	lsrs	r3, r3, #5
 8007ef0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ef4:	441c      	add	r4, r3
 8007ef6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007efa:	2200      	movs	r2, #0
 8007efc:	673b      	str	r3, [r7, #112]	; 0x70
 8007efe:	677a      	str	r2, [r7, #116]	; 0x74
 8007f00:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f04:	4642      	mov	r2, r8
 8007f06:	464b      	mov	r3, r9
 8007f08:	1891      	adds	r1, r2, r2
 8007f0a:	60b9      	str	r1, [r7, #8]
 8007f0c:	415b      	adcs	r3, r3
 8007f0e:	60fb      	str	r3, [r7, #12]
 8007f10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f14:	4641      	mov	r1, r8
 8007f16:	1851      	adds	r1, r2, r1
 8007f18:	6039      	str	r1, [r7, #0]
 8007f1a:	4649      	mov	r1, r9
 8007f1c:	414b      	adcs	r3, r1
 8007f1e:	607b      	str	r3, [r7, #4]
 8007f20:	f04f 0200 	mov.w	r2, #0
 8007f24:	f04f 0300 	mov.w	r3, #0
 8007f28:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f2c:	4659      	mov	r1, fp
 8007f2e:	00cb      	lsls	r3, r1, #3
 8007f30:	4651      	mov	r1, sl
 8007f32:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f36:	4651      	mov	r1, sl
 8007f38:	00ca      	lsls	r2, r1, #3
 8007f3a:	4610      	mov	r0, r2
 8007f3c:	4619      	mov	r1, r3
 8007f3e:	4603      	mov	r3, r0
 8007f40:	4642      	mov	r2, r8
 8007f42:	189b      	adds	r3, r3, r2
 8007f44:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f46:	464b      	mov	r3, r9
 8007f48:	460a      	mov	r2, r1
 8007f4a:	eb42 0303 	adc.w	r3, r2, r3
 8007f4e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f54:	685b      	ldr	r3, [r3, #4]
 8007f56:	2200      	movs	r2, #0
 8007f58:	663b      	str	r3, [r7, #96]	; 0x60
 8007f5a:	667a      	str	r2, [r7, #100]	; 0x64
 8007f5c:	f04f 0200 	mov.w	r2, #0
 8007f60:	f04f 0300 	mov.w	r3, #0
 8007f64:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007f68:	4649      	mov	r1, r9
 8007f6a:	008b      	lsls	r3, r1, #2
 8007f6c:	4641      	mov	r1, r8
 8007f6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f72:	4641      	mov	r1, r8
 8007f74:	008a      	lsls	r2, r1, #2
 8007f76:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007f7a:	f7f8 f999 	bl	80002b0 <__aeabi_uldivmod>
 8007f7e:	4602      	mov	r2, r0
 8007f80:	460b      	mov	r3, r1
 8007f82:	4b0d      	ldr	r3, [pc, #52]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007f84:	fba3 1302 	umull	r1, r3, r3, r2
 8007f88:	095b      	lsrs	r3, r3, #5
 8007f8a:	2164      	movs	r1, #100	; 0x64
 8007f8c:	fb01 f303 	mul.w	r3, r1, r3
 8007f90:	1ad3      	subs	r3, r2, r3
 8007f92:	011b      	lsls	r3, r3, #4
 8007f94:	3332      	adds	r3, #50	; 0x32
 8007f96:	4a08      	ldr	r2, [pc, #32]	; (8007fb8 <UART_SetConfig+0x4e4>)
 8007f98:	fba2 2303 	umull	r2, r3, r2, r3
 8007f9c:	095b      	lsrs	r3, r3, #5
 8007f9e:	f003 020f 	and.w	r2, r3, #15
 8007fa2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	4422      	add	r2, r4
 8007faa:	609a      	str	r2, [r3, #8]
}
 8007fac:	bf00      	nop
 8007fae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007fb8:	51eb851f 	.word	0x51eb851f

08007fbc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007fbc:	b084      	sub	sp, #16
 8007fbe:	b580      	push	{r7, lr}
 8007fc0:	b084      	sub	sp, #16
 8007fc2:	af00      	add	r7, sp, #0
 8007fc4:	6078      	str	r0, [r7, #4]
 8007fc6:	f107 001c 	add.w	r0, r7, #28
 8007fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007fd0:	2b01      	cmp	r3, #1
 8007fd2:	d122      	bne.n	800801a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68db      	ldr	r3, [r3, #12]
 8007fe4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8007fe8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	68db      	ldr	r3, [r3, #12]
 8007ff4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ffe:	2b01      	cmp	r3, #1
 8008000:	d105      	bne.n	800800e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	68db      	ldr	r3, [r3, #12]
 8008006:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800800e:	6878      	ldr	r0, [r7, #4]
 8008010:	f001 fbee 	bl	80097f0 <USB_CoreReset>
 8008014:	4603      	mov	r3, r0
 8008016:	73fb      	strb	r3, [r7, #15]
 8008018:	e01a      	b.n	8008050 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	68db      	ldr	r3, [r3, #12]
 800801e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f001 fbe2 	bl	80097f0 <USB_CoreReset>
 800802c:	4603      	mov	r3, r0
 800802e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008032:	2b00      	cmp	r3, #0
 8008034:	d106      	bne.n	8008044 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800803a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	639a      	str	r2, [r3, #56]	; 0x38
 8008042:	e005      	b.n	8008050 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008048:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	2b01      	cmp	r3, #1
 8008054:	d10b      	bne.n	800806e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	689b      	ldr	r3, [r3, #8]
 800805a:	f043 0206 	orr.w	r2, r3, #6
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	f043 0220 	orr.w	r2, r3, #32
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3710      	adds	r7, #16
 8008074:	46bd      	mov	sp, r7
 8008076:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800807a:	b004      	add	sp, #16
 800807c:	4770      	bx	lr
	...

08008080 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008080:	b480      	push	{r7}
 8008082:	b087      	sub	sp, #28
 8008084:	af00      	add	r7, sp, #0
 8008086:	60f8      	str	r0, [r7, #12]
 8008088:	60b9      	str	r1, [r7, #8]
 800808a:	4613      	mov	r3, r2
 800808c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800808e:	79fb      	ldrb	r3, [r7, #7]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d165      	bne.n	8008160 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008094:	68bb      	ldr	r3, [r7, #8]
 8008096:	4a41      	ldr	r2, [pc, #260]	; (800819c <USB_SetTurnaroundTime+0x11c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d906      	bls.n	80080aa <USB_SetTurnaroundTime+0x2a>
 800809c:	68bb      	ldr	r3, [r7, #8]
 800809e:	4a40      	ldr	r2, [pc, #256]	; (80081a0 <USB_SetTurnaroundTime+0x120>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d202      	bcs.n	80080aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80080a4:	230f      	movs	r3, #15
 80080a6:	617b      	str	r3, [r7, #20]
 80080a8:	e062      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80080aa:	68bb      	ldr	r3, [r7, #8]
 80080ac:	4a3c      	ldr	r2, [pc, #240]	; (80081a0 <USB_SetTurnaroundTime+0x120>)
 80080ae:	4293      	cmp	r3, r2
 80080b0:	d306      	bcc.n	80080c0 <USB_SetTurnaroundTime+0x40>
 80080b2:	68bb      	ldr	r3, [r7, #8]
 80080b4:	4a3b      	ldr	r2, [pc, #236]	; (80081a4 <USB_SetTurnaroundTime+0x124>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d202      	bcs.n	80080c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80080ba:	230e      	movs	r3, #14
 80080bc:	617b      	str	r3, [r7, #20]
 80080be:	e057      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80080c0:	68bb      	ldr	r3, [r7, #8]
 80080c2:	4a38      	ldr	r2, [pc, #224]	; (80081a4 <USB_SetTurnaroundTime+0x124>)
 80080c4:	4293      	cmp	r3, r2
 80080c6:	d306      	bcc.n	80080d6 <USB_SetTurnaroundTime+0x56>
 80080c8:	68bb      	ldr	r3, [r7, #8]
 80080ca:	4a37      	ldr	r2, [pc, #220]	; (80081a8 <USB_SetTurnaroundTime+0x128>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d202      	bcs.n	80080d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80080d0:	230d      	movs	r3, #13
 80080d2:	617b      	str	r3, [r7, #20]
 80080d4:	e04c      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80080d6:	68bb      	ldr	r3, [r7, #8]
 80080d8:	4a33      	ldr	r2, [pc, #204]	; (80081a8 <USB_SetTurnaroundTime+0x128>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d306      	bcc.n	80080ec <USB_SetTurnaroundTime+0x6c>
 80080de:	68bb      	ldr	r3, [r7, #8]
 80080e0:	4a32      	ldr	r2, [pc, #200]	; (80081ac <USB_SetTurnaroundTime+0x12c>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d802      	bhi.n	80080ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80080e6:	230c      	movs	r3, #12
 80080e8:	617b      	str	r3, [r7, #20]
 80080ea:	e041      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80080ec:	68bb      	ldr	r3, [r7, #8]
 80080ee:	4a2f      	ldr	r2, [pc, #188]	; (80081ac <USB_SetTurnaroundTime+0x12c>)
 80080f0:	4293      	cmp	r3, r2
 80080f2:	d906      	bls.n	8008102 <USB_SetTurnaroundTime+0x82>
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	4a2e      	ldr	r2, [pc, #184]	; (80081b0 <USB_SetTurnaroundTime+0x130>)
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d802      	bhi.n	8008102 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80080fc:	230b      	movs	r3, #11
 80080fe:	617b      	str	r3, [r7, #20]
 8008100:	e036      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008102:	68bb      	ldr	r3, [r7, #8]
 8008104:	4a2a      	ldr	r2, [pc, #168]	; (80081b0 <USB_SetTurnaroundTime+0x130>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d906      	bls.n	8008118 <USB_SetTurnaroundTime+0x98>
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	4a29      	ldr	r2, [pc, #164]	; (80081b4 <USB_SetTurnaroundTime+0x134>)
 800810e:	4293      	cmp	r3, r2
 8008110:	d802      	bhi.n	8008118 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008112:	230a      	movs	r3, #10
 8008114:	617b      	str	r3, [r7, #20]
 8008116:	e02b      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	4a26      	ldr	r2, [pc, #152]	; (80081b4 <USB_SetTurnaroundTime+0x134>)
 800811c:	4293      	cmp	r3, r2
 800811e:	d906      	bls.n	800812e <USB_SetTurnaroundTime+0xae>
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	4a25      	ldr	r2, [pc, #148]	; (80081b8 <USB_SetTurnaroundTime+0x138>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d202      	bcs.n	800812e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008128:	2309      	movs	r3, #9
 800812a:	617b      	str	r3, [r7, #20]
 800812c:	e020      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800812e:	68bb      	ldr	r3, [r7, #8]
 8008130:	4a21      	ldr	r2, [pc, #132]	; (80081b8 <USB_SetTurnaroundTime+0x138>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d306      	bcc.n	8008144 <USB_SetTurnaroundTime+0xc4>
 8008136:	68bb      	ldr	r3, [r7, #8]
 8008138:	4a20      	ldr	r2, [pc, #128]	; (80081bc <USB_SetTurnaroundTime+0x13c>)
 800813a:	4293      	cmp	r3, r2
 800813c:	d802      	bhi.n	8008144 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800813e:	2308      	movs	r3, #8
 8008140:	617b      	str	r3, [r7, #20]
 8008142:	e015      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008144:	68bb      	ldr	r3, [r7, #8]
 8008146:	4a1d      	ldr	r2, [pc, #116]	; (80081bc <USB_SetTurnaroundTime+0x13c>)
 8008148:	4293      	cmp	r3, r2
 800814a:	d906      	bls.n	800815a <USB_SetTurnaroundTime+0xda>
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	4a1c      	ldr	r2, [pc, #112]	; (80081c0 <USB_SetTurnaroundTime+0x140>)
 8008150:	4293      	cmp	r3, r2
 8008152:	d202      	bcs.n	800815a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008154:	2307      	movs	r3, #7
 8008156:	617b      	str	r3, [r7, #20]
 8008158:	e00a      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800815a:	2306      	movs	r3, #6
 800815c:	617b      	str	r3, [r7, #20]
 800815e:	e007      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008160:	79fb      	ldrb	r3, [r7, #7]
 8008162:	2b00      	cmp	r3, #0
 8008164:	d102      	bne.n	800816c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008166:	2309      	movs	r3, #9
 8008168:	617b      	str	r3, [r7, #20]
 800816a:	e001      	b.n	8008170 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800816c:	2309      	movs	r3, #9
 800816e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	68da      	ldr	r2, [r3, #12]
 8008180:	697b      	ldr	r3, [r7, #20]
 8008182:	029b      	lsls	r3, r3, #10
 8008184:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008188:	431a      	orrs	r2, r3
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	371c      	adds	r7, #28
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr
 800819c:	00d8acbf 	.word	0x00d8acbf
 80081a0:	00e4e1c0 	.word	0x00e4e1c0
 80081a4:	00f42400 	.word	0x00f42400
 80081a8:	01067380 	.word	0x01067380
 80081ac:	011a499f 	.word	0x011a499f
 80081b0:	01312cff 	.word	0x01312cff
 80081b4:	014ca43f 	.word	0x014ca43f
 80081b8:	016e3600 	.word	0x016e3600
 80081bc:	01a6ab1f 	.word	0x01a6ab1f
 80081c0:	01e84800 	.word	0x01e84800

080081c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081c4:	b480      	push	{r7}
 80081c6:	b083      	sub	sp, #12
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	689b      	ldr	r3, [r3, #8]
 80081d0:	f043 0201 	orr.w	r2, r3, #1
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	370c      	adds	r7, #12
 80081de:	46bd      	mov	sp, r7
 80081e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e4:	4770      	bx	lr

080081e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80081e6:	b480      	push	{r7}
 80081e8:	b083      	sub	sp, #12
 80081ea:	af00      	add	r7, sp, #0
 80081ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	689b      	ldr	r3, [r3, #8]
 80081f2:	f023 0201 	bic.w	r2, r3, #1
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80081fa:	2300      	movs	r3, #0
}
 80081fc:	4618      	mov	r0, r3
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008208:	b580      	push	{r7, lr}
 800820a:	b084      	sub	sp, #16
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
 8008210:	460b      	mov	r3, r1
 8008212:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008214:	2300      	movs	r3, #0
 8008216:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008224:	78fb      	ldrb	r3, [r7, #3]
 8008226:	2b01      	cmp	r3, #1
 8008228:	d115      	bne.n	8008256 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	68db      	ldr	r3, [r3, #12]
 800822e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008236:	2001      	movs	r0, #1
 8008238:	f7fb f942 	bl	80034c0 <HAL_Delay>
      ms++;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	3301      	adds	r3, #1
 8008240:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008242:	6878      	ldr	r0, [r7, #4]
 8008244:	f001 fa45 	bl	80096d2 <USB_GetMode>
 8008248:	4603      	mov	r3, r0
 800824a:	2b01      	cmp	r3, #1
 800824c:	d01e      	beq.n	800828c <USB_SetCurrentMode+0x84>
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	2b31      	cmp	r3, #49	; 0x31
 8008252:	d9f0      	bls.n	8008236 <USB_SetCurrentMode+0x2e>
 8008254:	e01a      	b.n	800828c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008256:	78fb      	ldrb	r3, [r7, #3]
 8008258:	2b00      	cmp	r3, #0
 800825a:	d115      	bne.n	8008288 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008268:	2001      	movs	r0, #1
 800826a:	f7fb f929 	bl	80034c0 <HAL_Delay>
      ms++;
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	3301      	adds	r3, #1
 8008272:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008274:	6878      	ldr	r0, [r7, #4]
 8008276:	f001 fa2c 	bl	80096d2 <USB_GetMode>
 800827a:	4603      	mov	r3, r0
 800827c:	2b00      	cmp	r3, #0
 800827e:	d005      	beq.n	800828c <USB_SetCurrentMode+0x84>
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	2b31      	cmp	r3, #49	; 0x31
 8008284:	d9f0      	bls.n	8008268 <USB_SetCurrentMode+0x60>
 8008286:	e001      	b.n	800828c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008288:	2301      	movs	r3, #1
 800828a:	e005      	b.n	8008298 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	2b32      	cmp	r3, #50	; 0x32
 8008290:	d101      	bne.n	8008296 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008292:	2301      	movs	r3, #1
 8008294:	e000      	b.n	8008298 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008296:	2300      	movs	r3, #0
}
 8008298:	4618      	mov	r0, r3
 800829a:	3710      	adds	r7, #16
 800829c:	46bd      	mov	sp, r7
 800829e:	bd80      	pop	{r7, pc}

080082a0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80082a0:	b084      	sub	sp, #16
 80082a2:	b580      	push	{r7, lr}
 80082a4:	b086      	sub	sp, #24
 80082a6:	af00      	add	r7, sp, #0
 80082a8:	6078      	str	r0, [r7, #4]
 80082aa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80082ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80082ba:	2300      	movs	r3, #0
 80082bc:	613b      	str	r3, [r7, #16]
 80082be:	e009      	b.n	80082d4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80082c0:	687a      	ldr	r2, [r7, #4]
 80082c2:	693b      	ldr	r3, [r7, #16]
 80082c4:	3340      	adds	r3, #64	; 0x40
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	4413      	add	r3, r2
 80082ca:	2200      	movs	r2, #0
 80082cc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80082ce:	693b      	ldr	r3, [r7, #16]
 80082d0:	3301      	adds	r3, #1
 80082d2:	613b      	str	r3, [r7, #16]
 80082d4:	693b      	ldr	r3, [r7, #16]
 80082d6:	2b0e      	cmp	r3, #14
 80082d8:	d9f2      	bls.n	80082c0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80082da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d11c      	bne.n	800831a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082e6:	685b      	ldr	r3, [r3, #4]
 80082e8:	68fa      	ldr	r2, [r7, #12]
 80082ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082ee:	f043 0302 	orr.w	r3, r3, #2
 80082f2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082f8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008304:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008310:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	639a      	str	r2, [r3, #56]	; 0x38
 8008318:	e00b      	b.n	8008332 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800831e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800832a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008338:	461a      	mov	r2, r3
 800833a:	2300      	movs	r3, #0
 800833c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008344:	4619      	mov	r1, r3
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800834c:	461a      	mov	r2, r3
 800834e:	680b      	ldr	r3, [r1, #0]
 8008350:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008354:	2b01      	cmp	r3, #1
 8008356:	d10c      	bne.n	8008372 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800835a:	2b00      	cmp	r3, #0
 800835c:	d104      	bne.n	8008368 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800835e:	2100      	movs	r1, #0
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 f965 	bl	8008630 <USB_SetDevSpeed>
 8008366:	e008      	b.n	800837a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008368:	2101      	movs	r1, #1
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 f960 	bl	8008630 <USB_SetDevSpeed>
 8008370:	e003      	b.n	800837a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008372:	2103      	movs	r1, #3
 8008374:	6878      	ldr	r0, [r7, #4]
 8008376:	f000 f95b 	bl	8008630 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800837a:	2110      	movs	r1, #16
 800837c:	6878      	ldr	r0, [r7, #4]
 800837e:	f000 f8f3 	bl	8008568 <USB_FlushTxFifo>
 8008382:	4603      	mov	r3, r0
 8008384:	2b00      	cmp	r3, #0
 8008386:	d001      	beq.n	800838c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008388:	2301      	movs	r3, #1
 800838a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800838c:	6878      	ldr	r0, [r7, #4]
 800838e:	f000 f91f 	bl	80085d0 <USB_FlushRxFifo>
 8008392:	4603      	mov	r3, r0
 8008394:	2b00      	cmp	r3, #0
 8008396:	d001      	beq.n	800839c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008398:	2301      	movs	r3, #1
 800839a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083a2:	461a      	mov	r2, r3
 80083a4:	2300      	movs	r3, #0
 80083a6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ae:	461a      	mov	r2, r3
 80083b0:	2300      	movs	r3, #0
 80083b2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083ba:	461a      	mov	r2, r3
 80083bc:	2300      	movs	r3, #0
 80083be:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80083c0:	2300      	movs	r3, #0
 80083c2:	613b      	str	r3, [r7, #16]
 80083c4:	e043      	b.n	800844e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80083c6:	693b      	ldr	r3, [r7, #16]
 80083c8:	015a      	lsls	r2, r3, #5
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	4413      	add	r3, r2
 80083ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80083d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80083dc:	d118      	bne.n	8008410 <USB_DevInit+0x170>
    {
      if (i == 0U)
 80083de:	693b      	ldr	r3, [r7, #16]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d10a      	bne.n	80083fa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80083e4:	693b      	ldr	r3, [r7, #16]
 80083e6:	015a      	lsls	r2, r3, #5
 80083e8:	68fb      	ldr	r3, [r7, #12]
 80083ea:	4413      	add	r3, r2
 80083ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80083f0:	461a      	mov	r2, r3
 80083f2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80083f6:	6013      	str	r3, [r2, #0]
 80083f8:	e013      	b.n	8008422 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	015a      	lsls	r2, r3, #5
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	4413      	add	r3, r2
 8008402:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008406:	461a      	mov	r2, r3
 8008408:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800840c:	6013      	str	r3, [r2, #0]
 800840e:	e008      	b.n	8008422 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	015a      	lsls	r2, r3, #5
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	4413      	add	r3, r2
 8008418:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800841c:	461a      	mov	r2, r3
 800841e:	2300      	movs	r3, #0
 8008420:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008422:	693b      	ldr	r3, [r7, #16]
 8008424:	015a      	lsls	r2, r3, #5
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	4413      	add	r3, r2
 800842a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800842e:	461a      	mov	r2, r3
 8008430:	2300      	movs	r3, #0
 8008432:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008434:	693b      	ldr	r3, [r7, #16]
 8008436:	015a      	lsls	r2, r3, #5
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	4413      	add	r3, r2
 800843c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008440:	461a      	mov	r2, r3
 8008442:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008446:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3301      	adds	r3, #1
 800844c:	613b      	str	r3, [r7, #16]
 800844e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008450:	693a      	ldr	r2, [r7, #16]
 8008452:	429a      	cmp	r2, r3
 8008454:	d3b7      	bcc.n	80083c6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008456:	2300      	movs	r3, #0
 8008458:	613b      	str	r3, [r7, #16]
 800845a:	e043      	b.n	80084e4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	015a      	lsls	r2, r3, #5
 8008460:	68fb      	ldr	r3, [r7, #12]
 8008462:	4413      	add	r3, r2
 8008464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800846e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008472:	d118      	bne.n	80084a6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10a      	bne.n	8008490 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800847a:	693b      	ldr	r3, [r7, #16]
 800847c:	015a      	lsls	r2, r3, #5
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	4413      	add	r3, r2
 8008482:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008486:	461a      	mov	r2, r3
 8008488:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800848c:	6013      	str	r3, [r2, #0]
 800848e:	e013      	b.n	80084b8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008490:	693b      	ldr	r3, [r7, #16]
 8008492:	015a      	lsls	r2, r3, #5
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	4413      	add	r3, r2
 8008498:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800849c:	461a      	mov	r2, r3
 800849e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80084a2:	6013      	str	r3, [r2, #0]
 80084a4:	e008      	b.n	80084b8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80084a6:	693b      	ldr	r3, [r7, #16]
 80084a8:	015a      	lsls	r2, r3, #5
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	4413      	add	r3, r2
 80084ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084b2:	461a      	mov	r2, r3
 80084b4:	2300      	movs	r3, #0
 80084b6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	015a      	lsls	r2, r3, #5
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4413      	add	r3, r2
 80084c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084c4:	461a      	mov	r2, r3
 80084c6:	2300      	movs	r3, #0
 80084c8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80084ca:	693b      	ldr	r3, [r7, #16]
 80084cc:	015a      	lsls	r2, r3, #5
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	4413      	add	r3, r2
 80084d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80084d6:	461a      	mov	r2, r3
 80084d8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80084dc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80084de:	693b      	ldr	r3, [r7, #16]
 80084e0:	3301      	adds	r3, #1
 80084e2:	613b      	str	r3, [r7, #16]
 80084e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e6:	693a      	ldr	r2, [r7, #16]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d3b7      	bcc.n	800845c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80084f2:	691b      	ldr	r3, [r3, #16]
 80084f4:	68fa      	ldr	r2, [r7, #12]
 80084f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80084fa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80084fe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2200      	movs	r2, #0
 8008504:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800850c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800850e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008510:	2b00      	cmp	r3, #0
 8008512:	d105      	bne.n	8008520 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	699b      	ldr	r3, [r3, #24]
 8008518:	f043 0210 	orr.w	r2, r3, #16
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	699a      	ldr	r2, [r3, #24]
 8008524:	4b0f      	ldr	r3, [pc, #60]	; (8008564 <USB_DevInit+0x2c4>)
 8008526:	4313      	orrs	r3, r2
 8008528:	687a      	ldr	r2, [r7, #4]
 800852a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800852c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800852e:	2b00      	cmp	r3, #0
 8008530:	d005      	beq.n	800853e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	699b      	ldr	r3, [r3, #24]
 8008536:	f043 0208 	orr.w	r2, r3, #8
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800853e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008540:	2b01      	cmp	r3, #1
 8008542:	d107      	bne.n	8008554 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	699b      	ldr	r3, [r3, #24]
 8008548:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800854c:	f043 0304 	orr.w	r3, r3, #4
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008554:	7dfb      	ldrb	r3, [r7, #23]
}
 8008556:	4618      	mov	r0, r3
 8008558:	3718      	adds	r7, #24
 800855a:	46bd      	mov	sp, r7
 800855c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008560:	b004      	add	sp, #16
 8008562:	4770      	bx	lr
 8008564:	803c3800 	.word	0x803c3800

08008568 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008568:	b480      	push	{r7}
 800856a:	b085      	sub	sp, #20
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
 8008570:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008572:	2300      	movs	r3, #0
 8008574:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	3301      	adds	r3, #1
 800857a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4a13      	ldr	r2, [pc, #76]	; (80085cc <USB_FlushTxFifo+0x64>)
 8008580:	4293      	cmp	r3, r2
 8008582:	d901      	bls.n	8008588 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008584:	2303      	movs	r3, #3
 8008586:	e01b      	b.n	80085c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	2b00      	cmp	r3, #0
 800858e:	daf2      	bge.n	8008576 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008594:	683b      	ldr	r3, [r7, #0]
 8008596:	019b      	lsls	r3, r3, #6
 8008598:	f043 0220 	orr.w	r2, r3, #32
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	3301      	adds	r3, #1
 80085a4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	4a08      	ldr	r2, [pc, #32]	; (80085cc <USB_FlushTxFifo+0x64>)
 80085aa:	4293      	cmp	r3, r2
 80085ac:	d901      	bls.n	80085b2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80085ae:	2303      	movs	r3, #3
 80085b0:	e006      	b.n	80085c0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	f003 0320 	and.w	r3, r3, #32
 80085ba:	2b20      	cmp	r3, #32
 80085bc:	d0f0      	beq.n	80085a0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80085be:	2300      	movs	r3, #0
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	00030d40 	.word	0x00030d40

080085d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80085d0:	b480      	push	{r7}
 80085d2:	b085      	sub	sp, #20
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	3301      	adds	r3, #1
 80085e0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	4a11      	ldr	r2, [pc, #68]	; (800862c <USB_FlushRxFifo+0x5c>)
 80085e6:	4293      	cmp	r3, r2
 80085e8:	d901      	bls.n	80085ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80085ea:	2303      	movs	r3, #3
 80085ec:	e018      	b.n	8008620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	691b      	ldr	r3, [r3, #16]
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	daf2      	bge.n	80085dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80085f6:	2300      	movs	r3, #0
 80085f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2210      	movs	r2, #16
 80085fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	3301      	adds	r3, #1
 8008604:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	4a08      	ldr	r2, [pc, #32]	; (800862c <USB_FlushRxFifo+0x5c>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d901      	bls.n	8008612 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e006      	b.n	8008620 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	691b      	ldr	r3, [r3, #16]
 8008616:	f003 0310 	and.w	r3, r3, #16
 800861a:	2b10      	cmp	r3, #16
 800861c:	d0f0      	beq.n	8008600 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800861e:	2300      	movs	r3, #0
}
 8008620:	4618      	mov	r0, r3
 8008622:	3714      	adds	r7, #20
 8008624:	46bd      	mov	sp, r7
 8008626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862a:	4770      	bx	lr
 800862c:	00030d40 	.word	0x00030d40

08008630 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008630:	b480      	push	{r7}
 8008632:	b085      	sub	sp, #20
 8008634:	af00      	add	r7, sp, #0
 8008636:	6078      	str	r0, [r7, #4]
 8008638:	460b      	mov	r3, r1
 800863a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008646:	681a      	ldr	r2, [r3, #0]
 8008648:	78fb      	ldrb	r3, [r7, #3]
 800864a:	68f9      	ldr	r1, [r7, #12]
 800864c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008650:	4313      	orrs	r3, r2
 8008652:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3714      	adds	r7, #20
 800865a:	46bd      	mov	sp, r7
 800865c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008660:	4770      	bx	lr

08008662 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8008662:	b480      	push	{r7}
 8008664:	b087      	sub	sp, #28
 8008666:	af00      	add	r7, sp, #0
 8008668:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008674:	689b      	ldr	r3, [r3, #8]
 8008676:	f003 0306 	and.w	r3, r3, #6
 800867a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d102      	bne.n	8008688 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8008682:	2300      	movs	r3, #0
 8008684:	75fb      	strb	r3, [r7, #23]
 8008686:	e00a      	b.n	800869e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b02      	cmp	r3, #2
 800868c:	d002      	beq.n	8008694 <USB_GetDevSpeed+0x32>
 800868e:	68fb      	ldr	r3, [r7, #12]
 8008690:	2b06      	cmp	r3, #6
 8008692:	d102      	bne.n	800869a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8008694:	2302      	movs	r3, #2
 8008696:	75fb      	strb	r3, [r7, #23]
 8008698:	e001      	b.n	800869e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800869a:	230f      	movs	r3, #15
 800869c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800869e:	7dfb      	ldrb	r3, [r7, #23]
}
 80086a0:	4618      	mov	r0, r3
 80086a2:	371c      	adds	r7, #28
 80086a4:	46bd      	mov	sp, r7
 80086a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086aa:	4770      	bx	lr

080086ac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80086ac:	b480      	push	{r7}
 80086ae:	b085      	sub	sp, #20
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	6078      	str	r0, [r7, #4]
 80086b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80086ba:	683b      	ldr	r3, [r7, #0]
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	785b      	ldrb	r3, [r3, #1]
 80086c4:	2b01      	cmp	r3, #1
 80086c6:	d13a      	bne.n	800873e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80086ce:	69da      	ldr	r2, [r3, #28]
 80086d0:	683b      	ldr	r3, [r7, #0]
 80086d2:	781b      	ldrb	r3, [r3, #0]
 80086d4:	f003 030f 	and.w	r3, r3, #15
 80086d8:	2101      	movs	r1, #1
 80086da:	fa01 f303 	lsl.w	r3, r1, r3
 80086de:	b29b      	uxth	r3, r3
 80086e0:	68f9      	ldr	r1, [r7, #12]
 80086e2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80086e6:	4313      	orrs	r3, r2
 80086e8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80086ea:	68bb      	ldr	r3, [r7, #8]
 80086ec:	015a      	lsls	r2, r3, #5
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	4413      	add	r3, r2
 80086f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80086fc:	2b00      	cmp	r3, #0
 80086fe:	d155      	bne.n	80087ac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	015a      	lsls	r2, r3, #5
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	4413      	add	r3, r2
 8008708:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800870c:	681a      	ldr	r2, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	68db      	ldr	r3, [r3, #12]
 8008712:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	791b      	ldrb	r3, [r3, #4]
 800871a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800871c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800871e:	68bb      	ldr	r3, [r7, #8]
 8008720:	059b      	lsls	r3, r3, #22
 8008722:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8008724:	4313      	orrs	r3, r2
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	0151      	lsls	r1, r2, #5
 800872a:	68fa      	ldr	r2, [r7, #12]
 800872c:	440a      	add	r2, r1
 800872e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008732:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008736:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800873a:	6013      	str	r3, [r2, #0]
 800873c:	e036      	b.n	80087ac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008744:	69da      	ldr	r2, [r3, #28]
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	781b      	ldrb	r3, [r3, #0]
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	2101      	movs	r1, #1
 8008750:	fa01 f303 	lsl.w	r3, r1, r3
 8008754:	041b      	lsls	r3, r3, #16
 8008756:	68f9      	ldr	r1, [r7, #12]
 8008758:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800875c:	4313      	orrs	r3, r2
 800875e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008760:	68bb      	ldr	r3, [r7, #8]
 8008762:	015a      	lsls	r2, r3, #5
 8008764:	68fb      	ldr	r3, [r7, #12]
 8008766:	4413      	add	r3, r2
 8008768:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008772:	2b00      	cmp	r3, #0
 8008774:	d11a      	bne.n	80087ac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008776:	68bb      	ldr	r3, [r7, #8]
 8008778:	015a      	lsls	r2, r3, #5
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	4413      	add	r3, r2
 800877e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008782:	681a      	ldr	r2, [r3, #0]
 8008784:	683b      	ldr	r3, [r7, #0]
 8008786:	68db      	ldr	r3, [r3, #12]
 8008788:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800878c:	683b      	ldr	r3, [r7, #0]
 800878e:	791b      	ldrb	r3, [r3, #4]
 8008790:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008792:	430b      	orrs	r3, r1
 8008794:	4313      	orrs	r3, r2
 8008796:	68ba      	ldr	r2, [r7, #8]
 8008798:	0151      	lsls	r1, r2, #5
 800879a:	68fa      	ldr	r2, [r7, #12]
 800879c:	440a      	add	r2, r1
 800879e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80087a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80087aa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80087ac:	2300      	movs	r3, #0
}
 80087ae:	4618      	mov	r0, r3
 80087b0:	3714      	adds	r7, #20
 80087b2:	46bd      	mov	sp, r7
 80087b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b8:	4770      	bx	lr
	...

080087bc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80087bc:	b480      	push	{r7}
 80087be:	b085      	sub	sp, #20
 80087c0:	af00      	add	r7, sp, #0
 80087c2:	6078      	str	r0, [r7, #4]
 80087c4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	781b      	ldrb	r3, [r3, #0]
 80087ce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80087d0:	683b      	ldr	r3, [r7, #0]
 80087d2:	785b      	ldrb	r3, [r3, #1]
 80087d4:	2b01      	cmp	r3, #1
 80087d6:	d161      	bne.n	800889c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80087d8:	68bb      	ldr	r3, [r7, #8]
 80087da:	015a      	lsls	r2, r3, #5
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	4413      	add	r3, r2
 80087e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80087ea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80087ee:	d11f      	bne.n	8008830 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80087f0:	68bb      	ldr	r3, [r7, #8]
 80087f2:	015a      	lsls	r2, r3, #5
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4413      	add	r3, r2
 80087f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	0151      	lsls	r1, r2, #5
 8008802:	68fa      	ldr	r2, [r7, #12]
 8008804:	440a      	add	r2, r1
 8008806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800880a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800880e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	015a      	lsls	r2, r3, #5
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	4413      	add	r3, r2
 8008818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	0151      	lsls	r1, r2, #5
 8008822:	68fa      	ldr	r2, [r7, #12]
 8008824:	440a      	add	r2, r1
 8008826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800882a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800882e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008836:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008838:	683b      	ldr	r3, [r7, #0]
 800883a:	781b      	ldrb	r3, [r3, #0]
 800883c:	f003 030f 	and.w	r3, r3, #15
 8008840:	2101      	movs	r1, #1
 8008842:	fa01 f303 	lsl.w	r3, r1, r3
 8008846:	b29b      	uxth	r3, r3
 8008848:	43db      	mvns	r3, r3
 800884a:	68f9      	ldr	r1, [r7, #12]
 800884c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008850:	4013      	ands	r3, r2
 8008852:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800885a:	69da      	ldr	r2, [r3, #28]
 800885c:	683b      	ldr	r3, [r7, #0]
 800885e:	781b      	ldrb	r3, [r3, #0]
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	2101      	movs	r1, #1
 8008866:	fa01 f303 	lsl.w	r3, r1, r3
 800886a:	b29b      	uxth	r3, r3
 800886c:	43db      	mvns	r3, r3
 800886e:	68f9      	ldr	r1, [r7, #12]
 8008870:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008874:	4013      	ands	r3, r2
 8008876:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008878:	68bb      	ldr	r3, [r7, #8]
 800887a:	015a      	lsls	r2, r3, #5
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	4413      	add	r3, r2
 8008880:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008884:	681a      	ldr	r2, [r3, #0]
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	0159      	lsls	r1, r3, #5
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	440b      	add	r3, r1
 800888e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008892:	4619      	mov	r1, r3
 8008894:	4b35      	ldr	r3, [pc, #212]	; (800896c <USB_DeactivateEndpoint+0x1b0>)
 8008896:	4013      	ands	r3, r2
 8008898:	600b      	str	r3, [r1, #0]
 800889a:	e060      	b.n	800895e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800889c:	68bb      	ldr	r3, [r7, #8]
 800889e:	015a      	lsls	r2, r3, #5
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	4413      	add	r3, r2
 80088a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80088ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80088b2:	d11f      	bne.n	80088f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	015a      	lsls	r2, r3, #5
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	4413      	add	r3, r2
 80088bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	0151      	lsls	r1, r2, #5
 80088c6:	68fa      	ldr	r2, [r7, #12]
 80088c8:	440a      	add	r2, r1
 80088ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80088d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80088d4:	68bb      	ldr	r3, [r7, #8]
 80088d6:	015a      	lsls	r2, r3, #5
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	4413      	add	r3, r2
 80088dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	68ba      	ldr	r2, [r7, #8]
 80088e4:	0151      	lsls	r1, r2, #5
 80088e6:	68fa      	ldr	r2, [r7, #12]
 80088e8:	440a      	add	r2, r1
 80088ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80088ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80088f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	781b      	ldrb	r3, [r3, #0]
 8008900:	f003 030f 	and.w	r3, r3, #15
 8008904:	2101      	movs	r1, #1
 8008906:	fa01 f303 	lsl.w	r3, r1, r3
 800890a:	041b      	lsls	r3, r3, #16
 800890c:	43db      	mvns	r3, r3
 800890e:	68f9      	ldr	r1, [r7, #12]
 8008910:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008914:	4013      	ands	r3, r2
 8008916:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800891e:	69da      	ldr	r2, [r3, #28]
 8008920:	683b      	ldr	r3, [r7, #0]
 8008922:	781b      	ldrb	r3, [r3, #0]
 8008924:	f003 030f 	and.w	r3, r3, #15
 8008928:	2101      	movs	r1, #1
 800892a:	fa01 f303 	lsl.w	r3, r1, r3
 800892e:	041b      	lsls	r3, r3, #16
 8008930:	43db      	mvns	r3, r3
 8008932:	68f9      	ldr	r1, [r7, #12]
 8008934:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008938:	4013      	ands	r3, r2
 800893a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	015a      	lsls	r2, r3, #5
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	4413      	add	r3, r2
 8008944:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008948:	681a      	ldr	r2, [r3, #0]
 800894a:	68bb      	ldr	r3, [r7, #8]
 800894c:	0159      	lsls	r1, r3, #5
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	440b      	add	r3, r1
 8008952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008956:	4619      	mov	r1, r3
 8008958:	4b05      	ldr	r3, [pc, #20]	; (8008970 <USB_DeactivateEndpoint+0x1b4>)
 800895a:	4013      	ands	r3, r2
 800895c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800895e:	2300      	movs	r3, #0
}
 8008960:	4618      	mov	r0, r3
 8008962:	3714      	adds	r7, #20
 8008964:	46bd      	mov	sp, r7
 8008966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896a:	4770      	bx	lr
 800896c:	ec337800 	.word	0xec337800
 8008970:	eff37800 	.word	0xeff37800

08008974 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b08a      	sub	sp, #40	; 0x28
 8008978:	af02      	add	r7, sp, #8
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	4613      	mov	r3, r2
 8008980:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	781b      	ldrb	r3, [r3, #0]
 800898a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800898c:	68bb      	ldr	r3, [r7, #8]
 800898e:	785b      	ldrb	r3, [r3, #1]
 8008990:	2b01      	cmp	r3, #1
 8008992:	f040 815c 	bne.w	8008c4e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	699b      	ldr	r3, [r3, #24]
 800899a:	2b00      	cmp	r3, #0
 800899c:	d132      	bne.n	8008a04 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800899e:	69bb      	ldr	r3, [r7, #24]
 80089a0:	015a      	lsls	r2, r3, #5
 80089a2:	69fb      	ldr	r3, [r7, #28]
 80089a4:	4413      	add	r3, r2
 80089a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089aa:	691b      	ldr	r3, [r3, #16]
 80089ac:	69ba      	ldr	r2, [r7, #24]
 80089ae:	0151      	lsls	r1, r2, #5
 80089b0:	69fa      	ldr	r2, [r7, #28]
 80089b2:	440a      	add	r2, r1
 80089b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80089bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80089c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	015a      	lsls	r2, r3, #5
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	4413      	add	r3, r2
 80089ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ce:	691b      	ldr	r3, [r3, #16]
 80089d0:	69ba      	ldr	r2, [r7, #24]
 80089d2:	0151      	lsls	r1, r2, #5
 80089d4:	69fa      	ldr	r2, [r7, #28]
 80089d6:	440a      	add	r2, r1
 80089d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80089e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80089e2:	69bb      	ldr	r3, [r7, #24]
 80089e4:	015a      	lsls	r2, r3, #5
 80089e6:	69fb      	ldr	r3, [r7, #28]
 80089e8:	4413      	add	r3, r2
 80089ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ee:	691b      	ldr	r3, [r3, #16]
 80089f0:	69ba      	ldr	r2, [r7, #24]
 80089f2:	0151      	lsls	r1, r2, #5
 80089f4:	69fa      	ldr	r2, [r7, #28]
 80089f6:	440a      	add	r2, r1
 80089f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80089fc:	0cdb      	lsrs	r3, r3, #19
 80089fe:	04db      	lsls	r3, r3, #19
 8008a00:	6113      	str	r3, [r2, #16]
 8008a02:	e074      	b.n	8008aee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008a04:	69bb      	ldr	r3, [r7, #24]
 8008a06:	015a      	lsls	r2, r3, #5
 8008a08:	69fb      	ldr	r3, [r7, #28]
 8008a0a:	4413      	add	r3, r2
 8008a0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a10:	691b      	ldr	r3, [r3, #16]
 8008a12:	69ba      	ldr	r2, [r7, #24]
 8008a14:	0151      	lsls	r1, r2, #5
 8008a16:	69fa      	ldr	r2, [r7, #28]
 8008a18:	440a      	add	r2, r1
 8008a1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a1e:	0cdb      	lsrs	r3, r3, #19
 8008a20:	04db      	lsls	r3, r3, #19
 8008a22:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	015a      	lsls	r2, r3, #5
 8008a28:	69fb      	ldr	r3, [r7, #28]
 8008a2a:	4413      	add	r3, r2
 8008a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a30:	691b      	ldr	r3, [r3, #16]
 8008a32:	69ba      	ldr	r2, [r7, #24]
 8008a34:	0151      	lsls	r1, r2, #5
 8008a36:	69fa      	ldr	r2, [r7, #28]
 8008a38:	440a      	add	r2, r1
 8008a3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008a3e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008a42:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008a46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a48:	69bb      	ldr	r3, [r7, #24]
 8008a4a:	015a      	lsls	r2, r3, #5
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	4413      	add	r3, r2
 8008a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a54:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8008a56:	68bb      	ldr	r3, [r7, #8]
 8008a58:	6999      	ldr	r1, [r3, #24]
 8008a5a:	68bb      	ldr	r3, [r7, #8]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	440b      	add	r3, r1
 8008a60:	1e59      	subs	r1, r3, #1
 8008a62:	68bb      	ldr	r3, [r7, #8]
 8008a64:	68db      	ldr	r3, [r3, #12]
 8008a66:	fbb1 f3f3 	udiv	r3, r1, r3
 8008a6a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8008a6c:	4b9d      	ldr	r3, [pc, #628]	; (8008ce4 <USB_EPStartXfer+0x370>)
 8008a6e:	400b      	ands	r3, r1
 8008a70:	69b9      	ldr	r1, [r7, #24]
 8008a72:	0148      	lsls	r0, r1, #5
 8008a74:	69f9      	ldr	r1, [r7, #28]
 8008a76:	4401      	add	r1, r0
 8008a78:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008a7c:	4313      	orrs	r3, r2
 8008a7e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008a80:	69bb      	ldr	r3, [r7, #24]
 8008a82:	015a      	lsls	r2, r3, #5
 8008a84:	69fb      	ldr	r3, [r7, #28]
 8008a86:	4413      	add	r3, r2
 8008a88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a8c:	691a      	ldr	r2, [r3, #16]
 8008a8e:	68bb      	ldr	r3, [r7, #8]
 8008a90:	699b      	ldr	r3, [r3, #24]
 8008a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008a96:	69b9      	ldr	r1, [r7, #24]
 8008a98:	0148      	lsls	r0, r1, #5
 8008a9a:	69f9      	ldr	r1, [r7, #28]
 8008a9c:	4401      	add	r1, r0
 8008a9e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	791b      	ldrb	r3, [r3, #4]
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d11f      	bne.n	8008aee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008aae:	69bb      	ldr	r3, [r7, #24]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	69fb      	ldr	r3, [r7, #28]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aba:	691b      	ldr	r3, [r3, #16]
 8008abc:	69ba      	ldr	r2, [r7, #24]
 8008abe:	0151      	lsls	r1, r2, #5
 8008ac0:	69fa      	ldr	r2, [r7, #28]
 8008ac2:	440a      	add	r2, r1
 8008ac4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ac8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8008acc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8008ace:	69bb      	ldr	r3, [r7, #24]
 8008ad0:	015a      	lsls	r2, r3, #5
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	4413      	add	r3, r2
 8008ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ada:	691b      	ldr	r3, [r3, #16]
 8008adc:	69ba      	ldr	r2, [r7, #24]
 8008ade:	0151      	lsls	r1, r2, #5
 8008ae0:	69fa      	ldr	r2, [r7, #28]
 8008ae2:	440a      	add	r2, r1
 8008ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ae8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008aec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8008aee:	79fb      	ldrb	r3, [r7, #7]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d14b      	bne.n	8008b8c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	695b      	ldr	r3, [r3, #20]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d009      	beq.n	8008b10 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008afc:	69bb      	ldr	r3, [r7, #24]
 8008afe:	015a      	lsls	r2, r3, #5
 8008b00:	69fb      	ldr	r3, [r7, #28]
 8008b02:	4413      	add	r3, r2
 8008b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b08:	461a      	mov	r2, r3
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	695b      	ldr	r3, [r3, #20]
 8008b0e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008b10:	68bb      	ldr	r3, [r7, #8]
 8008b12:	791b      	ldrb	r3, [r3, #4]
 8008b14:	2b01      	cmp	r3, #1
 8008b16:	d128      	bne.n	8008b6a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008b18:	69fb      	ldr	r3, [r7, #28]
 8008b1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d110      	bne.n	8008b4a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008b28:	69bb      	ldr	r3, [r7, #24]
 8008b2a:	015a      	lsls	r2, r3, #5
 8008b2c:	69fb      	ldr	r3, [r7, #28]
 8008b2e:	4413      	add	r3, r2
 8008b30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	69ba      	ldr	r2, [r7, #24]
 8008b38:	0151      	lsls	r1, r2, #5
 8008b3a:	69fa      	ldr	r2, [r7, #28]
 8008b3c:	440a      	add	r2, r1
 8008b3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b42:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b46:	6013      	str	r3, [r2, #0]
 8008b48:	e00f      	b.n	8008b6a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008b4a:	69bb      	ldr	r3, [r7, #24]
 8008b4c:	015a      	lsls	r2, r3, #5
 8008b4e:	69fb      	ldr	r3, [r7, #28]
 8008b50:	4413      	add	r3, r2
 8008b52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b56:	681b      	ldr	r3, [r3, #0]
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	0151      	lsls	r1, r2, #5
 8008b5c:	69fa      	ldr	r2, [r7, #28]
 8008b5e:	440a      	add	r2, r1
 8008b60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b68:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b6a:	69bb      	ldr	r3, [r7, #24]
 8008b6c:	015a      	lsls	r2, r3, #5
 8008b6e:	69fb      	ldr	r3, [r7, #28]
 8008b70:	4413      	add	r3, r2
 8008b72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	69ba      	ldr	r2, [r7, #24]
 8008b7a:	0151      	lsls	r1, r2, #5
 8008b7c:	69fa      	ldr	r2, [r7, #28]
 8008b7e:	440a      	add	r2, r1
 8008b80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008b84:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008b88:	6013      	str	r3, [r2, #0]
 8008b8a:	e133      	b.n	8008df4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	69fb      	ldr	r3, [r7, #28]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	69ba      	ldr	r2, [r7, #24]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	69fa      	ldr	r2, [r7, #28]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ba6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008baa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008bac:	68bb      	ldr	r3, [r7, #8]
 8008bae:	791b      	ldrb	r3, [r3, #4]
 8008bb0:	2b01      	cmp	r3, #1
 8008bb2:	d015      	beq.n	8008be0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	699b      	ldr	r3, [r3, #24]
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	f000 811b 	beq.w	8008df4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008bbe:	69fb      	ldr	r3, [r7, #28]
 8008bc0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bc6:	68bb      	ldr	r3, [r7, #8]
 8008bc8:	781b      	ldrb	r3, [r3, #0]
 8008bca:	f003 030f 	and.w	r3, r3, #15
 8008bce:	2101      	movs	r1, #1
 8008bd0:	fa01 f303 	lsl.w	r3, r1, r3
 8008bd4:	69f9      	ldr	r1, [r7, #28]
 8008bd6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008bda:	4313      	orrs	r3, r2
 8008bdc:	634b      	str	r3, [r1, #52]	; 0x34
 8008bde:	e109      	b.n	8008df4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008be0:	69fb      	ldr	r3, [r7, #28]
 8008be2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d110      	bne.n	8008c12 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008bf0:	69bb      	ldr	r3, [r7, #24]
 8008bf2:	015a      	lsls	r2, r3, #5
 8008bf4:	69fb      	ldr	r3, [r7, #28]
 8008bf6:	4413      	add	r3, r2
 8008bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008bfc:	681b      	ldr	r3, [r3, #0]
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	0151      	lsls	r1, r2, #5
 8008c02:	69fa      	ldr	r2, [r7, #28]
 8008c04:	440a      	add	r2, r1
 8008c06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c0a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008c0e:	6013      	str	r3, [r2, #0]
 8008c10:	e00f      	b.n	8008c32 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008c12:	69bb      	ldr	r3, [r7, #24]
 8008c14:	015a      	lsls	r2, r3, #5
 8008c16:	69fb      	ldr	r3, [r7, #28]
 8008c18:	4413      	add	r3, r2
 8008c1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69ba      	ldr	r2, [r7, #24]
 8008c22:	0151      	lsls	r1, r2, #5
 8008c24:	69fa      	ldr	r2, [r7, #28]
 8008c26:	440a      	add	r2, r1
 8008c28:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c30:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	6919      	ldr	r1, [r3, #16]
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	781a      	ldrb	r2, [r3, #0]
 8008c3a:	68bb      	ldr	r3, [r7, #8]
 8008c3c:	699b      	ldr	r3, [r3, #24]
 8008c3e:	b298      	uxth	r0, r3
 8008c40:	79fb      	ldrb	r3, [r7, #7]
 8008c42:	9300      	str	r3, [sp, #0]
 8008c44:	4603      	mov	r3, r0
 8008c46:	68f8      	ldr	r0, [r7, #12]
 8008c48:	f000 fade 	bl	8009208 <USB_WritePacket>
 8008c4c:	e0d2      	b.n	8008df4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008c4e:	69bb      	ldr	r3, [r7, #24]
 8008c50:	015a      	lsls	r2, r3, #5
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	4413      	add	r3, r2
 8008c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	69ba      	ldr	r2, [r7, #24]
 8008c5e:	0151      	lsls	r1, r2, #5
 8008c60:	69fa      	ldr	r2, [r7, #28]
 8008c62:	440a      	add	r2, r1
 8008c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c68:	0cdb      	lsrs	r3, r3, #19
 8008c6a:	04db      	lsls	r3, r3, #19
 8008c6c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008c6e:	69bb      	ldr	r3, [r7, #24]
 8008c70:	015a      	lsls	r2, r3, #5
 8008c72:	69fb      	ldr	r3, [r7, #28]
 8008c74:	4413      	add	r3, r2
 8008c76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008c7a:	691b      	ldr	r3, [r3, #16]
 8008c7c:	69ba      	ldr	r2, [r7, #24]
 8008c7e:	0151      	lsls	r1, r2, #5
 8008c80:	69fa      	ldr	r2, [r7, #28]
 8008c82:	440a      	add	r2, r1
 8008c84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008c88:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008c8c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008c90:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	699b      	ldr	r3, [r3, #24]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d126      	bne.n	8008ce8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008cb0:	69b9      	ldr	r1, [r7, #24]
 8008cb2:	0148      	lsls	r0, r1, #5
 8008cb4:	69f9      	ldr	r1, [r7, #28]
 8008cb6:	4401      	add	r1, r0
 8008cb8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008cbc:	4313      	orrs	r3, r2
 8008cbe:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008cc0:	69bb      	ldr	r3, [r7, #24]
 8008cc2:	015a      	lsls	r2, r3, #5
 8008cc4:	69fb      	ldr	r3, [r7, #28]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ccc:	691b      	ldr	r3, [r3, #16]
 8008cce:	69ba      	ldr	r2, [r7, #24]
 8008cd0:	0151      	lsls	r1, r2, #5
 8008cd2:	69fa      	ldr	r2, [r7, #28]
 8008cd4:	440a      	add	r2, r1
 8008cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008cda:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008cde:	6113      	str	r3, [r2, #16]
 8008ce0:	e03a      	b.n	8008d58 <USB_EPStartXfer+0x3e4>
 8008ce2:	bf00      	nop
 8008ce4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008ce8:	68bb      	ldr	r3, [r7, #8]
 8008cea:	699a      	ldr	r2, [r3, #24]
 8008cec:	68bb      	ldr	r3, [r7, #8]
 8008cee:	68db      	ldr	r3, [r3, #12]
 8008cf0:	4413      	add	r3, r2
 8008cf2:	1e5a      	subs	r2, r3, #1
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	68db      	ldr	r3, [r3, #12]
 8008cf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008cfc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8008cfe:	68bb      	ldr	r3, [r7, #8]
 8008d00:	68db      	ldr	r3, [r3, #12]
 8008d02:	8afa      	ldrh	r2, [r7, #22]
 8008d04:	fb03 f202 	mul.w	r2, r3, r2
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8008d0c:	69bb      	ldr	r3, [r7, #24]
 8008d0e:	015a      	lsls	r2, r3, #5
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d18:	691a      	ldr	r2, [r3, #16]
 8008d1a:	8afb      	ldrh	r3, [r7, #22]
 8008d1c:	04d9      	lsls	r1, r3, #19
 8008d1e:	4b38      	ldr	r3, [pc, #224]	; (8008e00 <USB_EPStartXfer+0x48c>)
 8008d20:	400b      	ands	r3, r1
 8008d22:	69b9      	ldr	r1, [r7, #24]
 8008d24:	0148      	lsls	r0, r1, #5
 8008d26:	69f9      	ldr	r1, [r7, #28]
 8008d28:	4401      	add	r1, r0
 8008d2a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d2e:	4313      	orrs	r3, r2
 8008d30:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8008d32:	69bb      	ldr	r3, [r7, #24]
 8008d34:	015a      	lsls	r2, r3, #5
 8008d36:	69fb      	ldr	r3, [r7, #28]
 8008d38:	4413      	add	r3, r2
 8008d3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	69db      	ldr	r3, [r3, #28]
 8008d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d48:	69b9      	ldr	r1, [r7, #24]
 8008d4a:	0148      	lsls	r0, r1, #5
 8008d4c:	69f9      	ldr	r1, [r7, #28]
 8008d4e:	4401      	add	r1, r0
 8008d50:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8008d54:	4313      	orrs	r3, r2
 8008d56:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008d58:	79fb      	ldrb	r3, [r7, #7]
 8008d5a:	2b01      	cmp	r3, #1
 8008d5c:	d10d      	bne.n	8008d7a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8008d5e:	68bb      	ldr	r3, [r7, #8]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	2b00      	cmp	r3, #0
 8008d64:	d009      	beq.n	8008d7a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	6919      	ldr	r1, [r3, #16]
 8008d6a:	69bb      	ldr	r3, [r7, #24]
 8008d6c:	015a      	lsls	r2, r3, #5
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	4413      	add	r3, r2
 8008d72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d76:	460a      	mov	r2, r1
 8008d78:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	791b      	ldrb	r3, [r3, #4]
 8008d7e:	2b01      	cmp	r3, #1
 8008d80:	d128      	bne.n	8008dd4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008d82:	69fb      	ldr	r3, [r7, #28]
 8008d84:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008d88:	689b      	ldr	r3, [r3, #8]
 8008d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d8e:	2b00      	cmp	r3, #0
 8008d90:	d110      	bne.n	8008db4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8008d92:	69bb      	ldr	r3, [r7, #24]
 8008d94:	015a      	lsls	r2, r3, #5
 8008d96:	69fb      	ldr	r3, [r7, #28]
 8008d98:	4413      	add	r3, r2
 8008d9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	69ba      	ldr	r2, [r7, #24]
 8008da2:	0151      	lsls	r1, r2, #5
 8008da4:	69fa      	ldr	r2, [r7, #28]
 8008da6:	440a      	add	r2, r1
 8008da8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008db0:	6013      	str	r3, [r2, #0]
 8008db2:	e00f      	b.n	8008dd4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	015a      	lsls	r2, r3, #5
 8008db8:	69fb      	ldr	r3, [r7, #28]
 8008dba:	4413      	add	r3, r2
 8008dbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	69ba      	ldr	r2, [r7, #24]
 8008dc4:	0151      	lsls	r1, r2, #5
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	440a      	add	r2, r1
 8008dca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008dd2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8008dd4:	69bb      	ldr	r3, [r7, #24]
 8008dd6:	015a      	lsls	r2, r3, #5
 8008dd8:	69fb      	ldr	r3, [r7, #28]
 8008dda:	4413      	add	r3, r2
 8008ddc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	69ba      	ldr	r2, [r7, #24]
 8008de4:	0151      	lsls	r1, r2, #5
 8008de6:	69fa      	ldr	r2, [r7, #28]
 8008de8:	440a      	add	r2, r1
 8008dea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008dee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008df2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8008df4:	2300      	movs	r3, #0
}
 8008df6:	4618      	mov	r0, r3
 8008df8:	3720      	adds	r7, #32
 8008dfa:	46bd      	mov	sp, r7
 8008dfc:	bd80      	pop	{r7, pc}
 8008dfe:	bf00      	nop
 8008e00:	1ff80000 	.word	0x1ff80000

08008e04 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008e04:	b480      	push	{r7}
 8008e06:	b087      	sub	sp, #28
 8008e08:	af00      	add	r7, sp, #0
 8008e0a:	60f8      	str	r0, [r7, #12]
 8008e0c:	60b9      	str	r1, [r7, #8]
 8008e0e:	4613      	mov	r3, r2
 8008e10:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	781b      	ldrb	r3, [r3, #0]
 8008e1a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008e1c:	68bb      	ldr	r3, [r7, #8]
 8008e1e:	785b      	ldrb	r3, [r3, #1]
 8008e20:	2b01      	cmp	r3, #1
 8008e22:	f040 80ce 	bne.w	8008fc2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008e26:	68bb      	ldr	r3, [r7, #8]
 8008e28:	699b      	ldr	r3, [r3, #24]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d132      	bne.n	8008e94 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e3a:	691b      	ldr	r3, [r3, #16]
 8008e3c:	693a      	ldr	r2, [r7, #16]
 8008e3e:	0151      	lsls	r1, r2, #5
 8008e40:	697a      	ldr	r2, [r7, #20]
 8008e42:	440a      	add	r2, r1
 8008e44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e48:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008e4c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008e50:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008e52:	693b      	ldr	r3, [r7, #16]
 8008e54:	015a      	lsls	r2, r3, #5
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	4413      	add	r3, r2
 8008e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e5e:	691b      	ldr	r3, [r3, #16]
 8008e60:	693a      	ldr	r2, [r7, #16]
 8008e62:	0151      	lsls	r1, r2, #5
 8008e64:	697a      	ldr	r2, [r7, #20]
 8008e66:	440a      	add	r2, r1
 8008e68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e6c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008e70:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e72:	693b      	ldr	r3, [r7, #16]
 8008e74:	015a      	lsls	r2, r3, #5
 8008e76:	697b      	ldr	r3, [r7, #20]
 8008e78:	4413      	add	r3, r2
 8008e7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008e7e:	691b      	ldr	r3, [r3, #16]
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	0151      	lsls	r1, r2, #5
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	440a      	add	r2, r1
 8008e88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008e8c:	0cdb      	lsrs	r3, r3, #19
 8008e8e:	04db      	lsls	r3, r3, #19
 8008e90:	6113      	str	r3, [r2, #16]
 8008e92:	e04e      	b.n	8008f32 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008e94:	693b      	ldr	r3, [r7, #16]
 8008e96:	015a      	lsls	r2, r3, #5
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	4413      	add	r3, r2
 8008e9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ea0:	691b      	ldr	r3, [r3, #16]
 8008ea2:	693a      	ldr	r2, [r7, #16]
 8008ea4:	0151      	lsls	r1, r2, #5
 8008ea6:	697a      	ldr	r2, [r7, #20]
 8008ea8:	440a      	add	r2, r1
 8008eaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008eae:	0cdb      	lsrs	r3, r3, #19
 8008eb0:	04db      	lsls	r3, r3, #19
 8008eb2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008eb4:	693b      	ldr	r3, [r7, #16]
 8008eb6:	015a      	lsls	r2, r3, #5
 8008eb8:	697b      	ldr	r3, [r7, #20]
 8008eba:	4413      	add	r3, r2
 8008ebc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	693a      	ldr	r2, [r7, #16]
 8008ec4:	0151      	lsls	r1, r2, #5
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	440a      	add	r2, r1
 8008eca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008ece:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8008ed2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8008ed6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	699a      	ldr	r2, [r3, #24]
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	68db      	ldr	r3, [r3, #12]
 8008ee0:	429a      	cmp	r2, r3
 8008ee2:	d903      	bls.n	8008eec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8008ee4:	68bb      	ldr	r3, [r7, #8]
 8008ee6:	68da      	ldr	r2, [r3, #12]
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008eec:	693b      	ldr	r3, [r7, #16]
 8008eee:	015a      	lsls	r2, r3, #5
 8008ef0:	697b      	ldr	r3, [r7, #20]
 8008ef2:	4413      	add	r3, r2
 8008ef4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ef8:	691b      	ldr	r3, [r3, #16]
 8008efa:	693a      	ldr	r2, [r7, #16]
 8008efc:	0151      	lsls	r1, r2, #5
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	440a      	add	r2, r1
 8008f02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f06:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008f0a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	697b      	ldr	r3, [r7, #20]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	691a      	ldr	r2, [r3, #16]
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	699b      	ldr	r3, [r3, #24]
 8008f1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008f22:	6939      	ldr	r1, [r7, #16]
 8008f24:	0148      	lsls	r0, r1, #5
 8008f26:	6979      	ldr	r1, [r7, #20]
 8008f28:	4401      	add	r1, r0
 8008f2a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8008f2e:	4313      	orrs	r3, r2
 8008f30:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008f32:	79fb      	ldrb	r3, [r7, #7]
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d11e      	bne.n	8008f76 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	695b      	ldr	r3, [r3, #20]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d009      	beq.n	8008f54 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	015a      	lsls	r2, r3, #5
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	4413      	add	r3, r2
 8008f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f4c:	461a      	mov	r2, r3
 8008f4e:	68bb      	ldr	r3, [r7, #8]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f54:	693b      	ldr	r3, [r7, #16]
 8008f56:	015a      	lsls	r2, r3, #5
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	4413      	add	r3, r2
 8008f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	693a      	ldr	r2, [r7, #16]
 8008f64:	0151      	lsls	r1, r2, #5
 8008f66:	697a      	ldr	r2, [r7, #20]
 8008f68:	440a      	add	r2, r1
 8008f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f6e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	e097      	b.n	80090a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008f76:	693b      	ldr	r3, [r7, #16]
 8008f78:	015a      	lsls	r2, r3, #5
 8008f7a:	697b      	ldr	r3, [r7, #20]
 8008f7c:	4413      	add	r3, r2
 8008f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	693a      	ldr	r2, [r7, #16]
 8008f86:	0151      	lsls	r1, r2, #5
 8008f88:	697a      	ldr	r2, [r7, #20]
 8008f8a:	440a      	add	r2, r1
 8008f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8008f94:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	699b      	ldr	r3, [r3, #24]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 8083 	beq.w	80090a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008fa0:	697b      	ldr	r3, [r7, #20]
 8008fa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008fa6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008fa8:	68bb      	ldr	r3, [r7, #8]
 8008faa:	781b      	ldrb	r3, [r3, #0]
 8008fac:	f003 030f 	and.w	r3, r3, #15
 8008fb0:	2101      	movs	r1, #1
 8008fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8008fb6:	6979      	ldr	r1, [r7, #20]
 8008fb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008fbc:	4313      	orrs	r3, r2
 8008fbe:	634b      	str	r3, [r1, #52]	; 0x34
 8008fc0:	e071      	b.n	80090a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008fc2:	693b      	ldr	r3, [r7, #16]
 8008fc4:	015a      	lsls	r2, r3, #5
 8008fc6:	697b      	ldr	r3, [r7, #20]
 8008fc8:	4413      	add	r3, r2
 8008fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fce:	691b      	ldr	r3, [r3, #16]
 8008fd0:	693a      	ldr	r2, [r7, #16]
 8008fd2:	0151      	lsls	r1, r2, #5
 8008fd4:	697a      	ldr	r2, [r7, #20]
 8008fd6:	440a      	add	r2, r1
 8008fd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008fdc:	0cdb      	lsrs	r3, r3, #19
 8008fde:	04db      	lsls	r3, r3, #19
 8008fe0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008fe2:	693b      	ldr	r3, [r7, #16]
 8008fe4:	015a      	lsls	r2, r3, #5
 8008fe6:	697b      	ldr	r3, [r7, #20]
 8008fe8:	4413      	add	r3, r2
 8008fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	693a      	ldr	r2, [r7, #16]
 8008ff2:	0151      	lsls	r1, r2, #5
 8008ff4:	697a      	ldr	r2, [r7, #20]
 8008ff6:	440a      	add	r2, r1
 8008ff8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008ffc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009000:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009004:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	699b      	ldr	r3, [r3, #24]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d003      	beq.n	8009016 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	68da      	ldr	r2, [r3, #12]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009016:	68bb      	ldr	r3, [r7, #8]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	68bb      	ldr	r3, [r7, #8]
 800901c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800901e:	693b      	ldr	r3, [r7, #16]
 8009020:	015a      	lsls	r2, r3, #5
 8009022:	697b      	ldr	r3, [r7, #20]
 8009024:	4413      	add	r3, r2
 8009026:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800902a:	691b      	ldr	r3, [r3, #16]
 800902c:	693a      	ldr	r2, [r7, #16]
 800902e:	0151      	lsls	r1, r2, #5
 8009030:	697a      	ldr	r2, [r7, #20]
 8009032:	440a      	add	r2, r1
 8009034:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009038:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800903c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800903e:	693b      	ldr	r3, [r7, #16]
 8009040:	015a      	lsls	r2, r3, #5
 8009042:	697b      	ldr	r3, [r7, #20]
 8009044:	4413      	add	r3, r2
 8009046:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800904a:	691a      	ldr	r2, [r3, #16]
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	69db      	ldr	r3, [r3, #28]
 8009050:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009054:	6939      	ldr	r1, [r7, #16]
 8009056:	0148      	lsls	r0, r1, #5
 8009058:	6979      	ldr	r1, [r7, #20]
 800905a:	4401      	add	r1, r0
 800905c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009060:	4313      	orrs	r3, r2
 8009062:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009064:	79fb      	ldrb	r3, [r7, #7]
 8009066:	2b01      	cmp	r3, #1
 8009068:	d10d      	bne.n	8009086 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800906a:	68bb      	ldr	r3, [r7, #8]
 800906c:	691b      	ldr	r3, [r3, #16]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d009      	beq.n	8009086 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009072:	68bb      	ldr	r3, [r7, #8]
 8009074:	6919      	ldr	r1, [r3, #16]
 8009076:	693b      	ldr	r3, [r7, #16]
 8009078:	015a      	lsls	r2, r3, #5
 800907a:	697b      	ldr	r3, [r7, #20]
 800907c:	4413      	add	r3, r2
 800907e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009082:	460a      	mov	r2, r1
 8009084:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009086:	693b      	ldr	r3, [r7, #16]
 8009088:	015a      	lsls	r2, r3, #5
 800908a:	697b      	ldr	r3, [r7, #20]
 800908c:	4413      	add	r3, r2
 800908e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	693a      	ldr	r2, [r7, #16]
 8009096:	0151      	lsls	r1, r2, #5
 8009098:	697a      	ldr	r2, [r7, #20]
 800909a:	440a      	add	r2, r1
 800909c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80090a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80090a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80090a6:	2300      	movs	r3, #0
}
 80090a8:	4618      	mov	r0, r3
 80090aa:	371c      	adds	r7, #28
 80090ac:	46bd      	mov	sp, r7
 80090ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b2:	4770      	bx	lr

080090b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80090b4:	b480      	push	{r7}
 80090b6:	b087      	sub	sp, #28
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80090be:	2300      	movs	r3, #0
 80090c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80090c2:	2300      	movs	r3, #0
 80090c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80090ca:	683b      	ldr	r3, [r7, #0]
 80090cc:	785b      	ldrb	r3, [r3, #1]
 80090ce:	2b01      	cmp	r3, #1
 80090d0:	d14a      	bne.n	8009168 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	781b      	ldrb	r3, [r3, #0]
 80090d6:	015a      	lsls	r2, r3, #5
 80090d8:	693b      	ldr	r3, [r7, #16]
 80090da:	4413      	add	r3, r2
 80090dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80090e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80090ea:	f040 8086 	bne.w	80091fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	781b      	ldrb	r3, [r3, #0]
 80090f2:	015a      	lsls	r2, r3, #5
 80090f4:	693b      	ldr	r3, [r7, #16]
 80090f6:	4413      	add	r3, r2
 80090f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	683a      	ldr	r2, [r7, #0]
 8009100:	7812      	ldrb	r2, [r2, #0]
 8009102:	0151      	lsls	r1, r2, #5
 8009104:	693a      	ldr	r2, [r7, #16]
 8009106:	440a      	add	r2, r1
 8009108:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800910c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009110:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	781b      	ldrb	r3, [r3, #0]
 8009116:	015a      	lsls	r2, r3, #5
 8009118:	693b      	ldr	r3, [r7, #16]
 800911a:	4413      	add	r3, r2
 800911c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	683a      	ldr	r2, [r7, #0]
 8009124:	7812      	ldrb	r2, [r2, #0]
 8009126:	0151      	lsls	r1, r2, #5
 8009128:	693a      	ldr	r2, [r7, #16]
 800912a:	440a      	add	r2, r1
 800912c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009134:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	3301      	adds	r3, #1
 800913a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800913c:	68fb      	ldr	r3, [r7, #12]
 800913e:	f242 7210 	movw	r2, #10000	; 0x2710
 8009142:	4293      	cmp	r3, r2
 8009144:	d902      	bls.n	800914c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009146:	2301      	movs	r3, #1
 8009148:	75fb      	strb	r3, [r7, #23]
          break;
 800914a:	e056      	b.n	80091fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	015a      	lsls	r2, r3, #5
 8009152:	693b      	ldr	r3, [r7, #16]
 8009154:	4413      	add	r3, r2
 8009156:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009160:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009164:	d0e7      	beq.n	8009136 <USB_EPStopXfer+0x82>
 8009166:	e048      	b.n	80091fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009168:	683b      	ldr	r3, [r7, #0]
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	015a      	lsls	r2, r3, #5
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	4413      	add	r3, r2
 8009172:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800917c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009180:	d13b      	bne.n	80091fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009182:	683b      	ldr	r3, [r7, #0]
 8009184:	781b      	ldrb	r3, [r3, #0]
 8009186:	015a      	lsls	r2, r3, #5
 8009188:	693b      	ldr	r3, [r7, #16]
 800918a:	4413      	add	r3, r2
 800918c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	683a      	ldr	r2, [r7, #0]
 8009194:	7812      	ldrb	r2, [r2, #0]
 8009196:	0151      	lsls	r1, r2, #5
 8009198:	693a      	ldr	r2, [r7, #16]
 800919a:	440a      	add	r2, r1
 800919c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80091a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	781b      	ldrb	r3, [r3, #0]
 80091aa:	015a      	lsls	r2, r3, #5
 80091ac:	693b      	ldr	r3, [r7, #16]
 80091ae:	4413      	add	r3, r2
 80091b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	683a      	ldr	r2, [r7, #0]
 80091b8:	7812      	ldrb	r2, [r2, #0]
 80091ba:	0151      	lsls	r1, r2, #5
 80091bc:	693a      	ldr	r2, [r7, #16]
 80091be:	440a      	add	r2, r1
 80091c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80091c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80091c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	3301      	adds	r3, #1
 80091ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80091d6:	4293      	cmp	r3, r2
 80091d8:	d902      	bls.n	80091e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80091da:	2301      	movs	r3, #1
 80091dc:	75fb      	strb	r3, [r7, #23]
          break;
 80091de:	e00c      	b.n	80091fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	781b      	ldrb	r3, [r3, #0]
 80091e4:	015a      	lsls	r2, r3, #5
 80091e6:	693b      	ldr	r3, [r7, #16]
 80091e8:	4413      	add	r3, r2
 80091ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80091f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80091f8:	d0e7      	beq.n	80091ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80091fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80091fc:	4618      	mov	r0, r3
 80091fe:	371c      	adds	r7, #28
 8009200:	46bd      	mov	sp, r7
 8009202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009206:	4770      	bx	lr

08009208 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009208:	b480      	push	{r7}
 800920a:	b089      	sub	sp, #36	; 0x24
 800920c:	af00      	add	r7, sp, #0
 800920e:	60f8      	str	r0, [r7, #12]
 8009210:	60b9      	str	r1, [r7, #8]
 8009212:	4611      	mov	r1, r2
 8009214:	461a      	mov	r2, r3
 8009216:	460b      	mov	r3, r1
 8009218:	71fb      	strb	r3, [r7, #7]
 800921a:	4613      	mov	r3, r2
 800921c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800921e:	68fb      	ldr	r3, [r7, #12]
 8009220:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009222:	68bb      	ldr	r3, [r7, #8]
 8009224:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009226:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800922a:	2b00      	cmp	r3, #0
 800922c:	d123      	bne.n	8009276 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800922e:	88bb      	ldrh	r3, [r7, #4]
 8009230:	3303      	adds	r3, #3
 8009232:	089b      	lsrs	r3, r3, #2
 8009234:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009236:	2300      	movs	r3, #0
 8009238:	61bb      	str	r3, [r7, #24]
 800923a:	e018      	b.n	800926e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800923c:	79fb      	ldrb	r3, [r7, #7]
 800923e:	031a      	lsls	r2, r3, #12
 8009240:	697b      	ldr	r3, [r7, #20]
 8009242:	4413      	add	r3, r2
 8009244:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009248:	461a      	mov	r2, r3
 800924a:	69fb      	ldr	r3, [r7, #28]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	3301      	adds	r3, #1
 8009254:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009256:	69fb      	ldr	r3, [r7, #28]
 8009258:	3301      	adds	r3, #1
 800925a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800925c:	69fb      	ldr	r3, [r7, #28]
 800925e:	3301      	adds	r3, #1
 8009260:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009262:	69fb      	ldr	r3, [r7, #28]
 8009264:	3301      	adds	r3, #1
 8009266:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009268:	69bb      	ldr	r3, [r7, #24]
 800926a:	3301      	adds	r3, #1
 800926c:	61bb      	str	r3, [r7, #24]
 800926e:	69ba      	ldr	r2, [r7, #24]
 8009270:	693b      	ldr	r3, [r7, #16]
 8009272:	429a      	cmp	r2, r3
 8009274:	d3e2      	bcc.n	800923c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009276:	2300      	movs	r3, #0
}
 8009278:	4618      	mov	r0, r3
 800927a:	3724      	adds	r7, #36	; 0x24
 800927c:	46bd      	mov	sp, r7
 800927e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009282:	4770      	bx	lr

08009284 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009284:	b480      	push	{r7}
 8009286:	b08b      	sub	sp, #44	; 0x2c
 8009288:	af00      	add	r7, sp, #0
 800928a:	60f8      	str	r0, [r7, #12]
 800928c:	60b9      	str	r1, [r7, #8]
 800928e:	4613      	mov	r3, r2
 8009290:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009296:	68bb      	ldr	r3, [r7, #8]
 8009298:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	089b      	lsrs	r3, r3, #2
 800929e:	b29b      	uxth	r3, r3
 80092a0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	f003 0303 	and.w	r3, r3, #3
 80092a8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80092aa:	2300      	movs	r3, #0
 80092ac:	623b      	str	r3, [r7, #32]
 80092ae:	e014      	b.n	80092da <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80092b0:	69bb      	ldr	r3, [r7, #24]
 80092b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092b6:	681a      	ldr	r2, [r3, #0]
 80092b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ba:	601a      	str	r2, [r3, #0]
    pDest++;
 80092bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092be:	3301      	adds	r3, #1
 80092c0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	3301      	adds	r3, #1
 80092c6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092ca:	3301      	adds	r3, #1
 80092cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80092ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d0:	3301      	adds	r3, #1
 80092d2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80092d4:	6a3b      	ldr	r3, [r7, #32]
 80092d6:	3301      	adds	r3, #1
 80092d8:	623b      	str	r3, [r7, #32]
 80092da:	6a3a      	ldr	r2, [r7, #32]
 80092dc:	697b      	ldr	r3, [r7, #20]
 80092de:	429a      	cmp	r2, r3
 80092e0:	d3e6      	bcc.n	80092b0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80092e2:	8bfb      	ldrh	r3, [r7, #30]
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d01e      	beq.n	8009326 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80092e8:	2300      	movs	r3, #0
 80092ea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80092ec:	69bb      	ldr	r3, [r7, #24]
 80092ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80092f2:	461a      	mov	r2, r3
 80092f4:	f107 0310 	add.w	r3, r7, #16
 80092f8:	6812      	ldr	r2, [r2, #0]
 80092fa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80092fc:	693a      	ldr	r2, [r7, #16]
 80092fe:	6a3b      	ldr	r3, [r7, #32]
 8009300:	b2db      	uxtb	r3, r3
 8009302:	00db      	lsls	r3, r3, #3
 8009304:	fa22 f303 	lsr.w	r3, r2, r3
 8009308:	b2da      	uxtb	r2, r3
 800930a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800930c:	701a      	strb	r2, [r3, #0]
      i++;
 800930e:	6a3b      	ldr	r3, [r7, #32]
 8009310:	3301      	adds	r3, #1
 8009312:	623b      	str	r3, [r7, #32]
      pDest++;
 8009314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009316:	3301      	adds	r3, #1
 8009318:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800931a:	8bfb      	ldrh	r3, [r7, #30]
 800931c:	3b01      	subs	r3, #1
 800931e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009320:	8bfb      	ldrh	r3, [r7, #30]
 8009322:	2b00      	cmp	r3, #0
 8009324:	d1ea      	bne.n	80092fc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009328:	4618      	mov	r0, r3
 800932a:	372c      	adds	r7, #44	; 0x2c
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr

08009334 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009334:	b480      	push	{r7}
 8009336:	b085      	sub	sp, #20
 8009338:	af00      	add	r7, sp, #0
 800933a:	6078      	str	r0, [r7, #4]
 800933c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009342:	683b      	ldr	r3, [r7, #0]
 8009344:	781b      	ldrb	r3, [r3, #0]
 8009346:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009348:	683b      	ldr	r3, [r7, #0]
 800934a:	785b      	ldrb	r3, [r3, #1]
 800934c:	2b01      	cmp	r3, #1
 800934e:	d12c      	bne.n	80093aa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009350:	68bb      	ldr	r3, [r7, #8]
 8009352:	015a      	lsls	r2, r3, #5
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	4413      	add	r3, r2
 8009358:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	db12      	blt.n	8009388 <USB_EPSetStall+0x54>
 8009362:	68bb      	ldr	r3, [r7, #8]
 8009364:	2b00      	cmp	r3, #0
 8009366:	d00f      	beq.n	8009388 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009368:	68bb      	ldr	r3, [r7, #8]
 800936a:	015a      	lsls	r2, r3, #5
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	4413      	add	r3, r2
 8009370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	68ba      	ldr	r2, [r7, #8]
 8009378:	0151      	lsls	r1, r2, #5
 800937a:	68fa      	ldr	r2, [r7, #12]
 800937c:	440a      	add	r2, r1
 800937e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009382:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009386:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009388:	68bb      	ldr	r3, [r7, #8]
 800938a:	015a      	lsls	r2, r3, #5
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	4413      	add	r3, r2
 8009390:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	68ba      	ldr	r2, [r7, #8]
 8009398:	0151      	lsls	r1, r2, #5
 800939a:	68fa      	ldr	r2, [r7, #12]
 800939c:	440a      	add	r2, r1
 800939e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80093a2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80093a6:	6013      	str	r3, [r2, #0]
 80093a8:	e02b      	b.n	8009402 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	015a      	lsls	r2, r3, #5
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	4413      	add	r3, r2
 80093b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	db12      	blt.n	80093e2 <USB_EPSetStall+0xae>
 80093bc:	68bb      	ldr	r3, [r7, #8]
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d00f      	beq.n	80093e2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80093c2:	68bb      	ldr	r3, [r7, #8]
 80093c4:	015a      	lsls	r2, r3, #5
 80093c6:	68fb      	ldr	r3, [r7, #12]
 80093c8:	4413      	add	r3, r2
 80093ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	68ba      	ldr	r2, [r7, #8]
 80093d2:	0151      	lsls	r1, r2, #5
 80093d4:	68fa      	ldr	r2, [r7, #12]
 80093d6:	440a      	add	r2, r1
 80093d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80093e0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	015a      	lsls	r2, r3, #5
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	4413      	add	r3, r2
 80093ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	68ba      	ldr	r2, [r7, #8]
 80093f2:	0151      	lsls	r1, r2, #5
 80093f4:	68fa      	ldr	r2, [r7, #12]
 80093f6:	440a      	add	r2, r1
 80093f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009400:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009402:	2300      	movs	r3, #0
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009410:	b480      	push	{r7}
 8009412:	b085      	sub	sp, #20
 8009414:	af00      	add	r7, sp, #0
 8009416:	6078      	str	r0, [r7, #4]
 8009418:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	785b      	ldrb	r3, [r3, #1]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d128      	bne.n	800947e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	68fb      	ldr	r3, [r7, #12]
 8009432:	4413      	add	r3, r2
 8009434:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	68ba      	ldr	r2, [r7, #8]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	68fa      	ldr	r2, [r7, #12]
 8009440:	440a      	add	r2, r1
 8009442:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009446:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800944a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800944c:	683b      	ldr	r3, [r7, #0]
 800944e:	791b      	ldrb	r3, [r3, #4]
 8009450:	2b03      	cmp	r3, #3
 8009452:	d003      	beq.n	800945c <USB_EPClearStall+0x4c>
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	791b      	ldrb	r3, [r3, #4]
 8009458:	2b02      	cmp	r3, #2
 800945a:	d138      	bne.n	80094ce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	015a      	lsls	r2, r3, #5
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4413      	add	r3, r2
 8009464:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	68ba      	ldr	r2, [r7, #8]
 800946c:	0151      	lsls	r1, r2, #5
 800946e:	68fa      	ldr	r2, [r7, #12]
 8009470:	440a      	add	r2, r1
 8009472:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009476:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800947a:	6013      	str	r3, [r2, #0]
 800947c:	e027      	b.n	80094ce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800947e:	68bb      	ldr	r3, [r7, #8]
 8009480:	015a      	lsls	r2, r3, #5
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	4413      	add	r3, r2
 8009486:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	68ba      	ldr	r2, [r7, #8]
 800948e:	0151      	lsls	r1, r2, #5
 8009490:	68fa      	ldr	r2, [r7, #12]
 8009492:	440a      	add	r2, r1
 8009494:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009498:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800949c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	791b      	ldrb	r3, [r3, #4]
 80094a2:	2b03      	cmp	r3, #3
 80094a4:	d003      	beq.n	80094ae <USB_EPClearStall+0x9e>
 80094a6:	683b      	ldr	r3, [r7, #0]
 80094a8:	791b      	ldrb	r3, [r3, #4]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d10f      	bne.n	80094ce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	015a      	lsls	r2, r3, #5
 80094b2:	68fb      	ldr	r3, [r7, #12]
 80094b4:	4413      	add	r3, r2
 80094b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	0151      	lsls	r1, r2, #5
 80094c0:	68fa      	ldr	r2, [r7, #12]
 80094c2:	440a      	add	r2, r1
 80094c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80094c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80094cc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3714      	adds	r7, #20
 80094d4:	46bd      	mov	sp, r7
 80094d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094da:	4770      	bx	lr

080094dc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80094dc:	b480      	push	{r7}
 80094de:	b085      	sub	sp, #20
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
 80094e4:	460b      	mov	r3, r1
 80094e6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80094fa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80094fe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009500:	68fb      	ldr	r3, [r7, #12]
 8009502:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009506:	681a      	ldr	r2, [r3, #0]
 8009508:	78fb      	ldrb	r3, [r7, #3]
 800950a:	011b      	lsls	r3, r3, #4
 800950c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8009510:	68f9      	ldr	r1, [r7, #12]
 8009512:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009516:	4313      	orrs	r3, r2
 8009518:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800951a:	2300      	movs	r3, #0
}
 800951c:	4618      	mov	r0, r3
 800951e:	3714      	adds	r7, #20
 8009520:	46bd      	mov	sp, r7
 8009522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009526:	4770      	bx	lr

08009528 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8009528:	b480      	push	{r7}
 800952a:	b085      	sub	sp, #20
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009534:	68fb      	ldr	r3, [r7, #12]
 8009536:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	68fa      	ldr	r2, [r7, #12]
 800953e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009542:	f023 0303 	bic.w	r3, r3, #3
 8009546:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800954e:	685b      	ldr	r3, [r3, #4]
 8009550:	68fa      	ldr	r2, [r7, #12]
 8009552:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009556:	f023 0302 	bic.w	r3, r3, #2
 800955a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800955c:	2300      	movs	r3, #0
}
 800955e:	4618      	mov	r0, r3
 8009560:	3714      	adds	r7, #20
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800956a:	b480      	push	{r7}
 800956c:	b085      	sub	sp, #20
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	68fa      	ldr	r2, [r7, #12]
 8009580:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009584:	f023 0303 	bic.w	r3, r3, #3
 8009588:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009590:	685b      	ldr	r3, [r3, #4]
 8009592:	68fa      	ldr	r2, [r7, #12]
 8009594:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009598:	f043 0302 	orr.w	r3, r3, #2
 800959c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800959e:	2300      	movs	r3, #0
}
 80095a0:	4618      	mov	r0, r3
 80095a2:	3714      	adds	r7, #20
 80095a4:	46bd      	mov	sp, r7
 80095a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095aa:	4770      	bx	lr

080095ac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80095ac:	b480      	push	{r7}
 80095ae:	b085      	sub	sp, #20
 80095b0:	af00      	add	r7, sp, #0
 80095b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	695b      	ldr	r3, [r3, #20]
 80095b8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	699b      	ldr	r3, [r3, #24]
 80095be:	68fa      	ldr	r2, [r7, #12]
 80095c0:	4013      	ands	r3, r2
 80095c2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80095c4:	68fb      	ldr	r3, [r7, #12]
}
 80095c6:	4618      	mov	r0, r3
 80095c8:	3714      	adds	r7, #20
 80095ca:	46bd      	mov	sp, r7
 80095cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095d0:	4770      	bx	lr

080095d2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80095d2:	b480      	push	{r7}
 80095d4:	b085      	sub	sp, #20
 80095d6:	af00      	add	r7, sp, #0
 80095d8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80095de:	68fb      	ldr	r3, [r7, #12]
 80095e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095e4:	699b      	ldr	r3, [r3, #24]
 80095e6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80095ee:	69db      	ldr	r3, [r3, #28]
 80095f0:	68ba      	ldr	r2, [r7, #8]
 80095f2:	4013      	ands	r3, r2
 80095f4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80095f6:	68bb      	ldr	r3, [r7, #8]
 80095f8:	0c1b      	lsrs	r3, r3, #16
}
 80095fa:	4618      	mov	r0, r3
 80095fc:	3714      	adds	r7, #20
 80095fe:	46bd      	mov	sp, r7
 8009600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009604:	4770      	bx	lr

08009606 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8009606:	b480      	push	{r7}
 8009608:	b085      	sub	sp, #20
 800960a:	af00      	add	r7, sp, #0
 800960c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009618:	699b      	ldr	r3, [r3, #24]
 800961a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009622:	69db      	ldr	r3, [r3, #28]
 8009624:	68ba      	ldr	r2, [r7, #8]
 8009626:	4013      	ands	r3, r2
 8009628:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	b29b      	uxth	r3, r3
}
 800962e:	4618      	mov	r0, r3
 8009630:	3714      	adds	r7, #20
 8009632:	46bd      	mov	sp, r7
 8009634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009638:	4770      	bx	lr

0800963a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800963a:	b480      	push	{r7}
 800963c:	b085      	sub	sp, #20
 800963e:	af00      	add	r7, sp, #0
 8009640:	6078      	str	r0, [r7, #4]
 8009642:	460b      	mov	r3, r1
 8009644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800964a:	78fb      	ldrb	r3, [r7, #3]
 800964c:	015a      	lsls	r2, r3, #5
 800964e:	68fb      	ldr	r3, [r7, #12]
 8009650:	4413      	add	r3, r2
 8009652:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009656:	689b      	ldr	r3, [r3, #8]
 8009658:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009660:	695b      	ldr	r3, [r3, #20]
 8009662:	68ba      	ldr	r2, [r7, #8]
 8009664:	4013      	ands	r3, r2
 8009666:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009668:	68bb      	ldr	r3, [r7, #8]
}
 800966a:	4618      	mov	r0, r3
 800966c:	3714      	adds	r7, #20
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009676:	b480      	push	{r7}
 8009678:	b087      	sub	sp, #28
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
 800967e:	460b      	mov	r3, r1
 8009680:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800968c:	691b      	ldr	r3, [r3, #16]
 800968e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009690:	697b      	ldr	r3, [r7, #20]
 8009692:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009698:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800969a:	78fb      	ldrb	r3, [r7, #3]
 800969c:	f003 030f 	and.w	r3, r3, #15
 80096a0:	68fa      	ldr	r2, [r7, #12]
 80096a2:	fa22 f303 	lsr.w	r3, r2, r3
 80096a6:	01db      	lsls	r3, r3, #7
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	693a      	ldr	r2, [r7, #16]
 80096ac:	4313      	orrs	r3, r2
 80096ae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80096b0:	78fb      	ldrb	r3, [r7, #3]
 80096b2:	015a      	lsls	r2, r3, #5
 80096b4:	697b      	ldr	r3, [r7, #20]
 80096b6:	4413      	add	r3, r2
 80096b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096bc:	689b      	ldr	r3, [r3, #8]
 80096be:	693a      	ldr	r2, [r7, #16]
 80096c0:	4013      	ands	r3, r2
 80096c2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80096c4:	68bb      	ldr	r3, [r7, #8]
}
 80096c6:	4618      	mov	r0, r3
 80096c8:	371c      	adds	r7, #28
 80096ca:	46bd      	mov	sp, r7
 80096cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096d0:	4770      	bx	lr

080096d2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80096d2:	b480      	push	{r7}
 80096d4:	b083      	sub	sp, #12
 80096d6:	af00      	add	r7, sp, #0
 80096d8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	695b      	ldr	r3, [r3, #20]
 80096de:	f003 0301 	and.w	r3, r3, #1
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	370c      	adds	r7, #12
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80096fa:	68fb      	ldr	r3, [r7, #12]
 80096fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	68fa      	ldr	r2, [r7, #12]
 8009704:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009708:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800970c:	f023 0307 	bic.w	r3, r3, #7
 8009710:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009712:	68fb      	ldr	r3, [r7, #12]
 8009714:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009718:	685b      	ldr	r3, [r3, #4]
 800971a:	68fa      	ldr	r2, [r7, #12]
 800971c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009720:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009724:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009726:	2300      	movs	r3, #0
}
 8009728:	4618      	mov	r0, r3
 800972a:	3714      	adds	r7, #20
 800972c:	46bd      	mov	sp, r7
 800972e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009732:	4770      	bx	lr

08009734 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8009734:	b480      	push	{r7}
 8009736:	b087      	sub	sp, #28
 8009738:	af00      	add	r7, sp, #0
 800973a:	60f8      	str	r0, [r7, #12]
 800973c:	460b      	mov	r3, r1
 800973e:	607a      	str	r2, [r7, #4]
 8009740:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	333c      	adds	r3, #60	; 0x3c
 800974a:	3304      	adds	r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009750:	693b      	ldr	r3, [r7, #16]
 8009752:	4a26      	ldr	r2, [pc, #152]	; (80097ec <USB_EP0_OutStart+0xb8>)
 8009754:	4293      	cmp	r3, r2
 8009756:	d90a      	bls.n	800976e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009764:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009768:	d101      	bne.n	800976e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800976a:	2300      	movs	r3, #0
 800976c:	e037      	b.n	80097de <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009774:	461a      	mov	r2, r3
 8009776:	2300      	movs	r3, #0
 8009778:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009780:	691b      	ldr	r3, [r3, #16]
 8009782:	697a      	ldr	r2, [r7, #20]
 8009784:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009788:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800978c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800978e:	697b      	ldr	r3, [r7, #20]
 8009790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009794:	691b      	ldr	r3, [r3, #16]
 8009796:	697a      	ldr	r2, [r7, #20]
 8009798:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800979c:	f043 0318 	orr.w	r3, r3, #24
 80097a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80097a2:	697b      	ldr	r3, [r7, #20]
 80097a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a8:	691b      	ldr	r3, [r3, #16]
 80097aa:	697a      	ldr	r2, [r7, #20]
 80097ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80097b4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80097b6:	7afb      	ldrb	r3, [r7, #11]
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d10f      	bne.n	80097dc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80097bc:	697b      	ldr	r3, [r7, #20]
 80097be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097c2:	461a      	mov	r2, r3
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	697a      	ldr	r2, [r7, #20]
 80097d2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097d6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80097da:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80097dc:	2300      	movs	r3, #0
}
 80097de:	4618      	mov	r0, r3
 80097e0:	371c      	adds	r7, #28
 80097e2:	46bd      	mov	sp, r7
 80097e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e8:	4770      	bx	lr
 80097ea:	bf00      	nop
 80097ec:	4f54300a 	.word	0x4f54300a

080097f0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80097f0:	b480      	push	{r7}
 80097f2:	b085      	sub	sp, #20
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	3301      	adds	r3, #1
 8009800:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	4a13      	ldr	r2, [pc, #76]	; (8009854 <USB_CoreReset+0x64>)
 8009806:	4293      	cmp	r3, r2
 8009808:	d901      	bls.n	800980e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800980a:	2303      	movs	r3, #3
 800980c:	e01b      	b.n	8009846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	691b      	ldr	r3, [r3, #16]
 8009812:	2b00      	cmp	r3, #0
 8009814:	daf2      	bge.n	80097fc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f043 0201 	orr.w	r2, r3, #1
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	3301      	adds	r3, #1
 800982a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800982c:	68fb      	ldr	r3, [r7, #12]
 800982e:	4a09      	ldr	r2, [pc, #36]	; (8009854 <USB_CoreReset+0x64>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d901      	bls.n	8009838 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009834:	2303      	movs	r3, #3
 8009836:	e006      	b.n	8009846 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	691b      	ldr	r3, [r3, #16]
 800983c:	f003 0301 	and.w	r3, r3, #1
 8009840:	2b01      	cmp	r3, #1
 8009842:	d0f0      	beq.n	8009826 <USB_CoreReset+0x36>

  return HAL_OK;
 8009844:	2300      	movs	r3, #0
}
 8009846:	4618      	mov	r0, r3
 8009848:	3714      	adds	r7, #20
 800984a:	46bd      	mov	sp, r7
 800984c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009850:	4770      	bx	lr
 8009852:	bf00      	nop
 8009854:	00030d40 	.word	0x00030d40

08009858 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b084      	sub	sp, #16
 800985c:	af00      	add	r7, sp, #0
 800985e:	6078      	str	r0, [r7, #4]
 8009860:	460b      	mov	r3, r1
 8009862:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8009864:	2010      	movs	r0, #16
 8009866:	f002 f8ef 	bl	800ba48 <USBD_static_malloc>
 800986a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800986c:	68fb      	ldr	r3, [r7, #12]
 800986e:	2b00      	cmp	r3, #0
 8009870:	d109      	bne.n	8009886 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	32b0      	adds	r2, #176	; 0xb0
 800987c:	2100      	movs	r1, #0
 800987e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009882:	2302      	movs	r3, #2
 8009884:	e048      	b.n	8009918 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	32b0      	adds	r2, #176	; 0xb0
 8009890:	68f9      	ldr	r1, [r7, #12]
 8009892:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	32b0      	adds	r2, #176	; 0xb0
 80098a0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	7c1b      	ldrb	r3, [r3, #16]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d10d      	bne.n	80098ce <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80098b2:	4b1b      	ldr	r3, [pc, #108]	; (8009920 <USBD_HID_Init+0xc8>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	f003 020f 	and.w	r2, r3, #15
 80098ba:	6879      	ldr	r1, [r7, #4]
 80098bc:	4613      	mov	r3, r2
 80098be:	009b      	lsls	r3, r3, #2
 80098c0:	4413      	add	r3, r2
 80098c2:	009b      	lsls	r3, r3, #2
 80098c4:	440b      	add	r3, r1
 80098c6:	3326      	adds	r3, #38	; 0x26
 80098c8:	2207      	movs	r2, #7
 80098ca:	801a      	strh	r2, [r3, #0]
 80098cc:	e00c      	b.n	80098e8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80098ce:	4b14      	ldr	r3, [pc, #80]	; (8009920 <USBD_HID_Init+0xc8>)
 80098d0:	781b      	ldrb	r3, [r3, #0]
 80098d2:	f003 020f 	and.w	r2, r3, #15
 80098d6:	6879      	ldr	r1, [r7, #4]
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	440b      	add	r3, r1
 80098e2:	3326      	adds	r3, #38	; 0x26
 80098e4:	220a      	movs	r2, #10
 80098e6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80098e8:	4b0d      	ldr	r3, [pc, #52]	; (8009920 <USBD_HID_Init+0xc8>)
 80098ea:	7819      	ldrb	r1, [r3, #0]
 80098ec:	2304      	movs	r3, #4
 80098ee:	2203      	movs	r2, #3
 80098f0:	6878      	ldr	r0, [r7, #4]
 80098f2:	f001 ff98 	bl	800b826 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80098f6:	4b0a      	ldr	r3, [pc, #40]	; (8009920 <USBD_HID_Init+0xc8>)
 80098f8:	781b      	ldrb	r3, [r3, #0]
 80098fa:	f003 020f 	and.w	r2, r3, #15
 80098fe:	6879      	ldr	r1, [r7, #4]
 8009900:	4613      	mov	r3, r2
 8009902:	009b      	lsls	r3, r3, #2
 8009904:	4413      	add	r3, r2
 8009906:	009b      	lsls	r3, r3, #2
 8009908:	440b      	add	r3, r1
 800990a:	3324      	adds	r3, #36	; 0x24
 800990c:	2201      	movs	r2, #1
 800990e:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8009910:	68fb      	ldr	r3, [r7, #12]
 8009912:	2200      	movs	r2, #0
 8009914:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009916:	2300      	movs	r3, #0
}
 8009918:	4618      	mov	r0, r3
 800991a:	3710      	adds	r7, #16
 800991c:	46bd      	mov	sp, r7
 800991e:	bd80      	pop	{r7, pc}
 8009920:	20000106 	.word	0x20000106

08009924 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009924:	b580      	push	{r7, lr}
 8009926:	b082      	sub	sp, #8
 8009928:	af00      	add	r7, sp, #0
 800992a:	6078      	str	r0, [r7, #4]
 800992c:	460b      	mov	r3, r1
 800992e:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8009930:	4b1f      	ldr	r3, [pc, #124]	; (80099b0 <USBD_HID_DeInit+0x8c>)
 8009932:	781b      	ldrb	r3, [r3, #0]
 8009934:	4619      	mov	r1, r3
 8009936:	6878      	ldr	r0, [r7, #4]
 8009938:	f001 ff9b 	bl	800b872 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800993c:	4b1c      	ldr	r3, [pc, #112]	; (80099b0 <USBD_HID_DeInit+0x8c>)
 800993e:	781b      	ldrb	r3, [r3, #0]
 8009940:	f003 020f 	and.w	r2, r3, #15
 8009944:	6879      	ldr	r1, [r7, #4]
 8009946:	4613      	mov	r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	4413      	add	r3, r2
 800994c:	009b      	lsls	r3, r3, #2
 800994e:	440b      	add	r3, r1
 8009950:	3324      	adds	r3, #36	; 0x24
 8009952:	2200      	movs	r2, #0
 8009954:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8009956:	4b16      	ldr	r3, [pc, #88]	; (80099b0 <USBD_HID_DeInit+0x8c>)
 8009958:	781b      	ldrb	r3, [r3, #0]
 800995a:	f003 020f 	and.w	r2, r3, #15
 800995e:	6879      	ldr	r1, [r7, #4]
 8009960:	4613      	mov	r3, r2
 8009962:	009b      	lsls	r3, r3, #2
 8009964:	4413      	add	r3, r2
 8009966:	009b      	lsls	r3, r3, #2
 8009968:	440b      	add	r3, r1
 800996a:	3326      	adds	r3, #38	; 0x26
 800996c:	2200      	movs	r2, #0
 800996e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	32b0      	adds	r2, #176	; 0xb0
 800997a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d011      	beq.n	80099a6 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	32b0      	adds	r2, #176	; 0xb0
 800998c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009990:	4618      	mov	r0, r3
 8009992:	f002 f867 	bl	800ba64 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	32b0      	adds	r2, #176	; 0xb0
 80099a0:	2100      	movs	r1, #0
 80099a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80099a6:	2300      	movs	r3, #0
}
 80099a8:	4618      	mov	r0, r3
 80099aa:	3708      	adds	r7, #8
 80099ac:	46bd      	mov	sp, r7
 80099ae:	bd80      	pop	{r7, pc}
 80099b0:	20000106 	.word	0x20000106

080099b4 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b086      	sub	sp, #24
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
 80099bc:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	32b0      	adds	r2, #176	; 0xb0
 80099c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80099cc:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80099ce:	2300      	movs	r3, #0
 80099d0:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80099d2:	2300      	movs	r3, #0
 80099d4:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d101      	bne.n	80099e0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80099dc:	2303      	movs	r3, #3
 80099de:	e0e8      	b.n	8009bb2 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	781b      	ldrb	r3, [r3, #0]
 80099e4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d046      	beq.n	8009a7a <USBD_HID_Setup+0xc6>
 80099ec:	2b20      	cmp	r3, #32
 80099ee:	f040 80d8 	bne.w	8009ba2 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	785b      	ldrb	r3, [r3, #1]
 80099f6:	3b02      	subs	r3, #2
 80099f8:	2b09      	cmp	r3, #9
 80099fa:	d836      	bhi.n	8009a6a <USBD_HID_Setup+0xb6>
 80099fc:	a201      	add	r2, pc, #4	; (adr r2, 8009a04 <USBD_HID_Setup+0x50>)
 80099fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a02:	bf00      	nop
 8009a04:	08009a5b 	.word	0x08009a5b
 8009a08:	08009a3b 	.word	0x08009a3b
 8009a0c:	08009a6b 	.word	0x08009a6b
 8009a10:	08009a6b 	.word	0x08009a6b
 8009a14:	08009a6b 	.word	0x08009a6b
 8009a18:	08009a6b 	.word	0x08009a6b
 8009a1c:	08009a6b 	.word	0x08009a6b
 8009a20:	08009a6b 	.word	0x08009a6b
 8009a24:	08009a49 	.word	0x08009a49
 8009a28:	08009a2d 	.word	0x08009a2d
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	885b      	ldrh	r3, [r3, #2]
 8009a30:	b2db      	uxtb	r3, r3
 8009a32:	461a      	mov	r2, r3
 8009a34:	68fb      	ldr	r3, [r7, #12]
 8009a36:	601a      	str	r2, [r3, #0]
          break;
 8009a38:	e01e      	b.n	8009a78 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	4619      	mov	r1, r3
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f001 fba5 	bl	800b190 <USBD_CtlSendData>
          break;
 8009a46:	e017      	b.n	8009a78 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8009a48:	683b      	ldr	r3, [r7, #0]
 8009a4a:	885b      	ldrh	r3, [r3, #2]
 8009a4c:	0a1b      	lsrs	r3, r3, #8
 8009a4e:	b29b      	uxth	r3, r3
 8009a50:	b2db      	uxtb	r3, r3
 8009a52:	461a      	mov	r2, r3
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	605a      	str	r2, [r3, #4]
          break;
 8009a58:	e00e      	b.n	8009a78 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	3304      	adds	r3, #4
 8009a5e:	2201      	movs	r2, #1
 8009a60:	4619      	mov	r1, r3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f001 fb94 	bl	800b190 <USBD_CtlSendData>
          break;
 8009a68:	e006      	b.n	8009a78 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8009a6a:	6839      	ldr	r1, [r7, #0]
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f001 fb1e 	bl	800b0ae <USBD_CtlError>
          ret = USBD_FAIL;
 8009a72:	2303      	movs	r3, #3
 8009a74:	75fb      	strb	r3, [r7, #23]
          break;
 8009a76:	bf00      	nop
      }
      break;
 8009a78:	e09a      	b.n	8009bb0 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009a7a:	683b      	ldr	r3, [r7, #0]
 8009a7c:	785b      	ldrb	r3, [r3, #1]
 8009a7e:	2b0b      	cmp	r3, #11
 8009a80:	f200 8086 	bhi.w	8009b90 <USBD_HID_Setup+0x1dc>
 8009a84:	a201      	add	r2, pc, #4	; (adr r2, 8009a8c <USBD_HID_Setup+0xd8>)
 8009a86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a8a:	bf00      	nop
 8009a8c:	08009abd 	.word	0x08009abd
 8009a90:	08009b9f 	.word	0x08009b9f
 8009a94:	08009b91 	.word	0x08009b91
 8009a98:	08009b91 	.word	0x08009b91
 8009a9c:	08009b91 	.word	0x08009b91
 8009aa0:	08009b91 	.word	0x08009b91
 8009aa4:	08009ae7 	.word	0x08009ae7
 8009aa8:	08009b91 	.word	0x08009b91
 8009aac:	08009b91 	.word	0x08009b91
 8009ab0:	08009b91 	.word	0x08009b91
 8009ab4:	08009b3f 	.word	0x08009b3f
 8009ab8:	08009b69 	.word	0x08009b69
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009ac2:	b2db      	uxtb	r3, r3
 8009ac4:	2b03      	cmp	r3, #3
 8009ac6:	d107      	bne.n	8009ad8 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009ac8:	f107 030a 	add.w	r3, r7, #10
 8009acc:	2202      	movs	r2, #2
 8009ace:	4619      	mov	r1, r3
 8009ad0:	6878      	ldr	r0, [r7, #4]
 8009ad2:	f001 fb5d 	bl	800b190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009ad6:	e063      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009ad8:	6839      	ldr	r1, [r7, #0]
 8009ada:	6878      	ldr	r0, [r7, #4]
 8009adc:	f001 fae7 	bl	800b0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009ae0:	2303      	movs	r3, #3
 8009ae2:	75fb      	strb	r3, [r7, #23]
          break;
 8009ae4:	e05c      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	885b      	ldrh	r3, [r3, #2]
 8009aea:	0a1b      	lsrs	r3, r3, #8
 8009aec:	b29b      	uxth	r3, r3
 8009aee:	2b22      	cmp	r3, #34	; 0x22
 8009af0:	d108      	bne.n	8009b04 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	88db      	ldrh	r3, [r3, #6]
 8009af6:	2b4a      	cmp	r3, #74	; 0x4a
 8009af8:	bf28      	it	cs
 8009afa:	234a      	movcs	r3, #74	; 0x4a
 8009afc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8009afe:	4b2f      	ldr	r3, [pc, #188]	; (8009bbc <USBD_HID_Setup+0x208>)
 8009b00:	613b      	str	r3, [r7, #16]
 8009b02:	e015      	b.n	8009b30 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8009b04:	683b      	ldr	r3, [r7, #0]
 8009b06:	885b      	ldrh	r3, [r3, #2]
 8009b08:	0a1b      	lsrs	r3, r3, #8
 8009b0a:	b29b      	uxth	r3, r3
 8009b0c:	2b21      	cmp	r3, #33	; 0x21
 8009b0e:	d108      	bne.n	8009b22 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8009b10:	4b2b      	ldr	r3, [pc, #172]	; (8009bc0 <USBD_HID_Setup+0x20c>)
 8009b12:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8009b14:	683b      	ldr	r3, [r7, #0]
 8009b16:	88db      	ldrh	r3, [r3, #6]
 8009b18:	2b09      	cmp	r3, #9
 8009b1a:	bf28      	it	cs
 8009b1c:	2309      	movcs	r3, #9
 8009b1e:	82bb      	strh	r3, [r7, #20]
 8009b20:	e006      	b.n	8009b30 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8009b22:	6839      	ldr	r1, [r7, #0]
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f001 fac2 	bl	800b0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	75fb      	strb	r3, [r7, #23]
            break;
 8009b2e:	e037      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8009b30:	8abb      	ldrh	r3, [r7, #20]
 8009b32:	461a      	mov	r2, r3
 8009b34:	6939      	ldr	r1, [r7, #16]
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f001 fb2a 	bl	800b190 <USBD_CtlSendData>
          break;
 8009b3c:	e030      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b44:	b2db      	uxtb	r3, r3
 8009b46:	2b03      	cmp	r3, #3
 8009b48:	d107      	bne.n	8009b5a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	3308      	adds	r3, #8
 8009b4e:	2201      	movs	r2, #1
 8009b50:	4619      	mov	r1, r3
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f001 fb1c 	bl	800b190 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b58:	e022      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009b5a:	6839      	ldr	r1, [r7, #0]
 8009b5c:	6878      	ldr	r0, [r7, #4]
 8009b5e:	f001 faa6 	bl	800b0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009b62:	2303      	movs	r3, #3
 8009b64:	75fb      	strb	r3, [r7, #23]
          break;
 8009b66:	e01b      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b03      	cmp	r3, #3
 8009b72:	d106      	bne.n	8009b82 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	885b      	ldrh	r3, [r3, #2]
 8009b78:	b2db      	uxtb	r3, r3
 8009b7a:	461a      	mov	r2, r3
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009b80:	e00e      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8009b82:	6839      	ldr	r1, [r7, #0]
 8009b84:	6878      	ldr	r0, [r7, #4]
 8009b86:	f001 fa92 	bl	800b0ae <USBD_CtlError>
            ret = USBD_FAIL;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	75fb      	strb	r3, [r7, #23]
          break;
 8009b8e:	e007      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009b90:	6839      	ldr	r1, [r7, #0]
 8009b92:	6878      	ldr	r0, [r7, #4]
 8009b94:	f001 fa8b 	bl	800b0ae <USBD_CtlError>
          ret = USBD_FAIL;
 8009b98:	2303      	movs	r3, #3
 8009b9a:	75fb      	strb	r3, [r7, #23]
          break;
 8009b9c:	e000      	b.n	8009ba0 <USBD_HID_Setup+0x1ec>
          break;
 8009b9e:	bf00      	nop
      }
      break;
 8009ba0:	e006      	b.n	8009bb0 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8009ba2:	6839      	ldr	r1, [r7, #0]
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	f001 fa82 	bl	800b0ae <USBD_CtlError>
      ret = USBD_FAIL;
 8009baa:	2303      	movs	r3, #3
 8009bac:	75fb      	strb	r3, [r7, #23]
      break;
 8009bae:	bf00      	nop
  }

  return (uint8_t)ret;
 8009bb0:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb2:	4618      	mov	r0, r3
 8009bb4:	3718      	adds	r7, #24
 8009bb6:	46bd      	mov	sp, r7
 8009bb8:	bd80      	pop	{r7, pc}
 8009bba:	bf00      	nop
 8009bbc:	200000bc 	.word	0x200000bc
 8009bc0:	200000a4 	.word	0x200000a4

08009bc4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	b084      	sub	sp, #16
 8009bc8:	af00      	add	r7, sp, #0
 8009bca:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009bcc:	2181      	movs	r1, #129	; 0x81
 8009bce:	4809      	ldr	r0, [pc, #36]	; (8009bf4 <USBD_HID_GetFSCfgDesc+0x30>)
 8009bd0:	f000 fc35 	bl	800a43e <USBD_GetEpDesc>
 8009bd4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d002      	beq.n	8009be2 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009bdc:	68fb      	ldr	r3, [r7, #12]
 8009bde:	220a      	movs	r2, #10
 8009be0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2222      	movs	r2, #34	; 0x22
 8009be6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009be8:	4b02      	ldr	r3, [pc, #8]	; (8009bf4 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8009bea:	4618      	mov	r0, r3
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000080 	.word	0x20000080

08009bf8 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	b084      	sub	sp, #16
 8009bfc:	af00      	add	r7, sp, #0
 8009bfe:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009c00:	2181      	movs	r1, #129	; 0x81
 8009c02:	4809      	ldr	r0, [pc, #36]	; (8009c28 <USBD_HID_GetHSCfgDesc+0x30>)
 8009c04:	f000 fc1b 	bl	800a43e <USBD_GetEpDesc>
 8009c08:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d002      	beq.n	8009c16 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	2207      	movs	r2, #7
 8009c14:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2222      	movs	r2, #34	; 0x22
 8009c1a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009c1c:	4b02      	ldr	r3, [pc, #8]	; (8009c28 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3710      	adds	r7, #16
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}
 8009c26:	bf00      	nop
 8009c28:	20000080 	.word	0x20000080

08009c2c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8009c34:	2181      	movs	r1, #129	; 0x81
 8009c36:	4809      	ldr	r0, [pc, #36]	; (8009c5c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8009c38:	f000 fc01 	bl	800a43e <USBD_GetEpDesc>
 8009c3c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d002      	beq.n	8009c4a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	220a      	movs	r2, #10
 8009c48:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	2222      	movs	r2, #34	; 0x22
 8009c4e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8009c50:	4b02      	ldr	r3, [pc, #8]	; (8009c5c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8009c52:	4618      	mov	r0, r3
 8009c54:	3710      	adds	r7, #16
 8009c56:	46bd      	mov	sp, r7
 8009c58:	bd80      	pop	{r7, pc}
 8009c5a:	bf00      	nop
 8009c5c:	20000080 	.word	0x20000080

08009c60 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009c60:	b480      	push	{r7}
 8009c62:	b083      	sub	sp, #12
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	6078      	str	r0, [r7, #4]
 8009c68:	460b      	mov	r3, r1
 8009c6a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	32b0      	adds	r2, #176	; 0xb0
 8009c76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8009c7e:	2300      	movs	r3, #0
}
 8009c80:	4618      	mov	r0, r3
 8009c82:	370c      	adds	r7, #12
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr

08009c8c <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8009c8c:	b480      	push	{r7}
 8009c8e:	b083      	sub	sp, #12
 8009c90:	af00      	add	r7, sp, #0
 8009c92:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	220a      	movs	r2, #10
 8009c98:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8009c9a:	4b03      	ldr	r3, [pc, #12]	; (8009ca8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	370c      	adds	r7, #12
 8009ca0:	46bd      	mov	sp, r7
 8009ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ca6:	4770      	bx	lr
 8009ca8:	200000b0 	.word	0x200000b0

08009cac <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b086      	sub	sp, #24
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	60f8      	str	r0, [r7, #12]
 8009cb4:	60b9      	str	r1, [r7, #8]
 8009cb6:	4613      	mov	r3, r2
 8009cb8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	2b00      	cmp	r3, #0
 8009cbe:	d101      	bne.n	8009cc4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009cc0:	2303      	movs	r3, #3
 8009cc2:	e01f      	b.n	8009d04 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	2200      	movs	r2, #0
 8009cd0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8009cdc:	68bb      	ldr	r3, [r7, #8]
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	68ba      	ldr	r2, [r7, #8]
 8009ce6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	2201      	movs	r2, #1
 8009cee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	79fa      	ldrb	r2, [r7, #7]
 8009cf6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8009cf8:	68f8      	ldr	r0, [r7, #12]
 8009cfa:	f001 fd2d 	bl	800b758 <USBD_LL_Init>
 8009cfe:	4603      	mov	r3, r0
 8009d00:	75fb      	strb	r3, [r7, #23]

  return ret;
 8009d02:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d04:	4618      	mov	r0, r3
 8009d06:	3718      	adds	r7, #24
 8009d08:	46bd      	mov	sp, r7
 8009d0a:	bd80      	pop	{r7, pc}

08009d0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8009d0c:	b580      	push	{r7, lr}
 8009d0e:	b084      	sub	sp, #16
 8009d10:	af00      	add	r7, sp, #0
 8009d12:	6078      	str	r0, [r7, #4]
 8009d14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	d101      	bne.n	8009d24 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8009d20:	2303      	movs	r3, #3
 8009d22:	e025      	b.n	8009d70 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	683a      	ldr	r2, [r7, #0]
 8009d28:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	32ae      	adds	r2, #174	; 0xae
 8009d36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d00f      	beq.n	8009d60 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	32ae      	adds	r2, #174	; 0xae
 8009d4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d50:	f107 020e 	add.w	r2, r7, #14
 8009d54:	4610      	mov	r0, r2
 8009d56:	4798      	blx	r3
 8009d58:	4602      	mov	r2, r0
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8009d66:	1c5a      	adds	r2, r3, #1
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3710      	adds	r7, #16
 8009d74:	46bd      	mov	sp, r7
 8009d76:	bd80      	pop	{r7, pc}

08009d78 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b082      	sub	sp, #8
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f001 fd35 	bl	800b7f0 <USBD_LL_Start>
 8009d86:	4603      	mov	r3, r0
}
 8009d88:	4618      	mov	r0, r3
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8009d90:	b480      	push	{r7}
 8009d92:	b083      	sub	sp, #12
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8009d98:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8009d9a:	4618      	mov	r0, r3
 8009d9c:	370c      	adds	r7, #12
 8009d9e:	46bd      	mov	sp, r7
 8009da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da4:	4770      	bx	lr

08009da6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009da6:	b580      	push	{r7, lr}
 8009da8:	b084      	sub	sp, #16
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
 8009dae:	460b      	mov	r3, r1
 8009db0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d009      	beq.n	8009dd4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	78fa      	ldrb	r2, [r7, #3]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	6878      	ldr	r0, [r7, #4]
 8009dce:	4798      	blx	r3
 8009dd0:	4603      	mov	r3, r0
 8009dd2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009dd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3710      	adds	r7, #16
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}

08009dde <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009dde:	b580      	push	{r7, lr}
 8009de0:	b084      	sub	sp, #16
 8009de2:	af00      	add	r7, sp, #0
 8009de4:	6078      	str	r0, [r7, #4]
 8009de6:	460b      	mov	r3, r1
 8009de8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8009dea:	2300      	movs	r3, #0
 8009dec:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009df4:	685b      	ldr	r3, [r3, #4]
 8009df6:	78fa      	ldrb	r2, [r7, #3]
 8009df8:	4611      	mov	r1, r2
 8009dfa:	6878      	ldr	r0, [r7, #4]
 8009dfc:	4798      	blx	r3
 8009dfe:	4603      	mov	r3, r0
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d001      	beq.n	8009e08 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8009e04:	2303      	movs	r3, #3
 8009e06:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8009e08:	7bfb      	ldrb	r3, [r7, #15]
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3710      	adds	r7, #16
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}

08009e12 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8009e12:	b580      	push	{r7, lr}
 8009e14:	b084      	sub	sp, #16
 8009e16:	af00      	add	r7, sp, #0
 8009e18:	6078      	str	r0, [r7, #4]
 8009e1a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8009e1c:	687b      	ldr	r3, [r7, #4]
 8009e1e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e22:	6839      	ldr	r1, [r7, #0]
 8009e24:	4618      	mov	r0, r3
 8009e26:	f001 f908 	bl	800b03a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	2201      	movs	r2, #1
 8009e2e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8009e38:	461a      	mov	r2, r3
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e46:	f003 031f 	and.w	r3, r3, #31
 8009e4a:	2b02      	cmp	r3, #2
 8009e4c:	d01a      	beq.n	8009e84 <USBD_LL_SetupStage+0x72>
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d822      	bhi.n	8009e98 <USBD_LL_SetupStage+0x86>
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <USBD_LL_SetupStage+0x4a>
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d00a      	beq.n	8009e70 <USBD_LL_SetupStage+0x5e>
 8009e5a:	e01d      	b.n	8009e98 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8009e5c:	687b      	ldr	r3, [r7, #4]
 8009e5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e62:	4619      	mov	r1, r3
 8009e64:	6878      	ldr	r0, [r7, #4]
 8009e66:	f000 fb5f 	bl	800a528 <USBD_StdDevReq>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	73fb      	strb	r3, [r7, #15]
      break;
 8009e6e:	e020      	b.n	8009eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e76:	4619      	mov	r1, r3
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fbc7 	bl	800a60c <USBD_StdItfReq>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	73fb      	strb	r3, [r7, #15]
      break;
 8009e82:	e016      	b.n	8009eb2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8009e8a:	4619      	mov	r1, r3
 8009e8c:	6878      	ldr	r0, [r7, #4]
 8009e8e:	f000 fc29 	bl	800a6e4 <USBD_StdEPReq>
 8009e92:	4603      	mov	r3, r0
 8009e94:	73fb      	strb	r3, [r7, #15]
      break;
 8009e96:	e00c      	b.n	8009eb2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009e9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8009ea2:	b2db      	uxtb	r3, r3
 8009ea4:	4619      	mov	r1, r3
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f001 fd02 	bl	800b8b0 <USBD_LL_StallEP>
 8009eac:	4603      	mov	r3, r0
 8009eae:	73fb      	strb	r3, [r7, #15]
      break;
 8009eb0:	bf00      	nop
  }

  return ret;
 8009eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009eb4:	4618      	mov	r0, r3
 8009eb6:	3710      	adds	r7, #16
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	460b      	mov	r3, r1
 8009ec6:	607a      	str	r2, [r7, #4]
 8009ec8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8009eca:	2300      	movs	r3, #0
 8009ecc:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8009ece:	7afb      	ldrb	r3, [r7, #11]
 8009ed0:	2b00      	cmp	r3, #0
 8009ed2:	d16e      	bne.n	8009fb2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8009eda:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8009ee2:	2b03      	cmp	r3, #3
 8009ee4:	f040 8098 	bne.w	800a018 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8009ee8:	693b      	ldr	r3, [r7, #16]
 8009eea:	689a      	ldr	r2, [r3, #8]
 8009eec:	693b      	ldr	r3, [r7, #16]
 8009eee:	68db      	ldr	r3, [r3, #12]
 8009ef0:	429a      	cmp	r2, r3
 8009ef2:	d913      	bls.n	8009f1c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8009ef4:	693b      	ldr	r3, [r7, #16]
 8009ef6:	689a      	ldr	r2, [r3, #8]
 8009ef8:	693b      	ldr	r3, [r7, #16]
 8009efa:	68db      	ldr	r3, [r3, #12]
 8009efc:	1ad2      	subs	r2, r2, r3
 8009efe:	693b      	ldr	r3, [r7, #16]
 8009f00:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8009f02:	693b      	ldr	r3, [r7, #16]
 8009f04:	68da      	ldr	r2, [r3, #12]
 8009f06:	693b      	ldr	r3, [r7, #16]
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	bf28      	it	cs
 8009f0e:	4613      	movcs	r3, r2
 8009f10:	461a      	mov	r2, r3
 8009f12:	6879      	ldr	r1, [r7, #4]
 8009f14:	68f8      	ldr	r0, [r7, #12]
 8009f16:	f001 f967 	bl	800b1e8 <USBD_CtlContinueRx>
 8009f1a:	e07d      	b.n	800a018 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8009f22:	f003 031f 	and.w	r3, r3, #31
 8009f26:	2b02      	cmp	r3, #2
 8009f28:	d014      	beq.n	8009f54 <USBD_LL_DataOutStage+0x98>
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	d81d      	bhi.n	8009f6a <USBD_LL_DataOutStage+0xae>
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d002      	beq.n	8009f38 <USBD_LL_DataOutStage+0x7c>
 8009f32:	2b01      	cmp	r3, #1
 8009f34:	d003      	beq.n	8009f3e <USBD_LL_DataOutStage+0x82>
 8009f36:	e018      	b.n	8009f6a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8009f38:	2300      	movs	r3, #0
 8009f3a:	75bb      	strb	r3, [r7, #22]
            break;
 8009f3c:	e018      	b.n	8009f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	4619      	mov	r1, r3
 8009f48:	68f8      	ldr	r0, [r7, #12]
 8009f4a:	f000 fa5e 	bl	800a40a <USBD_CoreFindIF>
 8009f4e:	4603      	mov	r3, r0
 8009f50:	75bb      	strb	r3, [r7, #22]
            break;
 8009f52:	e00d      	b.n	8009f70 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8009f5a:	b2db      	uxtb	r3, r3
 8009f5c:	4619      	mov	r1, r3
 8009f5e:	68f8      	ldr	r0, [r7, #12]
 8009f60:	f000 fa60 	bl	800a424 <USBD_CoreFindEP>
 8009f64:	4603      	mov	r3, r0
 8009f66:	75bb      	strb	r3, [r7, #22]
            break;
 8009f68:	e002      	b.n	8009f70 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	75bb      	strb	r3, [r7, #22]
            break;
 8009f6e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8009f70:	7dbb      	ldrb	r3, [r7, #22]
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d119      	bne.n	8009faa <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	2b03      	cmp	r3, #3
 8009f80:	d113      	bne.n	8009faa <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8009f82:	7dba      	ldrb	r2, [r7, #22]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	32ae      	adds	r2, #174	; 0xae
 8009f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f8c:	691b      	ldr	r3, [r3, #16]
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d00b      	beq.n	8009faa <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8009f92:	7dba      	ldrb	r2, [r7, #22]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8009f9a:	7dba      	ldrb	r2, [r7, #22]
 8009f9c:	68fb      	ldr	r3, [r7, #12]
 8009f9e:	32ae      	adds	r2, #174	; 0xae
 8009fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fa4:	691b      	ldr	r3, [r3, #16]
 8009fa6:	68f8      	ldr	r0, [r7, #12]
 8009fa8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8009faa:	68f8      	ldr	r0, [r7, #12]
 8009fac:	f001 f92d 	bl	800b20a <USBD_CtlSendStatus>
 8009fb0:	e032      	b.n	800a018 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8009fb2:	7afb      	ldrb	r3, [r7, #11]
 8009fb4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009fb8:	b2db      	uxtb	r3, r3
 8009fba:	4619      	mov	r1, r3
 8009fbc:	68f8      	ldr	r0, [r7, #12]
 8009fbe:	f000 fa31 	bl	800a424 <USBD_CoreFindEP>
 8009fc2:	4603      	mov	r3, r0
 8009fc4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009fc6:	7dbb      	ldrb	r3, [r7, #22]
 8009fc8:	2bff      	cmp	r3, #255	; 0xff
 8009fca:	d025      	beq.n	800a018 <USBD_LL_DataOutStage+0x15c>
 8009fcc:	7dbb      	ldrb	r3, [r7, #22]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d122      	bne.n	800a018 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009fd8:	b2db      	uxtb	r3, r3
 8009fda:	2b03      	cmp	r3, #3
 8009fdc:	d117      	bne.n	800a00e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8009fde:	7dba      	ldrb	r2, [r7, #22]
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	32ae      	adds	r2, #174	; 0xae
 8009fe4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009fe8:	699b      	ldr	r3, [r3, #24]
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00f      	beq.n	800a00e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8009fee:	7dba      	ldrb	r2, [r7, #22]
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8009ff6:	7dba      	ldrb	r2, [r7, #22]
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	32ae      	adds	r2, #174	; 0xae
 8009ffc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a000:	699b      	ldr	r3, [r3, #24]
 800a002:	7afa      	ldrb	r2, [r7, #11]
 800a004:	4611      	mov	r1, r2
 800a006:	68f8      	ldr	r0, [r7, #12]
 800a008:	4798      	blx	r3
 800a00a:	4603      	mov	r3, r0
 800a00c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a00e:	7dfb      	ldrb	r3, [r7, #23]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d001      	beq.n	800a018 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800a014:	7dfb      	ldrb	r3, [r7, #23]
 800a016:	e000      	b.n	800a01a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800a018:	2300      	movs	r3, #0
}
 800a01a:	4618      	mov	r0, r3
 800a01c:	3718      	adds	r7, #24
 800a01e:	46bd      	mov	sp, r7
 800a020:	bd80      	pop	{r7, pc}

0800a022 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a022:	b580      	push	{r7, lr}
 800a024:	b086      	sub	sp, #24
 800a026:	af00      	add	r7, sp, #0
 800a028:	60f8      	str	r0, [r7, #12]
 800a02a:	460b      	mov	r3, r1
 800a02c:	607a      	str	r2, [r7, #4]
 800a02e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800a030:	7afb      	ldrb	r3, [r7, #11]
 800a032:	2b00      	cmp	r3, #0
 800a034:	d16f      	bne.n	800a116 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	3314      	adds	r3, #20
 800a03a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800a042:	2b02      	cmp	r3, #2
 800a044:	d15a      	bne.n	800a0fc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	689a      	ldr	r2, [r3, #8]
 800a04a:	693b      	ldr	r3, [r7, #16]
 800a04c:	68db      	ldr	r3, [r3, #12]
 800a04e:	429a      	cmp	r2, r3
 800a050:	d914      	bls.n	800a07c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800a052:	693b      	ldr	r3, [r7, #16]
 800a054:	689a      	ldr	r2, [r3, #8]
 800a056:	693b      	ldr	r3, [r7, #16]
 800a058:	68db      	ldr	r3, [r3, #12]
 800a05a:	1ad2      	subs	r2, r2, r3
 800a05c:	693b      	ldr	r3, [r7, #16]
 800a05e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800a060:	693b      	ldr	r3, [r7, #16]
 800a062:	689b      	ldr	r3, [r3, #8]
 800a064:	461a      	mov	r2, r3
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	68f8      	ldr	r0, [r7, #12]
 800a06a:	f001 f8ac 	bl	800b1c6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a06e:	2300      	movs	r3, #0
 800a070:	2200      	movs	r2, #0
 800a072:	2100      	movs	r1, #0
 800a074:	68f8      	ldr	r0, [r7, #12]
 800a076:	f001 fcc5 	bl	800ba04 <USBD_LL_PrepareReceive>
 800a07a:	e03f      	b.n	800a0fc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a07c:	693b      	ldr	r3, [r7, #16]
 800a07e:	68da      	ldr	r2, [r3, #12]
 800a080:	693b      	ldr	r3, [r7, #16]
 800a082:	689b      	ldr	r3, [r3, #8]
 800a084:	429a      	cmp	r2, r3
 800a086:	d11c      	bne.n	800a0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800a088:	693b      	ldr	r3, [r7, #16]
 800a08a:	685a      	ldr	r2, [r3, #4]
 800a08c:	693b      	ldr	r3, [r7, #16]
 800a08e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a090:	429a      	cmp	r2, r3
 800a092:	d316      	bcc.n	800a0c2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800a094:	693b      	ldr	r3, [r7, #16]
 800a096:	685a      	ldr	r2, [r3, #4]
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a09e:	429a      	cmp	r2, r3
 800a0a0:	d20f      	bcs.n	800a0c2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	2100      	movs	r1, #0
 800a0a6:	68f8      	ldr	r0, [r7, #12]
 800a0a8:	f001 f88d 	bl	800b1c6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a0b4:	2300      	movs	r3, #0
 800a0b6:	2200      	movs	r2, #0
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	68f8      	ldr	r0, [r7, #12]
 800a0bc:	f001 fca2 	bl	800ba04 <USBD_LL_PrepareReceive>
 800a0c0:	e01c      	b.n	800a0fc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a0c8:	b2db      	uxtb	r3, r3
 800a0ca:	2b03      	cmp	r3, #3
 800a0cc:	d10f      	bne.n	800a0ee <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	2b00      	cmp	r3, #0
 800a0d8:	d009      	beq.n	800a0ee <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a0e8:	68db      	ldr	r3, [r3, #12]
 800a0ea:	68f8      	ldr	r0, [r7, #12]
 800a0ec:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a0ee:	2180      	movs	r1, #128	; 0x80
 800a0f0:	68f8      	ldr	r0, [r7, #12]
 800a0f2:	f001 fbdd 	bl	800b8b0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a0f6:	68f8      	ldr	r0, [r7, #12]
 800a0f8:	f001 f89a 	bl	800b230 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800a102:	2b00      	cmp	r3, #0
 800a104:	d03a      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800a106:	68f8      	ldr	r0, [r7, #12]
 800a108:	f7ff fe42 	bl	8009d90 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a10c:	68fb      	ldr	r3, [r7, #12]
 800a10e:	2200      	movs	r2, #0
 800a110:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800a114:	e032      	b.n	800a17c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a116:	7afb      	ldrb	r3, [r7, #11]
 800a118:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	4619      	mov	r1, r3
 800a120:	68f8      	ldr	r0, [r7, #12]
 800a122:	f000 f97f 	bl	800a424 <USBD_CoreFindEP>
 800a126:	4603      	mov	r3, r0
 800a128:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a12a:	7dfb      	ldrb	r3, [r7, #23]
 800a12c:	2bff      	cmp	r3, #255	; 0xff
 800a12e:	d025      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
 800a130:	7dfb      	ldrb	r3, [r7, #23]
 800a132:	2b00      	cmp	r3, #0
 800a134:	d122      	bne.n	800a17c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a13c:	b2db      	uxtb	r3, r3
 800a13e:	2b03      	cmp	r3, #3
 800a140:	d11c      	bne.n	800a17c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a142:	7dfa      	ldrb	r2, [r7, #23]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	32ae      	adds	r2, #174	; 0xae
 800a148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	2b00      	cmp	r3, #0
 800a150:	d014      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800a152:	7dfa      	ldrb	r2, [r7, #23]
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a15a:	7dfa      	ldrb	r2, [r7, #23]
 800a15c:	68fb      	ldr	r3, [r7, #12]
 800a15e:	32ae      	adds	r2, #174	; 0xae
 800a160:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a164:	695b      	ldr	r3, [r3, #20]
 800a166:	7afa      	ldrb	r2, [r7, #11]
 800a168:	4611      	mov	r1, r2
 800a16a:	68f8      	ldr	r0, [r7, #12]
 800a16c:	4798      	blx	r3
 800a16e:	4603      	mov	r3, r0
 800a170:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a172:	7dbb      	ldrb	r3, [r7, #22]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d001      	beq.n	800a17c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800a178:	7dbb      	ldrb	r3, [r7, #22]
 800a17a:	e000      	b.n	800a17e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800a17c:	2300      	movs	r3, #0
}
 800a17e:	4618      	mov	r0, r3
 800a180:	3718      	adds	r7, #24
 800a182:	46bd      	mov	sp, r7
 800a184:	bd80      	pop	{r7, pc}

0800a186 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a186:	b580      	push	{r7, lr}
 800a188:	b084      	sub	sp, #16
 800a18a:	af00      	add	r7, sp, #0
 800a18c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a18e:	2300      	movs	r3, #0
 800a190:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	2201      	movs	r2, #1
 800a196:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	2200      	movs	r2, #0
 800a19e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	2200      	movs	r2, #0
 800a1ac:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800a1b0:	687b      	ldr	r3, [r7, #4]
 800a1b2:	2200      	movs	r2, #0
 800a1b4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1be:	2b00      	cmp	r3, #0
 800a1c0:	d014      	beq.n	800a1ec <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1c8:	685b      	ldr	r3, [r3, #4]
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d00e      	beq.n	800a1ec <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a1d4:	685b      	ldr	r3, [r3, #4]
 800a1d6:	687a      	ldr	r2, [r7, #4]
 800a1d8:	6852      	ldr	r2, [r2, #4]
 800a1da:	b2d2      	uxtb	r2, r2
 800a1dc:	4611      	mov	r1, r2
 800a1de:	6878      	ldr	r0, [r7, #4]
 800a1e0:	4798      	blx	r3
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	2b00      	cmp	r3, #0
 800a1e6:	d001      	beq.n	800a1ec <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a1e8:	2303      	movs	r3, #3
 800a1ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a1ec:	2340      	movs	r3, #64	; 0x40
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	2100      	movs	r1, #0
 800a1f2:	6878      	ldr	r0, [r7, #4]
 800a1f4:	f001 fb17 	bl	800b826 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2240      	movs	r2, #64	; 0x40
 800a204:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a208:	2340      	movs	r3, #64	; 0x40
 800a20a:	2200      	movs	r2, #0
 800a20c:	2180      	movs	r1, #128	; 0x80
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	f001 fb09 	bl	800b826 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	2201      	movs	r2, #1
 800a218:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	2240      	movs	r2, #64	; 0x40
 800a21e:	621a      	str	r2, [r3, #32]

  return ret;
 800a220:	7bfb      	ldrb	r3, [r7, #15]
}
 800a222:	4618      	mov	r0, r3
 800a224:	3710      	adds	r7, #16
 800a226:	46bd      	mov	sp, r7
 800a228:	bd80      	pop	{r7, pc}

0800a22a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a22a:	b480      	push	{r7}
 800a22c:	b083      	sub	sp, #12
 800a22e:	af00      	add	r7, sp, #0
 800a230:	6078      	str	r0, [r7, #4]
 800a232:	460b      	mov	r3, r1
 800a234:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	78fa      	ldrb	r2, [r7, #3]
 800a23a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a23c:	2300      	movs	r3, #0
}
 800a23e:	4618      	mov	r0, r3
 800a240:	370c      	adds	r7, #12
 800a242:	46bd      	mov	sp, r7
 800a244:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a248:	4770      	bx	lr

0800a24a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a24a:	b480      	push	{r7}
 800a24c:	b083      	sub	sp, #12
 800a24e:	af00      	add	r7, sp, #0
 800a250:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a258:	b2da      	uxtb	r2, r3
 800a25a:	687b      	ldr	r3, [r7, #4]
 800a25c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2204      	movs	r2, #4
 800a264:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800a268:	2300      	movs	r3, #0
}
 800a26a:	4618      	mov	r0, r3
 800a26c:	370c      	adds	r7, #12
 800a26e:	46bd      	mov	sp, r7
 800a270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a274:	4770      	bx	lr

0800a276 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a276:	b480      	push	{r7}
 800a278:	b083      	sub	sp, #12
 800a27a:	af00      	add	r7, sp, #0
 800a27c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a284:	b2db      	uxtb	r3, r3
 800a286:	2b04      	cmp	r3, #4
 800a288:	d106      	bne.n	800a298 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800a290:	b2da      	uxtb	r2, r3
 800a292:	687b      	ldr	r3, [r7, #4]
 800a294:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800a298:	2300      	movs	r3, #0
}
 800a29a:	4618      	mov	r0, r3
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a4:	4770      	bx	lr

0800a2a6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b082      	sub	sp, #8
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a2b4:	b2db      	uxtb	r3, r3
 800a2b6:	2b03      	cmp	r3, #3
 800a2b8:	d110      	bne.n	800a2dc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	d00b      	beq.n	800a2dc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2ca:	69db      	ldr	r3, [r3, #28]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d005      	beq.n	800a2dc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a2d6:	69db      	ldr	r3, [r3, #28]
 800a2d8:	6878      	ldr	r0, [r7, #4]
 800a2da:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a2dc:	2300      	movs	r3, #0
}
 800a2de:	4618      	mov	r0, r3
 800a2e0:	3708      	adds	r7, #8
 800a2e2:	46bd      	mov	sp, r7
 800a2e4:	bd80      	pop	{r7, pc}

0800a2e6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a2e6:	b580      	push	{r7, lr}
 800a2e8:	b082      	sub	sp, #8
 800a2ea:	af00      	add	r7, sp, #0
 800a2ec:	6078      	str	r0, [r7, #4]
 800a2ee:	460b      	mov	r3, r1
 800a2f0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	32ae      	adds	r2, #174	; 0xae
 800a2fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a300:	2b00      	cmp	r3, #0
 800a302:	d101      	bne.n	800a308 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a304:	2303      	movs	r3, #3
 800a306:	e01c      	b.n	800a342 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a30e:	b2db      	uxtb	r3, r3
 800a310:	2b03      	cmp	r3, #3
 800a312:	d115      	bne.n	800a340 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	32ae      	adds	r2, #174	; 0xae
 800a31e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a322:	6a1b      	ldr	r3, [r3, #32]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d00b      	beq.n	800a340 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	32ae      	adds	r2, #174	; 0xae
 800a332:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a336:	6a1b      	ldr	r3, [r3, #32]
 800a338:	78fa      	ldrb	r2, [r7, #3]
 800a33a:	4611      	mov	r1, r2
 800a33c:	6878      	ldr	r0, [r7, #4]
 800a33e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a340:	2300      	movs	r3, #0
}
 800a342:	4618      	mov	r0, r3
 800a344:	3708      	adds	r7, #8
 800a346:	46bd      	mov	sp, r7
 800a348:	bd80      	pop	{r7, pc}

0800a34a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a34a:	b580      	push	{r7, lr}
 800a34c:	b082      	sub	sp, #8
 800a34e:	af00      	add	r7, sp, #0
 800a350:	6078      	str	r0, [r7, #4]
 800a352:	460b      	mov	r3, r1
 800a354:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a356:	687b      	ldr	r3, [r7, #4]
 800a358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	32ae      	adds	r2, #174	; 0xae
 800a360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a364:	2b00      	cmp	r3, #0
 800a366:	d101      	bne.n	800a36c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a368:	2303      	movs	r3, #3
 800a36a:	e01c      	b.n	800a3a6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a372:	b2db      	uxtb	r3, r3
 800a374:	2b03      	cmp	r3, #3
 800a376:	d115      	bne.n	800a3a4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	32ae      	adds	r2, #174	; 0xae
 800a382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d00b      	beq.n	800a3a4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a392:	687b      	ldr	r3, [r7, #4]
 800a394:	32ae      	adds	r2, #174	; 0xae
 800a396:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a39a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a39c:	78fa      	ldrb	r2, [r7, #3]
 800a39e:	4611      	mov	r1, r2
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a3a4:	2300      	movs	r3, #0
}
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	3708      	adds	r7, #8
 800a3aa:	46bd      	mov	sp, r7
 800a3ac:	bd80      	pop	{r7, pc}

0800a3ae <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a3ae:	b480      	push	{r7}
 800a3b0:	b083      	sub	sp, #12
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	370c      	adds	r7, #12
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c2:	4770      	bx	lr

0800a3c4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b084      	sub	sp, #16
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800a3cc:	2300      	movs	r3, #0
 800a3ce:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2201      	movs	r2, #1
 800a3d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d00e      	beq.n	800a400 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	687a      	ldr	r2, [r7, #4]
 800a3ec:	6852      	ldr	r2, [r2, #4]
 800a3ee:	b2d2      	uxtb	r2, r2
 800a3f0:	4611      	mov	r1, r2
 800a3f2:	6878      	ldr	r0, [r7, #4]
 800a3f4:	4798      	blx	r3
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d001      	beq.n	800a400 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800a3fc:	2303      	movs	r3, #3
 800a3fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a400:	7bfb      	ldrb	r3, [r7, #15]
}
 800a402:	4618      	mov	r0, r3
 800a404:	3710      	adds	r7, #16
 800a406:	46bd      	mov	sp, r7
 800a408:	bd80      	pop	{r7, pc}

0800a40a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a40a:	b480      	push	{r7}
 800a40c:	b083      	sub	sp, #12
 800a40e:	af00      	add	r7, sp, #0
 800a410:	6078      	str	r0, [r7, #4]
 800a412:	460b      	mov	r3, r1
 800a414:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a416:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a418:	4618      	mov	r0, r3
 800a41a:	370c      	adds	r7, #12
 800a41c:	46bd      	mov	sp, r7
 800a41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a422:	4770      	bx	lr

0800a424 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800a424:	b480      	push	{r7}
 800a426:	b083      	sub	sp, #12
 800a428:	af00      	add	r7, sp, #0
 800a42a:	6078      	str	r0, [r7, #4]
 800a42c:	460b      	mov	r3, r1
 800a42e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800a430:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800a432:	4618      	mov	r0, r3
 800a434:	370c      	adds	r7, #12
 800a436:	46bd      	mov	sp, r7
 800a438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43c:	4770      	bx	lr

0800a43e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800a43e:	b580      	push	{r7, lr}
 800a440:	b086      	sub	sp, #24
 800a442:	af00      	add	r7, sp, #0
 800a444:	6078      	str	r0, [r7, #4]
 800a446:	460b      	mov	r3, r1
 800a448:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800a452:	2300      	movs	r3, #0
 800a454:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	885b      	ldrh	r3, [r3, #2]
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	781b      	ldrb	r3, [r3, #0]
 800a460:	b29b      	uxth	r3, r3
 800a462:	429a      	cmp	r2, r3
 800a464:	d920      	bls.n	800a4a8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	781b      	ldrb	r3, [r3, #0]
 800a46a:	b29b      	uxth	r3, r3
 800a46c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800a46e:	e013      	b.n	800a498 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800a470:	f107 030a 	add.w	r3, r7, #10
 800a474:	4619      	mov	r1, r3
 800a476:	6978      	ldr	r0, [r7, #20]
 800a478:	f000 f81b 	bl	800a4b2 <USBD_GetNextDesc>
 800a47c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800a47e:	697b      	ldr	r3, [r7, #20]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b05      	cmp	r3, #5
 800a484:	d108      	bne.n	800a498 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800a486:	697b      	ldr	r3, [r7, #20]
 800a488:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800a48a:	693b      	ldr	r3, [r7, #16]
 800a48c:	789b      	ldrb	r3, [r3, #2]
 800a48e:	78fa      	ldrb	r2, [r7, #3]
 800a490:	429a      	cmp	r2, r3
 800a492:	d008      	beq.n	800a4a6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800a494:	2300      	movs	r3, #0
 800a496:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	885b      	ldrh	r3, [r3, #2]
 800a49c:	b29a      	uxth	r2, r3
 800a49e:	897b      	ldrh	r3, [r7, #10]
 800a4a0:	429a      	cmp	r2, r3
 800a4a2:	d8e5      	bhi.n	800a470 <USBD_GetEpDesc+0x32>
 800a4a4:	e000      	b.n	800a4a8 <USBD_GetEpDesc+0x6a>
          break;
 800a4a6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800a4a8:	693b      	ldr	r3, [r7, #16]
}
 800a4aa:	4618      	mov	r0, r3
 800a4ac:	3718      	adds	r7, #24
 800a4ae:	46bd      	mov	sp, r7
 800a4b0:	bd80      	pop	{r7, pc}

0800a4b2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800a4b2:	b480      	push	{r7}
 800a4b4:	b085      	sub	sp, #20
 800a4b6:	af00      	add	r7, sp, #0
 800a4b8:	6078      	str	r0, [r7, #4]
 800a4ba:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800a4c0:	683b      	ldr	r3, [r7, #0]
 800a4c2:	881a      	ldrh	r2, [r3, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	b29b      	uxth	r3, r3
 800a4ca:	4413      	add	r3, r2
 800a4cc:	b29a      	uxth	r2, r3
 800a4ce:	683b      	ldr	r3, [r7, #0]
 800a4d0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	781b      	ldrb	r3, [r3, #0]
 800a4d6:	461a      	mov	r2, r3
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	4413      	add	r3, r2
 800a4dc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800a4de:	68fb      	ldr	r3, [r7, #12]
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800a4f8:	697b      	ldr	r3, [r7, #20]
 800a4fa:	781b      	ldrb	r3, [r3, #0]
 800a4fc:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800a4fe:	697b      	ldr	r3, [r7, #20]
 800a500:	3301      	adds	r3, #1
 800a502:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800a504:	697b      	ldr	r3, [r7, #20]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800a50a:	8a3b      	ldrh	r3, [r7, #16]
 800a50c:	021b      	lsls	r3, r3, #8
 800a50e:	b21a      	sxth	r2, r3
 800a510:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800a514:	4313      	orrs	r3, r2
 800a516:	b21b      	sxth	r3, r3
 800a518:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800a51a:	89fb      	ldrh	r3, [r7, #14]
}
 800a51c:	4618      	mov	r0, r3
 800a51e:	371c      	adds	r7, #28
 800a520:	46bd      	mov	sp, r7
 800a522:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a526:	4770      	bx	lr

0800a528 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b084      	sub	sp, #16
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a532:	2300      	movs	r3, #0
 800a534:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a536:	683b      	ldr	r3, [r7, #0]
 800a538:	781b      	ldrb	r3, [r3, #0]
 800a53a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a53e:	2b40      	cmp	r3, #64	; 0x40
 800a540:	d005      	beq.n	800a54e <USBD_StdDevReq+0x26>
 800a542:	2b40      	cmp	r3, #64	; 0x40
 800a544:	d857      	bhi.n	800a5f6 <USBD_StdDevReq+0xce>
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00f      	beq.n	800a56a <USBD_StdDevReq+0x42>
 800a54a:	2b20      	cmp	r3, #32
 800a54c:	d153      	bne.n	800a5f6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	32ae      	adds	r2, #174	; 0xae
 800a558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a55c:	689b      	ldr	r3, [r3, #8]
 800a55e:	6839      	ldr	r1, [r7, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	4798      	blx	r3
 800a564:	4603      	mov	r3, r0
 800a566:	73fb      	strb	r3, [r7, #15]
      break;
 800a568:	e04a      	b.n	800a600 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	785b      	ldrb	r3, [r3, #1]
 800a56e:	2b09      	cmp	r3, #9
 800a570:	d83b      	bhi.n	800a5ea <USBD_StdDevReq+0xc2>
 800a572:	a201      	add	r2, pc, #4	; (adr r2, 800a578 <USBD_StdDevReq+0x50>)
 800a574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a578:	0800a5cd 	.word	0x0800a5cd
 800a57c:	0800a5e1 	.word	0x0800a5e1
 800a580:	0800a5eb 	.word	0x0800a5eb
 800a584:	0800a5d7 	.word	0x0800a5d7
 800a588:	0800a5eb 	.word	0x0800a5eb
 800a58c:	0800a5ab 	.word	0x0800a5ab
 800a590:	0800a5a1 	.word	0x0800a5a1
 800a594:	0800a5eb 	.word	0x0800a5eb
 800a598:	0800a5c3 	.word	0x0800a5c3
 800a59c:	0800a5b5 	.word	0x0800a5b5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800a5a0:	6839      	ldr	r1, [r7, #0]
 800a5a2:	6878      	ldr	r0, [r7, #4]
 800a5a4:	f000 fa3c 	bl	800aa20 <USBD_GetDescriptor>
          break;
 800a5a8:	e024      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800a5aa:	6839      	ldr	r1, [r7, #0]
 800a5ac:	6878      	ldr	r0, [r7, #4]
 800a5ae:	f000 fba1 	bl	800acf4 <USBD_SetAddress>
          break;
 800a5b2:	e01f      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800a5b4:	6839      	ldr	r1, [r7, #0]
 800a5b6:	6878      	ldr	r0, [r7, #4]
 800a5b8:	f000 fbe0 	bl	800ad7c <USBD_SetConfig>
 800a5bc:	4603      	mov	r3, r0
 800a5be:	73fb      	strb	r3, [r7, #15]
          break;
 800a5c0:	e018      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800a5c2:	6839      	ldr	r1, [r7, #0]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 fc83 	bl	800aed0 <USBD_GetConfig>
          break;
 800a5ca:	e013      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800a5cc:	6839      	ldr	r1, [r7, #0]
 800a5ce:	6878      	ldr	r0, [r7, #4]
 800a5d0:	f000 fcb4 	bl	800af3c <USBD_GetStatus>
          break;
 800a5d4:	e00e      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800a5d6:	6839      	ldr	r1, [r7, #0]
 800a5d8:	6878      	ldr	r0, [r7, #4]
 800a5da:	f000 fce3 	bl	800afa4 <USBD_SetFeature>
          break;
 800a5de:	e009      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800a5e0:	6839      	ldr	r1, [r7, #0]
 800a5e2:	6878      	ldr	r0, [r7, #4]
 800a5e4:	f000 fd07 	bl	800aff6 <USBD_ClrFeature>
          break;
 800a5e8:	e004      	b.n	800a5f4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800a5ea:	6839      	ldr	r1, [r7, #0]
 800a5ec:	6878      	ldr	r0, [r7, #4]
 800a5ee:	f000 fd5e 	bl	800b0ae <USBD_CtlError>
          break;
 800a5f2:	bf00      	nop
      }
      break;
 800a5f4:	e004      	b.n	800a600 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800a5f6:	6839      	ldr	r1, [r7, #0]
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f000 fd58 	bl	800b0ae <USBD_CtlError>
      break;
 800a5fe:	bf00      	nop
  }

  return ret;
 800a600:	7bfb      	ldrb	r3, [r7, #15]
}
 800a602:	4618      	mov	r0, r3
 800a604:	3710      	adds	r7, #16
 800a606:	46bd      	mov	sp, r7
 800a608:	bd80      	pop	{r7, pc}
 800a60a:	bf00      	nop

0800a60c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a60c:	b580      	push	{r7, lr}
 800a60e:	b084      	sub	sp, #16
 800a610:	af00      	add	r7, sp, #0
 800a612:	6078      	str	r0, [r7, #4]
 800a614:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	781b      	ldrb	r3, [r3, #0]
 800a61e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a622:	2b40      	cmp	r3, #64	; 0x40
 800a624:	d005      	beq.n	800a632 <USBD_StdItfReq+0x26>
 800a626:	2b40      	cmp	r3, #64	; 0x40
 800a628:	d852      	bhi.n	800a6d0 <USBD_StdItfReq+0xc4>
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <USBD_StdItfReq+0x26>
 800a62e:	2b20      	cmp	r3, #32
 800a630:	d14e      	bne.n	800a6d0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a638:	b2db      	uxtb	r3, r3
 800a63a:	3b01      	subs	r3, #1
 800a63c:	2b02      	cmp	r3, #2
 800a63e:	d840      	bhi.n	800a6c2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800a640:	683b      	ldr	r3, [r7, #0]
 800a642:	889b      	ldrh	r3, [r3, #4]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	2b01      	cmp	r3, #1
 800a648:	d836      	bhi.n	800a6b8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800a64a:	683b      	ldr	r3, [r7, #0]
 800a64c:	889b      	ldrh	r3, [r3, #4]
 800a64e:	b2db      	uxtb	r3, r3
 800a650:	4619      	mov	r1, r3
 800a652:	6878      	ldr	r0, [r7, #4]
 800a654:	f7ff fed9 	bl	800a40a <USBD_CoreFindIF>
 800a658:	4603      	mov	r3, r0
 800a65a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a65c:	7bbb      	ldrb	r3, [r7, #14]
 800a65e:	2bff      	cmp	r3, #255	; 0xff
 800a660:	d01d      	beq.n	800a69e <USBD_StdItfReq+0x92>
 800a662:	7bbb      	ldrb	r3, [r7, #14]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d11a      	bne.n	800a69e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800a668:	7bba      	ldrb	r2, [r7, #14]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	32ae      	adds	r2, #174	; 0xae
 800a66e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a672:	689b      	ldr	r3, [r3, #8]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d00f      	beq.n	800a698 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800a678:	7bba      	ldrb	r2, [r7, #14]
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a680:	7bba      	ldrb	r2, [r7, #14]
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	32ae      	adds	r2, #174	; 0xae
 800a686:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a68a:	689b      	ldr	r3, [r3, #8]
 800a68c:	6839      	ldr	r1, [r7, #0]
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
 800a692:	4603      	mov	r3, r0
 800a694:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a696:	e004      	b.n	800a6a2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800a698:	2303      	movs	r3, #3
 800a69a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800a69c:	e001      	b.n	800a6a2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800a69e:	2303      	movs	r3, #3
 800a6a0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800a6a2:	683b      	ldr	r3, [r7, #0]
 800a6a4:	88db      	ldrh	r3, [r3, #6]
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d110      	bne.n	800a6cc <USBD_StdItfReq+0xc0>
 800a6aa:	7bfb      	ldrb	r3, [r7, #15]
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	d10d      	bne.n	800a6cc <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800a6b0:	6878      	ldr	r0, [r7, #4]
 800a6b2:	f000 fdaa 	bl	800b20a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800a6b6:	e009      	b.n	800a6cc <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f000 fcf7 	bl	800b0ae <USBD_CtlError>
          break;
 800a6c0:	e004      	b.n	800a6cc <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800a6c2:	6839      	ldr	r1, [r7, #0]
 800a6c4:	6878      	ldr	r0, [r7, #4]
 800a6c6:	f000 fcf2 	bl	800b0ae <USBD_CtlError>
          break;
 800a6ca:	e000      	b.n	800a6ce <USBD_StdItfReq+0xc2>
          break;
 800a6cc:	bf00      	nop
      }
      break;
 800a6ce:	e004      	b.n	800a6da <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800a6d0:	6839      	ldr	r1, [r7, #0]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	f000 fceb 	bl	800b0ae <USBD_CtlError>
      break;
 800a6d8:	bf00      	nop
  }

  return ret;
 800a6da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a6dc:	4618      	mov	r0, r3
 800a6de:	3710      	adds	r7, #16
 800a6e0:	46bd      	mov	sp, r7
 800a6e2:	bd80      	pop	{r7, pc}

0800a6e4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a6e4:	b580      	push	{r7, lr}
 800a6e6:	b084      	sub	sp, #16
 800a6e8:	af00      	add	r7, sp, #0
 800a6ea:	6078      	str	r0, [r7, #4]
 800a6ec:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800a6ee:	2300      	movs	r3, #0
 800a6f0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800a6f2:	683b      	ldr	r3, [r7, #0]
 800a6f4:	889b      	ldrh	r3, [r3, #4]
 800a6f6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	781b      	ldrb	r3, [r3, #0]
 800a6fc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a700:	2b40      	cmp	r3, #64	; 0x40
 800a702:	d007      	beq.n	800a714 <USBD_StdEPReq+0x30>
 800a704:	2b40      	cmp	r3, #64	; 0x40
 800a706:	f200 817f 	bhi.w	800aa08 <USBD_StdEPReq+0x324>
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d02a      	beq.n	800a764 <USBD_StdEPReq+0x80>
 800a70e:	2b20      	cmp	r3, #32
 800a710:	f040 817a 	bne.w	800aa08 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800a714:	7bbb      	ldrb	r3, [r7, #14]
 800a716:	4619      	mov	r1, r3
 800a718:	6878      	ldr	r0, [r7, #4]
 800a71a:	f7ff fe83 	bl	800a424 <USBD_CoreFindEP>
 800a71e:	4603      	mov	r3, r0
 800a720:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a722:	7b7b      	ldrb	r3, [r7, #13]
 800a724:	2bff      	cmp	r3, #255	; 0xff
 800a726:	f000 8174 	beq.w	800aa12 <USBD_StdEPReq+0x32e>
 800a72a:	7b7b      	ldrb	r3, [r7, #13]
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	f040 8170 	bne.w	800aa12 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800a732:	7b7a      	ldrb	r2, [r7, #13]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800a73a:	7b7a      	ldrb	r2, [r7, #13]
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	32ae      	adds	r2, #174	; 0xae
 800a740:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a744:	689b      	ldr	r3, [r3, #8]
 800a746:	2b00      	cmp	r3, #0
 800a748:	f000 8163 	beq.w	800aa12 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800a74c:	7b7a      	ldrb	r2, [r7, #13]
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	32ae      	adds	r2, #174	; 0xae
 800a752:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a756:	689b      	ldr	r3, [r3, #8]
 800a758:	6839      	ldr	r1, [r7, #0]
 800a75a:	6878      	ldr	r0, [r7, #4]
 800a75c:	4798      	blx	r3
 800a75e:	4603      	mov	r3, r0
 800a760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a762:	e156      	b.n	800aa12 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a764:	683b      	ldr	r3, [r7, #0]
 800a766:	785b      	ldrb	r3, [r3, #1]
 800a768:	2b03      	cmp	r3, #3
 800a76a:	d008      	beq.n	800a77e <USBD_StdEPReq+0x9a>
 800a76c:	2b03      	cmp	r3, #3
 800a76e:	f300 8145 	bgt.w	800a9fc <USBD_StdEPReq+0x318>
 800a772:	2b00      	cmp	r3, #0
 800a774:	f000 809b 	beq.w	800a8ae <USBD_StdEPReq+0x1ca>
 800a778:	2b01      	cmp	r3, #1
 800a77a:	d03c      	beq.n	800a7f6 <USBD_StdEPReq+0x112>
 800a77c:	e13e      	b.n	800a9fc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a784:	b2db      	uxtb	r3, r3
 800a786:	2b02      	cmp	r3, #2
 800a788:	d002      	beq.n	800a790 <USBD_StdEPReq+0xac>
 800a78a:	2b03      	cmp	r3, #3
 800a78c:	d016      	beq.n	800a7bc <USBD_StdEPReq+0xd8>
 800a78e:	e02c      	b.n	800a7ea <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a790:	7bbb      	ldrb	r3, [r7, #14]
 800a792:	2b00      	cmp	r3, #0
 800a794:	d00d      	beq.n	800a7b2 <USBD_StdEPReq+0xce>
 800a796:	7bbb      	ldrb	r3, [r7, #14]
 800a798:	2b80      	cmp	r3, #128	; 0x80
 800a79a:	d00a      	beq.n	800a7b2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a79c:	7bbb      	ldrb	r3, [r7, #14]
 800a79e:	4619      	mov	r1, r3
 800a7a0:	6878      	ldr	r0, [r7, #4]
 800a7a2:	f001 f885 	bl	800b8b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a7a6:	2180      	movs	r1, #128	; 0x80
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f001 f881 	bl	800b8b0 <USBD_LL_StallEP>
 800a7ae:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a7b0:	e020      	b.n	800a7f4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800a7b2:	6839      	ldr	r1, [r7, #0]
 800a7b4:	6878      	ldr	r0, [r7, #4]
 800a7b6:	f000 fc7a 	bl	800b0ae <USBD_CtlError>
              break;
 800a7ba:	e01b      	b.n	800a7f4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	885b      	ldrh	r3, [r3, #2]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d10e      	bne.n	800a7e2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800a7c4:	7bbb      	ldrb	r3, [r7, #14]
 800a7c6:	2b00      	cmp	r3, #0
 800a7c8:	d00b      	beq.n	800a7e2 <USBD_StdEPReq+0xfe>
 800a7ca:	7bbb      	ldrb	r3, [r7, #14]
 800a7cc:	2b80      	cmp	r3, #128	; 0x80
 800a7ce:	d008      	beq.n	800a7e2 <USBD_StdEPReq+0xfe>
 800a7d0:	683b      	ldr	r3, [r7, #0]
 800a7d2:	88db      	ldrh	r3, [r3, #6]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d104      	bne.n	800a7e2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800a7d8:	7bbb      	ldrb	r3, [r7, #14]
 800a7da:	4619      	mov	r1, r3
 800a7dc:	6878      	ldr	r0, [r7, #4]
 800a7de:	f001 f867 	bl	800b8b0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800a7e2:	6878      	ldr	r0, [r7, #4]
 800a7e4:	f000 fd11 	bl	800b20a <USBD_CtlSendStatus>

              break;
 800a7e8:	e004      	b.n	800a7f4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800a7ea:	6839      	ldr	r1, [r7, #0]
 800a7ec:	6878      	ldr	r0, [r7, #4]
 800a7ee:	f000 fc5e 	bl	800b0ae <USBD_CtlError>
              break;
 800a7f2:	bf00      	nop
          }
          break;
 800a7f4:	e107      	b.n	800aa06 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b02      	cmp	r3, #2
 800a800:	d002      	beq.n	800a808 <USBD_StdEPReq+0x124>
 800a802:	2b03      	cmp	r3, #3
 800a804:	d016      	beq.n	800a834 <USBD_StdEPReq+0x150>
 800a806:	e04b      	b.n	800a8a0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a808:	7bbb      	ldrb	r3, [r7, #14]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d00d      	beq.n	800a82a <USBD_StdEPReq+0x146>
 800a80e:	7bbb      	ldrb	r3, [r7, #14]
 800a810:	2b80      	cmp	r3, #128	; 0x80
 800a812:	d00a      	beq.n	800a82a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800a814:	7bbb      	ldrb	r3, [r7, #14]
 800a816:	4619      	mov	r1, r3
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f001 f849 	bl	800b8b0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800a81e:	2180      	movs	r1, #128	; 0x80
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f001 f845 	bl	800b8b0 <USBD_LL_StallEP>
 800a826:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800a828:	e040      	b.n	800a8ac <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800a82a:	6839      	ldr	r1, [r7, #0]
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 fc3e 	bl	800b0ae <USBD_CtlError>
              break;
 800a832:	e03b      	b.n	800a8ac <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800a834:	683b      	ldr	r3, [r7, #0]
 800a836:	885b      	ldrh	r3, [r3, #2]
 800a838:	2b00      	cmp	r3, #0
 800a83a:	d136      	bne.n	800a8aa <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800a83c:	7bbb      	ldrb	r3, [r7, #14]
 800a83e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a842:	2b00      	cmp	r3, #0
 800a844:	d004      	beq.n	800a850 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800a846:	7bbb      	ldrb	r3, [r7, #14]
 800a848:	4619      	mov	r1, r3
 800a84a:	6878      	ldr	r0, [r7, #4]
 800a84c:	f001 f84f 	bl	800b8ee <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800a850:	6878      	ldr	r0, [r7, #4]
 800a852:	f000 fcda 	bl	800b20a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800a856:	7bbb      	ldrb	r3, [r7, #14]
 800a858:	4619      	mov	r1, r3
 800a85a:	6878      	ldr	r0, [r7, #4]
 800a85c:	f7ff fde2 	bl	800a424 <USBD_CoreFindEP>
 800a860:	4603      	mov	r3, r0
 800a862:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a864:	7b7b      	ldrb	r3, [r7, #13]
 800a866:	2bff      	cmp	r3, #255	; 0xff
 800a868:	d01f      	beq.n	800a8aa <USBD_StdEPReq+0x1c6>
 800a86a:	7b7b      	ldrb	r3, [r7, #13]
 800a86c:	2b00      	cmp	r3, #0
 800a86e:	d11c      	bne.n	800a8aa <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800a870:	7b7a      	ldrb	r2, [r7, #13]
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800a878:	7b7a      	ldrb	r2, [r7, #13]
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	32ae      	adds	r2, #174	; 0xae
 800a87e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a882:	689b      	ldr	r3, [r3, #8]
 800a884:	2b00      	cmp	r3, #0
 800a886:	d010      	beq.n	800a8aa <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800a888:	7b7a      	ldrb	r2, [r7, #13]
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	32ae      	adds	r2, #174	; 0xae
 800a88e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a892:	689b      	ldr	r3, [r3, #8]
 800a894:	6839      	ldr	r1, [r7, #0]
 800a896:	6878      	ldr	r0, [r7, #4]
 800a898:	4798      	blx	r3
 800a89a:	4603      	mov	r3, r0
 800a89c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800a89e:	e004      	b.n	800a8aa <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800a8a0:	6839      	ldr	r1, [r7, #0]
 800a8a2:	6878      	ldr	r0, [r7, #4]
 800a8a4:	f000 fc03 	bl	800b0ae <USBD_CtlError>
              break;
 800a8a8:	e000      	b.n	800a8ac <USBD_StdEPReq+0x1c8>
              break;
 800a8aa:	bf00      	nop
          }
          break;
 800a8ac:	e0ab      	b.n	800aa06 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	2b02      	cmp	r3, #2
 800a8b8:	d002      	beq.n	800a8c0 <USBD_StdEPReq+0x1dc>
 800a8ba:	2b03      	cmp	r3, #3
 800a8bc:	d032      	beq.n	800a924 <USBD_StdEPReq+0x240>
 800a8be:	e097      	b.n	800a9f0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800a8c0:	7bbb      	ldrb	r3, [r7, #14]
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	d007      	beq.n	800a8d6 <USBD_StdEPReq+0x1f2>
 800a8c6:	7bbb      	ldrb	r3, [r7, #14]
 800a8c8:	2b80      	cmp	r3, #128	; 0x80
 800a8ca:	d004      	beq.n	800a8d6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800a8cc:	6839      	ldr	r1, [r7, #0]
 800a8ce:	6878      	ldr	r0, [r7, #4]
 800a8d0:	f000 fbed 	bl	800b0ae <USBD_CtlError>
                break;
 800a8d4:	e091      	b.n	800a9fa <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a8da:	2b00      	cmp	r3, #0
 800a8dc:	da0b      	bge.n	800a8f6 <USBD_StdEPReq+0x212>
 800a8de:	7bbb      	ldrb	r3, [r7, #14]
 800a8e0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a8e4:	4613      	mov	r3, r2
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	4413      	add	r3, r2
 800a8ea:	009b      	lsls	r3, r3, #2
 800a8ec:	3310      	adds	r3, #16
 800a8ee:	687a      	ldr	r2, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	3304      	adds	r3, #4
 800a8f4:	e00b      	b.n	800a90e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a8f6:	7bbb      	ldrb	r3, [r7, #14]
 800a8f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a8fc:	4613      	mov	r3, r2
 800a8fe:	009b      	lsls	r3, r3, #2
 800a900:	4413      	add	r3, r2
 800a902:	009b      	lsls	r3, r3, #2
 800a904:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a908:	687a      	ldr	r2, [r7, #4]
 800a90a:	4413      	add	r3, r2
 800a90c:	3304      	adds	r3, #4
 800a90e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800a910:	68bb      	ldr	r3, [r7, #8]
 800a912:	2200      	movs	r2, #0
 800a914:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a916:	68bb      	ldr	r3, [r7, #8]
 800a918:	2202      	movs	r2, #2
 800a91a:	4619      	mov	r1, r3
 800a91c:	6878      	ldr	r0, [r7, #4]
 800a91e:	f000 fc37 	bl	800b190 <USBD_CtlSendData>
              break;
 800a922:	e06a      	b.n	800a9fa <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800a924:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	da11      	bge.n	800a950 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800a92c:	7bbb      	ldrb	r3, [r7, #14]
 800a92e:	f003 020f 	and.w	r2, r3, #15
 800a932:	6879      	ldr	r1, [r7, #4]
 800a934:	4613      	mov	r3, r2
 800a936:	009b      	lsls	r3, r3, #2
 800a938:	4413      	add	r3, r2
 800a93a:	009b      	lsls	r3, r3, #2
 800a93c:	440b      	add	r3, r1
 800a93e:	3324      	adds	r3, #36	; 0x24
 800a940:	881b      	ldrh	r3, [r3, #0]
 800a942:	2b00      	cmp	r3, #0
 800a944:	d117      	bne.n	800a976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a946:	6839      	ldr	r1, [r7, #0]
 800a948:	6878      	ldr	r0, [r7, #4]
 800a94a:	f000 fbb0 	bl	800b0ae <USBD_CtlError>
                  break;
 800a94e:	e054      	b.n	800a9fa <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800a950:	7bbb      	ldrb	r3, [r7, #14]
 800a952:	f003 020f 	and.w	r2, r3, #15
 800a956:	6879      	ldr	r1, [r7, #4]
 800a958:	4613      	mov	r3, r2
 800a95a:	009b      	lsls	r3, r3, #2
 800a95c:	4413      	add	r3, r2
 800a95e:	009b      	lsls	r3, r3, #2
 800a960:	440b      	add	r3, r1
 800a962:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800a966:	881b      	ldrh	r3, [r3, #0]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d104      	bne.n	800a976 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800a96c:	6839      	ldr	r1, [r7, #0]
 800a96e:	6878      	ldr	r0, [r7, #4]
 800a970:	f000 fb9d 	bl	800b0ae <USBD_CtlError>
                  break;
 800a974:	e041      	b.n	800a9fa <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a976:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	da0b      	bge.n	800a996 <USBD_StdEPReq+0x2b2>
 800a97e:	7bbb      	ldrb	r3, [r7, #14]
 800a980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a984:	4613      	mov	r3, r2
 800a986:	009b      	lsls	r3, r3, #2
 800a988:	4413      	add	r3, r2
 800a98a:	009b      	lsls	r3, r3, #2
 800a98c:	3310      	adds	r3, #16
 800a98e:	687a      	ldr	r2, [r7, #4]
 800a990:	4413      	add	r3, r2
 800a992:	3304      	adds	r3, #4
 800a994:	e00b      	b.n	800a9ae <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800a996:	7bbb      	ldrb	r3, [r7, #14]
 800a998:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800a99c:	4613      	mov	r3, r2
 800a99e:	009b      	lsls	r3, r3, #2
 800a9a0:	4413      	add	r3, r2
 800a9a2:	009b      	lsls	r3, r3, #2
 800a9a4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800a9a8:	687a      	ldr	r2, [r7, #4]
 800a9aa:	4413      	add	r3, r2
 800a9ac:	3304      	adds	r3, #4
 800a9ae:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800a9b0:	7bbb      	ldrb	r3, [r7, #14]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <USBD_StdEPReq+0x2d8>
 800a9b6:	7bbb      	ldrb	r3, [r7, #14]
 800a9b8:	2b80      	cmp	r3, #128	; 0x80
 800a9ba:	d103      	bne.n	800a9c4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800a9bc:	68bb      	ldr	r3, [r7, #8]
 800a9be:	2200      	movs	r2, #0
 800a9c0:	601a      	str	r2, [r3, #0]
 800a9c2:	e00e      	b.n	800a9e2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800a9c4:	7bbb      	ldrb	r3, [r7, #14]
 800a9c6:	4619      	mov	r1, r3
 800a9c8:	6878      	ldr	r0, [r7, #4]
 800a9ca:	f000 ffaf 	bl	800b92c <USBD_LL_IsStallEP>
 800a9ce:	4603      	mov	r3, r0
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d003      	beq.n	800a9dc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800a9d4:	68bb      	ldr	r3, [r7, #8]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	601a      	str	r2, [r3, #0]
 800a9da:	e002      	b.n	800a9e2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800a9dc:	68bb      	ldr	r3, [r7, #8]
 800a9de:	2200      	movs	r2, #0
 800a9e0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800a9e2:	68bb      	ldr	r3, [r7, #8]
 800a9e4:	2202      	movs	r2, #2
 800a9e6:	4619      	mov	r1, r3
 800a9e8:	6878      	ldr	r0, [r7, #4]
 800a9ea:	f000 fbd1 	bl	800b190 <USBD_CtlSendData>
              break;
 800a9ee:	e004      	b.n	800a9fa <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800a9f0:	6839      	ldr	r1, [r7, #0]
 800a9f2:	6878      	ldr	r0, [r7, #4]
 800a9f4:	f000 fb5b 	bl	800b0ae <USBD_CtlError>
              break;
 800a9f8:	bf00      	nop
          }
          break;
 800a9fa:	e004      	b.n	800aa06 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800a9fc:	6839      	ldr	r1, [r7, #0]
 800a9fe:	6878      	ldr	r0, [r7, #4]
 800aa00:	f000 fb55 	bl	800b0ae <USBD_CtlError>
          break;
 800aa04:	bf00      	nop
      }
      break;
 800aa06:	e005      	b.n	800aa14 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800aa08:	6839      	ldr	r1, [r7, #0]
 800aa0a:	6878      	ldr	r0, [r7, #4]
 800aa0c:	f000 fb4f 	bl	800b0ae <USBD_CtlError>
      break;
 800aa10:	e000      	b.n	800aa14 <USBD_StdEPReq+0x330>
      break;
 800aa12:	bf00      	nop
  }

  return ret;
 800aa14:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa16:	4618      	mov	r0, r3
 800aa18:	3710      	adds	r7, #16
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
	...

0800aa20 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aa20:	b580      	push	{r7, lr}
 800aa22:	b084      	sub	sp, #16
 800aa24:	af00      	add	r7, sp, #0
 800aa26:	6078      	str	r0, [r7, #4]
 800aa28:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800aa2e:	2300      	movs	r3, #0
 800aa30:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800aa32:	2300      	movs	r3, #0
 800aa34:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800aa36:	683b      	ldr	r3, [r7, #0]
 800aa38:	885b      	ldrh	r3, [r3, #2]
 800aa3a:	0a1b      	lsrs	r3, r3, #8
 800aa3c:	b29b      	uxth	r3, r3
 800aa3e:	3b01      	subs	r3, #1
 800aa40:	2b06      	cmp	r3, #6
 800aa42:	f200 8128 	bhi.w	800ac96 <USBD_GetDescriptor+0x276>
 800aa46:	a201      	add	r2, pc, #4	; (adr r2, 800aa4c <USBD_GetDescriptor+0x2c>)
 800aa48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa4c:	0800aa69 	.word	0x0800aa69
 800aa50:	0800aa81 	.word	0x0800aa81
 800aa54:	0800aac1 	.word	0x0800aac1
 800aa58:	0800ac97 	.word	0x0800ac97
 800aa5c:	0800ac97 	.word	0x0800ac97
 800aa60:	0800ac37 	.word	0x0800ac37
 800aa64:	0800ac63 	.word	0x0800ac63
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	687a      	ldr	r2, [r7, #4]
 800aa72:	7c12      	ldrb	r2, [r2, #16]
 800aa74:	f107 0108 	add.w	r1, r7, #8
 800aa78:	4610      	mov	r0, r2
 800aa7a:	4798      	blx	r3
 800aa7c:	60f8      	str	r0, [r7, #12]
      break;
 800aa7e:	e112      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	7c1b      	ldrb	r3, [r3, #16]
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d10d      	bne.n	800aaa4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aa8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aa90:	f107 0208 	add.w	r2, r7, #8
 800aa94:	4610      	mov	r0, r2
 800aa96:	4798      	blx	r3
 800aa98:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	3301      	adds	r3, #1
 800aa9e:	2202      	movs	r2, #2
 800aaa0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800aaa2:	e100      	b.n	800aca6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800aaaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aaac:	f107 0208 	add.w	r2, r7, #8
 800aab0:	4610      	mov	r0, r2
 800aab2:	4798      	blx	r3
 800aab4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	3301      	adds	r3, #1
 800aaba:	2202      	movs	r2, #2
 800aabc:	701a      	strb	r2, [r3, #0]
      break;
 800aabe:	e0f2      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800aac0:	683b      	ldr	r3, [r7, #0]
 800aac2:	885b      	ldrh	r3, [r3, #2]
 800aac4:	b2db      	uxtb	r3, r3
 800aac6:	2b05      	cmp	r3, #5
 800aac8:	f200 80ac 	bhi.w	800ac24 <USBD_GetDescriptor+0x204>
 800aacc:	a201      	add	r2, pc, #4	; (adr r2, 800aad4 <USBD_GetDescriptor+0xb4>)
 800aace:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aad2:	bf00      	nop
 800aad4:	0800aaed 	.word	0x0800aaed
 800aad8:	0800ab21 	.word	0x0800ab21
 800aadc:	0800ab55 	.word	0x0800ab55
 800aae0:	0800ab89 	.word	0x0800ab89
 800aae4:	0800abbd 	.word	0x0800abbd
 800aae8:	0800abf1 	.word	0x0800abf1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aaf2:	685b      	ldr	r3, [r3, #4]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d00b      	beq.n	800ab10 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800aafe:	685b      	ldr	r3, [r3, #4]
 800ab00:	687a      	ldr	r2, [r7, #4]
 800ab02:	7c12      	ldrb	r2, [r2, #16]
 800ab04:	f107 0108 	add.w	r1, r7, #8
 800ab08:	4610      	mov	r0, r2
 800ab0a:	4798      	blx	r3
 800ab0c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab0e:	e091      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab10:	6839      	ldr	r1, [r7, #0]
 800ab12:	6878      	ldr	r0, [r7, #4]
 800ab14:	f000 facb 	bl	800b0ae <USBD_CtlError>
            err++;
 800ab18:	7afb      	ldrb	r3, [r7, #11]
 800ab1a:	3301      	adds	r3, #1
 800ab1c:	72fb      	strb	r3, [r7, #11]
          break;
 800ab1e:	e089      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab26:	689b      	ldr	r3, [r3, #8]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d00b      	beq.n	800ab44 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab32:	689b      	ldr	r3, [r3, #8]
 800ab34:	687a      	ldr	r2, [r7, #4]
 800ab36:	7c12      	ldrb	r2, [r2, #16]
 800ab38:	f107 0108 	add.w	r1, r7, #8
 800ab3c:	4610      	mov	r0, r2
 800ab3e:	4798      	blx	r3
 800ab40:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab42:	e077      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab44:	6839      	ldr	r1, [r7, #0]
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f000 fab1 	bl	800b0ae <USBD_CtlError>
            err++;
 800ab4c:	7afb      	ldrb	r3, [r7, #11]
 800ab4e:	3301      	adds	r3, #1
 800ab50:	72fb      	strb	r3, [r7, #11]
          break;
 800ab52:	e06f      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800ab54:	687b      	ldr	r3, [r7, #4]
 800ab56:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab5a:	68db      	ldr	r3, [r3, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d00b      	beq.n	800ab78 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	687a      	ldr	r2, [r7, #4]
 800ab6a:	7c12      	ldrb	r2, [r2, #16]
 800ab6c:	f107 0108 	add.w	r1, r7, #8
 800ab70:	4610      	mov	r0, r2
 800ab72:	4798      	blx	r3
 800ab74:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ab76:	e05d      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ab78:	6839      	ldr	r1, [r7, #0]
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f000 fa97 	bl	800b0ae <USBD_CtlError>
            err++;
 800ab80:	7afb      	ldrb	r3, [r7, #11]
 800ab82:	3301      	adds	r3, #1
 800ab84:	72fb      	strb	r3, [r7, #11]
          break;
 800ab86:	e055      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab8e:	691b      	ldr	r3, [r3, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d00b      	beq.n	800abac <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ab9a:	691b      	ldr	r3, [r3, #16]
 800ab9c:	687a      	ldr	r2, [r7, #4]
 800ab9e:	7c12      	ldrb	r2, [r2, #16]
 800aba0:	f107 0108 	add.w	r1, r7, #8
 800aba4:	4610      	mov	r0, r2
 800aba6:	4798      	blx	r3
 800aba8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abaa:	e043      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abac:	6839      	ldr	r1, [r7, #0]
 800abae:	6878      	ldr	r0, [r7, #4]
 800abb0:	f000 fa7d 	bl	800b0ae <USBD_CtlError>
            err++;
 800abb4:	7afb      	ldrb	r3, [r7, #11]
 800abb6:	3301      	adds	r3, #1
 800abb8:	72fb      	strb	r3, [r7, #11]
          break;
 800abba:	e03b      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abc2:	695b      	ldr	r3, [r3, #20]
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d00b      	beq.n	800abe0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abce:	695b      	ldr	r3, [r3, #20]
 800abd0:	687a      	ldr	r2, [r7, #4]
 800abd2:	7c12      	ldrb	r2, [r2, #16]
 800abd4:	f107 0108 	add.w	r1, r7, #8
 800abd8:	4610      	mov	r0, r2
 800abda:	4798      	blx	r3
 800abdc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800abde:	e029      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800abe0:	6839      	ldr	r1, [r7, #0]
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	f000 fa63 	bl	800b0ae <USBD_CtlError>
            err++;
 800abe8:	7afb      	ldrb	r3, [r7, #11]
 800abea:	3301      	adds	r3, #1
 800abec:	72fb      	strb	r3, [r7, #11]
          break;
 800abee:	e021      	b.n	800ac34 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800abf6:	699b      	ldr	r3, [r3, #24]
 800abf8:	2b00      	cmp	r3, #0
 800abfa:	d00b      	beq.n	800ac14 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800ac02:	699b      	ldr	r3, [r3, #24]
 800ac04:	687a      	ldr	r2, [r7, #4]
 800ac06:	7c12      	ldrb	r2, [r2, #16]
 800ac08:	f107 0108 	add.w	r1, r7, #8
 800ac0c:	4610      	mov	r0, r2
 800ac0e:	4798      	blx	r3
 800ac10:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800ac12:	e00f      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800ac14:	6839      	ldr	r1, [r7, #0]
 800ac16:	6878      	ldr	r0, [r7, #4]
 800ac18:	f000 fa49 	bl	800b0ae <USBD_CtlError>
            err++;
 800ac1c:	7afb      	ldrb	r3, [r7, #11]
 800ac1e:	3301      	adds	r3, #1
 800ac20:	72fb      	strb	r3, [r7, #11]
          break;
 800ac22:	e007      	b.n	800ac34 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800ac24:	6839      	ldr	r1, [r7, #0]
 800ac26:	6878      	ldr	r0, [r7, #4]
 800ac28:	f000 fa41 	bl	800b0ae <USBD_CtlError>
          err++;
 800ac2c:	7afb      	ldrb	r3, [r7, #11]
 800ac2e:	3301      	adds	r3, #1
 800ac30:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ac32:	bf00      	nop
      }
      break;
 800ac34:	e037      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	7c1b      	ldrb	r3, [r3, #16]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d109      	bne.n	800ac52 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac46:	f107 0208 	add.w	r2, r7, #8
 800ac4a:	4610      	mov	r0, r2
 800ac4c:	4798      	blx	r3
 800ac4e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac50:	e029      	b.n	800aca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac52:	6839      	ldr	r1, [r7, #0]
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 fa2a 	bl	800b0ae <USBD_CtlError>
        err++;
 800ac5a:	7afb      	ldrb	r3, [r7, #11]
 800ac5c:	3301      	adds	r3, #1
 800ac5e:	72fb      	strb	r3, [r7, #11]
      break;
 800ac60:	e021      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	7c1b      	ldrb	r3, [r3, #16]
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d10d      	bne.n	800ac86 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac72:	f107 0208 	add.w	r2, r7, #8
 800ac76:	4610      	mov	r0, r2
 800ac78:	4798      	blx	r3
 800ac7a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3301      	adds	r3, #1
 800ac80:	2207      	movs	r2, #7
 800ac82:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ac84:	e00f      	b.n	800aca6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ac86:	6839      	ldr	r1, [r7, #0]
 800ac88:	6878      	ldr	r0, [r7, #4]
 800ac8a:	f000 fa10 	bl	800b0ae <USBD_CtlError>
        err++;
 800ac8e:	7afb      	ldrb	r3, [r7, #11]
 800ac90:	3301      	adds	r3, #1
 800ac92:	72fb      	strb	r3, [r7, #11]
      break;
 800ac94:	e007      	b.n	800aca6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ac96:	6839      	ldr	r1, [r7, #0]
 800ac98:	6878      	ldr	r0, [r7, #4]
 800ac9a:	f000 fa08 	bl	800b0ae <USBD_CtlError>
      err++;
 800ac9e:	7afb      	ldrb	r3, [r7, #11]
 800aca0:	3301      	adds	r3, #1
 800aca2:	72fb      	strb	r3, [r7, #11]
      break;
 800aca4:	bf00      	nop
  }

  if (err != 0U)
 800aca6:	7afb      	ldrb	r3, [r7, #11]
 800aca8:	2b00      	cmp	r3, #0
 800acaa:	d11e      	bne.n	800acea <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800acac:	683b      	ldr	r3, [r7, #0]
 800acae:	88db      	ldrh	r3, [r3, #6]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d016      	beq.n	800ace2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800acb4:	893b      	ldrh	r3, [r7, #8]
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00e      	beq.n	800acd8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800acba:	683b      	ldr	r3, [r7, #0]
 800acbc:	88da      	ldrh	r2, [r3, #6]
 800acbe:	893b      	ldrh	r3, [r7, #8]
 800acc0:	4293      	cmp	r3, r2
 800acc2:	bf28      	it	cs
 800acc4:	4613      	movcs	r3, r2
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800acca:	893b      	ldrh	r3, [r7, #8]
 800accc:	461a      	mov	r2, r3
 800acce:	68f9      	ldr	r1, [r7, #12]
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 fa5d 	bl	800b190 <USBD_CtlSendData>
 800acd6:	e009      	b.n	800acec <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800acd8:	6839      	ldr	r1, [r7, #0]
 800acda:	6878      	ldr	r0, [r7, #4]
 800acdc:	f000 f9e7 	bl	800b0ae <USBD_CtlError>
 800ace0:	e004      	b.n	800acec <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800ace2:	6878      	ldr	r0, [r7, #4]
 800ace4:	f000 fa91 	bl	800b20a <USBD_CtlSendStatus>
 800ace8:	e000      	b.n	800acec <USBD_GetDescriptor+0x2cc>
    return;
 800acea:	bf00      	nop
  }
}
 800acec:	3710      	adds	r7, #16
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop

0800acf4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b084      	sub	sp, #16
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
 800acfc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800acfe:	683b      	ldr	r3, [r7, #0]
 800ad00:	889b      	ldrh	r3, [r3, #4]
 800ad02:	2b00      	cmp	r3, #0
 800ad04:	d131      	bne.n	800ad6a <USBD_SetAddress+0x76>
 800ad06:	683b      	ldr	r3, [r7, #0]
 800ad08:	88db      	ldrh	r3, [r3, #6]
 800ad0a:	2b00      	cmp	r3, #0
 800ad0c:	d12d      	bne.n	800ad6a <USBD_SetAddress+0x76>
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	885b      	ldrh	r3, [r3, #2]
 800ad12:	2b7f      	cmp	r3, #127	; 0x7f
 800ad14:	d829      	bhi.n	800ad6a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800ad16:	683b      	ldr	r3, [r7, #0]
 800ad18:	885b      	ldrh	r3, [r3, #2]
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ad20:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad28:	b2db      	uxtb	r3, r3
 800ad2a:	2b03      	cmp	r3, #3
 800ad2c:	d104      	bne.n	800ad38 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800ad2e:	6839      	ldr	r1, [r7, #0]
 800ad30:	6878      	ldr	r0, [r7, #4]
 800ad32:	f000 f9bc 	bl	800b0ae <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad36:	e01d      	b.n	800ad74 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	7bfa      	ldrb	r2, [r7, #15]
 800ad3c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800ad40:	7bfb      	ldrb	r3, [r7, #15]
 800ad42:	4619      	mov	r1, r3
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 fe1d 	bl	800b984 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800ad4a:	6878      	ldr	r0, [r7, #4]
 800ad4c:	f000 fa5d 	bl	800b20a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800ad50:	7bfb      	ldrb	r3, [r7, #15]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d004      	beq.n	800ad60 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	2202      	movs	r2, #2
 800ad5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad5e:	e009      	b.n	800ad74 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2201      	movs	r2, #1
 800ad64:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad68:	e004      	b.n	800ad74 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800ad6a:	6839      	ldr	r1, [r7, #0]
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 f99e 	bl	800b0ae <USBD_CtlError>
  }
}
 800ad72:	bf00      	nop
 800ad74:	bf00      	nop
 800ad76:	3710      	adds	r7, #16
 800ad78:	46bd      	mov	sp, r7
 800ad7a:	bd80      	pop	{r7, pc}

0800ad7c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad7c:	b580      	push	{r7, lr}
 800ad7e:	b084      	sub	sp, #16
 800ad80:	af00      	add	r7, sp, #0
 800ad82:	6078      	str	r0, [r7, #4]
 800ad84:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ad86:	2300      	movs	r3, #0
 800ad88:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	885b      	ldrh	r3, [r3, #2]
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	4b4e      	ldr	r3, [pc, #312]	; (800aecc <USBD_SetConfig+0x150>)
 800ad92:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800ad94:	4b4d      	ldr	r3, [pc, #308]	; (800aecc <USBD_SetConfig+0x150>)
 800ad96:	781b      	ldrb	r3, [r3, #0]
 800ad98:	2b01      	cmp	r3, #1
 800ad9a:	d905      	bls.n	800ada8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800ad9c:	6839      	ldr	r1, [r7, #0]
 800ad9e:	6878      	ldr	r0, [r7, #4]
 800ada0:	f000 f985 	bl	800b0ae <USBD_CtlError>
    return USBD_FAIL;
 800ada4:	2303      	movs	r3, #3
 800ada6:	e08c      	b.n	800aec2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adae:	b2db      	uxtb	r3, r3
 800adb0:	2b02      	cmp	r3, #2
 800adb2:	d002      	beq.n	800adba <USBD_SetConfig+0x3e>
 800adb4:	2b03      	cmp	r3, #3
 800adb6:	d029      	beq.n	800ae0c <USBD_SetConfig+0x90>
 800adb8:	e075      	b.n	800aea6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800adba:	4b44      	ldr	r3, [pc, #272]	; (800aecc <USBD_SetConfig+0x150>)
 800adbc:	781b      	ldrb	r3, [r3, #0]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d020      	beq.n	800ae04 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800adc2:	4b42      	ldr	r3, [pc, #264]	; (800aecc <USBD_SetConfig+0x150>)
 800adc4:	781b      	ldrb	r3, [r3, #0]
 800adc6:	461a      	mov	r2, r3
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800adcc:	4b3f      	ldr	r3, [pc, #252]	; (800aecc <USBD_SetConfig+0x150>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	4619      	mov	r1, r3
 800add2:	6878      	ldr	r0, [r7, #4]
 800add4:	f7fe ffe7 	bl	8009da6 <USBD_SetClassConfig>
 800add8:	4603      	mov	r3, r0
 800adda:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800addc:	7bfb      	ldrb	r3, [r7, #15]
 800adde:	2b00      	cmp	r3, #0
 800ade0:	d008      	beq.n	800adf4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800ade2:	6839      	ldr	r1, [r7, #0]
 800ade4:	6878      	ldr	r0, [r7, #4]
 800ade6:	f000 f962 	bl	800b0ae <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2202      	movs	r2, #2
 800adee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800adf2:	e065      	b.n	800aec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800adf4:	6878      	ldr	r0, [r7, #4]
 800adf6:	f000 fa08 	bl	800b20a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2203      	movs	r2, #3
 800adfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae02:	e05d      	b.n	800aec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae04:	6878      	ldr	r0, [r7, #4]
 800ae06:	f000 fa00 	bl	800b20a <USBD_CtlSendStatus>
      break;
 800ae0a:	e059      	b.n	800aec0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800ae0c:	4b2f      	ldr	r3, [pc, #188]	; (800aecc <USBD_SetConfig+0x150>)
 800ae0e:	781b      	ldrb	r3, [r3, #0]
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d112      	bne.n	800ae3a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	2202      	movs	r2, #2
 800ae18:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800ae1c:	4b2b      	ldr	r3, [pc, #172]	; (800aecc <USBD_SetConfig+0x150>)
 800ae1e:	781b      	ldrb	r3, [r3, #0]
 800ae20:	461a      	mov	r2, r3
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800ae26:	4b29      	ldr	r3, [pc, #164]	; (800aecc <USBD_SetConfig+0x150>)
 800ae28:	781b      	ldrb	r3, [r3, #0]
 800ae2a:	4619      	mov	r1, r3
 800ae2c:	6878      	ldr	r0, [r7, #4]
 800ae2e:	f7fe ffd6 	bl	8009dde <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800ae32:	6878      	ldr	r0, [r7, #4]
 800ae34:	f000 f9e9 	bl	800b20a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800ae38:	e042      	b.n	800aec0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800ae3a:	4b24      	ldr	r3, [pc, #144]	; (800aecc <USBD_SetConfig+0x150>)
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	461a      	mov	r2, r3
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	685b      	ldr	r3, [r3, #4]
 800ae44:	429a      	cmp	r2, r3
 800ae46:	d02a      	beq.n	800ae9e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	685b      	ldr	r3, [r3, #4]
 800ae4c:	b2db      	uxtb	r3, r3
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f7fe ffc4 	bl	8009dde <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ae56:	4b1d      	ldr	r3, [pc, #116]	; (800aecc <USBD_SetConfig+0x150>)
 800ae58:	781b      	ldrb	r3, [r3, #0]
 800ae5a:	461a      	mov	r2, r3
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800ae60:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <USBD_SetConfig+0x150>)
 800ae62:	781b      	ldrb	r3, [r3, #0]
 800ae64:	4619      	mov	r1, r3
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f7fe ff9d 	bl	8009da6 <USBD_SetClassConfig>
 800ae6c:	4603      	mov	r3, r0
 800ae6e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800ae70:	7bfb      	ldrb	r3, [r7, #15]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d00f      	beq.n	800ae96 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800ae76:	6839      	ldr	r1, [r7, #0]
 800ae78:	6878      	ldr	r0, [r7, #4]
 800ae7a:	f000 f918 	bl	800b0ae <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	685b      	ldr	r3, [r3, #4]
 800ae82:	b2db      	uxtb	r3, r3
 800ae84:	4619      	mov	r1, r3
 800ae86:	6878      	ldr	r0, [r7, #4]
 800ae88:	f7fe ffa9 	bl	8009dde <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	2202      	movs	r2, #2
 800ae90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800ae94:	e014      	b.n	800aec0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800ae96:	6878      	ldr	r0, [r7, #4]
 800ae98:	f000 f9b7 	bl	800b20a <USBD_CtlSendStatus>
      break;
 800ae9c:	e010      	b.n	800aec0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800ae9e:	6878      	ldr	r0, [r7, #4]
 800aea0:	f000 f9b3 	bl	800b20a <USBD_CtlSendStatus>
      break;
 800aea4:	e00c      	b.n	800aec0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800aea6:	6839      	ldr	r1, [r7, #0]
 800aea8:	6878      	ldr	r0, [r7, #4]
 800aeaa:	f000 f900 	bl	800b0ae <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800aeae:	4b07      	ldr	r3, [pc, #28]	; (800aecc <USBD_SetConfig+0x150>)
 800aeb0:	781b      	ldrb	r3, [r3, #0]
 800aeb2:	4619      	mov	r1, r3
 800aeb4:	6878      	ldr	r0, [r7, #4]
 800aeb6:	f7fe ff92 	bl	8009dde <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800aeba:	2303      	movs	r3, #3
 800aebc:	73fb      	strb	r3, [r7, #15]
      break;
 800aebe:	bf00      	nop
  }

  return ret;
 800aec0:	7bfb      	ldrb	r3, [r7, #15]
}
 800aec2:	4618      	mov	r0, r3
 800aec4:	3710      	adds	r7, #16
 800aec6:	46bd      	mov	sp, r7
 800aec8:	bd80      	pop	{r7, pc}
 800aeca:	bf00      	nop
 800aecc:	2000a630 	.word	0x2000a630

0800aed0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aed0:	b580      	push	{r7, lr}
 800aed2:	b082      	sub	sp, #8
 800aed4:	af00      	add	r7, sp, #0
 800aed6:	6078      	str	r0, [r7, #4]
 800aed8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800aeda:	683b      	ldr	r3, [r7, #0]
 800aedc:	88db      	ldrh	r3, [r3, #6]
 800aede:	2b01      	cmp	r3, #1
 800aee0:	d004      	beq.n	800aeec <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800aee2:	6839      	ldr	r1, [r7, #0]
 800aee4:	6878      	ldr	r0, [r7, #4]
 800aee6:	f000 f8e2 	bl	800b0ae <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800aeea:	e023      	b.n	800af34 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aef2:	b2db      	uxtb	r3, r3
 800aef4:	2b02      	cmp	r3, #2
 800aef6:	dc02      	bgt.n	800aefe <USBD_GetConfig+0x2e>
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	dc03      	bgt.n	800af04 <USBD_GetConfig+0x34>
 800aefc:	e015      	b.n	800af2a <USBD_GetConfig+0x5a>
 800aefe:	2b03      	cmp	r3, #3
 800af00:	d00b      	beq.n	800af1a <USBD_GetConfig+0x4a>
 800af02:	e012      	b.n	800af2a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	2200      	movs	r2, #0
 800af08:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	3308      	adds	r3, #8
 800af0e:	2201      	movs	r2, #1
 800af10:	4619      	mov	r1, r3
 800af12:	6878      	ldr	r0, [r7, #4]
 800af14:	f000 f93c 	bl	800b190 <USBD_CtlSendData>
        break;
 800af18:	e00c      	b.n	800af34 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	3304      	adds	r3, #4
 800af1e:	2201      	movs	r2, #1
 800af20:	4619      	mov	r1, r3
 800af22:	6878      	ldr	r0, [r7, #4]
 800af24:	f000 f934 	bl	800b190 <USBD_CtlSendData>
        break;
 800af28:	e004      	b.n	800af34 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800af2a:	6839      	ldr	r1, [r7, #0]
 800af2c:	6878      	ldr	r0, [r7, #4]
 800af2e:	f000 f8be 	bl	800b0ae <USBD_CtlError>
        break;
 800af32:	bf00      	nop
}
 800af34:	bf00      	nop
 800af36:	3708      	adds	r7, #8
 800af38:	46bd      	mov	sp, r7
 800af3a:	bd80      	pop	{r7, pc}

0800af3c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800af3c:	b580      	push	{r7, lr}
 800af3e:	b082      	sub	sp, #8
 800af40:	af00      	add	r7, sp, #0
 800af42:	6078      	str	r0, [r7, #4]
 800af44:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800af4c:	b2db      	uxtb	r3, r3
 800af4e:	3b01      	subs	r3, #1
 800af50:	2b02      	cmp	r3, #2
 800af52:	d81e      	bhi.n	800af92 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800af54:	683b      	ldr	r3, [r7, #0]
 800af56:	88db      	ldrh	r3, [r3, #6]
 800af58:	2b02      	cmp	r3, #2
 800af5a:	d004      	beq.n	800af66 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800af5c:	6839      	ldr	r1, [r7, #0]
 800af5e:	6878      	ldr	r0, [r7, #4]
 800af60:	f000 f8a5 	bl	800b0ae <USBD_CtlError>
        break;
 800af64:	e01a      	b.n	800af9c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2201      	movs	r2, #1
 800af6a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800af72:	2b00      	cmp	r3, #0
 800af74:	d005      	beq.n	800af82 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	68db      	ldr	r3, [r3, #12]
 800af7a:	f043 0202 	orr.w	r2, r3, #2
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	330c      	adds	r3, #12
 800af86:	2202      	movs	r2, #2
 800af88:	4619      	mov	r1, r3
 800af8a:	6878      	ldr	r0, [r7, #4]
 800af8c:	f000 f900 	bl	800b190 <USBD_CtlSendData>
      break;
 800af90:	e004      	b.n	800af9c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800af92:	6839      	ldr	r1, [r7, #0]
 800af94:	6878      	ldr	r0, [r7, #4]
 800af96:	f000 f88a 	bl	800b0ae <USBD_CtlError>
      break;
 800af9a:	bf00      	nop
  }
}
 800af9c:	bf00      	nop
 800af9e:	3708      	adds	r7, #8
 800afa0:	46bd      	mov	sp, r7
 800afa2:	bd80      	pop	{r7, pc}

0800afa4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800afa4:	b580      	push	{r7, lr}
 800afa6:	b082      	sub	sp, #8
 800afa8:	af00      	add	r7, sp, #0
 800afaa:	6078      	str	r0, [r7, #4]
 800afac:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800afae:	683b      	ldr	r3, [r7, #0]
 800afb0:	885b      	ldrh	r3, [r3, #2]
 800afb2:	2b01      	cmp	r3, #1
 800afb4:	d107      	bne.n	800afc6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2201      	movs	r2, #1
 800afba:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800afbe:	6878      	ldr	r0, [r7, #4]
 800afc0:	f000 f923 	bl	800b20a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800afc4:	e013      	b.n	800afee <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	885b      	ldrh	r3, [r3, #2]
 800afca:	2b02      	cmp	r3, #2
 800afcc:	d10b      	bne.n	800afe6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	889b      	ldrh	r3, [r3, #4]
 800afd2:	0a1b      	lsrs	r3, r3, #8
 800afd4:	b29b      	uxth	r3, r3
 800afd6:	b2da      	uxtb	r2, r3
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800afde:	6878      	ldr	r0, [r7, #4]
 800afe0:	f000 f913 	bl	800b20a <USBD_CtlSendStatus>
}
 800afe4:	e003      	b.n	800afee <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800afe6:	6839      	ldr	r1, [r7, #0]
 800afe8:	6878      	ldr	r0, [r7, #4]
 800afea:	f000 f860 	bl	800b0ae <USBD_CtlError>
}
 800afee:	bf00      	nop
 800aff0:	3708      	adds	r7, #8
 800aff2:	46bd      	mov	sp, r7
 800aff4:	bd80      	pop	{r7, pc}

0800aff6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800aff6:	b580      	push	{r7, lr}
 800aff8:	b082      	sub	sp, #8
 800affa:	af00      	add	r7, sp, #0
 800affc:	6078      	str	r0, [r7, #4]
 800affe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b006:	b2db      	uxtb	r3, r3
 800b008:	3b01      	subs	r3, #1
 800b00a:	2b02      	cmp	r3, #2
 800b00c:	d80b      	bhi.n	800b026 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b00e:	683b      	ldr	r3, [r7, #0]
 800b010:	885b      	ldrh	r3, [r3, #2]
 800b012:	2b01      	cmp	r3, #1
 800b014:	d10c      	bne.n	800b030 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	2200      	movs	r2, #0
 800b01a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b01e:	6878      	ldr	r0, [r7, #4]
 800b020:	f000 f8f3 	bl	800b20a <USBD_CtlSendStatus>
      }
      break;
 800b024:	e004      	b.n	800b030 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b026:	6839      	ldr	r1, [r7, #0]
 800b028:	6878      	ldr	r0, [r7, #4]
 800b02a:	f000 f840 	bl	800b0ae <USBD_CtlError>
      break;
 800b02e:	e000      	b.n	800b032 <USBD_ClrFeature+0x3c>
      break;
 800b030:	bf00      	nop
  }
}
 800b032:	bf00      	nop
 800b034:	3708      	adds	r7, #8
 800b036:	46bd      	mov	sp, r7
 800b038:	bd80      	pop	{r7, pc}

0800b03a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b03a:	b580      	push	{r7, lr}
 800b03c:	b084      	sub	sp, #16
 800b03e:	af00      	add	r7, sp, #0
 800b040:	6078      	str	r0, [r7, #4]
 800b042:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	781a      	ldrb	r2, [r3, #0]
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	3301      	adds	r3, #1
 800b054:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b056:	68fb      	ldr	r3, [r7, #12]
 800b058:	781a      	ldrb	r2, [r3, #0]
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	3301      	adds	r3, #1
 800b062:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	f7ff fa41 	bl	800a4ec <SWAPBYTE>
 800b06a:	4603      	mov	r3, r0
 800b06c:	461a      	mov	r2, r3
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b072:	68fb      	ldr	r3, [r7, #12]
 800b074:	3301      	adds	r3, #1
 800b076:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	3301      	adds	r3, #1
 800b07c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b07e:	68f8      	ldr	r0, [r7, #12]
 800b080:	f7ff fa34 	bl	800a4ec <SWAPBYTE>
 800b084:	4603      	mov	r3, r0
 800b086:	461a      	mov	r2, r3
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	3301      	adds	r3, #1
 800b090:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	3301      	adds	r3, #1
 800b096:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b098:	68f8      	ldr	r0, [r7, #12]
 800b09a:	f7ff fa27 	bl	800a4ec <SWAPBYTE>
 800b09e:	4603      	mov	r3, r0
 800b0a0:	461a      	mov	r2, r3
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	80da      	strh	r2, [r3, #6]
}
 800b0a6:	bf00      	nop
 800b0a8:	3710      	adds	r7, #16
 800b0aa:	46bd      	mov	sp, r7
 800b0ac:	bd80      	pop	{r7, pc}

0800b0ae <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b0ae:	b580      	push	{r7, lr}
 800b0b0:	b082      	sub	sp, #8
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b0b8:	2180      	movs	r1, #128	; 0x80
 800b0ba:	6878      	ldr	r0, [r7, #4]
 800b0bc:	f000 fbf8 	bl	800b8b0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b0c0:	2100      	movs	r1, #0
 800b0c2:	6878      	ldr	r0, [r7, #4]
 800b0c4:	f000 fbf4 	bl	800b8b0 <USBD_LL_StallEP>
}
 800b0c8:	bf00      	nop
 800b0ca:	3708      	adds	r7, #8
 800b0cc:	46bd      	mov	sp, r7
 800b0ce:	bd80      	pop	{r7, pc}

0800b0d0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b0d0:	b580      	push	{r7, lr}
 800b0d2:	b086      	sub	sp, #24
 800b0d4:	af00      	add	r7, sp, #0
 800b0d6:	60f8      	str	r0, [r7, #12]
 800b0d8:	60b9      	str	r1, [r7, #8]
 800b0da:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b0dc:	2300      	movs	r3, #0
 800b0de:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	2b00      	cmp	r3, #0
 800b0e4:	d036      	beq.n	800b154 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800b0ea:	6938      	ldr	r0, [r7, #16]
 800b0ec:	f000 f836 	bl	800b15c <USBD_GetLen>
 800b0f0:	4603      	mov	r3, r0
 800b0f2:	3301      	adds	r3, #1
 800b0f4:	b29b      	uxth	r3, r3
 800b0f6:	005b      	lsls	r3, r3, #1
 800b0f8:	b29a      	uxth	r2, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b0fe:	7dfb      	ldrb	r3, [r7, #23]
 800b100:	68ba      	ldr	r2, [r7, #8]
 800b102:	4413      	add	r3, r2
 800b104:	687a      	ldr	r2, [r7, #4]
 800b106:	7812      	ldrb	r2, [r2, #0]
 800b108:	701a      	strb	r2, [r3, #0]
  idx++;
 800b10a:	7dfb      	ldrb	r3, [r7, #23]
 800b10c:	3301      	adds	r3, #1
 800b10e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b110:	7dfb      	ldrb	r3, [r7, #23]
 800b112:	68ba      	ldr	r2, [r7, #8]
 800b114:	4413      	add	r3, r2
 800b116:	2203      	movs	r2, #3
 800b118:	701a      	strb	r2, [r3, #0]
  idx++;
 800b11a:	7dfb      	ldrb	r3, [r7, #23]
 800b11c:	3301      	adds	r3, #1
 800b11e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b120:	e013      	b.n	800b14a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800b122:	7dfb      	ldrb	r3, [r7, #23]
 800b124:	68ba      	ldr	r2, [r7, #8]
 800b126:	4413      	add	r3, r2
 800b128:	693a      	ldr	r2, [r7, #16]
 800b12a:	7812      	ldrb	r2, [r2, #0]
 800b12c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	3301      	adds	r3, #1
 800b132:	613b      	str	r3, [r7, #16]
    idx++;
 800b134:	7dfb      	ldrb	r3, [r7, #23]
 800b136:	3301      	adds	r3, #1
 800b138:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b13a:	7dfb      	ldrb	r3, [r7, #23]
 800b13c:	68ba      	ldr	r2, [r7, #8]
 800b13e:	4413      	add	r3, r2
 800b140:	2200      	movs	r2, #0
 800b142:	701a      	strb	r2, [r3, #0]
    idx++;
 800b144:	7dfb      	ldrb	r3, [r7, #23]
 800b146:	3301      	adds	r3, #1
 800b148:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b14a:	693b      	ldr	r3, [r7, #16]
 800b14c:	781b      	ldrb	r3, [r3, #0]
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d1e7      	bne.n	800b122 <USBD_GetString+0x52>
 800b152:	e000      	b.n	800b156 <USBD_GetString+0x86>
    return;
 800b154:	bf00      	nop
  }
}
 800b156:	3718      	adds	r7, #24
 800b158:	46bd      	mov	sp, r7
 800b15a:	bd80      	pop	{r7, pc}

0800b15c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b15c:	b480      	push	{r7}
 800b15e:	b085      	sub	sp, #20
 800b160:	af00      	add	r7, sp, #0
 800b162:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b164:	2300      	movs	r3, #0
 800b166:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b16c:	e005      	b.n	800b17a <USBD_GetLen+0x1e>
  {
    len++;
 800b16e:	7bfb      	ldrb	r3, [r7, #15]
 800b170:	3301      	adds	r3, #1
 800b172:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b174:	68bb      	ldr	r3, [r7, #8]
 800b176:	3301      	adds	r3, #1
 800b178:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b17a:	68bb      	ldr	r3, [r7, #8]
 800b17c:	781b      	ldrb	r3, [r3, #0]
 800b17e:	2b00      	cmp	r3, #0
 800b180:	d1f5      	bne.n	800b16e <USBD_GetLen+0x12>
  }

  return len;
 800b182:	7bfb      	ldrb	r3, [r7, #15]
}
 800b184:	4618      	mov	r0, r3
 800b186:	3714      	adds	r7, #20
 800b188:	46bd      	mov	sp, r7
 800b18a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b18e:	4770      	bx	lr

0800b190 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b190:	b580      	push	{r7, lr}
 800b192:	b084      	sub	sp, #16
 800b194:	af00      	add	r7, sp, #0
 800b196:	60f8      	str	r0, [r7, #12]
 800b198:	60b9      	str	r1, [r7, #8]
 800b19a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b19c:	68fb      	ldr	r3, [r7, #12]
 800b19e:	2202      	movs	r2, #2
 800b1a0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	687a      	ldr	r2, [r7, #4]
 800b1a8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	687a      	ldr	r2, [r7, #4]
 800b1ae:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	68ba      	ldr	r2, [r7, #8]
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	68f8      	ldr	r0, [r7, #12]
 800b1b8:	f000 fc03 	bl	800b9c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b1bc:	2300      	movs	r3, #0
}
 800b1be:	4618      	mov	r0, r3
 800b1c0:	3710      	adds	r7, #16
 800b1c2:	46bd      	mov	sp, r7
 800b1c4:	bd80      	pop	{r7, pc}

0800b1c6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b1c6:	b580      	push	{r7, lr}
 800b1c8:	b084      	sub	sp, #16
 800b1ca:	af00      	add	r7, sp, #0
 800b1cc:	60f8      	str	r0, [r7, #12]
 800b1ce:	60b9      	str	r1, [r7, #8]
 800b1d0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	68ba      	ldr	r2, [r7, #8]
 800b1d6:	2100      	movs	r1, #0
 800b1d8:	68f8      	ldr	r0, [r7, #12]
 800b1da:	f000 fbf2 	bl	800b9c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b1de:	2300      	movs	r3, #0
}
 800b1e0:	4618      	mov	r0, r3
 800b1e2:	3710      	adds	r7, #16
 800b1e4:	46bd      	mov	sp, r7
 800b1e6:	bd80      	pop	{r7, pc}

0800b1e8 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b1e8:	b580      	push	{r7, lr}
 800b1ea:	b084      	sub	sp, #16
 800b1ec:	af00      	add	r7, sp, #0
 800b1ee:	60f8      	str	r0, [r7, #12]
 800b1f0:	60b9      	str	r1, [r7, #8]
 800b1f2:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b1f4:	687b      	ldr	r3, [r7, #4]
 800b1f6:	68ba      	ldr	r2, [r7, #8]
 800b1f8:	2100      	movs	r1, #0
 800b1fa:	68f8      	ldr	r0, [r7, #12]
 800b1fc:	f000 fc02 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b200:	2300      	movs	r3, #0
}
 800b202:	4618      	mov	r0, r3
 800b204:	3710      	adds	r7, #16
 800b206:	46bd      	mov	sp, r7
 800b208:	bd80      	pop	{r7, pc}

0800b20a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b20a:	b580      	push	{r7, lr}
 800b20c:	b082      	sub	sp, #8
 800b20e:	af00      	add	r7, sp, #0
 800b210:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2204      	movs	r2, #4
 800b216:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b21a:	2300      	movs	r3, #0
 800b21c:	2200      	movs	r2, #0
 800b21e:	2100      	movs	r1, #0
 800b220:	6878      	ldr	r0, [r7, #4]
 800b222:	f000 fbce 	bl	800b9c2 <USBD_LL_Transmit>

  return USBD_OK;
 800b226:	2300      	movs	r3, #0
}
 800b228:	4618      	mov	r0, r3
 800b22a:	3708      	adds	r7, #8
 800b22c:	46bd      	mov	sp, r7
 800b22e:	bd80      	pop	{r7, pc}

0800b230 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b082      	sub	sp, #8
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	2205      	movs	r2, #5
 800b23c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b240:	2300      	movs	r3, #0
 800b242:	2200      	movs	r2, #0
 800b244:	2100      	movs	r1, #0
 800b246:	6878      	ldr	r0, [r7, #4]
 800b248:	f000 fbdc 	bl	800ba04 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b24c:	2300      	movs	r3, #0
}
 800b24e:	4618      	mov	r0, r3
 800b250:	3708      	adds	r7, #8
 800b252:	46bd      	mov	sp, r7
 800b254:	bd80      	pop	{r7, pc}
	...

0800b258 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b258:	b580      	push	{r7, lr}
 800b25a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b25c:	2200      	movs	r2, #0
 800b25e:	490e      	ldr	r1, [pc, #56]	; (800b298 <MX_USB_DEVICE_Init+0x40>)
 800b260:	480e      	ldr	r0, [pc, #56]	; (800b29c <MX_USB_DEVICE_Init+0x44>)
 800b262:	f7fe fd23 	bl	8009cac <USBD_Init>
 800b266:	4603      	mov	r3, r0
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d001      	beq.n	800b270 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b26c:	f7f7 fe1c 	bl	8002ea8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800b270:	490b      	ldr	r1, [pc, #44]	; (800b2a0 <MX_USB_DEVICE_Init+0x48>)
 800b272:	480a      	ldr	r0, [pc, #40]	; (800b29c <MX_USB_DEVICE_Init+0x44>)
 800b274:	f7fe fd4a 	bl	8009d0c <USBD_RegisterClass>
 800b278:	4603      	mov	r3, r0
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d001      	beq.n	800b282 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b27e:	f7f7 fe13 	bl	8002ea8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b282:	4806      	ldr	r0, [pc, #24]	; (800b29c <MX_USB_DEVICE_Init+0x44>)
 800b284:	f7fe fd78 	bl	8009d78 <USBD_Start>
 800b288:	4603      	mov	r3, r0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	d001      	beq.n	800b292 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800b28e:	f7f7 fe0b 	bl	8002ea8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b292:	bf00      	nop
 800b294:	bd80      	pop	{r7, pc}
 800b296:	bf00      	nop
 800b298:	20000108 	.word	0x20000108
 800b29c:	2000a634 	.word	0x2000a634
 800b2a0:	20000048 	.word	0x20000048

0800b2a4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2a4:	b480      	push	{r7}
 800b2a6:	b083      	sub	sp, #12
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	4603      	mov	r3, r0
 800b2ac:	6039      	str	r1, [r7, #0]
 800b2ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800b2b0:	683b      	ldr	r3, [r7, #0]
 800b2b2:	2212      	movs	r2, #18
 800b2b4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800b2b6:	4b03      	ldr	r3, [pc, #12]	; (800b2c4 <USBD_FS_DeviceDescriptor+0x20>)
}
 800b2b8:	4618      	mov	r0, r3
 800b2ba:	370c      	adds	r7, #12
 800b2bc:	46bd      	mov	sp, r7
 800b2be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c2:	4770      	bx	lr
 800b2c4:	20000124 	.word	0x20000124

0800b2c8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2c8:	b480      	push	{r7}
 800b2ca:	b083      	sub	sp, #12
 800b2cc:	af00      	add	r7, sp, #0
 800b2ce:	4603      	mov	r3, r0
 800b2d0:	6039      	str	r1, [r7, #0]
 800b2d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800b2d4:	683b      	ldr	r3, [r7, #0]
 800b2d6:	2204      	movs	r2, #4
 800b2d8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800b2da:	4b03      	ldr	r3, [pc, #12]	; (800b2e8 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800b2dc:	4618      	mov	r0, r3
 800b2de:	370c      	adds	r7, #12
 800b2e0:	46bd      	mov	sp, r7
 800b2e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2e6:	4770      	bx	lr
 800b2e8:	20000138 	.word	0x20000138

0800b2ec <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b2ec:	b580      	push	{r7, lr}
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	af00      	add	r7, sp, #0
 800b2f2:	4603      	mov	r3, r0
 800b2f4:	6039      	str	r1, [r7, #0]
 800b2f6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b2f8:	79fb      	ldrb	r3, [r7, #7]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d105      	bne.n	800b30a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b2fe:	683a      	ldr	r2, [r7, #0]
 800b300:	4907      	ldr	r1, [pc, #28]	; (800b320 <USBD_FS_ProductStrDescriptor+0x34>)
 800b302:	4808      	ldr	r0, [pc, #32]	; (800b324 <USBD_FS_ProductStrDescriptor+0x38>)
 800b304:	f7ff fee4 	bl	800b0d0 <USBD_GetString>
 800b308:	e004      	b.n	800b314 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800b30a:	683a      	ldr	r2, [r7, #0]
 800b30c:	4904      	ldr	r1, [pc, #16]	; (800b320 <USBD_FS_ProductStrDescriptor+0x34>)
 800b30e:	4805      	ldr	r0, [pc, #20]	; (800b324 <USBD_FS_ProductStrDescriptor+0x38>)
 800b310:	f7ff fede 	bl	800b0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b314:	4b02      	ldr	r3, [pc, #8]	; (800b320 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800b316:	4618      	mov	r0, r3
 800b318:	3708      	adds	r7, #8
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}
 800b31e:	bf00      	nop
 800b320:	2000a910 	.word	0x2000a910
 800b324:	0800ce94 	.word	0x0800ce94

0800b328 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b328:	b580      	push	{r7, lr}
 800b32a:	b082      	sub	sp, #8
 800b32c:	af00      	add	r7, sp, #0
 800b32e:	4603      	mov	r3, r0
 800b330:	6039      	str	r1, [r7, #0]
 800b332:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800b334:	683a      	ldr	r2, [r7, #0]
 800b336:	4904      	ldr	r1, [pc, #16]	; (800b348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800b338:	4804      	ldr	r0, [pc, #16]	; (800b34c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800b33a:	f7ff fec9 	bl	800b0d0 <USBD_GetString>
  return USBD_StrDesc;
 800b33e:	4b02      	ldr	r3, [pc, #8]	; (800b348 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800b340:	4618      	mov	r0, r3
 800b342:	3708      	adds	r7, #8
 800b344:	46bd      	mov	sp, r7
 800b346:	bd80      	pop	{r7, pc}
 800b348:	2000a910 	.word	0x2000a910
 800b34c:	0800ceac 	.word	0x0800ceac

0800b350 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b350:	b580      	push	{r7, lr}
 800b352:	b082      	sub	sp, #8
 800b354:	af00      	add	r7, sp, #0
 800b356:	4603      	mov	r3, r0
 800b358:	6039      	str	r1, [r7, #0]
 800b35a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	221a      	movs	r2, #26
 800b360:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800b362:	f000 f843 	bl	800b3ec <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800b366:	4b02      	ldr	r3, [pc, #8]	; (800b370 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800b368:	4618      	mov	r0, r3
 800b36a:	3708      	adds	r7, #8
 800b36c:	46bd      	mov	sp, r7
 800b36e:	bd80      	pop	{r7, pc}
 800b370:	2000013c 	.word	0x2000013c

0800b374 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b374:	b580      	push	{r7, lr}
 800b376:	b082      	sub	sp, #8
 800b378:	af00      	add	r7, sp, #0
 800b37a:	4603      	mov	r3, r0
 800b37c:	6039      	str	r1, [r7, #0]
 800b37e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800b380:	79fb      	ldrb	r3, [r7, #7]
 800b382:	2b00      	cmp	r3, #0
 800b384:	d105      	bne.n	800b392 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b386:	683a      	ldr	r2, [r7, #0]
 800b388:	4907      	ldr	r1, [pc, #28]	; (800b3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b38a:	4808      	ldr	r0, [pc, #32]	; (800b3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b38c:	f7ff fea0 	bl	800b0d0 <USBD_GetString>
 800b390:	e004      	b.n	800b39c <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800b392:	683a      	ldr	r2, [r7, #0]
 800b394:	4904      	ldr	r1, [pc, #16]	; (800b3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
 800b396:	4805      	ldr	r0, [pc, #20]	; (800b3ac <USBD_FS_ConfigStrDescriptor+0x38>)
 800b398:	f7ff fe9a 	bl	800b0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b39c:	4b02      	ldr	r3, [pc, #8]	; (800b3a8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800b39e:	4618      	mov	r0, r3
 800b3a0:	3708      	adds	r7, #8
 800b3a2:	46bd      	mov	sp, r7
 800b3a4:	bd80      	pop	{r7, pc}
 800b3a6:	bf00      	nop
 800b3a8:	2000a910 	.word	0x2000a910
 800b3ac:	0800cec0 	.word	0x0800cec0

0800b3b0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800b3b0:	b580      	push	{r7, lr}
 800b3b2:	b082      	sub	sp, #8
 800b3b4:	af00      	add	r7, sp, #0
 800b3b6:	4603      	mov	r3, r0
 800b3b8:	6039      	str	r1, [r7, #0]
 800b3ba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800b3bc:	79fb      	ldrb	r3, [r7, #7]
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d105      	bne.n	800b3ce <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3c2:	683a      	ldr	r2, [r7, #0]
 800b3c4:	4907      	ldr	r1, [pc, #28]	; (800b3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3c6:	4808      	ldr	r0, [pc, #32]	; (800b3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3c8:	f7ff fe82 	bl	800b0d0 <USBD_GetString>
 800b3cc:	e004      	b.n	800b3d8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800b3ce:	683a      	ldr	r2, [r7, #0]
 800b3d0:	4904      	ldr	r1, [pc, #16]	; (800b3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800b3d2:	4805      	ldr	r0, [pc, #20]	; (800b3e8 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800b3d4:	f7ff fe7c 	bl	800b0d0 <USBD_GetString>
  }
  return USBD_StrDesc;
 800b3d8:	4b02      	ldr	r3, [pc, #8]	; (800b3e4 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800b3da:	4618      	mov	r0, r3
 800b3dc:	3708      	adds	r7, #8
 800b3de:	46bd      	mov	sp, r7
 800b3e0:	bd80      	pop	{r7, pc}
 800b3e2:	bf00      	nop
 800b3e4:	2000a910 	.word	0x2000a910
 800b3e8:	0800cecc 	.word	0x0800cecc

0800b3ec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800b3f2:	4b0f      	ldr	r3, [pc, #60]	; (800b430 <Get_SerialNum+0x44>)
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800b3f8:	4b0e      	ldr	r3, [pc, #56]	; (800b434 <Get_SerialNum+0x48>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800b3fe:	4b0e      	ldr	r3, [pc, #56]	; (800b438 <Get_SerialNum+0x4c>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800b404:	68fa      	ldr	r2, [r7, #12]
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	4413      	add	r3, r2
 800b40a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800b40c:	68fb      	ldr	r3, [r7, #12]
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d009      	beq.n	800b426 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800b412:	2208      	movs	r2, #8
 800b414:	4909      	ldr	r1, [pc, #36]	; (800b43c <Get_SerialNum+0x50>)
 800b416:	68f8      	ldr	r0, [r7, #12]
 800b418:	f000 f814 	bl	800b444 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800b41c:	2204      	movs	r2, #4
 800b41e:	4908      	ldr	r1, [pc, #32]	; (800b440 <Get_SerialNum+0x54>)
 800b420:	68b8      	ldr	r0, [r7, #8]
 800b422:	f000 f80f 	bl	800b444 <IntToUnicode>
  }
}
 800b426:	bf00      	nop
 800b428:	3710      	adds	r7, #16
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	1fff7a10 	.word	0x1fff7a10
 800b434:	1fff7a14 	.word	0x1fff7a14
 800b438:	1fff7a18 	.word	0x1fff7a18
 800b43c:	2000013e 	.word	0x2000013e
 800b440:	2000014e 	.word	0x2000014e

0800b444 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800b444:	b480      	push	{r7}
 800b446:	b087      	sub	sp, #28
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	60b9      	str	r1, [r7, #8]
 800b44e:	4613      	mov	r3, r2
 800b450:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800b452:	2300      	movs	r3, #0
 800b454:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800b456:	2300      	movs	r3, #0
 800b458:	75fb      	strb	r3, [r7, #23]
 800b45a:	e027      	b.n	800b4ac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	0f1b      	lsrs	r3, r3, #28
 800b460:	2b09      	cmp	r3, #9
 800b462:	d80b      	bhi.n	800b47c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800b464:	68fb      	ldr	r3, [r7, #12]
 800b466:	0f1b      	lsrs	r3, r3, #28
 800b468:	b2da      	uxtb	r2, r3
 800b46a:	7dfb      	ldrb	r3, [r7, #23]
 800b46c:	005b      	lsls	r3, r3, #1
 800b46e:	4619      	mov	r1, r3
 800b470:	68bb      	ldr	r3, [r7, #8]
 800b472:	440b      	add	r3, r1
 800b474:	3230      	adds	r2, #48	; 0x30
 800b476:	b2d2      	uxtb	r2, r2
 800b478:	701a      	strb	r2, [r3, #0]
 800b47a:	e00a      	b.n	800b492 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800b47c:	68fb      	ldr	r3, [r7, #12]
 800b47e:	0f1b      	lsrs	r3, r3, #28
 800b480:	b2da      	uxtb	r2, r3
 800b482:	7dfb      	ldrb	r3, [r7, #23]
 800b484:	005b      	lsls	r3, r3, #1
 800b486:	4619      	mov	r1, r3
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	440b      	add	r3, r1
 800b48c:	3237      	adds	r2, #55	; 0x37
 800b48e:	b2d2      	uxtb	r2, r2
 800b490:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	011b      	lsls	r3, r3, #4
 800b496:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800b498:	7dfb      	ldrb	r3, [r7, #23]
 800b49a:	005b      	lsls	r3, r3, #1
 800b49c:	3301      	adds	r3, #1
 800b49e:	68ba      	ldr	r2, [r7, #8]
 800b4a0:	4413      	add	r3, r2
 800b4a2:	2200      	movs	r2, #0
 800b4a4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800b4a6:	7dfb      	ldrb	r3, [r7, #23]
 800b4a8:	3301      	adds	r3, #1
 800b4aa:	75fb      	strb	r3, [r7, #23]
 800b4ac:	7dfa      	ldrb	r2, [r7, #23]
 800b4ae:	79fb      	ldrb	r3, [r7, #7]
 800b4b0:	429a      	cmp	r2, r3
 800b4b2:	d3d3      	bcc.n	800b45c <IntToUnicode+0x18>
  }
}
 800b4b4:	bf00      	nop
 800b4b6:	bf00      	nop
 800b4b8:	371c      	adds	r7, #28
 800b4ba:	46bd      	mov	sp, r7
 800b4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4c0:	4770      	bx	lr
	...

0800b4c4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800b4c4:	b580      	push	{r7, lr}
 800b4c6:	b08a      	sub	sp, #40	; 0x28
 800b4c8:	af00      	add	r7, sp, #0
 800b4ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b4cc:	f107 0314 	add.w	r3, r7, #20
 800b4d0:	2200      	movs	r2, #0
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	605a      	str	r2, [r3, #4]
 800b4d6:	609a      	str	r2, [r3, #8]
 800b4d8:	60da      	str	r2, [r3, #12]
 800b4da:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	681b      	ldr	r3, [r3, #0]
 800b4e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b4e4:	d147      	bne.n	800b576 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b4e6:	2300      	movs	r3, #0
 800b4e8:	613b      	str	r3, [r7, #16]
 800b4ea:	4b25      	ldr	r3, [pc, #148]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b4ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4ee:	4a24      	ldr	r2, [pc, #144]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b4f0:	f043 0301 	orr.w	r3, r3, #1
 800b4f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b4f6:	4b22      	ldr	r3, [pc, #136]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b4f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4fa:	f003 0301 	and.w	r3, r3, #1
 800b4fe:	613b      	str	r3, [r7, #16]
 800b500:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800b502:	f44f 7300 	mov.w	r3, #512	; 0x200
 800b506:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b508:	2300      	movs	r3, #0
 800b50a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b50c:	2300      	movs	r3, #0
 800b50e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800b510:	f107 0314 	add.w	r3, r7, #20
 800b514:	4619      	mov	r1, r3
 800b516:	481b      	ldr	r0, [pc, #108]	; (800b584 <HAL_PCD_MspInit+0xc0>)
 800b518:	f7f8 f99a 	bl	8003850 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800b51c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800b520:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b522:	2302      	movs	r3, #2
 800b524:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b526:	2300      	movs	r3, #0
 800b528:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b52a:	2303      	movs	r3, #3
 800b52c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800b52e:	230a      	movs	r3, #10
 800b530:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b532:	f107 0314 	add.w	r3, r7, #20
 800b536:	4619      	mov	r1, r3
 800b538:	4812      	ldr	r0, [pc, #72]	; (800b584 <HAL_PCD_MspInit+0xc0>)
 800b53a:	f7f8 f989 	bl	8003850 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800b53e:	4b10      	ldr	r3, [pc, #64]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b542:	4a0f      	ldr	r2, [pc, #60]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b544:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b548:	6353      	str	r3, [r2, #52]	; 0x34
 800b54a:	2300      	movs	r3, #0
 800b54c:	60fb      	str	r3, [r7, #12]
 800b54e:	4b0c      	ldr	r3, [pc, #48]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b552:	4a0b      	ldr	r2, [pc, #44]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800b558:	6453      	str	r3, [r2, #68]	; 0x44
 800b55a:	4b09      	ldr	r3, [pc, #36]	; (800b580 <HAL_PCD_MspInit+0xbc>)
 800b55c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b55e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b562:	60fb      	str	r3, [r7, #12]
 800b564:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800b566:	2200      	movs	r2, #0
 800b568:	2100      	movs	r1, #0
 800b56a:	2043      	movs	r0, #67	; 0x43
 800b56c:	f7f8 f8a7 	bl	80036be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800b570:	2043      	movs	r0, #67	; 0x43
 800b572:	f7f8 f8c0 	bl	80036f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800b576:	bf00      	nop
 800b578:	3728      	adds	r7, #40	; 0x28
 800b57a:	46bd      	mov	sp, r7
 800b57c:	bd80      	pop	{r7, pc}
 800b57e:	bf00      	nop
 800b580:	40023800 	.word	0x40023800
 800b584:	40020000 	.word	0x40020000

0800b588 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b588:	b580      	push	{r7, lr}
 800b58a:	b082      	sub	sp, #8
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b59c:	4619      	mov	r1, r3
 800b59e:	4610      	mov	r0, r2
 800b5a0:	f7fe fc37 	bl	8009e12 <USBD_LL_SetupStage>
}
 800b5a4:	bf00      	nop
 800b5a6:	3708      	adds	r7, #8
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}

0800b5ac <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5ac:	b580      	push	{r7, lr}
 800b5ae:	b082      	sub	sp, #8
 800b5b0:	af00      	add	r7, sp, #0
 800b5b2:	6078      	str	r0, [r7, #4]
 800b5b4:	460b      	mov	r3, r1
 800b5b6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800b5b8:	687b      	ldr	r3, [r7, #4]
 800b5ba:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b5be:	78fa      	ldrb	r2, [r7, #3]
 800b5c0:	6879      	ldr	r1, [r7, #4]
 800b5c2:	4613      	mov	r3, r2
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	4413      	add	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	440b      	add	r3, r1
 800b5cc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800b5d0:	681a      	ldr	r2, [r3, #0]
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	4619      	mov	r1, r3
 800b5d6:	f7fe fc71 	bl	8009ebc <USBD_LL_DataOutStage>
}
 800b5da:	bf00      	nop
 800b5dc:	3708      	adds	r7, #8
 800b5de:	46bd      	mov	sp, r7
 800b5e0:	bd80      	pop	{r7, pc}

0800b5e2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b5e2:	b580      	push	{r7, lr}
 800b5e4:	b082      	sub	sp, #8
 800b5e6:	af00      	add	r7, sp, #0
 800b5e8:	6078      	str	r0, [r7, #4]
 800b5ea:	460b      	mov	r3, r1
 800b5ec:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800b5f4:	78fa      	ldrb	r2, [r7, #3]
 800b5f6:	6879      	ldr	r1, [r7, #4]
 800b5f8:	4613      	mov	r3, r2
 800b5fa:	00db      	lsls	r3, r3, #3
 800b5fc:	4413      	add	r3, r2
 800b5fe:	009b      	lsls	r3, r3, #2
 800b600:	440b      	add	r3, r1
 800b602:	334c      	adds	r3, #76	; 0x4c
 800b604:	681a      	ldr	r2, [r3, #0]
 800b606:	78fb      	ldrb	r3, [r7, #3]
 800b608:	4619      	mov	r1, r3
 800b60a:	f7fe fd0a 	bl	800a022 <USBD_LL_DataInStage>
}
 800b60e:	bf00      	nop
 800b610:	3708      	adds	r7, #8
 800b612:	46bd      	mov	sp, r7
 800b614:	bd80      	pop	{r7, pc}

0800b616 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b616:	b580      	push	{r7, lr}
 800b618:	b082      	sub	sp, #8
 800b61a:	af00      	add	r7, sp, #0
 800b61c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b624:	4618      	mov	r0, r3
 800b626:	f7fe fe3e 	bl	800a2a6 <USBD_LL_SOF>
}
 800b62a:	bf00      	nop
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b084      	sub	sp, #16
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800b63a:	2301      	movs	r3, #1
 800b63c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	68db      	ldr	r3, [r3, #12]
 800b642:	2b02      	cmp	r3, #2
 800b644:	d001      	beq.n	800b64a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800b646:	f7f7 fc2f 	bl	8002ea8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b650:	7bfa      	ldrb	r2, [r7, #15]
 800b652:	4611      	mov	r1, r2
 800b654:	4618      	mov	r0, r3
 800b656:	f7fe fde8 	bl	800a22a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b660:	4618      	mov	r0, r3
 800b662:	f7fe fd90 	bl	800a186 <USBD_LL_Reset>
}
 800b666:	bf00      	nop
 800b668:	3710      	adds	r7, #16
 800b66a:	46bd      	mov	sp, r7
 800b66c:	bd80      	pop	{r7, pc}
	...

0800b670 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b67e:	4618      	mov	r0, r3
 800b680:	f7fe fde3 	bl	800a24a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	687a      	ldr	r2, [r7, #4]
 800b690:	6812      	ldr	r2, [r2, #0]
 800b692:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800b696:	f043 0301 	orr.w	r3, r3, #1
 800b69a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	6a1b      	ldr	r3, [r3, #32]
 800b6a0:	2b00      	cmp	r3, #0
 800b6a2:	d005      	beq.n	800b6b0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800b6a4:	4b04      	ldr	r3, [pc, #16]	; (800b6b8 <HAL_PCD_SuspendCallback+0x48>)
 800b6a6:	691b      	ldr	r3, [r3, #16]
 800b6a8:	4a03      	ldr	r2, [pc, #12]	; (800b6b8 <HAL_PCD_SuspendCallback+0x48>)
 800b6aa:	f043 0306 	orr.w	r3, r3, #6
 800b6ae:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800b6b0:	bf00      	nop
 800b6b2:	3708      	adds	r7, #8
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}
 800b6b8:	e000ed00 	.word	0xe000ed00

0800b6bc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6ca:	4618      	mov	r0, r3
 800b6cc:	f7fe fdd3 	bl	800a276 <USBD_LL_Resume>
}
 800b6d0:	bf00      	nop
 800b6d2:	3708      	adds	r7, #8
 800b6d4:	46bd      	mov	sp, r7
 800b6d6:	bd80      	pop	{r7, pc}

0800b6d8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	460b      	mov	r3, r1
 800b6e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b6ea:	78fa      	ldrb	r2, [r7, #3]
 800b6ec:	4611      	mov	r1, r2
 800b6ee:	4618      	mov	r0, r3
 800b6f0:	f7fe fe2b 	bl	800a34a <USBD_LL_IsoOUTIncomplete>
}
 800b6f4:	bf00      	nop
 800b6f6:	3708      	adds	r7, #8
 800b6f8:	46bd      	mov	sp, r7
 800b6fa:	bd80      	pop	{r7, pc}

0800b6fc <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b082      	sub	sp, #8
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
 800b704:	460b      	mov	r3, r1
 800b706:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b70e:	78fa      	ldrb	r2, [r7, #3]
 800b710:	4611      	mov	r1, r2
 800b712:	4618      	mov	r0, r3
 800b714:	f7fe fde7 	bl	800a2e6 <USBD_LL_IsoINIncomplete>
}
 800b718:	bf00      	nop
 800b71a:	3708      	adds	r7, #8
 800b71c:	46bd      	mov	sp, r7
 800b71e:	bd80      	pop	{r7, pc}

0800b720 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b720:	b580      	push	{r7, lr}
 800b722:	b082      	sub	sp, #8
 800b724:	af00      	add	r7, sp, #0
 800b726:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b72e:	4618      	mov	r0, r3
 800b730:	f7fe fe3d 	bl	800a3ae <USBD_LL_DevConnected>
}
 800b734:	bf00      	nop
 800b736:	3708      	adds	r7, #8
 800b738:	46bd      	mov	sp, r7
 800b73a:	bd80      	pop	{r7, pc}

0800b73c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800b73c:	b580      	push	{r7, lr}
 800b73e:	b082      	sub	sp, #8
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800b74a:	4618      	mov	r0, r3
 800b74c:	f7fe fe3a 	bl	800a3c4 <USBD_LL_DevDisconnected>
}
 800b750:	bf00      	nop
 800b752:	3708      	adds	r7, #8
 800b754:	46bd      	mov	sp, r7
 800b756:	bd80      	pop	{r7, pc}

0800b758 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	781b      	ldrb	r3, [r3, #0]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d13c      	bne.n	800b7e2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800b768:	4a20      	ldr	r2, [pc, #128]	; (800b7ec <USBD_LL_Init+0x94>)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	4a1e      	ldr	r2, [pc, #120]	; (800b7ec <USBD_LL_Init+0x94>)
 800b774:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800b778:	4b1c      	ldr	r3, [pc, #112]	; (800b7ec <USBD_LL_Init+0x94>)
 800b77a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800b77e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800b780:	4b1a      	ldr	r3, [pc, #104]	; (800b7ec <USBD_LL_Init+0x94>)
 800b782:	2204      	movs	r2, #4
 800b784:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800b786:	4b19      	ldr	r3, [pc, #100]	; (800b7ec <USBD_LL_Init+0x94>)
 800b788:	2202      	movs	r2, #2
 800b78a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800b78c:	4b17      	ldr	r3, [pc, #92]	; (800b7ec <USBD_LL_Init+0x94>)
 800b78e:	2200      	movs	r2, #0
 800b790:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800b792:	4b16      	ldr	r3, [pc, #88]	; (800b7ec <USBD_LL_Init+0x94>)
 800b794:	2202      	movs	r2, #2
 800b796:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800b798:	4b14      	ldr	r3, [pc, #80]	; (800b7ec <USBD_LL_Init+0x94>)
 800b79a:	2200      	movs	r2, #0
 800b79c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800b79e:	4b13      	ldr	r3, [pc, #76]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800b7a4:	4b11      	ldr	r3, [pc, #68]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7a6:	2200      	movs	r2, #0
 800b7a8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800b7aa:	4b10      	ldr	r3, [pc, #64]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7ac:	2201      	movs	r2, #1
 800b7ae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800b7b0:	4b0e      	ldr	r3, [pc, #56]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800b7b6:	480d      	ldr	r0, [pc, #52]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7b8:	f7f9 f808 	bl	80047cc <HAL_PCD_Init>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d001      	beq.n	800b7c6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800b7c2:	f7f7 fb71 	bl	8002ea8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800b7c6:	2180      	movs	r1, #128	; 0x80
 800b7c8:	4808      	ldr	r0, [pc, #32]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7ca:	f7fa fa48 	bl	8005c5e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800b7ce:	2240      	movs	r2, #64	; 0x40
 800b7d0:	2100      	movs	r1, #0
 800b7d2:	4806      	ldr	r0, [pc, #24]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7d4:	f7fa f9fc 	bl	8005bd0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800b7d8:	2280      	movs	r2, #128	; 0x80
 800b7da:	2101      	movs	r1, #1
 800b7dc:	4803      	ldr	r0, [pc, #12]	; (800b7ec <USBD_LL_Init+0x94>)
 800b7de:	f7fa f9f7 	bl	8005bd0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800b7e2:	2300      	movs	r3, #0
}
 800b7e4:	4618      	mov	r0, r3
 800b7e6:	3708      	adds	r7, #8
 800b7e8:	46bd      	mov	sp, r7
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	2000ab10 	.word	0x2000ab10

0800b7f0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b084      	sub	sp, #16
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b7f8:	2300      	movs	r3, #0
 800b7fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b806:	4618      	mov	r0, r3
 800b808:	f7f9 f8fd 	bl	8004a06 <HAL_PCD_Start>
 800b80c:	4603      	mov	r3, r0
 800b80e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b810:	7bfb      	ldrb	r3, [r7, #15]
 800b812:	4618      	mov	r0, r3
 800b814:	f000 f930 	bl	800ba78 <USBD_Get_USB_Status>
 800b818:	4603      	mov	r3, r0
 800b81a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b81c:	7bbb      	ldrb	r3, [r7, #14]
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3710      	adds	r7, #16
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}

0800b826 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800b826:	b580      	push	{r7, lr}
 800b828:	b084      	sub	sp, #16
 800b82a:	af00      	add	r7, sp, #0
 800b82c:	6078      	str	r0, [r7, #4]
 800b82e:	4608      	mov	r0, r1
 800b830:	4611      	mov	r1, r2
 800b832:	461a      	mov	r2, r3
 800b834:	4603      	mov	r3, r0
 800b836:	70fb      	strb	r3, [r7, #3]
 800b838:	460b      	mov	r3, r1
 800b83a:	70bb      	strb	r3, [r7, #2]
 800b83c:	4613      	mov	r3, r2
 800b83e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b840:	2300      	movs	r3, #0
 800b842:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b844:	2300      	movs	r3, #0
 800b846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b84e:	78bb      	ldrb	r3, [r7, #2]
 800b850:	883a      	ldrh	r2, [r7, #0]
 800b852:	78f9      	ldrb	r1, [r7, #3]
 800b854:	f7f9 fdce 	bl	80053f4 <HAL_PCD_EP_Open>
 800b858:	4603      	mov	r3, r0
 800b85a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b85c:	7bfb      	ldrb	r3, [r7, #15]
 800b85e:	4618      	mov	r0, r3
 800b860:	f000 f90a 	bl	800ba78 <USBD_Get_USB_Status>
 800b864:	4603      	mov	r3, r0
 800b866:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b868:	7bbb      	ldrb	r3, [r7, #14]
}
 800b86a:	4618      	mov	r0, r3
 800b86c:	3710      	adds	r7, #16
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}

0800b872 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b872:	b580      	push	{r7, lr}
 800b874:	b084      	sub	sp, #16
 800b876:	af00      	add	r7, sp, #0
 800b878:	6078      	str	r0, [r7, #4]
 800b87a:	460b      	mov	r3, r1
 800b87c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b87e:	2300      	movs	r3, #0
 800b880:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b882:	2300      	movs	r3, #0
 800b884:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b88c:	78fa      	ldrb	r2, [r7, #3]
 800b88e:	4611      	mov	r1, r2
 800b890:	4618      	mov	r0, r3
 800b892:	f7f9 fe17 	bl	80054c4 <HAL_PCD_EP_Close>
 800b896:	4603      	mov	r3, r0
 800b898:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b89a:	7bfb      	ldrb	r3, [r7, #15]
 800b89c:	4618      	mov	r0, r3
 800b89e:	f000 f8eb 	bl	800ba78 <USBD_Get_USB_Status>
 800b8a2:	4603      	mov	r3, r0
 800b8a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8a8:	4618      	mov	r0, r3
 800b8aa:	3710      	adds	r7, #16
 800b8ac:	46bd      	mov	sp, r7
 800b8ae:	bd80      	pop	{r7, pc}

0800b8b0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8b0:	b580      	push	{r7, lr}
 800b8b2:	b084      	sub	sp, #16
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
 800b8b8:	460b      	mov	r3, r1
 800b8ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b8ca:	78fa      	ldrb	r2, [r7, #3]
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	f7f9 fed7 	bl	8005682 <HAL_PCD_EP_SetStall>
 800b8d4:	4603      	mov	r3, r0
 800b8d6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b8d8:	7bfb      	ldrb	r3, [r7, #15]
 800b8da:	4618      	mov	r0, r3
 800b8dc:	f000 f8cc 	bl	800ba78 <USBD_Get_USB_Status>
 800b8e0:	4603      	mov	r3, r0
 800b8e2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b8e4:	7bbb      	ldrb	r3, [r7, #14]
}
 800b8e6:	4618      	mov	r0, r3
 800b8e8:	3710      	adds	r7, #16
 800b8ea:	46bd      	mov	sp, r7
 800b8ec:	bd80      	pop	{r7, pc}

0800b8ee <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b8ee:	b580      	push	{r7, lr}
 800b8f0:	b084      	sub	sp, #16
 800b8f2:	af00      	add	r7, sp, #0
 800b8f4:	6078      	str	r0, [r7, #4]
 800b8f6:	460b      	mov	r3, r1
 800b8f8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b8fe:	2300      	movs	r3, #0
 800b900:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b908:	78fa      	ldrb	r2, [r7, #3]
 800b90a:	4611      	mov	r1, r2
 800b90c:	4618      	mov	r0, r3
 800b90e:	f7f9 ff1c 	bl	800574a <HAL_PCD_EP_ClrStall>
 800b912:	4603      	mov	r3, r0
 800b914:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b916:	7bfb      	ldrb	r3, [r7, #15]
 800b918:	4618      	mov	r0, r3
 800b91a:	f000 f8ad 	bl	800ba78 <USBD_Get_USB_Status>
 800b91e:	4603      	mov	r3, r0
 800b920:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b922:	7bbb      	ldrb	r3, [r7, #14]
}
 800b924:	4618      	mov	r0, r3
 800b926:	3710      	adds	r7, #16
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}

0800b92c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800b92c:	b480      	push	{r7}
 800b92e:	b085      	sub	sp, #20
 800b930:	af00      	add	r7, sp, #0
 800b932:	6078      	str	r0, [r7, #4]
 800b934:	460b      	mov	r3, r1
 800b936:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b93e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800b940:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b944:	2b00      	cmp	r3, #0
 800b946:	da0b      	bge.n	800b960 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800b948:	78fb      	ldrb	r3, [r7, #3]
 800b94a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b94e:	68f9      	ldr	r1, [r7, #12]
 800b950:	4613      	mov	r3, r2
 800b952:	00db      	lsls	r3, r3, #3
 800b954:	4413      	add	r3, r2
 800b956:	009b      	lsls	r3, r3, #2
 800b958:	440b      	add	r3, r1
 800b95a:	333e      	adds	r3, #62	; 0x3e
 800b95c:	781b      	ldrb	r3, [r3, #0]
 800b95e:	e00b      	b.n	800b978 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800b960:	78fb      	ldrb	r3, [r7, #3]
 800b962:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b966:	68f9      	ldr	r1, [r7, #12]
 800b968:	4613      	mov	r3, r2
 800b96a:	00db      	lsls	r3, r3, #3
 800b96c:	4413      	add	r3, r2
 800b96e:	009b      	lsls	r3, r3, #2
 800b970:	440b      	add	r3, r1
 800b972:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800b976:	781b      	ldrb	r3, [r3, #0]
  }
}
 800b978:	4618      	mov	r0, r3
 800b97a:	3714      	adds	r7, #20
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr

0800b984 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800b984:	b580      	push	{r7, lr}
 800b986:	b084      	sub	sp, #16
 800b988:	af00      	add	r7, sp, #0
 800b98a:	6078      	str	r0, [r7, #4]
 800b98c:	460b      	mov	r3, r1
 800b98e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b990:	2300      	movs	r3, #0
 800b992:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b994:	2300      	movs	r3, #0
 800b996:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800b99e:	78fa      	ldrb	r2, [r7, #3]
 800b9a0:	4611      	mov	r1, r2
 800b9a2:	4618      	mov	r0, r3
 800b9a4:	f7f9 fd01 	bl	80053aa <HAL_PCD_SetAddress>
 800b9a8:	4603      	mov	r3, r0
 800b9aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ac:	7bfb      	ldrb	r3, [r7, #15]
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f000 f862 	bl	800ba78 <USBD_Get_USB_Status>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800b9b8:	7bbb      	ldrb	r3, [r7, #14]
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3710      	adds	r7, #16
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800b9c2:	b580      	push	{r7, lr}
 800b9c4:	b086      	sub	sp, #24
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	60f8      	str	r0, [r7, #12]
 800b9ca:	607a      	str	r2, [r7, #4]
 800b9cc:	603b      	str	r3, [r7, #0]
 800b9ce:	460b      	mov	r3, r1
 800b9d0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800b9d2:	2300      	movs	r3, #0
 800b9d4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800b9d6:	2300      	movs	r3, #0
 800b9d8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800b9e0:	7af9      	ldrb	r1, [r7, #11]
 800b9e2:	683b      	ldr	r3, [r7, #0]
 800b9e4:	687a      	ldr	r2, [r7, #4]
 800b9e6:	f7f9 fe02 	bl	80055ee <HAL_PCD_EP_Transmit>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800b9ee:	7dfb      	ldrb	r3, [r7, #23]
 800b9f0:	4618      	mov	r0, r3
 800b9f2:	f000 f841 	bl	800ba78 <USBD_Get_USB_Status>
 800b9f6:	4603      	mov	r3, r0
 800b9f8:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800b9fa:	7dbb      	ldrb	r3, [r7, #22]
}
 800b9fc:	4618      	mov	r0, r3
 800b9fe:	3718      	adds	r7, #24
 800ba00:	46bd      	mov	sp, r7
 800ba02:	bd80      	pop	{r7, pc}

0800ba04 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	b086      	sub	sp, #24
 800ba08:	af00      	add	r7, sp, #0
 800ba0a:	60f8      	str	r0, [r7, #12]
 800ba0c:	607a      	str	r2, [r7, #4]
 800ba0e:	603b      	str	r3, [r7, #0]
 800ba10:	460b      	mov	r3, r1
 800ba12:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ba14:	2300      	movs	r3, #0
 800ba16:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba18:	2300      	movs	r3, #0
 800ba1a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800ba22:	7af9      	ldrb	r1, [r7, #11]
 800ba24:	683b      	ldr	r3, [r7, #0]
 800ba26:	687a      	ldr	r2, [r7, #4]
 800ba28:	f7f9 fd96 	bl	8005558 <HAL_PCD_EP_Receive>
 800ba2c:	4603      	mov	r3, r0
 800ba2e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800ba30:	7dfb      	ldrb	r3, [r7, #23]
 800ba32:	4618      	mov	r0, r3
 800ba34:	f000 f820 	bl	800ba78 <USBD_Get_USB_Status>
 800ba38:	4603      	mov	r3, r0
 800ba3a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800ba3c:	7dbb      	ldrb	r3, [r7, #22]
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
	...

0800ba48 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ba48:	b480      	push	{r7}
 800ba4a:	b083      	sub	sp, #12
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ba50:	4b03      	ldr	r3, [pc, #12]	; (800ba60 <USBD_static_malloc+0x18>)
}
 800ba52:	4618      	mov	r0, r3
 800ba54:	370c      	adds	r7, #12
 800ba56:	46bd      	mov	sp, r7
 800ba58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5c:	4770      	bx	lr
 800ba5e:	bf00      	nop
 800ba60:	2000b01c 	.word	0x2000b01c

0800ba64 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]

}
 800ba6c:	bf00      	nop
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	4603      	mov	r3, r0
 800ba80:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ba82:	2300      	movs	r3, #0
 800ba84:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ba86:	79fb      	ldrb	r3, [r7, #7]
 800ba88:	2b03      	cmp	r3, #3
 800ba8a:	d817      	bhi.n	800babc <USBD_Get_USB_Status+0x44>
 800ba8c:	a201      	add	r2, pc, #4	; (adr r2, 800ba94 <USBD_Get_USB_Status+0x1c>)
 800ba8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba92:	bf00      	nop
 800ba94:	0800baa5 	.word	0x0800baa5
 800ba98:	0800baab 	.word	0x0800baab
 800ba9c:	0800bab1 	.word	0x0800bab1
 800baa0:	0800bab7 	.word	0x0800bab7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800baa4:	2300      	movs	r3, #0
 800baa6:	73fb      	strb	r3, [r7, #15]
    break;
 800baa8:	e00b      	b.n	800bac2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800baaa:	2303      	movs	r3, #3
 800baac:	73fb      	strb	r3, [r7, #15]
    break;
 800baae:	e008      	b.n	800bac2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800bab0:	2301      	movs	r3, #1
 800bab2:	73fb      	strb	r3, [r7, #15]
    break;
 800bab4:	e005      	b.n	800bac2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800bab6:	2303      	movs	r3, #3
 800bab8:	73fb      	strb	r3, [r7, #15]
    break;
 800baba:	e002      	b.n	800bac2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800babc:	2303      	movs	r3, #3
 800babe:	73fb      	strb	r3, [r7, #15]
    break;
 800bac0:	bf00      	nop
  }
  return usb_status;
 800bac2:	7bfb      	ldrb	r3, [r7, #15]
}
 800bac4:	4618      	mov	r0, r3
 800bac6:	3714      	adds	r7, #20
 800bac8:	46bd      	mov	sp, r7
 800baca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bace:	4770      	bx	lr

0800bad0 <exit>:
 800bad0:	b508      	push	{r3, lr}
 800bad2:	4b06      	ldr	r3, [pc, #24]	; (800baec <exit+0x1c>)
 800bad4:	4604      	mov	r4, r0
 800bad6:	b113      	cbz	r3, 800bade <exit+0xe>
 800bad8:	2100      	movs	r1, #0
 800bada:	f3af 8000 	nop.w
 800bade:	4b04      	ldr	r3, [pc, #16]	; (800baf0 <exit+0x20>)
 800bae0:	681b      	ldr	r3, [r3, #0]
 800bae2:	b103      	cbz	r3, 800bae6 <exit+0x16>
 800bae4:	4798      	blx	r3
 800bae6:	4620      	mov	r0, r4
 800bae8:	f7f7 faf4 	bl	80030d4 <_exit>
 800baec:	00000000 	.word	0x00000000
 800baf0:	2000b170 	.word	0x2000b170

0800baf4 <sbrk_aligned>:
 800baf4:	b570      	push	{r4, r5, r6, lr}
 800baf6:	4e0e      	ldr	r6, [pc, #56]	; (800bb30 <sbrk_aligned+0x3c>)
 800baf8:	460c      	mov	r4, r1
 800bafa:	6831      	ldr	r1, [r6, #0]
 800bafc:	4605      	mov	r5, r0
 800bafe:	b911      	cbnz	r1, 800bb06 <sbrk_aligned+0x12>
 800bb00:	f000 fb38 	bl	800c174 <_sbrk_r>
 800bb04:	6030      	str	r0, [r6, #0]
 800bb06:	4621      	mov	r1, r4
 800bb08:	4628      	mov	r0, r5
 800bb0a:	f000 fb33 	bl	800c174 <_sbrk_r>
 800bb0e:	1c43      	adds	r3, r0, #1
 800bb10:	d00a      	beq.n	800bb28 <sbrk_aligned+0x34>
 800bb12:	1cc4      	adds	r4, r0, #3
 800bb14:	f024 0403 	bic.w	r4, r4, #3
 800bb18:	42a0      	cmp	r0, r4
 800bb1a:	d007      	beq.n	800bb2c <sbrk_aligned+0x38>
 800bb1c:	1a21      	subs	r1, r4, r0
 800bb1e:	4628      	mov	r0, r5
 800bb20:	f000 fb28 	bl	800c174 <_sbrk_r>
 800bb24:	3001      	adds	r0, #1
 800bb26:	d101      	bne.n	800bb2c <sbrk_aligned+0x38>
 800bb28:	f04f 34ff 	mov.w	r4, #4294967295
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	bd70      	pop	{r4, r5, r6, pc}
 800bb30:	2000b034 	.word	0x2000b034

0800bb34 <_malloc_r>:
 800bb34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb38:	1ccd      	adds	r5, r1, #3
 800bb3a:	f025 0503 	bic.w	r5, r5, #3
 800bb3e:	3508      	adds	r5, #8
 800bb40:	2d0c      	cmp	r5, #12
 800bb42:	bf38      	it	cc
 800bb44:	250c      	movcc	r5, #12
 800bb46:	2d00      	cmp	r5, #0
 800bb48:	4607      	mov	r7, r0
 800bb4a:	db01      	blt.n	800bb50 <_malloc_r+0x1c>
 800bb4c:	42a9      	cmp	r1, r5
 800bb4e:	d905      	bls.n	800bb5c <_malloc_r+0x28>
 800bb50:	230c      	movs	r3, #12
 800bb52:	603b      	str	r3, [r7, #0]
 800bb54:	2600      	movs	r6, #0
 800bb56:	4630      	mov	r0, r6
 800bb58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bb5c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800bc30 <_malloc_r+0xfc>
 800bb60:	f000 f868 	bl	800bc34 <__malloc_lock>
 800bb64:	f8d8 3000 	ldr.w	r3, [r8]
 800bb68:	461c      	mov	r4, r3
 800bb6a:	bb5c      	cbnz	r4, 800bbc4 <_malloc_r+0x90>
 800bb6c:	4629      	mov	r1, r5
 800bb6e:	4638      	mov	r0, r7
 800bb70:	f7ff ffc0 	bl	800baf4 <sbrk_aligned>
 800bb74:	1c43      	adds	r3, r0, #1
 800bb76:	4604      	mov	r4, r0
 800bb78:	d155      	bne.n	800bc26 <_malloc_r+0xf2>
 800bb7a:	f8d8 4000 	ldr.w	r4, [r8]
 800bb7e:	4626      	mov	r6, r4
 800bb80:	2e00      	cmp	r6, #0
 800bb82:	d145      	bne.n	800bc10 <_malloc_r+0xdc>
 800bb84:	2c00      	cmp	r4, #0
 800bb86:	d048      	beq.n	800bc1a <_malloc_r+0xe6>
 800bb88:	6823      	ldr	r3, [r4, #0]
 800bb8a:	4631      	mov	r1, r6
 800bb8c:	4638      	mov	r0, r7
 800bb8e:	eb04 0903 	add.w	r9, r4, r3
 800bb92:	f000 faef 	bl	800c174 <_sbrk_r>
 800bb96:	4581      	cmp	r9, r0
 800bb98:	d13f      	bne.n	800bc1a <_malloc_r+0xe6>
 800bb9a:	6821      	ldr	r1, [r4, #0]
 800bb9c:	1a6d      	subs	r5, r5, r1
 800bb9e:	4629      	mov	r1, r5
 800bba0:	4638      	mov	r0, r7
 800bba2:	f7ff ffa7 	bl	800baf4 <sbrk_aligned>
 800bba6:	3001      	adds	r0, #1
 800bba8:	d037      	beq.n	800bc1a <_malloc_r+0xe6>
 800bbaa:	6823      	ldr	r3, [r4, #0]
 800bbac:	442b      	add	r3, r5
 800bbae:	6023      	str	r3, [r4, #0]
 800bbb0:	f8d8 3000 	ldr.w	r3, [r8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d038      	beq.n	800bc2a <_malloc_r+0xf6>
 800bbb8:	685a      	ldr	r2, [r3, #4]
 800bbba:	42a2      	cmp	r2, r4
 800bbbc:	d12b      	bne.n	800bc16 <_malloc_r+0xe2>
 800bbbe:	2200      	movs	r2, #0
 800bbc0:	605a      	str	r2, [r3, #4]
 800bbc2:	e00f      	b.n	800bbe4 <_malloc_r+0xb0>
 800bbc4:	6822      	ldr	r2, [r4, #0]
 800bbc6:	1b52      	subs	r2, r2, r5
 800bbc8:	d41f      	bmi.n	800bc0a <_malloc_r+0xd6>
 800bbca:	2a0b      	cmp	r2, #11
 800bbcc:	d917      	bls.n	800bbfe <_malloc_r+0xca>
 800bbce:	1961      	adds	r1, r4, r5
 800bbd0:	42a3      	cmp	r3, r4
 800bbd2:	6025      	str	r5, [r4, #0]
 800bbd4:	bf18      	it	ne
 800bbd6:	6059      	strne	r1, [r3, #4]
 800bbd8:	6863      	ldr	r3, [r4, #4]
 800bbda:	bf08      	it	eq
 800bbdc:	f8c8 1000 	streq.w	r1, [r8]
 800bbe0:	5162      	str	r2, [r4, r5]
 800bbe2:	604b      	str	r3, [r1, #4]
 800bbe4:	4638      	mov	r0, r7
 800bbe6:	f104 060b 	add.w	r6, r4, #11
 800bbea:	f000 f829 	bl	800bc40 <__malloc_unlock>
 800bbee:	f026 0607 	bic.w	r6, r6, #7
 800bbf2:	1d23      	adds	r3, r4, #4
 800bbf4:	1af2      	subs	r2, r6, r3
 800bbf6:	d0ae      	beq.n	800bb56 <_malloc_r+0x22>
 800bbf8:	1b9b      	subs	r3, r3, r6
 800bbfa:	50a3      	str	r3, [r4, r2]
 800bbfc:	e7ab      	b.n	800bb56 <_malloc_r+0x22>
 800bbfe:	42a3      	cmp	r3, r4
 800bc00:	6862      	ldr	r2, [r4, #4]
 800bc02:	d1dd      	bne.n	800bbc0 <_malloc_r+0x8c>
 800bc04:	f8c8 2000 	str.w	r2, [r8]
 800bc08:	e7ec      	b.n	800bbe4 <_malloc_r+0xb0>
 800bc0a:	4623      	mov	r3, r4
 800bc0c:	6864      	ldr	r4, [r4, #4]
 800bc0e:	e7ac      	b.n	800bb6a <_malloc_r+0x36>
 800bc10:	4634      	mov	r4, r6
 800bc12:	6876      	ldr	r6, [r6, #4]
 800bc14:	e7b4      	b.n	800bb80 <_malloc_r+0x4c>
 800bc16:	4613      	mov	r3, r2
 800bc18:	e7cc      	b.n	800bbb4 <_malloc_r+0x80>
 800bc1a:	230c      	movs	r3, #12
 800bc1c:	603b      	str	r3, [r7, #0]
 800bc1e:	4638      	mov	r0, r7
 800bc20:	f000 f80e 	bl	800bc40 <__malloc_unlock>
 800bc24:	e797      	b.n	800bb56 <_malloc_r+0x22>
 800bc26:	6025      	str	r5, [r4, #0]
 800bc28:	e7dc      	b.n	800bbe4 <_malloc_r+0xb0>
 800bc2a:	605b      	str	r3, [r3, #4]
 800bc2c:	deff      	udf	#255	; 0xff
 800bc2e:	bf00      	nop
 800bc30:	2000b030 	.word	0x2000b030

0800bc34 <__malloc_lock>:
 800bc34:	4801      	ldr	r0, [pc, #4]	; (800bc3c <__malloc_lock+0x8>)
 800bc36:	f000 baea 	b.w	800c20e <__retarget_lock_acquire_recursive>
 800bc3a:	bf00      	nop
 800bc3c:	2000b178 	.word	0x2000b178

0800bc40 <__malloc_unlock>:
 800bc40:	4801      	ldr	r0, [pc, #4]	; (800bc48 <__malloc_unlock+0x8>)
 800bc42:	f000 bae5 	b.w	800c210 <__retarget_lock_release_recursive>
 800bc46:	bf00      	nop
 800bc48:	2000b178 	.word	0x2000b178

0800bc4c <std>:
 800bc4c:	2300      	movs	r3, #0
 800bc4e:	b510      	push	{r4, lr}
 800bc50:	4604      	mov	r4, r0
 800bc52:	e9c0 3300 	strd	r3, r3, [r0]
 800bc56:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bc5a:	6083      	str	r3, [r0, #8]
 800bc5c:	8181      	strh	r1, [r0, #12]
 800bc5e:	6643      	str	r3, [r0, #100]	; 0x64
 800bc60:	81c2      	strh	r2, [r0, #14]
 800bc62:	6183      	str	r3, [r0, #24]
 800bc64:	4619      	mov	r1, r3
 800bc66:	2208      	movs	r2, #8
 800bc68:	305c      	adds	r0, #92	; 0x5c
 800bc6a:	f000 fa03 	bl	800c074 <memset>
 800bc6e:	4b0d      	ldr	r3, [pc, #52]	; (800bca4 <std+0x58>)
 800bc70:	6263      	str	r3, [r4, #36]	; 0x24
 800bc72:	4b0d      	ldr	r3, [pc, #52]	; (800bca8 <std+0x5c>)
 800bc74:	62a3      	str	r3, [r4, #40]	; 0x28
 800bc76:	4b0d      	ldr	r3, [pc, #52]	; (800bcac <std+0x60>)
 800bc78:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bc7a:	4b0d      	ldr	r3, [pc, #52]	; (800bcb0 <std+0x64>)
 800bc7c:	6323      	str	r3, [r4, #48]	; 0x30
 800bc7e:	4b0d      	ldr	r3, [pc, #52]	; (800bcb4 <std+0x68>)
 800bc80:	6224      	str	r4, [r4, #32]
 800bc82:	429c      	cmp	r4, r3
 800bc84:	d006      	beq.n	800bc94 <std+0x48>
 800bc86:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800bc8a:	4294      	cmp	r4, r2
 800bc8c:	d002      	beq.n	800bc94 <std+0x48>
 800bc8e:	33d0      	adds	r3, #208	; 0xd0
 800bc90:	429c      	cmp	r4, r3
 800bc92:	d105      	bne.n	800bca0 <std+0x54>
 800bc94:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bc9c:	f000 bab6 	b.w	800c20c <__retarget_lock_init_recursive>
 800bca0:	bd10      	pop	{r4, pc}
 800bca2:	bf00      	nop
 800bca4:	0800bec5 	.word	0x0800bec5
 800bca8:	0800bee7 	.word	0x0800bee7
 800bcac:	0800bf1f 	.word	0x0800bf1f
 800bcb0:	0800bf43 	.word	0x0800bf43
 800bcb4:	2000b038 	.word	0x2000b038

0800bcb8 <stdio_exit_handler>:
 800bcb8:	4a02      	ldr	r2, [pc, #8]	; (800bcc4 <stdio_exit_handler+0xc>)
 800bcba:	4903      	ldr	r1, [pc, #12]	; (800bcc8 <stdio_exit_handler+0x10>)
 800bcbc:	4803      	ldr	r0, [pc, #12]	; (800bccc <stdio_exit_handler+0x14>)
 800bcbe:	f000 b869 	b.w	800bd94 <_fwalk_sglue>
 800bcc2:	bf00      	nop
 800bcc4:	20000158 	.word	0x20000158
 800bcc8:	0800c9b5 	.word	0x0800c9b5
 800bccc:	20000164 	.word	0x20000164

0800bcd0 <cleanup_stdio>:
 800bcd0:	6841      	ldr	r1, [r0, #4]
 800bcd2:	4b0c      	ldr	r3, [pc, #48]	; (800bd04 <cleanup_stdio+0x34>)
 800bcd4:	4299      	cmp	r1, r3
 800bcd6:	b510      	push	{r4, lr}
 800bcd8:	4604      	mov	r4, r0
 800bcda:	d001      	beq.n	800bce0 <cleanup_stdio+0x10>
 800bcdc:	f000 fe6a 	bl	800c9b4 <_fflush_r>
 800bce0:	68a1      	ldr	r1, [r4, #8]
 800bce2:	4b09      	ldr	r3, [pc, #36]	; (800bd08 <cleanup_stdio+0x38>)
 800bce4:	4299      	cmp	r1, r3
 800bce6:	d002      	beq.n	800bcee <cleanup_stdio+0x1e>
 800bce8:	4620      	mov	r0, r4
 800bcea:	f000 fe63 	bl	800c9b4 <_fflush_r>
 800bcee:	68e1      	ldr	r1, [r4, #12]
 800bcf0:	4b06      	ldr	r3, [pc, #24]	; (800bd0c <cleanup_stdio+0x3c>)
 800bcf2:	4299      	cmp	r1, r3
 800bcf4:	d004      	beq.n	800bd00 <cleanup_stdio+0x30>
 800bcf6:	4620      	mov	r0, r4
 800bcf8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bcfc:	f000 be5a 	b.w	800c9b4 <_fflush_r>
 800bd00:	bd10      	pop	{r4, pc}
 800bd02:	bf00      	nop
 800bd04:	2000b038 	.word	0x2000b038
 800bd08:	2000b0a0 	.word	0x2000b0a0
 800bd0c:	2000b108 	.word	0x2000b108

0800bd10 <global_stdio_init.part.0>:
 800bd10:	b510      	push	{r4, lr}
 800bd12:	4b0b      	ldr	r3, [pc, #44]	; (800bd40 <global_stdio_init.part.0+0x30>)
 800bd14:	4c0b      	ldr	r4, [pc, #44]	; (800bd44 <global_stdio_init.part.0+0x34>)
 800bd16:	4a0c      	ldr	r2, [pc, #48]	; (800bd48 <global_stdio_init.part.0+0x38>)
 800bd18:	601a      	str	r2, [r3, #0]
 800bd1a:	4620      	mov	r0, r4
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	2104      	movs	r1, #4
 800bd20:	f7ff ff94 	bl	800bc4c <std>
 800bd24:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800bd28:	2201      	movs	r2, #1
 800bd2a:	2109      	movs	r1, #9
 800bd2c:	f7ff ff8e 	bl	800bc4c <std>
 800bd30:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800bd34:	2202      	movs	r2, #2
 800bd36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd3a:	2112      	movs	r1, #18
 800bd3c:	f7ff bf86 	b.w	800bc4c <std>
 800bd40:	2000b170 	.word	0x2000b170
 800bd44:	2000b038 	.word	0x2000b038
 800bd48:	0800bcb9 	.word	0x0800bcb9

0800bd4c <__sfp_lock_acquire>:
 800bd4c:	4801      	ldr	r0, [pc, #4]	; (800bd54 <__sfp_lock_acquire+0x8>)
 800bd4e:	f000 ba5e 	b.w	800c20e <__retarget_lock_acquire_recursive>
 800bd52:	bf00      	nop
 800bd54:	2000b179 	.word	0x2000b179

0800bd58 <__sfp_lock_release>:
 800bd58:	4801      	ldr	r0, [pc, #4]	; (800bd60 <__sfp_lock_release+0x8>)
 800bd5a:	f000 ba59 	b.w	800c210 <__retarget_lock_release_recursive>
 800bd5e:	bf00      	nop
 800bd60:	2000b179 	.word	0x2000b179

0800bd64 <__sinit>:
 800bd64:	b510      	push	{r4, lr}
 800bd66:	4604      	mov	r4, r0
 800bd68:	f7ff fff0 	bl	800bd4c <__sfp_lock_acquire>
 800bd6c:	6a23      	ldr	r3, [r4, #32]
 800bd6e:	b11b      	cbz	r3, 800bd78 <__sinit+0x14>
 800bd70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bd74:	f7ff bff0 	b.w	800bd58 <__sfp_lock_release>
 800bd78:	4b04      	ldr	r3, [pc, #16]	; (800bd8c <__sinit+0x28>)
 800bd7a:	6223      	str	r3, [r4, #32]
 800bd7c:	4b04      	ldr	r3, [pc, #16]	; (800bd90 <__sinit+0x2c>)
 800bd7e:	681b      	ldr	r3, [r3, #0]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d1f5      	bne.n	800bd70 <__sinit+0xc>
 800bd84:	f7ff ffc4 	bl	800bd10 <global_stdio_init.part.0>
 800bd88:	e7f2      	b.n	800bd70 <__sinit+0xc>
 800bd8a:	bf00      	nop
 800bd8c:	0800bcd1 	.word	0x0800bcd1
 800bd90:	2000b170 	.word	0x2000b170

0800bd94 <_fwalk_sglue>:
 800bd94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bd98:	4607      	mov	r7, r0
 800bd9a:	4688      	mov	r8, r1
 800bd9c:	4614      	mov	r4, r2
 800bd9e:	2600      	movs	r6, #0
 800bda0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bda4:	f1b9 0901 	subs.w	r9, r9, #1
 800bda8:	d505      	bpl.n	800bdb6 <_fwalk_sglue+0x22>
 800bdaa:	6824      	ldr	r4, [r4, #0]
 800bdac:	2c00      	cmp	r4, #0
 800bdae:	d1f7      	bne.n	800bda0 <_fwalk_sglue+0xc>
 800bdb0:	4630      	mov	r0, r6
 800bdb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdb6:	89ab      	ldrh	r3, [r5, #12]
 800bdb8:	2b01      	cmp	r3, #1
 800bdba:	d907      	bls.n	800bdcc <_fwalk_sglue+0x38>
 800bdbc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bdc0:	3301      	adds	r3, #1
 800bdc2:	d003      	beq.n	800bdcc <_fwalk_sglue+0x38>
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	4638      	mov	r0, r7
 800bdc8:	47c0      	blx	r8
 800bdca:	4306      	orrs	r6, r0
 800bdcc:	3568      	adds	r5, #104	; 0x68
 800bdce:	e7e9      	b.n	800bda4 <_fwalk_sglue+0x10>

0800bdd0 <_fwrite_r>:
 800bdd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bdd4:	9c08      	ldr	r4, [sp, #32]
 800bdd6:	468a      	mov	sl, r1
 800bdd8:	4690      	mov	r8, r2
 800bdda:	fb02 f903 	mul.w	r9, r2, r3
 800bdde:	4606      	mov	r6, r0
 800bde0:	b118      	cbz	r0, 800bdea <_fwrite_r+0x1a>
 800bde2:	6a03      	ldr	r3, [r0, #32]
 800bde4:	b90b      	cbnz	r3, 800bdea <_fwrite_r+0x1a>
 800bde6:	f7ff ffbd 	bl	800bd64 <__sinit>
 800bdea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bdec:	07dd      	lsls	r5, r3, #31
 800bdee:	d405      	bmi.n	800bdfc <_fwrite_r+0x2c>
 800bdf0:	89a3      	ldrh	r3, [r4, #12]
 800bdf2:	0598      	lsls	r0, r3, #22
 800bdf4:	d402      	bmi.n	800bdfc <_fwrite_r+0x2c>
 800bdf6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdf8:	f000 fa09 	bl	800c20e <__retarget_lock_acquire_recursive>
 800bdfc:	89a3      	ldrh	r3, [r4, #12]
 800bdfe:	0719      	lsls	r1, r3, #28
 800be00:	d516      	bpl.n	800be30 <_fwrite_r+0x60>
 800be02:	6923      	ldr	r3, [r4, #16]
 800be04:	b1a3      	cbz	r3, 800be30 <_fwrite_r+0x60>
 800be06:	2500      	movs	r5, #0
 800be08:	454d      	cmp	r5, r9
 800be0a:	d01f      	beq.n	800be4c <_fwrite_r+0x7c>
 800be0c:	68a7      	ldr	r7, [r4, #8]
 800be0e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800be12:	3f01      	subs	r7, #1
 800be14:	2f00      	cmp	r7, #0
 800be16:	60a7      	str	r7, [r4, #8]
 800be18:	da04      	bge.n	800be24 <_fwrite_r+0x54>
 800be1a:	69a3      	ldr	r3, [r4, #24]
 800be1c:	429f      	cmp	r7, r3
 800be1e:	db0f      	blt.n	800be40 <_fwrite_r+0x70>
 800be20:	290a      	cmp	r1, #10
 800be22:	d00d      	beq.n	800be40 <_fwrite_r+0x70>
 800be24:	6823      	ldr	r3, [r4, #0]
 800be26:	1c5a      	adds	r2, r3, #1
 800be28:	6022      	str	r2, [r4, #0]
 800be2a:	7019      	strb	r1, [r3, #0]
 800be2c:	3501      	adds	r5, #1
 800be2e:	e7eb      	b.n	800be08 <_fwrite_r+0x38>
 800be30:	4621      	mov	r1, r4
 800be32:	4630      	mov	r0, r6
 800be34:	f000 f8c6 	bl	800bfc4 <__swsetup_r>
 800be38:	2800      	cmp	r0, #0
 800be3a:	d0e4      	beq.n	800be06 <_fwrite_r+0x36>
 800be3c:	2500      	movs	r5, #0
 800be3e:	e005      	b.n	800be4c <_fwrite_r+0x7c>
 800be40:	4622      	mov	r2, r4
 800be42:	4630      	mov	r0, r6
 800be44:	f000 f881 	bl	800bf4a <__swbuf_r>
 800be48:	3001      	adds	r0, #1
 800be4a:	d1ef      	bne.n	800be2c <_fwrite_r+0x5c>
 800be4c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800be4e:	07da      	lsls	r2, r3, #31
 800be50:	d405      	bmi.n	800be5e <_fwrite_r+0x8e>
 800be52:	89a3      	ldrh	r3, [r4, #12]
 800be54:	059b      	lsls	r3, r3, #22
 800be56:	d402      	bmi.n	800be5e <_fwrite_r+0x8e>
 800be58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800be5a:	f000 f9d9 	bl	800c210 <__retarget_lock_release_recursive>
 800be5e:	fbb5 f0f8 	udiv	r0, r5, r8
 800be62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800be68 <fwrite>:
 800be68:	b507      	push	{r0, r1, r2, lr}
 800be6a:	9300      	str	r3, [sp, #0]
 800be6c:	4613      	mov	r3, r2
 800be6e:	460a      	mov	r2, r1
 800be70:	4601      	mov	r1, r0
 800be72:	4803      	ldr	r0, [pc, #12]	; (800be80 <fwrite+0x18>)
 800be74:	6800      	ldr	r0, [r0, #0]
 800be76:	f7ff ffab 	bl	800bdd0 <_fwrite_r>
 800be7a:	b003      	add	sp, #12
 800be7c:	f85d fb04 	ldr.w	pc, [sp], #4
 800be80:	200001b0 	.word	0x200001b0

0800be84 <siprintf>:
 800be84:	b40e      	push	{r1, r2, r3}
 800be86:	b500      	push	{lr}
 800be88:	b09c      	sub	sp, #112	; 0x70
 800be8a:	ab1d      	add	r3, sp, #116	; 0x74
 800be8c:	9002      	str	r0, [sp, #8]
 800be8e:	9006      	str	r0, [sp, #24]
 800be90:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800be94:	4809      	ldr	r0, [pc, #36]	; (800bebc <siprintf+0x38>)
 800be96:	9107      	str	r1, [sp, #28]
 800be98:	9104      	str	r1, [sp, #16]
 800be9a:	4909      	ldr	r1, [pc, #36]	; (800bec0 <siprintf+0x3c>)
 800be9c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bea0:	9105      	str	r1, [sp, #20]
 800bea2:	6800      	ldr	r0, [r0, #0]
 800bea4:	9301      	str	r3, [sp, #4]
 800bea6:	a902      	add	r1, sp, #8
 800bea8:	f000 fa70 	bl	800c38c <_svfiprintf_r>
 800beac:	9b02      	ldr	r3, [sp, #8]
 800beae:	2200      	movs	r2, #0
 800beb0:	701a      	strb	r2, [r3, #0]
 800beb2:	b01c      	add	sp, #112	; 0x70
 800beb4:	f85d eb04 	ldr.w	lr, [sp], #4
 800beb8:	b003      	add	sp, #12
 800beba:	4770      	bx	lr
 800bebc:	200001b0 	.word	0x200001b0
 800bec0:	ffff0208 	.word	0xffff0208

0800bec4 <__sread>:
 800bec4:	b510      	push	{r4, lr}
 800bec6:	460c      	mov	r4, r1
 800bec8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800becc:	f000 f940 	bl	800c150 <_read_r>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	bfab      	itete	ge
 800bed4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800bed6:	89a3      	ldrhlt	r3, [r4, #12]
 800bed8:	181b      	addge	r3, r3, r0
 800beda:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bede:	bfac      	ite	ge
 800bee0:	6563      	strge	r3, [r4, #84]	; 0x54
 800bee2:	81a3      	strhlt	r3, [r4, #12]
 800bee4:	bd10      	pop	{r4, pc}

0800bee6 <__swrite>:
 800bee6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800beea:	461f      	mov	r7, r3
 800beec:	898b      	ldrh	r3, [r1, #12]
 800beee:	05db      	lsls	r3, r3, #23
 800bef0:	4605      	mov	r5, r0
 800bef2:	460c      	mov	r4, r1
 800bef4:	4616      	mov	r6, r2
 800bef6:	d505      	bpl.n	800bf04 <__swrite+0x1e>
 800bef8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800befc:	2302      	movs	r3, #2
 800befe:	2200      	movs	r2, #0
 800bf00:	f000 f914 	bl	800c12c <_lseek_r>
 800bf04:	89a3      	ldrh	r3, [r4, #12]
 800bf06:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bf0a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bf0e:	81a3      	strh	r3, [r4, #12]
 800bf10:	4632      	mov	r2, r6
 800bf12:	463b      	mov	r3, r7
 800bf14:	4628      	mov	r0, r5
 800bf16:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bf1a:	f000 b93b 	b.w	800c194 <_write_r>

0800bf1e <__sseek>:
 800bf1e:	b510      	push	{r4, lr}
 800bf20:	460c      	mov	r4, r1
 800bf22:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf26:	f000 f901 	bl	800c12c <_lseek_r>
 800bf2a:	1c43      	adds	r3, r0, #1
 800bf2c:	89a3      	ldrh	r3, [r4, #12]
 800bf2e:	bf15      	itete	ne
 800bf30:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf32:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf36:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf3a:	81a3      	strheq	r3, [r4, #12]
 800bf3c:	bf18      	it	ne
 800bf3e:	81a3      	strhne	r3, [r4, #12]
 800bf40:	bd10      	pop	{r4, pc}

0800bf42 <__sclose>:
 800bf42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf46:	f000 b8e1 	b.w	800c10c <_close_r>

0800bf4a <__swbuf_r>:
 800bf4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf4c:	460e      	mov	r6, r1
 800bf4e:	4614      	mov	r4, r2
 800bf50:	4605      	mov	r5, r0
 800bf52:	b118      	cbz	r0, 800bf5c <__swbuf_r+0x12>
 800bf54:	6a03      	ldr	r3, [r0, #32]
 800bf56:	b90b      	cbnz	r3, 800bf5c <__swbuf_r+0x12>
 800bf58:	f7ff ff04 	bl	800bd64 <__sinit>
 800bf5c:	69a3      	ldr	r3, [r4, #24]
 800bf5e:	60a3      	str	r3, [r4, #8]
 800bf60:	89a3      	ldrh	r3, [r4, #12]
 800bf62:	071a      	lsls	r2, r3, #28
 800bf64:	d525      	bpl.n	800bfb2 <__swbuf_r+0x68>
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	b31b      	cbz	r3, 800bfb2 <__swbuf_r+0x68>
 800bf6a:	6823      	ldr	r3, [r4, #0]
 800bf6c:	6922      	ldr	r2, [r4, #16]
 800bf6e:	1a98      	subs	r0, r3, r2
 800bf70:	6963      	ldr	r3, [r4, #20]
 800bf72:	b2f6      	uxtb	r6, r6
 800bf74:	4283      	cmp	r3, r0
 800bf76:	4637      	mov	r7, r6
 800bf78:	dc04      	bgt.n	800bf84 <__swbuf_r+0x3a>
 800bf7a:	4621      	mov	r1, r4
 800bf7c:	4628      	mov	r0, r5
 800bf7e:	f000 fd19 	bl	800c9b4 <_fflush_r>
 800bf82:	b9e0      	cbnz	r0, 800bfbe <__swbuf_r+0x74>
 800bf84:	68a3      	ldr	r3, [r4, #8]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	60a3      	str	r3, [r4, #8]
 800bf8a:	6823      	ldr	r3, [r4, #0]
 800bf8c:	1c5a      	adds	r2, r3, #1
 800bf8e:	6022      	str	r2, [r4, #0]
 800bf90:	701e      	strb	r6, [r3, #0]
 800bf92:	6962      	ldr	r2, [r4, #20]
 800bf94:	1c43      	adds	r3, r0, #1
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d004      	beq.n	800bfa4 <__swbuf_r+0x5a>
 800bf9a:	89a3      	ldrh	r3, [r4, #12]
 800bf9c:	07db      	lsls	r3, r3, #31
 800bf9e:	d506      	bpl.n	800bfae <__swbuf_r+0x64>
 800bfa0:	2e0a      	cmp	r6, #10
 800bfa2:	d104      	bne.n	800bfae <__swbuf_r+0x64>
 800bfa4:	4621      	mov	r1, r4
 800bfa6:	4628      	mov	r0, r5
 800bfa8:	f000 fd04 	bl	800c9b4 <_fflush_r>
 800bfac:	b938      	cbnz	r0, 800bfbe <__swbuf_r+0x74>
 800bfae:	4638      	mov	r0, r7
 800bfb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bfb2:	4621      	mov	r1, r4
 800bfb4:	4628      	mov	r0, r5
 800bfb6:	f000 f805 	bl	800bfc4 <__swsetup_r>
 800bfba:	2800      	cmp	r0, #0
 800bfbc:	d0d5      	beq.n	800bf6a <__swbuf_r+0x20>
 800bfbe:	f04f 37ff 	mov.w	r7, #4294967295
 800bfc2:	e7f4      	b.n	800bfae <__swbuf_r+0x64>

0800bfc4 <__swsetup_r>:
 800bfc4:	b538      	push	{r3, r4, r5, lr}
 800bfc6:	4b2a      	ldr	r3, [pc, #168]	; (800c070 <__swsetup_r+0xac>)
 800bfc8:	4605      	mov	r5, r0
 800bfca:	6818      	ldr	r0, [r3, #0]
 800bfcc:	460c      	mov	r4, r1
 800bfce:	b118      	cbz	r0, 800bfd8 <__swsetup_r+0x14>
 800bfd0:	6a03      	ldr	r3, [r0, #32]
 800bfd2:	b90b      	cbnz	r3, 800bfd8 <__swsetup_r+0x14>
 800bfd4:	f7ff fec6 	bl	800bd64 <__sinit>
 800bfd8:	89a3      	ldrh	r3, [r4, #12]
 800bfda:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bfde:	0718      	lsls	r0, r3, #28
 800bfe0:	d422      	bmi.n	800c028 <__swsetup_r+0x64>
 800bfe2:	06d9      	lsls	r1, r3, #27
 800bfe4:	d407      	bmi.n	800bff6 <__swsetup_r+0x32>
 800bfe6:	2309      	movs	r3, #9
 800bfe8:	602b      	str	r3, [r5, #0]
 800bfea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bfee:	81a3      	strh	r3, [r4, #12]
 800bff0:	f04f 30ff 	mov.w	r0, #4294967295
 800bff4:	e034      	b.n	800c060 <__swsetup_r+0x9c>
 800bff6:	0758      	lsls	r0, r3, #29
 800bff8:	d512      	bpl.n	800c020 <__swsetup_r+0x5c>
 800bffa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bffc:	b141      	cbz	r1, 800c010 <__swsetup_r+0x4c>
 800bffe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c002:	4299      	cmp	r1, r3
 800c004:	d002      	beq.n	800c00c <__swsetup_r+0x48>
 800c006:	4628      	mov	r0, r5
 800c008:	f000 f91a 	bl	800c240 <_free_r>
 800c00c:	2300      	movs	r3, #0
 800c00e:	6363      	str	r3, [r4, #52]	; 0x34
 800c010:	89a3      	ldrh	r3, [r4, #12]
 800c012:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c016:	81a3      	strh	r3, [r4, #12]
 800c018:	2300      	movs	r3, #0
 800c01a:	6063      	str	r3, [r4, #4]
 800c01c:	6923      	ldr	r3, [r4, #16]
 800c01e:	6023      	str	r3, [r4, #0]
 800c020:	89a3      	ldrh	r3, [r4, #12]
 800c022:	f043 0308 	orr.w	r3, r3, #8
 800c026:	81a3      	strh	r3, [r4, #12]
 800c028:	6923      	ldr	r3, [r4, #16]
 800c02a:	b94b      	cbnz	r3, 800c040 <__swsetup_r+0x7c>
 800c02c:	89a3      	ldrh	r3, [r4, #12]
 800c02e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c032:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c036:	d003      	beq.n	800c040 <__swsetup_r+0x7c>
 800c038:	4621      	mov	r1, r4
 800c03a:	4628      	mov	r0, r5
 800c03c:	f000 fd08 	bl	800ca50 <__smakebuf_r>
 800c040:	89a0      	ldrh	r0, [r4, #12]
 800c042:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c046:	f010 0301 	ands.w	r3, r0, #1
 800c04a:	d00a      	beq.n	800c062 <__swsetup_r+0x9e>
 800c04c:	2300      	movs	r3, #0
 800c04e:	60a3      	str	r3, [r4, #8]
 800c050:	6963      	ldr	r3, [r4, #20]
 800c052:	425b      	negs	r3, r3
 800c054:	61a3      	str	r3, [r4, #24]
 800c056:	6923      	ldr	r3, [r4, #16]
 800c058:	b943      	cbnz	r3, 800c06c <__swsetup_r+0xa8>
 800c05a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c05e:	d1c4      	bne.n	800bfea <__swsetup_r+0x26>
 800c060:	bd38      	pop	{r3, r4, r5, pc}
 800c062:	0781      	lsls	r1, r0, #30
 800c064:	bf58      	it	pl
 800c066:	6963      	ldrpl	r3, [r4, #20]
 800c068:	60a3      	str	r3, [r4, #8]
 800c06a:	e7f4      	b.n	800c056 <__swsetup_r+0x92>
 800c06c:	2000      	movs	r0, #0
 800c06e:	e7f7      	b.n	800c060 <__swsetup_r+0x9c>
 800c070:	200001b0 	.word	0x200001b0

0800c074 <memset>:
 800c074:	4402      	add	r2, r0
 800c076:	4603      	mov	r3, r0
 800c078:	4293      	cmp	r3, r2
 800c07a:	d100      	bne.n	800c07e <memset+0xa>
 800c07c:	4770      	bx	lr
 800c07e:	f803 1b01 	strb.w	r1, [r3], #1
 800c082:	e7f9      	b.n	800c078 <memset+0x4>

0800c084 <strcat>:
 800c084:	b510      	push	{r4, lr}
 800c086:	4602      	mov	r2, r0
 800c088:	7814      	ldrb	r4, [r2, #0]
 800c08a:	4613      	mov	r3, r2
 800c08c:	3201      	adds	r2, #1
 800c08e:	2c00      	cmp	r4, #0
 800c090:	d1fa      	bne.n	800c088 <strcat+0x4>
 800c092:	3b01      	subs	r3, #1
 800c094:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c098:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c09c:	2a00      	cmp	r2, #0
 800c09e:	d1f9      	bne.n	800c094 <strcat+0x10>
 800c0a0:	bd10      	pop	{r4, pc}
	...

0800c0a4 <strdup>:
 800c0a4:	4b02      	ldr	r3, [pc, #8]	; (800c0b0 <strdup+0xc>)
 800c0a6:	4601      	mov	r1, r0
 800c0a8:	6818      	ldr	r0, [r3, #0]
 800c0aa:	f000 b803 	b.w	800c0b4 <_strdup_r>
 800c0ae:	bf00      	nop
 800c0b0:	200001b0 	.word	0x200001b0

0800c0b4 <_strdup_r>:
 800c0b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	460d      	mov	r5, r1
 800c0bc:	f7f4 f89a 	bl	80001f4 <strlen>
 800c0c0:	1c42      	adds	r2, r0, #1
 800c0c2:	4611      	mov	r1, r2
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	9201      	str	r2, [sp, #4]
 800c0c8:	f7ff fd34 	bl	800bb34 <_malloc_r>
 800c0cc:	4604      	mov	r4, r0
 800c0ce:	b118      	cbz	r0, 800c0d8 <_strdup_r+0x24>
 800c0d0:	9a01      	ldr	r2, [sp, #4]
 800c0d2:	4629      	mov	r1, r5
 800c0d4:	f000 f8a5 	bl	800c222 <memcpy>
 800c0d8:	4620      	mov	r0, r4
 800c0da:	b003      	add	sp, #12
 800c0dc:	bd30      	pop	{r4, r5, pc}

0800c0de <strstr>:
 800c0de:	780a      	ldrb	r2, [r1, #0]
 800c0e0:	b570      	push	{r4, r5, r6, lr}
 800c0e2:	b96a      	cbnz	r2, 800c100 <strstr+0x22>
 800c0e4:	bd70      	pop	{r4, r5, r6, pc}
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d109      	bne.n	800c0fe <strstr+0x20>
 800c0ea:	460c      	mov	r4, r1
 800c0ec:	4605      	mov	r5, r0
 800c0ee:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d0f6      	beq.n	800c0e4 <strstr+0x6>
 800c0f6:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800c0fa:	429e      	cmp	r6, r3
 800c0fc:	d0f7      	beq.n	800c0ee <strstr+0x10>
 800c0fe:	3001      	adds	r0, #1
 800c100:	7803      	ldrb	r3, [r0, #0]
 800c102:	2b00      	cmp	r3, #0
 800c104:	d1ef      	bne.n	800c0e6 <strstr+0x8>
 800c106:	4618      	mov	r0, r3
 800c108:	e7ec      	b.n	800c0e4 <strstr+0x6>
	...

0800c10c <_close_r>:
 800c10c:	b538      	push	{r3, r4, r5, lr}
 800c10e:	4d06      	ldr	r5, [pc, #24]	; (800c128 <_close_r+0x1c>)
 800c110:	2300      	movs	r3, #0
 800c112:	4604      	mov	r4, r0
 800c114:	4608      	mov	r0, r1
 800c116:	602b      	str	r3, [r5, #0]
 800c118:	f7f7 f81f 	bl	800315a <_close>
 800c11c:	1c43      	adds	r3, r0, #1
 800c11e:	d102      	bne.n	800c126 <_close_r+0x1a>
 800c120:	682b      	ldr	r3, [r5, #0]
 800c122:	b103      	cbz	r3, 800c126 <_close_r+0x1a>
 800c124:	6023      	str	r3, [r4, #0]
 800c126:	bd38      	pop	{r3, r4, r5, pc}
 800c128:	2000b174 	.word	0x2000b174

0800c12c <_lseek_r>:
 800c12c:	b538      	push	{r3, r4, r5, lr}
 800c12e:	4d07      	ldr	r5, [pc, #28]	; (800c14c <_lseek_r+0x20>)
 800c130:	4604      	mov	r4, r0
 800c132:	4608      	mov	r0, r1
 800c134:	4611      	mov	r1, r2
 800c136:	2200      	movs	r2, #0
 800c138:	602a      	str	r2, [r5, #0]
 800c13a:	461a      	mov	r2, r3
 800c13c:	f7f7 f834 	bl	80031a8 <_lseek>
 800c140:	1c43      	adds	r3, r0, #1
 800c142:	d102      	bne.n	800c14a <_lseek_r+0x1e>
 800c144:	682b      	ldr	r3, [r5, #0]
 800c146:	b103      	cbz	r3, 800c14a <_lseek_r+0x1e>
 800c148:	6023      	str	r3, [r4, #0]
 800c14a:	bd38      	pop	{r3, r4, r5, pc}
 800c14c:	2000b174 	.word	0x2000b174

0800c150 <_read_r>:
 800c150:	b538      	push	{r3, r4, r5, lr}
 800c152:	4d07      	ldr	r5, [pc, #28]	; (800c170 <_read_r+0x20>)
 800c154:	4604      	mov	r4, r0
 800c156:	4608      	mov	r0, r1
 800c158:	4611      	mov	r1, r2
 800c15a:	2200      	movs	r2, #0
 800c15c:	602a      	str	r2, [r5, #0]
 800c15e:	461a      	mov	r2, r3
 800c160:	f7f6 ffc2 	bl	80030e8 <_read>
 800c164:	1c43      	adds	r3, r0, #1
 800c166:	d102      	bne.n	800c16e <_read_r+0x1e>
 800c168:	682b      	ldr	r3, [r5, #0]
 800c16a:	b103      	cbz	r3, 800c16e <_read_r+0x1e>
 800c16c:	6023      	str	r3, [r4, #0]
 800c16e:	bd38      	pop	{r3, r4, r5, pc}
 800c170:	2000b174 	.word	0x2000b174

0800c174 <_sbrk_r>:
 800c174:	b538      	push	{r3, r4, r5, lr}
 800c176:	4d06      	ldr	r5, [pc, #24]	; (800c190 <_sbrk_r+0x1c>)
 800c178:	2300      	movs	r3, #0
 800c17a:	4604      	mov	r4, r0
 800c17c:	4608      	mov	r0, r1
 800c17e:	602b      	str	r3, [r5, #0]
 800c180:	f7f7 f820 	bl	80031c4 <_sbrk>
 800c184:	1c43      	adds	r3, r0, #1
 800c186:	d102      	bne.n	800c18e <_sbrk_r+0x1a>
 800c188:	682b      	ldr	r3, [r5, #0]
 800c18a:	b103      	cbz	r3, 800c18e <_sbrk_r+0x1a>
 800c18c:	6023      	str	r3, [r4, #0]
 800c18e:	bd38      	pop	{r3, r4, r5, pc}
 800c190:	2000b174 	.word	0x2000b174

0800c194 <_write_r>:
 800c194:	b538      	push	{r3, r4, r5, lr}
 800c196:	4d07      	ldr	r5, [pc, #28]	; (800c1b4 <_write_r+0x20>)
 800c198:	4604      	mov	r4, r0
 800c19a:	4608      	mov	r0, r1
 800c19c:	4611      	mov	r1, r2
 800c19e:	2200      	movs	r2, #0
 800c1a0:	602a      	str	r2, [r5, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	f7f6 ffbd 	bl	8003122 <_write>
 800c1a8:	1c43      	adds	r3, r0, #1
 800c1aa:	d102      	bne.n	800c1b2 <_write_r+0x1e>
 800c1ac:	682b      	ldr	r3, [r5, #0]
 800c1ae:	b103      	cbz	r3, 800c1b2 <_write_r+0x1e>
 800c1b0:	6023      	str	r3, [r4, #0]
 800c1b2:	bd38      	pop	{r3, r4, r5, pc}
 800c1b4:	2000b174 	.word	0x2000b174

0800c1b8 <__errno>:
 800c1b8:	4b01      	ldr	r3, [pc, #4]	; (800c1c0 <__errno+0x8>)
 800c1ba:	6818      	ldr	r0, [r3, #0]
 800c1bc:	4770      	bx	lr
 800c1be:	bf00      	nop
 800c1c0:	200001b0 	.word	0x200001b0

0800c1c4 <__libc_init_array>:
 800c1c4:	b570      	push	{r4, r5, r6, lr}
 800c1c6:	4d0d      	ldr	r5, [pc, #52]	; (800c1fc <__libc_init_array+0x38>)
 800c1c8:	4c0d      	ldr	r4, [pc, #52]	; (800c200 <__libc_init_array+0x3c>)
 800c1ca:	1b64      	subs	r4, r4, r5
 800c1cc:	10a4      	asrs	r4, r4, #2
 800c1ce:	2600      	movs	r6, #0
 800c1d0:	42a6      	cmp	r6, r4
 800c1d2:	d109      	bne.n	800c1e8 <__libc_init_array+0x24>
 800c1d4:	4d0b      	ldr	r5, [pc, #44]	; (800c204 <__libc_init_array+0x40>)
 800c1d6:	4c0c      	ldr	r4, [pc, #48]	; (800c208 <__libc_init_array+0x44>)
 800c1d8:	f000 fcea 	bl	800cbb0 <_init>
 800c1dc:	1b64      	subs	r4, r4, r5
 800c1de:	10a4      	asrs	r4, r4, #2
 800c1e0:	2600      	movs	r6, #0
 800c1e2:	42a6      	cmp	r6, r4
 800c1e4:	d105      	bne.n	800c1f2 <__libc_init_array+0x2e>
 800c1e6:	bd70      	pop	{r4, r5, r6, pc}
 800c1e8:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1ec:	4798      	blx	r3
 800c1ee:	3601      	adds	r6, #1
 800c1f0:	e7ee      	b.n	800c1d0 <__libc_init_array+0xc>
 800c1f2:	f855 3b04 	ldr.w	r3, [r5], #4
 800c1f6:	4798      	blx	r3
 800c1f8:	3601      	adds	r6, #1
 800c1fa:	e7f2      	b.n	800c1e2 <__libc_init_array+0x1e>
 800c1fc:	0800d640 	.word	0x0800d640
 800c200:	0800d640 	.word	0x0800d640
 800c204:	0800d640 	.word	0x0800d640
 800c208:	0800d644 	.word	0x0800d644

0800c20c <__retarget_lock_init_recursive>:
 800c20c:	4770      	bx	lr

0800c20e <__retarget_lock_acquire_recursive>:
 800c20e:	4770      	bx	lr

0800c210 <__retarget_lock_release_recursive>:
 800c210:	4770      	bx	lr

0800c212 <strcpy>:
 800c212:	4603      	mov	r3, r0
 800c214:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c218:	f803 2b01 	strb.w	r2, [r3], #1
 800c21c:	2a00      	cmp	r2, #0
 800c21e:	d1f9      	bne.n	800c214 <strcpy+0x2>
 800c220:	4770      	bx	lr

0800c222 <memcpy>:
 800c222:	440a      	add	r2, r1
 800c224:	4291      	cmp	r1, r2
 800c226:	f100 33ff 	add.w	r3, r0, #4294967295
 800c22a:	d100      	bne.n	800c22e <memcpy+0xc>
 800c22c:	4770      	bx	lr
 800c22e:	b510      	push	{r4, lr}
 800c230:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c234:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c238:	4291      	cmp	r1, r2
 800c23a:	d1f9      	bne.n	800c230 <memcpy+0xe>
 800c23c:	bd10      	pop	{r4, pc}
	...

0800c240 <_free_r>:
 800c240:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c242:	2900      	cmp	r1, #0
 800c244:	d044      	beq.n	800c2d0 <_free_r+0x90>
 800c246:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c24a:	9001      	str	r0, [sp, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	f1a1 0404 	sub.w	r4, r1, #4
 800c252:	bfb8      	it	lt
 800c254:	18e4      	addlt	r4, r4, r3
 800c256:	f7ff fced 	bl	800bc34 <__malloc_lock>
 800c25a:	4a1e      	ldr	r2, [pc, #120]	; (800c2d4 <_free_r+0x94>)
 800c25c:	9801      	ldr	r0, [sp, #4]
 800c25e:	6813      	ldr	r3, [r2, #0]
 800c260:	b933      	cbnz	r3, 800c270 <_free_r+0x30>
 800c262:	6063      	str	r3, [r4, #4]
 800c264:	6014      	str	r4, [r2, #0]
 800c266:	b003      	add	sp, #12
 800c268:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c26c:	f7ff bce8 	b.w	800bc40 <__malloc_unlock>
 800c270:	42a3      	cmp	r3, r4
 800c272:	d908      	bls.n	800c286 <_free_r+0x46>
 800c274:	6825      	ldr	r5, [r4, #0]
 800c276:	1961      	adds	r1, r4, r5
 800c278:	428b      	cmp	r3, r1
 800c27a:	bf01      	itttt	eq
 800c27c:	6819      	ldreq	r1, [r3, #0]
 800c27e:	685b      	ldreq	r3, [r3, #4]
 800c280:	1949      	addeq	r1, r1, r5
 800c282:	6021      	streq	r1, [r4, #0]
 800c284:	e7ed      	b.n	800c262 <_free_r+0x22>
 800c286:	461a      	mov	r2, r3
 800c288:	685b      	ldr	r3, [r3, #4]
 800c28a:	b10b      	cbz	r3, 800c290 <_free_r+0x50>
 800c28c:	42a3      	cmp	r3, r4
 800c28e:	d9fa      	bls.n	800c286 <_free_r+0x46>
 800c290:	6811      	ldr	r1, [r2, #0]
 800c292:	1855      	adds	r5, r2, r1
 800c294:	42a5      	cmp	r5, r4
 800c296:	d10b      	bne.n	800c2b0 <_free_r+0x70>
 800c298:	6824      	ldr	r4, [r4, #0]
 800c29a:	4421      	add	r1, r4
 800c29c:	1854      	adds	r4, r2, r1
 800c29e:	42a3      	cmp	r3, r4
 800c2a0:	6011      	str	r1, [r2, #0]
 800c2a2:	d1e0      	bne.n	800c266 <_free_r+0x26>
 800c2a4:	681c      	ldr	r4, [r3, #0]
 800c2a6:	685b      	ldr	r3, [r3, #4]
 800c2a8:	6053      	str	r3, [r2, #4]
 800c2aa:	440c      	add	r4, r1
 800c2ac:	6014      	str	r4, [r2, #0]
 800c2ae:	e7da      	b.n	800c266 <_free_r+0x26>
 800c2b0:	d902      	bls.n	800c2b8 <_free_r+0x78>
 800c2b2:	230c      	movs	r3, #12
 800c2b4:	6003      	str	r3, [r0, #0]
 800c2b6:	e7d6      	b.n	800c266 <_free_r+0x26>
 800c2b8:	6825      	ldr	r5, [r4, #0]
 800c2ba:	1961      	adds	r1, r4, r5
 800c2bc:	428b      	cmp	r3, r1
 800c2be:	bf04      	itt	eq
 800c2c0:	6819      	ldreq	r1, [r3, #0]
 800c2c2:	685b      	ldreq	r3, [r3, #4]
 800c2c4:	6063      	str	r3, [r4, #4]
 800c2c6:	bf04      	itt	eq
 800c2c8:	1949      	addeq	r1, r1, r5
 800c2ca:	6021      	streq	r1, [r4, #0]
 800c2cc:	6054      	str	r4, [r2, #4]
 800c2ce:	e7ca      	b.n	800c266 <_free_r+0x26>
 800c2d0:	b003      	add	sp, #12
 800c2d2:	bd30      	pop	{r4, r5, pc}
 800c2d4:	2000b030 	.word	0x2000b030

0800c2d8 <__ssputs_r>:
 800c2d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c2dc:	688e      	ldr	r6, [r1, #8]
 800c2de:	461f      	mov	r7, r3
 800c2e0:	42be      	cmp	r6, r7
 800c2e2:	680b      	ldr	r3, [r1, #0]
 800c2e4:	4682      	mov	sl, r0
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	4690      	mov	r8, r2
 800c2ea:	d82c      	bhi.n	800c346 <__ssputs_r+0x6e>
 800c2ec:	898a      	ldrh	r2, [r1, #12]
 800c2ee:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c2f2:	d026      	beq.n	800c342 <__ssputs_r+0x6a>
 800c2f4:	6965      	ldr	r5, [r4, #20]
 800c2f6:	6909      	ldr	r1, [r1, #16]
 800c2f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c2fc:	eba3 0901 	sub.w	r9, r3, r1
 800c300:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c304:	1c7b      	adds	r3, r7, #1
 800c306:	444b      	add	r3, r9
 800c308:	106d      	asrs	r5, r5, #1
 800c30a:	429d      	cmp	r5, r3
 800c30c:	bf38      	it	cc
 800c30e:	461d      	movcc	r5, r3
 800c310:	0553      	lsls	r3, r2, #21
 800c312:	d527      	bpl.n	800c364 <__ssputs_r+0x8c>
 800c314:	4629      	mov	r1, r5
 800c316:	f7ff fc0d 	bl	800bb34 <_malloc_r>
 800c31a:	4606      	mov	r6, r0
 800c31c:	b360      	cbz	r0, 800c378 <__ssputs_r+0xa0>
 800c31e:	6921      	ldr	r1, [r4, #16]
 800c320:	464a      	mov	r2, r9
 800c322:	f7ff ff7e 	bl	800c222 <memcpy>
 800c326:	89a3      	ldrh	r3, [r4, #12]
 800c328:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c32c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c330:	81a3      	strh	r3, [r4, #12]
 800c332:	6126      	str	r6, [r4, #16]
 800c334:	6165      	str	r5, [r4, #20]
 800c336:	444e      	add	r6, r9
 800c338:	eba5 0509 	sub.w	r5, r5, r9
 800c33c:	6026      	str	r6, [r4, #0]
 800c33e:	60a5      	str	r5, [r4, #8]
 800c340:	463e      	mov	r6, r7
 800c342:	42be      	cmp	r6, r7
 800c344:	d900      	bls.n	800c348 <__ssputs_r+0x70>
 800c346:	463e      	mov	r6, r7
 800c348:	6820      	ldr	r0, [r4, #0]
 800c34a:	4632      	mov	r2, r6
 800c34c:	4641      	mov	r1, r8
 800c34e:	f000 fbbb 	bl	800cac8 <memmove>
 800c352:	68a3      	ldr	r3, [r4, #8]
 800c354:	1b9b      	subs	r3, r3, r6
 800c356:	60a3      	str	r3, [r4, #8]
 800c358:	6823      	ldr	r3, [r4, #0]
 800c35a:	4433      	add	r3, r6
 800c35c:	6023      	str	r3, [r4, #0]
 800c35e:	2000      	movs	r0, #0
 800c360:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c364:	462a      	mov	r2, r5
 800c366:	f000 fbeb 	bl	800cb40 <_realloc_r>
 800c36a:	4606      	mov	r6, r0
 800c36c:	2800      	cmp	r0, #0
 800c36e:	d1e0      	bne.n	800c332 <__ssputs_r+0x5a>
 800c370:	6921      	ldr	r1, [r4, #16]
 800c372:	4650      	mov	r0, sl
 800c374:	f7ff ff64 	bl	800c240 <_free_r>
 800c378:	230c      	movs	r3, #12
 800c37a:	f8ca 3000 	str.w	r3, [sl]
 800c37e:	89a3      	ldrh	r3, [r4, #12]
 800c380:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c384:	81a3      	strh	r3, [r4, #12]
 800c386:	f04f 30ff 	mov.w	r0, #4294967295
 800c38a:	e7e9      	b.n	800c360 <__ssputs_r+0x88>

0800c38c <_svfiprintf_r>:
 800c38c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c390:	4698      	mov	r8, r3
 800c392:	898b      	ldrh	r3, [r1, #12]
 800c394:	061b      	lsls	r3, r3, #24
 800c396:	b09d      	sub	sp, #116	; 0x74
 800c398:	4607      	mov	r7, r0
 800c39a:	460d      	mov	r5, r1
 800c39c:	4614      	mov	r4, r2
 800c39e:	d50e      	bpl.n	800c3be <_svfiprintf_r+0x32>
 800c3a0:	690b      	ldr	r3, [r1, #16]
 800c3a2:	b963      	cbnz	r3, 800c3be <_svfiprintf_r+0x32>
 800c3a4:	2140      	movs	r1, #64	; 0x40
 800c3a6:	f7ff fbc5 	bl	800bb34 <_malloc_r>
 800c3aa:	6028      	str	r0, [r5, #0]
 800c3ac:	6128      	str	r0, [r5, #16]
 800c3ae:	b920      	cbnz	r0, 800c3ba <_svfiprintf_r+0x2e>
 800c3b0:	230c      	movs	r3, #12
 800c3b2:	603b      	str	r3, [r7, #0]
 800c3b4:	f04f 30ff 	mov.w	r0, #4294967295
 800c3b8:	e0d0      	b.n	800c55c <_svfiprintf_r+0x1d0>
 800c3ba:	2340      	movs	r3, #64	; 0x40
 800c3bc:	616b      	str	r3, [r5, #20]
 800c3be:	2300      	movs	r3, #0
 800c3c0:	9309      	str	r3, [sp, #36]	; 0x24
 800c3c2:	2320      	movs	r3, #32
 800c3c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c3c8:	f8cd 800c 	str.w	r8, [sp, #12]
 800c3cc:	2330      	movs	r3, #48	; 0x30
 800c3ce:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c574 <_svfiprintf_r+0x1e8>
 800c3d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c3d6:	f04f 0901 	mov.w	r9, #1
 800c3da:	4623      	mov	r3, r4
 800c3dc:	469a      	mov	sl, r3
 800c3de:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3e2:	b10a      	cbz	r2, 800c3e8 <_svfiprintf_r+0x5c>
 800c3e4:	2a25      	cmp	r2, #37	; 0x25
 800c3e6:	d1f9      	bne.n	800c3dc <_svfiprintf_r+0x50>
 800c3e8:	ebba 0b04 	subs.w	fp, sl, r4
 800c3ec:	d00b      	beq.n	800c406 <_svfiprintf_r+0x7a>
 800c3ee:	465b      	mov	r3, fp
 800c3f0:	4622      	mov	r2, r4
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	4638      	mov	r0, r7
 800c3f6:	f7ff ff6f 	bl	800c2d8 <__ssputs_r>
 800c3fa:	3001      	adds	r0, #1
 800c3fc:	f000 80a9 	beq.w	800c552 <_svfiprintf_r+0x1c6>
 800c400:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c402:	445a      	add	r2, fp
 800c404:	9209      	str	r2, [sp, #36]	; 0x24
 800c406:	f89a 3000 	ldrb.w	r3, [sl]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	f000 80a1 	beq.w	800c552 <_svfiprintf_r+0x1c6>
 800c410:	2300      	movs	r3, #0
 800c412:	f04f 32ff 	mov.w	r2, #4294967295
 800c416:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c41a:	f10a 0a01 	add.w	sl, sl, #1
 800c41e:	9304      	str	r3, [sp, #16]
 800c420:	9307      	str	r3, [sp, #28]
 800c422:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c426:	931a      	str	r3, [sp, #104]	; 0x68
 800c428:	4654      	mov	r4, sl
 800c42a:	2205      	movs	r2, #5
 800c42c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c430:	4850      	ldr	r0, [pc, #320]	; (800c574 <_svfiprintf_r+0x1e8>)
 800c432:	f7f3 feed 	bl	8000210 <memchr>
 800c436:	9a04      	ldr	r2, [sp, #16]
 800c438:	b9d8      	cbnz	r0, 800c472 <_svfiprintf_r+0xe6>
 800c43a:	06d0      	lsls	r0, r2, #27
 800c43c:	bf44      	itt	mi
 800c43e:	2320      	movmi	r3, #32
 800c440:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c444:	0711      	lsls	r1, r2, #28
 800c446:	bf44      	itt	mi
 800c448:	232b      	movmi	r3, #43	; 0x2b
 800c44a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c44e:	f89a 3000 	ldrb.w	r3, [sl]
 800c452:	2b2a      	cmp	r3, #42	; 0x2a
 800c454:	d015      	beq.n	800c482 <_svfiprintf_r+0xf6>
 800c456:	9a07      	ldr	r2, [sp, #28]
 800c458:	4654      	mov	r4, sl
 800c45a:	2000      	movs	r0, #0
 800c45c:	f04f 0c0a 	mov.w	ip, #10
 800c460:	4621      	mov	r1, r4
 800c462:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c466:	3b30      	subs	r3, #48	; 0x30
 800c468:	2b09      	cmp	r3, #9
 800c46a:	d94d      	bls.n	800c508 <_svfiprintf_r+0x17c>
 800c46c:	b1b0      	cbz	r0, 800c49c <_svfiprintf_r+0x110>
 800c46e:	9207      	str	r2, [sp, #28]
 800c470:	e014      	b.n	800c49c <_svfiprintf_r+0x110>
 800c472:	eba0 0308 	sub.w	r3, r0, r8
 800c476:	fa09 f303 	lsl.w	r3, r9, r3
 800c47a:	4313      	orrs	r3, r2
 800c47c:	9304      	str	r3, [sp, #16]
 800c47e:	46a2      	mov	sl, r4
 800c480:	e7d2      	b.n	800c428 <_svfiprintf_r+0x9c>
 800c482:	9b03      	ldr	r3, [sp, #12]
 800c484:	1d19      	adds	r1, r3, #4
 800c486:	681b      	ldr	r3, [r3, #0]
 800c488:	9103      	str	r1, [sp, #12]
 800c48a:	2b00      	cmp	r3, #0
 800c48c:	bfbb      	ittet	lt
 800c48e:	425b      	neglt	r3, r3
 800c490:	f042 0202 	orrlt.w	r2, r2, #2
 800c494:	9307      	strge	r3, [sp, #28]
 800c496:	9307      	strlt	r3, [sp, #28]
 800c498:	bfb8      	it	lt
 800c49a:	9204      	strlt	r2, [sp, #16]
 800c49c:	7823      	ldrb	r3, [r4, #0]
 800c49e:	2b2e      	cmp	r3, #46	; 0x2e
 800c4a0:	d10c      	bne.n	800c4bc <_svfiprintf_r+0x130>
 800c4a2:	7863      	ldrb	r3, [r4, #1]
 800c4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a6:	d134      	bne.n	800c512 <_svfiprintf_r+0x186>
 800c4a8:	9b03      	ldr	r3, [sp, #12]
 800c4aa:	1d1a      	adds	r2, r3, #4
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	9203      	str	r2, [sp, #12]
 800c4b0:	2b00      	cmp	r3, #0
 800c4b2:	bfb8      	it	lt
 800c4b4:	f04f 33ff 	movlt.w	r3, #4294967295
 800c4b8:	3402      	adds	r4, #2
 800c4ba:	9305      	str	r3, [sp, #20]
 800c4bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c584 <_svfiprintf_r+0x1f8>
 800c4c0:	7821      	ldrb	r1, [r4, #0]
 800c4c2:	2203      	movs	r2, #3
 800c4c4:	4650      	mov	r0, sl
 800c4c6:	f7f3 fea3 	bl	8000210 <memchr>
 800c4ca:	b138      	cbz	r0, 800c4dc <_svfiprintf_r+0x150>
 800c4cc:	9b04      	ldr	r3, [sp, #16]
 800c4ce:	eba0 000a 	sub.w	r0, r0, sl
 800c4d2:	2240      	movs	r2, #64	; 0x40
 800c4d4:	4082      	lsls	r2, r0
 800c4d6:	4313      	orrs	r3, r2
 800c4d8:	3401      	adds	r4, #1
 800c4da:	9304      	str	r3, [sp, #16]
 800c4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4e0:	4825      	ldr	r0, [pc, #148]	; (800c578 <_svfiprintf_r+0x1ec>)
 800c4e2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c4e6:	2206      	movs	r2, #6
 800c4e8:	f7f3 fe92 	bl	8000210 <memchr>
 800c4ec:	2800      	cmp	r0, #0
 800c4ee:	d038      	beq.n	800c562 <_svfiprintf_r+0x1d6>
 800c4f0:	4b22      	ldr	r3, [pc, #136]	; (800c57c <_svfiprintf_r+0x1f0>)
 800c4f2:	bb1b      	cbnz	r3, 800c53c <_svfiprintf_r+0x1b0>
 800c4f4:	9b03      	ldr	r3, [sp, #12]
 800c4f6:	3307      	adds	r3, #7
 800c4f8:	f023 0307 	bic.w	r3, r3, #7
 800c4fc:	3308      	adds	r3, #8
 800c4fe:	9303      	str	r3, [sp, #12]
 800c500:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c502:	4433      	add	r3, r6
 800c504:	9309      	str	r3, [sp, #36]	; 0x24
 800c506:	e768      	b.n	800c3da <_svfiprintf_r+0x4e>
 800c508:	fb0c 3202 	mla	r2, ip, r2, r3
 800c50c:	460c      	mov	r4, r1
 800c50e:	2001      	movs	r0, #1
 800c510:	e7a6      	b.n	800c460 <_svfiprintf_r+0xd4>
 800c512:	2300      	movs	r3, #0
 800c514:	3401      	adds	r4, #1
 800c516:	9305      	str	r3, [sp, #20]
 800c518:	4619      	mov	r1, r3
 800c51a:	f04f 0c0a 	mov.w	ip, #10
 800c51e:	4620      	mov	r0, r4
 800c520:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c524:	3a30      	subs	r2, #48	; 0x30
 800c526:	2a09      	cmp	r2, #9
 800c528:	d903      	bls.n	800c532 <_svfiprintf_r+0x1a6>
 800c52a:	2b00      	cmp	r3, #0
 800c52c:	d0c6      	beq.n	800c4bc <_svfiprintf_r+0x130>
 800c52e:	9105      	str	r1, [sp, #20]
 800c530:	e7c4      	b.n	800c4bc <_svfiprintf_r+0x130>
 800c532:	fb0c 2101 	mla	r1, ip, r1, r2
 800c536:	4604      	mov	r4, r0
 800c538:	2301      	movs	r3, #1
 800c53a:	e7f0      	b.n	800c51e <_svfiprintf_r+0x192>
 800c53c:	ab03      	add	r3, sp, #12
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	462a      	mov	r2, r5
 800c542:	4b0f      	ldr	r3, [pc, #60]	; (800c580 <_svfiprintf_r+0x1f4>)
 800c544:	a904      	add	r1, sp, #16
 800c546:	4638      	mov	r0, r7
 800c548:	f3af 8000 	nop.w
 800c54c:	1c42      	adds	r2, r0, #1
 800c54e:	4606      	mov	r6, r0
 800c550:	d1d6      	bne.n	800c500 <_svfiprintf_r+0x174>
 800c552:	89ab      	ldrh	r3, [r5, #12]
 800c554:	065b      	lsls	r3, r3, #25
 800c556:	f53f af2d 	bmi.w	800c3b4 <_svfiprintf_r+0x28>
 800c55a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c55c:	b01d      	add	sp, #116	; 0x74
 800c55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c562:	ab03      	add	r3, sp, #12
 800c564:	9300      	str	r3, [sp, #0]
 800c566:	462a      	mov	r2, r5
 800c568:	4b05      	ldr	r3, [pc, #20]	; (800c580 <_svfiprintf_r+0x1f4>)
 800c56a:	a904      	add	r1, sp, #16
 800c56c:	4638      	mov	r0, r7
 800c56e:	f000 f879 	bl	800c664 <_printf_i>
 800c572:	e7eb      	b.n	800c54c <_svfiprintf_r+0x1c0>
 800c574:	0800d605 	.word	0x0800d605
 800c578:	0800d60f 	.word	0x0800d60f
 800c57c:	00000000 	.word	0x00000000
 800c580:	0800c2d9 	.word	0x0800c2d9
 800c584:	0800d60b 	.word	0x0800d60b

0800c588 <_printf_common>:
 800c588:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c58c:	4616      	mov	r6, r2
 800c58e:	4699      	mov	r9, r3
 800c590:	688a      	ldr	r2, [r1, #8]
 800c592:	690b      	ldr	r3, [r1, #16]
 800c594:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c598:	4293      	cmp	r3, r2
 800c59a:	bfb8      	it	lt
 800c59c:	4613      	movlt	r3, r2
 800c59e:	6033      	str	r3, [r6, #0]
 800c5a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c5a4:	4607      	mov	r7, r0
 800c5a6:	460c      	mov	r4, r1
 800c5a8:	b10a      	cbz	r2, 800c5ae <_printf_common+0x26>
 800c5aa:	3301      	adds	r3, #1
 800c5ac:	6033      	str	r3, [r6, #0]
 800c5ae:	6823      	ldr	r3, [r4, #0]
 800c5b0:	0699      	lsls	r1, r3, #26
 800c5b2:	bf42      	ittt	mi
 800c5b4:	6833      	ldrmi	r3, [r6, #0]
 800c5b6:	3302      	addmi	r3, #2
 800c5b8:	6033      	strmi	r3, [r6, #0]
 800c5ba:	6825      	ldr	r5, [r4, #0]
 800c5bc:	f015 0506 	ands.w	r5, r5, #6
 800c5c0:	d106      	bne.n	800c5d0 <_printf_common+0x48>
 800c5c2:	f104 0a19 	add.w	sl, r4, #25
 800c5c6:	68e3      	ldr	r3, [r4, #12]
 800c5c8:	6832      	ldr	r2, [r6, #0]
 800c5ca:	1a9b      	subs	r3, r3, r2
 800c5cc:	42ab      	cmp	r3, r5
 800c5ce:	dc26      	bgt.n	800c61e <_printf_common+0x96>
 800c5d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c5d4:	1e13      	subs	r3, r2, #0
 800c5d6:	6822      	ldr	r2, [r4, #0]
 800c5d8:	bf18      	it	ne
 800c5da:	2301      	movne	r3, #1
 800c5dc:	0692      	lsls	r2, r2, #26
 800c5de:	d42b      	bmi.n	800c638 <_printf_common+0xb0>
 800c5e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c5e4:	4649      	mov	r1, r9
 800c5e6:	4638      	mov	r0, r7
 800c5e8:	47c0      	blx	r8
 800c5ea:	3001      	adds	r0, #1
 800c5ec:	d01e      	beq.n	800c62c <_printf_common+0xa4>
 800c5ee:	6823      	ldr	r3, [r4, #0]
 800c5f0:	6922      	ldr	r2, [r4, #16]
 800c5f2:	f003 0306 	and.w	r3, r3, #6
 800c5f6:	2b04      	cmp	r3, #4
 800c5f8:	bf02      	ittt	eq
 800c5fa:	68e5      	ldreq	r5, [r4, #12]
 800c5fc:	6833      	ldreq	r3, [r6, #0]
 800c5fe:	1aed      	subeq	r5, r5, r3
 800c600:	68a3      	ldr	r3, [r4, #8]
 800c602:	bf0c      	ite	eq
 800c604:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c608:	2500      	movne	r5, #0
 800c60a:	4293      	cmp	r3, r2
 800c60c:	bfc4      	itt	gt
 800c60e:	1a9b      	subgt	r3, r3, r2
 800c610:	18ed      	addgt	r5, r5, r3
 800c612:	2600      	movs	r6, #0
 800c614:	341a      	adds	r4, #26
 800c616:	42b5      	cmp	r5, r6
 800c618:	d11a      	bne.n	800c650 <_printf_common+0xc8>
 800c61a:	2000      	movs	r0, #0
 800c61c:	e008      	b.n	800c630 <_printf_common+0xa8>
 800c61e:	2301      	movs	r3, #1
 800c620:	4652      	mov	r2, sl
 800c622:	4649      	mov	r1, r9
 800c624:	4638      	mov	r0, r7
 800c626:	47c0      	blx	r8
 800c628:	3001      	adds	r0, #1
 800c62a:	d103      	bne.n	800c634 <_printf_common+0xac>
 800c62c:	f04f 30ff 	mov.w	r0, #4294967295
 800c630:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c634:	3501      	adds	r5, #1
 800c636:	e7c6      	b.n	800c5c6 <_printf_common+0x3e>
 800c638:	18e1      	adds	r1, r4, r3
 800c63a:	1c5a      	adds	r2, r3, #1
 800c63c:	2030      	movs	r0, #48	; 0x30
 800c63e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c642:	4422      	add	r2, r4
 800c644:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c648:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c64c:	3302      	adds	r3, #2
 800c64e:	e7c7      	b.n	800c5e0 <_printf_common+0x58>
 800c650:	2301      	movs	r3, #1
 800c652:	4622      	mov	r2, r4
 800c654:	4649      	mov	r1, r9
 800c656:	4638      	mov	r0, r7
 800c658:	47c0      	blx	r8
 800c65a:	3001      	adds	r0, #1
 800c65c:	d0e6      	beq.n	800c62c <_printf_common+0xa4>
 800c65e:	3601      	adds	r6, #1
 800c660:	e7d9      	b.n	800c616 <_printf_common+0x8e>
	...

0800c664 <_printf_i>:
 800c664:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c668:	7e0f      	ldrb	r7, [r1, #24]
 800c66a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c66c:	2f78      	cmp	r7, #120	; 0x78
 800c66e:	4691      	mov	r9, r2
 800c670:	4680      	mov	r8, r0
 800c672:	460c      	mov	r4, r1
 800c674:	469a      	mov	sl, r3
 800c676:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c67a:	d807      	bhi.n	800c68c <_printf_i+0x28>
 800c67c:	2f62      	cmp	r7, #98	; 0x62
 800c67e:	d80a      	bhi.n	800c696 <_printf_i+0x32>
 800c680:	2f00      	cmp	r7, #0
 800c682:	f000 80d4 	beq.w	800c82e <_printf_i+0x1ca>
 800c686:	2f58      	cmp	r7, #88	; 0x58
 800c688:	f000 80c0 	beq.w	800c80c <_printf_i+0x1a8>
 800c68c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c690:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c694:	e03a      	b.n	800c70c <_printf_i+0xa8>
 800c696:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c69a:	2b15      	cmp	r3, #21
 800c69c:	d8f6      	bhi.n	800c68c <_printf_i+0x28>
 800c69e:	a101      	add	r1, pc, #4	; (adr r1, 800c6a4 <_printf_i+0x40>)
 800c6a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c6a4:	0800c6fd 	.word	0x0800c6fd
 800c6a8:	0800c711 	.word	0x0800c711
 800c6ac:	0800c68d 	.word	0x0800c68d
 800c6b0:	0800c68d 	.word	0x0800c68d
 800c6b4:	0800c68d 	.word	0x0800c68d
 800c6b8:	0800c68d 	.word	0x0800c68d
 800c6bc:	0800c711 	.word	0x0800c711
 800c6c0:	0800c68d 	.word	0x0800c68d
 800c6c4:	0800c68d 	.word	0x0800c68d
 800c6c8:	0800c68d 	.word	0x0800c68d
 800c6cc:	0800c68d 	.word	0x0800c68d
 800c6d0:	0800c815 	.word	0x0800c815
 800c6d4:	0800c73d 	.word	0x0800c73d
 800c6d8:	0800c7cf 	.word	0x0800c7cf
 800c6dc:	0800c68d 	.word	0x0800c68d
 800c6e0:	0800c68d 	.word	0x0800c68d
 800c6e4:	0800c837 	.word	0x0800c837
 800c6e8:	0800c68d 	.word	0x0800c68d
 800c6ec:	0800c73d 	.word	0x0800c73d
 800c6f0:	0800c68d 	.word	0x0800c68d
 800c6f4:	0800c68d 	.word	0x0800c68d
 800c6f8:	0800c7d7 	.word	0x0800c7d7
 800c6fc:	682b      	ldr	r3, [r5, #0]
 800c6fe:	1d1a      	adds	r2, r3, #4
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	602a      	str	r2, [r5, #0]
 800c704:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c708:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c70c:	2301      	movs	r3, #1
 800c70e:	e09f      	b.n	800c850 <_printf_i+0x1ec>
 800c710:	6820      	ldr	r0, [r4, #0]
 800c712:	682b      	ldr	r3, [r5, #0]
 800c714:	0607      	lsls	r7, r0, #24
 800c716:	f103 0104 	add.w	r1, r3, #4
 800c71a:	6029      	str	r1, [r5, #0]
 800c71c:	d501      	bpl.n	800c722 <_printf_i+0xbe>
 800c71e:	681e      	ldr	r6, [r3, #0]
 800c720:	e003      	b.n	800c72a <_printf_i+0xc6>
 800c722:	0646      	lsls	r6, r0, #25
 800c724:	d5fb      	bpl.n	800c71e <_printf_i+0xba>
 800c726:	f9b3 6000 	ldrsh.w	r6, [r3]
 800c72a:	2e00      	cmp	r6, #0
 800c72c:	da03      	bge.n	800c736 <_printf_i+0xd2>
 800c72e:	232d      	movs	r3, #45	; 0x2d
 800c730:	4276      	negs	r6, r6
 800c732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c736:	485a      	ldr	r0, [pc, #360]	; (800c8a0 <_printf_i+0x23c>)
 800c738:	230a      	movs	r3, #10
 800c73a:	e012      	b.n	800c762 <_printf_i+0xfe>
 800c73c:	682b      	ldr	r3, [r5, #0]
 800c73e:	6820      	ldr	r0, [r4, #0]
 800c740:	1d19      	adds	r1, r3, #4
 800c742:	6029      	str	r1, [r5, #0]
 800c744:	0605      	lsls	r5, r0, #24
 800c746:	d501      	bpl.n	800c74c <_printf_i+0xe8>
 800c748:	681e      	ldr	r6, [r3, #0]
 800c74a:	e002      	b.n	800c752 <_printf_i+0xee>
 800c74c:	0641      	lsls	r1, r0, #25
 800c74e:	d5fb      	bpl.n	800c748 <_printf_i+0xe4>
 800c750:	881e      	ldrh	r6, [r3, #0]
 800c752:	4853      	ldr	r0, [pc, #332]	; (800c8a0 <_printf_i+0x23c>)
 800c754:	2f6f      	cmp	r7, #111	; 0x6f
 800c756:	bf0c      	ite	eq
 800c758:	2308      	moveq	r3, #8
 800c75a:	230a      	movne	r3, #10
 800c75c:	2100      	movs	r1, #0
 800c75e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c762:	6865      	ldr	r5, [r4, #4]
 800c764:	60a5      	str	r5, [r4, #8]
 800c766:	2d00      	cmp	r5, #0
 800c768:	bfa2      	ittt	ge
 800c76a:	6821      	ldrge	r1, [r4, #0]
 800c76c:	f021 0104 	bicge.w	r1, r1, #4
 800c770:	6021      	strge	r1, [r4, #0]
 800c772:	b90e      	cbnz	r6, 800c778 <_printf_i+0x114>
 800c774:	2d00      	cmp	r5, #0
 800c776:	d04b      	beq.n	800c810 <_printf_i+0x1ac>
 800c778:	4615      	mov	r5, r2
 800c77a:	fbb6 f1f3 	udiv	r1, r6, r3
 800c77e:	fb03 6711 	mls	r7, r3, r1, r6
 800c782:	5dc7      	ldrb	r7, [r0, r7]
 800c784:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c788:	4637      	mov	r7, r6
 800c78a:	42bb      	cmp	r3, r7
 800c78c:	460e      	mov	r6, r1
 800c78e:	d9f4      	bls.n	800c77a <_printf_i+0x116>
 800c790:	2b08      	cmp	r3, #8
 800c792:	d10b      	bne.n	800c7ac <_printf_i+0x148>
 800c794:	6823      	ldr	r3, [r4, #0]
 800c796:	07de      	lsls	r6, r3, #31
 800c798:	d508      	bpl.n	800c7ac <_printf_i+0x148>
 800c79a:	6923      	ldr	r3, [r4, #16]
 800c79c:	6861      	ldr	r1, [r4, #4]
 800c79e:	4299      	cmp	r1, r3
 800c7a0:	bfde      	ittt	le
 800c7a2:	2330      	movle	r3, #48	; 0x30
 800c7a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c7a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c7ac:	1b52      	subs	r2, r2, r5
 800c7ae:	6122      	str	r2, [r4, #16]
 800c7b0:	f8cd a000 	str.w	sl, [sp]
 800c7b4:	464b      	mov	r3, r9
 800c7b6:	aa03      	add	r2, sp, #12
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4640      	mov	r0, r8
 800c7bc:	f7ff fee4 	bl	800c588 <_printf_common>
 800c7c0:	3001      	adds	r0, #1
 800c7c2:	d14a      	bne.n	800c85a <_printf_i+0x1f6>
 800c7c4:	f04f 30ff 	mov.w	r0, #4294967295
 800c7c8:	b004      	add	sp, #16
 800c7ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	f043 0320 	orr.w	r3, r3, #32
 800c7d4:	6023      	str	r3, [r4, #0]
 800c7d6:	4833      	ldr	r0, [pc, #204]	; (800c8a4 <_printf_i+0x240>)
 800c7d8:	2778      	movs	r7, #120	; 0x78
 800c7da:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800c7de:	6823      	ldr	r3, [r4, #0]
 800c7e0:	6829      	ldr	r1, [r5, #0]
 800c7e2:	061f      	lsls	r7, r3, #24
 800c7e4:	f851 6b04 	ldr.w	r6, [r1], #4
 800c7e8:	d402      	bmi.n	800c7f0 <_printf_i+0x18c>
 800c7ea:	065f      	lsls	r7, r3, #25
 800c7ec:	bf48      	it	mi
 800c7ee:	b2b6      	uxthmi	r6, r6
 800c7f0:	07df      	lsls	r7, r3, #31
 800c7f2:	bf48      	it	mi
 800c7f4:	f043 0320 	orrmi.w	r3, r3, #32
 800c7f8:	6029      	str	r1, [r5, #0]
 800c7fa:	bf48      	it	mi
 800c7fc:	6023      	strmi	r3, [r4, #0]
 800c7fe:	b91e      	cbnz	r6, 800c808 <_printf_i+0x1a4>
 800c800:	6823      	ldr	r3, [r4, #0]
 800c802:	f023 0320 	bic.w	r3, r3, #32
 800c806:	6023      	str	r3, [r4, #0]
 800c808:	2310      	movs	r3, #16
 800c80a:	e7a7      	b.n	800c75c <_printf_i+0xf8>
 800c80c:	4824      	ldr	r0, [pc, #144]	; (800c8a0 <_printf_i+0x23c>)
 800c80e:	e7e4      	b.n	800c7da <_printf_i+0x176>
 800c810:	4615      	mov	r5, r2
 800c812:	e7bd      	b.n	800c790 <_printf_i+0x12c>
 800c814:	682b      	ldr	r3, [r5, #0]
 800c816:	6826      	ldr	r6, [r4, #0]
 800c818:	6961      	ldr	r1, [r4, #20]
 800c81a:	1d18      	adds	r0, r3, #4
 800c81c:	6028      	str	r0, [r5, #0]
 800c81e:	0635      	lsls	r5, r6, #24
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	d501      	bpl.n	800c828 <_printf_i+0x1c4>
 800c824:	6019      	str	r1, [r3, #0]
 800c826:	e002      	b.n	800c82e <_printf_i+0x1ca>
 800c828:	0670      	lsls	r0, r6, #25
 800c82a:	d5fb      	bpl.n	800c824 <_printf_i+0x1c0>
 800c82c:	8019      	strh	r1, [r3, #0]
 800c82e:	2300      	movs	r3, #0
 800c830:	6123      	str	r3, [r4, #16]
 800c832:	4615      	mov	r5, r2
 800c834:	e7bc      	b.n	800c7b0 <_printf_i+0x14c>
 800c836:	682b      	ldr	r3, [r5, #0]
 800c838:	1d1a      	adds	r2, r3, #4
 800c83a:	602a      	str	r2, [r5, #0]
 800c83c:	681d      	ldr	r5, [r3, #0]
 800c83e:	6862      	ldr	r2, [r4, #4]
 800c840:	2100      	movs	r1, #0
 800c842:	4628      	mov	r0, r5
 800c844:	f7f3 fce4 	bl	8000210 <memchr>
 800c848:	b108      	cbz	r0, 800c84e <_printf_i+0x1ea>
 800c84a:	1b40      	subs	r0, r0, r5
 800c84c:	6060      	str	r0, [r4, #4]
 800c84e:	6863      	ldr	r3, [r4, #4]
 800c850:	6123      	str	r3, [r4, #16]
 800c852:	2300      	movs	r3, #0
 800c854:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c858:	e7aa      	b.n	800c7b0 <_printf_i+0x14c>
 800c85a:	6923      	ldr	r3, [r4, #16]
 800c85c:	462a      	mov	r2, r5
 800c85e:	4649      	mov	r1, r9
 800c860:	4640      	mov	r0, r8
 800c862:	47d0      	blx	sl
 800c864:	3001      	adds	r0, #1
 800c866:	d0ad      	beq.n	800c7c4 <_printf_i+0x160>
 800c868:	6823      	ldr	r3, [r4, #0]
 800c86a:	079b      	lsls	r3, r3, #30
 800c86c:	d413      	bmi.n	800c896 <_printf_i+0x232>
 800c86e:	68e0      	ldr	r0, [r4, #12]
 800c870:	9b03      	ldr	r3, [sp, #12]
 800c872:	4298      	cmp	r0, r3
 800c874:	bfb8      	it	lt
 800c876:	4618      	movlt	r0, r3
 800c878:	e7a6      	b.n	800c7c8 <_printf_i+0x164>
 800c87a:	2301      	movs	r3, #1
 800c87c:	4632      	mov	r2, r6
 800c87e:	4649      	mov	r1, r9
 800c880:	4640      	mov	r0, r8
 800c882:	47d0      	blx	sl
 800c884:	3001      	adds	r0, #1
 800c886:	d09d      	beq.n	800c7c4 <_printf_i+0x160>
 800c888:	3501      	adds	r5, #1
 800c88a:	68e3      	ldr	r3, [r4, #12]
 800c88c:	9903      	ldr	r1, [sp, #12]
 800c88e:	1a5b      	subs	r3, r3, r1
 800c890:	42ab      	cmp	r3, r5
 800c892:	dcf2      	bgt.n	800c87a <_printf_i+0x216>
 800c894:	e7eb      	b.n	800c86e <_printf_i+0x20a>
 800c896:	2500      	movs	r5, #0
 800c898:	f104 0619 	add.w	r6, r4, #25
 800c89c:	e7f5      	b.n	800c88a <_printf_i+0x226>
 800c89e:	bf00      	nop
 800c8a0:	0800d616 	.word	0x0800d616
 800c8a4:	0800d627 	.word	0x0800d627

0800c8a8 <__sflush_r>:
 800c8a8:	898a      	ldrh	r2, [r1, #12]
 800c8aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8ae:	4605      	mov	r5, r0
 800c8b0:	0710      	lsls	r0, r2, #28
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	d458      	bmi.n	800c968 <__sflush_r+0xc0>
 800c8b6:	684b      	ldr	r3, [r1, #4]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	dc05      	bgt.n	800c8c8 <__sflush_r+0x20>
 800c8bc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	dc02      	bgt.n	800c8c8 <__sflush_r+0x20>
 800c8c2:	2000      	movs	r0, #0
 800c8c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8ca:	2e00      	cmp	r6, #0
 800c8cc:	d0f9      	beq.n	800c8c2 <__sflush_r+0x1a>
 800c8ce:	2300      	movs	r3, #0
 800c8d0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c8d4:	682f      	ldr	r7, [r5, #0]
 800c8d6:	6a21      	ldr	r1, [r4, #32]
 800c8d8:	602b      	str	r3, [r5, #0]
 800c8da:	d032      	beq.n	800c942 <__sflush_r+0x9a>
 800c8dc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c8de:	89a3      	ldrh	r3, [r4, #12]
 800c8e0:	075a      	lsls	r2, r3, #29
 800c8e2:	d505      	bpl.n	800c8f0 <__sflush_r+0x48>
 800c8e4:	6863      	ldr	r3, [r4, #4]
 800c8e6:	1ac0      	subs	r0, r0, r3
 800c8e8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c8ea:	b10b      	cbz	r3, 800c8f0 <__sflush_r+0x48>
 800c8ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c8ee:	1ac0      	subs	r0, r0, r3
 800c8f0:	2300      	movs	r3, #0
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c8f6:	6a21      	ldr	r1, [r4, #32]
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	47b0      	blx	r6
 800c8fc:	1c43      	adds	r3, r0, #1
 800c8fe:	89a3      	ldrh	r3, [r4, #12]
 800c900:	d106      	bne.n	800c910 <__sflush_r+0x68>
 800c902:	6829      	ldr	r1, [r5, #0]
 800c904:	291d      	cmp	r1, #29
 800c906:	d82b      	bhi.n	800c960 <__sflush_r+0xb8>
 800c908:	4a29      	ldr	r2, [pc, #164]	; (800c9b0 <__sflush_r+0x108>)
 800c90a:	410a      	asrs	r2, r1
 800c90c:	07d6      	lsls	r6, r2, #31
 800c90e:	d427      	bmi.n	800c960 <__sflush_r+0xb8>
 800c910:	2200      	movs	r2, #0
 800c912:	6062      	str	r2, [r4, #4]
 800c914:	04d9      	lsls	r1, r3, #19
 800c916:	6922      	ldr	r2, [r4, #16]
 800c918:	6022      	str	r2, [r4, #0]
 800c91a:	d504      	bpl.n	800c926 <__sflush_r+0x7e>
 800c91c:	1c42      	adds	r2, r0, #1
 800c91e:	d101      	bne.n	800c924 <__sflush_r+0x7c>
 800c920:	682b      	ldr	r3, [r5, #0]
 800c922:	b903      	cbnz	r3, 800c926 <__sflush_r+0x7e>
 800c924:	6560      	str	r0, [r4, #84]	; 0x54
 800c926:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c928:	602f      	str	r7, [r5, #0]
 800c92a:	2900      	cmp	r1, #0
 800c92c:	d0c9      	beq.n	800c8c2 <__sflush_r+0x1a>
 800c92e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c932:	4299      	cmp	r1, r3
 800c934:	d002      	beq.n	800c93c <__sflush_r+0x94>
 800c936:	4628      	mov	r0, r5
 800c938:	f7ff fc82 	bl	800c240 <_free_r>
 800c93c:	2000      	movs	r0, #0
 800c93e:	6360      	str	r0, [r4, #52]	; 0x34
 800c940:	e7c0      	b.n	800c8c4 <__sflush_r+0x1c>
 800c942:	2301      	movs	r3, #1
 800c944:	4628      	mov	r0, r5
 800c946:	47b0      	blx	r6
 800c948:	1c41      	adds	r1, r0, #1
 800c94a:	d1c8      	bne.n	800c8de <__sflush_r+0x36>
 800c94c:	682b      	ldr	r3, [r5, #0]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d0c5      	beq.n	800c8de <__sflush_r+0x36>
 800c952:	2b1d      	cmp	r3, #29
 800c954:	d001      	beq.n	800c95a <__sflush_r+0xb2>
 800c956:	2b16      	cmp	r3, #22
 800c958:	d101      	bne.n	800c95e <__sflush_r+0xb6>
 800c95a:	602f      	str	r7, [r5, #0]
 800c95c:	e7b1      	b.n	800c8c2 <__sflush_r+0x1a>
 800c95e:	89a3      	ldrh	r3, [r4, #12]
 800c960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c964:	81a3      	strh	r3, [r4, #12]
 800c966:	e7ad      	b.n	800c8c4 <__sflush_r+0x1c>
 800c968:	690f      	ldr	r7, [r1, #16]
 800c96a:	2f00      	cmp	r7, #0
 800c96c:	d0a9      	beq.n	800c8c2 <__sflush_r+0x1a>
 800c96e:	0793      	lsls	r3, r2, #30
 800c970:	680e      	ldr	r6, [r1, #0]
 800c972:	bf08      	it	eq
 800c974:	694b      	ldreq	r3, [r1, #20]
 800c976:	600f      	str	r7, [r1, #0]
 800c978:	bf18      	it	ne
 800c97a:	2300      	movne	r3, #0
 800c97c:	eba6 0807 	sub.w	r8, r6, r7
 800c980:	608b      	str	r3, [r1, #8]
 800c982:	f1b8 0f00 	cmp.w	r8, #0
 800c986:	dd9c      	ble.n	800c8c2 <__sflush_r+0x1a>
 800c988:	6a21      	ldr	r1, [r4, #32]
 800c98a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c98c:	4643      	mov	r3, r8
 800c98e:	463a      	mov	r2, r7
 800c990:	4628      	mov	r0, r5
 800c992:	47b0      	blx	r6
 800c994:	2800      	cmp	r0, #0
 800c996:	dc06      	bgt.n	800c9a6 <__sflush_r+0xfe>
 800c998:	89a3      	ldrh	r3, [r4, #12]
 800c99a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c99e:	81a3      	strh	r3, [r4, #12]
 800c9a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c9a4:	e78e      	b.n	800c8c4 <__sflush_r+0x1c>
 800c9a6:	4407      	add	r7, r0
 800c9a8:	eba8 0800 	sub.w	r8, r8, r0
 800c9ac:	e7e9      	b.n	800c982 <__sflush_r+0xda>
 800c9ae:	bf00      	nop
 800c9b0:	dfbffffe 	.word	0xdfbffffe

0800c9b4 <_fflush_r>:
 800c9b4:	b538      	push	{r3, r4, r5, lr}
 800c9b6:	690b      	ldr	r3, [r1, #16]
 800c9b8:	4605      	mov	r5, r0
 800c9ba:	460c      	mov	r4, r1
 800c9bc:	b913      	cbnz	r3, 800c9c4 <_fflush_r+0x10>
 800c9be:	2500      	movs	r5, #0
 800c9c0:	4628      	mov	r0, r5
 800c9c2:	bd38      	pop	{r3, r4, r5, pc}
 800c9c4:	b118      	cbz	r0, 800c9ce <_fflush_r+0x1a>
 800c9c6:	6a03      	ldr	r3, [r0, #32]
 800c9c8:	b90b      	cbnz	r3, 800c9ce <_fflush_r+0x1a>
 800c9ca:	f7ff f9cb 	bl	800bd64 <__sinit>
 800c9ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9d2:	2b00      	cmp	r3, #0
 800c9d4:	d0f3      	beq.n	800c9be <_fflush_r+0xa>
 800c9d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c9d8:	07d0      	lsls	r0, r2, #31
 800c9da:	d404      	bmi.n	800c9e6 <_fflush_r+0x32>
 800c9dc:	0599      	lsls	r1, r3, #22
 800c9de:	d402      	bmi.n	800c9e6 <_fflush_r+0x32>
 800c9e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9e2:	f7ff fc14 	bl	800c20e <__retarget_lock_acquire_recursive>
 800c9e6:	4628      	mov	r0, r5
 800c9e8:	4621      	mov	r1, r4
 800c9ea:	f7ff ff5d 	bl	800c8a8 <__sflush_r>
 800c9ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9f0:	07da      	lsls	r2, r3, #31
 800c9f2:	4605      	mov	r5, r0
 800c9f4:	d4e4      	bmi.n	800c9c0 <_fflush_r+0xc>
 800c9f6:	89a3      	ldrh	r3, [r4, #12]
 800c9f8:	059b      	lsls	r3, r3, #22
 800c9fa:	d4e1      	bmi.n	800c9c0 <_fflush_r+0xc>
 800c9fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c9fe:	f7ff fc07 	bl	800c210 <__retarget_lock_release_recursive>
 800ca02:	e7dd      	b.n	800c9c0 <_fflush_r+0xc>

0800ca04 <__swhatbuf_r>:
 800ca04:	b570      	push	{r4, r5, r6, lr}
 800ca06:	460c      	mov	r4, r1
 800ca08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca0c:	2900      	cmp	r1, #0
 800ca0e:	b096      	sub	sp, #88	; 0x58
 800ca10:	4615      	mov	r5, r2
 800ca12:	461e      	mov	r6, r3
 800ca14:	da0d      	bge.n	800ca32 <__swhatbuf_r+0x2e>
 800ca16:	89a3      	ldrh	r3, [r4, #12]
 800ca18:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca1c:	f04f 0100 	mov.w	r1, #0
 800ca20:	bf0c      	ite	eq
 800ca22:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca26:	2340      	movne	r3, #64	; 0x40
 800ca28:	2000      	movs	r0, #0
 800ca2a:	6031      	str	r1, [r6, #0]
 800ca2c:	602b      	str	r3, [r5, #0]
 800ca2e:	b016      	add	sp, #88	; 0x58
 800ca30:	bd70      	pop	{r4, r5, r6, pc}
 800ca32:	466a      	mov	r2, sp
 800ca34:	f000 f862 	bl	800cafc <_fstat_r>
 800ca38:	2800      	cmp	r0, #0
 800ca3a:	dbec      	blt.n	800ca16 <__swhatbuf_r+0x12>
 800ca3c:	9901      	ldr	r1, [sp, #4]
 800ca3e:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ca42:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ca46:	4259      	negs	r1, r3
 800ca48:	4159      	adcs	r1, r3
 800ca4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca4e:	e7eb      	b.n	800ca28 <__swhatbuf_r+0x24>

0800ca50 <__smakebuf_r>:
 800ca50:	898b      	ldrh	r3, [r1, #12]
 800ca52:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ca54:	079d      	lsls	r5, r3, #30
 800ca56:	4606      	mov	r6, r0
 800ca58:	460c      	mov	r4, r1
 800ca5a:	d507      	bpl.n	800ca6c <__smakebuf_r+0x1c>
 800ca5c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800ca60:	6023      	str	r3, [r4, #0]
 800ca62:	6123      	str	r3, [r4, #16]
 800ca64:	2301      	movs	r3, #1
 800ca66:	6163      	str	r3, [r4, #20]
 800ca68:	b002      	add	sp, #8
 800ca6a:	bd70      	pop	{r4, r5, r6, pc}
 800ca6c:	ab01      	add	r3, sp, #4
 800ca6e:	466a      	mov	r2, sp
 800ca70:	f7ff ffc8 	bl	800ca04 <__swhatbuf_r>
 800ca74:	9900      	ldr	r1, [sp, #0]
 800ca76:	4605      	mov	r5, r0
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7ff f85b 	bl	800bb34 <_malloc_r>
 800ca7e:	b948      	cbnz	r0, 800ca94 <__smakebuf_r+0x44>
 800ca80:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ca84:	059a      	lsls	r2, r3, #22
 800ca86:	d4ef      	bmi.n	800ca68 <__smakebuf_r+0x18>
 800ca88:	f023 0303 	bic.w	r3, r3, #3
 800ca8c:	f043 0302 	orr.w	r3, r3, #2
 800ca90:	81a3      	strh	r3, [r4, #12]
 800ca92:	e7e3      	b.n	800ca5c <__smakebuf_r+0xc>
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	6020      	str	r0, [r4, #0]
 800ca98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ca9c:	81a3      	strh	r3, [r4, #12]
 800ca9e:	9b00      	ldr	r3, [sp, #0]
 800caa0:	6163      	str	r3, [r4, #20]
 800caa2:	9b01      	ldr	r3, [sp, #4]
 800caa4:	6120      	str	r0, [r4, #16]
 800caa6:	b15b      	cbz	r3, 800cac0 <__smakebuf_r+0x70>
 800caa8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caac:	4630      	mov	r0, r6
 800caae:	f000 f837 	bl	800cb20 <_isatty_r>
 800cab2:	b128      	cbz	r0, 800cac0 <__smakebuf_r+0x70>
 800cab4:	89a3      	ldrh	r3, [r4, #12]
 800cab6:	f023 0303 	bic.w	r3, r3, #3
 800caba:	f043 0301 	orr.w	r3, r3, #1
 800cabe:	81a3      	strh	r3, [r4, #12]
 800cac0:	89a3      	ldrh	r3, [r4, #12]
 800cac2:	431d      	orrs	r5, r3
 800cac4:	81a5      	strh	r5, [r4, #12]
 800cac6:	e7cf      	b.n	800ca68 <__smakebuf_r+0x18>

0800cac8 <memmove>:
 800cac8:	4288      	cmp	r0, r1
 800caca:	b510      	push	{r4, lr}
 800cacc:	eb01 0402 	add.w	r4, r1, r2
 800cad0:	d902      	bls.n	800cad8 <memmove+0x10>
 800cad2:	4284      	cmp	r4, r0
 800cad4:	4623      	mov	r3, r4
 800cad6:	d807      	bhi.n	800cae8 <memmove+0x20>
 800cad8:	1e43      	subs	r3, r0, #1
 800cada:	42a1      	cmp	r1, r4
 800cadc:	d008      	beq.n	800caf0 <memmove+0x28>
 800cade:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800cae6:	e7f8      	b.n	800cada <memmove+0x12>
 800cae8:	4402      	add	r2, r0
 800caea:	4601      	mov	r1, r0
 800caec:	428a      	cmp	r2, r1
 800caee:	d100      	bne.n	800caf2 <memmove+0x2a>
 800caf0:	bd10      	pop	{r4, pc}
 800caf2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800caf6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800cafa:	e7f7      	b.n	800caec <memmove+0x24>

0800cafc <_fstat_r>:
 800cafc:	b538      	push	{r3, r4, r5, lr}
 800cafe:	4d07      	ldr	r5, [pc, #28]	; (800cb1c <_fstat_r+0x20>)
 800cb00:	2300      	movs	r3, #0
 800cb02:	4604      	mov	r4, r0
 800cb04:	4608      	mov	r0, r1
 800cb06:	4611      	mov	r1, r2
 800cb08:	602b      	str	r3, [r5, #0]
 800cb0a:	f7f6 fb32 	bl	8003172 <_fstat>
 800cb0e:	1c43      	adds	r3, r0, #1
 800cb10:	d102      	bne.n	800cb18 <_fstat_r+0x1c>
 800cb12:	682b      	ldr	r3, [r5, #0]
 800cb14:	b103      	cbz	r3, 800cb18 <_fstat_r+0x1c>
 800cb16:	6023      	str	r3, [r4, #0]
 800cb18:	bd38      	pop	{r3, r4, r5, pc}
 800cb1a:	bf00      	nop
 800cb1c:	2000b174 	.word	0x2000b174

0800cb20 <_isatty_r>:
 800cb20:	b538      	push	{r3, r4, r5, lr}
 800cb22:	4d06      	ldr	r5, [pc, #24]	; (800cb3c <_isatty_r+0x1c>)
 800cb24:	2300      	movs	r3, #0
 800cb26:	4604      	mov	r4, r0
 800cb28:	4608      	mov	r0, r1
 800cb2a:	602b      	str	r3, [r5, #0]
 800cb2c:	f7f6 fb31 	bl	8003192 <_isatty>
 800cb30:	1c43      	adds	r3, r0, #1
 800cb32:	d102      	bne.n	800cb3a <_isatty_r+0x1a>
 800cb34:	682b      	ldr	r3, [r5, #0]
 800cb36:	b103      	cbz	r3, 800cb3a <_isatty_r+0x1a>
 800cb38:	6023      	str	r3, [r4, #0]
 800cb3a:	bd38      	pop	{r3, r4, r5, pc}
 800cb3c:	2000b174 	.word	0x2000b174

0800cb40 <_realloc_r>:
 800cb40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb44:	4680      	mov	r8, r0
 800cb46:	4614      	mov	r4, r2
 800cb48:	460e      	mov	r6, r1
 800cb4a:	b921      	cbnz	r1, 800cb56 <_realloc_r+0x16>
 800cb4c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb50:	4611      	mov	r1, r2
 800cb52:	f7fe bfef 	b.w	800bb34 <_malloc_r>
 800cb56:	b92a      	cbnz	r2, 800cb64 <_realloc_r+0x24>
 800cb58:	f7ff fb72 	bl	800c240 <_free_r>
 800cb5c:	4625      	mov	r5, r4
 800cb5e:	4628      	mov	r0, r5
 800cb60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cb64:	f000 f81b 	bl	800cb9e <_malloc_usable_size_r>
 800cb68:	4284      	cmp	r4, r0
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	d802      	bhi.n	800cb74 <_realloc_r+0x34>
 800cb6e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800cb72:	d812      	bhi.n	800cb9a <_realloc_r+0x5a>
 800cb74:	4621      	mov	r1, r4
 800cb76:	4640      	mov	r0, r8
 800cb78:	f7fe ffdc 	bl	800bb34 <_malloc_r>
 800cb7c:	4605      	mov	r5, r0
 800cb7e:	2800      	cmp	r0, #0
 800cb80:	d0ed      	beq.n	800cb5e <_realloc_r+0x1e>
 800cb82:	42bc      	cmp	r4, r7
 800cb84:	4622      	mov	r2, r4
 800cb86:	4631      	mov	r1, r6
 800cb88:	bf28      	it	cs
 800cb8a:	463a      	movcs	r2, r7
 800cb8c:	f7ff fb49 	bl	800c222 <memcpy>
 800cb90:	4631      	mov	r1, r6
 800cb92:	4640      	mov	r0, r8
 800cb94:	f7ff fb54 	bl	800c240 <_free_r>
 800cb98:	e7e1      	b.n	800cb5e <_realloc_r+0x1e>
 800cb9a:	4635      	mov	r5, r6
 800cb9c:	e7df      	b.n	800cb5e <_realloc_r+0x1e>

0800cb9e <_malloc_usable_size_r>:
 800cb9e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cba2:	1f18      	subs	r0, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	bfbc      	itt	lt
 800cba8:	580b      	ldrlt	r3, [r1, r0]
 800cbaa:	18c0      	addlt	r0, r0, r3
 800cbac:	4770      	bx	lr
	...

0800cbb0 <_init>:
 800cbb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbb2:	bf00      	nop
 800cbb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbb6:	bc08      	pop	{r3}
 800cbb8:	469e      	mov	lr, r3
 800cbba:	4770      	bx	lr

0800cbbc <_fini>:
 800cbbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbbe:	bf00      	nop
 800cbc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbc2:	bc08      	pop	{r3}
 800cbc4:	469e      	mov	lr, r3
 800cbc6:	4770      	bx	lr
