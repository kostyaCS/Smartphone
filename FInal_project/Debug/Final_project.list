
Final_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d9b4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b1c  0800db54  0800db54  0001db54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e670  0800e670  000201bc  2**0
                  CONTENTS
  4 .ARM          00000008  0800e670  0800e670  0001e670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e678  0800e678  000201bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e678  0800e678  0001e678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e67c  0800e67c  0001e67c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001bc  20000000  0800e680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000efa0  200001bc  0800e83c  000201bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000f15c  0800e83c  0002f15c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201ec  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d9d4  00000000  00000000  0002022f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004ef9  00000000  00000000  0003dc03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000018a8  00000000  00000000  00042b00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012e3  00000000  00000000  000443a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c25c  00000000  00000000  0004568b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002279a  00000000  00000000  000618e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00094268  00000000  00000000  00084081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007214  00000000  00000000  001182ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  0011f500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001bc 	.word	0x200001bc
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800db3c 	.word	0x0800db3c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001c0 	.word	0x200001c0
 80001dc:	0800db3c 	.word	0x0800db3c

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> SPI4_MOSI
*/
void MX_GPIO_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b08c      	sub	sp, #48	; 0x30
 80005b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005b2:	f107 031c 	add.w	r3, r7, #28
 80005b6:	2200      	movs	r2, #0
 80005b8:	601a      	str	r2, [r3, #0]
 80005ba:	605a      	str	r2, [r3, #4]
 80005bc:	609a      	str	r2, [r3, #8]
 80005be:	60da      	str	r2, [r3, #12]
 80005c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005c2:	2300      	movs	r3, #0
 80005c4:	61bb      	str	r3, [r7, #24]
 80005c6:	4b90      	ldr	r3, [pc, #576]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	4a8f      	ldr	r2, [pc, #572]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005cc:	f043 0310 	orr.w	r3, r3, #16
 80005d0:	6313      	str	r3, [r2, #48]	; 0x30
 80005d2:	4b8d      	ldr	r3, [pc, #564]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d6:	f003 0310 	and.w	r3, r3, #16
 80005da:	61bb      	str	r3, [r7, #24]
 80005dc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
 80005e2:	4b89      	ldr	r3, [pc, #548]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	4a88      	ldr	r2, [pc, #544]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005e8:	f043 0304 	orr.w	r3, r3, #4
 80005ec:	6313      	str	r3, [r2, #48]	; 0x30
 80005ee:	4b86      	ldr	r3, [pc, #536]	; (8000808 <MX_GPIO_Init+0x25c>)
 80005f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f2:	f003 0304 	and.w	r3, r3, #4
 80005f6:	617b      	str	r3, [r7, #20]
 80005f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005fa:	2300      	movs	r3, #0
 80005fc:	613b      	str	r3, [r7, #16]
 80005fe:	4b82      	ldr	r3, [pc, #520]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	4a81      	ldr	r2, [pc, #516]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000608:	6313      	str	r3, [r2, #48]	; 0x30
 800060a:	4b7f      	ldr	r3, [pc, #508]	; (8000808 <MX_GPIO_Init+0x25c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	613b      	str	r3, [r7, #16]
 8000614:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	4b7b      	ldr	r3, [pc, #492]	; (8000808 <MX_GPIO_Init+0x25c>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	4a7a      	ldr	r2, [pc, #488]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000620:	f043 0301 	orr.w	r3, r3, #1
 8000624:	6313      	str	r3, [r2, #48]	; 0x30
 8000626:	4b78      	ldr	r3, [pc, #480]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062a:	f003 0301 	and.w	r3, r3, #1
 800062e:	60fb      	str	r3, [r7, #12]
 8000630:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000632:	2300      	movs	r3, #0
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	4b74      	ldr	r3, [pc, #464]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	4a73      	ldr	r2, [pc, #460]	; (8000808 <MX_GPIO_Init+0x25c>)
 800063c:	f043 0302 	orr.w	r3, r3, #2
 8000640:	6313      	str	r3, [r2, #48]	; 0x30
 8000642:	4b71      	ldr	r3, [pc, #452]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000646:	f003 0302 	and.w	r3, r3, #2
 800064a:	60bb      	str	r3, [r7, #8]
 800064c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b6d      	ldr	r3, [pc, #436]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a6c      	ldr	r2, [pc, #432]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000658:	f043 0308 	orr.w	r3, r3, #8
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b6a      	ldr	r3, [pc, #424]	; (8000808 <MX_GPIO_Init+0x25c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0308 	and.w	r3, r3, #8
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800066a:	2200      	movs	r2, #0
 800066c:	2108      	movs	r1, #8
 800066e:	4867      	ldr	r0, [pc, #412]	; (800080c <MX_GPIO_Init+0x260>)
 8000670:	f004 f81e 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000674:	2201      	movs	r2, #1
 8000676:	2101      	movs	r1, #1
 8000678:	4865      	ldr	r0, [pc, #404]	; (8000810 <MX_GPIO_Init+0x264>)
 800067a:	f004 f819 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800067e:	2200      	movs	r2, #0
 8000680:	210c      	movs	r1, #12
 8000682:	4864      	ldr	r0, [pc, #400]	; (8000814 <MX_GPIO_Init+0x268>)
 8000684:	f004 f814 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	2130      	movs	r1, #48	; 0x30
 800068c:	4860      	ldr	r0, [pc, #384]	; (8000810 <MX_GPIO_Init+0x264>)
 800068e:	f004 f80f 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	f240 1131 	movw	r1, #305	; 0x131
 8000698:	485f      	ldr	r0, [pc, #380]	; (8000818 <MX_GPIO_Init+0x26c>)
 800069a:	f004 f809 	bl	80046b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800069e:	2200      	movs	r2, #0
 80006a0:	f24f 0150 	movw	r1, #61520	; 0xf050
 80006a4:	485d      	ldr	r0, [pc, #372]	; (800081c <MX_GPIO_Init+0x270>)
 80006a6:	f004 f803 	bl	80046b0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80006aa:	2304      	movs	r3, #4
 80006ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006ae:	2300      	movs	r3, #0
 80006b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b2:	2300      	movs	r3, #0
 80006b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80006b6:	f107 031c 	add.w	r3, r7, #28
 80006ba:	4619      	mov	r1, r3
 80006bc:	4853      	ldr	r0, [pc, #332]	; (800080c <MX_GPIO_Init+0x260>)
 80006be:	f003 fe5b 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006c2:	2308      	movs	r3, #8
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c6:	2301      	movs	r3, #1
 80006c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ca:	2300      	movs	r3, #0
 80006cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ce:	2300      	movs	r3, #0
 80006d0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006d2:	f107 031c 	add.w	r3, r7, #28
 80006d6:	4619      	mov	r1, r3
 80006d8:	484c      	ldr	r0, [pc, #304]	; (800080c <MX_GPIO_Init+0x260>)
 80006da:	f003 fe4d 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80006de:	2330      	movs	r3, #48	; 0x30
 80006e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006e2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e8:	2300      	movs	r3, #0
 80006ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006ec:	f107 031c 	add.w	r3, r7, #28
 80006f0:	4619      	mov	r1, r3
 80006f2:	4846      	ldr	r0, [pc, #280]	; (800080c <MX_GPIO_Init+0x260>)
 80006f4:	f003 fe40 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80006f8:	2331      	movs	r3, #49	; 0x31
 80006fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006fc:	2301      	movs	r3, #1
 80006fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000700:	2300      	movs	r3, #0
 8000702:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000704:	2300      	movs	r3, #0
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4840      	ldr	r0, [pc, #256]	; (8000810 <MX_GPIO_Init+0x264>)
 8000710:	f003 fe32 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000714:	2302      	movs	r3, #2
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000718:	2302      	movs	r3, #2
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000720:	2303      	movs	r3, #3
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000724:	2305      	movs	r3, #5
 8000726:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000728:	f107 031c 	add.w	r3, r7, #28
 800072c:	4619      	mov	r1, r3
 800072e:	4839      	ldr	r0, [pc, #228]	; (8000814 <MX_GPIO_Init+0x268>)
 8000730:	f003 fe22 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000734:	230c      	movs	r3, #12
 8000736:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	2301      	movs	r3, #1
 800073a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073c:	2300      	movs	r3, #0
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000740:	2300      	movs	r3, #0
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 031c 	add.w	r3, r7, #28
 8000748:	4619      	mov	r1, r3
 800074a:	4832      	ldr	r0, [pc, #200]	; (8000814 <MX_GPIO_Init+0x268>)
 800074c:	f003 fe14 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8000750:	f240 1331 	movw	r3, #305	; 0x131
 8000754:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000756:	2301      	movs	r3, #1
 8000758:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000762:	f107 031c 	add.w	r3, r7, #28
 8000766:	4619      	mov	r1, r3
 8000768:	482b      	ldr	r0, [pc, #172]	; (8000818 <MX_GPIO_Init+0x26c>)
 800076a:	f003 fe05 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PD6 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800076e:	f24f 0350 	movw	r3, #61520	; 0xf050
 8000772:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000774:	2301      	movs	r3, #1
 8000776:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077c:	2300      	movs	r3, #0
 800077e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000780:	f107 031c 	add.w	r3, r7, #28
 8000784:	4619      	mov	r1, r3
 8000786:	4825      	ldr	r0, [pc, #148]	; (800081c <MX_GPIO_Init+0x270>)
 8000788:	f003 fdf6 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800078c:	230f      	movs	r3, #15
 800078e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000790:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000796:	2301      	movs	r3, #1
 8000798:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800079a:	f107 031c 	add.w	r3, r7, #28
 800079e:	4619      	mov	r1, r3
 80007a0:	481e      	ldr	r0, [pc, #120]	; (800081c <MX_GPIO_Init+0x270>)
 80007a2:	f003 fde9 	bl	8004378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80007a6:	2320      	movs	r3, #32
 80007a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007aa:	2300      	movs	r3, #0
 80007ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007b2:	f107 031c 	add.w	r3, r7, #28
 80007b6:	4619      	mov	r1, r3
 80007b8:	4818      	ldr	r0, [pc, #96]	; (800081c <MX_GPIO_Init+0x270>)
 80007ba:	f003 fddd 	bl	8004378 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2006      	movs	r0, #6
 80007c4:	f003 fd0f 	bl	80041e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007c8:	2006      	movs	r0, #6
 80007ca:	f003 fd28 	bl	800421e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2007      	movs	r0, #7
 80007d4:	f003 fd07 	bl	80041e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007d8:	2007      	movs	r0, #7
 80007da:	f003 fd20 	bl	800421e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	2008      	movs	r0, #8
 80007e4:	f003 fcff 	bl	80041e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007e8:	2008      	movs	r0, #8
 80007ea:	f003 fd18 	bl	800421e <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007ee:	2200      	movs	r2, #0
 80007f0:	2100      	movs	r1, #0
 80007f2:	2009      	movs	r0, #9
 80007f4:	f003 fcf7 	bl	80041e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007f8:	2009      	movs	r0, #9
 80007fa:	f003 fd10 	bl	800421e <HAL_NVIC_EnableIRQ>

}
 80007fe:	bf00      	nop
 8000800:	3730      	adds	r7, #48	; 0x30
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
 8000806:	bf00      	nop
 8000808:	40023800 	.word	0x40023800
 800080c:	40021000 	.word	0x40021000
 8000810:	40020800 	.word	0x40020800
 8000814:	40020000 	.word	0x40020000
 8000818:	40020400 	.word	0x40020400
 800081c:	40020c00 	.word	0x40020c00

08000820 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2C1_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_I2C1_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2C1_Init+0x50>)
 800082c:	4a12      	ldr	r2, [pc, #72]	; (8000878 <MX_I2C1_Init+0x58>)
 800082e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000830:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000836:	4b0e      	ldr	r3, [pc, #56]	; (8000870 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800083c:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2C1_Init+0x50>)
 800083e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000842:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_I2C1_Init+0x50>)
 8000846:	2200      	movs	r2, #0
 8000848:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2C1_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2C1_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_I2C1_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_I2C1_Init+0x50>)
 800085e:	f003 ff65 	bl	800472c <HAL_I2C_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000868:	f003 f8aa 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200001d8 	.word	0x200001d8
 8000874:	40005400 	.word	0x40005400
 8000878:	000186a0 	.word	0x000186a0

0800087c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b08a      	sub	sp, #40	; 0x28
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000884:	f107 0314 	add.w	r3, r7, #20
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	605a      	str	r2, [r3, #4]
 800088e:	609a      	str	r2, [r3, #8]
 8000890:	60da      	str	r2, [r3, #12]
 8000892:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	4a19      	ldr	r2, [pc, #100]	; (8000900 <HAL_I2C_MspInit+0x84>)
 800089a:	4293      	cmp	r3, r2
 800089c:	d12c      	bne.n	80008f8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	613b      	str	r3, [r7, #16]
 80008a2:	4b18      	ldr	r3, [pc, #96]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a17      	ldr	r2, [pc, #92]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008a8:	f043 0302 	orr.w	r3, r3, #2
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b15      	ldr	r3, [pc, #84]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0302 	and.w	r3, r3, #2
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80008ba:	f44f 7310 	mov.w	r3, #576	; 0x240
 80008be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008c0:	2312      	movs	r3, #18
 80008c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008c4:	2301      	movs	r3, #1
 80008c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c8:	2300      	movs	r3, #0
 80008ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008cc:	2304      	movs	r3, #4
 80008ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008d0:	f107 0314 	add.w	r3, r7, #20
 80008d4:	4619      	mov	r1, r3
 80008d6:	480c      	ldr	r0, [pc, #48]	; (8000908 <HAL_I2C_MspInit+0x8c>)
 80008d8:	f003 fd4e 	bl	8004378 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008dc:	2300      	movs	r3, #0
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	4b08      	ldr	r3, [pc, #32]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e4:	4a07      	ldr	r2, [pc, #28]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ea:	6413      	str	r3, [r2, #64]	; 0x40
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <HAL_I2C_MspInit+0x88>)
 80008ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008f8:	bf00      	nop
 80008fa:	3728      	adds	r7, #40	; 0x28
 80008fc:	46bd      	mov	sp, r7
 80008fe:	bd80      	pop	{r7, pc}
 8000900:	40005400 	.word	0x40005400
 8000904:	40023800 	.word	0x40023800
 8000908:	40020400 	.word	0x40020400

0800090c <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_I2S2_Init+0x50>)
 8000912:	4a13      	ldr	r2, [pc, #76]	; (8000960 <MX_I2S2_Init+0x54>)
 8000914:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <MX_I2S2_Init+0x50>)
 8000918:	f44f 7200 	mov.w	r2, #512	; 0x200
 800091c:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_I2S2_Init+0x50>)
 8000920:	2200      	movs	r2, #0
 8000922:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_I2S2_Init+0x50>)
 8000926:	2200      	movs	r2, #0
 8000928:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_I2S2_Init+0x50>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_I2S2_Init+0x50>)
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <MX_I2S2_Init+0x58>)
 8000934:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_I2S2_Init+0x50>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800093c:	4b07      	ldr	r3, [pc, #28]	; (800095c <MX_I2S2_Init+0x50>)
 800093e:	2200      	movs	r2, #0
 8000940:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_I2S2_Init+0x50>)
 8000944:	2201      	movs	r2, #1
 8000946:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000948:	4804      	ldr	r0, [pc, #16]	; (800095c <MX_I2S2_Init+0x50>)
 800094a:	f004 f833 	bl	80049b4 <HAL_I2S_Init>
 800094e:	4603      	mov	r3, r0
 8000950:	2b00      	cmp	r3, #0
 8000952:	d001      	beq.n	8000958 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000954:	f003 f834 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000958:	bf00      	nop
 800095a:	bd80      	pop	{r7, pc}
 800095c:	2000022c 	.word	0x2000022c
 8000960:	40003800 	.word	0x40003800
 8000964:	00017700 	.word	0x00017700

08000968 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800096c:	4b13      	ldr	r3, [pc, #76]	; (80009bc <MX_I2S3_Init+0x54>)
 800096e:	4a14      	ldr	r2, [pc, #80]	; (80009c0 <MX_I2S3_Init+0x58>)
 8000970:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000972:	4b12      	ldr	r3, [pc, #72]	; (80009bc <MX_I2S3_Init+0x54>)
 8000974:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000978:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800097a:	4b10      	ldr	r3, [pc, #64]	; (80009bc <MX_I2S3_Init+0x54>)
 800097c:	2200      	movs	r2, #0
 800097e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000980:	4b0e      	ldr	r3, [pc, #56]	; (80009bc <MX_I2S3_Init+0x54>)
 8000982:	2200      	movs	r2, #0
 8000984:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000986:	4b0d      	ldr	r3, [pc, #52]	; (80009bc <MX_I2S3_Init+0x54>)
 8000988:	f44f 7200 	mov.w	r2, #512	; 0x200
 800098c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <MX_I2S3_Init+0x54>)
 8000990:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <MX_I2S3_Init+0x5c>)
 8000992:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000994:	4b09      	ldr	r3, [pc, #36]	; (80009bc <MX_I2S3_Init+0x54>)
 8000996:	2200      	movs	r2, #0
 8000998:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800099a:	4b08      	ldr	r3, [pc, #32]	; (80009bc <MX_I2S3_Init+0x54>)
 800099c:	2200      	movs	r2, #0
 800099e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80009a0:	4b06      	ldr	r3, [pc, #24]	; (80009bc <MX_I2S3_Init+0x54>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80009a6:	4805      	ldr	r0, [pc, #20]	; (80009bc <MX_I2S3_Init+0x54>)
 80009a8:	f004 f804 	bl	80049b4 <HAL_I2S_Init>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80009b2:	f003 f805 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80009b6:	bf00      	nop
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	20000274 	.word	0x20000274
 80009c0:	40003c00 	.word	0x40003c00
 80009c4:	00017700 	.word	0x00017700

080009c8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009c8:	b580      	push	{r7, lr}
 80009ca:	b08e      	sub	sp, #56	; 0x38
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d4:	2200      	movs	r2, #0
 80009d6:	601a      	str	r2, [r3, #0]
 80009d8:	605a      	str	r2, [r3, #4]
 80009da:	609a      	str	r2, [r3, #8]
 80009dc:	60da      	str	r2, [r3, #12]
 80009de:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	4a59      	ldr	r2, [pc, #356]	; (8000b4c <HAL_I2S_MspInit+0x184>)
 80009e6:	4293      	cmp	r3, r2
 80009e8:	d15b      	bne.n	8000aa2 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	623b      	str	r3, [r7, #32]
 80009ee:	4b58      	ldr	r3, [pc, #352]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 80009f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f2:	4a57      	ldr	r2, [pc, #348]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 80009f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009f8:	6413      	str	r3, [r2, #64]	; 0x40
 80009fa:	4b55      	ldr	r3, [pc, #340]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 80009fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a02:	623b      	str	r3, [r7, #32]
 8000a04:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
 8000a0a:	4b51      	ldr	r3, [pc, #324]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a50      	ldr	r2, [pc, #320]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a10:	f043 0304 	orr.w	r3, r3, #4
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b4e      	ldr	r3, [pc, #312]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0304 	and.w	r3, r3, #4
 8000a1e:	61fb      	str	r3, [r7, #28]
 8000a20:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
 8000a26:	4b4a      	ldr	r3, [pc, #296]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a49      	ldr	r2, [pc, #292]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b47      	ldr	r3, [pc, #284]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	61bb      	str	r3, [r7, #24]
 8000a3c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a3e:	2304      	movs	r3, #4
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a4e:	2306      	movs	r3, #6
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	483e      	ldr	r0, [pc, #248]	; (8000b54 <HAL_I2S_MspInit+0x18c>)
 8000a5a:	f003 fc8d 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a5e:	2308      	movs	r3, #8
 8000a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a62:	2302      	movs	r3, #2
 8000a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4836      	ldr	r0, [pc, #216]	; (8000b54 <HAL_I2S_MspInit+0x18c>)
 8000a7a:	f003 fc7d 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a7e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a90:	2305      	movs	r3, #5
 8000a92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482f      	ldr	r0, [pc, #188]	; (8000b58 <HAL_I2S_MspInit+0x190>)
 8000a9c:	f003 fc6c 	bl	8004378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000aa0:	e04f      	b.n	8000b42 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4a2d      	ldr	r2, [pc, #180]	; (8000b5c <HAL_I2S_MspInit+0x194>)
 8000aa8:	4293      	cmp	r3, r2
 8000aaa:	d14a      	bne.n	8000b42 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000aac:	2300      	movs	r3, #0
 8000aae:	617b      	str	r3, [r7, #20]
 8000ab0:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	4a26      	ldr	r2, [pc, #152]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ab6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000aba:	6413      	str	r3, [r2, #64]	; 0x40
 8000abc:	4b24      	ldr	r3, [pc, #144]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ac0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000ac4:	617b      	str	r3, [r7, #20]
 8000ac6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ac8:	2300      	movs	r3, #0
 8000aca:	613b      	str	r3, [r7, #16]
 8000acc:	4b20      	ldr	r3, [pc, #128]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad0:	4a1f      	ldr	r2, [pc, #124]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ad2:	f043 0301 	orr.w	r3, r3, #1
 8000ad6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad8:	4b1d      	ldr	r3, [pc, #116]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000ada:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000adc:	f003 0301 	and.w	r3, r3, #1
 8000ae0:	613b      	str	r3, [r7, #16]
 8000ae2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60fb      	str	r3, [r7, #12]
 8000ae8:	4b19      	ldr	r3, [pc, #100]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aec:	4a18      	ldr	r2, [pc, #96]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000aee:	f043 0304 	orr.w	r3, r3, #4
 8000af2:	6313      	str	r3, [r2, #48]	; 0x30
 8000af4:	4b16      	ldr	r3, [pc, #88]	; (8000b50 <HAL_I2S_MspInit+0x188>)
 8000af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af8:	f003 0304 	and.w	r3, r3, #4
 8000afc:	60fb      	str	r3, [r7, #12]
 8000afe:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000b00:	2310      	movs	r3, #16
 8000b02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b10:	2306      	movs	r3, #6
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4811      	ldr	r0, [pc, #68]	; (8000b60 <HAL_I2S_MspInit+0x198>)
 8000b1c:	f003 fc2c 	bl	8004378 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b20:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b26:	2302      	movs	r3, #2
 8000b28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b32:	2306      	movs	r3, #6
 8000b34:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	4805      	ldr	r0, [pc, #20]	; (8000b54 <HAL_I2S_MspInit+0x18c>)
 8000b3e:	f003 fc1b 	bl	8004378 <HAL_GPIO_Init>
}
 8000b42:	bf00      	nop
 8000b44:	3738      	adds	r7, #56	; 0x38
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	40003800 	.word	0x40003800
 8000b50:	40023800 	.word	0x40023800
 8000b54:	40020800 	.word	0x40020800
 8000b58:	40020400 	.word	0x40020400
 8000b5c:	40003c00 	.word	0x40003c00
 8000b60:	40020000 	.word	0x40020000

08000b64 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4618      	mov	r0, r3
 8000b70:	f000 fd7b 	bl	800166a <LCD5110_refresh_ll>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	68b9      	ldr	r1, [r7, #8]
 8000b92:	68f8      	ldr	r0, [r7, #12]
 8000b94:	f000 fa4e 	bl	8001034 <LCD5110_wset_cursor>
}
 8000b98:	bf00      	nop
 8000b9a:	3710      	adds	r7, #16
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b082      	sub	sp, #8
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f000 fb04 	bl	80011b8 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000bb0:	687a      	ldr	r2, [r7, #4]
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	2000      	movs	r0, #0
 8000bb6:	f7ff ffe1 	bl	8000b7c <LCD5110_set_cursor>
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}

08000bc2 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000bc2:	b580      	push	{r7, lr}
 8000bc4:	b084      	sub	sp, #16
 8000bc6:	af00      	add	r7, sp, #0
 8000bc8:	60f8      	str	r0, [r7, #12]
 8000bca:	60b9      	str	r1, [r7, #8]
 8000bcc:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	68f8      	ldr	r0, [r7, #12]
 8000bda:	f000 fa61 	bl	80010a0 <LCD5110_wprint>
}
 8000bde:	bf00      	nop
 8000be0:	3710      	adds	r7, #16
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}

08000be6 <LCD5110_max>:
extern inline void LCD5110_fill_scr(LCD5110_display* lcd_conf);
extern inline void LCD5110_fill_win(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
extern inline void LCD5110_endl(LCD5110_display* lcd_conf);
extern inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf);

static inline int LCD5110_max(int a, int b) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	return a > b ? a : b;
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	bfb8      	it	lt
 8000bf8:	4613      	movlt	r3, r2
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <LCD5110_min>:

static inline int LCD5110_min(int a, int b) {
 8000c06:	b480      	push	{r7}
 8000c08:	b083      	sub	sp, #12
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	6078      	str	r0, [r7, #4]
 8000c0e:	6039      	str	r1, [r7, #0]
	return a < b ? a : b;
 8000c10:	683a      	ldr	r2, [r7, #0]
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	4293      	cmp	r3, r2
 8000c16:	bfa8      	it	ge
 8000c18:	4613      	movge	r3, r2
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	370c      	adds	r7, #12
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr

08000c26 <LCD5110_wline>:
}
#endif

void LCD5110_wline(int x1, int y1, int x2, int y2, int color,
					LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b08e      	sub	sp, #56	; 0x38
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	60f8      	str	r0, [r7, #12]
 8000c2e:	60b9      	str	r1, [r7, #8]
 8000c30:	607a      	str	r2, [r7, #4]
 8000c32:	603b      	str	r3, [r7, #0]
	x1 += win->frame.x0;
 8000c34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c3a:	461a      	mov	r2, r3
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	60fb      	str	r3, [r7, #12]
	y1 += win->frame.y0;
 8000c42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c48:	461a      	mov	r2, r3
 8000c4a:	68bb      	ldr	r3, [r7, #8]
 8000c4c:	4413      	add	r3, r2
 8000c4e:	60bb      	str	r3, [r7, #8]
	x2 += win->frame.x0;
 8000c50:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c56:	461a      	mov	r2, r3
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	607b      	str	r3, [r7, #4]
	y2 += win->frame.y0;
 8000c5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c64:	461a      	mov	r2, r3
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	4413      	add	r3, r2
 8000c6a:	603b      	str	r3, [r7, #0]

	int zn = x1 - x2;
 8000c6c:	68fa      	ldr	r2, [r7, #12]
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	62fb      	str	r3, [r7, #44]	; 0x2c
	//float k = (y1-y2)/zn;
	//float b = y1 - k*x1;
	int yb = LCD5110_min(y1, y2);
 8000c74:	6839      	ldr	r1, [r7, #0]
 8000c76:	68b8      	ldr	r0, [r7, #8]
 8000c78:	f7ff ffc5 	bl	8000c06 <LCD5110_min>
 8000c7c:	62b8      	str	r0, [r7, #40]	; 0x28
	int ye = LCD5110_max(y1, y2);
 8000c7e:	6839      	ldr	r1, [r7, #0]
 8000c80:	68b8      	ldr	r0, [r7, #8]
 8000c82:	f7ff ffb0 	bl	8000be6 <LCD5110_max>
 8000c86:	6278      	str	r0, [r7, #36]	; 0x24
	int xb = LCD5110_min(x1, x2);
 8000c88:	6879      	ldr	r1, [r7, #4]
 8000c8a:	68f8      	ldr	r0, [r7, #12]
 8000c8c:	f7ff ffbb 	bl	8000c06 <LCD5110_min>
 8000c90:	6238      	str	r0, [r7, #32]
	int xe = LCD5110_max(x1, x2);
 8000c92:	6879      	ldr	r1, [r7, #4]
 8000c94:	68f8      	ldr	r0, [r7, #12]
 8000c96:	f7ff ffa6 	bl	8000be6 <LCD5110_max>
 8000c9a:	61f8      	str	r0, [r7, #28]
	if ((ye - yb) < (xe - xb)) {
 8000c9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ca0:	1ad2      	subs	r2, r2, r3
 8000ca2:	69f9      	ldr	r1, [r7, #28]
 8000ca4:	6a3b      	ldr	r3, [r7, #32]
 8000ca6:	1acb      	subs	r3, r1, r3
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	da42      	bge.n	8000d32 <LCD5110_wline+0x10c>
		for (int i = xb; i <= xe; ++i) {
 8000cac:	6a3b      	ldr	r3, [r7, #32]
 8000cae:	637b      	str	r3, [r7, #52]	; 0x34
 8000cb0:	e03a      	b.n	8000d28 <LCD5110_wline+0x102>
			int cury = (y1 - y2) * (i - x1) / zn + y1;
 8000cb2:	68ba      	ldr	r2, [r7, #8]
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	1ad3      	subs	r3, r2, r3
 8000cb8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000cba:	68fa      	ldr	r2, [r7, #12]
 8000cbc:	1a8a      	subs	r2, r1, r2
 8000cbe:	fb03 f202 	mul.w	r2, r3, r2
 8000cc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cc4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	4413      	add	r3, r2
 8000ccc:	617b      	str	r3, [r7, #20]
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000cce:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cd4:	461a      	mov	r2, r3
 8000cd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd8:	4293      	cmp	r3, r2
 8000cda:	db22      	blt.n	8000d22 <LCD5110_wline+0xfc>
 8000cdc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ce6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cea:	4413      	add	r3, r2
 8000cec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cee:	429a      	cmp	r2, r3
 8000cf0:	da17      	bge.n	8000d22 <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000cf2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cf4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cf8:	461a      	mov	r2, r3
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4293      	cmp	r3, r2
 8000cfe:	db10      	blt.n	8000d22 <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d02:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d06:	461a      	mov	r2, r3
 8000d08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d0a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d0e:	4413      	add	r3, r2
 8000d10:	697a      	ldr	r2, [r7, #20]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	da05      	bge.n	8000d22 <LCD5110_wline+0xfc>
			{
				LCD5110_putpix(i, cury, color, &lcd_conf->hw_conf);
 8000d16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d18:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d1a:	6979      	ldr	r1, [r7, #20]
 8000d1c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000d1e:	f000 fa66 	bl	80011ee <LCD5110_putpix>
		for (int i = xb; i <= xe; ++i) {
 8000d22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d24:	3301      	adds	r3, #1
 8000d26:	637b      	str	r3, [r7, #52]	; 0x34
 8000d28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	ddc0      	ble.n	8000cb2 <LCD5110_wline+0x8c>
			{
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
			}
		}
	}
}
 8000d30:	e041      	b.n	8000db6 <LCD5110_wline+0x190>
		for (int i = yb; i <= ye; ++i) {
 8000d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d34:	633b      	str	r3, [r7, #48]	; 0x30
 8000d36:	e03a      	b.n	8000dae <LCD5110_wline+0x188>
			int curx = (i - y1) * zn / (y1 - y2) + x1;
 8000d38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d40:	fb03 f202 	mul.w	r2, r3, r2
 8000d44:	68b9      	ldr	r1, [r7, #8]
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	1acb      	subs	r3, r1, r3
 8000d4a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d4e:	68fa      	ldr	r2, [r7, #12]
 8000d50:	4413      	add	r3, r2
 8000d52:	61bb      	str	r3, [r7, #24]
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000d54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	69bb      	ldr	r3, [r7, #24]
 8000d5e:	4293      	cmp	r3, r2
 8000d60:	db22      	blt.n	8000da8 <LCD5110_wline+0x182>
 8000d62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d68:	461a      	mov	r2, r3
 8000d6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d6c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d70:	4413      	add	r3, r2
 8000d72:	69ba      	ldr	r2, [r7, #24]
 8000d74:	429a      	cmp	r2, r3
 8000d76:	da17      	bge.n	8000da8 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d7a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d7e:	461a      	mov	r2, r3
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d82:	4293      	cmp	r3, r2
 8000d84:	db10      	blt.n	8000da8 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000d86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d90:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d94:	4413      	add	r3, r2
 8000d96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d98:	429a      	cmp	r2, r3
 8000d9a:	da05      	bge.n	8000da8 <LCD5110_wline+0x182>
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
 8000d9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000da0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000da2:	69b8      	ldr	r0, [r7, #24]
 8000da4:	f000 fa23 	bl	80011ee <LCD5110_putpix>
		for (int i = yb; i <= ye; ++i) {
 8000da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000daa:	3301      	adds	r3, #1
 8000dac:	633b      	str	r3, [r7, #48]	; 0x30
 8000dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000db2:	429a      	cmp	r2, r3
 8000db4:	ddc0      	ble.n	8000d38 <LCD5110_wline+0x112>
}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <LCD5110_wrect>:

void LCD5110_wrect(rect_t* rect, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000dbe:	b590      	push	{r4, r7, lr}
 8000dc0:	b089      	sub	sp, #36	; 0x24
 8000dc2:	af04      	add	r7, sp, #16
 8000dc4:	60f8      	str	r0, [r7, #12]
 8000dc6:	60b9      	str	r1, [r7, #8]
 8000dc8:	607a      	str	r2, [r7, #4]
 8000dca:	603b      	str	r3, [r7, #0]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000dcc:	68fb      	ldr	r3, [r7, #12]
 8000dce:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dda:	4619      	mov	r1, r3
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de2:	461a      	mov	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dea:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000dec:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000df4:	461c      	mov	r4, r3
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	9302      	str	r3, [sp, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	9301      	str	r3, [sp, #4]
 8000dfe:	68bb      	ldr	r3, [r7, #8]
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	4623      	mov	r3, r4
 8000e04:	f7ff ff0f 	bl	8000c26 <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e0e:	461c      	mov	r4, r3
 8000e10:	68fb      	ldr	r3, [r7, #12]
 8000e12:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e16:	461a      	mov	r2, r3
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e1e:	4413      	add	r3, r2
 8000e20:	1e59      	subs	r1, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e30:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e32:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e42:	4403      	add	r3, r0
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e44:	1e58      	subs	r0, r3, #1
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	9302      	str	r3, [sp, #8]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	9301      	str	r3, [sp, #4]
 8000e4e:	68bb      	ldr	r3, [r7, #8]
 8000e50:	9300      	str	r3, [sp, #0]
 8000e52:	4603      	mov	r3, r0
 8000e54:	4620      	mov	r0, r4
 8000e56:	f7ff fee6 	bl	8000c26 <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e60:	4618      	mov	r0, r3
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e68:	4619      	mov	r1, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	f9b3 3000 	ldrsh.w	r3, [r3]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e70:	461c      	mov	r4, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e78:	461a      	mov	r2, r3
 8000e7a:	68fb      	ldr	r3, [r7, #12]
 8000e7c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e80:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e82:	1e5a      	subs	r2, r3, #1
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	9302      	str	r3, [sp, #8]
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	9301      	str	r3, [sp, #4]
 8000e8c:	68bb      	ldr	r3, [r7, #8]
 8000e8e:	9300      	str	r3, [sp, #0]
 8000e90:	4613      	mov	r3, r2
 8000e92:	4622      	mov	r2, r4
 8000e94:	f7ff fec7 	bl	8000c26 <LCD5110_wline>
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000e98:	68fb      	ldr	r3, [r7, #12]
 8000e9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e9e:	461a      	mov	r2, r3
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ea6:	4413      	add	r3, r2
 8000ea8:	1e58      	subs	r0, r3, #1
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eb0:	461c      	mov	r4, r3
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000eb8:	461a      	mov	r2, r3
 8000eba:	68fb      	ldr	r3, [r7, #12]
 8000ebc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ec0:	4413      	add	r3, r2
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000ec2:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000ed2:	440b      	add	r3, r1
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000ed4:	1e59      	subs	r1, r3, #1
 8000ed6:	683b      	ldr	r3, [r7, #0]
 8000ed8:	9302      	str	r3, [sp, #8]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	9301      	str	r3, [sp, #4]
 8000ede:	68bb      	ldr	r3, [r7, #8]
 8000ee0:	9300      	str	r3, [sp, #0]
 8000ee2:	460b      	mov	r3, r1
 8000ee4:	4621      	mov	r1, r4
 8000ee6:	f7ff fe9e 	bl	8000c26 <LCD5110_wline>
}
 8000eea:	bf00      	nop
 8000eec:	3714      	adds	r7, #20
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd90      	pop	{r4, r7, pc}

08000ef2 <LCD5110_rect>:

void LCD5110_rect(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000ef2:	b580      	push	{r7, lr}
 8000ef4:	b084      	sub	sp, #16
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	60f8      	str	r0, [r7, #12]
 8000efa:	60b9      	str	r1, [r7, #8]
 8000efc:	607a      	str	r2, [r7, #4]
	LCD5110_wrect(rect, color, &lcd_conf->def_scr, lcd_conf);
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	68b9      	ldr	r1, [r7, #8]
 8000f08:	68f8      	ldr	r0, [r7, #12]
 8000f0a:	f7ff ff58 	bl	8000dbe <LCD5110_wrect>
}
 8000f0e:	bf00      	nop
 8000f10:	3710      	adds	r7, #16
 8000f12:	46bd      	mov	sp, r7
 8000f14:	bd80      	pop	{r7, pc}

08000f16 <LCD5110_rect_fill>:
void LCD5110_win_draw_frame(int color, LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
	LCD5110_rect(&win->frame, color, lcd_conf);
}

void LCD5110_rect_fill(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000f16:	b580      	push	{r7, lr}
 8000f18:	b086      	sub	sp, #24
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	60f8      	str	r0, [r7, #12]
 8000f1e:	60b9      	str	r1, [r7, #8]
 8000f20:	607a      	str	r2, [r7, #4]
	//! Slow!
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f28:	617b      	str	r3, [r7, #20]
 8000f2a:	e01b      	b.n	8000f64 <LCD5110_rect_fill+0x4e>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f32:	613b      	str	r3, [r7, #16]
 8000f34:	e008      	b.n	8000f48 <LCD5110_rect_fill+0x32>
			LCD5110_putpix(i, j, color, &lcd_conf->hw_conf);
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68ba      	ldr	r2, [r7, #8]
 8000f3a:	6939      	ldr	r1, [r7, #16]
 8000f3c:	6978      	ldr	r0, [r7, #20]
 8000f3e:	f000 f956 	bl	80011ee <LCD5110_putpix>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000f42:	693b      	ldr	r3, [r7, #16]
 8000f44:	3301      	adds	r3, #1
 8000f46:	613b      	str	r3, [r7, #16]
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f4e:	461a      	mov	r2, r3
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f56:	4413      	add	r3, r2
 8000f58:	693a      	ldr	r2, [r7, #16]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	dbeb      	blt.n	8000f36 <LCD5110_rect_fill+0x20>
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	3301      	adds	r3, #1
 8000f62:	617b      	str	r3, [r7, #20]
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f6a:	461a      	mov	r2, r3
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f72:	4413      	add	r3, r2
 8000f74:	697a      	ldr	r2, [r7, #20]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	dbd8      	blt.n	8000f2c <LCD5110_rect_fill+0x16>
}
 8000f7a:	bf00      	nop
 8000f7c:	bf00      	nop
 8000f7e:	3718      	adds	r7, #24
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f86:	b08b      	sub	sp, #44	; 0x2c
 8000f88:	af04      	add	r7, sp, #16
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	603b      	str	r3, [r7, #0]
 8000f90:	4613      	mov	r3, r2
 8000f92:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000f94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f96:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	db41      	blt.n	8001022 <LCD5110_wputchar+0x9e>
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	db3c      	blt.n	8001022 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000faa:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fae:	461a      	mov	r2, r3
 8000fb0:	2306      	movs	r3, #6
 8000fb2:	4413      	add	r3, r2
 8000fb4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fb6:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d833      	bhi.n	8001026 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fc4:	461a      	mov	r2, r3
 8000fc6:	2308      	movs	r3, #8
 8000fc8:	4413      	add	r3, r2
 8000fca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fcc:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000fd0:	4293      	cmp	r3, r2
 8000fd2:	d828      	bhi.n	8001026 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000fd4:	4b16      	ldr	r3, [pc, #88]	; (8001030 <LCD5110_wputchar+0xac>)
 8000fd6:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8000fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fde:	461a      	mov	r2, r3
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	18d0      	adds	r0, r2, r3
 8000fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fe6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fea:	461a      	mov	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	18d1      	adds	r1, r2, r3
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	2206      	movs	r2, #6
 8000ff4:	fb02 f303 	mul.w	r3, r2, r3
 8000ff8:	697a      	ldr	r2, [r7, #20]
 8000ffa:	441a      	add	r2, r3
 8000ffc:	2306      	movs	r3, #6
 8000ffe:	461e      	mov	r6, r3
 8001000:	2308      	movs	r3, #8
 8001002:	461c      	mov	r4, r3
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	2b00      	cmp	r3, #0
 8001008:	bf0c      	ite	eq
 800100a:	2301      	moveq	r3, #1
 800100c:	2300      	movne	r3, #0
 800100e:	b2db      	uxtb	r3, r3
 8001010:	461d      	mov	r5, r3
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	9302      	str	r3, [sp, #8]
 8001016:	9501      	str	r5, [sp, #4]
 8001018:	9400      	str	r4, [sp, #0]
 800101a:	4633      	mov	r3, r6
 800101c:	f000 f927 	bl	800126e <LCD5110_drawBitmap>
 8001020:	e002      	b.n	8001028 <LCD5110_wputchar+0xa4>
		return;
 8001022:	bf00      	nop
 8001024:	e000      	b.n	8001028 <LCD5110_wputchar+0xa4>
		return;
 8001026:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8001028:	371c      	adds	r7, #28
 800102a:	46bd      	mov	sp, r7
 800102c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102e:	bf00      	nop
 8001030:	0800de68 	.word	0x0800de68

08001034 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
 8001040:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	b21a      	sxth	r2, r3
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800104a:	68bb      	ldr	r3, [r7, #8]
 800104c:	b21a      	sxth	r2, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	815a      	strh	r2, [r3, #10]
}
 8001052:	bf00      	nop
 8001054:	3714      	adds	r7, #20
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr

0800105e <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800105e:	b580      	push	{r7, lr}
 8001060:	b082      	sub	sp, #8
 8001062:	af00      	add	r7, sp, #0
 8001064:	6078      	str	r0, [r7, #4]
 8001066:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800106e:	b29a      	uxth	r2, r3
 8001070:	2308      	movs	r3, #8
 8001072:	b29b      	uxth	r3, r3
 8001074:	4413      	add	r3, r2
 8001076:	b29b      	uxth	r3, r3
 8001078:	3301      	adds	r3, #1
 800107a:	b29b      	uxth	r3, r3
 800107c:	b21a      	sxth	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2202      	movs	r2, #2
 8001086:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	7b1b      	ldrb	r3, [r3, #12]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f7ff fd67 	bl	8000b64 <LCD5110_refresh>
}
 8001096:	bf00      	nop
 8001098:	3708      	adds	r7, #8
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af02      	add	r7, sp, #8
 80010a6:	60f8      	str	r0, [r7, #12]
 80010a8:	60b9      	str	r1, [r7, #8]
 80010aa:	607a      	str	r2, [r7, #4]
 80010ac:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 80010ae:	e053      	b.n	8001158 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	781b      	ldrb	r3, [r3, #0]
 80010b4:	2b0a      	cmp	r3, #10
 80010b6:	d010      	beq.n	80010da <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010be:	4618      	mov	r0, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010c6:	4619      	mov	r1, r3
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	9301      	str	r3, [sp, #4]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	9300      	str	r3, [sp, #0]
 80010d4:	68bb      	ldr	r3, [r7, #8]
 80010d6:	f7ff ff55 	bl	8000f84 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010e0:	b29a      	uxth	r2, r3
 80010e2:	2306      	movs	r3, #6
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	4413      	add	r3, r2
 80010e8:	b29b      	uxth	r3, r3
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010f6:	461a      	mov	r2, r3
 80010f8:	2306      	movs	r3, #6
 80010fa:	4413      	add	r3, r2
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001102:	4293      	cmp	r3, r2
 8001104:	d904      	bls.n	8001110 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	3301      	adds	r3, #1
 800110a:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 800110c:	2b0a      	cmp	r3, #10
 800110e:	d103      	bne.n	8001118 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	2b0a      	cmp	r3, #10
 8001116:	d111      	bne.n	800113c <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8001118:	6839      	ldr	r1, [r7, #0]
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ff9f 	bl	800105e <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3301      	adds	r3, #1
 8001124:	781b      	ldrb	r3, [r3, #0]
 8001126:	3301      	adds	r3, #1
 8001128:	4a10      	ldr	r2, [pc, #64]	; (800116c <LCD5110_wprint+0xcc>)
 800112a:	4413      	add	r3, r2
 800112c:	781b      	ldrb	r3, [r3, #0]
 800112e:	f003 0308 	and.w	r3, r3, #8
 8001132:	2b00      	cmp	r3, #0
 8001134:	d002      	beq.n	800113c <LCD5110_wprint+0x9c>
				++str;
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	3301      	adds	r3, #1
 800113a:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001142:	461a      	mov	r2, r3
 8001144:	2308      	movs	r3, #8
 8001146:	4413      	add	r3, r2
 8001148:	687a      	ldr	r2, [r7, #4]
 800114a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800114e:	4293      	cmp	r3, r2
 8001150:	d807      	bhi.n	8001162 <LCD5110_wprint+0xc2>
			break;
		str++;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3301      	adds	r3, #1
 8001156:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d1a7      	bne.n	80010b0 <LCD5110_wprint+0x10>

	}
}
 8001160:	e000      	b.n	8001164 <LCD5110_wprint+0xc4>
			break;
 8001162:	bf00      	nop
}
 8001164:	bf00      	nop
 8001166:	3710      	adds	r7, #16
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	0800e4ff 	.word	0x0800e4ff

08001170 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8001170:	b480      	push	{r7}
 8001172:	b087      	sub	sp, #28
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	10db      	asrs	r3, r3, #3
 8001180:	2254      	movs	r2, #84	; 0x54
 8001182:	fb03 f202 	mul.w	r2, r3, r2
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	4413      	add	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	f003 0307 	and.w	r3, r3, #7
 8001192:	2201      	movs	r2, #1
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	b2db      	uxtb	r3, r3
 800119a:	753b      	strb	r3, [r7, #20]

	return res;
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	461a      	mov	r2, r3
 80011a0:	f107 0310 	add.w	r3, r7, #16
 80011a4:	e893 0003 	ldmia.w	r3, {r0, r1}
 80011a8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80011ac:	68f8      	ldr	r0, [r7, #12]
 80011ae:	371c      	adds	r7, #28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 80011b8:	b480      	push	{r7}
 80011ba:	b085      	sub	sp, #20
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
 80011c4:	e008      	b.n	80011d8 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 80011c6:	687a      	ldr	r2, [r7, #4]
 80011c8:	68fb      	ldr	r3, [r7, #12]
 80011ca:	4413      	add	r3, r2
 80011cc:	331c      	adds	r3, #28
 80011ce:	2200      	movs	r2, #0
 80011d0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	3301      	adds	r3, #1
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
 80011da:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80011de:	dbf2      	blt.n	80011c6 <LCD5110_clrscr+0xe>
	}
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	db31      	blt.n	8001266 <LCD5110_putpix+0x78>
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	2b00      	cmp	r3, #0
 8001206:	db2e      	blt.n	8001266 <LCD5110_putpix+0x78>
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	2b53      	cmp	r3, #83	; 0x53
 800120c:	dc2b      	bgt.n	8001266 <LCD5110_putpix+0x78>
 800120e:	68bb      	ldr	r3, [r7, #8]
 8001210:	2b2f      	cmp	r3, #47	; 0x2f
 8001212:	dc28      	bgt.n	8001266 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 8001214:	f107 0310 	add.w	r3, r7, #16
 8001218:	68ba      	ldr	r2, [r7, #8]
 800121a:	68f9      	ldr	r1, [r7, #12]
 800121c:	4618      	mov	r0, r3
 800121e:	f7ff ffa7 	bl	8001170 <xy_to_pix>

	if (color)
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d00c      	beq.n	8001242 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8001228:	693b      	ldr	r3, [r7, #16]
 800122a:	683a      	ldr	r2, [r7, #0]
 800122c:	4413      	add	r3, r2
 800122e:	7f19      	ldrb	r1, [r3, #28]
 8001230:	7d3a      	ldrb	r2, [r7, #20]
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	430a      	orrs	r2, r1
 8001236:	b2d1      	uxtb	r1, r2
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	4413      	add	r3, r2
 800123c:	460a      	mov	r2, r1
 800123e:	771a      	strb	r2, [r3, #28]
 8001240:	e012      	b.n	8001268 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8001242:	693b      	ldr	r3, [r7, #16]
 8001244:	683a      	ldr	r2, [r7, #0]
 8001246:	4413      	add	r3, r2
 8001248:	7f1b      	ldrb	r3, [r3, #28]
 800124a:	b25a      	sxtb	r2, r3
 800124c:	7d3b      	ldrb	r3, [r7, #20]
 800124e:	b25b      	sxtb	r3, r3
 8001250:	43db      	mvns	r3, r3
 8001252:	b25b      	sxtb	r3, r3
 8001254:	4013      	ands	r3, r2
 8001256:	b25a      	sxtb	r2, r3
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	b2d1      	uxtb	r1, r2
 800125c:	683a      	ldr	r2, [r7, #0]
 800125e:	4413      	add	r3, r2
 8001260:	460a      	mov	r2, r1
 8001262:	771a      	strb	r2, [r3, #28]
 8001264:	e000      	b.n	8001268 <LCD5110_putpix+0x7a>
		return;
 8001266:	bf00      	nop
}
 8001268:	3718      	adds	r7, #24
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}

0800126e <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 800126e:	b580      	push	{r7, lr}
 8001270:	b088      	sub	sp, #32
 8001272:	af00      	add	r7, sp, #0
 8001274:	60f8      	str	r0, [r7, #12]
 8001276:	60b9      	str	r1, [r7, #8]
 8001278:	607a      	str	r2, [r7, #4]
 800127a:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800127c:	2300      	movs	r3, #0
 800127e:	61fb      	str	r3, [r7, #28]
 8001280:	e03d      	b.n	80012fe <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 8001282:	2300      	movs	r3, #0
 8001284:	61bb      	str	r3, [r7, #24]
 8001286:	e033      	b.n	80012f0 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	2b00      	cmp	r3, #0
 800128c:	da00      	bge.n	8001290 <LCD5110_drawBitmap+0x22>
 800128e:	3307      	adds	r3, #7
 8001290:	10db      	asrs	r3, r3, #3
 8001292:	461a      	mov	r2, r3
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	fb03 f202 	mul.w	r2, r3, r2
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	4413      	add	r3, r2
 800129e:	461a      	mov	r2, r3
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	f003 0307 	and.w	r3, r3, #7
 80012ae:	2201      	movs	r2, #1
 80012b0:	fa02 f303 	lsl.w	r3, r2, r3
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80012ba:	4013      	ands	r3, r2
 80012bc:	b25b      	sxtb	r3, r3
 80012be:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 80012c0:	68fa      	ldr	r2, [r7, #12]
 80012c2:	69fb      	ldr	r3, [r7, #28]
 80012c4:	18d0      	adds	r0, r2, r3
 80012c6:	68ba      	ldr	r2, [r7, #8]
 80012c8:	69bb      	ldr	r3, [r7, #24]
 80012ca:	18d1      	adds	r1, r2, r3
 80012cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d007      	beq.n	80012e2 <LCD5110_drawBitmap+0x74>
 80012d2:	7dfb      	ldrb	r3, [r7, #23]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	bf0c      	ite	eq
 80012d8:	2301      	moveq	r3, #1
 80012da:	2300      	movne	r3, #0
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	461a      	mov	r2, r3
 80012e0:	e000      	b.n	80012e4 <LCD5110_drawBitmap+0x76>
 80012e2:	7dfa      	ldrb	r2, [r7, #23]
 80012e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012e6:	f7ff ff82 	bl	80011ee <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80012ea:	69bb      	ldr	r3, [r7, #24]
 80012ec:	3301      	adds	r3, #1
 80012ee:	61bb      	str	r3, [r7, #24]
 80012f0:	69ba      	ldr	r2, [r7, #24]
 80012f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbc7      	blt.n	8001288 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80012f8:	69fb      	ldr	r3, [r7, #28]
 80012fa:	3301      	adds	r3, #1
 80012fc:	61fb      	str	r3, [r7, #28]
 80012fe:	69fa      	ldr	r2, [r7, #28]
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	429a      	cmp	r2, r3
 8001304:	dbbd      	blt.n	8001282 <LCD5110_drawBitmap+0x14>
		}
	}
}
 8001306:	bf00      	nop
 8001308:	bf00      	nop
 800130a:	3720      	adds	r7, #32
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b082      	sub	sp, #8
 8001314:	af00      	add	r7, sp, #0
 8001316:	4603      	mov	r3, r0
 8001318:	6039      	str	r1, [r7, #0]
 800131a:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	6818      	ldr	r0, [r3, #0]
 8001320:	1df9      	adds	r1, r7, #7
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	2201      	movs	r2, #1
 8001328:	f006 f8bb 	bl	80074a2 <HAL_SPI_Transmit>
 800132c:	4603      	mov	r3, r0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}

08001336 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8001336:	b580      	push	{r7, lr}
 8001338:	b084      	sub	sp, #16
 800133a:	af00      	add	r7, sp, #0
 800133c:	60f8      	str	r0, [r7, #12]
 800133e:	460b      	mov	r3, r1
 8001340:	607a      	str	r2, [r7, #4]
 8001342:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6818      	ldr	r0, [r3, #0]
 8001348:	897a      	ldrh	r2, [r7, #10]
 800134a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800134e:	68f9      	ldr	r1, [r7, #12]
 8001350:	f006 f8a7 	bl	80074a2 <HAL_SPI_Transmit>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3710      	adds	r7, #16
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6898      	ldr	r0, [r3, #8]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	889b      	ldrh	r3, [r3, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	4619      	mov	r1, r3
 8001372:	f003 f99d 	bl	80046b0 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6998      	ldr	r0, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8a9b      	ldrh	r3, [r3, #20]
 800138e:	2201      	movs	r2, #1
 8001390:	4619      	mov	r1, r3
 8001392:	f003 f98d 	bl	80046b0 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6998      	ldr	r0, [r3, #24]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	8a9b      	ldrh	r3, [r3, #20]
 80013ae:	2200      	movs	r2, #0
 80013b0:	4619      	mov	r1, r3
 80013b2:	f003 f97d 	bl	80046b0 <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6918      	ldr	r0, [r3, #16]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	899b      	ldrh	r3, [r3, #12]
 80013ce:	2201      	movs	r2, #1
 80013d0:	4619      	mov	r1, r3
 80013d2:	f003 f96d 	bl	80046b0 <HAL_GPIO_WritePin>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6918      	ldr	r0, [r3, #16]
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	899b      	ldrh	r3, [r3, #12]
 80013ee:	2200      	movs	r2, #0
 80013f0:	4619      	mov	r1, r3
 80013f2:	f003 f95d 	bl	80046b0 <HAL_GPIO_WritePin>
}
 80013f6:	bf00      	nop
 80013f8:	3708      	adds	r7, #8
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 80013fe:	b580      	push	{r7, lr}
 8001400:	b082      	sub	sp, #8
 8001402:	af00      	add	r7, sp, #0
 8001404:	4603      	mov	r3, r0
 8001406:	6039      	str	r1, [r7, #0]
 8001408:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 800140a:	79fb      	ldrb	r3, [r7, #7]
 800140c:	f023 0320 	bic.w	r3, r3, #32
 8001410:	2b07      	cmp	r3, #7
 8001412:	dd01      	ble.n	8001418 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 8001414:	2301      	movs	r3, #1
 8001416:	e008      	b.n	800142a <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8001418:	79fb      	ldrb	r3, [r7, #7]
 800141a:	f043 0320 	orr.w	r3, r3, #32
 800141e:	b2db      	uxtb	r3, r3
 8001420:	6839      	ldr	r1, [r7, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff ff74 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001428:	2300      	movs	r3, #0
}
 800142a:	4618      	mov	r0, r3
 800142c:	3708      	adds	r7, #8
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}

08001432 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8001432:	b580      	push	{r7, lr}
 8001434:	b082      	sub	sp, #8
 8001436:	af00      	add	r7, sp, #0
 8001438:	4603      	mov	r3, r0
 800143a:	6039      	str	r1, [r7, #0]
 800143c:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f023 030d 	bic.w	r3, r3, #13
 8001444:	2b00      	cmp	r3, #0
 8001446:	d001      	beq.n	800144c <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8001448:	2302      	movs	r3, #2
 800144a:	e005      	b.n	8001458 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 800144c:	79fb      	ldrb	r3, [r7, #7]
 800144e:	6839      	ldr	r1, [r7, #0]
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff ff5d 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3708      	adds	r7, #8
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b082      	sub	sp, #8
 8001464:	af00      	add	r7, sp, #0
 8001466:	4603      	mov	r3, r0
 8001468:	6039      	str	r1, [r7, #0]
 800146a:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 800146c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001470:	2b00      	cmp	r3, #0
 8001472:	da01      	bge.n	8001478 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8001474:	2303      	movs	r3, #3
 8001476:	e008      	b.n	800148a <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800147e:	b2db      	uxtb	r3, r3
 8001480:	6839      	ldr	r1, [r7, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f7ff ff44 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}

08001492 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	4603      	mov	r3, r0
 800149a:	6039      	str	r1, [r7, #0]
 800149c:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 800149e:	79fb      	ldrb	r3, [r7, #7]
 80014a0:	2b03      	cmp	r3, #3
 80014a2:	d901      	bls.n	80014a8 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 80014a4:	2304      	movs	r3, #4
 80014a6:	e008      	b.n	80014ba <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	f043 0304 	orr.w	r3, r3, #4
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	6839      	ldr	r1, [r7, #0]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff2c 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80014b8:	2300      	movs	r3, #0
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}

080014c2 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 80014c2:	b580      	push	{r7, lr}
 80014c4:	b082      	sub	sp, #8
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	4603      	mov	r3, r0
 80014ca:	6039      	str	r1, [r7, #0]
 80014cc:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 80014ce:	79fb      	ldrb	r3, [r7, #7]
 80014d0:	2b07      	cmp	r3, #7
 80014d2:	d901      	bls.n	80014d8 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 80014d4:	2305      	movs	r3, #5
 80014d6:	e008      	b.n	80014ea <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 80014d8:	79fb      	ldrb	r3, [r7, #7]
 80014da:	f043 0310 	orr.w	r3, r3, #16
 80014de:	b2db      	uxtb	r3, r3
 80014e0:	6839      	ldr	r1, [r7, #0]
 80014e2:	4618      	mov	r0, r3
 80014e4:	f7ff ff14 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	3708      	adds	r7, #8
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}

080014f2 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 80014f2:	b580      	push	{r7, lr}
 80014f4:	b082      	sub	sp, #8
 80014f6:	af00      	add	r7, sp, #0
 80014f8:	4603      	mov	r3, r0
 80014fa:	6039      	str	r1, [r7, #0]
 80014fc:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 80014fe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001502:	2b00      	cmp	r3, #0
 8001504:	db03      	blt.n	800150e <LCD5110_set_X_base+0x1c>
 8001506:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800150a:	2b53      	cmp	r3, #83	; 0x53
 800150c:	dd01      	ble.n	8001512 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 800150e:	2307      	movs	r3, #7
 8001510:	e00a      	b.n	8001528 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 8001512:	88fb      	ldrh	r3, [r7, #6]
 8001514:	b25b      	sxtb	r3, r3
 8001516:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800151a:	b25b      	sxtb	r3, r3
 800151c:	b2db      	uxtb	r3, r3
 800151e:	6839      	ldr	r1, [r7, #0]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff fef5 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}

08001530 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	6039      	str	r1, [r7, #0]
 800153a:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 800153c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001540:	2b00      	cmp	r3, #0
 8001542:	db03      	blt.n	800154c <LCD5110_set_Y_base+0x1c>
 8001544:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001548:	2b05      	cmp	r3, #5
 800154a:	dd01      	ble.n	8001550 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 800154c:	2307      	movs	r3, #7
 800154e:	e00a      	b.n	8001566 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8001550:	88fb      	ldrh	r3, [r7, #6]
 8001552:	b25b      	sxtb	r3, r3
 8001554:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001558:	b25b      	sxtb	r3, r3
 800155a:	b2db      	uxtb	r3, r3
 800155c:	6839      	ldr	r1, [r7, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f7ff fed6 	bl	8001310 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001564:	2300      	movs	r3, #0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b084      	sub	sp, #16
 8001572:	af00      	add	r7, sp, #0
 8001574:	4603      	mov	r3, r0
 8001576:	603a      	str	r2, [r7, #0]
 8001578:	80fb      	strh	r3, [r7, #6]
 800157a:	460b      	mov	r3, r1
 800157c:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 800157e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001582:	6839      	ldr	r1, [r7, #0]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ffb4 	bl	80014f2 <LCD5110_set_X_base>
 800158a:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <LCD5110_set_XY_base+0x28>
		return res;
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	e00c      	b.n	80015b0 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8001596:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800159a:	6839      	ldr	r1, [r7, #0]
 800159c:	4618      	mov	r0, r3
 800159e:	f7ff ffc7 	bl	8001530 <LCD5110_set_Y_base>
 80015a2:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <LCD5110_set_XY_base+0x40>
		return res;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	e000      	b.n	80015b0 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 80015ae:	2300      	movs	r3, #0
}
 80015b0:	4618      	mov	r0, r3
 80015b2:	3710      	adds	r7, #16
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015d2:	601a      	str	r2, [r3, #0]
}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr

080015e0 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	4608      	mov	r0, r1
 80015ea:	4611      	mov	r1, r2
 80015ec:	461a      	mov	r2, r3
 80015ee:	4603      	mov	r3, r0
 80015f0:	70fb      	strb	r3, [r7, #3]
 80015f2:	460b      	mov	r3, r1
 80015f4:	70bb      	strb	r3, [r7, #2]
 80015f6:	4613      	mov	r3, r2
 80015f8:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 80015fa:	6878      	ldr	r0, [r7, #4]
 80015fc:	f7ff ffdc 	bl	80015b8 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8001600:	6878      	ldr	r0, [r7, #4]
 8001602:	f7ff feac 	bl	800135e <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 8001606:	6878      	ldr	r0, [r7, #4]
 8001608:	f7ff fee9 	bl	80013de <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 800160c:	2364      	movs	r3, #100	; 0x64
 800160e:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8001610:	bf00      	nop
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	3b01      	subs	r3, #1
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1fa      	bne.n	8001612 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff fece 	bl	80013be <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8001622:	6878      	ldr	r0, [r7, #4]
 8001624:	f7ff febb 	bl	800139e <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8001628:	6879      	ldr	r1, [r7, #4]
 800162a:	2001      	movs	r0, #1
 800162c:	f7ff fee7 	bl	80013fe <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8001630:	78bb      	ldrb	r3, [r7, #2]
 8001632:	6879      	ldr	r1, [r7, #4]
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff ff13 	bl	8001460 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 800163a:	787b      	ldrb	r3, [r7, #1]
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff ff27 	bl	8001492 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8001644:	7e3b      	ldrb	r3, [r7, #24]
 8001646:	6879      	ldr	r1, [r7, #4]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff ff3a 	bl	80014c2 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 800164e:	6879      	ldr	r1, [r7, #4]
 8001650:	2000      	movs	r0, #0
 8001652:	f7ff fed4 	bl	80013fe <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8001656:	78fb      	ldrb	r3, [r7, #3]
 8001658:	6879      	ldr	r1, [r7, #4]
 800165a:	4618      	mov	r0, r3
 800165c:	f7ff fee9 	bl	8001432 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8001660:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001662:	4618      	mov	r0, r3
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff fe73 	bl	800135e <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8001678:	6878      	ldr	r0, [r7, #4]
 800167a:	f7ff fe90 	bl	800139e <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 800167e:	687a      	ldr	r2, [r7, #4]
 8001680:	2100      	movs	r1, #0
 8001682:	2000      	movs	r0, #0
 8001684:	f7ff ff73 	bl	800156e <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8001688:	6878      	ldr	r0, [r7, #4]
 800168a:	f7ff fe78 	bl	800137e <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	331c      	adds	r3, #28
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001698:	4618      	mov	r0, r3
 800169a:	f7ff fe4c 	bl	8001336 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800169e:	bf00      	nop
 80016a0:	3708      	adds	r7, #8
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
	...

080016a8 <initializeSnake>:

SnakeSegment snake[MAX_SNAKE_SIZE];

SnakeSegment apple;

void initializeSnake() {
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
    for (int i = 0; i < SNAKE_SIZE; ++i) {
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
 80016b2:	e00f      	b.n	80016d4 <initializeSnake+0x2c>
        snake[i].x = i + 10;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	f103 020a 	add.w	r2, r3, #10
 80016ba:	490c      	ldr	r1, [pc, #48]	; (80016ec <initializeSnake+0x44>)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        snake[i].y = 24;
 80016c2:	4a0a      	ldr	r2, [pc, #40]	; (80016ec <initializeSnake+0x44>)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	00db      	lsls	r3, r3, #3
 80016c8:	4413      	add	r3, r2
 80016ca:	2218      	movs	r2, #24
 80016cc:	605a      	str	r2, [r3, #4]
    for (int i = 0; i < SNAKE_SIZE; ++i) {
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	4b06      	ldr	r3, [pc, #24]	; (80016f0 <initializeSnake+0x48>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	687a      	ldr	r2, [r7, #4]
 80016da:	429a      	cmp	r2, r3
 80016dc:	dbea      	blt.n	80016b4 <initializeSnake+0xc>
    }
}
 80016de:	bf00      	nop
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	200043e4 	.word	0x200043e4
 80016f0:	20000020 	.word	0x20000020

080016f4 <initializeApple>:

void initializeApple() {
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
    generateRandomApplePosition();
 80016f8:	f000 f802 	bl	8001700 <generateRandomApplePosition>
}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}

08001700 <generateRandomApplePosition>:

void generateRandomApplePosition() {
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
    srand(HAL_GetTick());
 8001704:	f002 fc64 	bl	8003fd0 <HAL_GetTick>
 8001708:	4603      	mov	r3, r0
 800170a:	4618      	mov	r0, r3
 800170c:	f00b f83a 	bl	800c784 <srand>

    while (1) {
        apple.x = rand() % (MAP_WIDTH - 8) + 2;
 8001710:	f00b f866 	bl	800c7e0 <rand>
 8001714:	4602      	mov	r2, r0
 8001716:	4b16      	ldr	r3, [pc, #88]	; (8001770 <generateRandomApplePosition+0x70>)
 8001718:	fb83 1302 	smull	r1, r3, r3, r2
 800171c:	1159      	asrs	r1, r3, #5
 800171e:	17d3      	asrs	r3, r2, #31
 8001720:	1acb      	subs	r3, r1, r3
 8001722:	214c      	movs	r1, #76	; 0x4c
 8001724:	fb01 f303 	mul.w	r3, r1, r3
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	3302      	adds	r3, #2
 800172c:	4a11      	ldr	r2, [pc, #68]	; (8001774 <generateRandomApplePosition+0x74>)
 800172e:	6013      	str	r3, [r2, #0]
        apple.y = rand() % (MAP_HEIGHT - 8) + 2;
 8001730:	f00b f856 	bl	800c7e0 <rand>
 8001734:	4601      	mov	r1, r0
 8001736:	4b10      	ldr	r3, [pc, #64]	; (8001778 <generateRandomApplePosition+0x78>)
 8001738:	fb83 2301 	smull	r2, r3, r3, r1
 800173c:	111a      	asrs	r2, r3, #4
 800173e:	17cb      	asrs	r3, r1, #31
 8001740:	1ad2      	subs	r2, r2, r3
 8001742:	4613      	mov	r3, r2
 8001744:	009b      	lsls	r3, r3, #2
 8001746:	4413      	add	r3, r2
 8001748:	00db      	lsls	r3, r3, #3
 800174a:	1aca      	subs	r2, r1, r3
 800174c:	1c93      	adds	r3, r2, #2
 800174e:	4a09      	ldr	r2, [pc, #36]	; (8001774 <generateRandomApplePosition+0x74>)
 8001750:	6053      	str	r3, [r2, #4]

        if (isPositionEmpty(apple.x, apple.y)) {
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <generateRandomApplePosition+0x74>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4a07      	ldr	r2, [pc, #28]	; (8001774 <generateRandomApplePosition+0x74>)
 8001758:	6852      	ldr	r2, [r2, #4]
 800175a:	4611      	mov	r1, r2
 800175c:	4618      	mov	r0, r3
 800175e:	f000 f80d 	bl	800177c <isPositionEmpty>
 8001762:	4603      	mov	r3, r0
 8001764:	2b00      	cmp	r3, #0
 8001766:	d100      	bne.n	800176a <generateRandomApplePosition+0x6a>
        apple.x = rand() % (MAP_WIDTH - 8) + 2;
 8001768:	e7d2      	b.n	8001710 <generateRandomApplePosition+0x10>
            break;
 800176a:	bf00      	nop
        }
    }
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}
 8001770:	6bca1af3 	.word	0x6bca1af3
 8001774:	200044ac 	.word	0x200044ac
 8001778:	66666667 	.word	0x66666667

0800177c <isPositionEmpty>:

int isPositionEmpty(int x, int y) {
 800177c:	b480      	push	{r7}
 800177e:	b085      	sub	sp, #20
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < SNAKE_SIZE; ++i) {
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	e013      	b.n	80017b4 <isPositionEmpty+0x38>
        if (snake[i].x == x && snake[i].y == y) {
 800178c:	4a16      	ldr	r2, [pc, #88]	; (80017e8 <isPositionEmpty+0x6c>)
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001794:	687a      	ldr	r2, [r7, #4]
 8001796:	429a      	cmp	r2, r3
 8001798:	d109      	bne.n	80017ae <isPositionEmpty+0x32>
 800179a:	4a13      	ldr	r2, [pc, #76]	; (80017e8 <isPositionEmpty+0x6c>)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	00db      	lsls	r3, r3, #3
 80017a0:	4413      	add	r3, r2
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	683a      	ldr	r2, [r7, #0]
 80017a6:	429a      	cmp	r2, r3
 80017a8:	d101      	bne.n	80017ae <isPositionEmpty+0x32>
            return 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	e015      	b.n	80017da <isPositionEmpty+0x5e>
    for (int i = 0; i < SNAKE_SIZE; ++i) {
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	4b0d      	ldr	r3, [pc, #52]	; (80017ec <isPositionEmpty+0x70>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	68fa      	ldr	r2, [r7, #12]
 80017ba:	429a      	cmp	r2, r3
 80017bc:	dbe6      	blt.n	800178c <isPositionEmpty+0x10>
        }
    }

    if (map[y][x] == BLACK) {
 80017be:	490c      	ldr	r1, [pc, #48]	; (80017f0 <isPositionEmpty+0x74>)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	2254      	movs	r2, #84	; 0x54
 80017c4:	fb03 f202 	mul.w	r2, r3, r2
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	4413      	add	r3, r2
 80017cc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d101      	bne.n	80017d8 <isPositionEmpty+0x5c>
        return 0;
 80017d4:	2300      	movs	r3, #0
 80017d6:	e000      	b.n	80017da <isPositionEmpty+0x5e>
    }

    return 1;
 80017d8:	2301      	movs	r3, #1
}
 80017da:	4618      	mov	r0, r3
 80017dc:	3714      	adds	r7, #20
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	200043e4 	.word	0x200043e4
 80017ec:	20000020 	.word	0x20000020
 80017f0:	200004e0 	.word	0x200004e0

080017f4 <drawApple>:

void drawApple(LCD5110_display* lcd_conf) {
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b082      	sub	sp, #8
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
    LCD5110_putpix(apple.x, apple.y, BLACK, &lcd_conf->hw_conf);
 80017fc:	4b13      	ldr	r3, [pc, #76]	; (800184c <drawApple+0x58>)
 80017fe:	6818      	ldr	r0, [r3, #0]
 8001800:	4b12      	ldr	r3, [pc, #72]	; (800184c <drawApple+0x58>)
 8001802:	6859      	ldr	r1, [r3, #4]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f7ff fcf1 	bl	80011ee <LCD5110_putpix>
    LCD5110_putpix(apple.x, apple.y + 1, BLACK, &lcd_conf->hw_conf);
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <drawApple+0x58>)
 800180e:	6818      	ldr	r0, [r3, #0]
 8001810:	4b0e      	ldr	r3, [pc, #56]	; (800184c <drawApple+0x58>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	1c59      	adds	r1, r3, #1
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	2201      	movs	r2, #1
 800181a:	f7ff fce8 	bl	80011ee <LCD5110_putpix>
    LCD5110_putpix(apple.x + 1, apple.y, BLACK, &lcd_conf->hw_conf);
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <drawApple+0x58>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	1c58      	adds	r0, r3, #1
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <drawApple+0x58>)
 8001826:	6859      	ldr	r1, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2201      	movs	r2, #1
 800182c:	f7ff fcdf 	bl	80011ee <LCD5110_putpix>
    LCD5110_putpix(apple.x + 1, apple.y + 1, BLACK, &lcd_conf->hw_conf);
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <drawApple+0x58>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	1c58      	adds	r0, r3, #1
 8001836:	4b05      	ldr	r3, [pc, #20]	; (800184c <drawApple+0x58>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	1c59      	adds	r1, r3, #1
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2201      	movs	r2, #1
 8001840:	f7ff fcd5 	bl	80011ee <LCD5110_putpix>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200044ac 	.word	0x200044ac

08001850 <moveSnake>:

void moveSnake(LCD5110_display* lcd_conf) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]

	LCD5110_putpix(snake[SNAKE_SIZE-1].x, snake[SNAKE_SIZE-1].y, WHITE, &lcd_conf->hw_conf);
 8001858:	4b8a      	ldr	r3, [pc, #552]	; (8001a84 <moveSnake+0x234>)
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	3b01      	subs	r3, #1
 800185e:	4a8a      	ldr	r2, [pc, #552]	; (8001a88 <moveSnake+0x238>)
 8001860:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001864:	4b87      	ldr	r3, [pc, #540]	; (8001a84 <moveSnake+0x234>)
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	3b01      	subs	r3, #1
 800186a:	4a87      	ldr	r2, [pc, #540]	; (8001a88 <moveSnake+0x238>)
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	4413      	add	r3, r2
 8001870:	6859      	ldr	r1, [r3, #4]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	f7ff fcba 	bl	80011ee <LCD5110_putpix>
	LCD5110_putpix(snake[SNAKE_SIZE-1].x, snake[SNAKE_SIZE-1].y + 1, WHITE, &lcd_conf->hw_conf);
 800187a:	4b82      	ldr	r3, [pc, #520]	; (8001a84 <moveSnake+0x234>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	3b01      	subs	r3, #1
 8001880:	4a81      	ldr	r2, [pc, #516]	; (8001a88 <moveSnake+0x238>)
 8001882:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001886:	4b7f      	ldr	r3, [pc, #508]	; (8001a84 <moveSnake+0x234>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	3b01      	subs	r3, #1
 800188c:	4a7e      	ldr	r2, [pc, #504]	; (8001a88 <moveSnake+0x238>)
 800188e:	00db      	lsls	r3, r3, #3
 8001890:	4413      	add	r3, r2
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	1c59      	adds	r1, r3, #1
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2200      	movs	r2, #0
 800189a:	f7ff fca8 	bl	80011ee <LCD5110_putpix>
	LCD5110_putpix(snake[SNAKE_SIZE-1].x + 1, snake[SNAKE_SIZE-1].y, WHITE, &lcd_conf->hw_conf);
 800189e:	4b79      	ldr	r3, [pc, #484]	; (8001a84 <moveSnake+0x234>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	3b01      	subs	r3, #1
 80018a4:	4a78      	ldr	r2, [pc, #480]	; (8001a88 <moveSnake+0x238>)
 80018a6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018aa:	1c58      	adds	r0, r3, #1
 80018ac:	4b75      	ldr	r3, [pc, #468]	; (8001a84 <moveSnake+0x234>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	3b01      	subs	r3, #1
 80018b2:	4a75      	ldr	r2, [pc, #468]	; (8001a88 <moveSnake+0x238>)
 80018b4:	00db      	lsls	r3, r3, #3
 80018b6:	4413      	add	r3, r2
 80018b8:	6859      	ldr	r1, [r3, #4]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2200      	movs	r2, #0
 80018be:	f7ff fc96 	bl	80011ee <LCD5110_putpix>
	LCD5110_putpix(snake[SNAKE_SIZE-1].x + 1, snake[SNAKE_SIZE-1].y + 1, WHITE, &lcd_conf->hw_conf);
 80018c2:	4b70      	ldr	r3, [pc, #448]	; (8001a84 <moveSnake+0x234>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	4a6f      	ldr	r2, [pc, #444]	; (8001a88 <moveSnake+0x238>)
 80018ca:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80018ce:	1c58      	adds	r0, r3, #1
 80018d0:	4b6c      	ldr	r3, [pc, #432]	; (8001a84 <moveSnake+0x234>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	3b01      	subs	r3, #1
 80018d6:	4a6c      	ldr	r2, [pc, #432]	; (8001a88 <moveSnake+0x238>)
 80018d8:	00db      	lsls	r3, r3, #3
 80018da:	4413      	add	r3, r2
 80018dc:	685b      	ldr	r3, [r3, #4]
 80018de:	1c59      	adds	r1, r3, #1
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f7ff fc83 	bl	80011ee <LCD5110_putpix>

    for (int i = SNAKE_SIZE - 1; i > 0; --i) {
 80018e8:	4b66      	ldr	r3, [pc, #408]	; (8001a84 <moveSnake+0x234>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	3b01      	subs	r3, #1
 80018ee:	617b      	str	r3, [r7, #20]
 80018f0:	e00f      	b.n	8001912 <moveSnake+0xc2>
        snake[i] = snake[i - 1];
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	1e5a      	subs	r2, r3, #1
 80018f6:	4864      	ldr	r0, [pc, #400]	; (8001a88 <moveSnake+0x238>)
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	4963      	ldr	r1, [pc, #396]	; (8001a88 <moveSnake+0x238>)
 80018fc:	00db      	lsls	r3, r3, #3
 80018fe:	4403      	add	r3, r0
 8001900:	00d2      	lsls	r2, r2, #3
 8001902:	440a      	add	r2, r1
 8001904:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001908:	e883 0003 	stmia.w	r3, {r0, r1}
    for (int i = SNAKE_SIZE - 1; i > 0; --i) {
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	3b01      	subs	r3, #1
 8001910:	617b      	str	r3, [r7, #20]
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b00      	cmp	r3, #0
 8001916:	dcec      	bgt.n	80018f2 <moveSnake+0xa2>
    }


    if (DIRECTION == RIGHT){
 8001918:	4b5c      	ldr	r3, [pc, #368]	; (8001a8c <moveSnake+0x23c>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2b02      	cmp	r3, #2
 800191e:	d105      	bne.n	800192c <moveSnake+0xdc>
    	snake[0].x += 2;
 8001920:	4b59      	ldr	r3, [pc, #356]	; (8001a88 <moveSnake+0x238>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	3302      	adds	r3, #2
 8001926:	4a58      	ldr	r2, [pc, #352]	; (8001a88 <moveSnake+0x238>)
 8001928:	6013      	str	r3, [r2, #0]
 800192a:	e01c      	b.n	8001966 <moveSnake+0x116>
    }
    else if (DIRECTION == UP){
 800192c:	4b57      	ldr	r3, [pc, #348]	; (8001a8c <moveSnake+0x23c>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b01      	cmp	r3, #1
 8001932:	d105      	bne.n	8001940 <moveSnake+0xf0>
    	snake[0].y -= 2;
 8001934:	4b54      	ldr	r3, [pc, #336]	; (8001a88 <moveSnake+0x238>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	3b02      	subs	r3, #2
 800193a:	4a53      	ldr	r2, [pc, #332]	; (8001a88 <moveSnake+0x238>)
 800193c:	6053      	str	r3, [r2, #4]
 800193e:	e012      	b.n	8001966 <moveSnake+0x116>
    }
    else if (DIRECTION == LEFT){
 8001940:	4b52      	ldr	r3, [pc, #328]	; (8001a8c <moveSnake+0x23c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d105      	bne.n	8001954 <moveSnake+0x104>
    	snake[0].x -= 2;
 8001948:	4b4f      	ldr	r3, [pc, #316]	; (8001a88 <moveSnake+0x238>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	3b02      	subs	r3, #2
 800194e:	4a4e      	ldr	r2, [pc, #312]	; (8001a88 <moveSnake+0x238>)
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e008      	b.n	8001966 <moveSnake+0x116>
    }
    else if (DIRECTION == DOWN){
 8001954:	4b4d      	ldr	r3, [pc, #308]	; (8001a8c <moveSnake+0x23c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	2b03      	cmp	r3, #3
 800195a:	d104      	bne.n	8001966 <moveSnake+0x116>
    	snake[0].y += 2;
 800195c:	4b4a      	ldr	r3, [pc, #296]	; (8001a88 <moveSnake+0x238>)
 800195e:	685b      	ldr	r3, [r3, #4]
 8001960:	3302      	adds	r3, #2
 8001962:	4a49      	ldr	r2, [pc, #292]	; (8001a88 <moveSnake+0x238>)
 8001964:	6053      	str	r3, [r2, #4]
    }

    if (DIRECTION == RIGHT || DIRECTION == DOWN){
 8001966:	4b49      	ldr	r3, [pc, #292]	; (8001a8c <moveSnake+0x23c>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d003      	beq.n	8001976 <moveSnake+0x126>
 800196e:	4b47      	ldr	r3, [pc, #284]	; (8001a8c <moveSnake+0x23c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b03      	cmp	r3, #3
 8001974:	d113      	bne.n	800199e <moveSnake+0x14e>
    	if (snake[0].x <= 1 || snake[0].x >= MAP_WIDTH - 2 || snake[0].y <= 1 || snake[0].y >= MAP_HEIGHT - 2) {
 8001976:	4b44      	ldr	r3, [pc, #272]	; (8001a88 <moveSnake+0x238>)
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	2b01      	cmp	r3, #1
 800197c:	dd0b      	ble.n	8001996 <moveSnake+0x146>
 800197e:	4b42      	ldr	r3, [pc, #264]	; (8001a88 <moveSnake+0x238>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2b51      	cmp	r3, #81	; 0x51
 8001984:	dc07      	bgt.n	8001996 <moveSnake+0x146>
 8001986:	4b40      	ldr	r3, [pc, #256]	; (8001a88 <moveSnake+0x238>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	2b01      	cmp	r3, #1
 800198c:	dd03      	ble.n	8001996 <moveSnake+0x146>
 800198e:	4b3e      	ldr	r3, [pc, #248]	; (8001a88 <moveSnake+0x238>)
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	2b2d      	cmp	r3, #45	; 0x2d
 8001994:	dd17      	ble.n	80019c6 <moveSnake+0x176>
			isDead = true;
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <moveSnake+0x240>)
 8001998:	2201      	movs	r2, #1
 800199a:	701a      	strb	r2, [r3, #0]
    	if (snake[0].x <= 1 || snake[0].x >= MAP_WIDTH - 2 || snake[0].y <= 1 || snake[0].y >= MAP_HEIGHT - 2) {
 800199c:	e013      	b.n	80019c6 <moveSnake+0x176>
		}
    }else{
    	if (snake[0].x + 1 <= 1 || snake[0].x + 1 >= MAP_WIDTH - 2 || snake[0].y + 1 <= 1 || snake[0].y + 1 >= MAP_HEIGHT - 2) {
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <moveSnake+0x238>)
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	dd0b      	ble.n	80019be <moveSnake+0x16e>
 80019a6:	4b38      	ldr	r3, [pc, #224]	; (8001a88 <moveSnake+0x238>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	2b50      	cmp	r3, #80	; 0x50
 80019ac:	dc07      	bgt.n	80019be <moveSnake+0x16e>
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <moveSnake+0x238>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	dd03      	ble.n	80019be <moveSnake+0x16e>
 80019b6:	4b34      	ldr	r3, [pc, #208]	; (8001a88 <moveSnake+0x238>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	2b2c      	cmp	r3, #44	; 0x2c
 80019bc:	dd04      	ble.n	80019c8 <moveSnake+0x178>
			isDead = true;
 80019be:	4b34      	ldr	r3, [pc, #208]	; (8001a90 <moveSnake+0x240>)
 80019c0:	2201      	movs	r2, #1
 80019c2:	701a      	strb	r2, [r3, #0]
 80019c4:	e000      	b.n	80019c8 <moveSnake+0x178>
    	if (snake[0].x <= 1 || snake[0].x >= MAP_WIDTH - 2 || snake[0].y <= 1 || snake[0].y >= MAP_HEIGHT - 2) {
 80019c6:	bf00      	nop
		}
    }


    for (int i = 1; i < SNAKE_SIZE; ++i) {
 80019c8:	2301      	movs	r3, #1
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	e0b9      	b.n	8001b42 <moveSnake+0x2f2>
    	if (DIRECTION == RIGHT){
 80019ce:	4b2f      	ldr	r3, [pc, #188]	; (8001a8c <moveSnake+0x23c>)
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	2b02      	cmp	r3, #2
 80019d4:	d12a      	bne.n	8001a2c <moveSnake+0x1dc>
    		if ( (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y) ||
 80019d6:	4b2c      	ldr	r3, [pc, #176]	; (8001a88 <moveSnake+0x238>)
 80019d8:	681a      	ldr	r2, [r3, #0]
 80019da:	492b      	ldr	r1, [pc, #172]	; (8001a88 <moveSnake+0x238>)
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 80019e2:	3301      	adds	r3, #1
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d108      	bne.n	80019fa <moveSnake+0x1aa>
 80019e8:	4b27      	ldr	r3, [pc, #156]	; (8001a88 <moveSnake+0x238>)
 80019ea:	685a      	ldr	r2, [r3, #4]
 80019ec:	4926      	ldr	r1, [pc, #152]	; (8001a88 <moveSnake+0x238>)
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	440b      	add	r3, r1
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d014      	beq.n	8001a24 <moveSnake+0x1d4>
    			 (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y + 1)) {
 80019fa:	4b23      	ldr	r3, [pc, #140]	; (8001a88 <moveSnake+0x238>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	4922      	ldr	r1, [pc, #136]	; (8001a88 <moveSnake+0x238>)
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001a06:	3301      	adds	r3, #1
    		if ( (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y) ||
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	f040 8097 	bne.w	8001b3c <moveSnake+0x2ec>
    			 (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y + 1)) {
 8001a0e:	4b1e      	ldr	r3, [pc, #120]	; (8001a88 <moveSnake+0x238>)
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	491d      	ldr	r1, [pc, #116]	; (8001a88 <moveSnake+0x238>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	00db      	lsls	r3, r3, #3
 8001a18:	440b      	add	r3, r1
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	3301      	adds	r3, #1
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	f040 808c 	bne.w	8001b3c <moveSnake+0x2ec>
				isDead = true;
 8001a24:	4b1a      	ldr	r3, [pc, #104]	; (8001a90 <moveSnake+0x240>)
 8001a26:	2201      	movs	r2, #1
 8001a28:	701a      	strb	r2, [r3, #0]
				break;
 8001a2a:	e090      	b.n	8001b4e <moveSnake+0x2fe>
			}
    	}
    	else if (DIRECTION == LEFT){
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <moveSnake+0x23c>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d12f      	bne.n	8001a94 <moveSnake+0x244>
    		if ( (snake[0].x == snake[i].x && snake[0].y == snake[i].y) ||
 8001a34:	4b14      	ldr	r3, [pc, #80]	; (8001a88 <moveSnake+0x238>)
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	4913      	ldr	r1, [pc, #76]	; (8001a88 <moveSnake+0x238>)
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	d108      	bne.n	8001a56 <moveSnake+0x206>
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <moveSnake+0x238>)
 8001a46:	685a      	ldr	r2, [r3, #4]
 8001a48:	490f      	ldr	r1, [pc, #60]	; (8001a88 <moveSnake+0x238>)
 8001a4a:	693b      	ldr	r3, [r7, #16]
 8001a4c:	00db      	lsls	r3, r3, #3
 8001a4e:	440b      	add	r3, r1
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	429a      	cmp	r2, r3
 8001a54:	d011      	beq.n	8001a7a <moveSnake+0x22a>
				 (snake[0].x == snake[i].x && snake[0].y == snake[i].y + 1)) {
 8001a56:	4b0c      	ldr	r3, [pc, #48]	; (8001a88 <moveSnake+0x238>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	490b      	ldr	r1, [pc, #44]	; (8001a88 <moveSnake+0x238>)
 8001a5c:	693b      	ldr	r3, [r7, #16]
 8001a5e:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
    		if ( (snake[0].x == snake[i].x && snake[0].y == snake[i].y) ||
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d16a      	bne.n	8001b3c <moveSnake+0x2ec>
				 (snake[0].x == snake[i].x && snake[0].y == snake[i].y + 1)) {
 8001a66:	4b08      	ldr	r3, [pc, #32]	; (8001a88 <moveSnake+0x238>)
 8001a68:	685a      	ldr	r2, [r3, #4]
 8001a6a:	4907      	ldr	r1, [pc, #28]	; (8001a88 <moveSnake+0x238>)
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	00db      	lsls	r3, r3, #3
 8001a70:	440b      	add	r3, r1
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	3301      	adds	r3, #1
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d160      	bne.n	8001b3c <moveSnake+0x2ec>
				isDead = true;
 8001a7a:	4b05      	ldr	r3, [pc, #20]	; (8001a90 <moveSnake+0x240>)
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	701a      	strb	r2, [r3, #0]
				break;
 8001a80:	e065      	b.n	8001b4e <moveSnake+0x2fe>
 8001a82:	bf00      	nop
 8001a84:	20000020 	.word	0x20000020
 8001a88:	200043e4 	.word	0x200043e4
 8001a8c:	20000024 	.word	0x20000024
 8001a90:	200043e0 	.word	0x200043e0
			}
    	}
    	else if (DIRECTION == UP){
 8001a94:	4b31      	ldr	r3, [pc, #196]	; (8001b5c <moveSnake+0x30c>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d126      	bne.n	8001aea <moveSnake+0x29a>
    		if ( (snake[0].x == snake[i].x && snake[0].y == snake[i].y) ||
 8001a9c:	4b30      	ldr	r3, [pc, #192]	; (8001b60 <moveSnake+0x310>)
 8001a9e:	681a      	ldr	r2, [r3, #0]
 8001aa0:	492f      	ldr	r1, [pc, #188]	; (8001b60 <moveSnake+0x310>)
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d108      	bne.n	8001abe <moveSnake+0x26e>
 8001aac:	4b2c      	ldr	r3, [pc, #176]	; (8001b60 <moveSnake+0x310>)
 8001aae:	685a      	ldr	r2, [r3, #4]
 8001ab0:	492b      	ldr	r1, [pc, #172]	; (8001b60 <moveSnake+0x310>)
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	00db      	lsls	r3, r3, #3
 8001ab6:	440b      	add	r3, r1
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	429a      	cmp	r2, r3
 8001abc:	d011      	beq.n	8001ae2 <moveSnake+0x292>
				 (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y)) {
 8001abe:	4b28      	ldr	r3, [pc, #160]	; (8001b60 <moveSnake+0x310>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4927      	ldr	r1, [pc, #156]	; (8001b60 <moveSnake+0x310>)
 8001ac4:	693b      	ldr	r3, [r7, #16]
 8001ac6:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001aca:	3301      	adds	r3, #1
    		if ( (snake[0].x == snake[i].x && snake[0].y == snake[i].y) ||
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d135      	bne.n	8001b3c <moveSnake+0x2ec>
				 (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y)) {
 8001ad0:	4b23      	ldr	r3, [pc, #140]	; (8001b60 <moveSnake+0x310>)
 8001ad2:	685a      	ldr	r2, [r3, #4]
 8001ad4:	4922      	ldr	r1, [pc, #136]	; (8001b60 <moveSnake+0x310>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	00db      	lsls	r3, r3, #3
 8001ada:	440b      	add	r3, r1
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d12c      	bne.n	8001b3c <moveSnake+0x2ec>
				isDead = true;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <moveSnake+0x314>)
 8001ae4:	2201      	movs	r2, #1
 8001ae6:	701a      	strb	r2, [r3, #0]
				break;
 8001ae8:	e031      	b.n	8001b4e <moveSnake+0x2fe>
			}
    	}
    	else{
    		if ( (snake[0].x == snake[i].x && snake[0].y == snake[i].y + 1) ||
 8001aea:	4b1d      	ldr	r3, [pc, #116]	; (8001b60 <moveSnake+0x310>)
 8001aec:	681a      	ldr	r2, [r3, #0]
 8001aee:	491c      	ldr	r1, [pc, #112]	; (8001b60 <moveSnake+0x310>)
 8001af0:	693b      	ldr	r3, [r7, #16]
 8001af2:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d109      	bne.n	8001b0e <moveSnake+0x2be>
 8001afa:	4b19      	ldr	r3, [pc, #100]	; (8001b60 <moveSnake+0x310>)
 8001afc:	685a      	ldr	r2, [r3, #4]
 8001afe:	4918      	ldr	r1, [pc, #96]	; (8001b60 <moveSnake+0x310>)
 8001b00:	693b      	ldr	r3, [r7, #16]
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	440b      	add	r3, r1
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	429a      	cmp	r2, r3
 8001b0c:	d012      	beq.n	8001b34 <moveSnake+0x2e4>
				 (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y + 1)) {
 8001b0e:	4b14      	ldr	r3, [pc, #80]	; (8001b60 <moveSnake+0x310>)
 8001b10:	681a      	ldr	r2, [r3, #0]
 8001b12:	4913      	ldr	r1, [pc, #76]	; (8001b60 <moveSnake+0x310>)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f851 3033 	ldr.w	r3, [r1, r3, lsl #3]
 8001b1a:	3301      	adds	r3, #1
    		if ( (snake[0].x == snake[i].x && snake[0].y == snake[i].y + 1) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d10d      	bne.n	8001b3c <moveSnake+0x2ec>
				 (snake[0].x == snake[i].x + 1 && snake[0].y == snake[i].y + 1)) {
 8001b20:	4b0f      	ldr	r3, [pc, #60]	; (8001b60 <moveSnake+0x310>)
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	490e      	ldr	r1, [pc, #56]	; (8001b60 <moveSnake+0x310>)
 8001b26:	693b      	ldr	r3, [r7, #16]
 8001b28:	00db      	lsls	r3, r3, #3
 8001b2a:	440b      	add	r3, r1
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d103      	bne.n	8001b3c <moveSnake+0x2ec>
				isDead = true;
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <moveSnake+0x314>)
 8001b36:	2201      	movs	r2, #1
 8001b38:	701a      	strb	r2, [r3, #0]
				break;
 8001b3a:	e008      	b.n	8001b4e <moveSnake+0x2fe>
    for (int i = 1; i < SNAKE_SIZE; ++i) {
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	613b      	str	r3, [r7, #16]
 8001b42:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <moveSnake+0x318>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f6ff af40 	blt.w	80019ce <moveSnake+0x17e>
			}
    	}
    }

	if (isDead) {
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <moveSnake+0x314>)
 8001b50:	781b      	ldrb	r3, [r3, #0]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d07b      	beq.n	8001c4e <moveSnake+0x3fe>
		for (int i = 1; i < SNAKE_SIZE; ++i) {
 8001b56:	2301      	movs	r3, #1
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	e042      	b.n	8001be2 <moveSnake+0x392>
 8001b5c:	20000024 	.word	0x20000024
 8001b60:	200043e4 	.word	0x200043e4
 8001b64:	200043e0 	.word	0x200043e0
 8001b68:	20000020 	.word	0x20000020
			LCD5110_putpix(snake[i].x, snake[i].y, WHITE, &lcd_conf->hw_conf);
 8001b6c:	4a93      	ldr	r2, [pc, #588]	; (8001dbc <moveSnake+0x56c>)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b74:	4a91      	ldr	r2, [pc, #580]	; (8001dbc <moveSnake+0x56c>)
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	00db      	lsls	r3, r3, #3
 8001b7a:	4413      	add	r3, r2
 8001b7c:	6859      	ldr	r1, [r3, #4]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	2200      	movs	r2, #0
 8001b82:	f7ff fb34 	bl	80011ee <LCD5110_putpix>
			LCD5110_putpix(snake[i].x, snake[i].y + 1, WHITE, &lcd_conf->hw_conf);
 8001b86:	4a8d      	ldr	r2, [pc, #564]	; (8001dbc <moveSnake+0x56c>)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001b8e:	4a8b      	ldr	r2, [pc, #556]	; (8001dbc <moveSnake+0x56c>)
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	00db      	lsls	r3, r3, #3
 8001b94:	4413      	add	r3, r2
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	1c59      	adds	r1, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	f7ff fb26 	bl	80011ee <LCD5110_putpix>
			LCD5110_putpix(snake[i].x + 1, snake[i].y, WHITE, &lcd_conf->hw_conf);
 8001ba2:	4a86      	ldr	r2, [pc, #536]	; (8001dbc <moveSnake+0x56c>)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001baa:	1c58      	adds	r0, r3, #1
 8001bac:	4a83      	ldr	r2, [pc, #524]	; (8001dbc <moveSnake+0x56c>)
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	00db      	lsls	r3, r3, #3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	6859      	ldr	r1, [r3, #4]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	f7ff fb18 	bl	80011ee <LCD5110_putpix>
			LCD5110_putpix(snake[i].x + 1, snake[i].y + 1, WHITE, &lcd_conf->hw_conf);
 8001bbe:	4a7f      	ldr	r2, [pc, #508]	; (8001dbc <moveSnake+0x56c>)
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001bc6:	1c58      	adds	r0, r3, #1
 8001bc8:	4a7c      	ldr	r2, [pc, #496]	; (8001dbc <moveSnake+0x56c>)
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	00db      	lsls	r3, r3, #3
 8001bce:	4413      	add	r3, r2
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	1c59      	adds	r1, r3, #1
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f7ff fb09 	bl	80011ee <LCD5110_putpix>
		for (int i = 1; i < SNAKE_SIZE; ++i) {
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	3301      	adds	r3, #1
 8001be0:	60fb      	str	r3, [r7, #12]
 8001be2:	4b77      	ldr	r3, [pc, #476]	; (8001dc0 <moveSnake+0x570>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68fa      	ldr	r2, [r7, #12]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	dbbf      	blt.n	8001b6c <moveSnake+0x31c>
		}

		LCD5110_putpix(apple.x, apple.y, WHITE, &lcd_conf->hw_conf);
 8001bec:	4b75      	ldr	r3, [pc, #468]	; (8001dc4 <moveSnake+0x574>)
 8001bee:	6818      	ldr	r0, [r3, #0]
 8001bf0:	4b74      	ldr	r3, [pc, #464]	; (8001dc4 <moveSnake+0x574>)
 8001bf2:	6859      	ldr	r1, [r3, #4]
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f7ff faf9 	bl	80011ee <LCD5110_putpix>
		LCD5110_putpix(apple.x, apple.y + 1, WHITE, &lcd_conf->hw_conf);
 8001bfc:	4b71      	ldr	r3, [pc, #452]	; (8001dc4 <moveSnake+0x574>)
 8001bfe:	6818      	ldr	r0, [r3, #0]
 8001c00:	4b70      	ldr	r3, [pc, #448]	; (8001dc4 <moveSnake+0x574>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	1c59      	adds	r1, r3, #1
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	f7ff faf0 	bl	80011ee <LCD5110_putpix>
		LCD5110_putpix(apple.x + 1, apple.y, WHITE, &lcd_conf->hw_conf);
 8001c0e:	4b6d      	ldr	r3, [pc, #436]	; (8001dc4 <moveSnake+0x574>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	1c58      	adds	r0, r3, #1
 8001c14:	4b6b      	ldr	r3, [pc, #428]	; (8001dc4 <moveSnake+0x574>)
 8001c16:	6859      	ldr	r1, [r3, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f7ff fae7 	bl	80011ee <LCD5110_putpix>
		LCD5110_putpix(apple.x + 1, apple.y + 1, WHITE, &lcd_conf->hw_conf);
 8001c20:	4b68      	ldr	r3, [pc, #416]	; (8001dc4 <moveSnake+0x574>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	1c58      	adds	r0, r3, #1
 8001c26:	4b67      	ldr	r3, [pc, #412]	; (8001dc4 <moveSnake+0x574>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	1c59      	adds	r1, r3, #1
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	2200      	movs	r2, #0
 8001c30:	f7ff fadd 	bl	80011ee <LCD5110_putpix>

		initializeSnake();
 8001c34:	f7ff fd38 	bl	80016a8 <initializeSnake>
		initializeApple();
 8001c38:	f7ff fd5c 	bl	80016f4 <initializeApple>

		drawApple(&lcd1);
 8001c3c:	4862      	ldr	r0, [pc, #392]	; (8001dc8 <moveSnake+0x578>)
 8001c3e:	f7ff fdd9 	bl	80017f4 <drawApple>
		DIRECTION = UP;
 8001c42:	4b62      	ldr	r3, [pc, #392]	; (8001dcc <moveSnake+0x57c>)
 8001c44:	2201      	movs	r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
		isDead = false;
 8001c48:	4b61      	ldr	r3, [pc, #388]	; (8001dd0 <moveSnake+0x580>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]
	}

    if ( (snake[0].x == apple.x && snake[0].y == apple.y ) ||
 8001c4e:	4b5b      	ldr	r3, [pc, #364]	; (8001dbc <moveSnake+0x56c>)
 8001c50:	681a      	ldr	r2, [r3, #0]
 8001c52:	4b5c      	ldr	r3, [pc, #368]	; (8001dc4 <moveSnake+0x574>)
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	d105      	bne.n	8001c66 <moveSnake+0x416>
 8001c5a:	4b58      	ldr	r3, [pc, #352]	; (8001dbc <moveSnake+0x56c>)
 8001c5c:	685a      	ldr	r2, [r3, #4]
 8001c5e:	4b59      	ldr	r3, [pc, #356]	; (8001dc4 <moveSnake+0x574>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	d05b      	beq.n	8001d1e <moveSnake+0x4ce>
    	 (snake[0].x == apple.x + 1 && snake[0].y == apple.y) ||
 8001c66:	4b55      	ldr	r3, [pc, #340]	; (8001dbc <moveSnake+0x56c>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	4b56      	ldr	r3, [pc, #344]	; (8001dc4 <moveSnake+0x574>)
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	3301      	adds	r3, #1
    if ( (snake[0].x == apple.x && snake[0].y == apple.y ) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d105      	bne.n	8001c80 <moveSnake+0x430>
    	 (snake[0].x == apple.x + 1 && snake[0].y == apple.y) ||
 8001c74:	4b51      	ldr	r3, [pc, #324]	; (8001dbc <moveSnake+0x56c>)
 8001c76:	685a      	ldr	r2, [r3, #4]
 8001c78:	4b52      	ldr	r3, [pc, #328]	; (8001dc4 <moveSnake+0x574>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d04e      	beq.n	8001d1e <moveSnake+0x4ce>
		 (snake[0].x == apple.x && snake[0].y == apple.y + 1) ||
 8001c80:	4b4e      	ldr	r3, [pc, #312]	; (8001dbc <moveSnake+0x56c>)
 8001c82:	681a      	ldr	r2, [r3, #0]
 8001c84:	4b4f      	ldr	r3, [pc, #316]	; (8001dc4 <moveSnake+0x574>)
 8001c86:	681b      	ldr	r3, [r3, #0]
    	 (snake[0].x == apple.x + 1 && snake[0].y == apple.y) ||
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d106      	bne.n	8001c9a <moveSnake+0x44a>
		 (snake[0].x == apple.x && snake[0].y == apple.y + 1) ||
 8001c8c:	4b4b      	ldr	r3, [pc, #300]	; (8001dbc <moveSnake+0x56c>)
 8001c8e:	685a      	ldr	r2, [r3, #4]
 8001c90:	4b4c      	ldr	r3, [pc, #304]	; (8001dc4 <moveSnake+0x574>)
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	3301      	adds	r3, #1
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d041      	beq.n	8001d1e <moveSnake+0x4ce>
		 (snake[0].x == apple.x + 1 && snake[0].y == apple.y + 1) ||
 8001c9a:	4b48      	ldr	r3, [pc, #288]	; (8001dbc <moveSnake+0x56c>)
 8001c9c:	681a      	ldr	r2, [r3, #0]
 8001c9e:	4b49      	ldr	r3, [pc, #292]	; (8001dc4 <moveSnake+0x574>)
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	3301      	adds	r3, #1
		 (snake[0].x == apple.x && snake[0].y == apple.y + 1) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d106      	bne.n	8001cb6 <moveSnake+0x466>
		 (snake[0].x == apple.x + 1 && snake[0].y == apple.y + 1) ||
 8001ca8:	4b44      	ldr	r3, [pc, #272]	; (8001dbc <moveSnake+0x56c>)
 8001caa:	685a      	ldr	r2, [r3, #4]
 8001cac:	4b45      	ldr	r3, [pc, #276]	; (8001dc4 <moveSnake+0x574>)
 8001cae:	685b      	ldr	r3, [r3, #4]
 8001cb0:	3301      	adds	r3, #1
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d033      	beq.n	8001d1e <moveSnake+0x4ce>
		 (snake[0].x + 1 == apple.x && snake[0].y + 1 == apple.y) ||
 8001cb6:	4b41      	ldr	r3, [pc, #260]	; (8001dbc <moveSnake+0x56c>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	1c5a      	adds	r2, r3, #1
 8001cbc:	4b41      	ldr	r3, [pc, #260]	; (8001dc4 <moveSnake+0x574>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
		 (snake[0].x == apple.x + 1 && snake[0].y == apple.y + 1) ||
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d106      	bne.n	8001cd2 <moveSnake+0x482>
		 (snake[0].x + 1 == apple.x && snake[0].y + 1 == apple.y) ||
 8001cc4:	4b3d      	ldr	r3, [pc, #244]	; (8001dbc <moveSnake+0x56c>)
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	1c5a      	adds	r2, r3, #1
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <moveSnake+0x574>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d025      	beq.n	8001d1e <moveSnake+0x4ce>
		 (snake[0].x + 1 == apple.x + 1 && snake[0].y + 1 == apple.y) ||
 8001cd2:	4b3a      	ldr	r3, [pc, #232]	; (8001dbc <moveSnake+0x56c>)
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <moveSnake+0x574>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
		 (snake[0].x + 1 == apple.x && snake[0].y + 1 == apple.y) ||
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d106      	bne.n	8001cec <moveSnake+0x49c>
		 (snake[0].x + 1 == apple.x + 1 && snake[0].y + 1 == apple.y) ||
 8001cde:	4b37      	ldr	r3, [pc, #220]	; (8001dbc <moveSnake+0x56c>)
 8001ce0:	685b      	ldr	r3, [r3, #4]
 8001ce2:	1c5a      	adds	r2, r3, #1
 8001ce4:	4b37      	ldr	r3, [pc, #220]	; (8001dc4 <moveSnake+0x574>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d018      	beq.n	8001d1e <moveSnake+0x4ce>
		 (snake[0].x + 1 == apple.x && snake[0].y + 1 == apple.y + 1) ||
 8001cec:	4b33      	ldr	r3, [pc, #204]	; (8001dbc <moveSnake+0x56c>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	1c5a      	adds	r2, r3, #1
 8001cf2:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <moveSnake+0x574>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
		 (snake[0].x + 1 == apple.x + 1 && snake[0].y + 1 == apple.y) ||
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d105      	bne.n	8001d06 <moveSnake+0x4b6>
		 (snake[0].x + 1 == apple.x && snake[0].y + 1 == apple.y + 1) ||
 8001cfa:	4b30      	ldr	r3, [pc, #192]	; (8001dbc <moveSnake+0x56c>)
 8001cfc:	685a      	ldr	r2, [r3, #4]
 8001cfe:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <moveSnake+0x574>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d00b      	beq.n	8001d1e <moveSnake+0x4ce>
		 (snake[0].x + 1 == apple.x + 1 && snake[0].y + 1 == apple.y + 1)) {
 8001d06:	4b2d      	ldr	r3, [pc, #180]	; (8001dbc <moveSnake+0x56c>)
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	4b2e      	ldr	r3, [pc, #184]	; (8001dc4 <moveSnake+0x574>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
		 (snake[0].x + 1 == apple.x && snake[0].y + 1 == apple.y + 1) ||
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d14f      	bne.n	8001db2 <moveSnake+0x562>
		 (snake[0].x + 1 == apple.x + 1 && snake[0].y + 1 == apple.y + 1)) {
 8001d12:	4b2a      	ldr	r3, [pc, #168]	; (8001dbc <moveSnake+0x56c>)
 8001d14:	685a      	ldr	r2, [r3, #4]
 8001d16:	4b2b      	ldr	r3, [pc, #172]	; (8001dc4 <moveSnake+0x574>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d149      	bne.n	8001db2 <moveSnake+0x562>
		if (SNAKE_SIZE < MAX_SNAKE_SIZE) {
 8001d1e:	4b28      	ldr	r3, [pc, #160]	; (8001dc0 <moveSnake+0x570>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2b18      	cmp	r3, #24
 8001d24:	dc1c      	bgt.n	8001d60 <moveSnake+0x510>
			snake[SNAKE_SIZE].x = snake[SNAKE_SIZE - 1].x;
 8001d26:	4b26      	ldr	r3, [pc, #152]	; (8001dc0 <moveSnake+0x570>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	4b24      	ldr	r3, [pc, #144]	; (8001dc0 <moveSnake+0x570>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4922      	ldr	r1, [pc, #136]	; (8001dbc <moveSnake+0x56c>)
 8001d32:	f851 2032 	ldr.w	r2, [r1, r2, lsl #3]
 8001d36:	4921      	ldr	r1, [pc, #132]	; (8001dbc <moveSnake+0x56c>)
 8001d38:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
			snake[SNAKE_SIZE].y = snake[SNAKE_SIZE - 1].y;
 8001d3c:	4b20      	ldr	r3, [pc, #128]	; (8001dc0 <moveSnake+0x570>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	4a1f      	ldr	r2, [pc, #124]	; (8001dc0 <moveSnake+0x570>)
 8001d44:	6811      	ldr	r1, [r2, #0]
 8001d46:	4a1d      	ldr	r2, [pc, #116]	; (8001dbc <moveSnake+0x56c>)
 8001d48:	00db      	lsls	r3, r3, #3
 8001d4a:	4413      	add	r3, r2
 8001d4c:	685a      	ldr	r2, [r3, #4]
 8001d4e:	481b      	ldr	r0, [pc, #108]	; (8001dbc <moveSnake+0x56c>)
 8001d50:	00cb      	lsls	r3, r1, #3
 8001d52:	4403      	add	r3, r0
 8001d54:	605a      	str	r2, [r3, #4]
			SNAKE_SIZE++;
 8001d56:	4b1a      	ldr	r3, [pc, #104]	; (8001dc0 <moveSnake+0x570>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	4a18      	ldr	r2, [pc, #96]	; (8001dc0 <moveSnake+0x570>)
 8001d5e:	6013      	str	r3, [r2, #0]

		}

		LCD5110_putpix(apple.x, apple.y, WHITE, &lcd_conf->hw_conf);
 8001d60:	4b18      	ldr	r3, [pc, #96]	; (8001dc4 <moveSnake+0x574>)
 8001d62:	6818      	ldr	r0, [r3, #0]
 8001d64:	4b17      	ldr	r3, [pc, #92]	; (8001dc4 <moveSnake+0x574>)
 8001d66:	6859      	ldr	r1, [r3, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	f7ff fa3f 	bl	80011ee <LCD5110_putpix>
		LCD5110_putpix(apple.x, apple.y + 1, WHITE, &lcd_conf->hw_conf);
 8001d70:	4b14      	ldr	r3, [pc, #80]	; (8001dc4 <moveSnake+0x574>)
 8001d72:	6818      	ldr	r0, [r3, #0]
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <moveSnake+0x574>)
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	1c59      	adds	r1, r3, #1
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	f7ff fa36 	bl	80011ee <LCD5110_putpix>
		LCD5110_putpix(apple.x + 1, apple.y, WHITE, &lcd_conf->hw_conf);
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <moveSnake+0x574>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	1c58      	adds	r0, r3, #1
 8001d88:	4b0e      	ldr	r3, [pc, #56]	; (8001dc4 <moveSnake+0x574>)
 8001d8a:	6859      	ldr	r1, [r3, #4]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f7ff fa2d 	bl	80011ee <LCD5110_putpix>
		LCD5110_putpix(apple.x + 1, apple.y + 1, WHITE, &lcd_conf->hw_conf);
 8001d94:	4b0b      	ldr	r3, [pc, #44]	; (8001dc4 <moveSnake+0x574>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	1c58      	adds	r0, r3, #1
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <moveSnake+0x574>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	1c59      	adds	r1, r3, #1
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2200      	movs	r2, #0
 8001da4:	f7ff fa23 	bl	80011ee <LCD5110_putpix>

		generateRandomApplePosition();
 8001da8:	f7ff fcaa 	bl	8001700 <generateRandomApplePosition>
		drawApple(lcd_conf);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f7ff fd21 	bl	80017f4 <drawApple>
	}

}
 8001db2:	bf00      	nop
 8001db4:	3718      	adds	r7, #24
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bd80      	pop	{r7, pc}
 8001dba:	bf00      	nop
 8001dbc:	200043e4 	.word	0x200043e4
 8001dc0:	20000020 	.word	0x20000020
 8001dc4:	200044ac 	.word	0x200044ac
 8001dc8:	200002bc 	.word	0x200002bc
 8001dcc:	20000024 	.word	0x20000024
 8001dd0:	200043e0 	.word	0x200043e0

08001dd4 <drawSnake>:

void drawSnake(LCD5110_display* lcd_conf) {
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < SNAKE_SIZE; ++i) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	60fb      	str	r3, [r7, #12]
 8001de0:	e03a      	b.n	8001e58 <drawSnake+0x84>
        LCD5110_putpix(snake[i].x, snake[i].y, BLACK, &lcd_conf->hw_conf);
 8001de2:	4a22      	ldr	r2, [pc, #136]	; (8001e6c <drawSnake+0x98>)
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001dea:	4a20      	ldr	r2, [pc, #128]	; (8001e6c <drawSnake+0x98>)
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	4413      	add	r3, r2
 8001df2:	6859      	ldr	r1, [r3, #4]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	2201      	movs	r2, #1
 8001df8:	f7ff f9f9 	bl	80011ee <LCD5110_putpix>
        LCD5110_putpix(snake[i].x, snake[i].y + 1, BLACK, &lcd_conf->hw_conf);
 8001dfc:	4a1b      	ldr	r2, [pc, #108]	; (8001e6c <drawSnake+0x98>)
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8001e04:	4a19      	ldr	r2, [pc, #100]	; (8001e6c <drawSnake+0x98>)
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	00db      	lsls	r3, r3, #3
 8001e0a:	4413      	add	r3, r2
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	1c59      	adds	r1, r3, #1
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f7ff f9eb 	bl	80011ee <LCD5110_putpix>
        LCD5110_putpix(snake[i].x + 1, snake[i].y, BLACK, &lcd_conf->hw_conf);
 8001e18:	4a14      	ldr	r2, [pc, #80]	; (8001e6c <drawSnake+0x98>)
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e20:	1c58      	adds	r0, r3, #1
 8001e22:	4a12      	ldr	r2, [pc, #72]	; (8001e6c <drawSnake+0x98>)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4413      	add	r3, r2
 8001e2a:	6859      	ldr	r1, [r3, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2201      	movs	r2, #1
 8001e30:	f7ff f9dd 	bl	80011ee <LCD5110_putpix>
        LCD5110_putpix(snake[i].x + 1, snake[i].y + 1, BLACK, &lcd_conf->hw_conf);
 8001e34:	4a0d      	ldr	r2, [pc, #52]	; (8001e6c <drawSnake+0x98>)
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8001e3c:	1c58      	adds	r0, r3, #1
 8001e3e:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <drawSnake+0x98>)
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	685b      	ldr	r3, [r3, #4]
 8001e48:	1c59      	adds	r1, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f7ff f9ce 	bl	80011ee <LCD5110_putpix>
    for (int i = 0; i < SNAKE_SIZE; ++i) {
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	3301      	adds	r3, #1
 8001e56:	60fb      	str	r3, [r7, #12]
 8001e58:	4b05      	ldr	r3, [pc, #20]	; (8001e70 <drawSnake+0x9c>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	68fa      	ldr	r2, [r7, #12]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	dbbf      	blt.n	8001de2 <drawSnake+0xe>
    }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	3710      	adds	r7, #16
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	200043e4 	.word	0x200043e4
 8001e70:	20000020 	.word	0x20000020

08001e74 <initializeMap>:
	for (int i = 0; i < SNAKE_SIZE; ++i) {
		LCD5110_putpix(snake[i].x, snake[i].y, WHITE, &lcd_conf->hw_conf);
	}
}

void initializeMap() {
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
    for (int i = 0; i < MAP_HEIGHT; ++i) {
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
 8001e7e:	e015      	b.n	8001eac <initializeMap+0x38>
        for (int j = 0; j < MAP_WIDTH; ++j) {
 8001e80:	2300      	movs	r3, #0
 8001e82:	60bb      	str	r3, [r7, #8]
 8001e84:	e00c      	b.n	8001ea0 <initializeMap+0x2c>
            map[i][j] = WHITE;
 8001e86:	4938      	ldr	r1, [pc, #224]	; (8001f68 <initializeMap+0xf4>)
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2254      	movs	r2, #84	; 0x54
 8001e8c:	fb03 f202 	mul.w	r2, r3, r2
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	4413      	add	r3, r2
 8001e94:	2200      	movs	r2, #0
 8001e96:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
        for (int j = 0; j < MAP_WIDTH; ++j) {
 8001e9a:	68bb      	ldr	r3, [r7, #8]
 8001e9c:	3301      	adds	r3, #1
 8001e9e:	60bb      	str	r3, [r7, #8]
 8001ea0:	68bb      	ldr	r3, [r7, #8]
 8001ea2:	2b53      	cmp	r3, #83	; 0x53
 8001ea4:	ddef      	ble.n	8001e86 <initializeMap+0x12>
    for (int i = 0; i < MAP_HEIGHT; ++i) {
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	3301      	adds	r3, #1
 8001eaa:	60fb      	str	r3, [r7, #12]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	2b2f      	cmp	r3, #47	; 0x2f
 8001eb0:	dde6      	ble.n	8001e80 <initializeMap+0xc>
        }
    }

    for (int i = 0; i < MAP_WIDTH; ++i) {
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	607b      	str	r3, [r7, #4]
 8001eb6:	e01b      	b.n	8001ef0 <initializeMap+0x7c>
        map[0][i] = BLACK;
 8001eb8:	4a2b      	ldr	r2, [pc, #172]	; (8001f68 <initializeMap+0xf4>)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2101      	movs	r1, #1
 8001ebe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        map[1][i] = BLACK;
 8001ec2:	4a29      	ldr	r2, [pc, #164]	; (8001f68 <initializeMap+0xf4>)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	3354      	adds	r3, #84	; 0x54
 8001ec8:	2101      	movs	r1, #1
 8001eca:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        map[MAP_HEIGHT - 1][i] = BLACK;
 8001ece:	4a26      	ldr	r2, [pc, #152]	; (8001f68 <initializeMap+0xf4>)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f603 736c 	addw	r3, r3, #3948	; 0xf6c
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        map[MAP_HEIGHT - 2][i] = BLACK;
 8001edc:	4a22      	ldr	r2, [pc, #136]	; (8001f68 <initializeMap+0xf4>)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f603 7318 	addw	r3, r3, #3864	; 0xf18
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (int i = 0; i < MAP_WIDTH; ++i) {
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	3301      	adds	r3, #1
 8001eee:	607b      	str	r3, [r7, #4]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b53      	cmp	r3, #83	; 0x53
 8001ef4:	dde0      	ble.n	8001eb8 <initializeMap+0x44>
    }

    for (int i = 0; i < MAP_HEIGHT; ++i) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	603b      	str	r3, [r7, #0]
 8001efa:	e02b      	b.n	8001f54 <initializeMap+0xe0>
        map[i][0] = BLACK;
 8001efc:	4a1a      	ldr	r2, [pc, #104]	; (8001f68 <initializeMap+0xf4>)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001f04:	fb01 f303 	mul.w	r3, r1, r3
 8001f08:	4413      	add	r3, r2
 8001f0a:	2201      	movs	r2, #1
 8001f0c:	601a      	str	r2, [r3, #0]
        map[i][1] = BLACK;
 8001f0e:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <initializeMap+0xf4>)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3304      	adds	r3, #4
 8001f1e:	2201      	movs	r2, #1
 8001f20:	601a      	str	r2, [r3, #0]
        map[i][MAP_WIDTH - 1] = BLACK;
 8001f22:	4a11      	ldr	r2, [pc, #68]	; (8001f68 <initializeMap+0xf4>)
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8001f34:	2201      	movs	r2, #1
 8001f36:	601a      	str	r2, [r3, #0]
        map[i][MAP_WIDTH - 2] = BLACK;
 8001f38:	4a0b      	ldr	r2, [pc, #44]	; (8001f68 <initializeMap+0xf4>)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	f44f 71a8 	mov.w	r1, #336	; 0x150
 8001f40:	fb01 f303 	mul.w	r3, r1, r3
 8001f44:	4413      	add	r3, r2
 8001f46:	f503 73a4 	add.w	r3, r3, #328	; 0x148
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < MAP_HEIGHT; ++i) {
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	3301      	adds	r3, #1
 8001f52:	603b      	str	r3, [r7, #0]
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	2b2f      	cmp	r3, #47	; 0x2f
 8001f58:	ddd0      	ble.n	8001efc <initializeMap+0x88>
    }
}
 8001f5a:	bf00      	nop
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	200004e0 	.word	0x200004e0

08001f6c <drawMap>:

void drawMap(LCD5110_display* lcd_conf) {
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b084      	sub	sp, #16
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
    LCD5110_clear_scr(lcd_conf);
 8001f74:	6878      	ldr	r0, [r7, #4]
 8001f76:	f7fe fe13 	bl	8000ba0 <LCD5110_clear_scr>

    for (int i = 0; i < MAP_HEIGHT; ++i) {
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60fb      	str	r3, [r7, #12]
 8001f7e:	e01c      	b.n	8001fba <drawMap+0x4e>
        for (int j = 0; j < MAP_WIDTH; ++j) {
 8001f80:	2300      	movs	r3, #0
 8001f82:	60bb      	str	r3, [r7, #8]
 8001f84:	e013      	b.n	8001fae <drawMap+0x42>
            if (map[i][j] == BLACK) {
 8001f86:	4912      	ldr	r1, [pc, #72]	; (8001fd0 <drawMap+0x64>)
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	2254      	movs	r2, #84	; 0x54
 8001f8c:	fb03 f202 	mul.w	r2, r3, r2
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	4413      	add	r3, r2
 8001f94:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	d105      	bne.n	8001fa8 <drawMap+0x3c>
                LCD5110_putpix(j, i, BLACK, &lcd_conf->hw_conf);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	68f9      	ldr	r1, [r7, #12]
 8001fa2:	68b8      	ldr	r0, [r7, #8]
 8001fa4:	f7ff f923 	bl	80011ee <LCD5110_putpix>
        for (int j = 0; j < MAP_WIDTH; ++j) {
 8001fa8:	68bb      	ldr	r3, [r7, #8]
 8001faa:	3301      	adds	r3, #1
 8001fac:	60bb      	str	r3, [r7, #8]
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	2b53      	cmp	r3, #83	; 0x53
 8001fb2:	dde8      	ble.n	8001f86 <drawMap+0x1a>
    for (int i = 0; i < MAP_HEIGHT; ++i) {
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3301      	adds	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b2f      	cmp	r3, #47	; 0x2f
 8001fbe:	dddf      	ble.n	8001f80 <drawMap+0x14>
            }
        }
    }

    LCD5110_refresh(lcd_conf);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7fe fdcf 	bl	8000b64 <LCD5110_refresh>
}
 8001fc6:	bf00      	nop
 8001fc8:	3710      	adds	r7, #16
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}
 8001fce:	bf00      	nop
 8001fd0:	200004e0 	.word	0x200004e0

08001fd4 <keypad_init>:

void keypad_init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b086      	sub	sp, #24
 8001fd8:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fda:	1d3b      	adds	r3, r7, #4
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 8001fe8:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8001fec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ff2:	2301      	movs	r3, #1
 8001ff4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 8001ff6:	4b21      	ldr	r3, [pc, #132]	; (800207c <keypad_init+0xa8>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	1d3a      	adds	r2, r7, #4
 8001ffc:	4611      	mov	r1, r2
 8001ffe:	4618      	mov	r0, r3
 8002000:	f002 f9ba 	bl	8004378 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 8002004:	4b1e      	ldr	r3, [pc, #120]	; (8002080 <keypad_init+0xac>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	1d3a      	adds	r2, r7, #4
 800200a:	4611      	mov	r1, r2
 800200c:	4618      	mov	r0, r3
 800200e:	f002 f9b3 	bl	8004378 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 8002012:	4b1c      	ldr	r3, [pc, #112]	; (8002084 <keypad_init+0xb0>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	1d3a      	adds	r2, r7, #4
 8002018:	4611      	mov	r1, r2
 800201a:	4618      	mov	r0, r3
 800201c:	f002 f9ac 	bl	8004378 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 8002020:	4b19      	ldr	r3, [pc, #100]	; (8002088 <keypad_init+0xb4>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	1d3a      	adds	r2, r7, #4
 8002026:	4611      	mov	r1, r2
 8002028:	4618      	mov	r0, r3
 800202a:	f002 f9a5 	bl	8004378 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 800202e:	230f      	movs	r3, #15
 8002030:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002032:	2301      	movs	r3, #1
 8002034:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 800203a:	4b14      	ldr	r3, [pc, #80]	; (800208c <keypad_init+0xb8>)
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	1d3a      	adds	r2, r7, #4
 8002040:	4611      	mov	r1, r2
 8002042:	4618      	mov	r0, r3
 8002044:	f002 f998 	bl	8004378 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 8002048:	4b11      	ldr	r3, [pc, #68]	; (8002090 <keypad_init+0xbc>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	1d3a      	adds	r2, r7, #4
 800204e:	4611      	mov	r1, r2
 8002050:	4618      	mov	r0, r3
 8002052:	f002 f991 	bl	8004378 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <keypad_init+0xc0>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	1d3a      	adds	r2, r7, #4
 800205c:	4611      	mov	r1, r2
 800205e:	4618      	mov	r0, r3
 8002060:	f002 f98a 	bl	8004378 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8002064:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <keypad_init+0xc4>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	1d3a      	adds	r2, r7, #4
 800206a:	4611      	mov	r1, r2
 800206c:	4618      	mov	r0, r3
 800206e:	f002 f983 	bl	8004378 <HAL_GPIO_Init>
}
 8002072:	bf00      	nop
 8002074:	3718      	adds	r7, #24
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000000 	.word	0x20000000
 8002080:	20000004 	.word	0x20000004
 8002084:	20000008 	.word	0x20000008
 8002088:	2000000c 	.word	0x2000000c
 800208c:	20000010 	.word	0x20000010
 8002090:	20000014 	.word	0x20000014
 8002094:	20000018 	.word	0x20000018
 8002098:	2000001c 	.word	0x2000001c

0800209c <keypad_scan>:

char keypad_scan(void)
{
 800209c:	b590      	push	{r4, r7, lr}
 800209e:	b087      	sub	sp, #28
 80020a0:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'A'},
 80020a2:	4b69      	ldr	r3, [pc, #420]	; (8002248 <keypad_scan+0x1ac>)
 80020a4:	1d3c      	adds	r4, r7, #4
 80020a6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020a8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'B'},
                     {'7', '8', '9', 'C'},
                     {'*', '0', '#', 'D'}};

  for(int i = 0; i < 4; i++)
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e0c1      	b.n	8002236 <keypad_scan+0x19a>
  {
    switch(i)
 80020b2:	697b      	ldr	r3, [r7, #20]
 80020b4:	2b03      	cmp	r3, #3
 80020b6:	d87f      	bhi.n	80021b8 <keypad_scan+0x11c>
 80020b8:	a201      	add	r2, pc, #4	; (adr r2, 80020c0 <keypad_scan+0x24>)
 80020ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020be:	bf00      	nop
 80020c0:	080020d1 	.word	0x080020d1
 80020c4:	0800210b 	.word	0x0800210b
 80020c8:	08002145 	.word	0x08002145
 80020cc:	0800217f 	.word	0x0800217f
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 80020d0:	4b5e      	ldr	r3, [pc, #376]	; (800224c <keypad_scan+0x1b0>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	2200      	movs	r2, #0
 80020d6:	2101      	movs	r1, #1
 80020d8:	4618      	mov	r0, r3
 80020da:	f002 fae9 	bl	80046b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80020de:	4b5c      	ldr	r3, [pc, #368]	; (8002250 <keypad_scan+0x1b4>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	2102      	movs	r1, #2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f002 fae2 	bl	80046b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80020ec:	4b59      	ldr	r3, [pc, #356]	; (8002254 <keypad_scan+0x1b8>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2201      	movs	r2, #1
 80020f2:	2104      	movs	r1, #4
 80020f4:	4618      	mov	r0, r3
 80020f6:	f002 fadb 	bl	80046b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80020fa:	4b57      	ldr	r3, [pc, #348]	; (8002258 <keypad_scan+0x1bc>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2201      	movs	r2, #1
 8002100:	2108      	movs	r1, #8
 8002102:	4618      	mov	r0, r3
 8002104:	f002 fad4 	bl	80046b0 <HAL_GPIO_WritePin>
        break;
 8002108:	e056      	b.n	80021b8 <keypad_scan+0x11c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800210a:	4b50      	ldr	r3, [pc, #320]	; (800224c <keypad_scan+0x1b0>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	2201      	movs	r2, #1
 8002110:	2101      	movs	r1, #1
 8002112:	4618      	mov	r0, r3
 8002114:	f002 facc 	bl	80046b0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 8002118:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <keypad_scan+0x1b4>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	2200      	movs	r2, #0
 800211e:	2102      	movs	r1, #2
 8002120:	4618      	mov	r0, r3
 8002122:	f002 fac5 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8002126:	4b4b      	ldr	r3, [pc, #300]	; (8002254 <keypad_scan+0x1b8>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2201      	movs	r2, #1
 800212c:	2104      	movs	r1, #4
 800212e:	4618      	mov	r0, r3
 8002130:	f002 fabe 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8002134:	4b48      	ldr	r3, [pc, #288]	; (8002258 <keypad_scan+0x1bc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2201      	movs	r2, #1
 800213a:	2108      	movs	r1, #8
 800213c:	4618      	mov	r0, r3
 800213e:	f002 fab7 	bl	80046b0 <HAL_GPIO_WritePin>
    break;
 8002142:	e039      	b.n	80021b8 <keypad_scan+0x11c>

  case 2:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8002144:	4b41      	ldr	r3, [pc, #260]	; (800224c <keypad_scan+0x1b0>)
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	2201      	movs	r2, #1
 800214a:	2101      	movs	r1, #1
 800214c:	4618      	mov	r0, r3
 800214e:	f002 faaf 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8002152:	4b3f      	ldr	r3, [pc, #252]	; (8002250 <keypad_scan+0x1b4>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2201      	movs	r2, #1
 8002158:	2102      	movs	r1, #2
 800215a:	4618      	mov	r0, r3
 800215c:	f002 faa8 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8002160:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <keypad_scan+0x1b8>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2200      	movs	r2, #0
 8002166:	2104      	movs	r1, #4
 8002168:	4618      	mov	r0, r3
 800216a:	f002 faa1 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 800216e:	4b3a      	ldr	r3, [pc, #232]	; (8002258 <keypad_scan+0x1bc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	2201      	movs	r2, #1
 8002174:	2108      	movs	r1, #8
 8002176:	4618      	mov	r0, r3
 8002178:	f002 fa9a 	bl	80046b0 <HAL_GPIO_WritePin>
    break;
 800217c:	e01c      	b.n	80021b8 <keypad_scan+0x11c>

  case 3:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800217e:	4b33      	ldr	r3, [pc, #204]	; (800224c <keypad_scan+0x1b0>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2201      	movs	r2, #1
 8002184:	2101      	movs	r1, #1
 8002186:	4618      	mov	r0, r3
 8002188:	f002 fa92 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <keypad_scan+0x1b4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2201      	movs	r2, #1
 8002192:	2102      	movs	r1, #2
 8002194:	4618      	mov	r0, r3
 8002196:	f002 fa8b 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 800219a:	4b2e      	ldr	r3, [pc, #184]	; (8002254 <keypad_scan+0x1b8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	2201      	movs	r2, #1
 80021a0:	2104      	movs	r1, #4
 80021a2:	4618      	mov	r0, r3
 80021a4:	f002 fa84 	bl	80046b0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 80021a8:	4b2b      	ldr	r3, [pc, #172]	; (8002258 <keypad_scan+0x1bc>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	2200      	movs	r2, #0
 80021ae:	2108      	movs	r1, #8
 80021b0:	4618      	mov	r0, r3
 80021b2:	f002 fa7d 	bl	80046b0 <HAL_GPIO_WritePin>
    break;
 80021b6:	bf00      	nop
}
// Read current rows
if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 80021b8:	4b28      	ldr	r3, [pc, #160]	; (800225c <keypad_scan+0x1c0>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2110      	movs	r1, #16
 80021be:	4618      	mov	r0, r3
 80021c0:	f002 fa5e 	bl	8004680 <HAL_GPIO_ReadPin>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d104      	bne.n	80021d4 <keypad_scan+0x138>
  return keys[0][i];
 80021ca:	1d3a      	adds	r2, r7, #4
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	4413      	add	r3, r2
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	e035      	b.n	8002240 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 80021d4:	4b22      	ldr	r3, [pc, #136]	; (8002260 <keypad_scan+0x1c4>)
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	2120      	movs	r1, #32
 80021da:	4618      	mov	r0, r3
 80021dc:	f002 fa50 	bl	8004680 <HAL_GPIO_ReadPin>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d105      	bne.n	80021f2 <keypad_scan+0x156>
  return keys[1][i];
 80021e6:	f107 0208 	add.w	r2, r7, #8
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	4413      	add	r3, r2
 80021ee:	781b      	ldrb	r3, [r3, #0]
 80021f0:	e026      	b.n	8002240 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80021f2:	4b1c      	ldr	r3, [pc, #112]	; (8002264 <keypad_scan+0x1c8>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	2140      	movs	r1, #64	; 0x40
 80021f8:	4618      	mov	r0, r3
 80021fa:	f002 fa41 	bl	8004680 <HAL_GPIO_ReadPin>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d105      	bne.n	8002210 <keypad_scan+0x174>
  return keys[2][i];
 8002204:	f107 020c 	add.w	r2, r7, #12
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	4413      	add	r3, r2
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	e017      	b.n	8002240 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 8002210:	4b15      	ldr	r3, [pc, #84]	; (8002268 <keypad_scan+0x1cc>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002218:	4618      	mov	r0, r3
 800221a:	f002 fa31 	bl	8004680 <HAL_GPIO_ReadPin>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <keypad_scan+0x194>
  return keys[3][i];
 8002224:	f107 0210 	add.w	r2, r7, #16
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	e007      	b.n	8002240 <keypad_scan+0x1a4>
  for(int i = 0; i < 4; i++)
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	3301      	adds	r3, #1
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	2b03      	cmp	r3, #3
 800223a:	f77f af3a 	ble.w	80020b2 <keypad_scan+0x16>
}
return 0; // No key pressed
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	371c      	adds	r7, #28
 8002244:	46bd      	mov	sp, r7
 8002246:	bd90      	pop	{r4, r7, pc}
 8002248:	0800db54 	.word	0x0800db54
 800224c:	20000010 	.word	0x20000010
 8002250:	20000014 	.word	0x20000014
 8002254:	20000018 	.word	0x20000018
 8002258:	2000001c 	.word	0x2000001c
 800225c:	20000000 	.word	0x20000000
 8002260:	20000004 	.word	0x20000004
 8002264:	20000008 	.word	0x20000008
 8002268:	2000000c 	.word	0x2000000c

0800226c <init_module>:
	char *last_command;
} module_t;

module_t gsm_module;

module_t init_module() {
 800226c:	b580      	push	{r7, lr}
 800226e:	b084      	sub	sp, #16
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
    module_t newModule;
    newModule.last_response = strdup("");
 8002274:	4813      	ldr	r0, [pc, #76]	; (80022c4 <init_module+0x58>)
 8002276:	f00a fd1d 	bl	800ccb4 <strdup>
 800227a:	4603      	mov	r3, r0
 800227c:	60bb      	str	r3, [r7, #8]
    newModule.last_command = strdup("");
 800227e:	4811      	ldr	r0, [pc, #68]	; (80022c4 <init_module+0x58>)
 8002280:	f00a fd18 	bl	800ccb4 <strdup>
 8002284:	4603      	mov	r3, r0
 8002286:	60fb      	str	r3, [r7, #12]

    if (newModule.last_response == NULL || newModule.last_command == NULL) {
 8002288:	68bb      	ldr	r3, [r7, #8]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d002      	beq.n	8002294 <init_module+0x28>
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d10a      	bne.n	80022aa <init_module+0x3e>
        fprintf(stderr, "Memory allocation failed\n");
 8002294:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <init_module+0x5c>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	68db      	ldr	r3, [r3, #12]
 800229a:	2219      	movs	r2, #25
 800229c:	2101      	movs	r1, #1
 800229e:	480b      	ldr	r0, [pc, #44]	; (80022cc <init_module+0x60>)
 80022a0:	f00a fbea 	bl	800ca78 <fwrite>
        exit(EXIT_FAILURE);
 80022a4:	2001      	movs	r0, #1
 80022a6:	f00a f9a7 	bl	800c5f8 <exit>
    }
    return newModule;
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	461a      	mov	r2, r3
 80022ae:	f107 0308 	add.w	r3, r7, #8
 80022b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80022b6:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	3710      	adds	r7, #16
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	0800dc00 	.word	0x0800dc00
 80022c8:	200001b8 	.word	0x200001b8
 80022cc:	0800dc04 	.word	0x0800dc04

080022d0 <answer_call>:
	strcat(call_command, number);
	strcat(call_command, "\r\n");
	HAL_UART_Transmit(&huart1,(uint8_t *)call_command,strlen(call_command),100);
}

char *answer_call(module_t gsm_module){
 80022d0:	b590      	push	{r4, r7, lr}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	463b      	mov	r3, r7
 80022d8:	e883 0003 	stmia.w	r3, {r0, r1}
	HAL_UART_Transmit(&huart1, (uint8_t *)CALL_ANSWER, strlen(CALL_ANSWER), 100);
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <answer_call+0x38>)
 80022de:	681c      	ldr	r4, [r3, #0]
 80022e0:	4b09      	ldr	r3, [pc, #36]	; (8002308 <answer_call+0x38>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4618      	mov	r0, r3
 80022e6:	f7fd ff85 	bl	80001f4 <strlen>
 80022ea:	4603      	mov	r3, r0
 80022ec:	b29a      	uxth	r2, r3
 80022ee:	2364      	movs	r3, #100	; 0x64
 80022f0:	4621      	mov	r1, r4
 80022f2:	4806      	ldr	r0, [pc, #24]	; (800230c <answer_call+0x3c>)
 80022f4:	f005 fb29 	bl	800794a <HAL_UART_Transmit>
	HAL_Delay(200);
 80022f8:	20c8      	movs	r0, #200	; 0xc8
 80022fa:	f001 fe75 	bl	8003fe8 <HAL_Delay>
}
 80022fe:	bf00      	nop
 8002300:	4618      	mov	r0, r3
 8002302:	370c      	adds	r7, #12
 8002304:	46bd      	mov	sp, r7
 8002306:	bd90      	pop	{r4, r7, pc}
 8002308:	2000003c 	.word	0x2000003c
 800230c:	2000e5c8 	.word	0x2000e5c8

08002310 <end_call>:

void end_call(){
 8002310:	b580      	push	{r7, lr}
 8002312:	af00      	add	r7, sp, #0
	HAL_UART_Transmit(&huart1,(uint8_t *)END_CALL, 9,100);
 8002314:	4b04      	ldr	r3, [pc, #16]	; (8002328 <end_call+0x18>)
 8002316:	6819      	ldr	r1, [r3, #0]
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	2209      	movs	r2, #9
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <end_call+0x1c>)
 800231e:	f005 fb14 	bl	800794a <HAL_UART_Transmit>
}
 8002322:	bf00      	nop
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000038 	.word	0x20000038
 800232c:	2000e5c8 	.word	0x2000e5c8

08002330 <read_message>:

void read_message(module_t gsm_module, int number){
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	f107 0308 	add.w	r3, r7, #8
 800233a:	e883 0003 	stmia.w	r3, {r0, r1}
 800233e:	607a      	str	r2, [r7, #4]
	LCD5110_set_cursor(0, 0, &lcd1);
 8002340:	4a15      	ldr	r2, [pc, #84]	; (8002398 <read_message+0x68>)
 8002342:	2100      	movs	r1, #0
 8002344:	2000      	movs	r0, #0
 8002346:	f7fe fc19 	bl	8000b7c <LCD5110_set_cursor>
	LCD5110_print(numbers[99 - number], 0, &lcd1);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	f1c3 0263 	rsb	r2, r3, #99	; 0x63
 8002350:	4613      	mov	r3, r2
 8002352:	009b      	lsls	r3, r3, #2
 8002354:	4413      	add	r3, r2
 8002356:	005b      	lsls	r3, r3, #1
 8002358:	4413      	add	r3, r2
 800235a:	4a10      	ldr	r2, [pc, #64]	; (800239c <read_message+0x6c>)
 800235c:	4413      	add	r3, r2
 800235e:	4a0e      	ldr	r2, [pc, #56]	; (8002398 <read_message+0x68>)
 8002360:	2100      	movs	r1, #0
 8002362:	4618      	mov	r0, r3
 8002364:	f7fe fc2d 	bl	8000bc2 <LCD5110_print>
	LCD5110_set_cursor(0, 10, &lcd1);
 8002368:	4a0b      	ldr	r2, [pc, #44]	; (8002398 <read_message+0x68>)
 800236a:	210a      	movs	r1, #10
 800236c:	2000      	movs	r0, #0
 800236e:	f7fe fc05 	bl	8000b7c <LCD5110_set_cursor>
	LCD5110_print(messages[99 - number], 0, &lcd1);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f1c3 0363 	rsb	r3, r3, #99	; 0x63
 8002378:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	4a07      	ldr	r2, [pc, #28]	; (80023a0 <read_message+0x70>)
 8002382:	4413      	add	r3, r2
 8002384:	4a04      	ldr	r2, [pc, #16]	; (8002398 <read_message+0x68>)
 8002386:	2100      	movs	r1, #0
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe fc1a 	bl	8000bc2 <LCD5110_print>
}
 800238e:	bf00      	nop
 8002390:	3710      	adds	r7, #16
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	200002bc 	.word	0x200002bc
 800239c:	2000e100 	.word	0x2000e100
 80023a0:	20006bd0 	.word	0x20006bd0

080023a4 <handle_interrupts>:

void handle_interrupts(module_t gsm_module, char *rx_buff, int count){
 80023a4:	b590      	push	{r4, r7, lr}
 80023a6:	b089      	sub	sp, #36	; 0x24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	f107 0408 	add.w	r4, r7, #8
 80023ae:	e884 0003 	stmia.w	r4, {r0, r1}
 80023b2:	607a      	str	r2, [r7, #4]
 80023b4:	603b      	str	r3, [r7, #0]
	if (count >= 5){
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	2b04      	cmp	r3, #4
 80023ba:	dd78      	ble.n	80024ae <handle_interrupts+0x10a>
		char first[2];
		char second[2];
		char third[2];
		char fourth[2];
		first[0] = rx_buff[2];
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	789b      	ldrb	r3, [r3, #2]
 80023c0:	773b      	strb	r3, [r7, #28]
		first[1] = '\0';
 80023c2:	2300      	movs	r3, #0
 80023c4:	777b      	strb	r3, [r7, #29]
		second[0] = rx_buff[3];
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	78db      	ldrb	r3, [r3, #3]
 80023ca:	763b      	strb	r3, [r7, #24]
		second[1] = '\0';
 80023cc:	2300      	movs	r3, #0
 80023ce:	767b      	strb	r3, [r7, #25]
		third[0] = rx_buff[4];
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	791b      	ldrb	r3, [r3, #4]
 80023d4:	753b      	strb	r3, [r7, #20]
		third[1] = '\0';
 80023d6:	2300      	movs	r3, #0
 80023d8:	757b      	strb	r3, [r7, #21]
		fourth[0] = rx_buff[5];
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	795b      	ldrb	r3, [r3, #5]
 80023de:	743b      	strb	r3, [r7, #16]
		fourth[1] = '\0';
 80023e0:	2300      	movs	r3, #0
 80023e2:	747b      	strb	r3, [r7, #17]

		if (message_read){
 80023e4:	4b33      	ldr	r3, [pc, #204]	; (80024b4 <handle_interrupts+0x110>)
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d009      	beq.n	8002400 <handle_interrupts+0x5c>
			LCD5110_set_cursor(0, 0, &lcd1);
 80023ec:	4a32      	ldr	r2, [pc, #200]	; (80024b8 <handle_interrupts+0x114>)
 80023ee:	2100      	movs	r1, #0
 80023f0:	2000      	movs	r0, #0
 80023f2:	f7fe fbc3 	bl	8000b7c <LCD5110_set_cursor>
			LCD5110_print(rx_buff, 0, &lcd1);
 80023f6:	4a30      	ldr	r2, [pc, #192]	; (80024b8 <handle_interrupts+0x114>)
 80023f8:	2100      	movs	r1, #0
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7fe fbe1 	bl	8000bc2 <LCD5110_print>

		}
		if (strcmp(rx_buff, "OK\r\n") == 0){
 8002400:	492e      	ldr	r1, [pc, #184]	; (80024bc <handle_interrupts+0x118>)
 8002402:	6878      	ldr	r0, [r7, #4]
 8002404:	f7fd feec 	bl	80001e0 <strcmp>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d04c      	beq.n	80024a8 <handle_interrupts+0x104>
			return;
		}
		if (strcmp(rx_buff, "ERROR\r\n") == 0){
 800240e:	492c      	ldr	r1, [pc, #176]	; (80024c0 <handle_interrupts+0x11c>)
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7fd fee5 	bl	80001e0 <strcmp>
 8002416:	4603      	mov	r3, r0
 8002418:	2b00      	cmp	r3, #0
 800241a:	d047      	beq.n	80024ac <handle_interrupts+0x108>
			return;
		}
		if ((second[0] == 'C' && third[0] == 'A' && fourth[0] == 'R') || (first[0] == 'R' && second[0] == 'O' && third[0] == 'R')){
 800241c:	7e3b      	ldrb	r3, [r7, #24]
 800241e:	2b43      	cmp	r3, #67	; 0x43
 8002420:	d105      	bne.n	800242e <handle_interrupts+0x8a>
 8002422:	7d3b      	ldrb	r3, [r7, #20]
 8002424:	2b41      	cmp	r3, #65	; 0x41
 8002426:	d102      	bne.n	800242e <handle_interrupts+0x8a>
 8002428:	7c3b      	ldrb	r3, [r7, #16]
 800242a:	2b52      	cmp	r3, #82	; 0x52
 800242c:	d008      	beq.n	8002440 <handle_interrupts+0x9c>
 800242e:	7f3b      	ldrb	r3, [r7, #28]
 8002430:	2b52      	cmp	r3, #82	; 0x52
 8002432:	d108      	bne.n	8002446 <handle_interrupts+0xa2>
 8002434:	7e3b      	ldrb	r3, [r7, #24]
 8002436:	2b4f      	cmp	r3, #79	; 0x4f
 8002438:	d105      	bne.n	8002446 <handle_interrupts+0xa2>
 800243a:	7d3b      	ldrb	r3, [r7, #20]
 800243c:	2b52      	cmp	r3, #82	; 0x52
 800243e:	d102      	bne.n	8002446 <handle_interrupts+0xa2>
			end_call_flag = true;
 8002440:	4b20      	ldr	r3, [pc, #128]	; (80024c4 <handle_interrupts+0x120>)
 8002442:	2201      	movs	r2, #1
 8002444:	701a      	strb	r2, [r3, #0]
		}
		if (first[0] == 'R' && second[0] == 'I' && third[0] == 'N' && fourth[0] == 'G'){
 8002446:	7f3b      	ldrb	r3, [r7, #28]
 8002448:	2b52      	cmp	r3, #82	; 0x52
 800244a:	d130      	bne.n	80024ae <handle_interrupts+0x10a>
 800244c:	7e3b      	ldrb	r3, [r7, #24]
 800244e:	2b49      	cmp	r3, #73	; 0x49
 8002450:	d12d      	bne.n	80024ae <handle_interrupts+0x10a>
 8002452:	7d3b      	ldrb	r3, [r7, #20]
 8002454:	2b4e      	cmp	r3, #78	; 0x4e
 8002456:	d12a      	bne.n	80024ae <handle_interrupts+0x10a>
 8002458:	7c3b      	ldrb	r3, [r7, #16]
 800245a:	2b47      	cmp	r3, #71	; 0x47
 800245c:	d127      	bne.n	80024ae <handle_interrupts+0x10a>
			cursor_on_phone = false;
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <handle_interrupts+0x124>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
			screen_main = false;
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <handle_interrupts+0x128>)
 8002466:	2200      	movs	r2, #0
 8002468:	701a      	strb	r2, [r3, #0]
			cursor_on_message = false;
 800246a:	4b19      	ldr	r3, [pc, #100]	; (80024d0 <handle_interrupts+0x12c>)
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]
			screen_message = false;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <handle_interrupts+0x130>)
 8002472:	2200      	movs	r2, #0
 8002474:	701a      	strb	r2, [r3, #0]
			type_message_screen = false;
 8002476:	4b18      	ldr	r3, [pc, #96]	; (80024d8 <handle_interrupts+0x134>)
 8002478:	2200      	movs	r2, #0
 800247a:	701a      	strb	r2, [r3, #0]
			screen_begin = false;
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <handle_interrupts+0x138>)
 800247e:	2200      	movs	r2, #0
 8002480:	701a      	strb	r2, [r3, #0]
			want_to_send_digits = false;
 8002482:	4b17      	ldr	r3, [pc, #92]	; (80024e0 <handle_interrupts+0x13c>)
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
			get_call = true;
 8002488:	4b16      	ldr	r3, [pc, #88]	; (80024e4 <handle_interrupts+0x140>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
			memcpy(buf, &rx_buff[11], 10);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f103 020b 	add.w	r2, r3, #11
 8002494:	4b14      	ldr	r3, [pc, #80]	; (80024e8 <handle_interrupts+0x144>)
 8002496:	6810      	ldr	r0, [r2, #0]
 8002498:	6851      	ldr	r1, [r2, #4]
 800249a:	c303      	stmia	r3!, {r0, r1}
 800249c:	8912      	ldrh	r2, [r2, #8]
 800249e:	801a      	strh	r2, [r3, #0]
			buf[10] = '\0';
 80024a0:	4b11      	ldr	r3, [pc, #68]	; (80024e8 <handle_interrupts+0x144>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	729a      	strb	r2, [r3, #10]
			return;
 80024a6:	e002      	b.n	80024ae <handle_interrupts+0x10a>
			return;
 80024a8:	bf00      	nop
 80024aa:	e000      	b.n	80024ae <handle_interrupts+0x10a>
			return;
 80024ac:	bf00      	nop
		}
	}

}
 80024ae:	3724      	adds	r7, #36	; 0x24
 80024b0:	46bd      	mov	sp, r7
 80024b2:	bd90      	pop	{r4, r7, pc}
 80024b4:	2000e55f 	.word	0x2000e55f
 80024b8:	200002bc 	.word	0x200002bc
 80024bc:	0800dc2c 	.word	0x0800dc2c
 80024c0:	0800dc34 	.word	0x0800dc34
 80024c4:	2000e55d 	.word	0x2000e55d
 80024c8:	20000028 	.word	0x20000028
 80024cc:	2000e559 	.word	0x2000e559
 80024d0:	2000e55a 	.word	0x2000e55a
 80024d4:	2000e55b 	.word	0x2000e55b
 80024d8:	2000e55c 	.word	0x2000e55c
 80024dc:	20000029 	.word	0x20000029
 80024e0:	2000002a 	.word	0x2000002a
 80024e4:	2000e558 	.word	0x2000e558
 80024e8:	200044b4 	.word	0x200044b4

080024ec <init_screen.2>:

    gsm_module = init_module();

    keypad_init();

    void init_screen() {
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b083      	sub	sp, #12
 80024f0:	af00      	add	r7, sp, #0
 80024f2:	4664      	mov	r4, ip
 80024f4:	f8c7 c004 	str.w	ip, [r7, #4]
		LCD5110_clear_scr(&lcd1);
 80024f8:	4818      	ldr	r0, [pc, #96]	; (800255c <init_screen.2+0x70>)
 80024fa:	f7fe fb51 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 80024fe:	4817      	ldr	r0, [pc, #92]	; (800255c <init_screen.2+0x70>)
 8002500:	f7fe fb30 	bl	8000b64 <LCD5110_refresh>
		LCD5110_rect(&rect, 1, &lcd1);
 8002504:	4623      	mov	r3, r4
 8002506:	4a15      	ldr	r2, [pc, #84]	; (800255c <init_screen.2+0x70>)
 8002508:	2101      	movs	r1, #1
 800250a:	4618      	mov	r0, r3
 800250c:	f7fe fcf1 	bl	8000ef2 <LCD5110_rect>
		LCD5110_rect_fill(&rect, 1, &lcd1);
 8002510:	4623      	mov	r3, r4
 8002512:	4a12      	ldr	r2, [pc, #72]	; (800255c <init_screen.2+0x70>)
 8002514:	2101      	movs	r1, #1
 8002516:	4618      	mov	r0, r3
 8002518:	f7fe fcfd 	bl	8000f16 <LCD5110_rect_fill>
		LCD5110_set_cursor(10, 15, &lcd1);
 800251c:	4a0f      	ldr	r2, [pc, #60]	; (800255c <init_screen.2+0x70>)
 800251e:	210f      	movs	r1, #15
 8002520:	200a      	movs	r0, #10
 8002522:	f7fe fb2b 	bl	8000b7c <LCD5110_set_cursor>

		LCD5110_print("A-call", 0, &lcd1);
 8002526:	4a0d      	ldr	r2, [pc, #52]	; (800255c <init_screen.2+0x70>)
 8002528:	2100      	movs	r1, #0
 800252a:	480d      	ldr	r0, [pc, #52]	; (8002560 <init_screen.2+0x74>)
 800252c:	f7fe fb49 	bl	8000bc2 <LCD5110_print>

		LCD5110_set_cursor(10, 35, &lcd1);
 8002530:	4a0a      	ldr	r2, [pc, #40]	; (800255c <init_screen.2+0x70>)
 8002532:	2123      	movs	r1, #35	; 0x23
 8002534:	200a      	movs	r0, #10
 8002536:	f7fe fb21 	bl	8000b7c <LCD5110_set_cursor>

		LCD5110_print("B-back", 0, &lcd1);
 800253a:	4a08      	ldr	r2, [pc, #32]	; (800255c <init_screen.2+0x70>)
 800253c:	2100      	movs	r1, #0
 800253e:	4809      	ldr	r0, [pc, #36]	; (8002564 <init_screen.2+0x78>)
 8002540:	f7fe fb3f 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 8002544:	4a05      	ldr	r2, [pc, #20]	; (800255c <init_screen.2+0x70>)
 8002546:	2100      	movs	r1, #0
 8002548:	2000      	movs	r0, #0
 800254a:	f7fe fb17 	bl	8000b7c <LCD5110_set_cursor>
		is_call = false;
 800254e:	2300      	movs	r3, #0
 8002550:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    }
 8002554:	bf00      	nop
 8002556:	370c      	adds	r7, #12
 8002558:	46bd      	mov	sp, r7
 800255a:	bd90      	pop	{r4, r7, pc}
 800255c:	200002bc 	.word	0x200002bc
 8002560:	0800dc3c 	.word	0x0800dc3c
 8002564:	0800dc44 	.word	0x0800dc44

08002568 <main>:
{
 8002568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800256a:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 800256e:	af02      	add	r7, sp, #8
int main(void)
 8002570:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8002574:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002578:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800257c:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
  HAL_Init();
 8002580:	f001 fcc0 	bl	8003f04 <HAL_Init>
  SystemClock_Config();
 8002584:	f001 f91c 	bl	80037c0 <SystemClock_Config>
  PeriphCommonClock_Config();
 8002588:	f001 f982 	bl	8003890 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800258c:	f7fe f80e 	bl	80005ac <MX_GPIO_Init>
  MX_I2C1_Init();
 8002590:	f7fe f946 	bl	8000820 <MX_I2C1_Init>
  MX_I2S2_Init();
 8002594:	f7fe f9ba 	bl	800090c <MX_I2S2_Init>
  MX_I2S3_Init();
 8002598:	f7fe f9e6 	bl	8000968 <MX_I2S3_Init>
  MX_SPI1_Init();
 800259c:	f001 fa16 	bl	80039cc <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80025a0:	f009 fbee 	bl	800bd80 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80025a4:	f001 fbea 	bl	8003d7c <MX_USART1_UART_Init>
  	lcd1.hw_conf.spi_handle = &hspi1;
 80025a8:	4bac      	ldr	r3, [pc, #688]	; (800285c <main+0x2f4>)
 80025aa:	4aad      	ldr	r2, [pc, #692]	; (8002860 <main+0x2f8>)
 80025ac:	601a      	str	r2, [r3, #0]
    lcd1.hw_conf.spi_cs_pin =  GPIO_PIN_2;
 80025ae:	4bab      	ldr	r3, [pc, #684]	; (800285c <main+0x2f4>)
 80025b0:	2204      	movs	r2, #4
 80025b2:	809a      	strh	r2, [r3, #4]
    lcd1.hw_conf.spi_cs_port = GPIOA;
 80025b4:	4ba9      	ldr	r3, [pc, #676]	; (800285c <main+0x2f4>)
 80025b6:	4aab      	ldr	r2, [pc, #684]	; (8002864 <main+0x2fc>)
 80025b8:	609a      	str	r2, [r3, #8]
    lcd1.hw_conf.rst_pin =  GPIO_PIN_0;
 80025ba:	4ba8      	ldr	r3, [pc, #672]	; (800285c <main+0x2f4>)
 80025bc:	2201      	movs	r2, #1
 80025be:	819a      	strh	r2, [r3, #12]
    lcd1.hw_conf.rst_port = GPIOC;
 80025c0:	4ba6      	ldr	r3, [pc, #664]	; (800285c <main+0x2f4>)
 80025c2:	4aa9      	ldr	r2, [pc, #676]	; (8002868 <main+0x300>)
 80025c4:	611a      	str	r2, [r3, #16]
    lcd1.hw_conf.dc_pin =  GPIO_PIN_3;
 80025c6:	4ba5      	ldr	r3, [pc, #660]	; (800285c <main+0x2f4>)
 80025c8:	2208      	movs	r2, #8
 80025ca:	829a      	strh	r2, [r3, #20]
    lcd1.hw_conf.dc_port = GPIOA;
 80025cc:	4ba3      	ldr	r3, [pc, #652]	; (800285c <main+0x2f4>)
 80025ce:	4aa5      	ldr	r2, [pc, #660]	; (8002864 <main+0x2fc>)
 80025d0:	619a      	str	r2, [r3, #24]
    lcd1.def_scr = lcd5110_def_scr;
 80025d2:	4ba2      	ldr	r3, [pc, #648]	; (800285c <main+0x2f4>)
 80025d4:	4aa5      	ldr	r2, [pc, #660]	; (800286c <main+0x304>)
 80025d6:	f503 7305 	add.w	r3, r3, #532	; 0x214
 80025da:	4614      	mov	r4, r2
 80025dc:	6820      	ldr	r0, [r4, #0]
 80025de:	6861      	ldr	r1, [r4, #4]
 80025e0:	68a2      	ldr	r2, [r4, #8]
 80025e2:	c307      	stmia	r3!, {r0, r1, r2}
 80025e4:	89a2      	ldrh	r2, [r4, #12]
 80025e6:	801a      	strh	r2, [r3, #0]
    LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 80025e8:	2303      	movs	r3, #3
 80025ea:	9300      	str	r3, [sp, #0]
 80025ec:	2302      	movs	r3, #2
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	210c      	movs	r1, #12
 80025f2:	489a      	ldr	r0, [pc, #616]	; (800285c <main+0x2f4>)
 80025f4:	f7fe fff4 	bl	80015e0 <LCD5110_init>
		sprintf(ATcommand,"AT\r\n");
 80025f8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80025fc:	499c      	ldr	r1, [pc, #624]	; (8002870 <main+0x308>)
 80025fe:	4618      	mov	r0, r3
 8002600:	f00a fa48 	bl	800ca94 <siprintf>
		HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),100);
 8002604:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8002608:	4618      	mov	r0, r3
 800260a:	f7fd fdf3 	bl	80001f4 <strlen>
 800260e:	4603      	mov	r3, r0
 8002610:	b29a      	uxth	r2, r3
 8002612:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8002616:	2364      	movs	r3, #100	; 0x64
 8002618:	4896      	ldr	r0, [pc, #600]	; (8002874 <main+0x30c>)
 800261a:	f005 f996 	bl	800794a <HAL_UART_Transmit>
		HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 800261e:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002622:	230a      	movs	r3, #10
 8002624:	220a      	movs	r2, #10
 8002626:	4893      	ldr	r0, [pc, #588]	; (8002874 <main+0x30c>)
 8002628:	f005 fa21 	bl	8007a6e <HAL_UART_Receive>
		if(strstr((char *)res,"OK"))
 800262c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002630:	4991      	ldr	r1, [pc, #580]	; (8002878 <main+0x310>)
 8002632:	4618      	mov	r0, r3
 8002634:	f00a fb5b 	bl	800ccee <strstr>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d006      	beq.n	800264c <main+0xe4>
			HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 800263e:	2201      	movs	r2, #1
 8002640:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002644:	488d      	ldr	r0, [pc, #564]	; (800287c <main+0x314>)
 8002646:	f002 f833 	bl	80046b0 <HAL_GPIO_WritePin>
 800264a:	e005      	b.n	8002658 <main+0xf0>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);    // red
 800264c:	2201      	movs	r2, #1
 800264e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002652:	488a      	ldr	r0, [pc, #552]	; (800287c <main+0x314>)
 8002654:	f002 f82c 	bl	80046b0 <HAL_GPIO_WritePin>
    int pos = 0;
 8002658:	2300      	movs	r3, #0
 800265a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    char key_pressed = 0;
 800265e:	2300      	movs	r3, #0
 8002660:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
    rect_t rect={0,0, 83, 10};
 8002664:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002668:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800266c:	4a84      	ldr	r2, [pc, #528]	; (8002880 <main+0x318>)
 800266e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002672:	e883 0003 	stmia.w	r3, {r0, r1}
    const unsigned char main_screen_image[] = {
 8002676:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800267a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800267e:	4a81      	ldr	r2, [pc, #516]	; (8002884 <main+0x31c>)
 8002680:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8002684:	4615      	mov	r5, r2
 8002686:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002688:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800268a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800268c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800268e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002690:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002692:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8002696:	c403      	stmia	r4!, {r0, r1}
 8002698:	7022      	strb	r2, [r4, #0]
    const unsigned char main_screen_snake[] = {
 800269a:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800269e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026a2:	4a79      	ldr	r2, [pc, #484]	; (8002888 <main+0x320>)
 80026a4:	4614      	mov	r4, r2
 80026a6:	f103 0c7b 	add.w	ip, r3, #123	; 0x7b
 80026aa:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80026ae:	4665      	mov	r5, ip
 80026b0:	4626      	mov	r6, r4
 80026b2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026b4:	6028      	str	r0, [r5, #0]
 80026b6:	6069      	str	r1, [r5, #4]
 80026b8:	60aa      	str	r2, [r5, #8]
 80026ba:	60eb      	str	r3, [r5, #12]
 80026bc:	3410      	adds	r4, #16
 80026be:	f10c 0c10 	add.w	ip, ip, #16
 80026c2:	4574      	cmp	r4, lr
 80026c4:	d1f3      	bne.n	80026ae <main+0x146>
 80026c6:	4662      	mov	r2, ip
 80026c8:	4623      	mov	r3, r4
 80026ca:	cb03      	ldmia	r3!, {r0, r1}
 80026cc:	6010      	str	r0, [r2, #0]
 80026ce:	6051      	str	r1, [r2, #4]
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	7213      	strb	r3, [r2, #8]
    const unsigned char main_message[] = {
 80026d4:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80026d8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80026dc:	4a6b      	ldr	r2, [pc, #428]	; (800288c <main+0x324>)
 80026de:	4614      	mov	r4, r2
 80026e0:	f103 0c09 	add.w	ip, r3, #9
 80026e4:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 80026e8:	4665      	mov	r5, ip
 80026ea:	4626      	mov	r6, r4
 80026ec:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 80026ee:	6028      	str	r0, [r5, #0]
 80026f0:	6069      	str	r1, [r5, #4]
 80026f2:	60aa      	str	r2, [r5, #8]
 80026f4:	60eb      	str	r3, [r5, #12]
 80026f6:	3410      	adds	r4, #16
 80026f8:	f10c 0c10 	add.w	ip, ip, #16
 80026fc:	4574      	cmp	r4, lr
 80026fe:	d1f3      	bne.n	80026e8 <main+0x180>
 8002700:	4662      	mov	r2, ip
 8002702:	4623      	mov	r3, r4
 8002704:	cb03      	ldmia	r3!, {r0, r1}
 8002706:	6010      	str	r0, [r2, #0]
 8002708:	6051      	str	r1, [r2, #4]
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	7213      	strb	r3, [r2, #8]
    const unsigned char write_message[] = {
 800270e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002712:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8002716:	4a5e      	ldr	r2, [pc, #376]	; (8002890 <main+0x328>)
 8002718:	4614      	mov	r4, r2
 800271a:	f103 0c42 	add.w	ip, r3, #66	; 0x42
 800271e:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8002722:	4665      	mov	r5, ip
 8002724:	4626      	mov	r6, r4
 8002726:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8002728:	6028      	str	r0, [r5, #0]
 800272a:	6069      	str	r1, [r5, #4]
 800272c:	60aa      	str	r2, [r5, #8]
 800272e:	60eb      	str	r3, [r5, #12]
 8002730:	3410      	adds	r4, #16
 8002732:	f10c 0c10 	add.w	ip, ip, #16
 8002736:	4574      	cmp	r4, lr
 8002738:	d1f3      	bne.n	8002722 <main+0x1ba>
 800273a:	4662      	mov	r2, ip
 800273c:	4623      	mov	r3, r4
 800273e:	cb03      	ldmia	r3!, {r0, r1}
 8002740:	6010      	str	r0, [r2, #0]
 8002742:	6051      	str	r1, [r2, #4]
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	7213      	strb	r3, [r2, #8]
    char* letters_for_keys[] = {
 8002748:	f507 7308 	add.w	r3, r7, #544	; 0x220
 800274c:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002750:	4a50      	ldr	r2, [pc, #320]	; (8002894 <main+0x32c>)
 8002752:	461c      	mov	r4, r3
 8002754:	4615      	mov	r5, r2
 8002756:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002758:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800275c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800275e:	682b      	ldr	r3, [r5, #0]
 8002760:	6023      	str	r3, [r4, #0]
    int letters[] = {0,0,0,0,0,0,0,0,0};
 8002762:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002766:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 800276a:	4618      	mov	r0, r3
 800276c:	2324      	movs	r3, #36	; 0x24
 800276e:	461a      	mov	r2, r3
 8002770:	2100      	movs	r1, #0
 8002772:	f00a fa87 	bl	800cc84 <memset>
	HAL_UART_Transmit(&huart1,(uint8_t *)REC_MODE,strlen(REC_MODE),100);
 8002776:	4b48      	ldr	r3, [pc, #288]	; (8002898 <main+0x330>)
 8002778:	681c      	ldr	r4, [r3, #0]
 800277a:	4b47      	ldr	r3, [pc, #284]	; (8002898 <main+0x330>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4618      	mov	r0, r3
 8002780:	f7fd fd38 	bl	80001f4 <strlen>
 8002784:	4603      	mov	r3, r0
 8002786:	b29a      	uxth	r2, r3
 8002788:	2364      	movs	r3, #100	; 0x64
 800278a:	4621      	mov	r1, r4
 800278c:	4839      	ldr	r0, [pc, #228]	; (8002874 <main+0x30c>)
 800278e:	f005 f8dc 	bl	800794a <HAL_UART_Transmit>
    char message[32] = {0};
 8002792:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002796:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 800279a:	2200      	movs	r2, #0
 800279c:	601a      	str	r2, [r3, #0]
 800279e:	3304      	adds	r3, #4
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
 80027aa:	611a      	str	r2, [r3, #16]
 80027ac:	615a      	str	r2, [r3, #20]
 80027ae:	619a      	str	r2, [r3, #24]
    int message_pos = 0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    gsm_module = init_module();
 80027b6:	4c39      	ldr	r4, [pc, #228]	; (800289c <main+0x334>)
 80027b8:	463b      	mov	r3, r7
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fd56 	bl	800226c <init_module>
 80027c0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 80027c4:	f5a3 7208 	sub.w	r2, r3, #544	; 0x220
 80027c8:	4623      	mov	r3, r4
 80027ca:	e892 0003 	ldmia.w	r2, {r0, r1}
 80027ce:	e883 0003 	stmia.w	r3, {r0, r1}
    keypad_init();
 80027d2:	f7ff fbff 	bl	8001fd4 <keypad_init>





    main_screen(cursor_on_phone - 1);
 80027d6:	4b32      	ldr	r3, [pc, #200]	; (80028a0 <main+0x338>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	3b01      	subs	r3, #1
 80027dc:	b2db      	uxtb	r3, r3
 80027de:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80027e2:	4694      	mov	ip, r2
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 febb 	bl	8003560 <main_screen.6>

    HAL_UART_Receive_IT(&huart1, usart1_rx_buf, 1);
 80027ea:	2201      	movs	r2, #1
 80027ec:	492d      	ldr	r1, [pc, #180]	; (80028a4 <main+0x33c>)
 80027ee:	4821      	ldr	r0, [pc, #132]	; (8002874 <main+0x30c>)
 80027f0:	f005 f9df 	bl	8007bb2 <HAL_UART_Receive_IT>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    key_pressed = keypad_scan();
 80027f4:	f7ff fc52 	bl	800209c <keypad_scan>
 80027f8:	4603      	mov	r3, r0
 80027fa:	f887 320f 	strb.w	r3, [r7, #527]	; 0x20f
	    if (snake_start){
 80027fe:	4b2a      	ldr	r3, [pc, #168]	; (80028a8 <main+0x340>)
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 80d0 	beq.w	80029a8 <main+0x440>
	    	drawSnake(&lcd1);
 8002808:	4814      	ldr	r0, [pc, #80]	; (800285c <main+0x2f4>)
 800280a:	f7ff fae3 	bl	8001dd4 <drawSnake>
	    	moveSnake(&lcd1);
 800280e:	4813      	ldr	r0, [pc, #76]	; (800285c <main+0x2f4>)
 8002810:	f7ff f81e 	bl	8001850 <moveSnake>

		   if(key_pressed != 0)
 8002814:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 80bd 	beq.w	8002998 <main+0x430>
		   {
			if (key_pressed == '2' & DIRECTION != UP & DIRECTION != DOWN){
 800281e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002822:	2b32      	cmp	r3, #50	; 0x32
 8002824:	bf0c      	ite	eq
 8002826:	2301      	moveq	r3, #1
 8002828:	2300      	movne	r3, #0
 800282a:	b2da      	uxtb	r2, r3
 800282c:	4b1f      	ldr	r3, [pc, #124]	; (80028ac <main+0x344>)
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	2b01      	cmp	r3, #1
 8002832:	bf14      	ite	ne
 8002834:	2301      	movne	r3, #1
 8002836:	2300      	moveq	r3, #0
 8002838:	b2db      	uxtb	r3, r3
 800283a:	4013      	ands	r3, r2
 800283c:	b2db      	uxtb	r3, r3
 800283e:	461a      	mov	r2, r3
 8002840:	4b1a      	ldr	r3, [pc, #104]	; (80028ac <main+0x344>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	2b03      	cmp	r3, #3
 8002846:	bf14      	ite	ne
 8002848:	2301      	movne	r3, #1
 800284a:	2300      	moveq	r3, #0
 800284c:	b2db      	uxtb	r3, r3
 800284e:	4013      	ands	r3, r2
 8002850:	2b00      	cmp	r3, #0
 8002852:	d02d      	beq.n	80028b0 <main+0x348>
			 DIRECTION = UP;
 8002854:	4b15      	ldr	r3, [pc, #84]	; (80028ac <main+0x344>)
 8002856:	2201      	movs	r2, #1
 8002858:	601a      	str	r2, [r3, #0]
 800285a:	e09d      	b.n	8002998 <main+0x430>
 800285c:	200002bc 	.word	0x200002bc
 8002860:	2000e56c 	.word	0x2000e56c
 8002864:	40020000 	.word	0x40020000
 8002868:	40020800 	.word	0x40020800
 800286c:	0800e468 	.word	0x0800e468
 8002870:	0800dc4c 	.word	0x0800dc4c
 8002874:	2000e5c8 	.word	0x2000e5c8
 8002878:	0800dc54 	.word	0x0800dc54
 800287c:	40020c00 	.word	0x40020c00
 8002880:	0800dc58 	.word	0x0800dc58
 8002884:	0800dc60 	.word	0x0800dc60
 8002888:	0800dc9c 	.word	0x0800dc9c
 800288c:	0800dcd8 	.word	0x0800dcd8
 8002890:	0800dd14 	.word	0x0800dd14
 8002894:	0800dd74 	.word	0x0800dd74
 8002898:	20000040 	.word	0x20000040
 800289c:	2000e564 	.word	0x2000e564
 80028a0:	20000028 	.word	0x20000028
 80028a4:	200044c0 	.word	0x200044c0
 80028a8:	2000e561 	.word	0x2000e561
 80028ac:	20000024 	.word	0x20000024
			}
			else if (key_pressed == '6' & DIRECTION != RIGHT & DIRECTION != LEFT){
 80028b0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80028b4:	2b36      	cmp	r3, #54	; 0x36
 80028b6:	bf0c      	ite	eq
 80028b8:	2301      	moveq	r3, #1
 80028ba:	2300      	movne	r3, #0
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4b7c      	ldr	r3, [pc, #496]	; (8002ab0 <main+0x548>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	bf14      	ite	ne
 80028c6:	2301      	movne	r3, #1
 80028c8:	2300      	moveq	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	4013      	ands	r3, r2
 80028ce:	b2db      	uxtb	r3, r3
 80028d0:	461a      	mov	r2, r3
 80028d2:	4b77      	ldr	r3, [pc, #476]	; (8002ab0 <main+0x548>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <main+0x386>
			 DIRECTION = RIGHT;
 80028e6:	4b72      	ldr	r3, [pc, #456]	; (8002ab0 <main+0x548>)
 80028e8:	2202      	movs	r2, #2
 80028ea:	601a      	str	r2, [r3, #0]
 80028ec:	e054      	b.n	8002998 <main+0x430>
			}
			else if (key_pressed == '8' & DIRECTION != DOWN & DIRECTION != UP){
 80028ee:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80028f2:	2b38      	cmp	r3, #56	; 0x38
 80028f4:	bf0c      	ite	eq
 80028f6:	2301      	moveq	r3, #1
 80028f8:	2300      	movne	r3, #0
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	4b6c      	ldr	r3, [pc, #432]	; (8002ab0 <main+0x548>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2b03      	cmp	r3, #3
 8002902:	bf14      	ite	ne
 8002904:	2301      	movne	r3, #1
 8002906:	2300      	moveq	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	4013      	ands	r3, r2
 800290c:	b2db      	uxtb	r3, r3
 800290e:	461a      	mov	r2, r3
 8002910:	4b67      	ldr	r3, [pc, #412]	; (8002ab0 <main+0x548>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	2b01      	cmp	r3, #1
 8002916:	bf14      	ite	ne
 8002918:	2301      	movne	r3, #1
 800291a:	2300      	moveq	r3, #0
 800291c:	b2db      	uxtb	r3, r3
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d003      	beq.n	800292c <main+0x3c4>
			 DIRECTION = DOWN;
 8002924:	4b62      	ldr	r3, [pc, #392]	; (8002ab0 <main+0x548>)
 8002926:	2203      	movs	r2, #3
 8002928:	601a      	str	r2, [r3, #0]
 800292a:	e035      	b.n	8002998 <main+0x430>
			}
			else if (key_pressed == '4' & DIRECTION != LEFT & DIRECTION != RIGHT){
 800292c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002930:	2b34      	cmp	r3, #52	; 0x34
 8002932:	bf0c      	ite	eq
 8002934:	2301      	moveq	r3, #1
 8002936:	2300      	movne	r3, #0
 8002938:	b2da      	uxtb	r2, r3
 800293a:	4b5d      	ldr	r3, [pc, #372]	; (8002ab0 <main+0x548>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2b00      	cmp	r3, #0
 8002940:	bf14      	ite	ne
 8002942:	2301      	movne	r3, #1
 8002944:	2300      	moveq	r3, #0
 8002946:	b2db      	uxtb	r3, r3
 8002948:	4013      	ands	r3, r2
 800294a:	b2db      	uxtb	r3, r3
 800294c:	461a      	mov	r2, r3
 800294e:	4b58      	ldr	r3, [pc, #352]	; (8002ab0 <main+0x548>)
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2b02      	cmp	r3, #2
 8002954:	bf14      	ite	ne
 8002956:	2301      	movne	r3, #1
 8002958:	2300      	moveq	r3, #0
 800295a:	b2db      	uxtb	r3, r3
 800295c:	4013      	ands	r3, r2
 800295e:	2b00      	cmp	r3, #0
 8002960:	d003      	beq.n	800296a <main+0x402>
			 DIRECTION = LEFT;
 8002962:	4b53      	ldr	r3, [pc, #332]	; (8002ab0 <main+0x548>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]
 8002968:	e016      	b.n	8002998 <main+0x430>
			}
    		else if (key_pressed == 'B'){
 800296a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800296e:	2b42      	cmp	r3, #66	; 0x42
 8002970:	d112      	bne.n	8002998 <main+0x430>
    			snake_screen = false;
 8002972:	4b50      	ldr	r3, [pc, #320]	; (8002ab4 <main+0x54c>)
 8002974:	2200      	movs	r2, #0
 8002976:	701a      	strb	r2, [r3, #0]
    			snake_start = false;
 8002978:	4b4f      	ldr	r3, [pc, #316]	; (8002ab8 <main+0x550>)
 800297a:	2200      	movs	r2, #0
 800297c:	701a      	strb	r2, [r3, #0]
    			screen_main = true;
 800297e:	4b4f      	ldr	r3, [pc, #316]	; (8002abc <main+0x554>)
 8002980:	2201      	movs	r2, #1
 8002982:	701a      	strb	r2, [r3, #0]
    			main_screen(cursor_on_phone - 1);
 8002984:	4b4e      	ldr	r3, [pc, #312]	; (8002ac0 <main+0x558>)
 8002986:	781b      	ldrb	r3, [r3, #0]
 8002988:	3b01      	subs	r3, #1
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002990:	4694      	mov	ip, r2
 8002992:	4618      	mov	r0, r3
 8002994:	f000 fde4 	bl	8003560 <main_screen.6>
    		}

		   }

		   LCD5110_refresh(&lcd1);
 8002998:	484a      	ldr	r0, [pc, #296]	; (8002ac4 <main+0x55c>)
 800299a:	f7fe f8e3 	bl	8000b64 <LCD5110_refresh>
		   HAL_Delay(10);
 800299e:	200a      	movs	r0, #10
 80029a0:	f001 fb22 	bl	8003fe8 <HAL_Delay>
 80029a4:	f000 bd01 	b.w	80033aa <main+0xe42>
	    }
	    else if (get_call){
 80029a8:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <main+0x560>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d03f      	beq.n	8002a30 <main+0x4c8>
    		get_call_screen(buf);
 80029b0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80029b4:	469c      	mov	ip, r3
 80029b6:	4845      	ldr	r0, [pc, #276]	; (8002acc <main+0x564>)
 80029b8:	f000 fd9c 	bl	80034f4 <get_call_screen.0>
    		if (key_pressed == 'A'){
 80029bc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80029c0:	2b41      	cmp	r3, #65	; 0x41
 80029c2:	d111      	bne.n	80029e8 <main+0x480>
    			answer_call(gsm_module);
 80029c4:	4b42      	ldr	r3, [pc, #264]	; (8002ad0 <main+0x568>)
 80029c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80029ca:	f7ff fc81 	bl	80022d0 <answer_call>
    			get_call = false;
 80029ce:	4b3e      	ldr	r3, [pc, #248]	; (8002ac8 <main+0x560>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	701a      	strb	r2, [r3, #0]
    			screen_main = true;
 80029d4:	4b39      	ldr	r3, [pc, #228]	; (8002abc <main+0x554>)
 80029d6:	2201      	movs	r2, #1
 80029d8:	701a      	strb	r2, [r3, #0]
    			call_screen();
 80029da:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80029de:	469c      	mov	ip, r3
 80029e0:	f000 fd04 	bl	80033ec <call_screen.7>
 80029e4:	f000 bce1 	b.w	80033aa <main+0xe42>
    		}
    		else if (key_pressed == 'B'){
 80029e8:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80029ec:	2b42      	cmp	r3, #66	; 0x42
 80029ee:	f040 84dc 	bne.w	80033aa <main+0xe42>
    			end_call();
 80029f2:	f7ff fc8d 	bl	8002310 <end_call>
    			get_call = false;
 80029f6:	4b34      	ldr	r3, [pc, #208]	; (8002ac8 <main+0x560>)
 80029f8:	2200      	movs	r2, #0
 80029fa:	701a      	strb	r2, [r3, #0]
    			screen_main = true;
 80029fc:	4b2f      	ldr	r3, [pc, #188]	; (8002abc <main+0x554>)
 80029fe:	2201      	movs	r2, #1
 8002a00:	701a      	strb	r2, [r3, #0]
				memset(buf, ' ', sizeof(buf) - 1);
 8002a02:	2209      	movs	r2, #9
 8002a04:	2120      	movs	r1, #32
 8002a06:	4831      	ldr	r0, [pc, #196]	; (8002acc <main+0x564>)
 8002a08:	f00a f93c 	bl	800cc84 <memset>
				buf[0] = '\0';
 8002a0c:	4b2f      	ldr	r3, [pc, #188]	; (8002acc <main+0x564>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]
				pos = 0;
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    			main_screen(cursor_on_phone - 1);
 8002a18:	4b29      	ldr	r3, [pc, #164]	; (8002ac0 <main+0x558>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	3b01      	subs	r3, #1
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002a24:	4694      	mov	ip, r2
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fd9a 	bl	8003560 <main_screen.6>
 8002a2c:	f000 bcbd 	b.w	80033aa <main+0xe42>
    		}
    	}
    	else if(key_pressed != 0 || end_call_flag)
 8002a30:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d104      	bne.n	8002a42 <main+0x4da>
 8002a38:	4b26      	ldr	r3, [pc, #152]	; (8002ad4 <main+0x56c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	f000 84b4 	beq.w	80033aa <main+0xe42>
	    {
	    	if (type_message_screen) {
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <main+0x570>)
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	f000 8199 	beq.w	8002d7e <main+0x816>
	    		if (!want_to_send_digits) {
 8002a4c:	4b23      	ldr	r3, [pc, #140]	; (8002adc <main+0x574>)
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f083 0301 	eor.w	r3, r3, #1
 8002a54:	b2db      	uxtb	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	f000 8105 	beq.w	8002c66 <main+0x6fe>
					if (key_pressed >= '0' && key_pressed <= '9') {
 8002a5c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002a60:	2b2f      	cmp	r3, #47	; 0x2f
 8002a62:	d918      	bls.n	8002a96 <main+0x52e>
 8002a64:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002a68:	2b39      	cmp	r3, #57	; 0x39
 8002a6a:	d814      	bhi.n	8002a96 <main+0x52e>
						int num = key_pressed - '0';
 8002a6c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002a70:	3b30      	subs	r3, #48	; 0x30
 8002a72:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
						letters[num - 1]++;
 8002a76:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002a7a:	3b01      	subs	r3, #1
 8002a7c:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8002a80:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a84:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8002a88:	1c51      	adds	r1, r2, #1
 8002a8a:	f507 7208 	add.w	r2, r7, #544	; 0x220
 8002a8e:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002a92:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
					}
					if (key_pressed == 'C') {
 8002a96:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002a9a:	2b43      	cmp	r3, #67	; 0x43
 8002a9c:	f040 8083 	bne.w	8002ba6 <main+0x63e>
						int maxindex = 0;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
						for (int i = 0; i < 9; i++) {
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002aac:	e033      	b.n	8002b16 <main+0x5ae>
 8002aae:	bf00      	nop
 8002ab0:	20000024 	.word	0x20000024
 8002ab4:	2000e560 	.word	0x2000e560
 8002ab8:	2000e561 	.word	0x2000e561
 8002abc:	2000e559 	.word	0x2000e559
 8002ac0:	20000028 	.word	0x20000028
 8002ac4:	200002bc 	.word	0x200002bc
 8002ac8:	2000e558 	.word	0x2000e558
 8002acc:	200044b4 	.word	0x200044b4
 8002ad0:	2000e564 	.word	0x2000e564
 8002ad4:	2000e55d 	.word	0x2000e55d
 8002ad8:	2000e55c 	.word	0x2000e55c
 8002adc:	2000002a 	.word	0x2000002a
								if (letters[i] > letters[maxindex]) {
 8002ae0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002ae4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002ae8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8002aec:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8002af0:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002af4:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002af8:	f8d7 1214 	ldr.w	r1, [r7, #532]	; 0x214
 8002afc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8002b00:	429a      	cmp	r2, r3
 8002b02:	dd03      	ble.n	8002b0c <main+0x5a4>
									maxindex = i;
 8002b04:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002b08:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
						for (int i = 0; i < 9; i++) {
 8002b0c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002b10:	3301      	adds	r3, #1
 8002b12:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002b16:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	dde0      	ble.n	8002ae0 <main+0x578>
								}
							}
							char *message_t = letters_for_keys[maxindex];
 8002b1e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002b22:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002b26:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b2e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
							message[message_pos] = message_t[letters[maxindex] - 1];
 8002b32:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002b36:	f5a3 73e6 	sub.w	r3, r3, #460	; 0x1cc
 8002b3a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b42:	3b01      	subs	r3, #1
 8002b44:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8002b48:	4413      	add	r3, r2
 8002b4a:	7819      	ldrb	r1, [r3, #0]
 8002b4c:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002b50:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8002b54:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b58:	4413      	add	r3, r2
 8002b5a:	460a      	mov	r2, r1
 8002b5c:	701a      	strb	r2, [r3, #0]
							message_pos++;
 8002b5e:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b62:	3301      	adds	r3, #1
 8002b64:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
							message[message_pos] = '\0';
 8002b68:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002b6c:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8002b70:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002b74:	4413      	add	r3, r2
 8002b76:	2200      	movs	r2, #0
 8002b78:	701a      	strb	r2, [r3, #0]
							LCD5110_set_cursor(0, 0, &lcd1);
 8002b7a:	4aca      	ldr	r2, [pc, #808]	; (8002ea4 <main+0x93c>)
 8002b7c:	2100      	movs	r1, #0
 8002b7e:	2000      	movs	r0, #0
 8002b80:	f7fd fffc 	bl	8000b7c <LCD5110_set_cursor>
							LCD5110_print(message, 0, &lcd1);
 8002b84:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002b88:	4ac6      	ldr	r2, [pc, #792]	; (8002ea4 <main+0x93c>)
 8002b8a:	2100      	movs	r1, #0
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fe f818 	bl	8000bc2 <LCD5110_print>
							LCD5110_refresh(&lcd1);
 8002b92:	48c4      	ldr	r0, [pc, #784]	; (8002ea4 <main+0x93c>)
 8002b94:	f7fd ffe6 	bl	8000b64 <LCD5110_refresh>
							memset(letters, 0, sizeof(letters));
 8002b98:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b9c:	2224      	movs	r2, #36	; 0x24
 8002b9e:	2100      	movs	r1, #0
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f00a f86f 	bl	800cc84 <memset>
						}
					if (key_pressed == 'A') {
 8002ba6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002baa:	2b41      	cmp	r3, #65	; 0x41
 8002bac:	f040 83fd 	bne.w	80033aa <main+0xe42>
						strcat(message, "\r\n\x1A");
 8002bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7fd fb1d 	bl	80001f4 <strlen>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	461a      	mov	r2, r3
 8002bbe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bc2:	4413      	add	r3, r2
 8002bc4:	4ab8      	ldr	r2, [pc, #736]	; (8002ea8 <main+0x940>)
 8002bc6:	6810      	ldr	r0, [r2, #0]
 8002bc8:	6018      	str	r0, [r3, #0]
						HAL_UART_Transmit(&huart1,(uint8_t *)message,strlen(message),100);
 8002bca:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7fd fb10 	bl	80001f4 <strlen>
 8002bd4:	4603      	mov	r3, r0
 8002bd6:	b29a      	uxth	r2, r3
 8002bd8:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002bdc:	2364      	movs	r3, #100	; 0x64
 8002bde:	48b3      	ldr	r0, [pc, #716]	; (8002eac <main+0x944>)
 8002be0:	f004 feb3 	bl	800794a <HAL_UART_Transmit>
						HAL_Delay(500);
 8002be4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002be8:	f001 f9fe 	bl	8003fe8 <HAL_Delay>
						HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002bec:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002bf0:	230a      	movs	r3, #10
 8002bf2:	220a      	movs	r2, #10
 8002bf4:	48ad      	ldr	r0, [pc, #692]	; (8002eac <main+0x944>)
 8002bf6:	f004 ff3a 	bl	8007a6e <HAL_UART_Receive>
						LCD5110_refresh(&lcd1);
 8002bfa:	48aa      	ldr	r0, [pc, #680]	; (8002ea4 <main+0x93c>)
 8002bfc:	f7fd ffb2 	bl	8000b64 <LCD5110_refresh>
						HAL_Delay(500);
 8002c00:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002c04:	f001 f9f0 	bl	8003fe8 <HAL_Delay>
						message[0] = '\0';
 8002c08:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002c0c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]
						message_pos = 0;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						LCD5110_refresh(&lcd1);
 8002c1a:	48a2      	ldr	r0, [pc, #648]	; (8002ea4 <main+0x93c>)
 8002c1c:	f7fd ffa2 	bl	8000b64 <LCD5110_refresh>
						type_message_screen = false;
 8002c20:	4ba3      	ldr	r3, [pc, #652]	; (8002eb0 <main+0x948>)
 8002c22:	2200      	movs	r2, #0
 8002c24:	701a      	strb	r2, [r3, #0]
						screen_begin = true;
 8002c26:	4ba3      	ldr	r3, [pc, #652]	; (8002eb4 <main+0x94c>)
 8002c28:	2201      	movs	r2, #1
 8002c2a:	701a      	strb	r2, [r3, #0]
						want_to_send_digits = true;
 8002c2c:	4ba2      	ldr	r3, [pc, #648]	; (8002eb8 <main+0x950>)
 8002c2e:	2201      	movs	r2, #1
 8002c30:	701a      	strb	r2, [r3, #0]
						buf[0] = '\0';
 8002c32:	4ba2      	ldr	r3, [pc, #648]	; (8002ebc <main+0x954>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
						message[0] = '\0';
 8002c38:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002c3c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
						message_pos = 0;
 8002c44:	2300      	movs	r3, #0
 8002c46:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
						pos = 0;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						main_screen(cursor_on_phone - 1);
 8002c50:	4b9b      	ldr	r3, [pc, #620]	; (8002ec0 <main+0x958>)
 8002c52:	781b      	ldrb	r3, [r3, #0]
 8002c54:	3b01      	subs	r3, #1
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002c5c:	4694      	mov	ip, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f000 fc7e 	bl	8003560 <main_screen.6>
 8002c64:	e3a1      	b.n	80033aa <main+0xe42>
					}
	    		}
	    		else {
	    			if (key_pressed == 'C') { // changing mode to letters
 8002c66:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002c6a:	2b43      	cmp	r3, #67	; 0x43
 8002c6c:	d103      	bne.n	8002c76 <main+0x70e>
						want_to_send_digits = false;
 8002c6e:	4b92      	ldr	r3, [pc, #584]	; (8002eb8 <main+0x950>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e02f      	b.n	8002cd6 <main+0x76e>
					}

					else if (key_pressed >= '0' && key_pressed <= '9' && message_pos < sizeof(message))
 8002c76:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002c7a:	2b2f      	cmp	r3, #47	; 0x2f
 8002c7c:	d92b      	bls.n	8002cd6 <main+0x76e>
 8002c7e:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002c82:	2b39      	cmp	r3, #57	; 0x39
 8002c84:	d827      	bhi.n	8002cd6 <main+0x76e>
 8002c86:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c8a:	2b1f      	cmp	r3, #31
 8002c8c:	d823      	bhi.n	8002cd6 <main+0x76e>
						{
							message[message_pos] = key_pressed;
 8002c8e:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002c92:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8002c96:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8002ca0:	701a      	strb	r2, [r3, #0]
							message_pos++;
 8002ca2:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
							message[message_pos] = '\0';
 8002cac:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002cb0:	f5a3 72f6 	sub.w	r2, r3, #492	; 0x1ec
 8002cb4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002cb8:	4413      	add	r3, r2
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]

							LCD5110_set_cursor(0, 0, &lcd1);
 8002cbe:	4a79      	ldr	r2, [pc, #484]	; (8002ea4 <main+0x93c>)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	2000      	movs	r0, #0
 8002cc4:	f7fd ff5a 	bl	8000b7c <LCD5110_set_cursor>
							LCD5110_print(message, 0, &lcd1);
 8002cc8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ccc:	4a75      	ldr	r2, [pc, #468]	; (8002ea4 <main+0x93c>)
 8002cce:	2100      	movs	r1, #0
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd ff76 	bl	8000bc2 <LCD5110_print>
						}
						if (key_pressed == 'A') {
 8002cd6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002cda:	2b41      	cmp	r3, #65	; 0x41
 8002cdc:	f040 8365 	bne.w	80033aa <main+0xe42>


							strcat(message, "\r\n\x1A");
 8002ce0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002ce4:	4618      	mov	r0, r3
 8002ce6:	f7fd fa85 	bl	80001f4 <strlen>
 8002cea:	4603      	mov	r3, r0
 8002cec:	461a      	mov	r2, r3
 8002cee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cf2:	4413      	add	r3, r2
 8002cf4:	4a6c      	ldr	r2, [pc, #432]	; (8002ea8 <main+0x940>)
 8002cf6:	6810      	ldr	r0, [r2, #0]
 8002cf8:	6018      	str	r0, [r3, #0]

							HAL_UART_Transmit(&huart1,(uint8_t *)message,strlen(message),100);
 8002cfa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002cfe:	4618      	mov	r0, r3
 8002d00:	f7fd fa78 	bl	80001f4 <strlen>
 8002d04:	4603      	mov	r3, r0
 8002d06:	b29a      	uxth	r2, r3
 8002d08:	f107 0134 	add.w	r1, r7, #52	; 0x34
 8002d0c:	2364      	movs	r3, #100	; 0x64
 8002d0e:	4867      	ldr	r0, [pc, #412]	; (8002eac <main+0x944>)
 8002d10:	f004 fe1b 	bl	800794a <HAL_UART_Transmit>
							HAL_Delay(500);
 8002d14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d18:	f001 f966 	bl	8003fe8 <HAL_Delay>
							HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002d1c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002d20:	230a      	movs	r3, #10
 8002d22:	220a      	movs	r2, #10
 8002d24:	4861      	ldr	r0, [pc, #388]	; (8002eac <main+0x944>)
 8002d26:	f004 fea2 	bl	8007a6e <HAL_UART_Receive>
							LCD5110_refresh(&lcd1);
 8002d2a:	485e      	ldr	r0, [pc, #376]	; (8002ea4 <main+0x93c>)
 8002d2c:	f7fd ff1a 	bl	8000b64 <LCD5110_refresh>
							HAL_Delay(500);
 8002d30:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002d34:	f001 f958 	bl	8003fe8 <HAL_Delay>
							message[0] = '\0';
 8002d38:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8002d3c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002d40:	2200      	movs	r2, #0
 8002d42:	701a      	strb	r2, [r3, #0]
							message_pos = 0;
 8002d44:	2300      	movs	r3, #0
 8002d46:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
							LCD5110_refresh(&lcd1);
 8002d4a:	4856      	ldr	r0, [pc, #344]	; (8002ea4 <main+0x93c>)
 8002d4c:	f7fd ff0a 	bl	8000b64 <LCD5110_refresh>
							type_message_screen = false;
 8002d50:	4b57      	ldr	r3, [pc, #348]	; (8002eb0 <main+0x948>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	701a      	strb	r2, [r3, #0]
							screen_begin = true;
 8002d56:	4b57      	ldr	r3, [pc, #348]	; (8002eb4 <main+0x94c>)
 8002d58:	2201      	movs	r2, #1
 8002d5a:	701a      	strb	r2, [r3, #0]
							buf[0] = '\0';
 8002d5c:	4b57      	ldr	r3, [pc, #348]	; (8002ebc <main+0x954>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	701a      	strb	r2, [r3, #0]
							pos = 0;
 8002d62:	2300      	movs	r3, #0
 8002d64:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
							main_screen(cursor_on_phone - 1);
 8002d68:	4b55      	ldr	r3, [pc, #340]	; (8002ec0 <main+0x958>)
 8002d6a:	781b      	ldrb	r3, [r3, #0]
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002d74:	4694      	mov	ip, r2
 8002d76:	4618      	mov	r0, r3
 8002d78:	f000 fbf2 	bl	8003560 <main_screen.6>
 8002d7c:	e315      	b.n	80033aa <main+0xe42>
						}
	    			}
	    		}
	    	else if (message_read){
 8002d7e:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <main+0x95c>)
 8002d80:	781b      	ldrb	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d015      	beq.n	8002db2 <main+0x84a>

	    		if (key_pressed == 'B') {
 8002d86:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002d8a:	2b42      	cmp	r3, #66	; 0x42
 8002d8c:	f040 830d 	bne.w	80033aa <main+0xe42>
	    			message_read = false;
 8002d90:	4b4c      	ldr	r3, [pc, #304]	; (8002ec4 <main+0x95c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	701a      	strb	r2, [r3, #0]
	    			screen_begin = true;
 8002d96:	4b47      	ldr	r3, [pc, #284]	; (8002eb4 <main+0x94c>)
 8002d98:	2201      	movs	r2, #1
 8002d9a:	701a      	strb	r2, [r3, #0]
	    			main_screen(cursor_on_phone - 1);
 8002d9c:	4b48      	ldr	r3, [pc, #288]	; (8002ec0 <main+0x958>)
 8002d9e:	781b      	ldrb	r3, [r3, #0]
 8002da0:	3b01      	subs	r3, #1
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002da8:	4694      	mov	ip, r2
 8002daa:	4618      	mov	r0, r3
 8002dac:	f000 fbd8 	bl	8003560 <main_screen.6>
 8002db0:	e2fb      	b.n	80033aa <main+0xe42>
	    		}

	    	}
	    	else if (screen_message) {
 8002db2:	4b45      	ldr	r3, [pc, #276]	; (8002ec8 <main+0x960>)
 8002db4:	781b      	ldrb	r3, [r3, #0]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	f000 8118 	beq.w	8002fec <main+0xa84>
	    		if (key_pressed == 'B') {
 8002dbc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002dc0:	2b42      	cmp	r3, #66	; 0x42
 8002dc2:	d11d      	bne.n	8002e00 <main+0x898>
	    			screen_message = false;
 8002dc4:	4b40      	ldr	r3, [pc, #256]	; (8002ec8 <main+0x960>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
	    			type_message_screen = false;
 8002dca:	4b39      	ldr	r3, [pc, #228]	; (8002eb0 <main+0x948>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
	    			screen_begin = true;
 8002dd0:	4b38      	ldr	r3, [pc, #224]	; (8002eb4 <main+0x94c>)
 8002dd2:	2201      	movs	r2, #1
 8002dd4:	701a      	strb	r2, [r3, #0]
	    			memset(buf, ' ', sizeof(buf) - 1);
 8002dd6:	2209      	movs	r2, #9
 8002dd8:	2120      	movs	r1, #32
 8002dda:	4838      	ldr	r0, [pc, #224]	; (8002ebc <main+0x954>)
 8002ddc:	f009 ff52 	bl	800cc84 <memset>
					buf[0] = '\0';
 8002de0:	4b36      	ldr	r3, [pc, #216]	; (8002ebc <main+0x954>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	701a      	strb	r2, [r3, #0]
					pos = 0;
 8002de6:	2300      	movs	r3, #0
 8002de8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					main_screen(cursor_on_phone - 1);
 8002dec:	4b34      	ldr	r3, [pc, #208]	; (8002ec0 <main+0x958>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	3b01      	subs	r3, #1
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 8002df8:	4694      	mov	ip, r2
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 fbb0 	bl	8003560 <main_screen.6>
	    		}
	    		if (key_pressed >= '0' && key_pressed <= '9' && pos < sizeof(buf))
 8002e00:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002e04:	2b2f      	cmp	r3, #47	; 0x2f
 8002e06:	d923      	bls.n	8002e50 <main+0x8e8>
 8002e08:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002e0c:	2b39      	cmp	r3, #57	; 0x39
 8002e0e:	d81f      	bhi.n	8002e50 <main+0x8e8>
 8002e10:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002e14:	2b09      	cmp	r3, #9
 8002e16:	d81b      	bhi.n	8002e50 <main+0x8e8>
					{
						buf[pos] = key_pressed;
 8002e18:	4a28      	ldr	r2, [pc, #160]	; (8002ebc <main+0x954>)
 8002e1a:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002e1e:	4413      	add	r3, r2
 8002e20:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 8002e24:	701a      	strb	r2, [r3, #0]
						pos++;
 8002e26:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						buf[pos] = '\0';
 8002e30:	4a22      	ldr	r2, [pc, #136]	; (8002ebc <main+0x954>)
 8002e32:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002e36:	4413      	add	r3, r2
 8002e38:	2200      	movs	r2, #0
 8002e3a:	701a      	strb	r2, [r3, #0]

						LCD5110_set_cursor(0, 0, &lcd1);
 8002e3c:	4a19      	ldr	r2, [pc, #100]	; (8002ea4 <main+0x93c>)
 8002e3e:	2100      	movs	r1, #0
 8002e40:	2000      	movs	r0, #0
 8002e42:	f7fd fe9b 	bl	8000b7c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 8002e46:	4a17      	ldr	r2, [pc, #92]	; (8002ea4 <main+0x93c>)
 8002e48:	2100      	movs	r1, #0
 8002e4a:	481c      	ldr	r0, [pc, #112]	; (8002ebc <main+0x954>)
 8002e4c:	f7fd feb9 	bl	8000bc2 <LCD5110_print>
					}
	    		if (key_pressed == 'A') {
 8002e50:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002e54:	2b41      	cmp	r3, #65	; 0x41
 8002e56:	f040 8080 	bne.w	8002f5a <main+0x9f2>
					  HAL_UART_Transmit(&huart1,(uint8_t *)MESSAGE_MODE,strlen(MESSAGE_MODE),100);
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <main+0x964>)
 8002e5c:	681c      	ldr	r4, [r3, #0]
 8002e5e:	4b1b      	ldr	r3, [pc, #108]	; (8002ecc <main+0x964>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd f9c6 	bl	80001f4 <strlen>
 8002e68:	4603      	mov	r3, r0
 8002e6a:	b29a      	uxth	r2, r3
 8002e6c:	2364      	movs	r3, #100	; 0x64
 8002e6e:	4621      	mov	r1, r4
 8002e70:	480e      	ldr	r0, [pc, #56]	; (8002eac <main+0x944>)
 8002e72:	f004 fd6a 	bl	800794a <HAL_UART_Transmit>
					  HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002e76:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002e7a:	230a      	movs	r3, #10
 8002e7c:	220a      	movs	r2, #10
 8002e7e:	480b      	ldr	r0, [pc, #44]	; (8002eac <main+0x944>)
 8002e80:	f004 fdf5 	bl	8007a6e <HAL_UART_Receive>
					  if(strstr((char *)res,"OK")){
 8002e84:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002e88:	4911      	ldr	r1, [pc, #68]	; (8002ed0 <main+0x968>)
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f009 ff2f 	bl	800ccee <strstr>
 8002e90:	4603      	mov	r3, r0
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d020      	beq.n	8002ed8 <main+0x970>
						  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 8002e96:	2201      	movs	r2, #1
 8002e98:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e9c:	480d      	ldr	r0, [pc, #52]	; (8002ed4 <main+0x96c>)
 8002e9e:	f001 fc07 	bl	80046b0 <HAL_GPIO_WritePin>
 8002ea2:	e01f      	b.n	8002ee4 <main+0x97c>
 8002ea4:	200002bc 	.word	0x200002bc
 8002ea8:	0800dc24 	.word	0x0800dc24
 8002eac:	2000e5c8 	.word	0x2000e5c8
 8002eb0:	2000e55c 	.word	0x2000e55c
 8002eb4:	20000029 	.word	0x20000029
 8002eb8:	2000002a 	.word	0x2000002a
 8002ebc:	200044b4 	.word	0x200044b4
 8002ec0:	20000028 	.word	0x20000028
 8002ec4:	2000e55f 	.word	0x2000e55f
 8002ec8:	2000e55b 	.word	0x2000e55b
 8002ecc:	2000002c 	.word	0x2000002c
 8002ed0:	0800dc54 	.word	0x0800dc54
 8002ed4:	40020c00 	.word	0x40020c00
					  }
					  else{
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 8002ed8:	2201      	movs	r2, #1
 8002eda:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8002ede:	489e      	ldr	r0, [pc, #632]	; (8003158 <main+0xbf0>)
 8002ee0:	f001 fbe6 	bl	80046b0 <HAL_GPIO_WritePin>
					  }

					  char current_number[25];
					  strcpy(current_number, MSG_NUMBER_INIT);
 8002ee4:	4b9d      	ldr	r3, [pc, #628]	; (800315c <main+0xbf4>)
 8002ee6:	681a      	ldr	r2, [r3, #0]
 8002ee8:	f107 0318 	add.w	r3, r7, #24
 8002eec:	4611      	mov	r1, r2
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f009 ff97 	bl	800ce22 <strcpy>
					  strcat(current_number, buf);
 8002ef4:	f107 0318 	add.w	r3, r7, #24
 8002ef8:	4999      	ldr	r1, [pc, #612]	; (8003160 <main+0xbf8>)
 8002efa:	4618      	mov	r0, r3
 8002efc:	f009 feca 	bl	800cc94 <strcat>
					  strcat(current_number, "\"\r\n");
 8002f00:	f107 0318 	add.w	r3, r7, #24
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7fd f975 	bl	80001f4 <strlen>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	f107 0318 	add.w	r3, r7, #24
 8002f12:	4413      	add	r3, r2
 8002f14:	4a93      	ldr	r2, [pc, #588]	; (8003164 <main+0xbfc>)
 8002f16:	6810      	ldr	r0, [r2, #0]
 8002f18:	6018      	str	r0, [r3, #0]
					  HAL_UART_Transmit(&huart1,(uint8_t *)current_number,strlen(current_number),100);
 8002f1a:	f107 0318 	add.w	r3, r7, #24
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fd f968 	bl	80001f4 <strlen>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	f107 0118 	add.w	r1, r7, #24
 8002f2c:	2364      	movs	r3, #100	; 0x64
 8002f2e:	488e      	ldr	r0, [pc, #568]	; (8003168 <main+0xc00>)
 8002f30:	f004 fd0b 	bl	800794a <HAL_UART_Transmit>
					  HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002f34:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8002f38:	230a      	movs	r3, #10
 8002f3a:	220a      	movs	r2, #10
 8002f3c:	488a      	ldr	r0, [pc, #552]	; (8003168 <main+0xc00>)
 8002f3e:	f004 fd96 	bl	8007a6e <HAL_UART_Receive>

	    			screen_message = false;
 8002f42:	4b8a      	ldr	r3, [pc, #552]	; (800316c <main+0xc04>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	701a      	strb	r2, [r3, #0]
	    			type_message_screen = true;
 8002f48:	4b89      	ldr	r3, [pc, #548]	; (8003170 <main+0xc08>)
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	701a      	strb	r2, [r3, #0]
	    			type_message_scren();
 8002f4e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002f52:	469c      	mov	ip, r3
 8002f54:	f000 fc0a 	bl	800376c <type_message_scren.1>
 8002f58:	e227      	b.n	80033aa <main+0xe42>
	    			}
	    		else if (key_pressed == 'D')
 8002f5a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002f5e:	2b44      	cmp	r3, #68	; 0x44
 8002f60:	d11a      	bne.n	8002f98 <main+0xa30>
					{
						memset(buf, ' ', sizeof(buf) - 1);
 8002f62:	2209      	movs	r2, #9
 8002f64:	2120      	movs	r1, #32
 8002f66:	487e      	ldr	r0, [pc, #504]	; (8003160 <main+0xbf8>)
 8002f68:	f009 fe8c 	bl	800cc84 <memset>
						buf[0] = '\0';
 8002f6c:	4b7c      	ldr	r3, [pc, #496]	; (8003160 <main+0xbf8>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
						pos = 0;
 8002f72:	2300      	movs	r3, #0
 8002f74:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						LCD5110_refresh(&lcd1);
 8002f78:	487e      	ldr	r0, [pc, #504]	; (8003174 <main+0xc0c>)
 8002f7a:	f7fd fdf3 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 8002f7e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002f82:	4a7c      	ldr	r2, [pc, #496]	; (8003174 <main+0xc0c>)
 8002f84:	2101      	movs	r1, #1
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd ffc5 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 8002f8c:	4a79      	ldr	r2, [pc, #484]	; (8003174 <main+0xc0c>)
 8002f8e:	2100      	movs	r1, #0
 8002f90:	2000      	movs	r0, #0
 8002f92:	f7fd fdf3 	bl	8000b7c <LCD5110_set_cursor>
 8002f96:	e208      	b.n	80033aa <main+0xe42>
					}
	    		else if (key_pressed == 'C' && pos > 0)
 8002f98:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8002f9c:	2b43      	cmp	r3, #67	; 0x43
 8002f9e:	f040 8204 	bne.w	80033aa <main+0xe42>
 8002fa2:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	f340 81ff 	ble.w	80033aa <main+0xe42>
					{
						pos--;
 8002fac:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						buf[pos] = '\0';
 8002fb6:	4a6a      	ldr	r2, [pc, #424]	; (8003160 <main+0xbf8>)
 8002fb8:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8002fbc:	4413      	add	r3, r2
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	701a      	strb	r2, [r3, #0]

						LCD5110_refresh(&lcd1);
 8002fc2:	486c      	ldr	r0, [pc, #432]	; (8003174 <main+0xc0c>)
 8002fc4:	f7fd fdce 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 8002fc8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8002fcc:	4a69      	ldr	r2, [pc, #420]	; (8003174 <main+0xc0c>)
 8002fce:	2101      	movs	r1, #1
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	f7fd ffa0 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 8002fd6:	4a67      	ldr	r2, [pc, #412]	; (8003174 <main+0xc0c>)
 8002fd8:	2100      	movs	r1, #0
 8002fda:	2000      	movs	r0, #0
 8002fdc:	f7fd fdce 	bl	8000b7c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 8002fe0:	4a64      	ldr	r2, [pc, #400]	; (8003174 <main+0xc0c>)
 8002fe2:	2100      	movs	r1, #0
 8002fe4:	485e      	ldr	r0, [pc, #376]	; (8003160 <main+0xbf8>)
 8002fe6:	f7fd fdec 	bl	8000bc2 <LCD5110_print>
 8002fea:	e1de      	b.n	80033aa <main+0xe42>
					}
	    	}
	    	else if (screen_begin) {
 8002fec:	4b62      	ldr	r3, [pc, #392]	; (8003178 <main+0xc10>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	f000 80d3 	beq.w	800319c <main+0xc34>
	    		end_call_flag = false;
 8002ff6:	4b61      	ldr	r3, [pc, #388]	; (800317c <main+0xc14>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	701a      	strb	r2, [r3, #0]
	    		if (key_pressed == '1' || key_pressed == '2' || key_pressed == '3' || key_pressed == '4') {
 8002ffc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003000:	2b31      	cmp	r3, #49	; 0x31
 8003002:	d00b      	beq.n	800301c <main+0xab4>
 8003004:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003008:	2b32      	cmp	r3, #50	; 0x32
 800300a:	d007      	beq.n	800301c <main+0xab4>
 800300c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003010:	2b33      	cmp	r3, #51	; 0x33
 8003012:	d003      	beq.n	800301c <main+0xab4>
 8003014:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003018:	2b34      	cmp	r3, #52	; 0x34
 800301a:	d149      	bne.n	80030b0 <main+0xb48>
	    			int num = key_pressed - '0';
 800301c:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003020:	3b30      	subs	r3, #48	; 0x30
 8003022:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
	    			if (num == 3) {
 8003026:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800302a:	2b03      	cmp	r3, #3
 800302c:	d109      	bne.n	8003042 <main+0xada>
	    				cursor_on_message = true;
 800302e:	4b54      	ldr	r3, [pc, #336]	; (8003180 <main+0xc18>)
 8003030:	2201      	movs	r2, #1
 8003032:	701a      	strb	r2, [r3, #0]
	    				cursor_on_read = false;
 8003034:	4b53      	ldr	r3, [pc, #332]	; (8003184 <main+0xc1c>)
 8003036:	2200      	movs	r2, #0
 8003038:	701a      	strb	r2, [r3, #0]
	    				cursor_on_phone = false;
 800303a:	4b53      	ldr	r3, [pc, #332]	; (8003188 <main+0xc20>)
 800303c:	2200      	movs	r2, #0
 800303e:	701a      	strb	r2, [r3, #0]
 8003040:	e02b      	b.n	800309a <main+0xb32>
	    			} else if (num == 1) {
 8003042:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003046:	2b01      	cmp	r3, #1
 8003048:	d109      	bne.n	800305e <main+0xaf6>
	    				cursor_on_message = false;
 800304a:	4b4d      	ldr	r3, [pc, #308]	; (8003180 <main+0xc18>)
 800304c:	2200      	movs	r2, #0
 800304e:	701a      	strb	r2, [r3, #0]
	    				cursor_on_read = false;
 8003050:	4b4c      	ldr	r3, [pc, #304]	; (8003184 <main+0xc1c>)
 8003052:	2200      	movs	r2, #0
 8003054:	701a      	strb	r2, [r3, #0]
	    				cursor_on_phone = true;
 8003056:	4b4c      	ldr	r3, [pc, #304]	; (8003188 <main+0xc20>)
 8003058:	2201      	movs	r2, #1
 800305a:	701a      	strb	r2, [r3, #0]
 800305c:	e01d      	b.n	800309a <main+0xb32>
	    			} else if (num == 4){
 800305e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8003062:	2b04      	cmp	r3, #4
 8003064:	d109      	bne.n	800307a <main+0xb12>
	    				cursor_on_read = true;
 8003066:	4b47      	ldr	r3, [pc, #284]	; (8003184 <main+0xc1c>)
 8003068:	2201      	movs	r2, #1
 800306a:	701a      	strb	r2, [r3, #0]
	    				cursor_on_phone = false;
 800306c:	4b46      	ldr	r3, [pc, #280]	; (8003188 <main+0xc20>)
 800306e:	2200      	movs	r2, #0
 8003070:	701a      	strb	r2, [r3, #0]
	    				cursor_on_message = false;
 8003072:	4b43      	ldr	r3, [pc, #268]	; (8003180 <main+0xc18>)
 8003074:	2200      	movs	r2, #0
 8003076:	701a      	strb	r2, [r3, #0]
 8003078:	e00f      	b.n	800309a <main+0xb32>
	    			} else if (num == 2){
 800307a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800307e:	2b02      	cmp	r3, #2
 8003080:	d10b      	bne.n	800309a <main+0xb32>
	    				snake_screen = true;
 8003082:	4b42      	ldr	r3, [pc, #264]	; (800318c <main+0xc24>)
 8003084:	2201      	movs	r2, #1
 8003086:	701a      	strb	r2, [r3, #0]
						cursor_on_read = false;
 8003088:	4b3e      	ldr	r3, [pc, #248]	; (8003184 <main+0xc1c>)
 800308a:	2200      	movs	r2, #0
 800308c:	701a      	strb	r2, [r3, #0]
						cursor_on_phone = false;
 800308e:	4b3e      	ldr	r3, [pc, #248]	; (8003188 <main+0xc20>)
 8003090:	2200      	movs	r2, #0
 8003092:	701a      	strb	r2, [r3, #0]
						cursor_on_message = false;
 8003094:	4b3a      	ldr	r3, [pc, #232]	; (8003180 <main+0xc18>)
 8003096:	2200      	movs	r2, #0
 8003098:	701a      	strb	r2, [r3, #0]

	    			}
	    			main_screen(num - 1);
 800309a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 800309e:	b2db      	uxtb	r3, r3
 80030a0:	3b01      	subs	r3, #1
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80030a8:	4694      	mov	ip, r2
 80030aa:	4618      	mov	r0, r3
 80030ac:	f000 fa58 	bl	8003560 <main_screen.6>
	    		}
				if (key_pressed == '*' && cursor_on_phone) {
 80030b0:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80030b4:	2b2a      	cmp	r3, #42	; 0x2a
 80030b6:	d10e      	bne.n	80030d6 <main+0xb6e>
 80030b8:	4b33      	ldr	r3, [pc, #204]	; (8003188 <main+0xc20>)
 80030ba:	781b      	ldrb	r3, [r3, #0]
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d00a      	beq.n	80030d6 <main+0xb6e>
						screen_main = true;
 80030c0:	4b33      	ldr	r3, [pc, #204]	; (8003190 <main+0xc28>)
 80030c2:	2201      	movs	r2, #1
 80030c4:	701a      	strb	r2, [r3, #0]
						screen_begin = false;
 80030c6:	4b2c      	ldr	r3, [pc, #176]	; (8003178 <main+0xc10>)
 80030c8:	2200      	movs	r2, #0
 80030ca:	701a      	strb	r2, [r3, #0]
						init_screen();
 80030cc:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80030d0:	469c      	mov	ip, r3
 80030d2:	f7ff fa0b 	bl	80024ec <init_screen.2>
					}
				if (key_pressed == '*' && cursor_on_message) {
 80030d6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80030da:	2b2a      	cmp	r3, #42	; 0x2a
 80030dc:	d10e      	bne.n	80030fc <main+0xb94>
 80030de:	4b28      	ldr	r3, [pc, #160]	; (8003180 <main+0xc18>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <main+0xb94>
					screen_message = true;
 80030e6:	4b21      	ldr	r3, [pc, #132]	; (800316c <main+0xc04>)
 80030e8:	2201      	movs	r2, #1
 80030ea:	701a      	strb	r2, [r3, #0]
					screen_begin = false;
 80030ec:	4b22      	ldr	r3, [pc, #136]	; (8003178 <main+0xc10>)
 80030ee:	2200      	movs	r2, #0
 80030f0:	701a      	strb	r2, [r3, #0]
					screen_for_message_sending();
 80030f2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80030f6:	469c      	mov	ip, r3
 80030f8:	f000 fadc 	bl	80036b4 <screen_for_message_sending.3>
				}
				if (key_pressed == '*' && cursor_on_read){
 80030fc:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003100:	2b2a      	cmp	r3, #42	; 0x2a
 8003102:	d10f      	bne.n	8003124 <main+0xbbc>
 8003104:	4b1f      	ldr	r3, [pc, #124]	; (8003184 <main+0xc1c>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d00b      	beq.n	8003124 <main+0xbbc>
					screen_begin = false;
 800310c:	4b1a      	ldr	r3, [pc, #104]	; (8003178 <main+0xc10>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
					message_read = true;
 8003112:	4b20      	ldr	r3, [pc, #128]	; (8003194 <main+0xc2c>)
 8003114:	2201      	movs	r2, #1
 8003116:	701a      	strb	r2, [r3, #0]
					screen_on_read(0);
 8003118:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800311c:	469c      	mov	ip, r3
 800311e:	2000      	movs	r0, #0
 8003120:	f000 f9a6 	bl	8003470 <screen_on_read.4>
				}
				if (key_pressed == '*' && snake_screen){
 8003124:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003128:	2b2a      	cmp	r3, #42	; 0x2a
 800312a:	f040 813e 	bne.w	80033aa <main+0xe42>
 800312e:	4b17      	ldr	r3, [pc, #92]	; (800318c <main+0xc24>)
 8003130:	781b      	ldrb	r3, [r3, #0]
 8003132:	2b00      	cmp	r3, #0
 8003134:	f000 8139 	beq.w	80033aa <main+0xe42>
					snake_start = true;
 8003138:	4b17      	ldr	r3, [pc, #92]	; (8003198 <main+0xc30>)
 800313a:	2201      	movs	r2, #1
 800313c:	701a      	strb	r2, [r3, #0]
					screen_main = false;
 800313e:	4b14      	ldr	r3, [pc, #80]	; (8003190 <main+0xc28>)
 8003140:	2200      	movs	r2, #0
 8003142:	701a      	strb	r2, [r3, #0]
					screen_begin = false;
 8003144:	4b0c      	ldr	r3, [pc, #48]	; (8003178 <main+0xc10>)
 8003146:	2200      	movs	r2, #0
 8003148:	701a      	strb	r2, [r3, #0]
					snake_screen_build();
 800314a:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800314e:	469c      	mov	ip, r3
 8003150:	f000 faee 	bl	8003730 <snake_screen_build.5>
 8003154:	e129      	b.n	80033aa <main+0xe42>
 8003156:	bf00      	nop
 8003158:	40020c00 	.word	0x40020c00
 800315c:	20000030 	.word	0x20000030
 8003160:	200044b4 	.word	0x200044b4
 8003164:	0800dc20 	.word	0x0800dc20
 8003168:	2000e5c8 	.word	0x2000e5c8
 800316c:	2000e55b 	.word	0x2000e55b
 8003170:	2000e55c 	.word	0x2000e55c
 8003174:	200002bc 	.word	0x200002bc
 8003178:	20000029 	.word	0x20000029
 800317c:	2000e55d 	.word	0x2000e55d
 8003180:	2000e55a 	.word	0x2000e55a
 8003184:	2000e55e 	.word	0x2000e55e
 8003188:	20000028 	.word	0x20000028
 800318c:	2000e560 	.word	0x2000e560
 8003190:	2000e559 	.word	0x2000e559
 8003194:	2000e55f 	.word	0x2000e55f
 8003198:	2000e561 	.word	0x2000e561
				}
	    	}
	    	else if (screen_main){
 800319c:	4b89      	ldr	r3, [pc, #548]	; (80033c4 <main+0xe5c>)
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 8102 	beq.w	80033aa <main+0xe42>
	    		if (key_pressed == 'B') {
 80031a6:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80031aa:	2b42      	cmp	r3, #66	; 0x42
 80031ac:	d11a      	bne.n	80031e4 <main+0xc7c>
						screen_main = false;
 80031ae:	4b85      	ldr	r3, [pc, #532]	; (80033c4 <main+0xe5c>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	701a      	strb	r2, [r3, #0]
						screen_begin = true;
 80031b4:	4b84      	ldr	r3, [pc, #528]	; (80033c8 <main+0xe60>)
 80031b6:	2201      	movs	r2, #1
 80031b8:	701a      	strb	r2, [r3, #0]
						memset(buf, ' ', sizeof(buf) - 1);
 80031ba:	2209      	movs	r2, #9
 80031bc:	2120      	movs	r1, #32
 80031be:	4883      	ldr	r0, [pc, #524]	; (80033cc <main+0xe64>)
 80031c0:	f009 fd60 	bl	800cc84 <memset>
						buf[0] = '\0';
 80031c4:	4b81      	ldr	r3, [pc, #516]	; (80033cc <main+0xe64>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	701a      	strb	r2, [r3, #0]
						pos = 0;
 80031ca:	2300      	movs	r3, #0
 80031cc:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						main_screen(cursor_on_phone - 1);
 80031d0:	4b7f      	ldr	r3, [pc, #508]	; (80033d0 <main+0xe68>)
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	3b01      	subs	r3, #1
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 80031dc:	4694      	mov	ip, r2
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 f9be 	bl	8003560 <main_screen.6>
				}
				if ((end_call_flag || key_pressed == 'A') && screen_main) {
 80031e4:	4b7b      	ldr	r3, [pc, #492]	; (80033d4 <main+0xe6c>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d103      	bne.n	80031f4 <main+0xc8c>
 80031ec:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80031f0:	2b41      	cmp	r3, #65	; 0x41
 80031f2:	d15f      	bne.n	80032b4 <main+0xd4c>
 80031f4:	4b73      	ldr	r3, [pc, #460]	; (80033c4 <main+0xe5c>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d05b      	beq.n	80032b4 <main+0xd4c>
					if (is_call) {
 80031fc:	f507 7308 	add.w	r3, r7, #544	; 0x220
 8003200:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8003204:	f893 30ed 	ldrb.w	r3, [r3, #237]	; 0xed
 8003208:	2b00      	cmp	r3, #0
 800320a:	d023      	beq.n	8003254 <main+0xcec>
						buf[0] = '\0';
 800320c:	4b6f      	ldr	r3, [pc, #444]	; (80033cc <main+0xe64>)
 800320e:	2200      	movs	r2, #0
 8003210:	701a      	strb	r2, [r3, #0]
						pos = 0;
 8003212:	2300      	movs	r3, #0
 8003214:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						end_call();
 8003218:	f7ff f87a 	bl	8002310 <end_call>
						get_call = false;
 800321c:	4b6e      	ldr	r3, [pc, #440]	; (80033d8 <main+0xe70>)
 800321e:	2200      	movs	r2, #0
 8003220:	701a      	strb	r2, [r3, #0]
						LCD5110_refresh(&lcd1);
 8003222:	486e      	ldr	r0, [pc, #440]	; (80033dc <main+0xe74>)
 8003224:	f7fd fc9e 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 8003228:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800322c:	4a6b      	ldr	r2, [pc, #428]	; (80033dc <main+0xe74>)
 800322e:	2101      	movs	r1, #1
 8003230:	4618      	mov	r0, r3
 8003232:	f7fd fe70 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 8003236:	4a69      	ldr	r2, [pc, #420]	; (80033dc <main+0xe74>)
 8003238:	2100      	movs	r1, #0
 800323a:	2000      	movs	r0, #0
 800323c:	f7fd fc9e 	bl	8000b7c <LCD5110_set_cursor>
						screen_begin = true;
 8003240:	4b61      	ldr	r3, [pc, #388]	; (80033c8 <main+0xe60>)
 8003242:	2201      	movs	r2, #1
 8003244:	701a      	strb	r2, [r3, #0]
						main_screen(0);
 8003246:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800324a:	469c      	mov	ip, r3
 800324c:	2000      	movs	r0, #0
 800324e:	f000 f987 	bl	8003560 <main_screen.6>
					if (is_call) {
 8003252:	e0aa      	b.n	80033aa <main+0xe42>
					}
					else {
						char call_number[16];
						strcpy(call_number, CALL_NUMBER);
 8003254:	4b62      	ldr	r3, [pc, #392]	; (80033e0 <main+0xe78>)
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	f107 0308 	add.w	r3, r7, #8
 800325c:	4611      	mov	r1, r2
 800325e:	4618      	mov	r0, r3
 8003260:	f009 fddf 	bl	800ce22 <strcpy>
						strcat(call_number, buf);
 8003264:	f107 0308 	add.w	r3, r7, #8
 8003268:	4958      	ldr	r1, [pc, #352]	; (80033cc <main+0xe64>)
 800326a:	4618      	mov	r0, r3
 800326c:	f009 fd12 	bl	800cc94 <strcat>
						strcat(call_number, "\r\n");
 8003270:	f107 0308 	add.w	r3, r7, #8
 8003274:	4618      	mov	r0, r3
 8003276:	f7fc ffbd 	bl	80001f4 <strlen>
 800327a:	4603      	mov	r3, r0
 800327c:	461a      	mov	r2, r3
 800327e:	f107 0308 	add.w	r3, r7, #8
 8003282:	4413      	add	r3, r2
 8003284:	4a57      	ldr	r2, [pc, #348]	; (80033e4 <main+0xe7c>)
 8003286:	8811      	ldrh	r1, [r2, #0]
 8003288:	7892      	ldrb	r2, [r2, #2]
 800328a:	8019      	strh	r1, [r3, #0]
 800328c:	709a      	strb	r2, [r3, #2]
						HAL_UART_Transmit(&huart1,(uint8_t *)call_number,strlen(call_number),100);
 800328e:	f107 0308 	add.w	r3, r7, #8
 8003292:	4618      	mov	r0, r3
 8003294:	f7fc ffae 	bl	80001f4 <strlen>
 8003298:	4603      	mov	r3, r0
 800329a:	b29a      	uxth	r2, r3
 800329c:	f107 0108 	add.w	r1, r7, #8
 80032a0:	2364      	movs	r3, #100	; 0x64
 80032a2:	4851      	ldr	r0, [pc, #324]	; (80033e8 <main+0xe80>)
 80032a4:	f004 fb51 	bl	800794a <HAL_UART_Transmit>
						call_screen();
 80032a8:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80032ac:	469c      	mov	ip, r3
 80032ae:	f000 f89d 	bl	80033ec <call_screen.7>
					if (is_call) {
 80032b2:	e07a      	b.n	80033aa <main+0xe42>

					}
				}
				else if (key_pressed == 'D' && screen_main)
 80032b4:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80032b8:	2b44      	cmp	r3, #68	; 0x44
 80032ba:	d11e      	bne.n	80032fa <main+0xd92>
 80032bc:	4b41      	ldr	r3, [pc, #260]	; (80033c4 <main+0xe5c>)
 80032be:	781b      	ldrb	r3, [r3, #0]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01a      	beq.n	80032fa <main+0xd92>
				{
					memset(buf, ' ', sizeof(buf) - 1);
 80032c4:	2209      	movs	r2, #9
 80032c6:	2120      	movs	r1, #32
 80032c8:	4840      	ldr	r0, [pc, #256]	; (80033cc <main+0xe64>)
 80032ca:	f009 fcdb 	bl	800cc84 <memset>
					buf[0] = '\0';
 80032ce:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <main+0xe64>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	701a      	strb	r2, [r3, #0]
					pos = 0;
 80032d4:	2300      	movs	r3, #0
 80032d6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					LCD5110_refresh(&lcd1);
 80032da:	4840      	ldr	r0, [pc, #256]	; (80033dc <main+0xe74>)
 80032dc:	f7fd fc42 	bl	8000b64 <LCD5110_refresh>
					LCD5110_rect_fill(&rect, 1, &lcd1);
 80032e0:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 80032e4:	4a3d      	ldr	r2, [pc, #244]	; (80033dc <main+0xe74>)
 80032e6:	2101      	movs	r1, #1
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7fd fe14 	bl	8000f16 <LCD5110_rect_fill>
					LCD5110_set_cursor(0, 0, &lcd1);
 80032ee:	4a3b      	ldr	r2, [pc, #236]	; (80033dc <main+0xe74>)
 80032f0:	2100      	movs	r1, #0
 80032f2:	2000      	movs	r0, #0
 80032f4:	f7fd fc42 	bl	8000b7c <LCD5110_set_cursor>
 80032f8:	e057      	b.n	80033aa <main+0xe42>
				}
				else if (key_pressed == 'C' && pos > 0 && screen_main)
 80032fa:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 80032fe:	2b43      	cmp	r3, #67	; 0x43
 8003300:	d127      	bne.n	8003352 <main+0xdea>
 8003302:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003306:	2b00      	cmp	r3, #0
 8003308:	dd23      	ble.n	8003352 <main+0xdea>
 800330a:	4b2e      	ldr	r3, [pc, #184]	; (80033c4 <main+0xe5c>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d01f      	beq.n	8003352 <main+0xdea>
					{
						pos--;
 8003312:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003316:	3b01      	subs	r3, #1
 8003318:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
						buf[pos] = '\0';
 800331c:	4a2b      	ldr	r2, [pc, #172]	; (80033cc <main+0xe64>)
 800331e:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003322:	4413      	add	r3, r2
 8003324:	2200      	movs	r2, #0
 8003326:	701a      	strb	r2, [r3, #0]

						LCD5110_refresh(&lcd1);
 8003328:	482c      	ldr	r0, [pc, #176]	; (80033dc <main+0xe74>)
 800332a:	f7fd fc1b 	bl	8000b64 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 800332e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8003332:	4a2a      	ldr	r2, [pc, #168]	; (80033dc <main+0xe74>)
 8003334:	2101      	movs	r1, #1
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd fded 	bl	8000f16 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 800333c:	4a27      	ldr	r2, [pc, #156]	; (80033dc <main+0xe74>)
 800333e:	2100      	movs	r1, #0
 8003340:	2000      	movs	r0, #0
 8003342:	f7fd fc1b 	bl	8000b7c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 8003346:	4a25      	ldr	r2, [pc, #148]	; (80033dc <main+0xe74>)
 8003348:	2100      	movs	r1, #0
 800334a:	4820      	ldr	r0, [pc, #128]	; (80033cc <main+0xe64>)
 800334c:	f7fd fc39 	bl	8000bc2 <LCD5110_print>
 8003350:	e02b      	b.n	80033aa <main+0xe42>
					}
				else if (key_pressed >= '0' && key_pressed <= '9' && pos < sizeof(buf) && screen_main)
 8003352:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 8003356:	2b2f      	cmp	r3, #47	; 0x2f
 8003358:	d927      	bls.n	80033aa <main+0xe42>
 800335a:	f897 320f 	ldrb.w	r3, [r7, #527]	; 0x20f
 800335e:	2b39      	cmp	r3, #57	; 0x39
 8003360:	d823      	bhi.n	80033aa <main+0xe42>
 8003362:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003366:	2b09      	cmp	r3, #9
 8003368:	d81f      	bhi.n	80033aa <main+0xe42>
 800336a:	4b16      	ldr	r3, [pc, #88]	; (80033c4 <main+0xe5c>)
 800336c:	781b      	ldrb	r3, [r3, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01b      	beq.n	80033aa <main+0xe42>
				{
					buf[pos] = key_pressed;
 8003372:	4a16      	ldr	r2, [pc, #88]	; (80033cc <main+0xe64>)
 8003374:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003378:	4413      	add	r3, r2
 800337a:	f897 220f 	ldrb.w	r2, [r7, #527]	; 0x20f
 800337e:	701a      	strb	r2, [r3, #0]
					pos++;
 8003380:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003384:	3301      	adds	r3, #1
 8003386:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
					buf[pos] = '\0';
 800338a:	4a10      	ldr	r2, [pc, #64]	; (80033cc <main+0xe64>)
 800338c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 8003390:	4413      	add	r3, r2
 8003392:	2200      	movs	r2, #0
 8003394:	701a      	strb	r2, [r3, #0]

					LCD5110_set_cursor(0, 0, &lcd1);
 8003396:	4a11      	ldr	r2, [pc, #68]	; (80033dc <main+0xe74>)
 8003398:	2100      	movs	r1, #0
 800339a:	2000      	movs	r0, #0
 800339c:	f7fd fbee 	bl	8000b7c <LCD5110_set_cursor>
					LCD5110_print(buf, 0, &lcd1);
 80033a0:	4a0e      	ldr	r2, [pc, #56]	; (80033dc <main+0xe74>)
 80033a2:	2100      	movs	r1, #0
 80033a4:	4809      	ldr	r0, [pc, #36]	; (80033cc <main+0xe64>)
 80033a6:	f7fd fc0c 	bl	8000bc2 <LCD5110_print>
				}
	    	}

	    }
	    LCD5110_refresh(&lcd1);
 80033aa:	480c      	ldr	r0, [pc, #48]	; (80033dc <main+0xe74>)
 80033ac:	f7fd fbda 	bl	8000b64 <LCD5110_refresh>
	    HAL_Delay(300);
 80033b0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80033b4:	f000 fe18 	bl	8003fe8 <HAL_Delay>
	    LCD5110_refresh(&lcd1);
 80033b8:	4808      	ldr	r0, [pc, #32]	; (80033dc <main+0xe74>)
 80033ba:	f7fd fbd3 	bl	8000b64 <LCD5110_refresh>
	    key_pressed = keypad_scan();
 80033be:	f7ff ba19 	b.w	80027f4 <main+0x28c>
 80033c2:	bf00      	nop
 80033c4:	2000e559 	.word	0x2000e559
 80033c8:	20000029 	.word	0x20000029
 80033cc:	200044b4 	.word	0x200044b4
 80033d0:	20000028 	.word	0x20000028
 80033d4:	2000e55d 	.word	0x2000e55d
 80033d8:	2000e558 	.word	0x2000e558
 80033dc:	200002bc 	.word	0x200002bc
 80033e0:	20000034 	.word	0x20000034
 80033e4:	0800dc28 	.word	0x0800dc28
 80033e8:	2000e5c8 	.word	0x2000e5c8

080033ec <call_screen.7>:
    void call_screen() {
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b08b      	sub	sp, #44	; 0x2c
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	4664      	mov	r4, ip
 80033f4:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 80033f8:	4819      	ldr	r0, [pc, #100]	; (8003460 <call_screen.7+0x74>)
 80033fa:	f7fd fbd1 	bl	8000ba0 <LCD5110_clear_scr>
    	LCD5110_refresh(&lcd1);
 80033fe:	4818      	ldr	r0, [pc, #96]	; (8003460 <call_screen.7+0x74>)
 8003400:	f7fd fbb0 	bl	8000b64 <LCD5110_refresh>
    	LCD5110_set_cursor(18, 1, &lcd1);
 8003404:	4a16      	ldr	r2, [pc, #88]	; (8003460 <call_screen.7+0x74>)
 8003406:	2101      	movs	r1, #1
 8003408:	2012      	movs	r0, #18
 800340a:	f7fd fbb7 	bl	8000b7c <LCD5110_set_cursor>
    	strcpy(phone_info, "Calling\n");
 800340e:	f107 030c 	add.w	r3, r7, #12
 8003412:	4a14      	ldr	r2, [pc, #80]	; (8003464 <call_screen.7+0x78>)
 8003414:	ca07      	ldmia	r2, {r0, r1, r2}
 8003416:	c303      	stmia	r3!, {r0, r1}
 8003418:	701a      	strb	r2, [r3, #0]
    	LCD5110_print(phone_info, BLACK, &lcd1);
 800341a:	f107 030c 	add.w	r3, r7, #12
 800341e:	4a10      	ldr	r2, [pc, #64]	; (8003460 <call_screen.7+0x74>)
 8003420:	2101      	movs	r1, #1
 8003422:	4618      	mov	r0, r3
 8003424:	f7fd fbcd 	bl	8000bc2 <LCD5110_print>
    	LCD5110_set_cursor(10, 20, &lcd1);
 8003428:	4a0d      	ldr	r2, [pc, #52]	; (8003460 <call_screen.7+0x74>)
 800342a:	2114      	movs	r1, #20
 800342c:	200a      	movs	r0, #10
 800342e:	f7fd fba5 	bl	8000b7c <LCD5110_set_cursor>
    	LCD5110_print(buf, WHITE, &lcd1);
 8003432:	4a0b      	ldr	r2, [pc, #44]	; (8003460 <call_screen.7+0x74>)
 8003434:	2100      	movs	r1, #0
 8003436:	480c      	ldr	r0, [pc, #48]	; (8003468 <call_screen.7+0x7c>)
 8003438:	f7fd fbc3 	bl	8000bc2 <LCD5110_print>
    	LCD5110_set_cursor(10, 40, &lcd1);
 800343c:	4a08      	ldr	r2, [pc, #32]	; (8003460 <call_screen.7+0x74>)
 800343e:	2128      	movs	r1, #40	; 0x28
 8003440:	200a      	movs	r0, #10
 8003442:	f7fd fb9b 	bl	8000b7c <LCD5110_set_cursor>
    	LCD5110_print("A-end call", 0, &lcd1);
 8003446:	4a06      	ldr	r2, [pc, #24]	; (8003460 <call_screen.7+0x74>)
 8003448:	2100      	movs	r1, #0
 800344a:	4808      	ldr	r0, [pc, #32]	; (800346c <call_screen.7+0x80>)
 800344c:	f7fd fbb9 	bl	8000bc2 <LCD5110_print>
    	is_call = true;
 8003450:	2301      	movs	r3, #1
 8003452:	f884 30ed 	strb.w	r3, [r4, #237]	; 0xed
    }
 8003456:	bf00      	nop
 8003458:	372c      	adds	r7, #44	; 0x2c
 800345a:	46bd      	mov	sp, r7
 800345c:	bd90      	pop	{r4, r7, pc}
 800345e:	bf00      	nop
 8003460:	200002bc 	.word	0x200002bc
 8003464:	0800dd98 	.word	0x0800dd98
 8003468:	200044b4 	.word	0x200044b4
 800346c:	0800dda4 	.word	0x0800dda4

08003470 <screen_on_read.4>:
    void screen_on_read(int number) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b082      	sub	sp, #8
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
 8003478:	f8c7 c000 	str.w	ip, [r7]
    	LCD5110_clear_scr(&lcd1);
 800347c:	4818      	ldr	r0, [pc, #96]	; (80034e0 <screen_on_read.4+0x70>)
 800347e:	f7fd fb8f 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8003482:	4817      	ldr	r0, [pc, #92]	; (80034e0 <screen_on_read.4+0x70>)
 8003484:	f7fd fb6e 	bl	8000b64 <LCD5110_refresh>
		LCD5110_set_cursor(65, 40, &lcd1);
 8003488:	4a15      	ldr	r2, [pc, #84]	; (80034e0 <screen_on_read.4+0x70>)
 800348a:	2128      	movs	r1, #40	; 0x28
 800348c:	2041      	movs	r0, #65	; 0x41
 800348e:	f7fd fb75 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("A->", 0, &lcd1);
 8003492:	4a13      	ldr	r2, [pc, #76]	; (80034e0 <screen_on_read.4+0x70>)
 8003494:	2100      	movs	r1, #0
 8003496:	4813      	ldr	r0, [pc, #76]	; (80034e4 <screen_on_read.4+0x74>)
 8003498:	f7fd fb93 	bl	8000bc2 <LCD5110_print>
		read_message(gsm_module, number);
 800349c:	4b12      	ldr	r3, [pc, #72]	; (80034e8 <screen_on_read.4+0x78>)
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80034a4:	f7fe ff44 	bl	8002330 <read_message>
		if (number != 0){
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d009      	beq.n	80034c2 <screen_on_read.4+0x52>
			LCD5110_set_cursor(5, 40, &lcd1);
 80034ae:	4a0c      	ldr	r2, [pc, #48]	; (80034e0 <screen_on_read.4+0x70>)
 80034b0:	2128      	movs	r1, #40	; 0x28
 80034b2:	2005      	movs	r0, #5
 80034b4:	f7fd fb62 	bl	8000b7c <LCD5110_set_cursor>
			LCD5110_print("<-C", 0, &lcd1);
 80034b8:	4a09      	ldr	r2, [pc, #36]	; (80034e0 <screen_on_read.4+0x70>)
 80034ba:	2100      	movs	r1, #0
 80034bc:	480b      	ldr	r0, [pc, #44]	; (80034ec <screen_on_read.4+0x7c>)
 80034be:	f7fd fb80 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(20, 40, &lcd1);
 80034c2:	4a07      	ldr	r2, [pc, #28]	; (80034e0 <screen_on_read.4+0x70>)
 80034c4:	2128      	movs	r1, #40	; 0x28
 80034c6:	2014      	movs	r0, #20
 80034c8:	f7fd fb58 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("B-exit", 0, &lcd1);
 80034cc:	4a04      	ldr	r2, [pc, #16]	; (80034e0 <screen_on_read.4+0x70>)
 80034ce:	2100      	movs	r1, #0
 80034d0:	4807      	ldr	r0, [pc, #28]	; (80034f0 <screen_on_read.4+0x80>)
 80034d2:	f7fd fb76 	bl	8000bc2 <LCD5110_print>
    }
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	200002bc 	.word	0x200002bc
 80034e4:	0800ddb0 	.word	0x0800ddb0
 80034e8:	2000e564 	.word	0x2000e564
 80034ec:	0800ddb4 	.word	0x0800ddb4
 80034f0:	0800ddb8 	.word	0x0800ddb8

080034f4 <get_call_screen.0>:
    void get_call_screen(){
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 80034fe:	4814      	ldr	r0, [pc, #80]	; (8003550 <get_call_screen.0+0x5c>)
 8003500:	f7fd fb4e 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8003504:	4812      	ldr	r0, [pc, #72]	; (8003550 <get_call_screen.0+0x5c>)
 8003506:	f7fd fb2d 	bl	8000b64 <LCD5110_refresh>
		LCD5110_print(buf, 0, &lcd1);
 800350a:	4a11      	ldr	r2, [pc, #68]	; (8003550 <get_call_screen.0+0x5c>)
 800350c:	2100      	movs	r1, #0
 800350e:	4811      	ldr	r0, [pc, #68]	; (8003554 <get_call_screen.0+0x60>)
 8003510:	f7fd fb57 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(5, 15, &lcd1);
 8003514:	4a0e      	ldr	r2, [pc, #56]	; (8003550 <get_call_screen.0+0x5c>)
 8003516:	210f      	movs	r1, #15
 8003518:	2005      	movs	r0, #5
 800351a:	f7fd fb2f 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("A-accept call", 0, &lcd1);
 800351e:	4a0c      	ldr	r2, [pc, #48]	; (8003550 <get_call_screen.0+0x5c>)
 8003520:	2100      	movs	r1, #0
 8003522:	480d      	ldr	r0, [pc, #52]	; (8003558 <get_call_screen.0+0x64>)
 8003524:	f7fd fb4d 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(5, 25, &lcd1);
 8003528:	4a09      	ldr	r2, [pc, #36]	; (8003550 <get_call_screen.0+0x5c>)
 800352a:	2119      	movs	r1, #25
 800352c:	2005      	movs	r0, #5
 800352e:	f7fd fb25 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("B-reject call", 0, &lcd1);
 8003532:	4a07      	ldr	r2, [pc, #28]	; (8003550 <get_call_screen.0+0x5c>)
 8003534:	2100      	movs	r1, #0
 8003536:	4809      	ldr	r0, [pc, #36]	; (800355c <get_call_screen.0+0x68>)
 8003538:	f7fd fb43 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <get_call_screen.0+0x5c>)
 800353e:	2100      	movs	r1, #0
 8003540:	2000      	movs	r0, #0
 8003542:	f7fd fb1b 	bl	8000b7c <LCD5110_set_cursor>
    }
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	200002bc 	.word	0x200002bc
 8003554:	200044b4 	.word	0x200044b4
 8003558:	0800ddc0 	.word	0x0800ddc0
 800355c:	0800ddd0 	.word	0x0800ddd0

08003560 <main_screen.6>:
    void main_screen(Screen type_screen) {
 8003560:	b590      	push	{r4, r7, lr}
 8003562:	b08f      	sub	sp, #60	; 0x3c
 8003564:	af04      	add	r7, sp, #16
 8003566:	4603      	mov	r3, r0
 8003568:	71fb      	strb	r3, [r7, #7]
 800356a:	4664      	mov	r4, ip
 800356c:	f8c7 c000 	str.w	ip, [r7]
    	LCD5110_clear_scr(&lcd1);
 8003570:	484b      	ldr	r0, [pc, #300]	; (80036a0 <main_screen.6+0x140>)
 8003572:	f7fd fb15 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8003576:	484a      	ldr	r0, [pc, #296]	; (80036a0 <main_screen.6+0x140>)
 8003578:	f7fd faf4 	bl	8000b64 <LCD5110_refresh>
		LCD5110_drawBitmap(8, 3, main_screen_image, 19, 19, 0, &lcd1.hw_conf);
 800357c:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8003580:	4b47      	ldr	r3, [pc, #284]	; (80036a0 <main_screen.6+0x140>)
 8003582:	9302      	str	r3, [sp, #8]
 8003584:	2300      	movs	r3, #0
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2313      	movs	r3, #19
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2313      	movs	r3, #19
 800358e:	2103      	movs	r1, #3
 8003590:	2008      	movs	r0, #8
 8003592:	f7fd fe6c 	bl	800126e <LCD5110_drawBitmap>
		rect_t rectbox_phone={6, 1, 23, 23};
 8003596:	4a43      	ldr	r2, [pc, #268]	; (80036a4 <main_screen.6+0x144>)
 8003598:	f107 0320 	add.w	r3, r7, #32
 800359c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035a0:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_snake={49,1, 23, 23};
 80035a4:	4a40      	ldr	r2, [pc, #256]	; (80036a8 <main_screen.6+0x148>)
 80035a6:	f107 0318 	add.w	r3, r7, #24
 80035aa:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ae:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_message={6,23, 23, 23};
 80035b2:	4a3e      	ldr	r2, [pc, #248]	; (80036ac <main_screen.6+0x14c>)
 80035b4:	f107 0310 	add.w	r3, r7, #16
 80035b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035bc:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_message_history = {48, 23, 23, 23};
 80035c0:	4a3b      	ldr	r2, [pc, #236]	; (80036b0 <main_screen.6+0x150>)
 80035c2:	f107 0308 	add.w	r3, r7, #8
 80035c6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80035ca:	e883 0003 	stmia.w	r3, {r0, r1}
		if (type_screen==0) {
 80035ce:	79fb      	ldrb	r3, [r7, #7]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d107      	bne.n	80035e4 <main_screen.6+0x84>
			LCD5110_rect(&rectbox_phone, 1, &lcd1);
 80035d4:	f107 0320 	add.w	r3, r7, #32
 80035d8:	4a31      	ldr	r2, [pc, #196]	; (80036a0 <main_screen.6+0x140>)
 80035da:	2101      	movs	r1, #1
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fd fc88 	bl	8000ef2 <LCD5110_rect>
 80035e2:	e01c      	b.n	800361e <main_screen.6+0xbe>
		else if (type_screen==1) {
 80035e4:	79fb      	ldrb	r3, [r7, #7]
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d107      	bne.n	80035fa <main_screen.6+0x9a>
			LCD5110_rect(&rectbox_snake, 1, &lcd1);
 80035ea:	f107 0318 	add.w	r3, r7, #24
 80035ee:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <main_screen.6+0x140>)
 80035f0:	2101      	movs	r1, #1
 80035f2:	4618      	mov	r0, r3
 80035f4:	f7fd fc7d 	bl	8000ef2 <LCD5110_rect>
 80035f8:	e011      	b.n	800361e <main_screen.6+0xbe>
		else if (type_screen == 2) {
 80035fa:	79fb      	ldrb	r3, [r7, #7]
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d107      	bne.n	8003610 <main_screen.6+0xb0>
			LCD5110_rect(&rectbox_message, 1, &lcd1);
 8003600:	f107 0310 	add.w	r3, r7, #16
 8003604:	4a26      	ldr	r2, [pc, #152]	; (80036a0 <main_screen.6+0x140>)
 8003606:	2101      	movs	r1, #1
 8003608:	4618      	mov	r0, r3
 800360a:	f7fd fc72 	bl	8000ef2 <LCD5110_rect>
 800360e:	e006      	b.n	800361e <main_screen.6+0xbe>
			LCD5110_rect(&rectbox_message_history, 1, &lcd1);
 8003610:	f107 0308 	add.w	r3, r7, #8
 8003614:	4a22      	ldr	r2, [pc, #136]	; (80036a0 <main_screen.6+0x140>)
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f7fd fc6a 	bl	8000ef2 <LCD5110_rect>
		LCD5110_refresh(&lcd1);
 800361e:	4820      	ldr	r0, [pc, #128]	; (80036a0 <main_screen.6+0x140>)
 8003620:	f7fd faa0 	bl	8000b64 <LCD5110_refresh>
		LCD5110_set_cursor(50, 10, &lcd1);
 8003624:	4a1e      	ldr	r2, [pc, #120]	; (80036a0 <main_screen.6+0x140>)
 8003626:	210a      	movs	r1, #10
 8003628:	2032      	movs	r0, #50	; 0x32
 800362a:	f7fd faa7 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_drawBitmap(50, 3, main_screen_snake, 19, 19, 0, &lcd1.hw_conf);
 800362e:	f104 027b 	add.w	r2, r4, #123	; 0x7b
 8003632:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <main_screen.6+0x140>)
 8003634:	9302      	str	r3, [sp, #8]
 8003636:	2300      	movs	r3, #0
 8003638:	9301      	str	r3, [sp, #4]
 800363a:	2313      	movs	r3, #19
 800363c:	9300      	str	r3, [sp, #0]
 800363e:	2313      	movs	r3, #19
 8003640:	2103      	movs	r1, #3
 8003642:	2032      	movs	r0, #50	; 0x32
 8003644:	f7fd fe13 	bl	800126e <LCD5110_drawBitmap>
		LCD5110_refresh(&lcd1);
 8003648:	4815      	ldr	r0, [pc, #84]	; (80036a0 <main_screen.6+0x140>)
 800364a:	f7fd fa8b 	bl	8000b64 <LCD5110_refresh>
		LCD5110_set_cursor(8, 28, &lcd1);
 800364e:	4a14      	ldr	r2, [pc, #80]	; (80036a0 <main_screen.6+0x140>)
 8003650:	211c      	movs	r1, #28
 8003652:	2008      	movs	r0, #8
 8003654:	f7fd fa92 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_drawBitmap(8, 25, write_message, 19, 19, 0, &lcd1.hw_conf);
 8003658:	f104 0242 	add.w	r2, r4, #66	; 0x42
 800365c:	4b10      	ldr	r3, [pc, #64]	; (80036a0 <main_screen.6+0x140>)
 800365e:	9302      	str	r3, [sp, #8]
 8003660:	2300      	movs	r3, #0
 8003662:	9301      	str	r3, [sp, #4]
 8003664:	2313      	movs	r3, #19
 8003666:	9300      	str	r3, [sp, #0]
 8003668:	2313      	movs	r3, #19
 800366a:	2119      	movs	r1, #25
 800366c:	2008      	movs	r0, #8
 800366e:	f7fd fdfe 	bl	800126e <LCD5110_drawBitmap>
		LCD5110_set_cursor(50, 28, &lcd1);
 8003672:	4a0b      	ldr	r2, [pc, #44]	; (80036a0 <main_screen.6+0x140>)
 8003674:	211c      	movs	r1, #28
 8003676:	2032      	movs	r0, #50	; 0x32
 8003678:	f7fd fa80 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_drawBitmap(50, 25, main_message, 19, 19, 0, &lcd1.hw_conf);
 800367c:	f104 0209 	add.w	r2, r4, #9
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <main_screen.6+0x140>)
 8003682:	9302      	str	r3, [sp, #8]
 8003684:	2300      	movs	r3, #0
 8003686:	9301      	str	r3, [sp, #4]
 8003688:	2313      	movs	r3, #19
 800368a:	9300      	str	r3, [sp, #0]
 800368c:	2313      	movs	r3, #19
 800368e:	2119      	movs	r1, #25
 8003690:	2032      	movs	r0, #50	; 0x32
 8003692:	f7fd fdec 	bl	800126e <LCD5110_drawBitmap>
    }
 8003696:	bf00      	nop
 8003698:	372c      	adds	r7, #44	; 0x2c
 800369a:	46bd      	mov	sp, r7
 800369c:	bd90      	pop	{r4, r7, pc}
 800369e:	bf00      	nop
 80036a0:	200002bc 	.word	0x200002bc
 80036a4:	0800dde0 	.word	0x0800dde0
 80036a8:	0800dde8 	.word	0x0800dde8
 80036ac:	0800ddf0 	.word	0x0800ddf0
 80036b0:	0800ddf8 	.word	0x0800ddf8

080036b4 <screen_for_message_sending.3>:
    void screen_for_message_sending() {
 80036b4:	b590      	push	{r4, r7, lr}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	4664      	mov	r4, ip
 80036bc:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 80036c0:	4818      	ldr	r0, [pc, #96]	; (8003724 <screen_for_message_sending.3+0x70>)
 80036c2:	f7fd fa6d 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 80036c6:	4817      	ldr	r0, [pc, #92]	; (8003724 <screen_for_message_sending.3+0x70>)
 80036c8:	f7fd fa4c 	bl	8000b64 <LCD5110_refresh>
		LCD5110_rect(&rect, 1, &lcd1);
 80036cc:	4623      	mov	r3, r4
 80036ce:	4a15      	ldr	r2, [pc, #84]	; (8003724 <screen_for_message_sending.3+0x70>)
 80036d0:	2101      	movs	r1, #1
 80036d2:	4618      	mov	r0, r3
 80036d4:	f7fd fc0d 	bl	8000ef2 <LCD5110_rect>
		LCD5110_rect_fill(&rect, 1, &lcd1);
 80036d8:	4623      	mov	r3, r4
 80036da:	4a12      	ldr	r2, [pc, #72]	; (8003724 <screen_for_message_sending.3+0x70>)
 80036dc:	2101      	movs	r1, #1
 80036de:	4618      	mov	r0, r3
 80036e0:	f7fd fc19 	bl	8000f16 <LCD5110_rect_fill>
		LCD5110_set_cursor(10, 15, &lcd1);
 80036e4:	4a0f      	ldr	r2, [pc, #60]	; (8003724 <screen_for_message_sending.3+0x70>)
 80036e6:	210f      	movs	r1, #15
 80036e8:	200a      	movs	r0, #10
 80036ea:	f7fd fa47 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("A-go to message", 0, &lcd1);
 80036ee:	4a0d      	ldr	r2, [pc, #52]	; (8003724 <screen_for_message_sending.3+0x70>)
 80036f0:	2100      	movs	r1, #0
 80036f2:	480d      	ldr	r0, [pc, #52]	; (8003728 <screen_for_message_sending.3+0x74>)
 80036f4:	f7fd fa65 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(10, 35, &lcd1);
 80036f8:	4a0a      	ldr	r2, [pc, #40]	; (8003724 <screen_for_message_sending.3+0x70>)
 80036fa:	2123      	movs	r1, #35	; 0x23
 80036fc:	200a      	movs	r0, #10
 80036fe:	f7fd fa3d 	bl	8000b7c <LCD5110_set_cursor>
		LCD5110_print("B-back", 0, &lcd1);
 8003702:	4a08      	ldr	r2, [pc, #32]	; (8003724 <screen_for_message_sending.3+0x70>)
 8003704:	2100      	movs	r1, #0
 8003706:	4809      	ldr	r0, [pc, #36]	; (800372c <screen_for_message_sending.3+0x78>)
 8003708:	f7fd fa5b 	bl	8000bc2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 800370c:	4a05      	ldr	r2, [pc, #20]	; (8003724 <screen_for_message_sending.3+0x70>)
 800370e:	2100      	movs	r1, #0
 8003710:	2000      	movs	r0, #0
 8003712:	f7fd fa33 	bl	8000b7c <LCD5110_set_cursor>
		is_message = false;
 8003716:	2300      	movs	r3, #0
 8003718:	7223      	strb	r3, [r4, #8]
    }
 800371a:	bf00      	nop
 800371c:	370c      	adds	r7, #12
 800371e:	46bd      	mov	sp, r7
 8003720:	bd90      	pop	{r4, r7, pc}
 8003722:	bf00      	nop
 8003724:	200002bc 	.word	0x200002bc
 8003728:	0800de00 	.word	0x0800de00
 800372c:	0800dc44 	.word	0x0800dc44

08003730 <snake_screen_build.5>:
    void snake_screen_build() {
 8003730:	b580      	push	{r7, lr}
 8003732:	b082      	sub	sp, #8
 8003734:	af00      	add	r7, sp, #0
 8003736:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 800373a:	480b      	ldr	r0, [pc, #44]	; (8003768 <snake_screen_build.5+0x38>)
 800373c:	f7fd fa30 	bl	8000ba0 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8003740:	4809      	ldr	r0, [pc, #36]	; (8003768 <snake_screen_build.5+0x38>)
 8003742:	f7fd fa0f 	bl	8000b64 <LCD5110_refresh>
		initializeMap();
 8003746:	f7fe fb95 	bl	8001e74 <initializeMap>
		initializeSnake();
 800374a:	f7fd ffad 	bl	80016a8 <initializeSnake>
		initializeApple();
 800374e:	f7fd ffd1 	bl	80016f4 <initializeApple>
		drawMap(&lcd1);
 8003752:	4805      	ldr	r0, [pc, #20]	; (8003768 <snake_screen_build.5+0x38>)
 8003754:	f7fe fc0a 	bl	8001f6c <drawMap>
		drawApple(&lcd1);
 8003758:	4803      	ldr	r0, [pc, #12]	; (8003768 <snake_screen_build.5+0x38>)
 800375a:	f7fe f84b 	bl	80017f4 <drawApple>
    }
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200002bc 	.word	0x200002bc

0800376c <type_message_scren.1>:
    void type_message_scren() {
 800376c:	b590      	push	{r4, r7, lr}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	4664      	mov	r4, ip
 8003774:	f8c7 c004 	str.w	ip, [r7, #4]
        	LCD5110_clear_scr(&lcd1);
 8003778:	480e      	ldr	r0, [pc, #56]	; (80037b4 <type_message_scren.1+0x48>)
 800377a:	f7fd fa11 	bl	8000ba0 <LCD5110_clear_scr>
        	LCD5110_refresh(&lcd1);
 800377e:	480d      	ldr	r0, [pc, #52]	; (80037b4 <type_message_scren.1+0x48>)
 8003780:	f7fd f9f0 	bl	8000b64 <LCD5110_refresh>
        	rect_t rectbox_phone={1, 1, 60, 30};
 8003784:	4a0c      	ldr	r2, [pc, #48]	; (80037b8 <type_message_scren.1+0x4c>)
 8003786:	f107 0308 	add.w	r3, r7, #8
 800378a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800378e:	e883 0003 	stmia.w	r3, {r0, r1}
        	LCD5110_set_cursor(5, 40, &lcd1);
 8003792:	4a08      	ldr	r2, [pc, #32]	; (80037b4 <type_message_scren.1+0x48>)
 8003794:	2128      	movs	r1, #40	; 0x28
 8003796:	2005      	movs	r0, #5
 8003798:	f7fd f9f0 	bl	8000b7c <LCD5110_set_cursor>
        	LCD5110_print("A-send", 0, &lcd1);
 800379c:	4a05      	ldr	r2, [pc, #20]	; (80037b4 <type_message_scren.1+0x48>)
 800379e:	2100      	movs	r1, #0
 80037a0:	4806      	ldr	r0, [pc, #24]	; (80037bc <type_message_scren.1+0x50>)
 80037a2:	f7fd fa0e 	bl	8000bc2 <LCD5110_print>
        	is_message = true;
 80037a6:	2301      	movs	r3, #1
 80037a8:	7223      	strb	r3, [r4, #8]
        }
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd90      	pop	{r4, r7, pc}
 80037b2:	bf00      	nop
 80037b4:	200002bc 	.word	0x200002bc
 80037b8:	0800de18 	.word	0x0800de18
 80037bc:	0800de10 	.word	0x0800de10

080037c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b094      	sub	sp, #80	; 0x50
 80037c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037c6:	f107 0320 	add.w	r3, r7, #32
 80037ca:	2230      	movs	r2, #48	; 0x30
 80037cc:	2100      	movs	r1, #0
 80037ce:	4618      	mov	r0, r3
 80037d0:	f009 fa58 	bl	800cc84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037d4:	f107 030c 	add.w	r3, r7, #12
 80037d8:	2200      	movs	r2, #0
 80037da:	601a      	str	r2, [r3, #0]
 80037dc:	605a      	str	r2, [r3, #4]
 80037de:	609a      	str	r2, [r3, #8]
 80037e0:	60da      	str	r2, [r3, #12]
 80037e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80037e4:	2300      	movs	r3, #0
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	4b27      	ldr	r3, [pc, #156]	; (8003888 <SystemClock_Config+0xc8>)
 80037ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ec:	4a26      	ldr	r2, [pc, #152]	; (8003888 <SystemClock_Config+0xc8>)
 80037ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037f2:	6413      	str	r3, [r2, #64]	; 0x40
 80037f4:	4b24      	ldr	r3, [pc, #144]	; (8003888 <SystemClock_Config+0xc8>)
 80037f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037fc:	60bb      	str	r3, [r7, #8]
 80037fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003800:	2300      	movs	r3, #0
 8003802:	607b      	str	r3, [r7, #4]
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <SystemClock_Config+0xcc>)
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	4a20      	ldr	r2, [pc, #128]	; (800388c <SystemClock_Config+0xcc>)
 800380a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800380e:	6013      	str	r3, [r2, #0]
 8003810:	4b1e      	ldr	r3, [pc, #120]	; (800388c <SystemClock_Config+0xcc>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003818:	607b      	str	r3, [r7, #4]
 800381a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800381c:	2301      	movs	r3, #1
 800381e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003820:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003824:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003826:	2302      	movs	r3, #2
 8003828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800382a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800382e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003830:	2304      	movs	r3, #4
 8003832:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003834:	23a8      	movs	r3, #168	; 0xa8
 8003836:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8003838:	2304      	movs	r3, #4
 800383a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800383c:	2307      	movs	r3, #7
 800383e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003840:	f107 0320 	add.w	r3, r7, #32
 8003844:	4618      	mov	r0, r3
 8003846:	f002 ffbb 	bl	80067c0 <HAL_RCC_OscConfig>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d001      	beq.n	8003854 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003850:	f000 f8b6 	bl	80039c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003854:	230f      	movs	r3, #15
 8003856:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003858:	2302      	movs	r3, #2
 800385a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800385c:	2300      	movs	r3, #0
 800385e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003860:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003864:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003866:	2300      	movs	r3, #0
 8003868:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800386a:	f107 030c 	add.w	r3, r7, #12
 800386e:	2102      	movs	r1, #2
 8003870:	4618      	mov	r0, r3
 8003872:	f003 fa1d 	bl	8006cb0 <HAL_RCC_ClockConfig>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d001      	beq.n	8003880 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800387c:	f000 f8a0 	bl	80039c0 <Error_Handler>
  }
}
 8003880:	bf00      	nop
 8003882:	3750      	adds	r7, #80	; 0x50
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	40007000 	.word	0x40007000

08003890 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b086      	sub	sp, #24
 8003894:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003896:	463b      	mov	r3, r7
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
 80038a4:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80038a6:	2301      	movs	r3, #1
 80038a8:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 80038aa:	23c8      	movs	r3, #200	; 0xc8
 80038ac:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80038ae:	2305      	movs	r3, #5
 80038b0:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80038b2:	2302      	movs	r3, #2
 80038b4:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80038b6:	463b      	mov	r3, r7
 80038b8:	4618      	mov	r0, r3
 80038ba:	f003 fc19 	bl	80070f0 <HAL_RCCEx_PeriphCLKConfig>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80038c4:	f000 f87c 	bl	80039c0 <Error_Handler>
  }
}
 80038c8:	bf00      	nop
 80038ca:	3718      	adds	r7, #24
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd80      	pop	{r7, pc}

080038d0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b082      	sub	sp, #8
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  if(huart == &huart1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	4a32      	ldr	r2, [pc, #200]	; (80039a4 <HAL_UART_RxCpltCallback+0xd4>)
 80038dc:	4293      	cmp	r3, r2
 80038de:	d15d      	bne.n	800399c <HAL_UART_RxCpltCallback+0xcc>
   {

    HAL_UART_Receive_IT(&huart1, (uint8_t*)&usart1_byte, 1);
 80038e0:	2201      	movs	r2, #1
 80038e2:	4931      	ldr	r1, [pc, #196]	; (80039a8 <HAL_UART_RxCpltCallback+0xd8>)
 80038e4:	482f      	ldr	r0, [pc, #188]	; (80039a4 <HAL_UART_RxCpltCallback+0xd4>)
 80038e6:	f004 f964 	bl	8007bb2 <HAL_UART_Receive_IT>


    if(usart1_byte_count< 10000)
 80038ea:	4b30      	ldr	r3, [pc, #192]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 80038ec:	781b      	ldrb	r3, [r3, #0]
    {
      usart1_rx_buf[usart1_byte_count++] = usart1_byte;
 80038ee:	4b2f      	ldr	r3, [pc, #188]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 80038f0:	781b      	ldrb	r3, [r3, #0]
 80038f2:	b2db      	uxtb	r3, r3
 80038f4:	1c5a      	adds	r2, r3, #1
 80038f6:	b2d1      	uxtb	r1, r2
 80038f8:	4a2c      	ldr	r2, [pc, #176]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 80038fa:	7011      	strb	r1, [r2, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	4b2a      	ldr	r3, [pc, #168]	; (80039a8 <HAL_UART_RxCpltCallback+0xd8>)
 8003900:	781b      	ldrb	r3, [r3, #0]
 8003902:	b2d9      	uxtb	r1, r3
 8003904:	4b2a      	ldr	r3, [pc, #168]	; (80039b0 <HAL_UART_RxCpltCallback+0xe0>)
 8003906:	5499      	strb	r1, [r3, r2]
    }

    if (check > 0){
 8003908:	4b2a      	ldr	r3, [pc, #168]	; (80039b4 <HAL_UART_RxCpltCallback+0xe4>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	2b00      	cmp	r3, #0
 800390e:	dd40      	ble.n	8003992 <HAL_UART_RxCpltCallback+0xc2>
      if(usart1_rx_buf[usart1_byte_count- 1 ] == '\n' && usart1_rx_buf[usart1_byte_count - 2] == '\r' && end_r < 2){
 8003910:	4b26      	ldr	r3, [pc, #152]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	b2db      	uxtb	r3, r3
 8003916:	3b01      	subs	r3, #1
 8003918:	4a25      	ldr	r2, [pc, #148]	; (80039b0 <HAL_UART_RxCpltCallback+0xe0>)
 800391a:	5cd3      	ldrb	r3, [r2, r3]
 800391c:	2b0a      	cmp	r3, #10
 800391e:	d117      	bne.n	8003950 <HAL_UART_RxCpltCallback+0x80>
 8003920:	4b22      	ldr	r3, [pc, #136]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	b2db      	uxtb	r3, r3
 8003926:	3b02      	subs	r3, #2
 8003928:	4a21      	ldr	r2, [pc, #132]	; (80039b0 <HAL_UART_RxCpltCallback+0xe0>)
 800392a:	5cd3      	ldrb	r3, [r2, r3]
 800392c:	2b0d      	cmp	r3, #13
 800392e:	d10f      	bne.n	8003950 <HAL_UART_RxCpltCallback+0x80>
 8003930:	4b21      	ldr	r3, [pc, #132]	; (80039b8 <HAL_UART_RxCpltCallback+0xe8>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2b01      	cmp	r3, #1
 8003936:	dc0b      	bgt.n	8003950 <HAL_UART_RxCpltCallback+0x80>
        usart1_byte_count = 0;
 8003938:	4b1c      	ldr	r3, [pc, #112]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 800393a:	2200      	movs	r2, #0
 800393c:	701a      	strb	r2, [r3, #0]
        usart1_rx_buf[0] = '\0';
 800393e:	4b1c      	ldr	r3, [pc, #112]	; (80039b0 <HAL_UART_RxCpltCallback+0xe0>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
        end_r++;
 8003944:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <HAL_UART_RxCpltCallback+0xe8>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	3301      	adds	r3, #1
 800394a:	4a1b      	ldr	r2, [pc, #108]	; (80039b8 <HAL_UART_RxCpltCallback+0xe8>)
 800394c:	6013      	str	r3, [r2, #0]
 800394e:	e020      	b.n	8003992 <HAL_UART_RxCpltCallback+0xc2>
      } else if(usart1_rx_buf[usart1_byte_count - 1] == '\r' && end_r > 1){
 8003950:	4b16      	ldr	r3, [pc, #88]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b2db      	uxtb	r3, r3
 8003956:	3b01      	subs	r3, #1
 8003958:	4a15      	ldr	r2, [pc, #84]	; (80039b0 <HAL_UART_RxCpltCallback+0xe0>)
 800395a:	5cd3      	ldrb	r3, [r2, r3]
 800395c:	2b0d      	cmp	r3, #13
 800395e:	d118      	bne.n	8003992 <HAL_UART_RxCpltCallback+0xc2>
 8003960:	4b15      	ldr	r3, [pc, #84]	; (80039b8 <HAL_UART_RxCpltCallback+0xe8>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	2b01      	cmp	r3, #1
 8003966:	dd14      	ble.n	8003992 <HAL_UART_RxCpltCallback+0xc2>
        if (usart1_byte_count > 1){
 8003968:	4b10      	ldr	r3, [pc, #64]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 800396a:	781b      	ldrb	r3, [r3, #0]
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b01      	cmp	r3, #1
 8003970:	d90f      	bls.n	8003992 <HAL_UART_RxCpltCallback+0xc2>
          handle_interrupts(gsm_module, usart1_rx_buf, check);
 8003972:	4b10      	ldr	r3, [pc, #64]	; (80039b4 <HAL_UART_RxCpltCallback+0xe4>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	4911      	ldr	r1, [pc, #68]	; (80039bc <HAL_UART_RxCpltCallback+0xec>)
 8003978:	4a0d      	ldr	r2, [pc, #52]	; (80039b0 <HAL_UART_RxCpltCallback+0xe0>)
 800397a:	c903      	ldmia	r1, {r0, r1}
 800397c:	f7fe fd12 	bl	80023a4 <handle_interrupts>
          check = 0;
 8003980:	4b0c      	ldr	r3, [pc, #48]	; (80039b4 <HAL_UART_RxCpltCallback+0xe4>)
 8003982:	2200      	movs	r2, #0
 8003984:	601a      	str	r2, [r3, #0]
          end_r = 0;
 8003986:	4b0c      	ldr	r3, [pc, #48]	; (80039b8 <HAL_UART_RxCpltCallback+0xe8>)
 8003988:	2200      	movs	r2, #0
 800398a:	601a      	str	r2, [r3, #0]
          usart1_byte_count = 0;
 800398c:	4b07      	ldr	r3, [pc, #28]	; (80039ac <HAL_UART_RxCpltCallback+0xdc>)
 800398e:	2200      	movs	r2, #0
 8003990:	701a      	strb	r2, [r3, #0]
        }
      }
    }

    check++;
 8003992:	4b08      	ldr	r3, [pc, #32]	; (80039b4 <HAL_UART_RxCpltCallback+0xe4>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	3301      	adds	r3, #1
 8003998:	4a06      	ldr	r2, [pc, #24]	; (80039b4 <HAL_UART_RxCpltCallback+0xe4>)
 800399a:	6013      	str	r3, [r2, #0]
  }


}
 800399c:	bf00      	nop
 800399e:	3708      	adds	r7, #8
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}
 80039a4:	2000e5c8 	.word	0x2000e5c8
 80039a8:	2000e54c 	.word	0x2000e54c
 80039ac:	2000e54d 	.word	0x2000e54d
 80039b0:	200044c0 	.word	0x200044c0
 80039b4:	2000e550 	.word	0x2000e550
 80039b8:	2000e554 	.word	0x2000e554
 80039bc:	2000e564 	.word	0x2000e564

080039c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80039c4:	b672      	cpsid	i
}
 80039c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80039c8:	e7fe      	b.n	80039c8 <Error_Handler+0x8>
	...

080039cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80039d0:	4b17      	ldr	r3, [pc, #92]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039d2:	4a18      	ldr	r2, [pc, #96]	; (8003a34 <MX_SPI1_Init+0x68>)
 80039d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80039d6:	4b16      	ldr	r3, [pc, #88]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80039dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039e0:	2200      	movs	r2, #0
 80039e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80039e4:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039e6:	2200      	movs	r2, #0
 80039e8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80039ea:	4b11      	ldr	r3, [pc, #68]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039ec:	2200      	movs	r2, #0
 80039ee:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80039f0:	4b0f      	ldr	r3, [pc, #60]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039f2:	2200      	movs	r2, #0
 80039f4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80039f6:	4b0e      	ldr	r3, [pc, #56]	; (8003a30 <MX_SPI1_Init+0x64>)
 80039f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80039fc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80039fe:	4b0c      	ldr	r3, [pc, #48]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a00:	2210      	movs	r2, #16
 8003a02:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003a04:	4b0a      	ldr	r3, [pc, #40]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a06:	2200      	movs	r2, #0
 8003a08:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003a0a:	4b09      	ldr	r3, [pc, #36]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a10:	4b07      	ldr	r3, [pc, #28]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a12:	2200      	movs	r2, #0
 8003a14:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003a16:	4b06      	ldr	r3, [pc, #24]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a18:	220a      	movs	r2, #10
 8003a1a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003a1c:	4804      	ldr	r0, [pc, #16]	; (8003a30 <MX_SPI1_Init+0x64>)
 8003a1e:	f003 fcb7 	bl	8007390 <HAL_SPI_Init>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d001      	beq.n	8003a2c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003a28:	f7ff ffca 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003a2c:	bf00      	nop
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	2000e56c 	.word	0x2000e56c
 8003a34:	40013000 	.word	0x40013000

08003a38 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b08a      	sub	sp, #40	; 0x28
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a40:	f107 0314 	add.w	r3, r7, #20
 8003a44:	2200      	movs	r2, #0
 8003a46:	601a      	str	r2, [r3, #0]
 8003a48:	605a      	str	r2, [r3, #4]
 8003a4a:	609a      	str	r2, [r3, #8]
 8003a4c:	60da      	str	r2, [r3, #12]
 8003a4e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a19      	ldr	r2, [pc, #100]	; (8003abc <HAL_SPI_MspInit+0x84>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d12b      	bne.n	8003ab2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	613b      	str	r3, [r7, #16]
 8003a5e:	4b18      	ldr	r3, [pc, #96]	; (8003ac0 <HAL_SPI_MspInit+0x88>)
 8003a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a62:	4a17      	ldr	r2, [pc, #92]	; (8003ac0 <HAL_SPI_MspInit+0x88>)
 8003a64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003a68:	6453      	str	r3, [r2, #68]	; 0x44
 8003a6a:	4b15      	ldr	r3, [pc, #84]	; (8003ac0 <HAL_SPI_MspInit+0x88>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a6e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a72:	613b      	str	r3, [r7, #16]
 8003a74:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a76:	2300      	movs	r3, #0
 8003a78:	60fb      	str	r3, [r7, #12]
 8003a7a:	4b11      	ldr	r3, [pc, #68]	; (8003ac0 <HAL_SPI_MspInit+0x88>)
 8003a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a7e:	4a10      	ldr	r2, [pc, #64]	; (8003ac0 <HAL_SPI_MspInit+0x88>)
 8003a80:	f043 0301 	orr.w	r3, r3, #1
 8003a84:	6313      	str	r3, [r2, #48]	; 0x30
 8003a86:	4b0e      	ldr	r3, [pc, #56]	; (8003ac0 <HAL_SPI_MspInit+0x88>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a8a:	f003 0301 	and.w	r3, r3, #1
 8003a8e:	60fb      	str	r3, [r7, #12]
 8003a90:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8003a92:	23e0      	movs	r3, #224	; 0xe0
 8003a94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a96:	2302      	movs	r3, #2
 8003a98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a9e:	2303      	movs	r3, #3
 8003aa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003aa2:	2305      	movs	r3, #5
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aa6:	f107 0314 	add.w	r3, r7, #20
 8003aaa:	4619      	mov	r1, r3
 8003aac:	4805      	ldr	r0, [pc, #20]	; (8003ac4 <HAL_SPI_MspInit+0x8c>)
 8003aae:	f000 fc63 	bl	8004378 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8003ab2:	bf00      	nop
 8003ab4:	3728      	adds	r7, #40	; 0x28
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40013000 	.word	0x40013000
 8003ac0:	40023800 	.word	0x40023800
 8003ac4:	40020000 	.word	0x40020000

08003ac8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b082      	sub	sp, #8
 8003acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ace:	2300      	movs	r3, #0
 8003ad0:	607b      	str	r3, [r7, #4]
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <HAL_MspInit+0x4c>)
 8003ad4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ad6:	4a0f      	ldr	r2, [pc, #60]	; (8003b14 <HAL_MspInit+0x4c>)
 8003ad8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003adc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ade:	4b0d      	ldr	r3, [pc, #52]	; (8003b14 <HAL_MspInit+0x4c>)
 8003ae0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ae2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ae6:	607b      	str	r3, [r7, #4]
 8003ae8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aea:	2300      	movs	r3, #0
 8003aec:	603b      	str	r3, [r7, #0]
 8003aee:	4b09      	ldr	r3, [pc, #36]	; (8003b14 <HAL_MspInit+0x4c>)
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	4a08      	ldr	r2, [pc, #32]	; (8003b14 <HAL_MspInit+0x4c>)
 8003af4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003af8:	6413      	str	r3, [r2, #64]	; 0x40
 8003afa:	4b06      	ldr	r3, [pc, #24]	; (8003b14 <HAL_MspInit+0x4c>)
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b02:	603b      	str	r3, [r7, #0]
 8003b04:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003b06:	2007      	movs	r0, #7
 8003b08:	f000 fb62 	bl	80041d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b0c:	bf00      	nop
 8003b0e:	3708      	adds	r7, #8
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}
 8003b14:	40023800 	.word	0x40023800

08003b18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b1c:	e7fe      	b.n	8003b1c <NMI_Handler+0x4>

08003b1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b1e:	b480      	push	{r7}
 8003b20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b22:	e7fe      	b.n	8003b22 <HardFault_Handler+0x4>

08003b24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b28:	e7fe      	b.n	8003b28 <MemManage_Handler+0x4>

08003b2a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b2a:	b480      	push	{r7}
 8003b2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b2e:	e7fe      	b.n	8003b2e <BusFault_Handler+0x4>

08003b30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b30:	b480      	push	{r7}
 8003b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b34:	e7fe      	b.n	8003b34 <UsageFault_Handler+0x4>

08003b36 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003b36:	b480      	push	{r7}
 8003b38:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003b3a:	bf00      	nop
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr

08003b44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b44:	b480      	push	{r7}
 8003b46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003b48:	bf00      	nop
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b50:	4770      	bx	lr

08003b52 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003b52:	b480      	push	{r7}
 8003b54:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003b56:	bf00      	nop
 8003b58:	46bd      	mov	sp, r7
 8003b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5e:	4770      	bx	lr

08003b60 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003b64:	f000 fa20 	bl	8003fa8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003b68:	bf00      	nop
 8003b6a:	bd80      	pop	{r7, pc}

08003b6c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8003b70:	2001      	movs	r0, #1
 8003b72:	f000 fdb7 	bl	80046e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8003b76:	bf00      	nop
 8003b78:	bd80      	pop	{r7, pc}

08003b7a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003b7a:	b580      	push	{r7, lr}
 8003b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8003b7e:	2002      	movs	r0, #2
 8003b80:	f000 fdb0 	bl	80046e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8003b84:	bf00      	nop
 8003b86:	bd80      	pop	{r7, pc}

08003b88 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003b8c:	2004      	movs	r0, #4
 8003b8e:	f000 fda9 	bl	80046e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}

08003b96 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003b96:	b580      	push	{r7, lr}
 8003b98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003b9a:	2008      	movs	r0, #8
 8003b9c:	f000 fda2 	bl	80046e4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003ba0:	bf00      	nop
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <USART1_IRQHandler+0x10>)
 8003baa:	f004 f833 	bl	8007c14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	2000e5c8 	.word	0x2000e5c8

08003bb8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <OTG_FS_IRQHandler+0x10>)
 8003bbe:	f001 fce9 	bl	8005594 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	2000eaf0 	.word	0x2000eaf0

08003bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
  return 1;
 8003bd0:	2301      	movs	r3, #1
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_kill>:

int _kill(int pid, int sig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003be6:	f009 f8ef 	bl	800cdc8 <__errno>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2216      	movs	r2, #22
 8003bee:	601a      	str	r2, [r3, #0]
  return -1;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_exit>:

void _exit (int status)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ffe7 	bl	8003bdc <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c0e:	e7fe      	b.n	8003c0e <_exit+0x12>

08003c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e00a      	b.n	8003c38 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c22:	f3af 8000 	nop.w
 8003c26:	4601      	mov	r1, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	60ba      	str	r2, [r7, #8]
 8003c2e:	b2ca      	uxtb	r2, r1
 8003c30:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	dbf0      	blt.n	8003c22 <_read+0x12>
  }

  return len;
 8003c40:	687b      	ldr	r3, [r7, #4]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c4a:	b580      	push	{r7, lr}
 8003c4c:	b086      	sub	sp, #24
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	60f8      	str	r0, [r7, #12]
 8003c52:	60b9      	str	r1, [r7, #8]
 8003c54:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
 8003c5a:	e009      	b.n	8003c70 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	1c5a      	adds	r2, r3, #1
 8003c60:	60ba      	str	r2, [r7, #8]
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	4618      	mov	r0, r3
 8003c66:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	dbf1      	blt.n	8003c5c <_write+0x12>
  }
  return len;
 8003c78:	687b      	ldr	r3, [r7, #4]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_close>:

int _close(int file)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003caa:	605a      	str	r2, [r3, #4]
  return 0;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_isatty>:

int _isatty(int file)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <_sbrk+0x5c>)
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <_sbrk+0x60>)
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <_sbrk+0x64>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <_sbrk+0x64>)
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <_sbrk+0x68>)
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <_sbrk+0x64>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d207      	bcs.n	8003d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d1c:	f009 f854 	bl	800cdc8 <__errno>
 8003d20:	4603      	mov	r3, r0
 8003d22:	220c      	movs	r2, #12
 8003d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	e009      	b.n	8003d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <_sbrk+0x64>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <_sbrk+0x64>)
 8003d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20020000 	.word	0x20020000
 8003d4c:	00000400 	.word	0x00000400
 8003d50:	2000e5c4 	.word	0x2000e5c4
 8003d54:	2000f160 	.word	0x2000f160

08003d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d5c:	4b06      	ldr	r3, [pc, #24]	; (8003d78 <SystemInit+0x20>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	4a05      	ldr	r2, [pc, #20]	; (8003d78 <SystemInit+0x20>)
 8003d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003d6c:	bf00      	nop
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d74:	4770      	bx	lr
 8003d76:	bf00      	nop
 8003d78:	e000ed00 	.word	0xe000ed00

08003d7c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003d80:	4b11      	ldr	r3, [pc, #68]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003d82:	4a12      	ldr	r2, [pc, #72]	; (8003dcc <MX_USART1_UART_Init+0x50>)
 8003d84:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003d86:	4b10      	ldr	r3, [pc, #64]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003d88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003d8c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003d8e:	4b0e      	ldr	r3, [pc, #56]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003d94:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003d9a:	4b0b      	ldr	r3, [pc, #44]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003da0:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003da2:	220c      	movs	r2, #12
 8003da4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003da6:	4b08      	ldr	r3, [pc, #32]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003da8:	2200      	movs	r2, #0
 8003daa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003dac:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003db2:	4805      	ldr	r0, [pc, #20]	; (8003dc8 <MX_USART1_UART_Init+0x4c>)
 8003db4:	f003 fd7c 	bl	80078b0 <HAL_UART_Init>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d001      	beq.n	8003dc2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003dbe:	f7ff fdff 	bl	80039c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003dc2:	bf00      	nop
 8003dc4:	bd80      	pop	{r7, pc}
 8003dc6:	bf00      	nop
 8003dc8:	2000e5c8 	.word	0x2000e5c8
 8003dcc:	40011000 	.word	0x40011000

08003dd0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b08a      	sub	sp, #40	; 0x28
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd8:	f107 0314 	add.w	r3, r7, #20
 8003ddc:	2200      	movs	r2, #0
 8003dde:	601a      	str	r2, [r3, #0]
 8003de0:	605a      	str	r2, [r3, #4]
 8003de2:	609a      	str	r2, [r3, #8]
 8003de4:	60da      	str	r2, [r3, #12]
 8003de6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a2c      	ldr	r2, [pc, #176]	; (8003ea0 <HAL_UART_MspInit+0xd0>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d152      	bne.n	8003e98 <HAL_UART_MspInit+0xc8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003df2:	2300      	movs	r3, #0
 8003df4:	613b      	str	r3, [r7, #16]
 8003df6:	4b2b      	ldr	r3, [pc, #172]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003df8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfa:	4a2a      	ldr	r2, [pc, #168]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003dfc:	f043 0310 	orr.w	r3, r3, #16
 8003e00:	6453      	str	r3, [r2, #68]	; 0x44
 8003e02:	4b28      	ldr	r3, [pc, #160]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003e04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	613b      	str	r3, [r7, #16]
 8003e0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e0e:	2300      	movs	r3, #0
 8003e10:	60fb      	str	r3, [r7, #12]
 8003e12:	4b24      	ldr	r3, [pc, #144]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003e18:	f043 0301 	orr.w	r3, r3, #1
 8003e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e1e:	4b21      	ldr	r3, [pc, #132]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e22:	f003 0301 	and.w	r3, r3, #1
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	60bb      	str	r3, [r7, #8]
 8003e2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e32:	4a1c      	ldr	r2, [pc, #112]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003e34:	f043 0302 	orr.w	r3, r3, #2
 8003e38:	6313      	str	r3, [r2, #48]	; 0x30
 8003e3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ea4 <HAL_UART_MspInit+0xd4>)
 8003e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	60bb      	str	r3, [r7, #8]
 8003e44:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003e46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e4a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e50:	2300      	movs	r3, #0
 8003e52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e54:	2303      	movs	r3, #3
 8003e56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e58:	2307      	movs	r3, #7
 8003e5a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e5c:	f107 0314 	add.w	r3, r7, #20
 8003e60:	4619      	mov	r1, r3
 8003e62:	4811      	ldr	r0, [pc, #68]	; (8003ea8 <HAL_UART_MspInit+0xd8>)
 8003e64:	f000 fa88 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8003e68:	2380      	movs	r3, #128	; 0x80
 8003e6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e74:	2303      	movs	r3, #3
 8003e76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e78:	2307      	movs	r3, #7
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e7c:	f107 0314 	add.w	r3, r7, #20
 8003e80:	4619      	mov	r1, r3
 8003e82:	480a      	ldr	r0, [pc, #40]	; (8003eac <HAL_UART_MspInit+0xdc>)
 8003e84:	f000 fa78 	bl	8004378 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e88:	2200      	movs	r2, #0
 8003e8a:	2100      	movs	r1, #0
 8003e8c:	2025      	movs	r0, #37	; 0x25
 8003e8e:	f000 f9aa 	bl	80041e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e92:	2025      	movs	r0, #37	; 0x25
 8003e94:	f000 f9c3 	bl	800421e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003e98:	bf00      	nop
 8003e9a:	3728      	adds	r7, #40	; 0x28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40011000 	.word	0x40011000
 8003ea4:	40023800 	.word	0x40023800
 8003ea8:	40020000 	.word	0x40020000
 8003eac:	40020400 	.word	0x40020400

08003eb0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003eb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ee8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003eb4:	480d      	ldr	r0, [pc, #52]	; (8003eec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003eb6:	490e      	ldr	r1, [pc, #56]	; (8003ef0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003eb8:	4a0e      	ldr	r2, [pc, #56]	; (8003ef4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ebc:	e002      	b.n	8003ec4 <LoopCopyDataInit>

08003ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003ec2:	3304      	adds	r3, #4

08003ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ec8:	d3f9      	bcc.n	8003ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eca:	4a0b      	ldr	r2, [pc, #44]	; (8003ef8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003ecc:	4c0b      	ldr	r4, [pc, #44]	; (8003efc <LoopFillZerobss+0x26>)
  movs r3, #0
 8003ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ed0:	e001      	b.n	8003ed6 <LoopFillZerobss>

08003ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ed4:	3204      	adds	r2, #4

08003ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ed8:	d3fb      	bcc.n	8003ed2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003eda:	f7ff ff3d 	bl	8003d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ede:	f008 ff79 	bl	800cdd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003ee2:	f7fe fb41 	bl	8002568 <main>
  bx  lr    
 8003ee6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003ee8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003eec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ef0:	200001bc 	.word	0x200001bc
  ldr r2, =_sidata
 8003ef4:	0800e680 	.word	0x0800e680
  ldr r2, =_sbss
 8003ef8:	200001bc 	.word	0x200001bc
  ldr r4, =_ebss
 8003efc:	2000f15c 	.word	0x2000f15c

08003f00 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f00:	e7fe      	b.n	8003f00 <ADC_IRQHandler>
	...

08003f04 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f08:	4b0e      	ldr	r3, [pc, #56]	; (8003f44 <HAL_Init+0x40>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a0d      	ldr	r2, [pc, #52]	; (8003f44 <HAL_Init+0x40>)
 8003f0e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f12:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f14:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <HAL_Init+0x40>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a0a      	ldr	r2, [pc, #40]	; (8003f44 <HAL_Init+0x40>)
 8003f1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f1e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f20:	4b08      	ldr	r3, [pc, #32]	; (8003f44 <HAL_Init+0x40>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	4a07      	ldr	r2, [pc, #28]	; (8003f44 <HAL_Init+0x40>)
 8003f26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f2a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f2c:	2003      	movs	r0, #3
 8003f2e:	f000 f94f 	bl	80041d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f32:	2000      	movs	r0, #0
 8003f34:	f000 f808 	bl	8003f48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003f38:	f7ff fdc6 	bl	8003ac8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	bd80      	pop	{r7, pc}
 8003f42:	bf00      	nop
 8003f44:	40023c00 	.word	0x40023c00

08003f48 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b082      	sub	sp, #8
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003f50:	4b12      	ldr	r3, [pc, #72]	; (8003f9c <HAL_InitTick+0x54>)
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	4b12      	ldr	r3, [pc, #72]	; (8003fa0 <HAL_InitTick+0x58>)
 8003f56:	781b      	ldrb	r3, [r3, #0]
 8003f58:	4619      	mov	r1, r3
 8003f5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003f5e:	fbb3 f3f1 	udiv	r3, r3, r1
 8003f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 f967 	bl	800423a <HAL_SYSTICK_Config>
 8003f6c:	4603      	mov	r3, r0
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d001      	beq.n	8003f76 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003f72:	2301      	movs	r3, #1
 8003f74:	e00e      	b.n	8003f94 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2b0f      	cmp	r3, #15
 8003f7a:	d80a      	bhi.n	8003f92 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	6879      	ldr	r1, [r7, #4]
 8003f80:	f04f 30ff 	mov.w	r0, #4294967295
 8003f84:	f000 f92f 	bl	80041e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003f88:	4a06      	ldr	r2, [pc, #24]	; (8003fa4 <HAL_InitTick+0x5c>)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	e000      	b.n	8003f94 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
}
 8003f94:	4618      	mov	r0, r3
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	20000044 	.word	0x20000044
 8003fa0:	2000004c 	.word	0x2000004c
 8003fa4:	20000048 	.word	0x20000048

08003fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fac:	4b06      	ldr	r3, [pc, #24]	; (8003fc8 <HAL_IncTick+0x20>)
 8003fae:	781b      	ldrb	r3, [r3, #0]
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4b06      	ldr	r3, [pc, #24]	; (8003fcc <HAL_IncTick+0x24>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	4a04      	ldr	r2, [pc, #16]	; (8003fcc <HAL_IncTick+0x24>)
 8003fba:	6013      	str	r3, [r2, #0]
}
 8003fbc:	bf00      	nop
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	2000004c 	.word	0x2000004c
 8003fcc:	2000e60c 	.word	0x2000e60c

08003fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8003fd4:	4b03      	ldr	r3, [pc, #12]	; (8003fe4 <HAL_GetTick+0x14>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe0:	4770      	bx	lr
 8003fe2:	bf00      	nop
 8003fe4:	2000e60c 	.word	0x2000e60c

08003fe8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ff0:	f7ff ffee 	bl	8003fd0 <HAL_GetTick>
 8003ff4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004000:	d005      	beq.n	800400e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004002:	4b0a      	ldr	r3, [pc, #40]	; (800402c <HAL_Delay+0x44>)
 8004004:	781b      	ldrb	r3, [r3, #0]
 8004006:	461a      	mov	r2, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	4413      	add	r3, r2
 800400c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800400e:	bf00      	nop
 8004010:	f7ff ffde 	bl	8003fd0 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	68fa      	ldr	r2, [r7, #12]
 800401c:	429a      	cmp	r2, r3
 800401e:	d8f7      	bhi.n	8004010 <HAL_Delay+0x28>
  {
  }
}
 8004020:	bf00      	nop
 8004022:	bf00      	nop
 8004024:	3710      	adds	r7, #16
 8004026:	46bd      	mov	sp, r7
 8004028:	bd80      	pop	{r7, pc}
 800402a:	bf00      	nop
 800402c:	2000004c 	.word	0x2000004c

08004030 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f003 0307 	and.w	r3, r3, #7
 800403e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004040:	4b0c      	ldr	r3, [pc, #48]	; (8004074 <__NVIC_SetPriorityGrouping+0x44>)
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004046:	68ba      	ldr	r2, [r7, #8]
 8004048:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800404c:	4013      	ands	r3, r2
 800404e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004058:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800405c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004060:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004062:	4a04      	ldr	r2, [pc, #16]	; (8004074 <__NVIC_SetPriorityGrouping+0x44>)
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	60d3      	str	r3, [r2, #12]
}
 8004068:	bf00      	nop
 800406a:	3714      	adds	r7, #20
 800406c:	46bd      	mov	sp, r7
 800406e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004072:	4770      	bx	lr
 8004074:	e000ed00 	.word	0xe000ed00

08004078 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004078:	b480      	push	{r7}
 800407a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800407c:	4b04      	ldr	r3, [pc, #16]	; (8004090 <__NVIC_GetPriorityGrouping+0x18>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	0a1b      	lsrs	r3, r3, #8
 8004082:	f003 0307 	and.w	r3, r3, #7
}
 8004086:	4618      	mov	r0, r3
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr
 8004090:	e000ed00 	.word	0xe000ed00

08004094 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	4603      	mov	r3, r0
 800409c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800409e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	db0b      	blt.n	80040be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80040a6:	79fb      	ldrb	r3, [r7, #7]
 80040a8:	f003 021f 	and.w	r2, r3, #31
 80040ac:	4907      	ldr	r1, [pc, #28]	; (80040cc <__NVIC_EnableIRQ+0x38>)
 80040ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040b2:	095b      	lsrs	r3, r3, #5
 80040b4:	2001      	movs	r0, #1
 80040b6:	fa00 f202 	lsl.w	r2, r0, r2
 80040ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80040be:	bf00      	nop
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	e000e100 	.word	0xe000e100

080040d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80040d0:	b480      	push	{r7}
 80040d2:	b083      	sub	sp, #12
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	4603      	mov	r3, r0
 80040d8:	6039      	str	r1, [r7, #0]
 80040da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80040dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	db0a      	blt.n	80040fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	b2da      	uxtb	r2, r3
 80040e8:	490c      	ldr	r1, [pc, #48]	; (800411c <__NVIC_SetPriority+0x4c>)
 80040ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80040ee:	0112      	lsls	r2, r2, #4
 80040f0:	b2d2      	uxtb	r2, r2
 80040f2:	440b      	add	r3, r1
 80040f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80040f8:	e00a      	b.n	8004110 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80040fa:	683b      	ldr	r3, [r7, #0]
 80040fc:	b2da      	uxtb	r2, r3
 80040fe:	4908      	ldr	r1, [pc, #32]	; (8004120 <__NVIC_SetPriority+0x50>)
 8004100:	79fb      	ldrb	r3, [r7, #7]
 8004102:	f003 030f 	and.w	r3, r3, #15
 8004106:	3b04      	subs	r3, #4
 8004108:	0112      	lsls	r2, r2, #4
 800410a:	b2d2      	uxtb	r2, r2
 800410c:	440b      	add	r3, r1
 800410e:	761a      	strb	r2, [r3, #24]
}
 8004110:	bf00      	nop
 8004112:	370c      	adds	r7, #12
 8004114:	46bd      	mov	sp, r7
 8004116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411a:	4770      	bx	lr
 800411c:	e000e100 	.word	0xe000e100
 8004120:	e000ed00 	.word	0xe000ed00

08004124 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004124:	b480      	push	{r7}
 8004126:	b089      	sub	sp, #36	; 0x24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0307 	and.w	r3, r3, #7
 8004136:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	f1c3 0307 	rsb	r3, r3, #7
 800413e:	2b04      	cmp	r3, #4
 8004140:	bf28      	it	cs
 8004142:	2304      	movcs	r3, #4
 8004144:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004146:	69fb      	ldr	r3, [r7, #28]
 8004148:	3304      	adds	r3, #4
 800414a:	2b06      	cmp	r3, #6
 800414c:	d902      	bls.n	8004154 <NVIC_EncodePriority+0x30>
 800414e:	69fb      	ldr	r3, [r7, #28]
 8004150:	3b03      	subs	r3, #3
 8004152:	e000      	b.n	8004156 <NVIC_EncodePriority+0x32>
 8004154:	2300      	movs	r3, #0
 8004156:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004158:	f04f 32ff 	mov.w	r2, #4294967295
 800415c:	69bb      	ldr	r3, [r7, #24]
 800415e:	fa02 f303 	lsl.w	r3, r2, r3
 8004162:	43da      	mvns	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	401a      	ands	r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800416c:	f04f 31ff 	mov.w	r1, #4294967295
 8004170:	697b      	ldr	r3, [r7, #20]
 8004172:	fa01 f303 	lsl.w	r3, r1, r3
 8004176:	43d9      	mvns	r1, r3
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800417c:	4313      	orrs	r3, r2
         );
}
 800417e:	4618      	mov	r0, r3
 8004180:	3724      	adds	r7, #36	; 0x24
 8004182:	46bd      	mov	sp, r7
 8004184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004188:	4770      	bx	lr
	...

0800418c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b082      	sub	sp, #8
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	3b01      	subs	r3, #1
 8004198:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800419c:	d301      	bcc.n	80041a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800419e:	2301      	movs	r3, #1
 80041a0:	e00f      	b.n	80041c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80041a2:	4a0a      	ldr	r2, [pc, #40]	; (80041cc <SysTick_Config+0x40>)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	3b01      	subs	r3, #1
 80041a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80041aa:	210f      	movs	r1, #15
 80041ac:	f04f 30ff 	mov.w	r0, #4294967295
 80041b0:	f7ff ff8e 	bl	80040d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <SysTick_Config+0x40>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80041ba:	4b04      	ldr	r3, [pc, #16]	; (80041cc <SysTick_Config+0x40>)
 80041bc:	2207      	movs	r2, #7
 80041be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3708      	adds	r7, #8
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	e000e010 	.word	0xe000e010

080041d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d0:	b580      	push	{r7, lr}
 80041d2:	b082      	sub	sp, #8
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f7ff ff29 	bl	8004030 <__NVIC_SetPriorityGrouping>
}
 80041de:	bf00      	nop
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}

080041e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80041e6:	b580      	push	{r7, lr}
 80041e8:	b086      	sub	sp, #24
 80041ea:	af00      	add	r7, sp, #0
 80041ec:	4603      	mov	r3, r0
 80041ee:	60b9      	str	r1, [r7, #8]
 80041f0:	607a      	str	r2, [r7, #4]
 80041f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80041f8:	f7ff ff3e 	bl	8004078 <__NVIC_GetPriorityGrouping>
 80041fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80041fe:	687a      	ldr	r2, [r7, #4]
 8004200:	68b9      	ldr	r1, [r7, #8]
 8004202:	6978      	ldr	r0, [r7, #20]
 8004204:	f7ff ff8e 	bl	8004124 <NVIC_EncodePriority>
 8004208:	4602      	mov	r2, r0
 800420a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800420e:	4611      	mov	r1, r2
 8004210:	4618      	mov	r0, r3
 8004212:	f7ff ff5d 	bl	80040d0 <__NVIC_SetPriority>
}
 8004216:	bf00      	nop
 8004218:	3718      	adds	r7, #24
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}

0800421e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800421e:	b580      	push	{r7, lr}
 8004220:	b082      	sub	sp, #8
 8004222:	af00      	add	r7, sp, #0
 8004224:	4603      	mov	r3, r0
 8004226:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004228:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800422c:	4618      	mov	r0, r3
 800422e:	f7ff ff31 	bl	8004094 <__NVIC_EnableIRQ>
}
 8004232:	bf00      	nop
 8004234:	3708      	adds	r7, #8
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b082      	sub	sp, #8
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004242:	6878      	ldr	r0, [r7, #4]
 8004244:	f7ff ffa2 	bl	800418c <SysTick_Config>
 8004248:	4603      	mov	r3, r0
}
 800424a:	4618      	mov	r0, r3
 800424c:	3708      	adds	r7, #8
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}

08004252 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004252:	b580      	push	{r7, lr}
 8004254:	b084      	sub	sp, #16
 8004256:	af00      	add	r7, sp, #0
 8004258:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800425e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004260:	f7ff feb6 	bl	8003fd0 <HAL_GetTick>
 8004264:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d008      	beq.n	8004284 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2280      	movs	r2, #128	; 0x80
 8004276:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004280:	2301      	movs	r3, #1
 8004282:	e052      	b.n	800432a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f022 0216 	bic.w	r2, r2, #22
 8004292:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	695a      	ldr	r2, [r3, #20]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80042a2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d103      	bne.n	80042b4 <HAL_DMA_Abort+0x62>
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d007      	beq.n	80042c4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f022 0208 	bic.w	r2, r2, #8
 80042c2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	681a      	ldr	r2, [r3, #0]
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f022 0201 	bic.w	r2, r2, #1
 80042d2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042d4:	e013      	b.n	80042fe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80042d6:	f7ff fe7b 	bl	8003fd0 <HAL_GetTick>
 80042da:	4602      	mov	r2, r0
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	1ad3      	subs	r3, r2, r3
 80042e0:	2b05      	cmp	r3, #5
 80042e2:	d90c      	bls.n	80042fe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2220      	movs	r2, #32
 80042e8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	2203      	movs	r2, #3
 80042ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80042fa:	2303      	movs	r3, #3
 80042fc:	e015      	b.n	800432a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	2b00      	cmp	r3, #0
 800430a:	d1e4      	bne.n	80042d6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004310:	223f      	movs	r2, #63	; 0x3f
 8004312:	409a      	lsls	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2201      	movs	r2, #1
 800431c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2200      	movs	r2, #0
 8004324:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004332:	b480      	push	{r7}
 8004334:	b083      	sub	sp, #12
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004340:	b2db      	uxtb	r3, r3
 8004342:	2b02      	cmp	r3, #2
 8004344:	d004      	beq.n	8004350 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2280      	movs	r2, #128	; 0x80
 800434a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e00c      	b.n	800436a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2205      	movs	r2, #5
 8004354:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0201 	bic.w	r2, r2, #1
 8004366:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	4618      	mov	r0, r3
 800436c:	370c      	adds	r7, #12
 800436e:	46bd      	mov	sp, r7
 8004370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004374:	4770      	bx	lr
	...

08004378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004378:	b480      	push	{r7}
 800437a:	b089      	sub	sp, #36	; 0x24
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004382:	2300      	movs	r3, #0
 8004384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004386:	2300      	movs	r3, #0
 8004388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800438a:	2300      	movs	r3, #0
 800438c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800438e:	2300      	movs	r3, #0
 8004390:	61fb      	str	r3, [r7, #28]
 8004392:	e159      	b.n	8004648 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004394:	2201      	movs	r2, #1
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	fa02 f303 	lsl.w	r3, r2, r3
 800439c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	697a      	ldr	r2, [r7, #20]
 80043a4:	4013      	ands	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	429a      	cmp	r2, r3
 80043ae:	f040 8148 	bne.w	8004642 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	685b      	ldr	r3, [r3, #4]
 80043b6:	f003 0303 	and.w	r3, r3, #3
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d005      	beq.n	80043ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80043c6:	2b02      	cmp	r3, #2
 80043c8:	d130      	bne.n	800442c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	005b      	lsls	r3, r3, #1
 80043d4:	2203      	movs	r2, #3
 80043d6:	fa02 f303 	lsl.w	r3, r2, r3
 80043da:	43db      	mvns	r3, r3
 80043dc:	69ba      	ldr	r2, [r7, #24]
 80043de:	4013      	ands	r3, r2
 80043e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68da      	ldr	r2, [r3, #12]
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	005b      	lsls	r3, r3, #1
 80043ea:	fa02 f303 	lsl.w	r3, r2, r3
 80043ee:	69ba      	ldr	r2, [r7, #24]
 80043f0:	4313      	orrs	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	69ba      	ldr	r2, [r7, #24]
 80043f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	685b      	ldr	r3, [r3, #4]
 80043fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004400:	2201      	movs	r2, #1
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	fa02 f303 	lsl.w	r3, r2, r3
 8004408:	43db      	mvns	r3, r3
 800440a:	69ba      	ldr	r2, [r7, #24]
 800440c:	4013      	ands	r3, r2
 800440e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	091b      	lsrs	r3, r3, #4
 8004416:	f003 0201 	and.w	r2, r3, #1
 800441a:	69fb      	ldr	r3, [r7, #28]
 800441c:	fa02 f303 	lsl.w	r3, r2, r3
 8004420:	69ba      	ldr	r2, [r7, #24]
 8004422:	4313      	orrs	r3, r2
 8004424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800442c:	683b      	ldr	r3, [r7, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f003 0303 	and.w	r3, r3, #3
 8004434:	2b03      	cmp	r3, #3
 8004436:	d017      	beq.n	8004468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	68db      	ldr	r3, [r3, #12]
 800443c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	005b      	lsls	r3, r3, #1
 8004442:	2203      	movs	r2, #3
 8004444:	fa02 f303 	lsl.w	r3, r2, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	69ba      	ldr	r2, [r7, #24]
 800444c:	4013      	ands	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004450:	683b      	ldr	r3, [r7, #0]
 8004452:	689a      	ldr	r2, [r3, #8]
 8004454:	69fb      	ldr	r3, [r7, #28]
 8004456:	005b      	lsls	r3, r3, #1
 8004458:	fa02 f303 	lsl.w	r3, r2, r3
 800445c:	69ba      	ldr	r2, [r7, #24]
 800445e:	4313      	orrs	r3, r2
 8004460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	69ba      	ldr	r2, [r7, #24]
 8004466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004468:	683b      	ldr	r3, [r7, #0]
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	f003 0303 	and.w	r3, r3, #3
 8004470:	2b02      	cmp	r3, #2
 8004472:	d123      	bne.n	80044bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	08da      	lsrs	r2, r3, #3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	3208      	adds	r2, #8
 800447c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	f003 0307 	and.w	r3, r3, #7
 8004488:	009b      	lsls	r3, r3, #2
 800448a:	220f      	movs	r2, #15
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	43db      	mvns	r3, r3
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	4013      	ands	r3, r2
 8004496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004498:	683b      	ldr	r3, [r7, #0]
 800449a:	691a      	ldr	r2, [r3, #16]
 800449c:	69fb      	ldr	r3, [r7, #28]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	009b      	lsls	r3, r3, #2
 80044a4:	fa02 f303 	lsl.w	r3, r2, r3
 80044a8:	69ba      	ldr	r2, [r7, #24]
 80044aa:	4313      	orrs	r3, r2
 80044ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80044ae:	69fb      	ldr	r3, [r7, #28]
 80044b0:	08da      	lsrs	r2, r3, #3
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	3208      	adds	r2, #8
 80044b6:	69b9      	ldr	r1, [r7, #24]
 80044b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	005b      	lsls	r3, r3, #1
 80044c6:	2203      	movs	r2, #3
 80044c8:	fa02 f303 	lsl.w	r3, r2, r3
 80044cc:	43db      	mvns	r3, r3
 80044ce:	69ba      	ldr	r2, [r7, #24]
 80044d0:	4013      	ands	r3, r2
 80044d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	685b      	ldr	r3, [r3, #4]
 80044d8:	f003 0203 	and.w	r2, r3, #3
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	fa02 f303 	lsl.w	r3, r2, r3
 80044e4:	69ba      	ldr	r2, [r7, #24]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	69ba      	ldr	r2, [r7, #24]
 80044ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	685b      	ldr	r3, [r3, #4]
 80044f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	f000 80a2 	beq.w	8004642 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044fe:	2300      	movs	r3, #0
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	4b57      	ldr	r3, [pc, #348]	; (8004660 <HAL_GPIO_Init+0x2e8>)
 8004504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004506:	4a56      	ldr	r2, [pc, #344]	; (8004660 <HAL_GPIO_Init+0x2e8>)
 8004508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800450c:	6453      	str	r3, [r2, #68]	; 0x44
 800450e:	4b54      	ldr	r3, [pc, #336]	; (8004660 <HAL_GPIO_Init+0x2e8>)
 8004510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004516:	60fb      	str	r3, [r7, #12]
 8004518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800451a:	4a52      	ldr	r2, [pc, #328]	; (8004664 <HAL_GPIO_Init+0x2ec>)
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	089b      	lsrs	r3, r3, #2
 8004520:	3302      	adds	r3, #2
 8004522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004528:	69fb      	ldr	r3, [r7, #28]
 800452a:	f003 0303 	and.w	r3, r3, #3
 800452e:	009b      	lsls	r3, r3, #2
 8004530:	220f      	movs	r2, #15
 8004532:	fa02 f303 	lsl.w	r3, r2, r3
 8004536:	43db      	mvns	r3, r3
 8004538:	69ba      	ldr	r2, [r7, #24]
 800453a:	4013      	ands	r3, r2
 800453c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	4a49      	ldr	r2, [pc, #292]	; (8004668 <HAL_GPIO_Init+0x2f0>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d019      	beq.n	800457a <HAL_GPIO_Init+0x202>
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	4a48      	ldr	r2, [pc, #288]	; (800466c <HAL_GPIO_Init+0x2f4>)
 800454a:	4293      	cmp	r3, r2
 800454c:	d013      	beq.n	8004576 <HAL_GPIO_Init+0x1fe>
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a47      	ldr	r2, [pc, #284]	; (8004670 <HAL_GPIO_Init+0x2f8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d00d      	beq.n	8004572 <HAL_GPIO_Init+0x1fa>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	4a46      	ldr	r2, [pc, #280]	; (8004674 <HAL_GPIO_Init+0x2fc>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d007      	beq.n	800456e <HAL_GPIO_Init+0x1f6>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	4a45      	ldr	r2, [pc, #276]	; (8004678 <HAL_GPIO_Init+0x300>)
 8004562:	4293      	cmp	r3, r2
 8004564:	d101      	bne.n	800456a <HAL_GPIO_Init+0x1f2>
 8004566:	2304      	movs	r3, #4
 8004568:	e008      	b.n	800457c <HAL_GPIO_Init+0x204>
 800456a:	2307      	movs	r3, #7
 800456c:	e006      	b.n	800457c <HAL_GPIO_Init+0x204>
 800456e:	2303      	movs	r3, #3
 8004570:	e004      	b.n	800457c <HAL_GPIO_Init+0x204>
 8004572:	2302      	movs	r3, #2
 8004574:	e002      	b.n	800457c <HAL_GPIO_Init+0x204>
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <HAL_GPIO_Init+0x204>
 800457a:	2300      	movs	r3, #0
 800457c:	69fa      	ldr	r2, [r7, #28]
 800457e:	f002 0203 	and.w	r2, r2, #3
 8004582:	0092      	lsls	r2, r2, #2
 8004584:	4093      	lsls	r3, r2
 8004586:	69ba      	ldr	r2, [r7, #24]
 8004588:	4313      	orrs	r3, r2
 800458a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800458c:	4935      	ldr	r1, [pc, #212]	; (8004664 <HAL_GPIO_Init+0x2ec>)
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	3302      	adds	r3, #2
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800459a:	4b38      	ldr	r3, [pc, #224]	; (800467c <HAL_GPIO_Init+0x304>)
 800459c:	689b      	ldr	r3, [r3, #8]
 800459e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	43db      	mvns	r3, r3
 80045a4:	69ba      	ldr	r2, [r7, #24]
 80045a6:	4013      	ands	r3, r2
 80045a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d003      	beq.n	80045be <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80045b6:	69ba      	ldr	r2, [r7, #24]
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	4313      	orrs	r3, r2
 80045bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80045be:	4a2f      	ldr	r2, [pc, #188]	; (800467c <HAL_GPIO_Init+0x304>)
 80045c0:	69bb      	ldr	r3, [r7, #24]
 80045c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80045c4:	4b2d      	ldr	r3, [pc, #180]	; (800467c <HAL_GPIO_Init+0x304>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	43db      	mvns	r3, r3
 80045ce:	69ba      	ldr	r2, [r7, #24]
 80045d0:	4013      	ands	r3, r2
 80045d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	685b      	ldr	r3, [r3, #4]
 80045d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d003      	beq.n	80045e8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80045e0:	69ba      	ldr	r2, [r7, #24]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80045e8:	4a24      	ldr	r2, [pc, #144]	; (800467c <HAL_GPIO_Init+0x304>)
 80045ea:	69bb      	ldr	r3, [r7, #24]
 80045ec:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80045ee:	4b23      	ldr	r3, [pc, #140]	; (800467c <HAL_GPIO_Init+0x304>)
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80045f4:	693b      	ldr	r3, [r7, #16]
 80045f6:	43db      	mvns	r3, r3
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	4013      	ands	r3, r2
 80045fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004606:	2b00      	cmp	r3, #0
 8004608:	d003      	beq.n	8004612 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800460a:	69ba      	ldr	r2, [r7, #24]
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4313      	orrs	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004612:	4a1a      	ldr	r2, [pc, #104]	; (800467c <HAL_GPIO_Init+0x304>)
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004618:	4b18      	ldr	r3, [pc, #96]	; (800467c <HAL_GPIO_Init+0x304>)
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	43db      	mvns	r3, r3
 8004622:	69ba      	ldr	r2, [r7, #24]
 8004624:	4013      	ands	r3, r2
 8004626:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004630:	2b00      	cmp	r3, #0
 8004632:	d003      	beq.n	800463c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4313      	orrs	r3, r2
 800463a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800463c:	4a0f      	ldr	r2, [pc, #60]	; (800467c <HAL_GPIO_Init+0x304>)
 800463e:	69bb      	ldr	r3, [r7, #24]
 8004640:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3301      	adds	r3, #1
 8004646:	61fb      	str	r3, [r7, #28]
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	2b0f      	cmp	r3, #15
 800464c:	f67f aea2 	bls.w	8004394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004650:	bf00      	nop
 8004652:	bf00      	nop
 8004654:	3724      	adds	r7, #36	; 0x24
 8004656:	46bd      	mov	sp, r7
 8004658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465c:	4770      	bx	lr
 800465e:	bf00      	nop
 8004660:	40023800 	.word	0x40023800
 8004664:	40013800 	.word	0x40013800
 8004668:	40020000 	.word	0x40020000
 800466c:	40020400 	.word	0x40020400
 8004670:	40020800 	.word	0x40020800
 8004674:	40020c00 	.word	0x40020c00
 8004678:	40021000 	.word	0x40021000
 800467c:	40013c00 	.word	0x40013c00

08004680 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	460b      	mov	r3, r1
 800468a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691a      	ldr	r2, [r3, #16]
 8004690:	887b      	ldrh	r3, [r7, #2]
 8004692:	4013      	ands	r3, r2
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004698:	2301      	movs	r3, #1
 800469a:	73fb      	strb	r3, [r7, #15]
 800469c:	e001      	b.n	80046a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800469e:	2300      	movs	r3, #0
 80046a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80046a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b083      	sub	sp, #12
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
 80046b8:	460b      	mov	r3, r1
 80046ba:	807b      	strh	r3, [r7, #2]
 80046bc:	4613      	mov	r3, r2
 80046be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80046c0:	787b      	ldrb	r3, [r7, #1]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80046c6:	887a      	ldrh	r2, [r7, #2]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80046cc:	e003      	b.n	80046d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80046ce:	887b      	ldrh	r3, [r7, #2]
 80046d0:	041a      	lsls	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	619a      	str	r2, [r3, #24]
}
 80046d6:	bf00      	nop
 80046d8:	370c      	adds	r7, #12
 80046da:	46bd      	mov	sp, r7
 80046dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e0:	4770      	bx	lr
	...

080046e4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b082      	sub	sp, #8
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	4603      	mov	r3, r0
 80046ec:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80046ee:	4b08      	ldr	r3, [pc, #32]	; (8004710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046f0:	695a      	ldr	r2, [r3, #20]
 80046f2:	88fb      	ldrh	r3, [r7, #6]
 80046f4:	4013      	ands	r3, r2
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d006      	beq.n	8004708 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80046fa:	4a05      	ldr	r2, [pc, #20]	; (8004710 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80046fc:	88fb      	ldrh	r3, [r7, #6]
 80046fe:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004700:	88fb      	ldrh	r3, [r7, #6]
 8004702:	4618      	mov	r0, r3
 8004704:	f000 f806 	bl	8004714 <HAL_GPIO_EXTI_Callback>
  }
}
 8004708:	bf00      	nop
 800470a:	3708      	adds	r7, #8
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40013c00 	.word	0x40013c00

08004714 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004714:	b480      	push	{r7}
 8004716:	b083      	sub	sp, #12
 8004718:	af00      	add	r7, sp, #0
 800471a:	4603      	mov	r3, r0
 800471c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e12b      	b.n	8004996 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fc f892 	bl	800087c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2224      	movs	r2, #36	; 0x24
 800475c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f022 0201 	bic.w	r2, r2, #1
 800476e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	681a      	ldr	r2, [r3, #0]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800477e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800478e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004790:	f002 fc86 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 8004794:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4a81      	ldr	r2, [pc, #516]	; (80049a0 <HAL_I2C_Init+0x274>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d807      	bhi.n	80047b0 <HAL_I2C_Init+0x84>
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	4a80      	ldr	r2, [pc, #512]	; (80049a4 <HAL_I2C_Init+0x278>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	bf94      	ite	ls
 80047a8:	2301      	movls	r3, #1
 80047aa:	2300      	movhi	r3, #0
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e006      	b.n	80047be <HAL_I2C_Init+0x92>
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	4a7d      	ldr	r2, [pc, #500]	; (80049a8 <HAL_I2C_Init+0x27c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	bf94      	ite	ls
 80047b8:	2301      	movls	r3, #1
 80047ba:	2300      	movhi	r3, #0
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d001      	beq.n	80047c6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	e0e7      	b.n	8004996 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	4a78      	ldr	r2, [pc, #480]	; (80049ac <HAL_I2C_Init+0x280>)
 80047ca:	fba2 2303 	umull	r2, r3, r2, r3
 80047ce:	0c9b      	lsrs	r3, r3, #18
 80047d0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	430a      	orrs	r2, r1
 80047e4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	6a1b      	ldr	r3, [r3, #32]
 80047ec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	4a6a      	ldr	r2, [pc, #424]	; (80049a0 <HAL_I2C_Init+0x274>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d802      	bhi.n	8004800 <HAL_I2C_Init+0xd4>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	3301      	adds	r3, #1
 80047fe:	e009      	b.n	8004814 <HAL_I2C_Init+0xe8>
 8004800:	68bb      	ldr	r3, [r7, #8]
 8004802:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004806:	fb02 f303 	mul.w	r3, r2, r3
 800480a:	4a69      	ldr	r2, [pc, #420]	; (80049b0 <HAL_I2C_Init+0x284>)
 800480c:	fba2 2303 	umull	r2, r3, r2, r3
 8004810:	099b      	lsrs	r3, r3, #6
 8004812:	3301      	adds	r3, #1
 8004814:	687a      	ldr	r2, [r7, #4]
 8004816:	6812      	ldr	r2, [r2, #0]
 8004818:	430b      	orrs	r3, r1
 800481a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004826:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	495c      	ldr	r1, [pc, #368]	; (80049a0 <HAL_I2C_Init+0x274>)
 8004830:	428b      	cmp	r3, r1
 8004832:	d819      	bhi.n	8004868 <HAL_I2C_Init+0x13c>
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	1e59      	subs	r1, r3, #1
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	005b      	lsls	r3, r3, #1
 800483e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004842:	1c59      	adds	r1, r3, #1
 8004844:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004848:	400b      	ands	r3, r1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <HAL_I2C_Init+0x138>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	1e59      	subs	r1, r3, #1
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	005b      	lsls	r3, r3, #1
 8004858:	fbb1 f3f3 	udiv	r3, r1, r3
 800485c:	3301      	adds	r3, #1
 800485e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004862:	e051      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 8004864:	2304      	movs	r3, #4
 8004866:	e04f      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d111      	bne.n	8004894 <HAL_I2C_Init+0x168>
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	1e58      	subs	r0, r3, #1
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6859      	ldr	r1, [r3, #4]
 8004878:	460b      	mov	r3, r1
 800487a:	005b      	lsls	r3, r3, #1
 800487c:	440b      	add	r3, r1
 800487e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004882:	3301      	adds	r3, #1
 8004884:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004888:	2b00      	cmp	r3, #0
 800488a:	bf0c      	ite	eq
 800488c:	2301      	moveq	r3, #1
 800488e:	2300      	movne	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	e012      	b.n	80048ba <HAL_I2C_Init+0x18e>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	1e58      	subs	r0, r3, #1
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6859      	ldr	r1, [r3, #4]
 800489c:	460b      	mov	r3, r1
 800489e:	009b      	lsls	r3, r3, #2
 80048a0:	440b      	add	r3, r1
 80048a2:	0099      	lsls	r1, r3, #2
 80048a4:	440b      	add	r3, r1
 80048a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80048aa:	3301      	adds	r3, #1
 80048ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	bf0c      	ite	eq
 80048b4:	2301      	moveq	r3, #1
 80048b6:	2300      	movne	r3, #0
 80048b8:	b2db      	uxtb	r3, r3
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d001      	beq.n	80048c2 <HAL_I2C_Init+0x196>
 80048be:	2301      	movs	r3, #1
 80048c0:	e022      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10e      	bne.n	80048e8 <HAL_I2C_Init+0x1bc>
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	1e58      	subs	r0, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	6859      	ldr	r1, [r3, #4]
 80048d2:	460b      	mov	r3, r1
 80048d4:	005b      	lsls	r3, r3, #1
 80048d6:	440b      	add	r3, r1
 80048d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80048dc:	3301      	adds	r3, #1
 80048de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	e00f      	b.n	8004908 <HAL_I2C_Init+0x1dc>
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	1e58      	subs	r0, r3, #1
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6859      	ldr	r1, [r3, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	009b      	lsls	r3, r3, #2
 80048f4:	440b      	add	r3, r1
 80048f6:	0099      	lsls	r1, r3, #2
 80048f8:	440b      	add	r3, r1
 80048fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80048fe:	3301      	adds	r3, #1
 8004900:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004904:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004908:	6879      	ldr	r1, [r7, #4]
 800490a:	6809      	ldr	r1, [r1, #0]
 800490c:	4313      	orrs	r3, r2
 800490e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	69da      	ldr	r2, [r3, #28]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6a1b      	ldr	r3, [r3, #32]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	430a      	orrs	r2, r1
 800492a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	689b      	ldr	r3, [r3, #8]
 8004932:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004936:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800493a:	687a      	ldr	r2, [r7, #4]
 800493c:	6911      	ldr	r1, [r2, #16]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	68d2      	ldr	r2, [r2, #12]
 8004942:	4311      	orrs	r1, r2
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	430b      	orrs	r3, r1
 800494a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	68db      	ldr	r3, [r3, #12]
 8004952:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	695a      	ldr	r2, [r3, #20]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	431a      	orrs	r2, r3
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	430a      	orrs	r2, r1
 8004966:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f042 0201 	orr.w	r2, r2, #1
 8004976:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2220      	movs	r2, #32
 8004982:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2200      	movs	r2, #0
 800498a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	2200      	movs	r2, #0
 8004990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3710      	adds	r7, #16
 800499a:	46bd      	mov	sp, r7
 800499c:	bd80      	pop	{r7, pc}
 800499e:	bf00      	nop
 80049a0:	000186a0 	.word	0x000186a0
 80049a4:	001e847f 	.word	0x001e847f
 80049a8:	003d08ff 	.word	0x003d08ff
 80049ac:	431bde83 	.word	0x431bde83
 80049b0:	10624dd3 	.word	0x10624dd3

080049b4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d101      	bne.n	80049c6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e128      	b.n	8004c18 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d109      	bne.n	80049e6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	2200      	movs	r2, #0
 80049d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a90      	ldr	r2, [pc, #576]	; (8004c20 <HAL_I2S_Init+0x26c>)
 80049de:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80049e0:	6878      	ldr	r0, [r7, #4]
 80049e2:	f7fb fff1 	bl	80009c8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2202      	movs	r2, #2
 80049ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	69db      	ldr	r3, [r3, #28]
 80049f4:	687a      	ldr	r2, [r7, #4]
 80049f6:	6812      	ldr	r2, [r2, #0]
 80049f8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80049fc:	f023 030f 	bic.w	r3, r3, #15
 8004a00:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	2202      	movs	r2, #2
 8004a08:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d060      	beq.n	8004ad4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	68db      	ldr	r3, [r3, #12]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d102      	bne.n	8004a20 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004a1a:	2310      	movs	r3, #16
 8004a1c:	617b      	str	r3, [r7, #20]
 8004a1e:	e001      	b.n	8004a24 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004a20:	2320      	movs	r3, #32
 8004a22:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b20      	cmp	r3, #32
 8004a2a:	d802      	bhi.n	8004a32 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	005b      	lsls	r3, r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004a32:	2001      	movs	r0, #1
 8004a34:	f002 fc4c 	bl	80072d0 <HAL_RCCEx_GetPeriphCLKFreq>
 8004a38:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a42:	d125      	bne.n	8004a90 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d010      	beq.n	8004a6e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	009b      	lsls	r3, r3, #2
 8004a50:	68fa      	ldr	r2, [r7, #12]
 8004a52:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a56:	4613      	mov	r3, r2
 8004a58:	009b      	lsls	r3, r3, #2
 8004a5a:	4413      	add	r3, r2
 8004a5c:	005b      	lsls	r3, r3, #1
 8004a5e:	461a      	mov	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	695b      	ldr	r3, [r3, #20]
 8004a64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a68:	3305      	adds	r3, #5
 8004a6a:	613b      	str	r3, [r7, #16]
 8004a6c:	e01f      	b.n	8004aae <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	00db      	lsls	r3, r3, #3
 8004a72:	68fa      	ldr	r2, [r7, #12]
 8004a74:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a78:	4613      	mov	r3, r2
 8004a7a:	009b      	lsls	r3, r3, #2
 8004a7c:	4413      	add	r3, r2
 8004a7e:	005b      	lsls	r3, r3, #1
 8004a80:	461a      	mov	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8a:	3305      	adds	r3, #5
 8004a8c:	613b      	str	r3, [r7, #16]
 8004a8e:	e00e      	b.n	8004aae <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004a98:	4613      	mov	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	4413      	add	r3, r2
 8004a9e:	005b      	lsls	r3, r3, #1
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aaa:	3305      	adds	r3, #5
 8004aac:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004aae:	693b      	ldr	r3, [r7, #16]
 8004ab0:	4a5c      	ldr	r2, [pc, #368]	; (8004c24 <HAL_I2S_Init+0x270>)
 8004ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab6:	08db      	lsrs	r3, r3, #3
 8004ab8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	f003 0301 	and.w	r3, r3, #1
 8004ac0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004ac2:	693a      	ldr	r2, [r7, #16]
 8004ac4:	69bb      	ldr	r3, [r7, #24]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	085b      	lsrs	r3, r3, #1
 8004aca:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004acc:	69bb      	ldr	r3, [r7, #24]
 8004ace:	021b      	lsls	r3, r3, #8
 8004ad0:	61bb      	str	r3, [r7, #24]
 8004ad2:	e003      	b.n	8004adc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004ad8:	2300      	movs	r3, #0
 8004ada:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d902      	bls.n	8004ae8 <HAL_I2S_Init+0x134>
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	2bff      	cmp	r3, #255	; 0xff
 8004ae6:	d907      	bls.n	8004af8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aec:	f043 0210 	orr.w	r2, r3, #16
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004af4:	2301      	movs	r3, #1
 8004af6:	e08f      	b.n	8004c18 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	ea42 0103 	orr.w	r1, r2, r3
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	69fa      	ldr	r2, [r7, #28]
 8004b08:	430a      	orrs	r2, r1
 8004b0a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	69db      	ldr	r3, [r3, #28]
 8004b12:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b16:	f023 030f 	bic.w	r3, r3, #15
 8004b1a:	687a      	ldr	r2, [r7, #4]
 8004b1c:	6851      	ldr	r1, [r2, #4]
 8004b1e:	687a      	ldr	r2, [r7, #4]
 8004b20:	6892      	ldr	r2, [r2, #8]
 8004b22:	4311      	orrs	r1, r2
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	68d2      	ldr	r2, [r2, #12]
 8004b28:	4311      	orrs	r1, r2
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6992      	ldr	r2, [r2, #24]
 8004b2e:	430a      	orrs	r2, r1
 8004b30:	431a      	orrs	r2, r3
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b3a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6a1b      	ldr	r3, [r3, #32]
 8004b40:	2b01      	cmp	r3, #1
 8004b42:	d161      	bne.n	8004c08 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	4a38      	ldr	r2, [pc, #224]	; (8004c28 <HAL_I2S_Init+0x274>)
 8004b48:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a37      	ldr	r2, [pc, #220]	; (8004c2c <HAL_I2S_Init+0x278>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d101      	bne.n	8004b58 <HAL_I2S_Init+0x1a4>
 8004b54:	4b36      	ldr	r3, [pc, #216]	; (8004c30 <HAL_I2S_Init+0x27c>)
 8004b56:	e001      	b.n	8004b5c <HAL_I2S_Init+0x1a8>
 8004b58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6812      	ldr	r2, [r2, #0]
 8004b62:	4932      	ldr	r1, [pc, #200]	; (8004c2c <HAL_I2S_Init+0x278>)
 8004b64:	428a      	cmp	r2, r1
 8004b66:	d101      	bne.n	8004b6c <HAL_I2S_Init+0x1b8>
 8004b68:	4a31      	ldr	r2, [pc, #196]	; (8004c30 <HAL_I2S_Init+0x27c>)
 8004b6a:	e001      	b.n	8004b70 <HAL_I2S_Init+0x1bc>
 8004b6c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004b70:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004b74:	f023 030f 	bic.w	r3, r3, #15
 8004b78:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	4a2b      	ldr	r2, [pc, #172]	; (8004c2c <HAL_I2S_Init+0x278>)
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d101      	bne.n	8004b88 <HAL_I2S_Init+0x1d4>
 8004b84:	4b2a      	ldr	r3, [pc, #168]	; (8004c30 <HAL_I2S_Init+0x27c>)
 8004b86:	e001      	b.n	8004b8c <HAL_I2S_Init+0x1d8>
 8004b88:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004b8c:	2202      	movs	r2, #2
 8004b8e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a25      	ldr	r2, [pc, #148]	; (8004c2c <HAL_I2S_Init+0x278>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <HAL_I2S_Init+0x1ea>
 8004b9a:	4b25      	ldr	r3, [pc, #148]	; (8004c30 <HAL_I2S_Init+0x27c>)
 8004b9c:	e001      	b.n	8004ba2 <HAL_I2S_Init+0x1ee>
 8004b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	685b      	ldr	r3, [r3, #4]
 8004baa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bae:	d003      	beq.n	8004bb8 <HAL_I2S_Init+0x204>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	685b      	ldr	r3, [r3, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d103      	bne.n	8004bc0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004bb8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004bbc:	613b      	str	r3, [r7, #16]
 8004bbe:	e001      	b.n	8004bc4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	68db      	ldr	r3, [r3, #12]
 8004bd6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	699b      	ldr	r3, [r3, #24]
 8004be0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004be2:	4313      	orrs	r3, r2
 8004be4:	b29a      	uxth	r2, r3
 8004be6:	897b      	ldrh	r3, [r7, #10]
 8004be8:	4313      	orrs	r3, r2
 8004bea:	b29b      	uxth	r3, r3
 8004bec:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004bf0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4a0d      	ldr	r2, [pc, #52]	; (8004c2c <HAL_I2S_Init+0x278>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	d101      	bne.n	8004c00 <HAL_I2S_Init+0x24c>
 8004bfc:	4b0c      	ldr	r3, [pc, #48]	; (8004c30 <HAL_I2S_Init+0x27c>)
 8004bfe:	e001      	b.n	8004c04 <HAL_I2S_Init+0x250>
 8004c00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c04:	897a      	ldrh	r2, [r7, #10]
 8004c06:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2200      	movs	r2, #0
 8004c0c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004c16:	2300      	movs	r3, #0
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	3720      	adds	r7, #32
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	08004d2b 	.word	0x08004d2b
 8004c24:	cccccccd 	.word	0xcccccccd
 8004c28:	08004e41 	.word	0x08004e41
 8004c2c:	40003800 	.word	0x40003800
 8004c30:	40003400 	.word	0x40003400

08004c34 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c34:	b480      	push	{r7}
 8004c36:	b083      	sub	sp, #12
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004c3c:	bf00      	nop
 8004c3e:	370c      	adds	r7, #12
 8004c40:	46bd      	mov	sp, r7
 8004c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c46:	4770      	bx	lr

08004c48 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b083      	sub	sp, #12
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004c50:	bf00      	nop
 8004c52:	370c      	adds	r7, #12
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr

08004c5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b083      	sub	sp, #12
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004c64:	bf00      	nop
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	b082      	sub	sp, #8
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7c:	881a      	ldrh	r2, [r3, #0]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	1c9a      	adds	r2, r3, #2
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	3b01      	subs	r3, #1
 8004c96:	b29a      	uxth	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca0:	b29b      	uxth	r3, r3
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d10e      	bne.n	8004cc4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cb4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2201      	movs	r2, #1
 8004cba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff ffb8 	bl	8004c34 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004cc4:	bf00      	nop
 8004cc6:	3708      	adds	r7, #8
 8004cc8:	46bd      	mov	sp, r7
 8004cca:	bd80      	pop	{r7, pc}

08004ccc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68da      	ldr	r2, [r3, #12]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cde:	b292      	uxth	r2, r2
 8004ce0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ce6:	1c9a      	adds	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	3b01      	subs	r3, #1
 8004cf4:	b29a      	uxth	r2, r3
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cfe:	b29b      	uxth	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10e      	bne.n	8004d22 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d12:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2201      	movs	r2, #1
 8004d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7ff ff93 	bl	8004c48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004d22:	bf00      	nop
 8004d24:	3708      	adds	r7, #8
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b086      	sub	sp, #24
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d40:	b2db      	uxtb	r3, r3
 8004d42:	2b04      	cmp	r3, #4
 8004d44:	d13a      	bne.n	8004dbc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b01      	cmp	r3, #1
 8004d4e:	d109      	bne.n	8004d64 <I2S_IRQHandler+0x3a>
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5a:	2b40      	cmp	r3, #64	; 0x40
 8004d5c:	d102      	bne.n	8004d64 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004d5e:	6878      	ldr	r0, [r7, #4]
 8004d60:	f7ff ffb4 	bl	8004ccc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d6a:	2b40      	cmp	r3, #64	; 0x40
 8004d6c:	d126      	bne.n	8004dbc <I2S_IRQHandler+0x92>
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	f003 0320 	and.w	r3, r3, #32
 8004d78:	2b20      	cmp	r3, #32
 8004d7a:	d11f      	bne.n	8004dbc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	685a      	ldr	r2, [r3, #4]
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d8a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004d8c:	2300      	movs	r3, #0
 8004d8e:	613b      	str	r3, [r7, #16]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68db      	ldr	r3, [r3, #12]
 8004d96:	613b      	str	r3, [r7, #16]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	613b      	str	r3, [r7, #16]
 8004da0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f043 0202 	orr.w	r2, r3, #2
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f7ff ff50 	bl	8004c5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004dc2:	b2db      	uxtb	r3, r3
 8004dc4:	2b03      	cmp	r3, #3
 8004dc6:	d136      	bne.n	8004e36 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d109      	bne.n	8004de6 <I2S_IRQHandler+0xbc>
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ddc:	2b80      	cmp	r3, #128	; 0x80
 8004dde:	d102      	bne.n	8004de6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7ff ff45 	bl	8004c70 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004de6:	697b      	ldr	r3, [r7, #20]
 8004de8:	f003 0308 	and.w	r3, r3, #8
 8004dec:	2b08      	cmp	r3, #8
 8004dee:	d122      	bne.n	8004e36 <I2S_IRQHandler+0x10c>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 0320 	and.w	r3, r3, #32
 8004dfa:	2b20      	cmp	r3, #32
 8004dfc:	d11b      	bne.n	8004e36 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e0c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004e0e:	2300      	movs	r3, #0
 8004e10:	60fb      	str	r3, [r7, #12]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	60fb      	str	r3, [r7, #12]
 8004e1a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e28:	f043 0204 	orr.w	r2, r3, #4
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e30:	6878      	ldr	r0, [r7, #4]
 8004e32:	f7ff ff13 	bl	8004c5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e36:	bf00      	nop
 8004e38:	3718      	adds	r7, #24
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bd80      	pop	{r7, pc}
	...

08004e40 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b088      	sub	sp, #32
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a92      	ldr	r2, [pc, #584]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e56:	4293      	cmp	r3, r2
 8004e58:	d101      	bne.n	8004e5e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004e5a:	4b92      	ldr	r3, [pc, #584]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e5c:	e001      	b.n	8004e62 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004e5e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4a8b      	ldr	r2, [pc, #556]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e74:	4293      	cmp	r3, r2
 8004e76:	d101      	bne.n	8004e7c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004e78:	4b8a      	ldr	r3, [pc, #552]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e7a:	e001      	b.n	8004e80 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004e7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004e8c:	d004      	beq.n	8004e98 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	685b      	ldr	r3, [r3, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	f040 8099 	bne.w	8004fca <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004e98:	69fb      	ldr	r3, [r7, #28]
 8004e9a:	f003 0302 	and.w	r3, r3, #2
 8004e9e:	2b02      	cmp	r3, #2
 8004ea0:	d107      	bne.n	8004eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004ea2:	697b      	ldr	r3, [r7, #20]
 8004ea4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d002      	beq.n	8004eb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f000 f925 	bl	80050fc <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004eb2:	69bb      	ldr	r3, [r7, #24]
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d107      	bne.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d002      	beq.n	8004ecc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	f000 f9c8 	bl	800525c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed2:	2b40      	cmp	r3, #64	; 0x40
 8004ed4:	d13a      	bne.n	8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	f003 0320 	and.w	r3, r3, #32
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d035      	beq.n	8004f4c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a6e      	ldr	r2, [pc, #440]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d101      	bne.n	8004eee <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004eea:	4b6e      	ldr	r3, [pc, #440]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004eec:	e001      	b.n	8004ef2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004eee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ef2:	685a      	ldr	r2, [r3, #4]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	4969      	ldr	r1, [pc, #420]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004efa:	428b      	cmp	r3, r1
 8004efc:	d101      	bne.n	8004f02 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004efe:	4b69      	ldr	r3, [pc, #420]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f00:	e001      	b.n	8004f06 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004f02:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f0a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685a      	ldr	r2, [r3, #4]
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f1a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	60fb      	str	r3, [r7, #12]
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	68db      	ldr	r3, [r3, #12]
 8004f26:	60fb      	str	r3, [r7, #12]
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	689b      	ldr	r3, [r3, #8]
 8004f2e:	60fb      	str	r3, [r7, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f3e:	f043 0202 	orr.w	r2, r3, #2
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fe88 	bl	8004c5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004f4c:	69fb      	ldr	r3, [r7, #28]
 8004f4e:	f003 0308 	and.w	r3, r3, #8
 8004f52:	2b08      	cmp	r3, #8
 8004f54:	f040 80c3 	bne.w	80050de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004f58:	697b      	ldr	r3, [r7, #20]
 8004f5a:	f003 0320 	and.w	r3, r3, #32
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 80bd 	beq.w	80050de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	685a      	ldr	r2, [r3, #4]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f72:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a49      	ldr	r2, [pc, #292]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d101      	bne.n	8004f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004f7e:	4b49      	ldr	r3, [pc, #292]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f80:	e001      	b.n	8004f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f86:	685a      	ldr	r2, [r3, #4]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4944      	ldr	r1, [pc, #272]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004f8e:	428b      	cmp	r3, r1
 8004f90:	d101      	bne.n	8004f96 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004f92:	4b44      	ldr	r3, [pc, #272]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004f94:	e001      	b.n	8004f9a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004f96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f9e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	60bb      	str	r3, [r7, #8]
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	60bb      	str	r3, [r7, #8]
 8004fac:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2201      	movs	r2, #1
 8004fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fba:	f043 0204 	orr.w	r2, r3, #4
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f7ff fe4a 	bl	8004c5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004fc8:	e089      	b.n	80050de <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004fca:	69bb      	ldr	r3, [r7, #24]
 8004fcc:	f003 0302 	and.w	r3, r3, #2
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d107      	bne.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004fd4:	693b      	ldr	r3, [r7, #16]
 8004fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d002      	beq.n	8004fe4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 f8be 	bl	8005160 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	f003 0301 	and.w	r3, r3, #1
 8004fea:	2b01      	cmp	r3, #1
 8004fec:	d107      	bne.n	8004ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004fee:	697b      	ldr	r3, [r7, #20]
 8004ff0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d002      	beq.n	8004ffe <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004ff8:	6878      	ldr	r0, [r7, #4]
 8004ffa:	f000 f8fd 	bl	80051f8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005004:	2b40      	cmp	r3, #64	; 0x40
 8005006:	d12f      	bne.n	8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	f003 0320 	and.w	r3, r3, #32
 800500e:	2b00      	cmp	r3, #0
 8005010:	d02a      	beq.n	8005068 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	685a      	ldr	r2, [r3, #4]
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005020:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1e      	ldr	r2, [pc, #120]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d101      	bne.n	8005030 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800502c:	4b1d      	ldr	r3, [pc, #116]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800502e:	e001      	b.n	8005034 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005030:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4919      	ldr	r1, [pc, #100]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800503c:	428b      	cmp	r3, r1
 800503e:	d101      	bne.n	8005044 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005040:	4b18      	ldr	r3, [pc, #96]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005042:	e001      	b.n	8005048 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005044:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005048:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800504c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	2201      	movs	r2, #1
 8005052:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800505a:	f043 0202 	orr.w	r2, r3, #2
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f7ff fdfa 	bl	8004c5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005068:	69bb      	ldr	r3, [r7, #24]
 800506a:	f003 0308 	and.w	r3, r3, #8
 800506e:	2b08      	cmp	r3, #8
 8005070:	d136      	bne.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8005072:	693b      	ldr	r3, [r7, #16]
 8005074:	f003 0320 	and.w	r3, r3, #32
 8005078:	2b00      	cmp	r3, #0
 800507a:	d031      	beq.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a07      	ldr	r2, [pc, #28]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005082:	4293      	cmp	r3, r2
 8005084:	d101      	bne.n	800508a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005088:	e001      	b.n	800508e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800508a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800508e:	685a      	ldr	r2, [r3, #4]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4902      	ldr	r1, [pc, #8]	; (80050a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005096:	428b      	cmp	r3, r1
 8005098:	d106      	bne.n	80050a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800509a:	4b02      	ldr	r3, [pc, #8]	; (80050a4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800509c:	e006      	b.n	80050ac <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800509e:	bf00      	nop
 80050a0:	40003800 	.word	0x40003800
 80050a4:	40003400 	.word	0x40003400
 80050a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ac:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050b0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	685a      	ldr	r2, [r3, #4]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050c0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	2201      	movs	r2, #1
 80050c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050ce:	f043 0204 	orr.w	r2, r3, #4
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80050d6:	6878      	ldr	r0, [r7, #4]
 80050d8:	f7ff fdc0 	bl	8004c5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80050dc:	e000      	b.n	80050e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80050de:	bf00      	nop
}
 80050e0:	bf00      	nop
 80050e2:	3720      	adds	r7, #32
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050e8:	b480      	push	{r7}
 80050ea:	b083      	sub	sp, #12
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80050f0:	bf00      	nop
 80050f2:	370c      	adds	r7, #12
 80050f4:	46bd      	mov	sp, r7
 80050f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fa:	4770      	bx	lr

080050fc <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b082      	sub	sp, #8
 8005100:	af00      	add	r7, sp, #0
 8005102:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	1c99      	adds	r1, r3, #2
 800510a:	687a      	ldr	r2, [r7, #4]
 800510c:	6251      	str	r1, [r2, #36]	; 0x24
 800510e:	881a      	ldrh	r2, [r3, #0]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800511a:	b29b      	uxth	r3, r3
 800511c:	3b01      	subs	r3, #1
 800511e:	b29a      	uxth	r2, r3
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005128:	b29b      	uxth	r3, r3
 800512a:	2b00      	cmp	r3, #0
 800512c:	d113      	bne.n	8005156 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	685a      	ldr	r2, [r3, #4]
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800513c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005142:	b29b      	uxth	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d106      	bne.n	8005156 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005150:	6878      	ldr	r0, [r7, #4]
 8005152:	f7ff ffc9 	bl	80050e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005156:	bf00      	nop
 8005158:	3708      	adds	r7, #8
 800515a:	46bd      	mov	sp, r7
 800515c:	bd80      	pop	{r7, pc}
	...

08005160 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005160:	b580      	push	{r7, lr}
 8005162:	b082      	sub	sp, #8
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516c:	1c99      	adds	r1, r3, #2
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6251      	str	r1, [r2, #36]	; 0x24
 8005172:	8819      	ldrh	r1, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1d      	ldr	r2, [pc, #116]	; (80051f0 <I2SEx_TxISR_I2SExt+0x90>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d101      	bne.n	8005182 <I2SEx_TxISR_I2SExt+0x22>
 800517e:	4b1d      	ldr	r3, [pc, #116]	; (80051f4 <I2SEx_TxISR_I2SExt+0x94>)
 8005180:	e001      	b.n	8005186 <I2SEx_TxISR_I2SExt+0x26>
 8005182:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005186:	460a      	mov	r2, r1
 8005188:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800518e:	b29b      	uxth	r3, r3
 8005190:	3b01      	subs	r3, #1
 8005192:	b29a      	uxth	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800519c:	b29b      	uxth	r3, r3
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d121      	bne.n	80051e6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <I2SEx_TxISR_I2SExt+0x90>)
 80051a8:	4293      	cmp	r3, r2
 80051aa:	d101      	bne.n	80051b0 <I2SEx_TxISR_I2SExt+0x50>
 80051ac:	4b11      	ldr	r3, [pc, #68]	; (80051f4 <I2SEx_TxISR_I2SExt+0x94>)
 80051ae:	e001      	b.n	80051b4 <I2SEx_TxISR_I2SExt+0x54>
 80051b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051b4:	685a      	ldr	r2, [r3, #4]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	490d      	ldr	r1, [pc, #52]	; (80051f0 <I2SEx_TxISR_I2SExt+0x90>)
 80051bc:	428b      	cmp	r3, r1
 80051be:	d101      	bne.n	80051c4 <I2SEx_TxISR_I2SExt+0x64>
 80051c0:	4b0c      	ldr	r3, [pc, #48]	; (80051f4 <I2SEx_TxISR_I2SExt+0x94>)
 80051c2:	e001      	b.n	80051c8 <I2SEx_TxISR_I2SExt+0x68>
 80051c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051c8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80051cc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80051d2:	b29b      	uxth	r3, r3
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d106      	bne.n	80051e6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	2201      	movs	r2, #1
 80051dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7ff ff81 	bl	80050e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	40003800 	.word	0x40003800
 80051f4:	40003400 	.word	0x40003400

080051f8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80051f8:	b580      	push	{r7, lr}
 80051fa:	b082      	sub	sp, #8
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	68d8      	ldr	r0, [r3, #12]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800520a:	1c99      	adds	r1, r3, #2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005210:	b282      	uxth	r2, r0
 8005212:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005218:	b29b      	uxth	r3, r3
 800521a:	3b01      	subs	r3, #1
 800521c:	b29a      	uxth	r2, r3
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005226:	b29b      	uxth	r3, r3
 8005228:	2b00      	cmp	r3, #0
 800522a:	d113      	bne.n	8005254 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800523a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	2b00      	cmp	r3, #0
 8005244:	d106      	bne.n	8005254 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2201      	movs	r2, #1
 800524a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800524e:	6878      	ldr	r0, [r7, #4]
 8005250:	f7ff ff4a 	bl	80050e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005254:	bf00      	nop
 8005256:	3708      	adds	r7, #8
 8005258:	46bd      	mov	sp, r7
 800525a:	bd80      	pop	{r7, pc}

0800525c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b082      	sub	sp, #8
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	4a20      	ldr	r2, [pc, #128]	; (80052ec <I2SEx_RxISR_I2SExt+0x90>)
 800526a:	4293      	cmp	r3, r2
 800526c:	d101      	bne.n	8005272 <I2SEx_RxISR_I2SExt+0x16>
 800526e:	4b20      	ldr	r3, [pc, #128]	; (80052f0 <I2SEx_RxISR_I2SExt+0x94>)
 8005270:	e001      	b.n	8005276 <I2SEx_RxISR_I2SExt+0x1a>
 8005272:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005276:	68d8      	ldr	r0, [r3, #12]
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800527c:	1c99      	adds	r1, r3, #2
 800527e:	687a      	ldr	r2, [r7, #4]
 8005280:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005282:	b282      	uxth	r2, r0
 8005284:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800528a:	b29b      	uxth	r3, r3
 800528c:	3b01      	subs	r3, #1
 800528e:	b29a      	uxth	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005298:	b29b      	uxth	r3, r3
 800529a:	2b00      	cmp	r3, #0
 800529c:	d121      	bne.n	80052e2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a12      	ldr	r2, [pc, #72]	; (80052ec <I2SEx_RxISR_I2SExt+0x90>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d101      	bne.n	80052ac <I2SEx_RxISR_I2SExt+0x50>
 80052a8:	4b11      	ldr	r3, [pc, #68]	; (80052f0 <I2SEx_RxISR_I2SExt+0x94>)
 80052aa:	e001      	b.n	80052b0 <I2SEx_RxISR_I2SExt+0x54>
 80052ac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052b0:	685a      	ldr	r2, [r3, #4]
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	490d      	ldr	r1, [pc, #52]	; (80052ec <I2SEx_RxISR_I2SExt+0x90>)
 80052b8:	428b      	cmp	r3, r1
 80052ba:	d101      	bne.n	80052c0 <I2SEx_RxISR_I2SExt+0x64>
 80052bc:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <I2SEx_RxISR_I2SExt+0x94>)
 80052be:	e001      	b.n	80052c4 <I2SEx_RxISR_I2SExt+0x68>
 80052c0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052c4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80052c8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052ce:	b29b      	uxth	r3, r3
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d106      	bne.n	80052e2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80052dc:	6878      	ldr	r0, [r7, #4]
 80052de:	f7ff ff03 	bl	80050e8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052e2:	bf00      	nop
 80052e4:	3708      	adds	r7, #8
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	40003800 	.word	0x40003800
 80052f0:	40003400 	.word	0x40003400

080052f4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80052f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052f6:	b08f      	sub	sp, #60	; 0x3c
 80052f8:	af0a      	add	r7, sp, #40	; 0x28
 80052fa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d101      	bne.n	8005306 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e10f      	b.n	8005526 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8005312:	b2db      	uxtb	r3, r3
 8005314:	2b00      	cmp	r3, #0
 8005316:	d106      	bne.n	8005326 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	2200      	movs	r2, #0
 800531c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f006 fe63 	bl	800bfec <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	2203      	movs	r2, #3
 800532a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005332:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005336:	2b00      	cmp	r3, #0
 8005338:	d102      	bne.n	8005340 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2200      	movs	r2, #0
 800533e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4618      	mov	r0, r3
 8005346:	f003 fce2 	bl	8008d0e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	603b      	str	r3, [r7, #0]
 8005350:	687e      	ldr	r6, [r7, #4]
 8005352:	466d      	mov	r5, sp
 8005354:	f106 0410 	add.w	r4, r6, #16
 8005358:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800535a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800535c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800535e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005360:	e894 0003 	ldmia.w	r4, {r0, r1}
 8005364:	e885 0003 	stmia.w	r5, {r0, r1}
 8005368:	1d33      	adds	r3, r6, #4
 800536a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800536c:	6838      	ldr	r0, [r7, #0]
 800536e:	f003 fbb9 	bl	8008ae4 <USB_CoreInit>
 8005372:	4603      	mov	r3, r0
 8005374:	2b00      	cmp	r3, #0
 8005376:	d005      	beq.n	8005384 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2202      	movs	r2, #2
 800537c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0d0      	b.n	8005526 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2100      	movs	r1, #0
 800538a:	4618      	mov	r0, r3
 800538c:	f003 fcd0 	bl	8008d30 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005390:	2300      	movs	r3, #0
 8005392:	73fb      	strb	r3, [r7, #15]
 8005394:	e04a      	b.n	800542c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005396:	7bfa      	ldrb	r2, [r7, #15]
 8005398:	6879      	ldr	r1, [r7, #4]
 800539a:	4613      	mov	r3, r2
 800539c:	00db      	lsls	r3, r3, #3
 800539e:	4413      	add	r3, r2
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	440b      	add	r3, r1
 80053a4:	333d      	adds	r3, #61	; 0x3d
 80053a6:	2201      	movs	r2, #1
 80053a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80053aa:	7bfa      	ldrb	r2, [r7, #15]
 80053ac:	6879      	ldr	r1, [r7, #4]
 80053ae:	4613      	mov	r3, r2
 80053b0:	00db      	lsls	r3, r3, #3
 80053b2:	4413      	add	r3, r2
 80053b4:	009b      	lsls	r3, r3, #2
 80053b6:	440b      	add	r3, r1
 80053b8:	333c      	adds	r3, #60	; 0x3c
 80053ba:	7bfa      	ldrb	r2, [r7, #15]
 80053bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80053be:	7bfa      	ldrb	r2, [r7, #15]
 80053c0:	7bfb      	ldrb	r3, [r7, #15]
 80053c2:	b298      	uxth	r0, r3
 80053c4:	6879      	ldr	r1, [r7, #4]
 80053c6:	4613      	mov	r3, r2
 80053c8:	00db      	lsls	r3, r3, #3
 80053ca:	4413      	add	r3, r2
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	440b      	add	r3, r1
 80053d0:	3344      	adds	r3, #68	; 0x44
 80053d2:	4602      	mov	r2, r0
 80053d4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80053d6:	7bfa      	ldrb	r2, [r7, #15]
 80053d8:	6879      	ldr	r1, [r7, #4]
 80053da:	4613      	mov	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	4413      	add	r3, r2
 80053e0:	009b      	lsls	r3, r3, #2
 80053e2:	440b      	add	r3, r1
 80053e4:	3340      	adds	r3, #64	; 0x40
 80053e6:	2200      	movs	r2, #0
 80053e8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80053ea:	7bfa      	ldrb	r2, [r7, #15]
 80053ec:	6879      	ldr	r1, [r7, #4]
 80053ee:	4613      	mov	r3, r2
 80053f0:	00db      	lsls	r3, r3, #3
 80053f2:	4413      	add	r3, r2
 80053f4:	009b      	lsls	r3, r3, #2
 80053f6:	440b      	add	r3, r1
 80053f8:	3348      	adds	r3, #72	; 0x48
 80053fa:	2200      	movs	r2, #0
 80053fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80053fe:	7bfa      	ldrb	r2, [r7, #15]
 8005400:	6879      	ldr	r1, [r7, #4]
 8005402:	4613      	mov	r3, r2
 8005404:	00db      	lsls	r3, r3, #3
 8005406:	4413      	add	r3, r2
 8005408:	009b      	lsls	r3, r3, #2
 800540a:	440b      	add	r3, r1
 800540c:	334c      	adds	r3, #76	; 0x4c
 800540e:	2200      	movs	r2, #0
 8005410:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005412:	7bfa      	ldrb	r2, [r7, #15]
 8005414:	6879      	ldr	r1, [r7, #4]
 8005416:	4613      	mov	r3, r2
 8005418:	00db      	lsls	r3, r3, #3
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	440b      	add	r3, r1
 8005420:	3354      	adds	r3, #84	; 0x54
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005426:	7bfb      	ldrb	r3, [r7, #15]
 8005428:	3301      	adds	r3, #1
 800542a:	73fb      	strb	r3, [r7, #15]
 800542c:	7bfa      	ldrb	r2, [r7, #15]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	429a      	cmp	r2, r3
 8005434:	d3af      	bcc.n	8005396 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
 800543a:	e044      	b.n	80054c6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800543c:	7bfa      	ldrb	r2, [r7, #15]
 800543e:	6879      	ldr	r1, [r7, #4]
 8005440:	4613      	mov	r3, r2
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	4413      	add	r3, r2
 8005446:	009b      	lsls	r3, r3, #2
 8005448:	440b      	add	r3, r1
 800544a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800544e:	2200      	movs	r2, #0
 8005450:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005452:	7bfa      	ldrb	r2, [r7, #15]
 8005454:	6879      	ldr	r1, [r7, #4]
 8005456:	4613      	mov	r3, r2
 8005458:	00db      	lsls	r3, r3, #3
 800545a:	4413      	add	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	440b      	add	r3, r1
 8005460:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8005464:	7bfa      	ldrb	r2, [r7, #15]
 8005466:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005468:	7bfa      	ldrb	r2, [r7, #15]
 800546a:	6879      	ldr	r1, [r7, #4]
 800546c:	4613      	mov	r3, r2
 800546e:	00db      	lsls	r3, r3, #3
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	440b      	add	r3, r1
 8005476:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800547a:	2200      	movs	r2, #0
 800547c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800547e:	7bfa      	ldrb	r2, [r7, #15]
 8005480:	6879      	ldr	r1, [r7, #4]
 8005482:	4613      	mov	r3, r2
 8005484:	00db      	lsls	r3, r3, #3
 8005486:	4413      	add	r3, r2
 8005488:	009b      	lsls	r3, r3, #2
 800548a:	440b      	add	r3, r1
 800548c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005494:	7bfa      	ldrb	r2, [r7, #15]
 8005496:	6879      	ldr	r1, [r7, #4]
 8005498:	4613      	mov	r3, r2
 800549a:	00db      	lsls	r3, r3, #3
 800549c:	4413      	add	r3, r2
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	440b      	add	r3, r1
 80054a2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80054a6:	2200      	movs	r2, #0
 80054a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80054aa:	7bfa      	ldrb	r2, [r7, #15]
 80054ac:	6879      	ldr	r1, [r7, #4]
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	4413      	add	r3, r2
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	440b      	add	r3, r1
 80054b8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80054bc:	2200      	movs	r2, #0
 80054be:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80054c0:	7bfb      	ldrb	r3, [r7, #15]
 80054c2:	3301      	adds	r3, #1
 80054c4:	73fb      	strb	r3, [r7, #15]
 80054c6:	7bfa      	ldrb	r2, [r7, #15]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	685b      	ldr	r3, [r3, #4]
 80054cc:	429a      	cmp	r2, r3
 80054ce:	d3b5      	bcc.n	800543c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	603b      	str	r3, [r7, #0]
 80054d6:	687e      	ldr	r6, [r7, #4]
 80054d8:	466d      	mov	r5, sp
 80054da:	f106 0410 	add.w	r4, r6, #16
 80054de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80054e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80054e6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80054ea:	e885 0003 	stmia.w	r5, {r0, r1}
 80054ee:	1d33      	adds	r3, r6, #4
 80054f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80054f2:	6838      	ldr	r0, [r7, #0]
 80054f4:	f003 fc68 	bl	8008dc8 <USB_DevInit>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d005      	beq.n	800550a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	2202      	movs	r2, #2
 8005502:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e00d      	b.n	8005526 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2201      	movs	r2, #1
 8005516:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	4618      	mov	r0, r3
 8005520:	f004 fdb7 	bl	800a092 <USB_DevDisconnect>

  return HAL_OK;
 8005524:	2300      	movs	r3, #0
}
 8005526:	4618      	mov	r0, r3
 8005528:	3714      	adds	r7, #20
 800552a:	46bd      	mov	sp, r7
 800552c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800552e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800552e:	b580      	push	{r7, lr}
 8005530:	b084      	sub	sp, #16
 8005532:	af00      	add	r7, sp, #0
 8005534:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005542:	2b01      	cmp	r3, #1
 8005544:	d101      	bne.n	800554a <HAL_PCD_Start+0x1c>
 8005546:	2302      	movs	r3, #2
 8005548:	e020      	b.n	800558c <HAL_PCD_Start+0x5e>
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2201      	movs	r2, #1
 800554e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005556:	2b01      	cmp	r3, #1
 8005558:	d109      	bne.n	800556e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800555e:	2b01      	cmp	r3, #1
 8005560:	d005      	beq.n	800556e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005566:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4618      	mov	r0, r3
 8005574:	f003 fbba 	bl	8008cec <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	4618      	mov	r0, r3
 800557e:	f004 fd67 	bl	800a050 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800558a:	2300      	movs	r3, #0
}
 800558c:	4618      	mov	r0, r3
 800558e:	3710      	adds	r7, #16
 8005590:	46bd      	mov	sp, r7
 8005592:	bd80      	pop	{r7, pc}

08005594 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005594:	b590      	push	{r4, r7, lr}
 8005596:	b08d      	sub	sp, #52	; 0x34
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055a2:	6a3b      	ldr	r3, [r7, #32]
 80055a4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4618      	mov	r0, r3
 80055ac:	f004 fe25 	bl	800a1fa <USB_GetMode>
 80055b0:	4603      	mov	r3, r0
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f040 848a 	bne.w	8005ecc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	4618      	mov	r0, r3
 80055be:	f004 fd89 	bl	800a0d4 <USB_ReadInterrupts>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	f000 8480 	beq.w	8005eca <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	0a1b      	lsrs	r3, r3, #8
 80055d4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	4618      	mov	r0, r3
 80055e4:	f004 fd76 	bl	800a0d4 <USB_ReadInterrupts>
 80055e8:	4603      	mov	r3, r0
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b02      	cmp	r3, #2
 80055f0:	d107      	bne.n	8005602 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	695a      	ldr	r2, [r3, #20]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f002 0202 	and.w	r2, r2, #2
 8005600:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4618      	mov	r0, r3
 8005608:	f004 fd64 	bl	800a0d4 <USB_ReadInterrupts>
 800560c:	4603      	mov	r3, r0
 800560e:	f003 0310 	and.w	r3, r3, #16
 8005612:	2b10      	cmp	r3, #16
 8005614:	d161      	bne.n	80056da <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 0210 	bic.w	r2, r2, #16
 8005624:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	6a1b      	ldr	r3, [r3, #32]
 800562a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800562c:	69bb      	ldr	r3, [r7, #24]
 800562e:	f003 020f 	and.w	r2, r3, #15
 8005632:	4613      	mov	r3, r2
 8005634:	00db      	lsls	r3, r3, #3
 8005636:	4413      	add	r3, r2
 8005638:	009b      	lsls	r3, r3, #2
 800563a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	4413      	add	r3, r2
 8005642:	3304      	adds	r3, #4
 8005644:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8005646:	69bb      	ldr	r3, [r7, #24]
 8005648:	0c5b      	lsrs	r3, r3, #17
 800564a:	f003 030f 	and.w	r3, r3, #15
 800564e:	2b02      	cmp	r3, #2
 8005650:	d124      	bne.n	800569c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005652:	69ba      	ldr	r2, [r7, #24]
 8005654:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8005658:	4013      	ands	r3, r2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d035      	beq.n	80056ca <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005662:	69bb      	ldr	r3, [r7, #24]
 8005664:	091b      	lsrs	r3, r3, #4
 8005666:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005668:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800566c:	b29b      	uxth	r3, r3
 800566e:	461a      	mov	r2, r3
 8005670:	6a38      	ldr	r0, [r7, #32]
 8005672:	f004 fb9b 	bl	8009dac <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	691a      	ldr	r2, [r3, #16]
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	091b      	lsrs	r3, r3, #4
 800567e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005682:	441a      	add	r2, r3
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	6a1a      	ldr	r2, [r3, #32]
 800568c:	69bb      	ldr	r3, [r7, #24]
 800568e:	091b      	lsrs	r3, r3, #4
 8005690:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005694:	441a      	add	r2, r3
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	621a      	str	r2, [r3, #32]
 800569a:	e016      	b.n	80056ca <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800569c:	69bb      	ldr	r3, [r7, #24]
 800569e:	0c5b      	lsrs	r3, r3, #17
 80056a0:	f003 030f 	and.w	r3, r3, #15
 80056a4:	2b06      	cmp	r3, #6
 80056a6:	d110      	bne.n	80056ca <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80056ae:	2208      	movs	r2, #8
 80056b0:	4619      	mov	r1, r3
 80056b2:	6a38      	ldr	r0, [r7, #32]
 80056b4:	f004 fb7a 	bl	8009dac <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80056b8:	697b      	ldr	r3, [r7, #20]
 80056ba:	6a1a      	ldr	r2, [r3, #32]
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	091b      	lsrs	r3, r3, #4
 80056c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80056c4:	441a      	add	r2, r3
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	699a      	ldr	r2, [r3, #24]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0210 	orr.w	r2, r2, #16
 80056d8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4618      	mov	r0, r3
 80056e0:	f004 fcf8 	bl	800a0d4 <USB_ReadInterrupts>
 80056e4:	4603      	mov	r3, r0
 80056e6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056ea:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80056ee:	f040 80a7 	bne.w	8005840 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80056f2:	2300      	movs	r3, #0
 80056f4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f004 fcfd 	bl	800a0fa <USB_ReadDevAllOutEpInterrupt>
 8005700:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8005702:	e099      	b.n	8005838 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8005704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	f000 808e 	beq.w	800582c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	4611      	mov	r1, r2
 800571a:	4618      	mov	r0, r3
 800571c:	f004 fd21 	bl	800a162 <USB_ReadDevOutEPInterrupt>
 8005720:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	f003 0301 	and.w	r3, r3, #1
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00c      	beq.n	8005746 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	015a      	lsls	r2, r3, #5
 8005730:	69fb      	ldr	r3, [r7, #28]
 8005732:	4413      	add	r3, r2
 8005734:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005738:	461a      	mov	r2, r3
 800573a:	2301      	movs	r3, #1
 800573c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800573e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005740:	6878      	ldr	r0, [r7, #4]
 8005742:	f000 feab 	bl	800649c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	f003 0308 	and.w	r3, r3, #8
 800574c:	2b00      	cmp	r3, #0
 800574e:	d00c      	beq.n	800576a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	015a      	lsls	r2, r3, #5
 8005754:	69fb      	ldr	r3, [r7, #28]
 8005756:	4413      	add	r3, r2
 8005758:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800575c:	461a      	mov	r2, r3
 800575e:	2308      	movs	r3, #8
 8005760:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005762:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f000 ff81 	bl	800666c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800576a:	693b      	ldr	r3, [r7, #16]
 800576c:	f003 0310 	and.w	r3, r3, #16
 8005770:	2b00      	cmp	r3, #0
 8005772:	d008      	beq.n	8005786 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8005774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	69fb      	ldr	r3, [r7, #28]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005780:	461a      	mov	r2, r3
 8005782:	2310      	movs	r3, #16
 8005784:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8005786:	693b      	ldr	r3, [r7, #16]
 8005788:	f003 0302 	and.w	r3, r3, #2
 800578c:	2b00      	cmp	r3, #0
 800578e:	d030      	beq.n	80057f2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	695b      	ldr	r3, [r3, #20]
 8005794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005798:	2b80      	cmp	r3, #128	; 0x80
 800579a:	d109      	bne.n	80057b0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057a2:	685b      	ldr	r3, [r3, #4]
 80057a4:	69fa      	ldr	r2, [r7, #28]
 80057a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057aa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ae:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80057b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057b2:	4613      	mov	r3, r2
 80057b4:	00db      	lsls	r3, r3, #3
 80057b6:	4413      	add	r3, r2
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80057be:	687a      	ldr	r2, [r7, #4]
 80057c0:	4413      	add	r3, r2
 80057c2:	3304      	adds	r3, #4
 80057c4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	78db      	ldrb	r3, [r3, #3]
 80057ca:	2b01      	cmp	r3, #1
 80057cc:	d108      	bne.n	80057e0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2200      	movs	r2, #0
 80057d2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80057d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	4619      	mov	r1, r3
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f006 fd10 	bl	800c200 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80057e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e2:	015a      	lsls	r2, r3, #5
 80057e4:	69fb      	ldr	r3, [r7, #28]
 80057e6:	4413      	add	r3, r2
 80057e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ec:	461a      	mov	r2, r3
 80057ee:	2302      	movs	r3, #2
 80057f0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80057f2:	693b      	ldr	r3, [r7, #16]
 80057f4:	f003 0320 	and.w	r3, r3, #32
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d008      	beq.n	800580e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80057fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057fe:	015a      	lsls	r2, r3, #5
 8005800:	69fb      	ldr	r3, [r7, #28]
 8005802:	4413      	add	r3, r2
 8005804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005808:	461a      	mov	r2, r3
 800580a:	2320      	movs	r3, #32
 800580c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800580e:	693b      	ldr	r3, [r7, #16]
 8005810:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d009      	beq.n	800582c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8005818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800581a:	015a      	lsls	r2, r3, #5
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	4413      	add	r3, r2
 8005820:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005824:	461a      	mov	r2, r3
 8005826:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800582a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800582c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582e:	3301      	adds	r3, #1
 8005830:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005834:	085b      	lsrs	r3, r3, #1
 8005836:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583a:	2b00      	cmp	r3, #0
 800583c:	f47f af62 	bne.w	8005704 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	4618      	mov	r0, r3
 8005846:	f004 fc45 	bl	800a0d4 <USB_ReadInterrupts>
 800584a:	4603      	mov	r3, r0
 800584c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005850:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005854:	f040 80db 	bne.w	8005a0e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f004 fc66 	bl	800a12e <USB_ReadDevAllInEpInterrupt>
 8005862:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8005864:	2300      	movs	r3, #0
 8005866:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8005868:	e0cd      	b.n	8005a06 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800586a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586c:	f003 0301 	and.w	r3, r3, #1
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 80c2 	beq.w	80059fa <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587c:	b2d2      	uxtb	r2, r2
 800587e:	4611      	mov	r1, r2
 8005880:	4618      	mov	r0, r3
 8005882:	f004 fc8c 	bl	800a19e <USB_ReadDevInEPInterrupt>
 8005886:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	f003 0301 	and.w	r3, r3, #1
 800588e:	2b00      	cmp	r3, #0
 8005890:	d057      	beq.n	8005942 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	f003 030f 	and.w	r3, r3, #15
 8005898:	2201      	movs	r2, #1
 800589a:	fa02 f303 	lsl.w	r3, r2, r3
 800589e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	43db      	mvns	r3, r3
 80058ac:	69f9      	ldr	r1, [r7, #28]
 80058ae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80058b2:	4013      	ands	r3, r2
 80058b4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80058b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b8:	015a      	lsls	r2, r3, #5
 80058ba:	69fb      	ldr	r3, [r7, #28]
 80058bc:	4413      	add	r3, r2
 80058be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c2:	461a      	mov	r2, r3
 80058c4:	2301      	movs	r3, #1
 80058c6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	691b      	ldr	r3, [r3, #16]
 80058cc:	2b01      	cmp	r3, #1
 80058ce:	d132      	bne.n	8005936 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80058d0:	6879      	ldr	r1, [r7, #4]
 80058d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d4:	4613      	mov	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	440b      	add	r3, r1
 80058de:	334c      	adds	r3, #76	; 0x4c
 80058e0:	6819      	ldr	r1, [r3, #0]
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058e6:	4613      	mov	r3, r2
 80058e8:	00db      	lsls	r3, r3, #3
 80058ea:	4413      	add	r3, r2
 80058ec:	009b      	lsls	r3, r3, #2
 80058ee:	4403      	add	r3, r0
 80058f0:	3348      	adds	r3, #72	; 0x48
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4419      	add	r1, r3
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058fa:	4613      	mov	r3, r2
 80058fc:	00db      	lsls	r3, r3, #3
 80058fe:	4413      	add	r3, r2
 8005900:	009b      	lsls	r3, r3, #2
 8005902:	4403      	add	r3, r0
 8005904:	334c      	adds	r3, #76	; 0x4c
 8005906:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	2b00      	cmp	r3, #0
 800590c:	d113      	bne.n	8005936 <HAL_PCD_IRQHandler+0x3a2>
 800590e:	6879      	ldr	r1, [r7, #4]
 8005910:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005912:	4613      	mov	r3, r2
 8005914:	00db      	lsls	r3, r3, #3
 8005916:	4413      	add	r3, r2
 8005918:	009b      	lsls	r3, r3, #2
 800591a:	440b      	add	r3, r1
 800591c:	3354      	adds	r3, #84	; 0x54
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	d108      	bne.n	8005936 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6818      	ldr	r0, [r3, #0]
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800592e:	461a      	mov	r2, r3
 8005930:	2101      	movs	r1, #1
 8005932:	f004 fc93 	bl	800a25c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8005936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005938:	b2db      	uxtb	r3, r3
 800593a:	4619      	mov	r1, r3
 800593c:	6878      	ldr	r0, [r7, #4]
 800593e:	f006 fbe4 	bl	800c10a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d008      	beq.n	800595e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800594c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594e:	015a      	lsls	r2, r3, #5
 8005950:	69fb      	ldr	r3, [r7, #28]
 8005952:	4413      	add	r3, r2
 8005954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005958:	461a      	mov	r2, r3
 800595a:	2308      	movs	r3, #8
 800595c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	f003 0310 	and.w	r3, r3, #16
 8005964:	2b00      	cmp	r3, #0
 8005966:	d008      	beq.n	800597a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8005968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	69fb      	ldr	r3, [r7, #28]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005974:	461a      	mov	r2, r3
 8005976:	2310      	movs	r3, #16
 8005978:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800597a:	693b      	ldr	r3, [r7, #16]
 800597c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005980:	2b00      	cmp	r3, #0
 8005982:	d008      	beq.n	8005996 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8005984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	69fb      	ldr	r3, [r7, #28]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	461a      	mov	r2, r3
 8005992:	2340      	movs	r3, #64	; 0x40
 8005994:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8005996:	693b      	ldr	r3, [r7, #16]
 8005998:	f003 0302 	and.w	r3, r3, #2
 800599c:	2b00      	cmp	r3, #0
 800599e:	d023      	beq.n	80059e8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80059a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059a2:	6a38      	ldr	r0, [r7, #32]
 80059a4:	f003 fb74 	bl	8009090 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80059a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80059aa:	4613      	mov	r3, r2
 80059ac:	00db      	lsls	r3, r3, #3
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	3338      	adds	r3, #56	; 0x38
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	4413      	add	r3, r2
 80059b8:	3304      	adds	r3, #4
 80059ba:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80059bc:	697b      	ldr	r3, [r7, #20]
 80059be:	78db      	ldrb	r3, [r3, #3]
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d108      	bne.n	80059d6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	2200      	movs	r2, #0
 80059c8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059cc:	b2db      	uxtb	r3, r3
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f006 fc27 	bl	800c224 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80059d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059e2:	461a      	mov	r2, r3
 80059e4:	2302      	movs	r3, #2
 80059e6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d003      	beq.n	80059fa <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80059f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059f4:	6878      	ldr	r0, [r7, #4]
 80059f6:	f000 fcc3 	bl	8006380 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80059fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059fc:	3301      	adds	r3, #1
 80059fe:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	085b      	lsrs	r3, r3, #1
 8005a04:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8005a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	f47f af2e 	bne.w	800586a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	4618      	mov	r0, r3
 8005a14:	f004 fb5e 	bl	800a0d4 <USB_ReadInterrupts>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a1e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a22:	d122      	bne.n	8005a6a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	69fa      	ldr	r2, [r7, #28]
 8005a2e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a32:	f023 0301 	bic.w	r3, r3, #1
 8005a36:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d108      	bne.n	8005a54 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005a4a:	2100      	movs	r1, #0
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 feab 	bl	80067a8 <HAL_PCDEx_LPM_Callback>
 8005a52:	e002      	b.n	8005a5a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005a54:	6878      	ldr	r0, [r7, #4]
 8005a56:	f006 fbc5 	bl	800c1e4 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695a      	ldr	r2, [r3, #20]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8005a68:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f004 fb30 	bl	800a0d4 <USB_ReadInterrupts>
 8005a74:	4603      	mov	r3, r0
 8005a76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005a7e:	d112      	bne.n	8005aa6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8005a80:	69fb      	ldr	r3, [r7, #28]
 8005a82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f003 0301 	and.w	r3, r3, #1
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d102      	bne.n	8005a96 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8005a90:	6878      	ldr	r0, [r7, #4]
 8005a92:	f006 fb81 	bl	800c198 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	695a      	ldr	r2, [r3, #20]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8005aa4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f004 fb12 	bl	800a0d4 <USB_ReadInterrupts>
 8005ab0:	4603      	mov	r3, r0
 8005ab2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ab6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005aba:	f040 80b7 	bne.w	8005c2c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac4:	685b      	ldr	r3, [r3, #4]
 8005ac6:	69fa      	ldr	r2, [r7, #28]
 8005ac8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005acc:	f023 0301 	bic.w	r3, r3, #1
 8005ad0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	2110      	movs	r1, #16
 8005ad8:	4618      	mov	r0, r3
 8005ada:	f003 fad9 	bl	8009090 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005ade:	2300      	movs	r3, #0
 8005ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ae2:	e046      	b.n	8005b72 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ae6:	015a      	lsls	r2, r3, #5
 8005ae8:	69fb      	ldr	r3, [r7, #28]
 8005aea:	4413      	add	r3, r2
 8005aec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005af0:	461a      	mov	r2, r3
 8005af2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005af6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005afa:	015a      	lsls	r2, r3, #5
 8005afc:	69fb      	ldr	r3, [r7, #28]
 8005afe:	4413      	add	r3, r2
 8005b00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b08:	0151      	lsls	r1, r2, #5
 8005b0a:	69fa      	ldr	r2, [r7, #28]
 8005b0c:	440a      	add	r2, r1
 8005b0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b16:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8005b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b1a:	015a      	lsls	r2, r3, #5
 8005b1c:	69fb      	ldr	r3, [r7, #28]
 8005b1e:	4413      	add	r3, r2
 8005b20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b24:	461a      	mov	r2, r3
 8005b26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005b2a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b2e:	015a      	lsls	r2, r3, #5
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	4413      	add	r3, r2
 8005b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b3c:	0151      	lsls	r1, r2, #5
 8005b3e:	69fa      	ldr	r2, [r7, #28]
 8005b40:	440a      	add	r2, r1
 8005b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005b4a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b4e:	015a      	lsls	r2, r3, #5
 8005b50:	69fb      	ldr	r3, [r7, #28]
 8005b52:	4413      	add	r3, r2
 8005b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b5c:	0151      	lsls	r1, r2, #5
 8005b5e:	69fa      	ldr	r2, [r7, #28]
 8005b60:	440a      	add	r2, r1
 8005b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b66:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005b6a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005b6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b6e:	3301      	adds	r3, #1
 8005b70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d3b3      	bcc.n	8005ae4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8005b7c:	69fb      	ldr	r3, [r7, #28]
 8005b7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b82:	69db      	ldr	r3, [r3, #28]
 8005b84:	69fa      	ldr	r2, [r7, #28]
 8005b86:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b8a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8005b8e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d016      	beq.n	8005bc6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005ba2:	69fa      	ldr	r2, [r7, #28]
 8005ba4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ba8:	f043 030b 	orr.w	r3, r3, #11
 8005bac:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8005bb0:	69fb      	ldr	r3, [r7, #28]
 8005bb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bb8:	69fa      	ldr	r2, [r7, #28]
 8005bba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bbe:	f043 030b 	orr.w	r3, r3, #11
 8005bc2:	6453      	str	r3, [r2, #68]	; 0x44
 8005bc4:	e015      	b.n	8005bf2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8005bc6:	69fb      	ldr	r3, [r7, #28]
 8005bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	69fa      	ldr	r2, [r7, #28]
 8005bd0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bd4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005bd8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8005bdc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005bde:	69fb      	ldr	r3, [r7, #28]
 8005be0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be4:	691b      	ldr	r3, [r3, #16]
 8005be6:	69fa      	ldr	r2, [r7, #28]
 8005be8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005bec:	f043 030b 	orr.w	r3, r3, #11
 8005bf0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	69fa      	ldr	r2, [r7, #28]
 8005bfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c00:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005c04:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	691b      	ldr	r3, [r3, #16]
 8005c0e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005c16:	461a      	mov	r2, r3
 8005c18:	f004 fb20 	bl	800a25c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	695a      	ldr	r2, [r3, #20]
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8005c2a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4618      	mov	r0, r3
 8005c32:	f004 fa4f 	bl	800a0d4 <USB_ReadInterrupts>
 8005c36:	4603      	mov	r3, r0
 8005c38:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005c3c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005c40:	d124      	bne.n	8005c8c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	4618      	mov	r0, r3
 8005c48:	f004 fae5 	bl	800a216 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f003 fa9a 	bl	800918a <USB_GetDevSpeed>
 8005c56:	4603      	mov	r3, r0
 8005c58:	461a      	mov	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681c      	ldr	r4, [r3, #0]
 8005c62:	f001 fa11 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 8005c66:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	461a      	mov	r2, r3
 8005c70:	4620      	mov	r0, r4
 8005c72:	f002 ff99 	bl	8008ba8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f006 fa6f 	bl	800c15a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	695a      	ldr	r2, [r3, #20]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8005c8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	4618      	mov	r0, r3
 8005c92:	f004 fa1f 	bl	800a0d4 <USB_ReadInterrupts>
 8005c96:	4603      	mov	r3, r0
 8005c98:	f003 0308 	and.w	r3, r3, #8
 8005c9c:	2b08      	cmp	r3, #8
 8005c9e:	d10a      	bne.n	8005cb6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8005ca0:	6878      	ldr	r0, [r7, #4]
 8005ca2:	f006 fa4c 	bl	800c13e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	695a      	ldr	r2, [r3, #20]
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	f002 0208 	and.w	r2, r2, #8
 8005cb4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f004 fa0a 	bl	800a0d4 <USB_ReadInterrupts>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cc6:	2b80      	cmp	r3, #128	; 0x80
 8005cc8:	d122      	bne.n	8005d10 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8005cca:	6a3b      	ldr	r3, [r7, #32]
 8005ccc:	699b      	ldr	r3, [r3, #24]
 8005cce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005cd2:	6a3b      	ldr	r3, [r7, #32]
 8005cd4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e014      	b.n	8005d06 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005cdc:	6879      	ldr	r1, [r7, #4]
 8005cde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	00db      	lsls	r3, r3, #3
 8005ce4:	4413      	add	r3, r2
 8005ce6:	009b      	lsls	r3, r3, #2
 8005ce8:	440b      	add	r3, r1
 8005cea:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005cee:	781b      	ldrb	r3, [r3, #0]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d105      	bne.n	8005d00 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cf6:	b2db      	uxtb	r3, r3
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 fb0f 	bl	800631e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d02:	3301      	adds	r3, #1
 8005d04:	627b      	str	r3, [r7, #36]	; 0x24
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	685b      	ldr	r3, [r3, #4]
 8005d0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d3e5      	bcc.n	8005cdc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f004 f9dd 	bl	800a0d4 <USB_ReadInterrupts>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005d24:	d13b      	bne.n	8005d9e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d26:	2301      	movs	r3, #1
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2a:	e02b      	b.n	8005d84 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d3c:	6879      	ldr	r1, [r7, #4]
 8005d3e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d40:	4613      	mov	r3, r2
 8005d42:	00db      	lsls	r3, r3, #3
 8005d44:	4413      	add	r3, r2
 8005d46:	009b      	lsls	r3, r3, #2
 8005d48:	440b      	add	r3, r1
 8005d4a:	3340      	adds	r3, #64	; 0x40
 8005d4c:	781b      	ldrb	r3, [r3, #0]
 8005d4e:	2b01      	cmp	r3, #1
 8005d50:	d115      	bne.n	8005d7e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005d52:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	da12      	bge.n	8005d7e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8005d58:	6879      	ldr	r1, [r7, #4]
 8005d5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	00db      	lsls	r3, r3, #3
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	333f      	adds	r3, #63	; 0x3f
 8005d68:	2201      	movs	r2, #1
 8005d6a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8005d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005d74:	b2db      	uxtb	r3, r3
 8005d76:	4619      	mov	r1, r3
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fad0 	bl	800631e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d80:	3301      	adds	r3, #1
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	685b      	ldr	r3, [r3, #4]
 8005d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d3ce      	bcc.n	8005d2c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	695a      	ldr	r2, [r3, #20]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8005d9c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	4618      	mov	r0, r3
 8005da4:	f004 f996 	bl	800a0d4 <USB_ReadInterrupts>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dae:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005db2:	d155      	bne.n	8005e60 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005db4:	2301      	movs	r3, #1
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	e045      	b.n	8005e46 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8005dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dbc:	015a      	lsls	r2, r3, #5
 8005dbe:	69fb      	ldr	r3, [r7, #28]
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d12e      	bne.n	8005e40 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005de2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	da2b      	bge.n	8005e40 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8005df4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005df8:	429a      	cmp	r2, r3
 8005dfa:	d121      	bne.n	8005e40 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005dfc:	6879      	ldr	r1, [r7, #4]
 8005dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e00:	4613      	mov	r3, r2
 8005e02:	00db      	lsls	r3, r3, #3
 8005e04:	4413      	add	r3, r2
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	440b      	add	r3, r1
 8005e0a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8005e0e:	2201      	movs	r2, #1
 8005e10:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8005e1a:	6a3b      	ldr	r3, [r7, #32]
 8005e1c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005e1e:	6a3b      	ldr	r3, [r7, #32]
 8005e20:	695b      	ldr	r3, [r3, #20]
 8005e22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10a      	bne.n	8005e40 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005e2a:	69fb      	ldr	r3, [r7, #28]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e30:	685b      	ldr	r3, [r3, #4]
 8005e32:	69fa      	ldr	r2, [r7, #28]
 8005e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005e3c:	6053      	str	r3, [r2, #4]
            break;
 8005e3e:	e007      	b.n	8005e50 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	3301      	adds	r3, #1
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	685b      	ldr	r3, [r3, #4]
 8005e4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d3b4      	bcc.n	8005dba <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	695a      	ldr	r2, [r3, #20]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8005e5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4618      	mov	r0, r3
 8005e66:	f004 f935 	bl	800a0d4 <USB_ReadInterrupts>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e74:	d10a      	bne.n	8005e8c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8005e76:	6878      	ldr	r0, [r7, #4]
 8005e78:	f006 f9e6 	bl	800c248 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	695a      	ldr	r2, [r3, #20]
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005e8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f004 f91f 	bl	800a0d4 <USB_ReadInterrupts>
 8005e96:	4603      	mov	r3, r0
 8005e98:	f003 0304 	and.w	r3, r3, #4
 8005e9c:	2b04      	cmp	r3, #4
 8005e9e:	d115      	bne.n	8005ecc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	685b      	ldr	r3, [r3, #4]
 8005ea6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8005ea8:	69bb      	ldr	r3, [r7, #24]
 8005eaa:	f003 0304 	and.w	r3, r3, #4
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8005eb2:	6878      	ldr	r0, [r7, #4]
 8005eb4:	f006 f9d6 	bl	800c264 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	6859      	ldr	r1, [r3, #4]
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	69ba      	ldr	r2, [r7, #24]
 8005ec4:	430a      	orrs	r2, r1
 8005ec6:	605a      	str	r2, [r3, #4]
 8005ec8:	e000      	b.n	8005ecc <HAL_PCD_IRQHandler+0x938>
      return;
 8005eca:	bf00      	nop
    }
  }
}
 8005ecc:	3734      	adds	r7, #52	; 0x34
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd90      	pop	{r4, r7, pc}

08005ed2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005ed2:	b580      	push	{r7, lr}
 8005ed4:	b082      	sub	sp, #8
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
 8005eda:	460b      	mov	r3, r1
 8005edc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005ee4:	2b01      	cmp	r3, #1
 8005ee6:	d101      	bne.n	8005eec <HAL_PCD_SetAddress+0x1a>
 8005ee8:	2302      	movs	r3, #2
 8005eea:	e013      	b.n	8005f14 <HAL_PCD_SetAddress+0x42>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2201      	movs	r2, #1
 8005ef0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	78fa      	ldrb	r2, [r7, #3]
 8005ef8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	4611      	mov	r1, r2
 8005f04:	4618      	mov	r0, r3
 8005f06:	f004 f87d 	bl	800a004 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8005f12:	2300      	movs	r3, #0
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3708      	adds	r7, #8
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bd80      	pop	{r7, pc}

08005f1c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	4608      	mov	r0, r1
 8005f26:	4611      	mov	r1, r2
 8005f28:	461a      	mov	r2, r3
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	70fb      	strb	r3, [r7, #3]
 8005f2e:	460b      	mov	r3, r1
 8005f30:	803b      	strh	r3, [r7, #0]
 8005f32:	4613      	mov	r3, r2
 8005f34:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005f3a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	da0f      	bge.n	8005f62 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005f42:	78fb      	ldrb	r3, [r7, #3]
 8005f44:	f003 020f 	and.w	r2, r3, #15
 8005f48:	4613      	mov	r3, r2
 8005f4a:	00db      	lsls	r3, r3, #3
 8005f4c:	4413      	add	r3, r2
 8005f4e:	009b      	lsls	r3, r3, #2
 8005f50:	3338      	adds	r3, #56	; 0x38
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	4413      	add	r3, r2
 8005f56:	3304      	adds	r3, #4
 8005f58:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	2201      	movs	r2, #1
 8005f5e:	705a      	strb	r2, [r3, #1]
 8005f60:	e00f      	b.n	8005f82 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005f62:	78fb      	ldrb	r3, [r7, #3]
 8005f64:	f003 020f 	and.w	r2, r3, #15
 8005f68:	4613      	mov	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	4413      	add	r3, r2
 8005f6e:	009b      	lsls	r3, r3, #2
 8005f70:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005f74:	687a      	ldr	r2, [r7, #4]
 8005f76:	4413      	add	r3, r2
 8005f78:	3304      	adds	r3, #4
 8005f7a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005f82:	78fb      	ldrb	r3, [r7, #3]
 8005f84:	f003 030f 	and.w	r3, r3, #15
 8005f88:	b2da      	uxtb	r2, r3
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8005f8e:	883a      	ldrh	r2, [r7, #0]
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	78ba      	ldrb	r2, [r7, #2]
 8005f98:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	785b      	ldrb	r3, [r3, #1]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d004      	beq.n	8005fac <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005fac:	78bb      	ldrb	r3, [r7, #2]
 8005fae:	2b02      	cmp	r3, #2
 8005fb0:	d102      	bne.n	8005fb8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d101      	bne.n	8005fc6 <HAL_PCD_EP_Open+0xaa>
 8005fc2:	2302      	movs	r3, #2
 8005fc4:	e00e      	b.n	8005fe4 <HAL_PCD_EP_Open+0xc8>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2201      	movs	r2, #1
 8005fca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	f003 f8fd 	bl	80091d4 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8005fe2:	7afb      	ldrb	r3, [r7, #11]
}
 8005fe4:	4618      	mov	r0, r3
 8005fe6:	3710      	adds	r7, #16
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	bd80      	pop	{r7, pc}

08005fec <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	b084      	sub	sp, #16
 8005ff0:	af00      	add	r7, sp, #0
 8005ff2:	6078      	str	r0, [r7, #4]
 8005ff4:	460b      	mov	r3, r1
 8005ff6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005ff8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	da0f      	bge.n	8006020 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006000:	78fb      	ldrb	r3, [r7, #3]
 8006002:	f003 020f 	and.w	r2, r3, #15
 8006006:	4613      	mov	r3, r2
 8006008:	00db      	lsls	r3, r3, #3
 800600a:	4413      	add	r3, r2
 800600c:	009b      	lsls	r3, r3, #2
 800600e:	3338      	adds	r3, #56	; 0x38
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	4413      	add	r3, r2
 8006014:	3304      	adds	r3, #4
 8006016:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2201      	movs	r2, #1
 800601c:	705a      	strb	r2, [r3, #1]
 800601e:	e00f      	b.n	8006040 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006020:	78fb      	ldrb	r3, [r7, #3]
 8006022:	f003 020f 	and.w	r2, r3, #15
 8006026:	4613      	mov	r3, r2
 8006028:	00db      	lsls	r3, r3, #3
 800602a:	4413      	add	r3, r2
 800602c:	009b      	lsls	r3, r3, #2
 800602e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	4413      	add	r3, r2
 8006036:	3304      	adds	r3, #4
 8006038:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006040:	78fb      	ldrb	r3, [r7, #3]
 8006042:	f003 030f 	and.w	r3, r3, #15
 8006046:	b2da      	uxtb	r2, r3
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006052:	2b01      	cmp	r3, #1
 8006054:	d101      	bne.n	800605a <HAL_PCD_EP_Close+0x6e>
 8006056:	2302      	movs	r3, #2
 8006058:	e00e      	b.n	8006078 <HAL_PCD_EP_Close+0x8c>
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2201      	movs	r2, #1
 800605e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68f9      	ldr	r1, [r7, #12]
 8006068:	4618      	mov	r0, r3
 800606a:	f003 f93b 	bl	80092e4 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8006076:	2300      	movs	r3, #0
}
 8006078:	4618      	mov	r0, r3
 800607a:	3710      	adds	r7, #16
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006080:	b580      	push	{r7, lr}
 8006082:	b086      	sub	sp, #24
 8006084:	af00      	add	r7, sp, #0
 8006086:	60f8      	str	r0, [r7, #12]
 8006088:	607a      	str	r2, [r7, #4]
 800608a:	603b      	str	r3, [r7, #0]
 800608c:	460b      	mov	r3, r1
 800608e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006090:	7afb      	ldrb	r3, [r7, #11]
 8006092:	f003 020f 	and.w	r2, r3, #15
 8006096:	4613      	mov	r3, r2
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	4413      	add	r3, r2
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4413      	add	r3, r2
 80060a6:	3304      	adds	r3, #4
 80060a8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	687a      	ldr	r2, [r7, #4]
 80060ae:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	683a      	ldr	r2, [r7, #0]
 80060b4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	2200      	movs	r2, #0
 80060ba:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80060bc:	697b      	ldr	r3, [r7, #20]
 80060be:	2200      	movs	r2, #0
 80060c0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80060c2:	7afb      	ldrb	r3, [r7, #11]
 80060c4:	f003 030f 	and.w	r3, r3, #15
 80060c8:	b2da      	uxtb	r2, r3
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	2b01      	cmp	r3, #1
 80060d4:	d102      	bne.n	80060dc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80060d6:	687a      	ldr	r2, [r7, #4]
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80060dc:	7afb      	ldrb	r3, [r7, #11]
 80060de:	f003 030f 	and.w	r3, r3, #15
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d109      	bne.n	80060fa <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	6818      	ldr	r0, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	691b      	ldr	r3, [r3, #16]
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	461a      	mov	r2, r3
 80060f2:	6979      	ldr	r1, [r7, #20]
 80060f4:	f003 fc1a 	bl	800992c <USB_EP0StartXfer>
 80060f8:	e008      	b.n	800610c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6818      	ldr	r0, [r3, #0]
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	691b      	ldr	r3, [r3, #16]
 8006102:	b2db      	uxtb	r3, r3
 8006104:	461a      	mov	r2, r3
 8006106:	6979      	ldr	r1, [r7, #20]
 8006108:	f003 f9c8 	bl	800949c <USB_EPStartXfer>
  }

  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3718      	adds	r7, #24
 8006112:	46bd      	mov	sp, r7
 8006114:	bd80      	pop	{r7, pc}

08006116 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8006116:	b580      	push	{r7, lr}
 8006118:	b086      	sub	sp, #24
 800611a:	af00      	add	r7, sp, #0
 800611c:	60f8      	str	r0, [r7, #12]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
 8006122:	460b      	mov	r3, r1
 8006124:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006126:	7afb      	ldrb	r3, [r7, #11]
 8006128:	f003 020f 	and.w	r2, r3, #15
 800612c:	4613      	mov	r3, r2
 800612e:	00db      	lsls	r3, r3, #3
 8006130:	4413      	add	r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	3338      	adds	r3, #56	; 0x38
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4413      	add	r3, r2
 800613a:	3304      	adds	r3, #4
 800613c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800613e:	697b      	ldr	r3, [r7, #20]
 8006140:	687a      	ldr	r2, [r7, #4]
 8006142:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8006144:	697b      	ldr	r3, [r7, #20]
 8006146:	683a      	ldr	r2, [r7, #0]
 8006148:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2200      	movs	r2, #0
 800614e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	2201      	movs	r2, #1
 8006154:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006156:	7afb      	ldrb	r3, [r7, #11]
 8006158:	f003 030f 	and.w	r3, r3, #15
 800615c:	b2da      	uxtb	r2, r3
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	691b      	ldr	r3, [r3, #16]
 8006166:	2b01      	cmp	r3, #1
 8006168:	d102      	bne.n	8006170 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800616a:	687a      	ldr	r2, [r7, #4]
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006170:	7afb      	ldrb	r3, [r7, #11]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	2b00      	cmp	r3, #0
 8006178:	d109      	bne.n	800618e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6818      	ldr	r0, [r3, #0]
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	b2db      	uxtb	r3, r3
 8006184:	461a      	mov	r2, r3
 8006186:	6979      	ldr	r1, [r7, #20]
 8006188:	f003 fbd0 	bl	800992c <USB_EP0StartXfer>
 800618c:	e008      	b.n	80061a0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6818      	ldr	r0, [r3, #0]
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	691b      	ldr	r3, [r3, #16]
 8006196:	b2db      	uxtb	r3, r3
 8006198:	461a      	mov	r2, r3
 800619a:	6979      	ldr	r1, [r7, #20]
 800619c:	f003 f97e 	bl	800949c <USB_EPStartXfer>
  }

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3718      	adds	r7, #24
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b084      	sub	sp, #16
 80061ae:	af00      	add	r7, sp, #0
 80061b0:	6078      	str	r0, [r7, #4]
 80061b2:	460b      	mov	r3, r1
 80061b4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80061b6:	78fb      	ldrb	r3, [r7, #3]
 80061b8:	f003 020f 	and.w	r2, r3, #15
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	429a      	cmp	r2, r3
 80061c2:	d901      	bls.n	80061c8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80061c4:	2301      	movs	r3, #1
 80061c6:	e050      	b.n	800626a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80061c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	da0f      	bge.n	80061f0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80061d0:	78fb      	ldrb	r3, [r7, #3]
 80061d2:	f003 020f 	and.w	r2, r3, #15
 80061d6:	4613      	mov	r3, r2
 80061d8:	00db      	lsls	r3, r3, #3
 80061da:	4413      	add	r3, r2
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	3338      	adds	r3, #56	; 0x38
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4413      	add	r3, r2
 80061e4:	3304      	adds	r3, #4
 80061e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	705a      	strb	r2, [r3, #1]
 80061ee:	e00d      	b.n	800620c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80061f0:	78fa      	ldrb	r2, [r7, #3]
 80061f2:	4613      	mov	r3, r2
 80061f4:	00db      	lsls	r3, r3, #3
 80061f6:	4413      	add	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80061fe:	687a      	ldr	r2, [r7, #4]
 8006200:	4413      	add	r3, r2
 8006202:	3304      	adds	r3, #4
 8006204:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2200      	movs	r2, #0
 800620a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	2201      	movs	r2, #1
 8006210:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006212:	78fb      	ldrb	r3, [r7, #3]
 8006214:	f003 030f 	and.w	r3, r3, #15
 8006218:	b2da      	uxtb	r2, r3
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8006224:	2b01      	cmp	r3, #1
 8006226:	d101      	bne.n	800622c <HAL_PCD_EP_SetStall+0x82>
 8006228:	2302      	movs	r3, #2
 800622a:	e01e      	b.n	800626a <HAL_PCD_EP_SetStall+0xc0>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68f9      	ldr	r1, [r7, #12]
 800623a:	4618      	mov	r0, r3
 800623c:	f003 fe0e 	bl	8009e5c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	f003 030f 	and.w	r3, r3, #15
 8006246:	2b00      	cmp	r3, #0
 8006248:	d10a      	bne.n	8006260 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6818      	ldr	r0, [r3, #0]
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	b2d9      	uxtb	r1, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800625a:	461a      	mov	r2, r3
 800625c:	f003 fffe 	bl	800a25c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006268:	2300      	movs	r3, #0
}
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006272:	b580      	push	{r7, lr}
 8006274:	b084      	sub	sp, #16
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
 800627a:	460b      	mov	r3, r1
 800627c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800627e:	78fb      	ldrb	r3, [r7, #3]
 8006280:	f003 020f 	and.w	r2, r3, #15
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	685b      	ldr	r3, [r3, #4]
 8006288:	429a      	cmp	r2, r3
 800628a:	d901      	bls.n	8006290 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800628c:	2301      	movs	r3, #1
 800628e:	e042      	b.n	8006316 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006290:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006294:	2b00      	cmp	r3, #0
 8006296:	da0f      	bge.n	80062b8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006298:	78fb      	ldrb	r3, [r7, #3]
 800629a:	f003 020f 	and.w	r2, r3, #15
 800629e:	4613      	mov	r3, r2
 80062a0:	00db      	lsls	r3, r3, #3
 80062a2:	4413      	add	r3, r2
 80062a4:	009b      	lsls	r3, r3, #2
 80062a6:	3338      	adds	r3, #56	; 0x38
 80062a8:	687a      	ldr	r2, [r7, #4]
 80062aa:	4413      	add	r3, r2
 80062ac:	3304      	adds	r3, #4
 80062ae:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	2201      	movs	r2, #1
 80062b4:	705a      	strb	r2, [r3, #1]
 80062b6:	e00f      	b.n	80062d8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80062b8:	78fb      	ldrb	r3, [r7, #3]
 80062ba:	f003 020f 	and.w	r2, r3, #15
 80062be:	4613      	mov	r3, r2
 80062c0:	00db      	lsls	r3, r3, #3
 80062c2:	4413      	add	r3, r2
 80062c4:	009b      	lsls	r3, r3, #2
 80062c6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80062ca:	687a      	ldr	r2, [r7, #4]
 80062cc:	4413      	add	r3, r2
 80062ce:	3304      	adds	r3, #4
 80062d0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	2200      	movs	r2, #0
 80062d6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	2200      	movs	r2, #0
 80062dc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 030f 	and.w	r3, r3, #15
 80062e4:	b2da      	uxtb	r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_PCD_EP_ClrStall+0x86>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e00e      	b.n	8006316 <HAL_PCD_EP_ClrStall+0xa4>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	68f9      	ldr	r1, [r7, #12]
 8006306:	4618      	mov	r0, r3
 8006308:	f003 fe16 	bl	8009f38 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8006314:	2300      	movs	r3, #0
}
 8006316:	4618      	mov	r0, r3
 8006318:	3710      	adds	r7, #16
 800631a:	46bd      	mov	sp, r7
 800631c:	bd80      	pop	{r7, pc}

0800631e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800631e:	b580      	push	{r7, lr}
 8006320:	b084      	sub	sp, #16
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
 8006326:	460b      	mov	r3, r1
 8006328:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800632a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800632e:	2b00      	cmp	r3, #0
 8006330:	da0c      	bge.n	800634c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006332:	78fb      	ldrb	r3, [r7, #3]
 8006334:	f003 020f 	and.w	r2, r3, #15
 8006338:	4613      	mov	r3, r2
 800633a:	00db      	lsls	r3, r3, #3
 800633c:	4413      	add	r3, r2
 800633e:	009b      	lsls	r3, r3, #2
 8006340:	3338      	adds	r3, #56	; 0x38
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	4413      	add	r3, r2
 8006346:	3304      	adds	r3, #4
 8006348:	60fb      	str	r3, [r7, #12]
 800634a:	e00c      	b.n	8006366 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800634c:	78fb      	ldrb	r3, [r7, #3]
 800634e:	f003 020f 	and.w	r2, r3, #15
 8006352:	4613      	mov	r3, r2
 8006354:	00db      	lsls	r3, r3, #3
 8006356:	4413      	add	r3, r2
 8006358:	009b      	lsls	r3, r3, #2
 800635a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800635e:	687a      	ldr	r2, [r7, #4]
 8006360:	4413      	add	r3, r2
 8006362:	3304      	adds	r3, #4
 8006364:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68f9      	ldr	r1, [r7, #12]
 800636c:	4618      	mov	r0, r3
 800636e:	f003 fc35 	bl	8009bdc <USB_EPStopXfer>
 8006372:	4603      	mov	r3, r0
 8006374:	72fb      	strb	r3, [r7, #11]

  return ret;
 8006376:	7afb      	ldrb	r3, [r7, #11]
}
 8006378:	4618      	mov	r0, r3
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b08a      	sub	sp, #40	; 0x28
 8006384:	af02      	add	r7, sp, #8
 8006386:	6078      	str	r0, [r7, #4]
 8006388:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8006394:	683a      	ldr	r2, [r7, #0]
 8006396:	4613      	mov	r3, r2
 8006398:	00db      	lsls	r3, r3, #3
 800639a:	4413      	add	r3, r2
 800639c:	009b      	lsls	r3, r3, #2
 800639e:	3338      	adds	r3, #56	; 0x38
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	4413      	add	r3, r2
 80063a4:	3304      	adds	r3, #4
 80063a6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	6a1a      	ldr	r2, [r3, #32]
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	429a      	cmp	r2, r3
 80063b2:	d901      	bls.n	80063b8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80063b4:	2301      	movs	r3, #1
 80063b6:	e06c      	b.n	8006492 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	699a      	ldr	r2, [r3, #24]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	6a1b      	ldr	r3, [r3, #32]
 80063c0:	1ad3      	subs	r3, r2, r3
 80063c2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	68db      	ldr	r3, [r3, #12]
 80063c8:	69fa      	ldr	r2, [r7, #28]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d902      	bls.n	80063d4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	68db      	ldr	r3, [r3, #12]
 80063d2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80063d4:	69fb      	ldr	r3, [r7, #28]
 80063d6:	3303      	adds	r3, #3
 80063d8:	089b      	lsrs	r3, r3, #2
 80063da:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80063dc:	e02b      	b.n	8006436 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	699a      	ldr	r2, [r3, #24]
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	6a1b      	ldr	r3, [r3, #32]
 80063e6:	1ad3      	subs	r3, r2, r3
 80063e8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	68db      	ldr	r3, [r3, #12]
 80063ee:	69fa      	ldr	r2, [r7, #28]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d902      	bls.n	80063fa <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80063f4:	68fb      	ldr	r3, [r7, #12]
 80063f6:	68db      	ldr	r3, [r3, #12]
 80063f8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80063fa:	69fb      	ldr	r3, [r7, #28]
 80063fc:	3303      	adds	r3, #3
 80063fe:	089b      	lsrs	r3, r3, #2
 8006400:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006402:	68fb      	ldr	r3, [r7, #12]
 8006404:	6919      	ldr	r1, [r3, #16]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	b2da      	uxtb	r2, r3
 800640a:	69fb      	ldr	r3, [r7, #28]
 800640c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8006412:	b2db      	uxtb	r3, r3
 8006414:	9300      	str	r3, [sp, #0]
 8006416:	4603      	mov	r3, r0
 8006418:	6978      	ldr	r0, [r7, #20]
 800641a:	f003 fc89 	bl	8009d30 <USB_WritePacket>

    ep->xfer_buff  += len;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	691a      	ldr	r2, [r3, #16]
 8006422:	69fb      	ldr	r3, [r7, #28]
 8006424:	441a      	add	r2, r3
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	6a1a      	ldr	r2, [r3, #32]
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	441a      	add	r2, r3
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	015a      	lsls	r2, r3, #5
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	4413      	add	r3, r2
 800643e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006442:	699b      	ldr	r3, [r3, #24]
 8006444:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006446:	69ba      	ldr	r2, [r7, #24]
 8006448:	429a      	cmp	r2, r3
 800644a:	d809      	bhi.n	8006460 <PCD_WriteEmptyTxFifo+0xe0>
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6a1a      	ldr	r2, [r3, #32]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8006454:	429a      	cmp	r2, r3
 8006456:	d203      	bcs.n	8006460 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	699b      	ldr	r3, [r3, #24]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d1be      	bne.n	80063de <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	699a      	ldr	r2, [r3, #24]
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	6a1b      	ldr	r3, [r3, #32]
 8006468:	429a      	cmp	r2, r3
 800646a:	d811      	bhi.n	8006490 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	f003 030f 	and.w	r3, r3, #15
 8006472:	2201      	movs	r2, #1
 8006474:	fa02 f303 	lsl.w	r3, r2, r3
 8006478:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006480:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	43db      	mvns	r3, r3
 8006486:	6939      	ldr	r1, [r7, #16]
 8006488:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800648c:	4013      	ands	r3, r2
 800648e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3720      	adds	r7, #32
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
	...

0800649c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800649c:	b580      	push	{r7, lr}
 800649e:	b088      	sub	sp, #32
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
 80064a4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064ac:	69fb      	ldr	r3, [r7, #28]
 80064ae:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80064b0:	69fb      	ldr	r3, [r7, #28]
 80064b2:	333c      	adds	r3, #60	; 0x3c
 80064b4:	3304      	adds	r3, #4
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80064ba:	683b      	ldr	r3, [r7, #0]
 80064bc:	015a      	lsls	r2, r3, #5
 80064be:	69bb      	ldr	r3, [r7, #24]
 80064c0:	4413      	add	r3, r2
 80064c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d17b      	bne.n	80065ca <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80064d2:	693b      	ldr	r3, [r7, #16]
 80064d4:	f003 0308 	and.w	r3, r3, #8
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d015      	beq.n	8006508 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	4a61      	ldr	r2, [pc, #388]	; (8006664 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	f240 80b9 	bls.w	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80064e6:	693b      	ldr	r3, [r7, #16]
 80064e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	f000 80b3 	beq.w	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80064f2:	683b      	ldr	r3, [r7, #0]
 80064f4:	015a      	lsls	r2, r3, #5
 80064f6:	69bb      	ldr	r3, [r7, #24]
 80064f8:	4413      	add	r3, r2
 80064fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fe:	461a      	mov	r2, r3
 8006500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006504:	6093      	str	r3, [r2, #8]
 8006506:	e0a7      	b.n	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	f003 0320 	and.w	r3, r3, #32
 800650e:	2b00      	cmp	r3, #0
 8006510:	d009      	beq.n	8006526 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	015a      	lsls	r2, r3, #5
 8006516:	69bb      	ldr	r3, [r7, #24]
 8006518:	4413      	add	r3, r2
 800651a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800651e:	461a      	mov	r2, r3
 8006520:	2320      	movs	r3, #32
 8006522:	6093      	str	r3, [r2, #8]
 8006524:	e098      	b.n	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800652c:	2b00      	cmp	r3, #0
 800652e:	f040 8093 	bne.w	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	4a4b      	ldr	r2, [pc, #300]	; (8006664 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d90f      	bls.n	800655a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006540:	2b00      	cmp	r3, #0
 8006542:	d00a      	beq.n	800655a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006544:	683b      	ldr	r3, [r7, #0]
 8006546:	015a      	lsls	r2, r3, #5
 8006548:	69bb      	ldr	r3, [r7, #24]
 800654a:	4413      	add	r3, r2
 800654c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006550:	461a      	mov	r2, r3
 8006552:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006556:	6093      	str	r3, [r2, #8]
 8006558:	e07e      	b.n	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800655a:	683a      	ldr	r2, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	00db      	lsls	r3, r3, #3
 8006560:	4413      	add	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8006568:	687a      	ldr	r2, [r7, #4]
 800656a:	4413      	add	r3, r2
 800656c:	3304      	adds	r3, #4
 800656e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	69da      	ldr	r2, [r3, #28]
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	0159      	lsls	r1, r3, #5
 8006578:	69bb      	ldr	r3, [r7, #24]
 800657a:	440b      	add	r3, r1
 800657c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006586:	1ad2      	subs	r2, r2, r3
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800658c:	683b      	ldr	r3, [r7, #0]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d114      	bne.n	80065bc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	699b      	ldr	r3, [r3, #24]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d109      	bne.n	80065ae <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	6818      	ldr	r0, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80065a4:	461a      	mov	r2, r3
 80065a6:	2101      	movs	r1, #1
 80065a8:	f003 fe58 	bl	800a25c <USB_EP0_OutStart>
 80065ac:	e006      	b.n	80065bc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	6a1b      	ldr	r3, [r3, #32]
 80065b6:	441a      	add	r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80065bc:	683b      	ldr	r3, [r7, #0]
 80065be:	b2db      	uxtb	r3, r3
 80065c0:	4619      	mov	r1, r3
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f005 fd86 	bl	800c0d4 <HAL_PCD_DataOutStageCallback>
 80065c8:	e046      	b.n	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80065ca:	697b      	ldr	r3, [r7, #20]
 80065cc:	4a26      	ldr	r2, [pc, #152]	; (8006668 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d124      	bne.n	800661c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80065dc:	683b      	ldr	r3, [r7, #0]
 80065de:	015a      	lsls	r2, r3, #5
 80065e0:	69bb      	ldr	r3, [r7, #24]
 80065e2:	4413      	add	r3, r2
 80065e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e8:	461a      	mov	r2, r3
 80065ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80065ee:	6093      	str	r3, [r2, #8]
 80065f0:	e032      	b.n	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	f003 0320 	and.w	r3, r3, #32
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d008      	beq.n	800660e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80065fc:	683b      	ldr	r3, [r7, #0]
 80065fe:	015a      	lsls	r2, r3, #5
 8006600:	69bb      	ldr	r3, [r7, #24]
 8006602:	4413      	add	r3, r2
 8006604:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006608:	461a      	mov	r2, r3
 800660a:	2320      	movs	r3, #32
 800660c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	b2db      	uxtb	r3, r3
 8006612:	4619      	mov	r1, r3
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f005 fd5d 	bl	800c0d4 <HAL_PCD_DataOutStageCallback>
 800661a:	e01d      	b.n	8006658 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800661c:	683b      	ldr	r3, [r7, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d114      	bne.n	800664c <PCD_EP_OutXfrComplete_int+0x1b0>
 8006622:	6879      	ldr	r1, [r7, #4]
 8006624:	683a      	ldr	r2, [r7, #0]
 8006626:	4613      	mov	r3, r2
 8006628:	00db      	lsls	r3, r3, #3
 800662a:	4413      	add	r3, r2
 800662c:	009b      	lsls	r3, r3, #2
 800662e:	440b      	add	r3, r1
 8006630:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d108      	bne.n	800664c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6818      	ldr	r0, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006644:	461a      	mov	r2, r3
 8006646:	2100      	movs	r1, #0
 8006648:	f003 fe08 	bl	800a25c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	b2db      	uxtb	r3, r3
 8006650:	4619      	mov	r1, r3
 8006652:	6878      	ldr	r0, [r7, #4]
 8006654:	f005 fd3e 	bl	800c0d4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006658:	2300      	movs	r3, #0
}
 800665a:	4618      	mov	r0, r3
 800665c:	3720      	adds	r7, #32
 800665e:	46bd      	mov	sp, r7
 8006660:	bd80      	pop	{r7, pc}
 8006662:	bf00      	nop
 8006664:	4f54300a 	.word	0x4f54300a
 8006668:	4f54310a 	.word	0x4f54310a

0800666c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b086      	sub	sp, #24
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	333c      	adds	r3, #60	; 0x3c
 8006684:	3304      	adds	r3, #4
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	015a      	lsls	r2, r3, #5
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	4413      	add	r3, r2
 8006692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a15      	ldr	r2, [pc, #84]	; (80066f4 <PCD_EP_OutSetupPacket_int+0x88>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d90e      	bls.n	80066c0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80066a2:	68bb      	ldr	r3, [r7, #8]
 80066a4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80066a8:	2b00      	cmp	r3, #0
 80066aa:	d009      	beq.n	80066c0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	015a      	lsls	r2, r3, #5
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	4413      	add	r3, r2
 80066b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80066b8:	461a      	mov	r2, r3
 80066ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80066be:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80066c0:	6878      	ldr	r0, [r7, #4]
 80066c2:	f005 fcf5 	bl	800c0b0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a0a      	ldr	r2, [pc, #40]	; (80066f4 <PCD_EP_OutSetupPacket_int+0x88>)
 80066ca:	4293      	cmp	r3, r2
 80066cc:	d90c      	bls.n	80066e8 <PCD_EP_OutSetupPacket_int+0x7c>
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d108      	bne.n	80066e8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6818      	ldr	r0, [r3, #0]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80066e0:	461a      	mov	r2, r3
 80066e2:	2101      	movs	r1, #1
 80066e4:	f003 fdba 	bl	800a25c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3718      	adds	r7, #24
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}
 80066f2:	bf00      	nop
 80066f4:	4f54300a 	.word	0x4f54300a

080066f8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b085      	sub	sp, #20
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
 8006700:	460b      	mov	r3, r1
 8006702:	70fb      	strb	r3, [r7, #3]
 8006704:	4613      	mov	r3, r2
 8006706:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006710:	78fb      	ldrb	r3, [r7, #3]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d107      	bne.n	8006726 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8006716:	883b      	ldrh	r3, [r7, #0]
 8006718:	0419      	lsls	r1, r3, #16
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	430a      	orrs	r2, r1
 8006722:	629a      	str	r2, [r3, #40]	; 0x28
 8006724:	e028      	b.n	8006778 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	68ba      	ldr	r2, [r7, #8]
 8006730:	4413      	add	r3, r2
 8006732:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006734:	2300      	movs	r3, #0
 8006736:	73fb      	strb	r3, [r7, #15]
 8006738:	e00d      	b.n	8006756 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681a      	ldr	r2, [r3, #0]
 800673e:	7bfb      	ldrb	r3, [r7, #15]
 8006740:	3340      	adds	r3, #64	; 0x40
 8006742:	009b      	lsls	r3, r3, #2
 8006744:	4413      	add	r3, r2
 8006746:	685b      	ldr	r3, [r3, #4]
 8006748:	0c1b      	lsrs	r3, r3, #16
 800674a:	68ba      	ldr	r2, [r7, #8]
 800674c:	4413      	add	r3, r2
 800674e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006750:	7bfb      	ldrb	r3, [r7, #15]
 8006752:	3301      	adds	r3, #1
 8006754:	73fb      	strb	r3, [r7, #15]
 8006756:	7bfa      	ldrb	r2, [r7, #15]
 8006758:	78fb      	ldrb	r3, [r7, #3]
 800675a:	3b01      	subs	r3, #1
 800675c:	429a      	cmp	r2, r3
 800675e:	d3ec      	bcc.n	800673a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006760:	883b      	ldrh	r3, [r7, #0]
 8006762:	0418      	lsls	r0, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6819      	ldr	r1, [r3, #0]
 8006768:	78fb      	ldrb	r3, [r7, #3]
 800676a:	3b01      	subs	r3, #1
 800676c:	68ba      	ldr	r2, [r7, #8]
 800676e:	4302      	orrs	r2, r0
 8006770:	3340      	adds	r3, #64	; 0x40
 8006772:	009b      	lsls	r3, r3, #2
 8006774:	440b      	add	r3, r1
 8006776:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8006778:	2300      	movs	r3, #0
}
 800677a:	4618      	mov	r0, r3
 800677c:	3714      	adds	r7, #20
 800677e:	46bd      	mov	sp, r7
 8006780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006784:	4770      	bx	lr

08006786 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8006786:	b480      	push	{r7}
 8006788:	b083      	sub	sp, #12
 800678a:	af00      	add	r7, sp, #0
 800678c:	6078      	str	r0, [r7, #4]
 800678e:	460b      	mov	r3, r1
 8006790:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	887a      	ldrh	r2, [r7, #2]
 8006798:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800679a:	2300      	movs	r3, #0
}
 800679c:	4618      	mov	r0, r3
 800679e:	370c      	adds	r7, #12
 80067a0:	46bd      	mov	sp, r7
 80067a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a6:	4770      	bx	lr

080067a8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
 80067b0:	460b      	mov	r3, r1
 80067b2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b086      	sub	sp, #24
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d101      	bne.n	80067d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067ce:	2301      	movs	r3, #1
 80067d0:	e267      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d075      	beq.n	80068ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067de:	4b88      	ldr	r3, [pc, #544]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
 80067e6:	2b04      	cmp	r3, #4
 80067e8:	d00c      	beq.n	8006804 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067ea:	4b85      	ldr	r3, [pc, #532]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80067ec:	689b      	ldr	r3, [r3, #8]
 80067ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067f2:	2b08      	cmp	r3, #8
 80067f4:	d112      	bne.n	800681c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067f6:	4b82      	ldr	r3, [pc, #520]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80067f8:	685b      	ldr	r3, [r3, #4]
 80067fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006802:	d10b      	bne.n	800681c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006804:	4b7e      	ldr	r3, [pc, #504]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800680c:	2b00      	cmp	r3, #0
 800680e:	d05b      	beq.n	80068c8 <HAL_RCC_OscConfig+0x108>
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	685b      	ldr	r3, [r3, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d157      	bne.n	80068c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006818:	2301      	movs	r3, #1
 800681a:	e242      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006824:	d106      	bne.n	8006834 <HAL_RCC_OscConfig+0x74>
 8006826:	4b76      	ldr	r3, [pc, #472]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a75      	ldr	r2, [pc, #468]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 800682c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006830:	6013      	str	r3, [r2, #0]
 8006832:	e01d      	b.n	8006870 <HAL_RCC_OscConfig+0xb0>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800683c:	d10c      	bne.n	8006858 <HAL_RCC_OscConfig+0x98>
 800683e:	4b70      	ldr	r3, [pc, #448]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a6f      	ldr	r2, [pc, #444]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	4b6d      	ldr	r3, [pc, #436]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4a6c      	ldr	r2, [pc, #432]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006850:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006854:	6013      	str	r3, [r2, #0]
 8006856:	e00b      	b.n	8006870 <HAL_RCC_OscConfig+0xb0>
 8006858:	4b69      	ldr	r3, [pc, #420]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	4a68      	ldr	r2, [pc, #416]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 800685e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006862:	6013      	str	r3, [r2, #0]
 8006864:	4b66      	ldr	r3, [pc, #408]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	4a65      	ldr	r2, [pc, #404]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 800686a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800686e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d013      	beq.n	80068a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006878:	f7fd fbaa 	bl	8003fd0 <HAL_GetTick>
 800687c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800687e:	e008      	b.n	8006892 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006880:	f7fd fba6 	bl	8003fd0 <HAL_GetTick>
 8006884:	4602      	mov	r2, r0
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	1ad3      	subs	r3, r2, r3
 800688a:	2b64      	cmp	r3, #100	; 0x64
 800688c:	d901      	bls.n	8006892 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800688e:	2303      	movs	r3, #3
 8006890:	e207      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006892:	4b5b      	ldr	r3, [pc, #364]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d0f0      	beq.n	8006880 <HAL_RCC_OscConfig+0xc0>
 800689e:	e014      	b.n	80068ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068a0:	f7fd fb96 	bl	8003fd0 <HAL_GetTick>
 80068a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068a6:	e008      	b.n	80068ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80068a8:	f7fd fb92 	bl	8003fd0 <HAL_GetTick>
 80068ac:	4602      	mov	r2, r0
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	1ad3      	subs	r3, r2, r3
 80068b2:	2b64      	cmp	r3, #100	; 0x64
 80068b4:	d901      	bls.n	80068ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068b6:	2303      	movs	r3, #3
 80068b8:	e1f3      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068ba:	4b51      	ldr	r3, [pc, #324]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d1f0      	bne.n	80068a8 <HAL_RCC_OscConfig+0xe8>
 80068c6:	e000      	b.n	80068ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	f003 0302 	and.w	r3, r3, #2
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d063      	beq.n	800699e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068d6:	4b4a      	ldr	r3, [pc, #296]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80068d8:	689b      	ldr	r3, [r3, #8]
 80068da:	f003 030c 	and.w	r3, r3, #12
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068e2:	4b47      	ldr	r3, [pc, #284]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80068e4:	689b      	ldr	r3, [r3, #8]
 80068e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068ea:	2b08      	cmp	r3, #8
 80068ec:	d11c      	bne.n	8006928 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ee:	4b44      	ldr	r3, [pc, #272]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d116      	bne.n	8006928 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068fa:	4b41      	ldr	r3, [pc, #260]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f003 0302 	and.w	r3, r3, #2
 8006902:	2b00      	cmp	r3, #0
 8006904:	d005      	beq.n	8006912 <HAL_RCC_OscConfig+0x152>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	2b01      	cmp	r3, #1
 800690c:	d001      	beq.n	8006912 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800690e:	2301      	movs	r3, #1
 8006910:	e1c7      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006912:	4b3b      	ldr	r3, [pc, #236]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	00db      	lsls	r3, r3, #3
 8006920:	4937      	ldr	r1, [pc, #220]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006922:	4313      	orrs	r3, r2
 8006924:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006926:	e03a      	b.n	800699e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	68db      	ldr	r3, [r3, #12]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d020      	beq.n	8006972 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006930:	4b34      	ldr	r3, [pc, #208]	; (8006a04 <HAL_RCC_OscConfig+0x244>)
 8006932:	2201      	movs	r2, #1
 8006934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006936:	f7fd fb4b 	bl	8003fd0 <HAL_GetTick>
 800693a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800693c:	e008      	b.n	8006950 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800693e:	f7fd fb47 	bl	8003fd0 <HAL_GetTick>
 8006942:	4602      	mov	r2, r0
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	1ad3      	subs	r3, r2, r3
 8006948:	2b02      	cmp	r3, #2
 800694a:	d901      	bls.n	8006950 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800694c:	2303      	movs	r3, #3
 800694e:	e1a8      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006950:	4b2b      	ldr	r3, [pc, #172]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d0f0      	beq.n	800693e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800695c:	4b28      	ldr	r3, [pc, #160]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	691b      	ldr	r3, [r3, #16]
 8006968:	00db      	lsls	r3, r3, #3
 800696a:	4925      	ldr	r1, [pc, #148]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 800696c:	4313      	orrs	r3, r2
 800696e:	600b      	str	r3, [r1, #0]
 8006970:	e015      	b.n	800699e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006972:	4b24      	ldr	r3, [pc, #144]	; (8006a04 <HAL_RCC_OscConfig+0x244>)
 8006974:	2200      	movs	r2, #0
 8006976:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006978:	f7fd fb2a 	bl	8003fd0 <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006980:	f7fd fb26 	bl	8003fd0 <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b02      	cmp	r3, #2
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e187      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006992:	4b1b      	ldr	r3, [pc, #108]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f003 0302 	and.w	r3, r3, #2
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1f0      	bne.n	8006980 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f003 0308 	and.w	r3, r3, #8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d036      	beq.n	8006a18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	695b      	ldr	r3, [r3, #20]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d016      	beq.n	80069e0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069b2:	4b15      	ldr	r3, [pc, #84]	; (8006a08 <HAL_RCC_OscConfig+0x248>)
 80069b4:	2201      	movs	r2, #1
 80069b6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069b8:	f7fd fb0a 	bl	8003fd0 <HAL_GetTick>
 80069bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069be:	e008      	b.n	80069d2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069c0:	f7fd fb06 	bl	8003fd0 <HAL_GetTick>
 80069c4:	4602      	mov	r2, r0
 80069c6:	693b      	ldr	r3, [r7, #16]
 80069c8:	1ad3      	subs	r3, r2, r3
 80069ca:	2b02      	cmp	r3, #2
 80069cc:	d901      	bls.n	80069d2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069ce:	2303      	movs	r3, #3
 80069d0:	e167      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d2:	4b0b      	ldr	r3, [pc, #44]	; (8006a00 <HAL_RCC_OscConfig+0x240>)
 80069d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d6:	f003 0302 	and.w	r3, r3, #2
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0f0      	beq.n	80069c0 <HAL_RCC_OscConfig+0x200>
 80069de:	e01b      	b.n	8006a18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069e0:	4b09      	ldr	r3, [pc, #36]	; (8006a08 <HAL_RCC_OscConfig+0x248>)
 80069e2:	2200      	movs	r2, #0
 80069e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069e6:	f7fd faf3 	bl	8003fd0 <HAL_GetTick>
 80069ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069ec:	e00e      	b.n	8006a0c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ee:	f7fd faef 	bl	8003fd0 <HAL_GetTick>
 80069f2:	4602      	mov	r2, r0
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	1ad3      	subs	r3, r2, r3
 80069f8:	2b02      	cmp	r3, #2
 80069fa:	d907      	bls.n	8006a0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80069fc:	2303      	movs	r3, #3
 80069fe:	e150      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
 8006a00:	40023800 	.word	0x40023800
 8006a04:	42470000 	.word	0x42470000
 8006a08:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a0c:	4b88      	ldr	r3, [pc, #544]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006a0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d1ea      	bne.n	80069ee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	f003 0304 	and.w	r3, r3, #4
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	f000 8097 	beq.w	8006b54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a26:	2300      	movs	r3, #0
 8006a28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a2a:	4b81      	ldr	r3, [pc, #516]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d10f      	bne.n	8006a56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	4b7d      	ldr	r3, [pc, #500]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a3e:	4a7c      	ldr	r2, [pc, #496]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006a40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a44:	6413      	str	r3, [r2, #64]	; 0x40
 8006a46:	4b7a      	ldr	r3, [pc, #488]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a4e:	60bb      	str	r3, [r7, #8]
 8006a50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a52:	2301      	movs	r3, #1
 8006a54:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a56:	4b77      	ldr	r3, [pc, #476]	; (8006c34 <HAL_RCC_OscConfig+0x474>)
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d118      	bne.n	8006a94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a62:	4b74      	ldr	r3, [pc, #464]	; (8006c34 <HAL_RCC_OscConfig+0x474>)
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	4a73      	ldr	r2, [pc, #460]	; (8006c34 <HAL_RCC_OscConfig+0x474>)
 8006a68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a6e:	f7fd faaf 	bl	8003fd0 <HAL_GetTick>
 8006a72:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a74:	e008      	b.n	8006a88 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a76:	f7fd faab 	bl	8003fd0 <HAL_GetTick>
 8006a7a:	4602      	mov	r2, r0
 8006a7c:	693b      	ldr	r3, [r7, #16]
 8006a7e:	1ad3      	subs	r3, r2, r3
 8006a80:	2b02      	cmp	r3, #2
 8006a82:	d901      	bls.n	8006a88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a84:	2303      	movs	r3, #3
 8006a86:	e10c      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a88:	4b6a      	ldr	r3, [pc, #424]	; (8006c34 <HAL_RCC_OscConfig+0x474>)
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d0f0      	beq.n	8006a76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	689b      	ldr	r3, [r3, #8]
 8006a98:	2b01      	cmp	r3, #1
 8006a9a:	d106      	bne.n	8006aaa <HAL_RCC_OscConfig+0x2ea>
 8006a9c:	4b64      	ldr	r3, [pc, #400]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa0:	4a63      	ldr	r2, [pc, #396]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006aa2:	f043 0301 	orr.w	r3, r3, #1
 8006aa6:	6713      	str	r3, [r2, #112]	; 0x70
 8006aa8:	e01c      	b.n	8006ae4 <HAL_RCC_OscConfig+0x324>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	689b      	ldr	r3, [r3, #8]
 8006aae:	2b05      	cmp	r3, #5
 8006ab0:	d10c      	bne.n	8006acc <HAL_RCC_OscConfig+0x30c>
 8006ab2:	4b5f      	ldr	r3, [pc, #380]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	4a5e      	ldr	r2, [pc, #376]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ab8:	f043 0304 	orr.w	r3, r3, #4
 8006abc:	6713      	str	r3, [r2, #112]	; 0x70
 8006abe:	4b5c      	ldr	r3, [pc, #368]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ac2:	4a5b      	ldr	r2, [pc, #364]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ac4:	f043 0301 	orr.w	r3, r3, #1
 8006ac8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aca:	e00b      	b.n	8006ae4 <HAL_RCC_OscConfig+0x324>
 8006acc:	4b58      	ldr	r3, [pc, #352]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ace:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ad0:	4a57      	ldr	r2, [pc, #348]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ad2:	f023 0301 	bic.w	r3, r3, #1
 8006ad6:	6713      	str	r3, [r2, #112]	; 0x70
 8006ad8:	4b55      	ldr	r3, [pc, #340]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ada:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006adc:	4a54      	ldr	r2, [pc, #336]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006ade:	f023 0304 	bic.w	r3, r3, #4
 8006ae2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d015      	beq.n	8006b18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006aec:	f7fd fa70 	bl	8003fd0 <HAL_GetTick>
 8006af0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af2:	e00a      	b.n	8006b0a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006af4:	f7fd fa6c 	bl	8003fd0 <HAL_GetTick>
 8006af8:	4602      	mov	r2, r0
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	1ad3      	subs	r3, r2, r3
 8006afe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b02:	4293      	cmp	r3, r2
 8006b04:	d901      	bls.n	8006b0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b06:	2303      	movs	r3, #3
 8006b08:	e0cb      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0a:	4b49      	ldr	r3, [pc, #292]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006b0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0e:	f003 0302 	and.w	r3, r3, #2
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d0ee      	beq.n	8006af4 <HAL_RCC_OscConfig+0x334>
 8006b16:	e014      	b.n	8006b42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b18:	f7fd fa5a 	bl	8003fd0 <HAL_GetTick>
 8006b1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b1e:	e00a      	b.n	8006b36 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006b20:	f7fd fa56 	bl	8003fd0 <HAL_GetTick>
 8006b24:	4602      	mov	r2, r0
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	1ad3      	subs	r3, r2, r3
 8006b2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b2e:	4293      	cmp	r3, r2
 8006b30:	d901      	bls.n	8006b36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b32:	2303      	movs	r3, #3
 8006b34:	e0b5      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b36:	4b3e      	ldr	r3, [pc, #248]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3a:	f003 0302 	and.w	r3, r3, #2
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d1ee      	bne.n	8006b20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b42:	7dfb      	ldrb	r3, [r7, #23]
 8006b44:	2b01      	cmp	r3, #1
 8006b46:	d105      	bne.n	8006b54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b48:	4b39      	ldr	r3, [pc, #228]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b4c:	4a38      	ldr	r2, [pc, #224]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006b4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b52:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	699b      	ldr	r3, [r3, #24]
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80a1 	beq.w	8006ca0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b5e:	4b34      	ldr	r3, [pc, #208]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006b60:	689b      	ldr	r3, [r3, #8]
 8006b62:	f003 030c 	and.w	r3, r3, #12
 8006b66:	2b08      	cmp	r3, #8
 8006b68:	d05c      	beq.n	8006c24 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	699b      	ldr	r3, [r3, #24]
 8006b6e:	2b02      	cmp	r3, #2
 8006b70:	d141      	bne.n	8006bf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b72:	4b31      	ldr	r3, [pc, #196]	; (8006c38 <HAL_RCC_OscConfig+0x478>)
 8006b74:	2200      	movs	r2, #0
 8006b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b78:	f7fd fa2a 	bl	8003fd0 <HAL_GetTick>
 8006b7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b7e:	e008      	b.n	8006b92 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b80:	f7fd fa26 	bl	8003fd0 <HAL_GetTick>
 8006b84:	4602      	mov	r2, r0
 8006b86:	693b      	ldr	r3, [r7, #16]
 8006b88:	1ad3      	subs	r3, r2, r3
 8006b8a:	2b02      	cmp	r3, #2
 8006b8c:	d901      	bls.n	8006b92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e087      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b92:	4b27      	ldr	r3, [pc, #156]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d1f0      	bne.n	8006b80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	69da      	ldr	r2, [r3, #28]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	6a1b      	ldr	r3, [r3, #32]
 8006ba6:	431a      	orrs	r2, r3
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bac:	019b      	lsls	r3, r3, #6
 8006bae:	431a      	orrs	r2, r3
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb4:	085b      	lsrs	r3, r3, #1
 8006bb6:	3b01      	subs	r3, #1
 8006bb8:	041b      	lsls	r3, r3, #16
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	061b      	lsls	r3, r3, #24
 8006bc2:	491b      	ldr	r1, [pc, #108]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bc8:	4b1b      	ldr	r3, [pc, #108]	; (8006c38 <HAL_RCC_OscConfig+0x478>)
 8006bca:	2201      	movs	r2, #1
 8006bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bce:	f7fd f9ff 	bl	8003fd0 <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bd6:	f7fd f9fb 	bl	8003fd0 <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e05c      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006be8:	4b11      	ldr	r3, [pc, #68]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d0f0      	beq.n	8006bd6 <HAL_RCC_OscConfig+0x416>
 8006bf4:	e054      	b.n	8006ca0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bf6:	4b10      	ldr	r3, [pc, #64]	; (8006c38 <HAL_RCC_OscConfig+0x478>)
 8006bf8:	2200      	movs	r2, #0
 8006bfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bfc:	f7fd f9e8 	bl	8003fd0 <HAL_GetTick>
 8006c00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c02:	e008      	b.n	8006c16 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c04:	f7fd f9e4 	bl	8003fd0 <HAL_GetTick>
 8006c08:	4602      	mov	r2, r0
 8006c0a:	693b      	ldr	r3, [r7, #16]
 8006c0c:	1ad3      	subs	r3, r2, r3
 8006c0e:	2b02      	cmp	r3, #2
 8006c10:	d901      	bls.n	8006c16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c12:	2303      	movs	r3, #3
 8006c14:	e045      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c16:	4b06      	ldr	r3, [pc, #24]	; (8006c30 <HAL_RCC_OscConfig+0x470>)
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1f0      	bne.n	8006c04 <HAL_RCC_OscConfig+0x444>
 8006c22:	e03d      	b.n	8006ca0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	699b      	ldr	r3, [r3, #24]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d107      	bne.n	8006c3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e038      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
 8006c30:	40023800 	.word	0x40023800
 8006c34:	40007000 	.word	0x40007000
 8006c38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c3c:	4b1b      	ldr	r3, [pc, #108]	; (8006cac <HAL_RCC_OscConfig+0x4ec>)
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	699b      	ldr	r3, [r3, #24]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d028      	beq.n	8006c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d121      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c62:	429a      	cmp	r2, r3
 8006c64:	d11a      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c6c:	4013      	ands	r3, r2
 8006c6e:	687a      	ldr	r2, [r7, #4]
 8006c70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c74:	4293      	cmp	r3, r2
 8006c76:	d111      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c82:	085b      	lsrs	r3, r3, #1
 8006c84:	3b01      	subs	r3, #1
 8006c86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d107      	bne.n	8006c9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d001      	beq.n	8006ca0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8006c9c:	2301      	movs	r3, #1
 8006c9e:	e000      	b.n	8006ca2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3718      	adds	r7, #24
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}
 8006caa:	bf00      	nop
 8006cac:	40023800 	.word	0x40023800

08006cb0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b084      	sub	sp, #16
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	e0cc      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006cc4:	4b68      	ldr	r3, [pc, #416]	; (8006e68 <HAL_RCC_ClockConfig+0x1b8>)
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0307 	and.w	r3, r3, #7
 8006ccc:	683a      	ldr	r2, [r7, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d90c      	bls.n	8006cec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cd2:	4b65      	ldr	r3, [pc, #404]	; (8006e68 <HAL_RCC_ClockConfig+0x1b8>)
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	b2d2      	uxtb	r2, r2
 8006cd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cda:	4b63      	ldr	r3, [pc, #396]	; (8006e68 <HAL_RCC_ClockConfig+0x1b8>)
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	f003 0307 	and.w	r3, r3, #7
 8006ce2:	683a      	ldr	r2, [r7, #0]
 8006ce4:	429a      	cmp	r2, r3
 8006ce6:	d001      	beq.n	8006cec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006ce8:	2301      	movs	r3, #1
 8006cea:	e0b8      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	f003 0302 	and.w	r3, r3, #2
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d020      	beq.n	8006d3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0304 	and.w	r3, r3, #4
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d04:	4b59      	ldr	r3, [pc, #356]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	4a58      	ldr	r2, [pc, #352]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006d0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0308 	and.w	r3, r3, #8
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d1c:	4b53      	ldr	r3, [pc, #332]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4a52      	ldr	r2, [pc, #328]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006d26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d28:	4b50      	ldr	r3, [pc, #320]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d2a:	689b      	ldr	r3, [r3, #8]
 8006d2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	689b      	ldr	r3, [r3, #8]
 8006d34:	494d      	ldr	r1, [pc, #308]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	4313      	orrs	r3, r2
 8006d38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 0301 	and.w	r3, r3, #1
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d044      	beq.n	8006dd0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	685b      	ldr	r3, [r3, #4]
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d4e:	4b47      	ldr	r3, [pc, #284]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d119      	bne.n	8006d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	e07f      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b02      	cmp	r3, #2
 8006d64:	d003      	beq.n	8006d6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d6a:	2b03      	cmp	r3, #3
 8006d6c:	d107      	bne.n	8006d7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d6e:	4b3f      	ldr	r3, [pc, #252]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d109      	bne.n	8006d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d7a:	2301      	movs	r3, #1
 8006d7c:	e06f      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d7e:	4b3b      	ldr	r3, [pc, #236]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f003 0302 	and.w	r3, r3, #2
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d101      	bne.n	8006d8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e067      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d8e:	4b37      	ldr	r3, [pc, #220]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f023 0203 	bic.w	r2, r3, #3
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	4934      	ldr	r1, [pc, #208]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006da0:	f7fd f916 	bl	8003fd0 <HAL_GetTick>
 8006da4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006da6:	e00a      	b.n	8006dbe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006da8:	f7fd f912 	bl	8003fd0 <HAL_GetTick>
 8006dac:	4602      	mov	r2, r0
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	1ad3      	subs	r3, r2, r3
 8006db2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d901      	bls.n	8006dbe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e04f      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	4b2b      	ldr	r3, [pc, #172]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	689b      	ldr	r3, [r3, #8]
 8006dc2:	f003 020c 	and.w	r2, r3, #12
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	685b      	ldr	r3, [r3, #4]
 8006dca:	009b      	lsls	r3, r3, #2
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d1eb      	bne.n	8006da8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006dd0:	4b25      	ldr	r3, [pc, #148]	; (8006e68 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f003 0307 	and.w	r3, r3, #7
 8006dd8:	683a      	ldr	r2, [r7, #0]
 8006dda:	429a      	cmp	r2, r3
 8006ddc:	d20c      	bcs.n	8006df8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dde:	4b22      	ldr	r3, [pc, #136]	; (8006e68 <HAL_RCC_ClockConfig+0x1b8>)
 8006de0:	683a      	ldr	r2, [r7, #0]
 8006de2:	b2d2      	uxtb	r2, r2
 8006de4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006de6:	4b20      	ldr	r3, [pc, #128]	; (8006e68 <HAL_RCC_ClockConfig+0x1b8>)
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f003 0307 	and.w	r3, r3, #7
 8006dee:	683a      	ldr	r2, [r7, #0]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d001      	beq.n	8006df8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006df4:	2301      	movs	r3, #1
 8006df6:	e032      	b.n	8006e5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d008      	beq.n	8006e16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e04:	4b19      	ldr	r3, [pc, #100]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	68db      	ldr	r3, [r3, #12]
 8006e10:	4916      	ldr	r1, [pc, #88]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e12:	4313      	orrs	r3, r2
 8006e14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	f003 0308 	and.w	r3, r3, #8
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d009      	beq.n	8006e36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e22:	4b12      	ldr	r3, [pc, #72]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e24:	689b      	ldr	r3, [r3, #8]
 8006e26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	00db      	lsls	r3, r3, #3
 8006e30:	490e      	ldr	r1, [pc, #56]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e32:	4313      	orrs	r3, r2
 8006e34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e36:	f000 f821 	bl	8006e7c <HAL_RCC_GetSysClockFreq>
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	4b0b      	ldr	r3, [pc, #44]	; (8006e6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e3e:	689b      	ldr	r3, [r3, #8]
 8006e40:	091b      	lsrs	r3, r3, #4
 8006e42:	f003 030f 	and.w	r3, r3, #15
 8006e46:	490a      	ldr	r1, [pc, #40]	; (8006e70 <HAL_RCC_ClockConfig+0x1c0>)
 8006e48:	5ccb      	ldrb	r3, [r1, r3]
 8006e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e4e:	4a09      	ldr	r2, [pc, #36]	; (8006e74 <HAL_RCC_ClockConfig+0x1c4>)
 8006e50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e52:	4b09      	ldr	r3, [pc, #36]	; (8006e78 <HAL_RCC_ClockConfig+0x1c8>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	4618      	mov	r0, r3
 8006e58:	f7fd f876 	bl	8003f48 <HAL_InitTick>

  return HAL_OK;
 8006e5c:	2300      	movs	r3, #0
}
 8006e5e:	4618      	mov	r0, r3
 8006e60:	3710      	adds	r7, #16
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	40023c00 	.word	0x40023c00
 8006e6c:	40023800 	.word	0x40023800
 8006e70:	0800e478 	.word	0x0800e478
 8006e74:	20000044 	.word	0x20000044
 8006e78:	20000048 	.word	0x20000048

08006e7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e80:	b094      	sub	sp, #80	; 0x50
 8006e82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e84:	2300      	movs	r3, #0
 8006e86:	647b      	str	r3, [r7, #68]	; 0x44
 8006e88:	2300      	movs	r3, #0
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8006e90:	2300      	movs	r3, #0
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e94:	4b79      	ldr	r3, [pc, #484]	; (800707c <HAL_RCC_GetSysClockFreq+0x200>)
 8006e96:	689b      	ldr	r3, [r3, #8]
 8006e98:	f003 030c 	and.w	r3, r3, #12
 8006e9c:	2b08      	cmp	r3, #8
 8006e9e:	d00d      	beq.n	8006ebc <HAL_RCC_GetSysClockFreq+0x40>
 8006ea0:	2b08      	cmp	r3, #8
 8006ea2:	f200 80e1 	bhi.w	8007068 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d002      	beq.n	8006eb0 <HAL_RCC_GetSysClockFreq+0x34>
 8006eaa:	2b04      	cmp	r3, #4
 8006eac:	d003      	beq.n	8006eb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006eae:	e0db      	b.n	8007068 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006eb0:	4b73      	ldr	r3, [pc, #460]	; (8007080 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eb2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8006eb4:	e0db      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006eb6:	4b73      	ldr	r3, [pc, #460]	; (8007084 <HAL_RCC_GetSysClockFreq+0x208>)
 8006eb8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8006eba:	e0d8      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ebc:	4b6f      	ldr	r3, [pc, #444]	; (800707c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006ec4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ec6:	4b6d      	ldr	r3, [pc, #436]	; (800707c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d063      	beq.n	8006f9a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006ed2:	4b6a      	ldr	r3, [pc, #424]	; (800707c <HAL_RCC_GetSysClockFreq+0x200>)
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	099b      	lsrs	r3, r3, #6
 8006ed8:	2200      	movs	r2, #0
 8006eda:	63bb      	str	r3, [r7, #56]	; 0x38
 8006edc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8006ede:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ee0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ee4:	633b      	str	r3, [r7, #48]	; 0x30
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8006eea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8006eee:	4622      	mov	r2, r4
 8006ef0:	462b      	mov	r3, r5
 8006ef2:	f04f 0000 	mov.w	r0, #0
 8006ef6:	f04f 0100 	mov.w	r1, #0
 8006efa:	0159      	lsls	r1, r3, #5
 8006efc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f00:	0150      	lsls	r0, r2, #5
 8006f02:	4602      	mov	r2, r0
 8006f04:	460b      	mov	r3, r1
 8006f06:	4621      	mov	r1, r4
 8006f08:	1a51      	subs	r1, r2, r1
 8006f0a:	6139      	str	r1, [r7, #16]
 8006f0c:	4629      	mov	r1, r5
 8006f0e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f12:	617b      	str	r3, [r7, #20]
 8006f14:	f04f 0200 	mov.w	r2, #0
 8006f18:	f04f 0300 	mov.w	r3, #0
 8006f1c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f20:	4659      	mov	r1, fp
 8006f22:	018b      	lsls	r3, r1, #6
 8006f24:	4651      	mov	r1, sl
 8006f26:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f2a:	4651      	mov	r1, sl
 8006f2c:	018a      	lsls	r2, r1, #6
 8006f2e:	4651      	mov	r1, sl
 8006f30:	ebb2 0801 	subs.w	r8, r2, r1
 8006f34:	4659      	mov	r1, fp
 8006f36:	eb63 0901 	sbc.w	r9, r3, r1
 8006f3a:	f04f 0200 	mov.w	r2, #0
 8006f3e:	f04f 0300 	mov.w	r3, #0
 8006f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f4e:	4690      	mov	r8, r2
 8006f50:	4699      	mov	r9, r3
 8006f52:	4623      	mov	r3, r4
 8006f54:	eb18 0303 	adds.w	r3, r8, r3
 8006f58:	60bb      	str	r3, [r7, #8]
 8006f5a:	462b      	mov	r3, r5
 8006f5c:	eb49 0303 	adc.w	r3, r9, r3
 8006f60:	60fb      	str	r3, [r7, #12]
 8006f62:	f04f 0200 	mov.w	r2, #0
 8006f66:	f04f 0300 	mov.w	r3, #0
 8006f6a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f6e:	4629      	mov	r1, r5
 8006f70:	024b      	lsls	r3, r1, #9
 8006f72:	4621      	mov	r1, r4
 8006f74:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f78:	4621      	mov	r1, r4
 8006f7a:	024a      	lsls	r2, r1, #9
 8006f7c:	4610      	mov	r0, r2
 8006f7e:	4619      	mov	r1, r3
 8006f80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006f82:	2200      	movs	r2, #0
 8006f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f86:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f88:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006f8c:	f7f9 f990 	bl	80002b0 <__aeabi_uldivmod>
 8006f90:	4602      	mov	r2, r0
 8006f92:	460b      	mov	r3, r1
 8006f94:	4613      	mov	r3, r2
 8006f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f98:	e058      	b.n	800704c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f9a:	4b38      	ldr	r3, [pc, #224]	; (800707c <HAL_RCC_GetSysClockFreq+0x200>)
 8006f9c:	685b      	ldr	r3, [r3, #4]
 8006f9e:	099b      	lsrs	r3, r3, #6
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	4611      	mov	r1, r2
 8006fa6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006faa:	623b      	str	r3, [r7, #32]
 8006fac:	2300      	movs	r3, #0
 8006fae:	627b      	str	r3, [r7, #36]	; 0x24
 8006fb0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fb4:	4642      	mov	r2, r8
 8006fb6:	464b      	mov	r3, r9
 8006fb8:	f04f 0000 	mov.w	r0, #0
 8006fbc:	f04f 0100 	mov.w	r1, #0
 8006fc0:	0159      	lsls	r1, r3, #5
 8006fc2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fc6:	0150      	lsls	r0, r2, #5
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4641      	mov	r1, r8
 8006fce:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fd2:	4649      	mov	r1, r9
 8006fd4:	eb63 0b01 	sbc.w	fp, r3, r1
 8006fd8:	f04f 0200 	mov.w	r2, #0
 8006fdc:	f04f 0300 	mov.w	r3, #0
 8006fe0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006fe4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8006fe8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8006fec:	ebb2 040a 	subs.w	r4, r2, sl
 8006ff0:	eb63 050b 	sbc.w	r5, r3, fp
 8006ff4:	f04f 0200 	mov.w	r2, #0
 8006ff8:	f04f 0300 	mov.w	r3, #0
 8006ffc:	00eb      	lsls	r3, r5, #3
 8006ffe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007002:	00e2      	lsls	r2, r4, #3
 8007004:	4614      	mov	r4, r2
 8007006:	461d      	mov	r5, r3
 8007008:	4643      	mov	r3, r8
 800700a:	18e3      	adds	r3, r4, r3
 800700c:	603b      	str	r3, [r7, #0]
 800700e:	464b      	mov	r3, r9
 8007010:	eb45 0303 	adc.w	r3, r5, r3
 8007014:	607b      	str	r3, [r7, #4]
 8007016:	f04f 0200 	mov.w	r2, #0
 800701a:	f04f 0300 	mov.w	r3, #0
 800701e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007022:	4629      	mov	r1, r5
 8007024:	028b      	lsls	r3, r1, #10
 8007026:	4621      	mov	r1, r4
 8007028:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800702c:	4621      	mov	r1, r4
 800702e:	028a      	lsls	r2, r1, #10
 8007030:	4610      	mov	r0, r2
 8007032:	4619      	mov	r1, r3
 8007034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007036:	2200      	movs	r2, #0
 8007038:	61bb      	str	r3, [r7, #24]
 800703a:	61fa      	str	r2, [r7, #28]
 800703c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007040:	f7f9 f936 	bl	80002b0 <__aeabi_uldivmod>
 8007044:	4602      	mov	r2, r0
 8007046:	460b      	mov	r3, r1
 8007048:	4613      	mov	r3, r2
 800704a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800704c:	4b0b      	ldr	r3, [pc, #44]	; (800707c <HAL_RCC_GetSysClockFreq+0x200>)
 800704e:	685b      	ldr	r3, [r3, #4]
 8007050:	0c1b      	lsrs	r3, r3, #16
 8007052:	f003 0303 	and.w	r3, r3, #3
 8007056:	3301      	adds	r3, #1
 8007058:	005b      	lsls	r3, r3, #1
 800705a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800705c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800705e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007060:	fbb2 f3f3 	udiv	r3, r2, r3
 8007064:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8007066:	e002      	b.n	800706e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007068:	4b05      	ldr	r3, [pc, #20]	; (8007080 <HAL_RCC_GetSysClockFreq+0x204>)
 800706a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800706c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800706e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8007070:	4618      	mov	r0, r3
 8007072:	3750      	adds	r7, #80	; 0x50
 8007074:	46bd      	mov	sp, r7
 8007076:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800707a:	bf00      	nop
 800707c:	40023800 	.word	0x40023800
 8007080:	00f42400 	.word	0x00f42400
 8007084:	007a1200 	.word	0x007a1200

08007088 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800708c:	4b03      	ldr	r3, [pc, #12]	; (800709c <HAL_RCC_GetHCLKFreq+0x14>)
 800708e:	681b      	ldr	r3, [r3, #0]
}
 8007090:	4618      	mov	r0, r3
 8007092:	46bd      	mov	sp, r7
 8007094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007098:	4770      	bx	lr
 800709a:	bf00      	nop
 800709c:	20000044 	.word	0x20000044

080070a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80070a4:	f7ff fff0 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80070a8:	4602      	mov	r2, r0
 80070aa:	4b05      	ldr	r3, [pc, #20]	; (80070c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070ac:	689b      	ldr	r3, [r3, #8]
 80070ae:	0a9b      	lsrs	r3, r3, #10
 80070b0:	f003 0307 	and.w	r3, r3, #7
 80070b4:	4903      	ldr	r1, [pc, #12]	; (80070c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80070b6:	5ccb      	ldrb	r3, [r1, r3]
 80070b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070bc:	4618      	mov	r0, r3
 80070be:	bd80      	pop	{r7, pc}
 80070c0:	40023800 	.word	0x40023800
 80070c4:	0800e488 	.word	0x0800e488

080070c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80070cc:	f7ff ffdc 	bl	8007088 <HAL_RCC_GetHCLKFreq>
 80070d0:	4602      	mov	r2, r0
 80070d2:	4b05      	ldr	r3, [pc, #20]	; (80070e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	0b5b      	lsrs	r3, r3, #13
 80070d8:	f003 0307 	and.w	r3, r3, #7
 80070dc:	4903      	ldr	r1, [pc, #12]	; (80070ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80070de:	5ccb      	ldrb	r3, [r1, r3]
 80070e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	bd80      	pop	{r7, pc}
 80070e8:	40023800 	.word	0x40023800
 80070ec:	0800e488 	.word	0x0800e488

080070f0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80070f8:	2300      	movs	r3, #0
 80070fa:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80070fc:	2300      	movs	r3, #0
 80070fe:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f003 0301 	and.w	r3, r3, #1
 8007108:	2b00      	cmp	r3, #0
 800710a:	d105      	bne.n	8007118 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007114:	2b00      	cmp	r3, #0
 8007116:	d038      	beq.n	800718a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007118:	4b68      	ldr	r3, [pc, #416]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 800711a:	2200      	movs	r2, #0
 800711c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800711e:	f7fc ff57 	bl	8003fd0 <HAL_GetTick>
 8007122:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007124:	e008      	b.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007126:	f7fc ff53 	bl	8003fd0 <HAL_GetTick>
 800712a:	4602      	mov	r2, r0
 800712c:	697b      	ldr	r3, [r7, #20]
 800712e:	1ad3      	subs	r3, r2, r3
 8007130:	2b02      	cmp	r3, #2
 8007132:	d901      	bls.n	8007138 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007134:	2303      	movs	r3, #3
 8007136:	e0bd      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007138:	4b61      	ldr	r3, [pc, #388]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1f0      	bne.n	8007126 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	685a      	ldr	r2, [r3, #4]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	689b      	ldr	r3, [r3, #8]
 800714c:	019b      	lsls	r3, r3, #6
 800714e:	431a      	orrs	r2, r3
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	071b      	lsls	r3, r3, #28
 8007156:	495a      	ldr	r1, [pc, #360]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007158:	4313      	orrs	r3, r2
 800715a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800715e:	4b57      	ldr	r3, [pc, #348]	; (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8007160:	2201      	movs	r2, #1
 8007162:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007164:	f7fc ff34 	bl	8003fd0 <HAL_GetTick>
 8007168:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800716a:	e008      	b.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800716c:	f7fc ff30 	bl	8003fd0 <HAL_GetTick>
 8007170:	4602      	mov	r2, r0
 8007172:	697b      	ldr	r3, [r7, #20]
 8007174:	1ad3      	subs	r3, r2, r3
 8007176:	2b02      	cmp	r3, #2
 8007178:	d901      	bls.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e09a      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800717e:	4b50      	ldr	r3, [pc, #320]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007186:	2b00      	cmp	r3, #0
 8007188:	d0f0      	beq.n	800716c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f003 0302 	and.w	r3, r3, #2
 8007192:	2b00      	cmp	r3, #0
 8007194:	f000 8083 	beq.w	800729e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007198:	2300      	movs	r3, #0
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	4b48      	ldr	r3, [pc, #288]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800719e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071a0:	4a47      	ldr	r2, [pc, #284]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071a6:	6413      	str	r3, [r2, #64]	; 0x40
 80071a8:	4b45      	ldr	r3, [pc, #276]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071b0:	60fb      	str	r3, [r7, #12]
 80071b2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071b4:	4b43      	ldr	r3, [pc, #268]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	4a42      	ldr	r2, [pc, #264]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80071be:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071c0:	f7fc ff06 	bl	8003fd0 <HAL_GetTick>
 80071c4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071c6:	e008      	b.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80071c8:	f7fc ff02 	bl	8003fd0 <HAL_GetTick>
 80071cc:	4602      	mov	r2, r0
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	1ad3      	subs	r3, r2, r3
 80071d2:	2b02      	cmp	r3, #2
 80071d4:	d901      	bls.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80071d6:	2303      	movs	r3, #3
 80071d8:	e06c      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80071da:	4b3a      	ldr	r3, [pc, #232]	; (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d0f0      	beq.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071e6:	4b36      	ldr	r3, [pc, #216]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80071e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80071ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071ee:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d02f      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	691b      	ldr	r3, [r3, #16]
 80071fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80071fe:	693a      	ldr	r2, [r7, #16]
 8007200:	429a      	cmp	r2, r3
 8007202:	d028      	beq.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007204:	4b2e      	ldr	r3, [pc, #184]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800720c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800720e:	4b2e      	ldr	r3, [pc, #184]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007210:	2201      	movs	r2, #1
 8007212:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007214:	4b2c      	ldr	r3, [pc, #176]	; (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8007216:	2200      	movs	r2, #0
 8007218:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800721a:	4a29      	ldr	r2, [pc, #164]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007220:	4b27      	ldr	r3, [pc, #156]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007222:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007224:	f003 0301 	and.w	r3, r3, #1
 8007228:	2b01      	cmp	r3, #1
 800722a:	d114      	bne.n	8007256 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800722c:	f7fc fed0 	bl	8003fd0 <HAL_GetTick>
 8007230:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007232:	e00a      	b.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007234:	f7fc fecc 	bl	8003fd0 <HAL_GetTick>
 8007238:	4602      	mov	r2, r0
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	1ad3      	subs	r3, r2, r3
 800723e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007242:	4293      	cmp	r3, r2
 8007244:	d901      	bls.n	800724a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8007246:	2303      	movs	r3, #3
 8007248:	e034      	b.n	80072b4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800724a:	4b1d      	ldr	r3, [pc, #116]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800724c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800724e:	f003 0302 	and.w	r3, r3, #2
 8007252:	2b00      	cmp	r3, #0
 8007254:	d0ee      	beq.n	8007234 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	691b      	ldr	r3, [r3, #16]
 800725a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800725e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007262:	d10d      	bne.n	8007280 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8007264:	4b16      	ldr	r3, [pc, #88]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	691b      	ldr	r3, [r3, #16]
 8007270:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007274:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007278:	4911      	ldr	r1, [pc, #68]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800727a:	4313      	orrs	r3, r2
 800727c:	608b      	str	r3, [r1, #8]
 800727e:	e005      	b.n	800728c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8007280:	4b0f      	ldr	r3, [pc, #60]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007282:	689b      	ldr	r3, [r3, #8]
 8007284:	4a0e      	ldr	r2, [pc, #56]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007286:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800728a:	6093      	str	r3, [r2, #8]
 800728c:	4b0c      	ldr	r3, [pc, #48]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800728e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	691b      	ldr	r3, [r3, #16]
 8007294:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007298:	4909      	ldr	r1, [pc, #36]	; (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800729a:	4313      	orrs	r3, r2
 800729c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	f003 0308 	and.w	r3, r3, #8
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	7d1a      	ldrb	r2, [r3, #20]
 80072ae:	4b07      	ldr	r3, [pc, #28]	; (80072cc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 80072b0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072b2:	2300      	movs	r3, #0
}
 80072b4:	4618      	mov	r0, r3
 80072b6:	3718      	adds	r7, #24
 80072b8:	46bd      	mov	sp, r7
 80072ba:	bd80      	pop	{r7, pc}
 80072bc:	42470068 	.word	0x42470068
 80072c0:	40023800 	.word	0x40023800
 80072c4:	40007000 	.word	0x40007000
 80072c8:	42470e40 	.word	0x42470e40
 80072cc:	424711e0 	.word	0x424711e0

080072d0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80072d0:	b480      	push	{r7}
 80072d2:	b087      	sub	sp, #28
 80072d4:	af00      	add	r7, sp, #0
 80072d6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80072dc:	2300      	movs	r3, #0
 80072de:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80072e0:	2300      	movs	r3, #0
 80072e2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d140      	bne.n	8007370 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80072ee:	4b24      	ldr	r3, [pc, #144]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80072f0:	689b      	ldr	r3, [r3, #8]
 80072f2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80072f6:	60fb      	str	r3, [r7, #12]
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d005      	beq.n	800730a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2b01      	cmp	r3, #1
 8007302:	d131      	bne.n	8007368 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8007304:	4b1f      	ldr	r3, [pc, #124]	; (8007384 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8007306:	617b      	str	r3, [r7, #20]
          break;
 8007308:	e031      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800730a:	4b1d      	ldr	r3, [pc, #116]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800730c:	685b      	ldr	r3, [r3, #4]
 800730e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007312:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007316:	d109      	bne.n	800732c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8007318:	4b19      	ldr	r3, [pc, #100]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800731a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800731e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007322:	4a19      	ldr	r2, [pc, #100]	; (8007388 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8007324:	fbb2 f3f3 	udiv	r3, r2, r3
 8007328:	613b      	str	r3, [r7, #16]
 800732a:	e008      	b.n	800733e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800732c:	4b14      	ldr	r3, [pc, #80]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800732e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007332:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8007338:	fbb2 f3f3 	udiv	r3, r2, r3
 800733c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800733e:	4b10      	ldr	r3, [pc, #64]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007344:	099b      	lsrs	r3, r3, #6
 8007346:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800734a:	693b      	ldr	r3, [r7, #16]
 800734c:	fb02 f303 	mul.w	r3, r2, r3
 8007350:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8007352:	4b0b      	ldr	r3, [pc, #44]	; (8007380 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8007354:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007358:	0f1b      	lsrs	r3, r3, #28
 800735a:	f003 0307 	and.w	r3, r3, #7
 800735e:	68ba      	ldr	r2, [r7, #8]
 8007360:	fbb2 f3f3 	udiv	r3, r2, r3
 8007364:	617b      	str	r3, [r7, #20]
          break;
 8007366:	e002      	b.n	800736e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8007368:	2300      	movs	r3, #0
 800736a:	617b      	str	r3, [r7, #20]
          break;
 800736c:	bf00      	nop
        }
      }
      break;
 800736e:	bf00      	nop
    }
  }
  return frequency;
 8007370:	697b      	ldr	r3, [r7, #20]
}
 8007372:	4618      	mov	r0, r3
 8007374:	371c      	adds	r7, #28
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	40023800 	.word	0x40023800
 8007384:	00bb8000 	.word	0x00bb8000
 8007388:	007a1200 	.word	0x007a1200
 800738c:	00f42400 	.word	0x00f42400

08007390 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d101      	bne.n	80073a2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800739e:	2301      	movs	r3, #1
 80073a0:	e07b      	b.n	800749a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d108      	bne.n	80073bc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80073b2:	d009      	beq.n	80073c8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2200      	movs	r2, #0
 80073b8:	61da      	str	r2, [r3, #28]
 80073ba:	e005      	b.n	80073c8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2200      	movs	r2, #0
 80073c0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2200      	movs	r2, #0
 80073c6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80073d4:	b2db      	uxtb	r3, r3
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d106      	bne.n	80073e8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2200      	movs	r2, #0
 80073de:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	f7fc fb28 	bl	8003a38 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2202      	movs	r2, #2
 80073ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	681a      	ldr	r2, [r3, #0]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073fe:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	685b      	ldr	r3, [r3, #4]
 8007404:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8007410:	431a      	orrs	r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	68db      	ldr	r3, [r3, #12]
 8007416:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800741a:	431a      	orrs	r2, r3
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	691b      	ldr	r3, [r3, #16]
 8007420:	f003 0302 	and.w	r3, r3, #2
 8007424:	431a      	orrs	r2, r3
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	431a      	orrs	r2, r3
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	699b      	ldr	r3, [r3, #24]
 8007434:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007438:	431a      	orrs	r2, r3
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	69db      	ldr	r3, [r3, #28]
 800743e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8007442:	431a      	orrs	r2, r3
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	6a1b      	ldr	r3, [r3, #32]
 8007448:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800744c:	ea42 0103 	orr.w	r1, r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007454:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	430a      	orrs	r2, r1
 800745e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	699b      	ldr	r3, [r3, #24]
 8007464:	0c1b      	lsrs	r3, r3, #16
 8007466:	f003 0104 	and.w	r1, r3, #4
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800746e:	f003 0210 	and.w	r2, r3, #16
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	430a      	orrs	r2, r1
 8007478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	69da      	ldr	r2, [r3, #28]
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8007498:	2300      	movs	r3, #0
}
 800749a:	4618      	mov	r0, r3
 800749c:	3708      	adds	r7, #8
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}

080074a2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80074a2:	b580      	push	{r7, lr}
 80074a4:	b088      	sub	sp, #32
 80074a6:	af00      	add	r7, sp, #0
 80074a8:	60f8      	str	r0, [r7, #12]
 80074aa:	60b9      	str	r1, [r7, #8]
 80074ac:	603b      	str	r3, [r7, #0]
 80074ae:	4613      	mov	r3, r2
 80074b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80074b2:	2300      	movs	r3, #0
 80074b4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d101      	bne.n	80074c4 <HAL_SPI_Transmit+0x22>
 80074c0:	2302      	movs	r3, #2
 80074c2:	e126      	b.n	8007712 <HAL_SPI_Transmit+0x270>
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	2201      	movs	r2, #1
 80074c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80074cc:	f7fc fd80 	bl	8003fd0 <HAL_GetTick>
 80074d0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80074d2:	88fb      	ldrh	r3, [r7, #6]
 80074d4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b01      	cmp	r3, #1
 80074e0:	d002      	beq.n	80074e8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80074e2:	2302      	movs	r3, #2
 80074e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074e6:	e10b      	b.n	8007700 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80074e8:	68bb      	ldr	r3, [r7, #8]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d002      	beq.n	80074f4 <HAL_SPI_Transmit+0x52>
 80074ee:	88fb      	ldrh	r3, [r7, #6]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d102      	bne.n	80074fa <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80074f4:	2301      	movs	r3, #1
 80074f6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80074f8:	e102      	b.n	8007700 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	2203      	movs	r2, #3
 80074fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	2200      	movs	r2, #0
 8007506:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	68ba      	ldr	r2, [r7, #8]
 800750c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	88fa      	ldrh	r2, [r7, #6]
 8007512:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	88fa      	ldrh	r2, [r7, #6]
 8007518:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	2200      	movs	r2, #0
 800751e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2200      	movs	r2, #0
 8007524:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	2200      	movs	r2, #0
 800752a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	2200      	movs	r2, #0
 8007530:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2200      	movs	r2, #0
 8007536:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	689b      	ldr	r3, [r3, #8]
 800753c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007540:	d10f      	bne.n	8007562 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007550:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	681a      	ldr	r2, [r3, #0]
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007560:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007562:	68fb      	ldr	r3, [r7, #12]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756c:	2b40      	cmp	r3, #64	; 0x40
 800756e:	d007      	beq.n	8007580 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	681a      	ldr	r2, [r3, #0]
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800757e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	68db      	ldr	r3, [r3, #12]
 8007584:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007588:	d14b      	bne.n	8007622 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d002      	beq.n	8007598 <HAL_SPI_Transmit+0xf6>
 8007592:	8afb      	ldrh	r3, [r7, #22]
 8007594:	2b01      	cmp	r3, #1
 8007596:	d13e      	bne.n	8007616 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800759c:	881a      	ldrh	r2, [r3, #0]
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075a8:	1c9a      	adds	r2, r3, #2
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075b2:	b29b      	uxth	r3, r3
 80075b4:	3b01      	subs	r3, #1
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80075bc:	e02b      	b.n	8007616 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689b      	ldr	r3, [r3, #8]
 80075c4:	f003 0302 	and.w	r3, r3, #2
 80075c8:	2b02      	cmp	r3, #2
 80075ca:	d112      	bne.n	80075f2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	881a      	ldrh	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075dc:	1c9a      	adds	r2, r3, #2
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80075e6:	b29b      	uxth	r3, r3
 80075e8:	3b01      	subs	r3, #1
 80075ea:	b29a      	uxth	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	86da      	strh	r2, [r3, #54]	; 0x36
 80075f0:	e011      	b.n	8007616 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80075f2:	f7fc fced 	bl	8003fd0 <HAL_GetTick>
 80075f6:	4602      	mov	r2, r0
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	1ad3      	subs	r3, r2, r3
 80075fc:	683a      	ldr	r2, [r7, #0]
 80075fe:	429a      	cmp	r2, r3
 8007600:	d803      	bhi.n	800760a <HAL_SPI_Transmit+0x168>
 8007602:	683b      	ldr	r3, [r7, #0]
 8007604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007608:	d102      	bne.n	8007610 <HAL_SPI_Transmit+0x16e>
 800760a:	683b      	ldr	r3, [r7, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8007610:	2303      	movs	r3, #3
 8007612:	77fb      	strb	r3, [r7, #31]
          goto error;
 8007614:	e074      	b.n	8007700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800761a:	b29b      	uxth	r3, r3
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1ce      	bne.n	80075be <HAL_SPI_Transmit+0x11c>
 8007620:	e04c      	b.n	80076bc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	2b00      	cmp	r3, #0
 8007628:	d002      	beq.n	8007630 <HAL_SPI_Transmit+0x18e>
 800762a:	8afb      	ldrh	r3, [r7, #22]
 800762c:	2b01      	cmp	r3, #1
 800762e:	d140      	bne.n	80076b2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	330c      	adds	r3, #12
 800763a:	7812      	ldrb	r2, [r2, #0]
 800763c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007642:	1c5a      	adds	r2, r3, #1
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800764c:	b29b      	uxth	r3, r3
 800764e:	3b01      	subs	r3, #1
 8007650:	b29a      	uxth	r2, r3
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8007656:	e02c      	b.n	80076b2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f003 0302 	and.w	r3, r3, #2
 8007662:	2b02      	cmp	r3, #2
 8007664:	d113      	bne.n	800768e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	330c      	adds	r3, #12
 8007670:	7812      	ldrb	r2, [r2, #0]
 8007672:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007678:	1c5a      	adds	r2, r3, #1
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007682:	b29b      	uxth	r3, r3
 8007684:	3b01      	subs	r3, #1
 8007686:	b29a      	uxth	r2, r3
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	86da      	strh	r2, [r3, #54]	; 0x36
 800768c:	e011      	b.n	80076b2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800768e:	f7fc fc9f 	bl	8003fd0 <HAL_GetTick>
 8007692:	4602      	mov	r2, r0
 8007694:	69bb      	ldr	r3, [r7, #24]
 8007696:	1ad3      	subs	r3, r2, r3
 8007698:	683a      	ldr	r2, [r7, #0]
 800769a:	429a      	cmp	r2, r3
 800769c:	d803      	bhi.n	80076a6 <HAL_SPI_Transmit+0x204>
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076a4:	d102      	bne.n	80076ac <HAL_SPI_Transmit+0x20a>
 80076a6:	683b      	ldr	r3, [r7, #0]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80076ac:	2303      	movs	r3, #3
 80076ae:	77fb      	strb	r3, [r7, #31]
          goto error;
 80076b0:	e026      	b.n	8007700 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d1cd      	bne.n	8007658 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80076bc:	69ba      	ldr	r2, [r7, #24]
 80076be:	6839      	ldr	r1, [r7, #0]
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f000 f8b3 	bl	800782c <SPI_EndRxTxTransaction>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d002      	beq.n	80076d2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	2220      	movs	r2, #32
 80076d0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80076d2:	68fb      	ldr	r3, [r7, #12]
 80076d4:	689b      	ldr	r3, [r3, #8]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d10a      	bne.n	80076f0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80076da:	2300      	movs	r3, #0
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68db      	ldr	r3, [r3, #12]
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	613b      	str	r3, [r7, #16]
 80076ee:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d002      	beq.n	80076fe <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e000      	b.n	8007700 <HAL_SPI_Transmit+0x25e>
  }

error:
 80076fe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2201      	movs	r2, #1
 8007704:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8007710:	7ffb      	ldrb	r3, [r7, #31]
}
 8007712:	4618      	mov	r0, r3
 8007714:	3720      	adds	r7, #32
 8007716:	46bd      	mov	sp, r7
 8007718:	bd80      	pop	{r7, pc}
	...

0800771c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b088      	sub	sp, #32
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	603b      	str	r3, [r7, #0]
 8007728:	4613      	mov	r3, r2
 800772a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800772c:	f7fc fc50 	bl	8003fd0 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	1a9b      	subs	r3, r3, r2
 8007736:	683a      	ldr	r2, [r7, #0]
 8007738:	4413      	add	r3, r2
 800773a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800773c:	f7fc fc48 	bl	8003fd0 <HAL_GetTick>
 8007740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007742:	4b39      	ldr	r3, [pc, #228]	; (8007828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	015b      	lsls	r3, r3, #5
 8007748:	0d1b      	lsrs	r3, r3, #20
 800774a:	69fa      	ldr	r2, [r7, #28]
 800774c:	fb02 f303 	mul.w	r3, r2, r3
 8007750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007752:	e054      	b.n	80077fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007754:	683b      	ldr	r3, [r7, #0]
 8007756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800775a:	d050      	beq.n	80077fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800775c:	f7fc fc38 	bl	8003fd0 <HAL_GetTick>
 8007760:	4602      	mov	r2, r0
 8007762:	69bb      	ldr	r3, [r7, #24]
 8007764:	1ad3      	subs	r3, r2, r3
 8007766:	69fa      	ldr	r2, [r7, #28]
 8007768:	429a      	cmp	r2, r3
 800776a:	d902      	bls.n	8007772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800776c:	69fb      	ldr	r3, [r7, #28]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d13d      	bne.n	80077ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	685a      	ldr	r2, [r3, #4]
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800778a:	d111      	bne.n	80077b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	689b      	ldr	r3, [r3, #8]
 8007790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007794:	d004      	beq.n	80077a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	689b      	ldr	r3, [r3, #8]
 800779a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800779e:	d107      	bne.n	80077b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80077b8:	d10f      	bne.n	80077da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80077ba:	68fb      	ldr	r3, [r7, #12]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80077c8:	601a      	str	r2, [r3, #0]
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	681a      	ldr	r2, [r3, #0]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80077d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	2201      	movs	r2, #1
 80077de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e017      	b.n	800781e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d101      	bne.n	80077f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80077f8:	697b      	ldr	r3, [r7, #20]
 80077fa:	3b01      	subs	r3, #1
 80077fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	689a      	ldr	r2, [r3, #8]
 8007804:	68bb      	ldr	r3, [r7, #8]
 8007806:	4013      	ands	r3, r2
 8007808:	68ba      	ldr	r2, [r7, #8]
 800780a:	429a      	cmp	r2, r3
 800780c:	bf0c      	ite	eq
 800780e:	2301      	moveq	r3, #1
 8007810:	2300      	movne	r3, #0
 8007812:	b2db      	uxtb	r3, r3
 8007814:	461a      	mov	r2, r3
 8007816:	79fb      	ldrb	r3, [r7, #7]
 8007818:	429a      	cmp	r2, r3
 800781a:	d19b      	bne.n	8007754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3720      	adds	r7, #32
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	20000044 	.word	0x20000044

0800782c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b088      	sub	sp, #32
 8007830:	af02      	add	r7, sp, #8
 8007832:	60f8      	str	r0, [r7, #12]
 8007834:	60b9      	str	r1, [r7, #8]
 8007836:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007838:	4b1b      	ldr	r3, [pc, #108]	; (80078a8 <SPI_EndRxTxTransaction+0x7c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	4a1b      	ldr	r2, [pc, #108]	; (80078ac <SPI_EndRxTxTransaction+0x80>)
 800783e:	fba2 2303 	umull	r2, r3, r2, r3
 8007842:	0d5b      	lsrs	r3, r3, #21
 8007844:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007848:	fb02 f303 	mul.w	r3, r2, r3
 800784c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	685b      	ldr	r3, [r3, #4]
 8007852:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007856:	d112      	bne.n	800787e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	68bb      	ldr	r3, [r7, #8]
 800785e:	2200      	movs	r2, #0
 8007860:	2180      	movs	r1, #128	; 0x80
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff ff5a 	bl	800771c <SPI_WaitFlagStateUntilTimeout>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d016      	beq.n	800789c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007872:	f043 0220 	orr.w	r2, r3, #32
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800787a:	2303      	movs	r3, #3
 800787c:	e00f      	b.n	800789e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800787e:	697b      	ldr	r3, [r7, #20]
 8007880:	2b00      	cmp	r3, #0
 8007882:	d00a      	beq.n	800789a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	3b01      	subs	r3, #1
 8007888:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	689b      	ldr	r3, [r3, #8]
 8007890:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007894:	2b80      	cmp	r3, #128	; 0x80
 8007896:	d0f2      	beq.n	800787e <SPI_EndRxTxTransaction+0x52>
 8007898:	e000      	b.n	800789c <SPI_EndRxTxTransaction+0x70>
        break;
 800789a:	bf00      	nop
  }

  return HAL_OK;
 800789c:	2300      	movs	r3, #0
}
 800789e:	4618      	mov	r0, r3
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20000044 	.word	0x20000044
 80078ac:	165e9f81 	.word	0x165e9f81

080078b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b082      	sub	sp, #8
 80078b4:	af00      	add	r7, sp, #0
 80078b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d101      	bne.n	80078c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e03f      	b.n	8007942 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d106      	bne.n	80078dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2200      	movs	r2, #0
 80078d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078d6:	6878      	ldr	r0, [r7, #4]
 80078d8:	f7fc fa7a 	bl	8003dd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2224      	movs	r2, #36	; 0x24
 80078e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	68da      	ldr	r2, [r3, #12]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 fe81 	bl	80085fc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	691a      	ldr	r2, [r3, #16]
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007908:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	695a      	ldr	r2, [r3, #20]
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	681b      	ldr	r3, [r3, #0]
 8007914:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007918:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	68da      	ldr	r2, [r3, #12]
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007928:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2200      	movs	r2, #0
 800792e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	2220      	movs	r2, #32
 8007934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2220      	movs	r2, #32
 800793c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007940:	2300      	movs	r3, #0
}
 8007942:	4618      	mov	r0, r3
 8007944:	3708      	adds	r7, #8
 8007946:	46bd      	mov	sp, r7
 8007948:	bd80      	pop	{r7, pc}

0800794a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800794a:	b580      	push	{r7, lr}
 800794c:	b08a      	sub	sp, #40	; 0x28
 800794e:	af02      	add	r7, sp, #8
 8007950:	60f8      	str	r0, [r7, #12]
 8007952:	60b9      	str	r1, [r7, #8]
 8007954:	603b      	str	r3, [r7, #0]
 8007956:	4613      	mov	r3, r2
 8007958:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800795a:	2300      	movs	r3, #0
 800795c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b20      	cmp	r3, #32
 8007968:	d17c      	bne.n	8007a64 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d002      	beq.n	8007976 <HAL_UART_Transmit+0x2c>
 8007970:	88fb      	ldrh	r3, [r7, #6]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d101      	bne.n	800797a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007976:	2301      	movs	r3, #1
 8007978:	e075      	b.n	8007a66 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007980:	2b01      	cmp	r3, #1
 8007982:	d101      	bne.n	8007988 <HAL_UART_Transmit+0x3e>
 8007984:	2302      	movs	r3, #2
 8007986:	e06e      	b.n	8007a66 <HAL_UART_Transmit+0x11c>
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2200      	movs	r2, #0
 8007994:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	2221      	movs	r2, #33	; 0x21
 800799a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800799e:	f7fc fb17 	bl	8003fd0 <HAL_GetTick>
 80079a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	88fa      	ldrh	r2, [r7, #6]
 80079ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	689b      	ldr	r3, [r3, #8]
 80079b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079b8:	d108      	bne.n	80079cc <HAL_UART_Transmit+0x82>
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d104      	bne.n	80079cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079c2:	2300      	movs	r3, #0
 80079c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079c6:	68bb      	ldr	r3, [r7, #8]
 80079c8:	61bb      	str	r3, [r7, #24]
 80079ca:	e003      	b.n	80079d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079d0:	2300      	movs	r3, #0
 80079d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80079dc:	e02a      	b.n	8007a34 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	9300      	str	r3, [sp, #0]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	2200      	movs	r2, #0
 80079e6:	2180      	movs	r1, #128	; 0x80
 80079e8:	68f8      	ldr	r0, [r7, #12]
 80079ea:	f000 fbc1 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 80079ee:	4603      	mov	r3, r0
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d001      	beq.n	80079f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079f4:	2303      	movs	r3, #3
 80079f6:	e036      	b.n	8007a66 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079f8:	69fb      	ldr	r3, [r7, #28]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10b      	bne.n	8007a16 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	881b      	ldrh	r3, [r3, #0]
 8007a02:	461a      	mov	r2, r3
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a0c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	3302      	adds	r3, #2
 8007a12:	61bb      	str	r3, [r7, #24]
 8007a14:	e007      	b.n	8007a26 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a16:	69fb      	ldr	r3, [r7, #28]
 8007a18:	781a      	ldrb	r2, [r3, #0]
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a20:	69fb      	ldr	r3, [r7, #28]
 8007a22:	3301      	adds	r3, #1
 8007a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a2a:	b29b      	uxth	r3, r3
 8007a2c:	3b01      	subs	r3, #1
 8007a2e:	b29a      	uxth	r2, r3
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d1cf      	bne.n	80079de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	9300      	str	r3, [sp, #0]
 8007a42:	697b      	ldr	r3, [r7, #20]
 8007a44:	2200      	movs	r2, #0
 8007a46:	2140      	movs	r1, #64	; 0x40
 8007a48:	68f8      	ldr	r0, [r7, #12]
 8007a4a:	f000 fb91 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d001      	beq.n	8007a58 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e006      	b.n	8007a66 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	2220      	movs	r2, #32
 8007a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	e000      	b.n	8007a66 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a64:	2302      	movs	r3, #2
  }
}
 8007a66:	4618      	mov	r0, r3
 8007a68:	3720      	adds	r7, #32
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	bd80      	pop	{r7, pc}

08007a6e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a6e:	b580      	push	{r7, lr}
 8007a70:	b08a      	sub	sp, #40	; 0x28
 8007a72:	af02      	add	r7, sp, #8
 8007a74:	60f8      	str	r0, [r7, #12]
 8007a76:	60b9      	str	r1, [r7, #8]
 8007a78:	603b      	str	r3, [r7, #0]
 8007a7a:	4613      	mov	r3, r2
 8007a7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a7e:	2300      	movs	r3, #0
 8007a80:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	f040 808c 	bne.w	8007ba8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d002      	beq.n	8007a9c <HAL_UART_Receive+0x2e>
 8007a96:	88fb      	ldrh	r3, [r7, #6]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d101      	bne.n	8007aa0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e084      	b.n	8007baa <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa6:	2b01      	cmp	r3, #1
 8007aa8:	d101      	bne.n	8007aae <HAL_UART_Receive+0x40>
 8007aaa:	2302      	movs	r3, #2
 8007aac:	e07d      	b.n	8007baa <HAL_UART_Receive+0x13c>
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	2201      	movs	r2, #1
 8007ab2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab6:	68fb      	ldr	r3, [r7, #12]
 8007ab8:	2200      	movs	r2, #0
 8007aba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2222      	movs	r2, #34	; 0x22
 8007ac0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	2200      	movs	r2, #0
 8007ac8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007aca:	f7fc fa81 	bl	8003fd0 <HAL_GetTick>
 8007ace:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	88fa      	ldrh	r2, [r7, #6]
 8007ad4:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	88fa      	ldrh	r2, [r7, #6]
 8007ada:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	689b      	ldr	r3, [r3, #8]
 8007ae0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ae4:	d108      	bne.n	8007af8 <HAL_UART_Receive+0x8a>
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	691b      	ldr	r3, [r3, #16]
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d104      	bne.n	8007af8 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8007aee:	2300      	movs	r3, #0
 8007af0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	61bb      	str	r3, [r7, #24]
 8007af6:	e003      	b.n	8007b00 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8007af8:	68bb      	ldr	r3, [r7, #8]
 8007afa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007afc:	2300      	movs	r3, #0
 8007afe:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007b00:	68fb      	ldr	r3, [r7, #12]
 8007b02:	2200      	movs	r2, #0
 8007b04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007b08:	e043      	b.n	8007b92 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007b0a:	683b      	ldr	r3, [r7, #0]
 8007b0c:	9300      	str	r3, [sp, #0]
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	2200      	movs	r2, #0
 8007b12:	2120      	movs	r1, #32
 8007b14:	68f8      	ldr	r0, [r7, #12]
 8007b16:	f000 fb2b 	bl	8008170 <UART_WaitOnFlagUntilTimeout>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8007b20:	2303      	movs	r3, #3
 8007b22:	e042      	b.n	8007baa <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8007b24:	69fb      	ldr	r3, [r7, #28]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d10c      	bne.n	8007b44 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	685b      	ldr	r3, [r3, #4]
 8007b30:	b29b      	uxth	r3, r3
 8007b32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b36:	b29a      	uxth	r2, r3
 8007b38:	69bb      	ldr	r3, [r7, #24]
 8007b3a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007b3c:	69bb      	ldr	r3, [r7, #24]
 8007b3e:	3302      	adds	r3, #2
 8007b40:	61bb      	str	r3, [r7, #24]
 8007b42:	e01f      	b.n	8007b84 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b4c:	d007      	beq.n	8007b5e <HAL_UART_Receive+0xf0>
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d10a      	bne.n	8007b6c <HAL_UART_Receive+0xfe>
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	691b      	ldr	r3, [r3, #16]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d106      	bne.n	8007b6c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	685b      	ldr	r3, [r3, #4]
 8007b64:	b2da      	uxtb	r2, r3
 8007b66:	69fb      	ldr	r3, [r7, #28]
 8007b68:	701a      	strb	r2, [r3, #0]
 8007b6a:	e008      	b.n	8007b7e <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	685b      	ldr	r3, [r3, #4]
 8007b72:	b2db      	uxtb	r3, r3
 8007b74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007b78:	b2da      	uxtb	r2, r3
 8007b7a:	69fb      	ldr	r3, [r7, #28]
 8007b7c:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007b7e:	69fb      	ldr	r3, [r7, #28]
 8007b80:	3301      	adds	r3, #1
 8007b82:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b88:	b29b      	uxth	r3, r3
 8007b8a:	3b01      	subs	r3, #1
 8007b8c:	b29a      	uxth	r2, r3
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1b6      	bne.n	8007b0a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2220      	movs	r2, #32
 8007ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8007ba4:	2300      	movs	r3, #0
 8007ba6:	e000      	b.n	8007baa <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8007ba8:	2302      	movs	r3, #2
  }
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b084      	sub	sp, #16
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	60f8      	str	r0, [r7, #12]
 8007bba:	60b9      	str	r1, [r7, #8]
 8007bbc:	4613      	mov	r3, r2
 8007bbe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bc6:	b2db      	uxtb	r3, r3
 8007bc8:	2b20      	cmp	r3, #32
 8007bca:	d11d      	bne.n	8007c08 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <HAL_UART_Receive_IT+0x26>
 8007bd2:	88fb      	ldrh	r3, [r7, #6]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d101      	bne.n	8007bdc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007bd8:	2301      	movs	r3, #1
 8007bda:	e016      	b.n	8007c0a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bdc:	68fb      	ldr	r3, [r7, #12]
 8007bde:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007be2:	2b01      	cmp	r3, #1
 8007be4:	d101      	bne.n	8007bea <HAL_UART_Receive_IT+0x38>
 8007be6:	2302      	movs	r3, #2
 8007be8:	e00f      	b.n	8007c0a <HAL_UART_Receive_IT+0x58>
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2201      	movs	r2, #1
 8007bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	2200      	movs	r2, #0
 8007bf6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bf8:	88fb      	ldrh	r3, [r7, #6]
 8007bfa:	461a      	mov	r2, r3
 8007bfc:	68b9      	ldr	r1, [r7, #8]
 8007bfe:	68f8      	ldr	r0, [r7, #12]
 8007c00:	f000 fb24 	bl	800824c <UART_Start_Receive_IT>
 8007c04:	4603      	mov	r3, r0
 8007c06:	e000      	b.n	8007c0a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007c08:	2302      	movs	r3, #2
  }
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
	...

08007c14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b0ba      	sub	sp, #232	; 0xe8
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	68db      	ldr	r3, [r3, #12]
 8007c2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	695b      	ldr	r3, [r3, #20]
 8007c36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007c40:	2300      	movs	r3, #0
 8007c42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c4a:	f003 030f 	and.w	r3, r3, #15
 8007c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007c52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d10f      	bne.n	8007c7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c5e:	f003 0320 	and.w	r3, r3, #32
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d009      	beq.n	8007c7a <HAL_UART_IRQHandler+0x66>
 8007c66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c6a:	f003 0320 	and.w	r3, r3, #32
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d003      	beq.n	8007c7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c72:	6878      	ldr	r0, [r7, #4]
 8007c74:	f000 fc07 	bl	8008486 <UART_Receive_IT>
      return;
 8007c78:	e256      	b.n	8008128 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	f000 80de 	beq.w	8007e40 <HAL_UART_IRQHandler+0x22c>
 8007c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c88:	f003 0301 	and.w	r3, r3, #1
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d106      	bne.n	8007c9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 80d1 	beq.w	8007e40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d00b      	beq.n	8007cc2 <HAL_UART_IRQHandler+0xae>
 8007caa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d005      	beq.n	8007cc2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cba:	f043 0201 	orr.w	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cc6:	f003 0304 	and.w	r3, r3, #4
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xd2>
 8007cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cd2:	f003 0301 	and.w	r3, r3, #1
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d005      	beq.n	8007ce6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f043 0202 	orr.w	r2, r3, #2
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ce6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d00b      	beq.n	8007d0a <HAL_UART_IRQHandler+0xf6>
 8007cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f043 0204 	orr.w	r2, r3, #4
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007d0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d0e:	f003 0308 	and.w	r3, r3, #8
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d011      	beq.n	8007d3a <HAL_UART_IRQHandler+0x126>
 8007d16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d1a:	f003 0320 	and.w	r3, r3, #32
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d105      	bne.n	8007d2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007d22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007d26:	f003 0301 	and.w	r3, r3, #1
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d005      	beq.n	8007d3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d32:	f043 0208 	orr.w	r2, r3, #8
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	f000 81ed 	beq.w	800811e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d48:	f003 0320 	and.w	r3, r3, #32
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d008      	beq.n	8007d62 <HAL_UART_IRQHandler+0x14e>
 8007d50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d54:	f003 0320 	and.w	r3, r3, #32
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d002      	beq.n	8007d62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d5c:	6878      	ldr	r0, [r7, #4]
 8007d5e:	f000 fb92 	bl	8008486 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6c:	2b40      	cmp	r3, #64	; 0x40
 8007d6e:	bf0c      	ite	eq
 8007d70:	2301      	moveq	r3, #1
 8007d72:	2300      	movne	r3, #0
 8007d74:	b2db      	uxtb	r3, r3
 8007d76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d7e:	f003 0308 	and.w	r3, r3, #8
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d103      	bne.n	8007d8e <HAL_UART_IRQHandler+0x17a>
 8007d86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d04f      	beq.n	8007e2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa9a 	bl	80082c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	695b      	ldr	r3, [r3, #20]
 8007d9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9e:	2b40      	cmp	r3, #64	; 0x40
 8007da0:	d141      	bne.n	8007e26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	3314      	adds	r3, #20
 8007da8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007db0:	e853 3f00 	ldrex	r3, [r3]
 8007db4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007db8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007dc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	3314      	adds	r3, #20
 8007dca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007dce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007dda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007dde:	e841 2300 	strex	r3, r2, [r1]
 8007de2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007de6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1d9      	bne.n	8007da2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d013      	beq.n	8007e1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dfa:	4a7d      	ldr	r2, [pc, #500]	; (8007ff0 <HAL_UART_IRQHandler+0x3dc>)
 8007dfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e02:	4618      	mov	r0, r3
 8007e04:	f7fc fa95 	bl	8004332 <HAL_DMA_Abort_IT>
 8007e08:	4603      	mov	r3, r0
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	d016      	beq.n	8007e3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e14:	687a      	ldr	r2, [r7, #4]
 8007e16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e18:	4610      	mov	r0, r2
 8007e1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e1c:	e00e      	b.n	8007e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f990 	bl	8008144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e24:	e00a      	b.n	8007e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f98c 	bl	8008144 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e2c:	e006      	b.n	8007e3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 f988 	bl	8008144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	2200      	movs	r2, #0
 8007e38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e3a:	e170      	b.n	800811e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e3c:	bf00      	nop
    return;
 8007e3e:	e16e      	b.n	800811e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	f040 814a 	bne.w	80080de <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e4e:	f003 0310 	and.w	r3, r3, #16
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	f000 8143 	beq.w	80080de <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e5c:	f003 0310 	and.w	r3, r3, #16
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 813c 	beq.w	80080de <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e66:	2300      	movs	r3, #0
 8007e68:	60bb      	str	r3, [r7, #8]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	60bb      	str	r3, [r7, #8]
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	685b      	ldr	r3, [r3, #4]
 8007e78:	60bb      	str	r3, [r7, #8]
 8007e7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	695b      	ldr	r3, [r3, #20]
 8007e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e86:	2b40      	cmp	r3, #64	; 0x40
 8007e88:	f040 80b4 	bne.w	8007ff4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	685b      	ldr	r3, [r3, #4]
 8007e94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e9c:	2b00      	cmp	r3, #0
 8007e9e:	f000 8140 	beq.w	8008122 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	f080 8139 	bcs.w	8008122 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007eb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ebc:	69db      	ldr	r3, [r3, #28]
 8007ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007ec2:	f000 8088 	beq.w	8007fd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	330c      	adds	r3, #12
 8007ecc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ed4:	e853 3f00 	ldrex	r3, [r3]
 8007ed8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007edc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007ee0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	330c      	adds	r3, #12
 8007eee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ef2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ef6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007efa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007efe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007f02:	e841 2300 	strex	r3, r2, [r1]
 8007f06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007f0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d1d9      	bne.n	8007ec6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	3314      	adds	r3, #20
 8007f18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f1c:	e853 3f00 	ldrex	r3, [r3]
 8007f20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007f22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007f24:	f023 0301 	bic.w	r3, r3, #1
 8007f28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	3314      	adds	r3, #20
 8007f32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f42:	e841 2300 	strex	r3, r2, [r1]
 8007f46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d1e1      	bne.n	8007f12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	681b      	ldr	r3, [r3, #0]
 8007f52:	3314      	adds	r3, #20
 8007f54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f58:	e853 3f00 	ldrex	r3, [r3]
 8007f5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	3314      	adds	r3, #20
 8007f6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f7a:	e841 2300 	strex	r3, r2, [r1]
 8007f7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d1e3      	bne.n	8007f4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2220      	movs	r2, #32
 8007f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	330c      	adds	r3, #12
 8007f9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f9e:	e853 3f00 	ldrex	r3, [r3]
 8007fa2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007fa4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007fa6:	f023 0310 	bic.w	r3, r3, #16
 8007faa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	330c      	adds	r3, #12
 8007fb4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007fb8:	65ba      	str	r2, [r7, #88]	; 0x58
 8007fba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007fbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007fc0:	e841 2300 	strex	r3, r2, [r1]
 8007fc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d1e3      	bne.n	8007f94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	f7fc f93e 	bl	8004252 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fde:	b29b      	uxth	r3, r3
 8007fe0:	1ad3      	subs	r3, r2, r3
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 f8b6 	bl	8008158 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fec:	e099      	b.n	8008122 <HAL_UART_IRQHandler+0x50e>
 8007fee:	bf00      	nop
 8007ff0:	0800838f 	.word	0x0800838f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ffc:	b29b      	uxth	r3, r3
 8007ffe:	1ad3      	subs	r3, r2, r3
 8008000:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008008:	b29b      	uxth	r3, r3
 800800a:	2b00      	cmp	r3, #0
 800800c:	f000 808b 	beq.w	8008126 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008010:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008014:	2b00      	cmp	r3, #0
 8008016:	f000 8086 	beq.w	8008126 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	330c      	adds	r3, #12
 8008020:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800802a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800802c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008030:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	330c      	adds	r3, #12
 800803a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800803e:	647a      	str	r2, [r7, #68]	; 0x44
 8008040:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008042:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008044:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008046:	e841 2300 	strex	r3, r2, [r1]
 800804a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800804c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800804e:	2b00      	cmp	r3, #0
 8008050:	d1e3      	bne.n	800801a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	3314      	adds	r3, #20
 8008058:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805c:	e853 3f00 	ldrex	r3, [r3]
 8008060:	623b      	str	r3, [r7, #32]
   return(result);
 8008062:	6a3b      	ldr	r3, [r7, #32]
 8008064:	f023 0301 	bic.w	r3, r3, #1
 8008068:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3314      	adds	r3, #20
 8008072:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008076:	633a      	str	r2, [r7, #48]	; 0x30
 8008078:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800807c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800807e:	e841 2300 	strex	r3, r2, [r1]
 8008082:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008086:	2b00      	cmp	r3, #0
 8008088:	d1e3      	bne.n	8008052 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	2220      	movs	r2, #32
 800808e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	2200      	movs	r2, #0
 8008096:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	330c      	adds	r3, #12
 800809e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	e853 3f00 	ldrex	r3, [r3]
 80080a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0310 	bic.w	r3, r3, #16
 80080ae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	330c      	adds	r3, #12
 80080b8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80080bc:	61fa      	str	r2, [r7, #28]
 80080be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080c0:	69b9      	ldr	r1, [r7, #24]
 80080c2:	69fa      	ldr	r2, [r7, #28]
 80080c4:	e841 2300 	strex	r3, r2, [r1]
 80080c8:	617b      	str	r3, [r7, #20]
   return(result);
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d1e3      	bne.n	8008098 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080d4:	4619      	mov	r1, r3
 80080d6:	6878      	ldr	r0, [r7, #4]
 80080d8:	f000 f83e 	bl	8008158 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080dc:	e023      	b.n	8008126 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d009      	beq.n	80080fe <HAL_UART_IRQHandler+0x4ea>
 80080ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d003      	beq.n	80080fe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f000 f95d 	bl	80083b6 <UART_Transmit_IT>
    return;
 80080fc:	e014      	b.n	8008128 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008106:	2b00      	cmp	r3, #0
 8008108:	d00e      	beq.n	8008128 <HAL_UART_IRQHandler+0x514>
 800810a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800810e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008112:	2b00      	cmp	r3, #0
 8008114:	d008      	beq.n	8008128 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008116:	6878      	ldr	r0, [r7, #4]
 8008118:	f000 f99d 	bl	8008456 <UART_EndTransmit_IT>
    return;
 800811c:	e004      	b.n	8008128 <HAL_UART_IRQHandler+0x514>
    return;
 800811e:	bf00      	nop
 8008120:	e002      	b.n	8008128 <HAL_UART_IRQHandler+0x514>
      return;
 8008122:	bf00      	nop
 8008124:	e000      	b.n	8008128 <HAL_UART_IRQHandler+0x514>
      return;
 8008126:	bf00      	nop
  }
}
 8008128:	37e8      	adds	r7, #232	; 0xe8
 800812a:	46bd      	mov	sp, r7
 800812c:	bd80      	pop	{r7, pc}
 800812e:	bf00      	nop

08008130 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008138:	bf00      	nop
 800813a:	370c      	adds	r7, #12
 800813c:	46bd      	mov	sp, r7
 800813e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008142:	4770      	bx	lr

08008144 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008144:	b480      	push	{r7}
 8008146:	b083      	sub	sp, #12
 8008148:	af00      	add	r7, sp, #0
 800814a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800814c:	bf00      	nop
 800814e:	370c      	adds	r7, #12
 8008150:	46bd      	mov	sp, r7
 8008152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008156:	4770      	bx	lr

08008158 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008158:	b480      	push	{r7}
 800815a:	b083      	sub	sp, #12
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008164:	bf00      	nop
 8008166:	370c      	adds	r7, #12
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b090      	sub	sp, #64	; 0x40
 8008174:	af00      	add	r7, sp, #0
 8008176:	60f8      	str	r0, [r7, #12]
 8008178:	60b9      	str	r1, [r7, #8]
 800817a:	603b      	str	r3, [r7, #0]
 800817c:	4613      	mov	r3, r2
 800817e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008180:	e050      	b.n	8008224 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008182:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008184:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008188:	d04c      	beq.n	8008224 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800818a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800818c:	2b00      	cmp	r3, #0
 800818e:	d007      	beq.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x30>
 8008190:	f7fb ff1e 	bl	8003fd0 <HAL_GetTick>
 8008194:	4602      	mov	r2, r0
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	1ad3      	subs	r3, r2, r3
 800819a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800819c:	429a      	cmp	r2, r3
 800819e:	d241      	bcs.n	8008224 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	330c      	adds	r3, #12
 80081a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081aa:	e853 3f00 	ldrex	r3, [r3]
 80081ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80081b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	330c      	adds	r3, #12
 80081be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80081c0:	637a      	str	r2, [r7, #52]	; 0x34
 80081c2:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081c8:	e841 2300 	strex	r3, r2, [r1]
 80081cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d1e5      	bne.n	80081a0 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	3314      	adds	r3, #20
 80081da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081dc:	697b      	ldr	r3, [r7, #20]
 80081de:	e853 3f00 	ldrex	r3, [r3]
 80081e2:	613b      	str	r3, [r7, #16]
   return(result);
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	f023 0301 	bic.w	r3, r3, #1
 80081ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	3314      	adds	r3, #20
 80081f2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081f4:	623a      	str	r2, [r7, #32]
 80081f6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081f8:	69f9      	ldr	r1, [r7, #28]
 80081fa:	6a3a      	ldr	r2, [r7, #32]
 80081fc:	e841 2300 	strex	r3, r2, [r1]
 8008200:	61bb      	str	r3, [r7, #24]
   return(result);
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	2b00      	cmp	r3, #0
 8008206:	d1e5      	bne.n	80081d4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	2220      	movs	r2, #32
 800820c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	2220      	movs	r2, #32
 8008214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008218:	68fb      	ldr	r3, [r7, #12]
 800821a:	2200      	movs	r2, #0
 800821c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008220:	2303      	movs	r3, #3
 8008222:	e00f      	b.n	8008244 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681a      	ldr	r2, [r3, #0]
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	4013      	ands	r3, r2
 800822e:	68ba      	ldr	r2, [r7, #8]
 8008230:	429a      	cmp	r2, r3
 8008232:	bf0c      	ite	eq
 8008234:	2301      	moveq	r3, #1
 8008236:	2300      	movne	r3, #0
 8008238:	b2db      	uxtb	r3, r3
 800823a:	461a      	mov	r2, r3
 800823c:	79fb      	ldrb	r3, [r7, #7]
 800823e:	429a      	cmp	r2, r3
 8008240:	d09f      	beq.n	8008182 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008242:	2300      	movs	r3, #0
}
 8008244:	4618      	mov	r0, r3
 8008246:	3740      	adds	r7, #64	; 0x40
 8008248:	46bd      	mov	sp, r7
 800824a:	bd80      	pop	{r7, pc}

0800824c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800824c:	b480      	push	{r7}
 800824e:	b085      	sub	sp, #20
 8008250:	af00      	add	r7, sp, #0
 8008252:	60f8      	str	r0, [r7, #12]
 8008254:	60b9      	str	r1, [r7, #8]
 8008256:	4613      	mov	r3, r2
 8008258:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	68ba      	ldr	r2, [r7, #8]
 800825e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	88fa      	ldrh	r2, [r7, #6]
 8008264:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	88fa      	ldrh	r2, [r7, #6]
 800826a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	2200      	movs	r2, #0
 8008270:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	2222      	movs	r2, #34	; 0x22
 8008276:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	2200      	movs	r2, #0
 800827e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008282:	68fb      	ldr	r3, [r7, #12]
 8008284:	691b      	ldr	r3, [r3, #16]
 8008286:	2b00      	cmp	r3, #0
 8008288:	d007      	beq.n	800829a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	68da      	ldr	r2, [r3, #12]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008298:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	681b      	ldr	r3, [r3, #0]
 800829e:	695a      	ldr	r2, [r3, #20]
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	f042 0201 	orr.w	r2, r2, #1
 80082a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	68da      	ldr	r2, [r3, #12]
 80082b0:	68fb      	ldr	r3, [r7, #12]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	f042 0220 	orr.w	r2, r2, #32
 80082b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b095      	sub	sp, #84	; 0x54
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	681b      	ldr	r3, [r3, #0]
 80082d4:	330c      	adds	r3, #12
 80082d6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082da:	e853 3f00 	ldrex	r3, [r3]
 80082de:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082e2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	330c      	adds	r3, #12
 80082ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082f0:	643a      	str	r2, [r7, #64]	; 0x40
 80082f2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082f6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082f8:	e841 2300 	strex	r3, r2, [r1]
 80082fc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008300:	2b00      	cmp	r3, #0
 8008302:	d1e5      	bne.n	80082d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	3314      	adds	r3, #20
 800830a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800830c:	6a3b      	ldr	r3, [r7, #32]
 800830e:	e853 3f00 	ldrex	r3, [r3]
 8008312:	61fb      	str	r3, [r7, #28]
   return(result);
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	f023 0301 	bic.w	r3, r3, #1
 800831a:	64bb      	str	r3, [r7, #72]	; 0x48
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	3314      	adds	r3, #20
 8008322:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008324:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008326:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008328:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800832a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800832c:	e841 2300 	strex	r3, r2, [r1]
 8008330:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008334:	2b00      	cmp	r3, #0
 8008336:	d1e5      	bne.n	8008304 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833c:	2b01      	cmp	r3, #1
 800833e:	d119      	bne.n	8008374 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	330c      	adds	r3, #12
 8008346:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008348:	68fb      	ldr	r3, [r7, #12]
 800834a:	e853 3f00 	ldrex	r3, [r3]
 800834e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008350:	68bb      	ldr	r3, [r7, #8]
 8008352:	f023 0310 	bic.w	r3, r3, #16
 8008356:	647b      	str	r3, [r7, #68]	; 0x44
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008360:	61ba      	str	r2, [r7, #24]
 8008362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008364:	6979      	ldr	r1, [r7, #20]
 8008366:	69ba      	ldr	r2, [r7, #24]
 8008368:	e841 2300 	strex	r3, r2, [r1]
 800836c:	613b      	str	r3, [r7, #16]
   return(result);
 800836e:	693b      	ldr	r3, [r7, #16]
 8008370:	2b00      	cmp	r3, #0
 8008372:	d1e5      	bne.n	8008340 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2220      	movs	r2, #32
 8008378:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	2200      	movs	r2, #0
 8008380:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008382:	bf00      	nop
 8008384:	3754      	adds	r7, #84	; 0x54
 8008386:	46bd      	mov	sp, r7
 8008388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838c:	4770      	bx	lr

0800838e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800838e:	b580      	push	{r7, lr}
 8008390:	b084      	sub	sp, #16
 8008392:	af00      	add	r7, sp, #0
 8008394:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800839a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	2200      	movs	r2, #0
 80083a0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	2200      	movs	r2, #0
 80083a6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083a8:	68f8      	ldr	r0, [r7, #12]
 80083aa:	f7ff fecb 	bl	8008144 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083ae:	bf00      	nop
 80083b0:	3710      	adds	r7, #16
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80083b6:	b480      	push	{r7}
 80083b8:	b085      	sub	sp, #20
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083c4:	b2db      	uxtb	r3, r3
 80083c6:	2b21      	cmp	r3, #33	; 0x21
 80083c8:	d13e      	bne.n	8008448 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083d2:	d114      	bne.n	80083fe <UART_Transmit_IT+0x48>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d110      	bne.n	80083fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a1b      	ldr	r3, [r3, #32]
 80083e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	881b      	ldrh	r3, [r3, #0]
 80083e6:	461a      	mov	r2, r3
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	681b      	ldr	r3, [r3, #0]
 80083ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	6a1b      	ldr	r3, [r3, #32]
 80083f6:	1c9a      	adds	r2, r3, #2
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	621a      	str	r2, [r3, #32]
 80083fc:	e008      	b.n	8008410 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6a1b      	ldr	r3, [r3, #32]
 8008402:	1c59      	adds	r1, r3, #1
 8008404:	687a      	ldr	r2, [r7, #4]
 8008406:	6211      	str	r1, [r2, #32]
 8008408:	781a      	ldrb	r2, [r3, #0]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008414:	b29b      	uxth	r3, r3
 8008416:	3b01      	subs	r3, #1
 8008418:	b29b      	uxth	r3, r3
 800841a:	687a      	ldr	r2, [r7, #4]
 800841c:	4619      	mov	r1, r3
 800841e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008420:	2b00      	cmp	r3, #0
 8008422:	d10f      	bne.n	8008444 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	68da      	ldr	r2, [r3, #12]
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008432:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	68da      	ldr	r2, [r3, #12]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008442:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008444:	2300      	movs	r3, #0
 8008446:	e000      	b.n	800844a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008448:	2302      	movs	r3, #2
  }
}
 800844a:	4618      	mov	r0, r3
 800844c:	3714      	adds	r7, #20
 800844e:	46bd      	mov	sp, r7
 8008450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008454:	4770      	bx	lr

08008456 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b082      	sub	sp, #8
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800846c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	2220      	movs	r2, #32
 8008472:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008476:	6878      	ldr	r0, [r7, #4]
 8008478:	f7ff fe5a 	bl	8008130 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800847c:	2300      	movs	r3, #0
}
 800847e:	4618      	mov	r0, r3
 8008480:	3708      	adds	r7, #8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}

08008486 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008486:	b580      	push	{r7, lr}
 8008488:	b08c      	sub	sp, #48	; 0x30
 800848a:	af00      	add	r7, sp, #0
 800848c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008494:	b2db      	uxtb	r3, r3
 8008496:	2b22      	cmp	r3, #34	; 0x22
 8008498:	f040 80ab 	bne.w	80085f2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084a4:	d117      	bne.n	80084d6 <UART_Receive_IT+0x50>
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d113      	bne.n	80084d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80084ae:	2300      	movs	r3, #0
 80084b0:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084b6:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	b29b      	uxth	r3, r3
 80084c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80084c4:	b29a      	uxth	r2, r3
 80084c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80084c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ce:	1c9a      	adds	r2, r3, #2
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	629a      	str	r2, [r3, #40]	; 0x28
 80084d4:	e026      	b.n	8008524 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084da:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80084dc:	2300      	movs	r3, #0
 80084de:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	689b      	ldr	r3, [r3, #8]
 80084e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084e8:	d007      	beq.n	80084fa <UART_Receive_IT+0x74>
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <UART_Receive_IT+0x82>
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	691b      	ldr	r3, [r3, #16]
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d106      	bne.n	8008508 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	b2da      	uxtb	r2, r3
 8008502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008504:	701a      	strb	r2, [r3, #0]
 8008506:	e008      	b.n	800851a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	b2db      	uxtb	r3, r3
 8008510:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008514:	b2da      	uxtb	r2, r3
 8008516:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008518:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800851e:	1c5a      	adds	r2, r3, #1
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008528:	b29b      	uxth	r3, r3
 800852a:	3b01      	subs	r3, #1
 800852c:	b29b      	uxth	r3, r3
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	4619      	mov	r1, r3
 8008532:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008534:	2b00      	cmp	r3, #0
 8008536:	d15a      	bne.n	80085ee <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68da      	ldr	r2, [r3, #12]
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	681b      	ldr	r3, [r3, #0]
 8008542:	f022 0220 	bic.w	r2, r2, #32
 8008546:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	68da      	ldr	r2, [r3, #12]
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008556:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695a      	ldr	r2, [r3, #20]
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f022 0201 	bic.w	r2, r2, #1
 8008566:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	2220      	movs	r2, #32
 800856c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008574:	2b01      	cmp	r3, #1
 8008576:	d135      	bne.n	80085e4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	2200      	movs	r2, #0
 800857c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	330c      	adds	r3, #12
 8008584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	613b      	str	r3, [r7, #16]
   return(result);
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	f023 0310 	bic.w	r3, r3, #16
 8008594:	627b      	str	r3, [r7, #36]	; 0x24
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	330c      	adds	r3, #12
 800859c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859e:	623a      	str	r2, [r7, #32]
 80085a0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	69f9      	ldr	r1, [r7, #28]
 80085a4:	6a3a      	ldr	r2, [r7, #32]
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	61bb      	str	r3, [r7, #24]
   return(result);
 80085ac:	69bb      	ldr	r3, [r7, #24]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e5      	bne.n	800857e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	f003 0310 	and.w	r3, r3, #16
 80085bc:	2b10      	cmp	r3, #16
 80085be:	d10a      	bne.n	80085d6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085c0:	2300      	movs	r3, #0
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	60fb      	str	r3, [r7, #12]
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	60fb      	str	r3, [r7, #12]
 80085d4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085da:	4619      	mov	r1, r3
 80085dc:	6878      	ldr	r0, [r7, #4]
 80085de:	f7ff fdbb 	bl	8008158 <HAL_UARTEx_RxEventCallback>
 80085e2:	e002      	b.n	80085ea <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f7fb f973 	bl	80038d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085ea:	2300      	movs	r3, #0
 80085ec:	e002      	b.n	80085f4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80085ee:	2300      	movs	r3, #0
 80085f0:	e000      	b.n	80085f4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80085f2:	2302      	movs	r3, #2
  }
}
 80085f4:	4618      	mov	r0, r3
 80085f6:	3730      	adds	r7, #48	; 0x30
 80085f8:	46bd      	mov	sp, r7
 80085fa:	bd80      	pop	{r7, pc}

080085fc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008600:	b0c0      	sub	sp, #256	; 0x100
 8008602:	af00      	add	r7, sp, #0
 8008604:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	691b      	ldr	r3, [r3, #16]
 8008610:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008614:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008618:	68d9      	ldr	r1, [r3, #12]
 800861a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861e:	681a      	ldr	r2, [r3, #0]
 8008620:	ea40 0301 	orr.w	r3, r0, r1
 8008624:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008626:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862a:	689a      	ldr	r2, [r3, #8]
 800862c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008630:	691b      	ldr	r3, [r3, #16]
 8008632:	431a      	orrs	r2, r3
 8008634:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008638:	695b      	ldr	r3, [r3, #20]
 800863a:	431a      	orrs	r2, r3
 800863c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008640:	69db      	ldr	r3, [r3, #28]
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	68db      	ldr	r3, [r3, #12]
 8008650:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008654:	f021 010c 	bic.w	r1, r1, #12
 8008658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800865c:	681a      	ldr	r2, [r3, #0]
 800865e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008662:	430b      	orrs	r3, r1
 8008664:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	695b      	ldr	r3, [r3, #20]
 800866e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008676:	6999      	ldr	r1, [r3, #24]
 8008678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800867c:	681a      	ldr	r2, [r3, #0]
 800867e:	ea40 0301 	orr.w	r3, r0, r1
 8008682:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008688:	681a      	ldr	r2, [r3, #0]
 800868a:	4b8f      	ldr	r3, [pc, #572]	; (80088c8 <UART_SetConfig+0x2cc>)
 800868c:	429a      	cmp	r2, r3
 800868e:	d005      	beq.n	800869c <UART_SetConfig+0xa0>
 8008690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008694:	681a      	ldr	r2, [r3, #0]
 8008696:	4b8d      	ldr	r3, [pc, #564]	; (80088cc <UART_SetConfig+0x2d0>)
 8008698:	429a      	cmp	r2, r3
 800869a:	d104      	bne.n	80086a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800869c:	f7fe fd14 	bl	80070c8 <HAL_RCC_GetPCLK2Freq>
 80086a0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80086a4:	e003      	b.n	80086ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80086a6:	f7fe fcfb 	bl	80070a0 <HAL_RCC_GetPCLK1Freq>
 80086aa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80086ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086b2:	69db      	ldr	r3, [r3, #28]
 80086b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086b8:	f040 810c 	bne.w	80088d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80086bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086c0:	2200      	movs	r2, #0
 80086c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80086c6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80086ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80086ce:	4622      	mov	r2, r4
 80086d0:	462b      	mov	r3, r5
 80086d2:	1891      	adds	r1, r2, r2
 80086d4:	65b9      	str	r1, [r7, #88]	; 0x58
 80086d6:	415b      	adcs	r3, r3
 80086d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086de:	4621      	mov	r1, r4
 80086e0:	eb12 0801 	adds.w	r8, r2, r1
 80086e4:	4629      	mov	r1, r5
 80086e6:	eb43 0901 	adc.w	r9, r3, r1
 80086ea:	f04f 0200 	mov.w	r2, #0
 80086ee:	f04f 0300 	mov.w	r3, #0
 80086f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086fe:	4690      	mov	r8, r2
 8008700:	4699      	mov	r9, r3
 8008702:	4623      	mov	r3, r4
 8008704:	eb18 0303 	adds.w	r3, r8, r3
 8008708:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800870c:	462b      	mov	r3, r5
 800870e:	eb49 0303 	adc.w	r3, r9, r3
 8008712:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8008716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800871a:	685b      	ldr	r3, [r3, #4]
 800871c:	2200      	movs	r2, #0
 800871e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8008722:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8008726:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800872a:	460b      	mov	r3, r1
 800872c:	18db      	adds	r3, r3, r3
 800872e:	653b      	str	r3, [r7, #80]	; 0x50
 8008730:	4613      	mov	r3, r2
 8008732:	eb42 0303 	adc.w	r3, r2, r3
 8008736:	657b      	str	r3, [r7, #84]	; 0x54
 8008738:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800873c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008740:	f7f7 fdb6 	bl	80002b0 <__aeabi_uldivmod>
 8008744:	4602      	mov	r2, r0
 8008746:	460b      	mov	r3, r1
 8008748:	4b61      	ldr	r3, [pc, #388]	; (80088d0 <UART_SetConfig+0x2d4>)
 800874a:	fba3 2302 	umull	r2, r3, r3, r2
 800874e:	095b      	lsrs	r3, r3, #5
 8008750:	011c      	lsls	r4, r3, #4
 8008752:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008756:	2200      	movs	r2, #0
 8008758:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800875c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008760:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008764:	4642      	mov	r2, r8
 8008766:	464b      	mov	r3, r9
 8008768:	1891      	adds	r1, r2, r2
 800876a:	64b9      	str	r1, [r7, #72]	; 0x48
 800876c:	415b      	adcs	r3, r3
 800876e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008770:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008774:	4641      	mov	r1, r8
 8008776:	eb12 0a01 	adds.w	sl, r2, r1
 800877a:	4649      	mov	r1, r9
 800877c:	eb43 0b01 	adc.w	fp, r3, r1
 8008780:	f04f 0200 	mov.w	r2, #0
 8008784:	f04f 0300 	mov.w	r3, #0
 8008788:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800878c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008790:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008794:	4692      	mov	sl, r2
 8008796:	469b      	mov	fp, r3
 8008798:	4643      	mov	r3, r8
 800879a:	eb1a 0303 	adds.w	r3, sl, r3
 800879e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80087a2:	464b      	mov	r3, r9
 80087a4:	eb4b 0303 	adc.w	r3, fp, r3
 80087a8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80087ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087b0:	685b      	ldr	r3, [r3, #4]
 80087b2:	2200      	movs	r2, #0
 80087b4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80087b8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80087bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80087c0:	460b      	mov	r3, r1
 80087c2:	18db      	adds	r3, r3, r3
 80087c4:	643b      	str	r3, [r7, #64]	; 0x40
 80087c6:	4613      	mov	r3, r2
 80087c8:	eb42 0303 	adc.w	r3, r2, r3
 80087cc:	647b      	str	r3, [r7, #68]	; 0x44
 80087ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087d6:	f7f7 fd6b 	bl	80002b0 <__aeabi_uldivmod>
 80087da:	4602      	mov	r2, r0
 80087dc:	460b      	mov	r3, r1
 80087de:	4611      	mov	r1, r2
 80087e0:	4b3b      	ldr	r3, [pc, #236]	; (80088d0 <UART_SetConfig+0x2d4>)
 80087e2:	fba3 2301 	umull	r2, r3, r3, r1
 80087e6:	095b      	lsrs	r3, r3, #5
 80087e8:	2264      	movs	r2, #100	; 0x64
 80087ea:	fb02 f303 	mul.w	r3, r2, r3
 80087ee:	1acb      	subs	r3, r1, r3
 80087f0:	00db      	lsls	r3, r3, #3
 80087f2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087f6:	4b36      	ldr	r3, [pc, #216]	; (80088d0 <UART_SetConfig+0x2d4>)
 80087f8:	fba3 2302 	umull	r2, r3, r3, r2
 80087fc:	095b      	lsrs	r3, r3, #5
 80087fe:	005b      	lsls	r3, r3, #1
 8008800:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008804:	441c      	add	r4, r3
 8008806:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800880a:	2200      	movs	r2, #0
 800880c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008810:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8008814:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8008818:	4642      	mov	r2, r8
 800881a:	464b      	mov	r3, r9
 800881c:	1891      	adds	r1, r2, r2
 800881e:	63b9      	str	r1, [r7, #56]	; 0x38
 8008820:	415b      	adcs	r3, r3
 8008822:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008824:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008828:	4641      	mov	r1, r8
 800882a:	1851      	adds	r1, r2, r1
 800882c:	6339      	str	r1, [r7, #48]	; 0x30
 800882e:	4649      	mov	r1, r9
 8008830:	414b      	adcs	r3, r1
 8008832:	637b      	str	r3, [r7, #52]	; 0x34
 8008834:	f04f 0200 	mov.w	r2, #0
 8008838:	f04f 0300 	mov.w	r3, #0
 800883c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008840:	4659      	mov	r1, fp
 8008842:	00cb      	lsls	r3, r1, #3
 8008844:	4651      	mov	r1, sl
 8008846:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800884a:	4651      	mov	r1, sl
 800884c:	00ca      	lsls	r2, r1, #3
 800884e:	4610      	mov	r0, r2
 8008850:	4619      	mov	r1, r3
 8008852:	4603      	mov	r3, r0
 8008854:	4642      	mov	r2, r8
 8008856:	189b      	adds	r3, r3, r2
 8008858:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800885c:	464b      	mov	r3, r9
 800885e:	460a      	mov	r2, r1
 8008860:	eb42 0303 	adc.w	r3, r2, r3
 8008864:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008868:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800886c:	685b      	ldr	r3, [r3, #4]
 800886e:	2200      	movs	r2, #0
 8008870:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008874:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008878:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800887c:	460b      	mov	r3, r1
 800887e:	18db      	adds	r3, r3, r3
 8008880:	62bb      	str	r3, [r7, #40]	; 0x28
 8008882:	4613      	mov	r3, r2
 8008884:	eb42 0303 	adc.w	r3, r2, r3
 8008888:	62fb      	str	r3, [r7, #44]	; 0x2c
 800888a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800888e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008892:	f7f7 fd0d 	bl	80002b0 <__aeabi_uldivmod>
 8008896:	4602      	mov	r2, r0
 8008898:	460b      	mov	r3, r1
 800889a:	4b0d      	ldr	r3, [pc, #52]	; (80088d0 <UART_SetConfig+0x2d4>)
 800889c:	fba3 1302 	umull	r1, r3, r3, r2
 80088a0:	095b      	lsrs	r3, r3, #5
 80088a2:	2164      	movs	r1, #100	; 0x64
 80088a4:	fb01 f303 	mul.w	r3, r1, r3
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	00db      	lsls	r3, r3, #3
 80088ac:	3332      	adds	r3, #50	; 0x32
 80088ae:	4a08      	ldr	r2, [pc, #32]	; (80088d0 <UART_SetConfig+0x2d4>)
 80088b0:	fba2 2303 	umull	r2, r3, r2, r3
 80088b4:	095b      	lsrs	r3, r3, #5
 80088b6:	f003 0207 	and.w	r2, r3, #7
 80088ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4422      	add	r2, r4
 80088c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80088c4:	e106      	b.n	8008ad4 <UART_SetConfig+0x4d8>
 80088c6:	bf00      	nop
 80088c8:	40011000 	.word	0x40011000
 80088cc:	40011400 	.word	0x40011400
 80088d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088d8:	2200      	movs	r2, #0
 80088da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088de:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80088e6:	4642      	mov	r2, r8
 80088e8:	464b      	mov	r3, r9
 80088ea:	1891      	adds	r1, r2, r2
 80088ec:	6239      	str	r1, [r7, #32]
 80088ee:	415b      	adcs	r3, r3
 80088f0:	627b      	str	r3, [r7, #36]	; 0x24
 80088f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088f6:	4641      	mov	r1, r8
 80088f8:	1854      	adds	r4, r2, r1
 80088fa:	4649      	mov	r1, r9
 80088fc:	eb43 0501 	adc.w	r5, r3, r1
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	00eb      	lsls	r3, r5, #3
 800890a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800890e:	00e2      	lsls	r2, r4, #3
 8008910:	4614      	mov	r4, r2
 8008912:	461d      	mov	r5, r3
 8008914:	4643      	mov	r3, r8
 8008916:	18e3      	adds	r3, r4, r3
 8008918:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800891c:	464b      	mov	r3, r9
 800891e:	eb45 0303 	adc.w	r3, r5, r3
 8008922:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8008926:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	2200      	movs	r2, #0
 800892e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008932:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008936:	f04f 0200 	mov.w	r2, #0
 800893a:	f04f 0300 	mov.w	r3, #0
 800893e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008942:	4629      	mov	r1, r5
 8008944:	008b      	lsls	r3, r1, #2
 8008946:	4621      	mov	r1, r4
 8008948:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800894c:	4621      	mov	r1, r4
 800894e:	008a      	lsls	r2, r1, #2
 8008950:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008954:	f7f7 fcac 	bl	80002b0 <__aeabi_uldivmod>
 8008958:	4602      	mov	r2, r0
 800895a:	460b      	mov	r3, r1
 800895c:	4b60      	ldr	r3, [pc, #384]	; (8008ae0 <UART_SetConfig+0x4e4>)
 800895e:	fba3 2302 	umull	r2, r3, r3, r2
 8008962:	095b      	lsrs	r3, r3, #5
 8008964:	011c      	lsls	r4, r3, #4
 8008966:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800896a:	2200      	movs	r2, #0
 800896c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008970:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008974:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008978:	4642      	mov	r2, r8
 800897a:	464b      	mov	r3, r9
 800897c:	1891      	adds	r1, r2, r2
 800897e:	61b9      	str	r1, [r7, #24]
 8008980:	415b      	adcs	r3, r3
 8008982:	61fb      	str	r3, [r7, #28]
 8008984:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008988:	4641      	mov	r1, r8
 800898a:	1851      	adds	r1, r2, r1
 800898c:	6139      	str	r1, [r7, #16]
 800898e:	4649      	mov	r1, r9
 8008990:	414b      	adcs	r3, r1
 8008992:	617b      	str	r3, [r7, #20]
 8008994:	f04f 0200 	mov.w	r2, #0
 8008998:	f04f 0300 	mov.w	r3, #0
 800899c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80089a0:	4659      	mov	r1, fp
 80089a2:	00cb      	lsls	r3, r1, #3
 80089a4:	4651      	mov	r1, sl
 80089a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80089aa:	4651      	mov	r1, sl
 80089ac:	00ca      	lsls	r2, r1, #3
 80089ae:	4610      	mov	r0, r2
 80089b0:	4619      	mov	r1, r3
 80089b2:	4603      	mov	r3, r0
 80089b4:	4642      	mov	r2, r8
 80089b6:	189b      	adds	r3, r3, r2
 80089b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80089bc:	464b      	mov	r3, r9
 80089be:	460a      	mov	r2, r1
 80089c0:	eb42 0303 	adc.w	r3, r2, r3
 80089c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80089c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	2200      	movs	r2, #0
 80089d0:	67bb      	str	r3, [r7, #120]	; 0x78
 80089d2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	f04f 0300 	mov.w	r3, #0
 80089dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089e0:	4649      	mov	r1, r9
 80089e2:	008b      	lsls	r3, r1, #2
 80089e4:	4641      	mov	r1, r8
 80089e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ea:	4641      	mov	r1, r8
 80089ec:	008a      	lsls	r2, r1, #2
 80089ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089f2:	f7f7 fc5d 	bl	80002b0 <__aeabi_uldivmod>
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4611      	mov	r1, r2
 80089fc:	4b38      	ldr	r3, [pc, #224]	; (8008ae0 <UART_SetConfig+0x4e4>)
 80089fe:	fba3 2301 	umull	r2, r3, r3, r1
 8008a02:	095b      	lsrs	r3, r3, #5
 8008a04:	2264      	movs	r2, #100	; 0x64
 8008a06:	fb02 f303 	mul.w	r3, r2, r3
 8008a0a:	1acb      	subs	r3, r1, r3
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	3332      	adds	r3, #50	; 0x32
 8008a10:	4a33      	ldr	r2, [pc, #204]	; (8008ae0 <UART_SetConfig+0x4e4>)
 8008a12:	fba2 2303 	umull	r2, r3, r2, r3
 8008a16:	095b      	lsrs	r3, r3, #5
 8008a18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a1c:	441c      	add	r4, r3
 8008a1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008a22:	2200      	movs	r2, #0
 8008a24:	673b      	str	r3, [r7, #112]	; 0x70
 8008a26:	677a      	str	r2, [r7, #116]	; 0x74
 8008a28:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8008a2c:	4642      	mov	r2, r8
 8008a2e:	464b      	mov	r3, r9
 8008a30:	1891      	adds	r1, r2, r2
 8008a32:	60b9      	str	r1, [r7, #8]
 8008a34:	415b      	adcs	r3, r3
 8008a36:	60fb      	str	r3, [r7, #12]
 8008a38:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a3c:	4641      	mov	r1, r8
 8008a3e:	1851      	adds	r1, r2, r1
 8008a40:	6039      	str	r1, [r7, #0]
 8008a42:	4649      	mov	r1, r9
 8008a44:	414b      	adcs	r3, r1
 8008a46:	607b      	str	r3, [r7, #4]
 8008a48:	f04f 0200 	mov.w	r2, #0
 8008a4c:	f04f 0300 	mov.w	r3, #0
 8008a50:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a54:	4659      	mov	r1, fp
 8008a56:	00cb      	lsls	r3, r1, #3
 8008a58:	4651      	mov	r1, sl
 8008a5a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a5e:	4651      	mov	r1, sl
 8008a60:	00ca      	lsls	r2, r1, #3
 8008a62:	4610      	mov	r0, r2
 8008a64:	4619      	mov	r1, r3
 8008a66:	4603      	mov	r3, r0
 8008a68:	4642      	mov	r2, r8
 8008a6a:	189b      	adds	r3, r3, r2
 8008a6c:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a6e:	464b      	mov	r3, r9
 8008a70:	460a      	mov	r2, r1
 8008a72:	eb42 0303 	adc.w	r3, r2, r3
 8008a76:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a7c:	685b      	ldr	r3, [r3, #4]
 8008a7e:	2200      	movs	r2, #0
 8008a80:	663b      	str	r3, [r7, #96]	; 0x60
 8008a82:	667a      	str	r2, [r7, #100]	; 0x64
 8008a84:	f04f 0200 	mov.w	r2, #0
 8008a88:	f04f 0300 	mov.w	r3, #0
 8008a8c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a90:	4649      	mov	r1, r9
 8008a92:	008b      	lsls	r3, r1, #2
 8008a94:	4641      	mov	r1, r8
 8008a96:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a9a:	4641      	mov	r1, r8
 8008a9c:	008a      	lsls	r2, r1, #2
 8008a9e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008aa2:	f7f7 fc05 	bl	80002b0 <__aeabi_uldivmod>
 8008aa6:	4602      	mov	r2, r0
 8008aa8:	460b      	mov	r3, r1
 8008aaa:	4b0d      	ldr	r3, [pc, #52]	; (8008ae0 <UART_SetConfig+0x4e4>)
 8008aac:	fba3 1302 	umull	r1, r3, r3, r2
 8008ab0:	095b      	lsrs	r3, r3, #5
 8008ab2:	2164      	movs	r1, #100	; 0x64
 8008ab4:	fb01 f303 	mul.w	r3, r1, r3
 8008ab8:	1ad3      	subs	r3, r2, r3
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	3332      	adds	r3, #50	; 0x32
 8008abe:	4a08      	ldr	r2, [pc, #32]	; (8008ae0 <UART_SetConfig+0x4e4>)
 8008ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8008ac4:	095b      	lsrs	r3, r3, #5
 8008ac6:	f003 020f 	and.w	r2, r3, #15
 8008aca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	4422      	add	r2, r4
 8008ad2:	609a      	str	r2, [r3, #8]
}
 8008ad4:	bf00      	nop
 8008ad6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008ada:	46bd      	mov	sp, r7
 8008adc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008ae0:	51eb851f 	.word	0x51eb851f

08008ae4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008ae4:	b084      	sub	sp, #16
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b084      	sub	sp, #16
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	6078      	str	r0, [r7, #4]
 8008aee:	f107 001c 	add.w	r0, r7, #28
 8008af2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	2b01      	cmp	r3, #1
 8008afa:	d122      	bne.n	8008b42 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	68db      	ldr	r3, [r3, #12]
 8008b0c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8008b10:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b14:	687a      	ldr	r2, [r7, #4]
 8008b16:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	68db      	ldr	r3, [r3, #12]
 8008b1c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008b24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b26:	2b01      	cmp	r3, #1
 8008b28:	d105      	bne.n	8008b36 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	68db      	ldr	r3, [r3, #12]
 8008b2e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b36:	6878      	ldr	r0, [r7, #4]
 8008b38:	f001 fbee 	bl	800a318 <USB_CoreReset>
 8008b3c:	4603      	mov	r3, r0
 8008b3e:	73fb      	strb	r3, [r7, #15]
 8008b40:	e01a      	b.n	8008b78 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	68db      	ldr	r3, [r3, #12]
 8008b46:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008b4e:	6878      	ldr	r0, [r7, #4]
 8008b50:	f001 fbe2 	bl	800a318 <USB_CoreReset>
 8008b54:	4603      	mov	r3, r0
 8008b56:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008b58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d106      	bne.n	8008b6c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b62:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	639a      	str	r2, [r3, #56]	; 0x38
 8008b6a:	e005      	b.n	8008b78 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b70:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008b78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b7a:	2b01      	cmp	r3, #1
 8008b7c:	d10b      	bne.n	8008b96 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	689b      	ldr	r3, [r3, #8]
 8008b82:	f043 0206 	orr.w	r2, r3, #6
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	f043 0220 	orr.w	r2, r3, #32
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008b96:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ba2:	b004      	add	sp, #16
 8008ba4:	4770      	bx	lr
	...

08008ba8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ba8:	b480      	push	{r7}
 8008baa:	b087      	sub	sp, #28
 8008bac:	af00      	add	r7, sp, #0
 8008bae:	60f8      	str	r0, [r7, #12]
 8008bb0:	60b9      	str	r1, [r7, #8]
 8008bb2:	4613      	mov	r3, r2
 8008bb4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008bb6:	79fb      	ldrb	r3, [r7, #7]
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d165      	bne.n	8008c88 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008bbc:	68bb      	ldr	r3, [r7, #8]
 8008bbe:	4a41      	ldr	r2, [pc, #260]	; (8008cc4 <USB_SetTurnaroundTime+0x11c>)
 8008bc0:	4293      	cmp	r3, r2
 8008bc2:	d906      	bls.n	8008bd2 <USB_SetTurnaroundTime+0x2a>
 8008bc4:	68bb      	ldr	r3, [r7, #8]
 8008bc6:	4a40      	ldr	r2, [pc, #256]	; (8008cc8 <USB_SetTurnaroundTime+0x120>)
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d202      	bcs.n	8008bd2 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008bcc:	230f      	movs	r3, #15
 8008bce:	617b      	str	r3, [r7, #20]
 8008bd0:	e062      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	4a3c      	ldr	r2, [pc, #240]	; (8008cc8 <USB_SetTurnaroundTime+0x120>)
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d306      	bcc.n	8008be8 <USB_SetTurnaroundTime+0x40>
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	4a3b      	ldr	r2, [pc, #236]	; (8008ccc <USB_SetTurnaroundTime+0x124>)
 8008bde:	4293      	cmp	r3, r2
 8008be0:	d202      	bcs.n	8008be8 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008be2:	230e      	movs	r3, #14
 8008be4:	617b      	str	r3, [r7, #20]
 8008be6:	e057      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008be8:	68bb      	ldr	r3, [r7, #8]
 8008bea:	4a38      	ldr	r2, [pc, #224]	; (8008ccc <USB_SetTurnaroundTime+0x124>)
 8008bec:	4293      	cmp	r3, r2
 8008bee:	d306      	bcc.n	8008bfe <USB_SetTurnaroundTime+0x56>
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	4a37      	ldr	r2, [pc, #220]	; (8008cd0 <USB_SetTurnaroundTime+0x128>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d202      	bcs.n	8008bfe <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008bf8:	230d      	movs	r3, #13
 8008bfa:	617b      	str	r3, [r7, #20]
 8008bfc:	e04c      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008bfe:	68bb      	ldr	r3, [r7, #8]
 8008c00:	4a33      	ldr	r2, [pc, #204]	; (8008cd0 <USB_SetTurnaroundTime+0x128>)
 8008c02:	4293      	cmp	r3, r2
 8008c04:	d306      	bcc.n	8008c14 <USB_SetTurnaroundTime+0x6c>
 8008c06:	68bb      	ldr	r3, [r7, #8]
 8008c08:	4a32      	ldr	r2, [pc, #200]	; (8008cd4 <USB_SetTurnaroundTime+0x12c>)
 8008c0a:	4293      	cmp	r3, r2
 8008c0c:	d802      	bhi.n	8008c14 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008c0e:	230c      	movs	r3, #12
 8008c10:	617b      	str	r3, [r7, #20]
 8008c12:	e041      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008c14:	68bb      	ldr	r3, [r7, #8]
 8008c16:	4a2f      	ldr	r2, [pc, #188]	; (8008cd4 <USB_SetTurnaroundTime+0x12c>)
 8008c18:	4293      	cmp	r3, r2
 8008c1a:	d906      	bls.n	8008c2a <USB_SetTurnaroundTime+0x82>
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	4a2e      	ldr	r2, [pc, #184]	; (8008cd8 <USB_SetTurnaroundTime+0x130>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	d802      	bhi.n	8008c2a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008c24:	230b      	movs	r3, #11
 8008c26:	617b      	str	r3, [r7, #20]
 8008c28:	e036      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <USB_SetTurnaroundTime+0x130>)
 8008c2e:	4293      	cmp	r3, r2
 8008c30:	d906      	bls.n	8008c40 <USB_SetTurnaroundTime+0x98>
 8008c32:	68bb      	ldr	r3, [r7, #8]
 8008c34:	4a29      	ldr	r2, [pc, #164]	; (8008cdc <USB_SetTurnaroundTime+0x134>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d802      	bhi.n	8008c40 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008c3a:	230a      	movs	r3, #10
 8008c3c:	617b      	str	r3, [r7, #20]
 8008c3e:	e02b      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008c40:	68bb      	ldr	r3, [r7, #8]
 8008c42:	4a26      	ldr	r2, [pc, #152]	; (8008cdc <USB_SetTurnaroundTime+0x134>)
 8008c44:	4293      	cmp	r3, r2
 8008c46:	d906      	bls.n	8008c56 <USB_SetTurnaroundTime+0xae>
 8008c48:	68bb      	ldr	r3, [r7, #8]
 8008c4a:	4a25      	ldr	r2, [pc, #148]	; (8008ce0 <USB_SetTurnaroundTime+0x138>)
 8008c4c:	4293      	cmp	r3, r2
 8008c4e:	d202      	bcs.n	8008c56 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008c50:	2309      	movs	r3, #9
 8008c52:	617b      	str	r3, [r7, #20]
 8008c54:	e020      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008c56:	68bb      	ldr	r3, [r7, #8]
 8008c58:	4a21      	ldr	r2, [pc, #132]	; (8008ce0 <USB_SetTurnaroundTime+0x138>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d306      	bcc.n	8008c6c <USB_SetTurnaroundTime+0xc4>
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	4a20      	ldr	r2, [pc, #128]	; (8008ce4 <USB_SetTurnaroundTime+0x13c>)
 8008c62:	4293      	cmp	r3, r2
 8008c64:	d802      	bhi.n	8008c6c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008c66:	2308      	movs	r3, #8
 8008c68:	617b      	str	r3, [r7, #20]
 8008c6a:	e015      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	4a1d      	ldr	r2, [pc, #116]	; (8008ce4 <USB_SetTurnaroundTime+0x13c>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d906      	bls.n	8008c82 <USB_SetTurnaroundTime+0xda>
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	4a1c      	ldr	r2, [pc, #112]	; (8008ce8 <USB_SetTurnaroundTime+0x140>)
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	d202      	bcs.n	8008c82 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008c7c:	2307      	movs	r3, #7
 8008c7e:	617b      	str	r3, [r7, #20]
 8008c80:	e00a      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008c82:	2306      	movs	r3, #6
 8008c84:	617b      	str	r3, [r7, #20]
 8008c86:	e007      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008c88:	79fb      	ldrb	r3, [r7, #7]
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d102      	bne.n	8008c94 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008c8e:	2309      	movs	r3, #9
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	e001      	b.n	8008c98 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008c94:	2309      	movs	r3, #9
 8008c96:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	68db      	ldr	r3, [r3, #12]
 8008c9c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	68da      	ldr	r2, [r3, #12]
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	029b      	lsls	r3, r3, #10
 8008cac:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8008cb0:	431a      	orrs	r2, r3
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008cb6:	2300      	movs	r3, #0
}
 8008cb8:	4618      	mov	r0, r3
 8008cba:	371c      	adds	r7, #28
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr
 8008cc4:	00d8acbf 	.word	0x00d8acbf
 8008cc8:	00e4e1c0 	.word	0x00e4e1c0
 8008ccc:	00f42400 	.word	0x00f42400
 8008cd0:	01067380 	.word	0x01067380
 8008cd4:	011a499f 	.word	0x011a499f
 8008cd8:	01312cff 	.word	0x01312cff
 8008cdc:	014ca43f 	.word	0x014ca43f
 8008ce0:	016e3600 	.word	0x016e3600
 8008ce4:	01a6ab1f 	.word	0x01a6ab1f
 8008ce8:	01e84800 	.word	0x01e84800

08008cec <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008cec:	b480      	push	{r7}
 8008cee:	b083      	sub	sp, #12
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	689b      	ldr	r3, [r3, #8]
 8008cf8:	f043 0201 	orr.w	r2, r3, #1
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d00:	2300      	movs	r3, #0
}
 8008d02:	4618      	mov	r0, r3
 8008d04:	370c      	adds	r7, #12
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b083      	sub	sp, #12
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	689b      	ldr	r3, [r3, #8]
 8008d1a:	f023 0201 	bic.w	r2, r3, #1
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008d22:	2300      	movs	r3, #0
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	370c      	adds	r7, #12
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008d30:	b580      	push	{r7, lr}
 8008d32:	b084      	sub	sp, #16
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	6078      	str	r0, [r7, #4]
 8008d38:	460b      	mov	r3, r1
 8008d3a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	68db      	ldr	r3, [r3, #12]
 8008d44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008d4c:	78fb      	ldrb	r3, [r7, #3]
 8008d4e:	2b01      	cmp	r3, #1
 8008d50:	d115      	bne.n	8008d7e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	68db      	ldr	r3, [r3, #12]
 8008d56:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d5e:	2001      	movs	r0, #1
 8008d60:	f7fb f942 	bl	8003fe8 <HAL_Delay>
      ms++;
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	3301      	adds	r3, #1
 8008d68:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f001 fa45 	bl	800a1fa <USB_GetMode>
 8008d70:	4603      	mov	r3, r0
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d01e      	beq.n	8008db4 <USB_SetCurrentMode+0x84>
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2b31      	cmp	r3, #49	; 0x31
 8008d7a:	d9f0      	bls.n	8008d5e <USB_SetCurrentMode+0x2e>
 8008d7c:	e01a      	b.n	8008db4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008d7e:	78fb      	ldrb	r3, [r7, #3]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d115      	bne.n	8008db0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	68db      	ldr	r3, [r3, #12]
 8008d88:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008d90:	2001      	movs	r0, #1
 8008d92:	f7fb f929 	bl	8003fe8 <HAL_Delay>
      ms++;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	3301      	adds	r3, #1
 8008d9a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008d9c:	6878      	ldr	r0, [r7, #4]
 8008d9e:	f001 fa2c 	bl	800a1fa <USB_GetMode>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d005      	beq.n	8008db4 <USB_SetCurrentMode+0x84>
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	2b31      	cmp	r3, #49	; 0x31
 8008dac:	d9f0      	bls.n	8008d90 <USB_SetCurrentMode+0x60>
 8008dae:	e001      	b.n	8008db4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008db0:	2301      	movs	r3, #1
 8008db2:	e005      	b.n	8008dc0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2b32      	cmp	r3, #50	; 0x32
 8008db8:	d101      	bne.n	8008dbe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	e000      	b.n	8008dc0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008dbe:	2300      	movs	r3, #0
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3710      	adds	r7, #16
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	bd80      	pop	{r7, pc}

08008dc8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008dc8:	b084      	sub	sp, #16
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b086      	sub	sp, #24
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
 8008dd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8008dd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008dda:	2300      	movs	r3, #0
 8008ddc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008de2:	2300      	movs	r3, #0
 8008de4:	613b      	str	r3, [r7, #16]
 8008de6:	e009      	b.n	8008dfc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008de8:	687a      	ldr	r2, [r7, #4]
 8008dea:	693b      	ldr	r3, [r7, #16]
 8008dec:	3340      	adds	r3, #64	; 0x40
 8008dee:	009b      	lsls	r3, r3, #2
 8008df0:	4413      	add	r3, r2
 8008df2:	2200      	movs	r2, #0
 8008df4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008df6:	693b      	ldr	r3, [r7, #16]
 8008df8:	3301      	adds	r3, #1
 8008dfa:	613b      	str	r3, [r7, #16]
 8008dfc:	693b      	ldr	r3, [r7, #16]
 8008dfe:	2b0e      	cmp	r3, #14
 8008e00:	d9f2      	bls.n	8008de8 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008e02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d11c      	bne.n	8008e42 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e0e:	685b      	ldr	r3, [r3, #4]
 8008e10:	68fa      	ldr	r2, [r7, #12]
 8008e12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008e16:	f043 0302 	orr.w	r3, r3, #2
 8008e1a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e20:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e2c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e38:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	639a      	str	r2, [r3, #56]	; 0x38
 8008e40:	e00b      	b.n	8008e5a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e46:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e52:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e60:	461a      	mov	r2, r3
 8008e62:	2300      	movs	r3, #0
 8008e64:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008e66:	68fb      	ldr	r3, [r7, #12]
 8008e68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008e74:	461a      	mov	r2, r3
 8008e76:	680b      	ldr	r3, [r1, #0]
 8008e78:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008e7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e7c:	2b01      	cmp	r3, #1
 8008e7e:	d10c      	bne.n	8008e9a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008e80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e82:	2b00      	cmp	r3, #0
 8008e84:	d104      	bne.n	8008e90 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008e86:	2100      	movs	r1, #0
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f000 f965 	bl	8009158 <USB_SetDevSpeed>
 8008e8e:	e008      	b.n	8008ea2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008e90:	2101      	movs	r1, #1
 8008e92:	6878      	ldr	r0, [r7, #4]
 8008e94:	f000 f960 	bl	8009158 <USB_SetDevSpeed>
 8008e98:	e003      	b.n	8008ea2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008e9a:	2103      	movs	r1, #3
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f95b 	bl	8009158 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008ea2:	2110      	movs	r1, #16
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f8f3 	bl	8009090 <USB_FlushTxFifo>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d001      	beq.n	8008eb4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8008eb0:	2301      	movs	r3, #1
 8008eb2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008eb4:	6878      	ldr	r0, [r7, #4]
 8008eb6:	f000 f91f 	bl	80090f8 <USB_FlushRxFifo>
 8008eba:	4603      	mov	r3, r0
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d001      	beq.n	8008ec4 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8008ec0:	2301      	movs	r3, #1
 8008ec2:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008eca:	461a      	mov	r2, r3
 8008ecc:	2300      	movs	r3, #0
 8008ece:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008ed0:	68fb      	ldr	r3, [r7, #12]
 8008ed2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ed6:	461a      	mov	r2, r3
 8008ed8:	2300      	movs	r3, #0
 8008eda:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ee2:	461a      	mov	r2, r3
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ee8:	2300      	movs	r3, #0
 8008eea:	613b      	str	r3, [r7, #16]
 8008eec:	e043      	b.n	8008f76 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	68fb      	ldr	r3, [r7, #12]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f04:	d118      	bne.n	8008f38 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d10a      	bne.n	8008f22 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008f0c:	693b      	ldr	r3, [r7, #16]
 8008f0e:	015a      	lsls	r2, r3, #5
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	4413      	add	r3, r2
 8008f14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f18:	461a      	mov	r2, r3
 8008f1a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008f1e:	6013      	str	r3, [r2, #0]
 8008f20:	e013      	b.n	8008f4a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	015a      	lsls	r2, r3, #5
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	4413      	add	r3, r2
 8008f2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f2e:	461a      	mov	r2, r3
 8008f30:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008f34:	6013      	str	r3, [r2, #0]
 8008f36:	e008      	b.n	8008f4a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	015a      	lsls	r2, r3, #5
 8008f3c:	68fb      	ldr	r3, [r7, #12]
 8008f3e:	4413      	add	r3, r2
 8008f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f44:	461a      	mov	r2, r3
 8008f46:	2300      	movs	r3, #0
 8008f48:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008f4a:	693b      	ldr	r3, [r7, #16]
 8008f4c:	015a      	lsls	r2, r3, #5
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	4413      	add	r3, r2
 8008f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f56:	461a      	mov	r2, r3
 8008f58:	2300      	movs	r3, #0
 8008f5a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008f5c:	693b      	ldr	r3, [r7, #16]
 8008f5e:	015a      	lsls	r2, r3, #5
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	4413      	add	r3, r2
 8008f64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008f68:	461a      	mov	r2, r3
 8008f6a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008f6e:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f70:	693b      	ldr	r3, [r7, #16]
 8008f72:	3301      	adds	r3, #1
 8008f74:	613b      	str	r3, [r7, #16]
 8008f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f78:	693a      	ldr	r2, [r7, #16]
 8008f7a:	429a      	cmp	r2, r3
 8008f7c:	d3b7      	bcc.n	8008eee <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f7e:	2300      	movs	r3, #0
 8008f80:	613b      	str	r3, [r7, #16]
 8008f82:	e043      	b.n	800900c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008f84:	693b      	ldr	r3, [r7, #16]
 8008f86:	015a      	lsls	r2, r3, #5
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	4413      	add	r3, r2
 8008f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008f96:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008f9a:	d118      	bne.n	8008fce <USB_DevInit+0x206>
    {
      if (i == 0U)
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d10a      	bne.n	8008fb8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008fa2:	693b      	ldr	r3, [r7, #16]
 8008fa4:	015a      	lsls	r2, r3, #5
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	4413      	add	r3, r2
 8008faa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fae:	461a      	mov	r2, r3
 8008fb0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008fb4:	6013      	str	r3, [r2, #0]
 8008fb6:	e013      	b.n	8008fe0 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008fb8:	693b      	ldr	r3, [r7, #16]
 8008fba:	015a      	lsls	r2, r3, #5
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	4413      	add	r3, r2
 8008fc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fc4:	461a      	mov	r2, r3
 8008fc6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008fca:	6013      	str	r3, [r2, #0]
 8008fcc:	e008      	b.n	8008fe0 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008fce:	693b      	ldr	r3, [r7, #16]
 8008fd0:	015a      	lsls	r2, r3, #5
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	4413      	add	r3, r2
 8008fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fda:	461a      	mov	r2, r3
 8008fdc:	2300      	movs	r3, #0
 8008fde:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008fe0:	693b      	ldr	r3, [r7, #16]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008fec:	461a      	mov	r2, r3
 8008fee:	2300      	movs	r3, #0
 8008ff0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	015a      	lsls	r2, r3, #5
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	4413      	add	r3, r2
 8008ffa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008ffe:	461a      	mov	r2, r3
 8009000:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8009004:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8009006:	693b      	ldr	r3, [r7, #16]
 8009008:	3301      	adds	r3, #1
 800900a:	613b      	str	r3, [r7, #16]
 800900c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800900e:	693a      	ldr	r2, [r7, #16]
 8009010:	429a      	cmp	r2, r3
 8009012:	d3b7      	bcc.n	8008f84 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8009014:	68fb      	ldr	r3, [r7, #12]
 8009016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800901a:	691b      	ldr	r3, [r3, #16]
 800901c:	68fa      	ldr	r2, [r7, #12]
 800901e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8009022:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009026:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2200      	movs	r2, #0
 800902c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8009034:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009038:	2b00      	cmp	r3, #0
 800903a:	d105      	bne.n	8009048 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	699b      	ldr	r3, [r3, #24]
 8009040:	f043 0210 	orr.w	r2, r3, #16
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	699a      	ldr	r2, [r3, #24]
 800904c:	4b0f      	ldr	r3, [pc, #60]	; (800908c <USB_DevInit+0x2c4>)
 800904e:	4313      	orrs	r3, r2
 8009050:	687a      	ldr	r2, [r7, #4]
 8009052:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8009054:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	699b      	ldr	r3, [r3, #24]
 800905e:	f043 0208 	orr.w	r2, r3, #8
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8009066:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009068:	2b01      	cmp	r3, #1
 800906a:	d107      	bne.n	800907c <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	699b      	ldr	r3, [r3, #24]
 8009070:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009074:	f043 0304 	orr.w	r3, r3, #4
 8009078:	687a      	ldr	r2, [r7, #4]
 800907a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800907c:	7dfb      	ldrb	r3, [r7, #23]
}
 800907e:	4618      	mov	r0, r3
 8009080:	3718      	adds	r7, #24
 8009082:	46bd      	mov	sp, r7
 8009084:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009088:	b004      	add	sp, #16
 800908a:	4770      	bx	lr
 800908c:	803c3800 	.word	0x803c3800

08009090 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009090:	b480      	push	{r7}
 8009092:	b085      	sub	sp, #20
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
 8009098:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800909a:	2300      	movs	r3, #0
 800909c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	3301      	adds	r3, #1
 80090a2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	4a13      	ldr	r2, [pc, #76]	; (80090f4 <USB_FlushTxFifo+0x64>)
 80090a8:	4293      	cmp	r3, r2
 80090aa:	d901      	bls.n	80090b0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80090ac:	2303      	movs	r3, #3
 80090ae:	e01b      	b.n	80090e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	691b      	ldr	r3, [r3, #16]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	daf2      	bge.n	800909e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80090b8:	2300      	movs	r3, #0
 80090ba:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80090bc:	683b      	ldr	r3, [r7, #0]
 80090be:	019b      	lsls	r3, r3, #6
 80090c0:	f043 0220 	orr.w	r2, r3, #32
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	3301      	adds	r3, #1
 80090cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	4a08      	ldr	r2, [pc, #32]	; (80090f4 <USB_FlushTxFifo+0x64>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d901      	bls.n	80090da <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80090d6:	2303      	movs	r3, #3
 80090d8:	e006      	b.n	80090e8 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	691b      	ldr	r3, [r3, #16]
 80090de:	f003 0320 	and.w	r3, r3, #32
 80090e2:	2b20      	cmp	r3, #32
 80090e4:	d0f0      	beq.n	80090c8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80090e6:	2300      	movs	r3, #0
}
 80090e8:	4618      	mov	r0, r3
 80090ea:	3714      	adds	r7, #20
 80090ec:	46bd      	mov	sp, r7
 80090ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090f2:	4770      	bx	lr
 80090f4:	00030d40 	.word	0x00030d40

080090f8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80090f8:	b480      	push	{r7}
 80090fa:	b085      	sub	sp, #20
 80090fc:	af00      	add	r7, sp, #0
 80090fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8009100:	2300      	movs	r3, #0
 8009102:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009104:	68fb      	ldr	r3, [r7, #12]
 8009106:	3301      	adds	r3, #1
 8009108:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	4a11      	ldr	r2, [pc, #68]	; (8009154 <USB_FlushRxFifo+0x5c>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d901      	bls.n	8009116 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e018      	b.n	8009148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	691b      	ldr	r3, [r3, #16]
 800911a:	2b00      	cmp	r3, #0
 800911c:	daf2      	bge.n	8009104 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800911e:	2300      	movs	r3, #0
 8009120:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	2210      	movs	r2, #16
 8009126:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3301      	adds	r3, #1
 800912c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800912e:	68fb      	ldr	r3, [r7, #12]
 8009130:	4a08      	ldr	r2, [pc, #32]	; (8009154 <USB_FlushRxFifo+0x5c>)
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e006      	b.n	8009148 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800913a:	687b      	ldr	r3, [r7, #4]
 800913c:	691b      	ldr	r3, [r3, #16]
 800913e:	f003 0310 	and.w	r3, r3, #16
 8009142:	2b10      	cmp	r3, #16
 8009144:	d0f0      	beq.n	8009128 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009146:	2300      	movs	r3, #0
}
 8009148:	4618      	mov	r0, r3
 800914a:	3714      	adds	r7, #20
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	00030d40 	.word	0x00030d40

08009158 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009158:	b480      	push	{r7}
 800915a:	b085      	sub	sp, #20
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
 8009160:	460b      	mov	r3, r1
 8009162:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009168:	68fb      	ldr	r3, [r7, #12]
 800916a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	78fb      	ldrb	r3, [r7, #3]
 8009172:	68f9      	ldr	r1, [r7, #12]
 8009174:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009178:	4313      	orrs	r3, r2
 800917a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800917c:	2300      	movs	r3, #0
}
 800917e:	4618      	mov	r0, r3
 8009180:	3714      	adds	r7, #20
 8009182:	46bd      	mov	sp, r7
 8009184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009188:	4770      	bx	lr

0800918a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800918a:	b480      	push	{r7}
 800918c:	b087      	sub	sp, #28
 800918e:	af00      	add	r7, sp, #0
 8009190:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8009196:	693b      	ldr	r3, [r7, #16]
 8009198:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800919c:	689b      	ldr	r3, [r3, #8]
 800919e:	f003 0306 	and.w	r3, r3, #6
 80091a2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80091a4:	68fb      	ldr	r3, [r7, #12]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d102      	bne.n	80091b0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80091aa:	2300      	movs	r3, #0
 80091ac:	75fb      	strb	r3, [r7, #23]
 80091ae:	e00a      	b.n	80091c6 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80091b0:	68fb      	ldr	r3, [r7, #12]
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	d002      	beq.n	80091bc <USB_GetDevSpeed+0x32>
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	2b06      	cmp	r3, #6
 80091ba:	d102      	bne.n	80091c2 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80091bc:	2302      	movs	r3, #2
 80091be:	75fb      	strb	r3, [r7, #23]
 80091c0:	e001      	b.n	80091c6 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80091c2:	230f      	movs	r3, #15
 80091c4:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80091c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	371c      	adds	r7, #28
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b085      	sub	sp, #20
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
 80091dc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80091e2:	683b      	ldr	r3, [r7, #0]
 80091e4:	781b      	ldrb	r3, [r3, #0]
 80091e6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	785b      	ldrb	r3, [r3, #1]
 80091ec:	2b01      	cmp	r3, #1
 80091ee:	d13a      	bne.n	8009266 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80091f6:	69da      	ldr	r2, [r3, #28]
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	781b      	ldrb	r3, [r3, #0]
 80091fc:	f003 030f 	and.w	r3, r3, #15
 8009200:	2101      	movs	r1, #1
 8009202:	fa01 f303 	lsl.w	r3, r1, r3
 8009206:	b29b      	uxth	r3, r3
 8009208:	68f9      	ldr	r1, [r7, #12]
 800920a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800920e:	4313      	orrs	r3, r2
 8009210:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8009212:	68bb      	ldr	r3, [r7, #8]
 8009214:	015a      	lsls	r2, r3, #5
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4413      	add	r3, r2
 800921a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d155      	bne.n	80092d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009234:	681a      	ldr	r2, [r3, #0]
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	68db      	ldr	r3, [r3, #12]
 800923a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800923e:	683b      	ldr	r3, [r7, #0]
 8009240:	791b      	ldrb	r3, [r3, #4]
 8009242:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009244:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009246:	68bb      	ldr	r3, [r7, #8]
 8009248:	059b      	lsls	r3, r3, #22
 800924a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800924c:	4313      	orrs	r3, r2
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800925a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800925e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009262:	6013      	str	r3, [r2, #0]
 8009264:	e036      	b.n	80092d4 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800926c:	69da      	ldr	r2, [r3, #28]
 800926e:	683b      	ldr	r3, [r7, #0]
 8009270:	781b      	ldrb	r3, [r3, #0]
 8009272:	f003 030f 	and.w	r3, r3, #15
 8009276:	2101      	movs	r1, #1
 8009278:	fa01 f303 	lsl.w	r3, r1, r3
 800927c:	041b      	lsls	r3, r3, #16
 800927e:	68f9      	ldr	r1, [r7, #12]
 8009280:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009284:	4313      	orrs	r3, r2
 8009286:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	015a      	lsls	r2, r3, #5
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4413      	add	r3, r2
 8009290:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800929a:	2b00      	cmp	r3, #0
 800929c:	d11a      	bne.n	80092d4 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	015a      	lsls	r2, r3, #5
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	4413      	add	r3, r2
 80092a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80092aa:	681a      	ldr	r2, [r3, #0]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	68db      	ldr	r3, [r3, #12]
 80092b0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80092b4:	683b      	ldr	r3, [r7, #0]
 80092b6:	791b      	ldrb	r3, [r3, #4]
 80092b8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80092ba:	430b      	orrs	r3, r1
 80092bc:	4313      	orrs	r3, r2
 80092be:	68ba      	ldr	r2, [r7, #8]
 80092c0:	0151      	lsls	r1, r2, #5
 80092c2:	68fa      	ldr	r2, [r7, #12]
 80092c4:	440a      	add	r2, r1
 80092c6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80092ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80092d2:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80092d4:	2300      	movs	r3, #0
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3714      	adds	r7, #20
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr
	...

080092e4 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80092e4:	b480      	push	{r7}
 80092e6:	b085      	sub	sp, #20
 80092e8:	af00      	add	r7, sp, #0
 80092ea:	6078      	str	r0, [r7, #4]
 80092ec:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80092f2:	683b      	ldr	r3, [r7, #0]
 80092f4:	781b      	ldrb	r3, [r3, #0]
 80092f6:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	785b      	ldrb	r3, [r3, #1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d161      	bne.n	80093c4 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009300:	68bb      	ldr	r3, [r7, #8]
 8009302:	015a      	lsls	r2, r3, #5
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	4413      	add	r3, r2
 8009308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009312:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009316:	d11f      	bne.n	8009358 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009318:	68bb      	ldr	r3, [r7, #8]
 800931a:	015a      	lsls	r2, r3, #5
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	4413      	add	r3, r2
 8009320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009324:	681b      	ldr	r3, [r3, #0]
 8009326:	68ba      	ldr	r2, [r7, #8]
 8009328:	0151      	lsls	r1, r2, #5
 800932a:	68fa      	ldr	r2, [r7, #12]
 800932c:	440a      	add	r2, r1
 800932e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009332:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009336:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009338:	68bb      	ldr	r3, [r7, #8]
 800933a:	015a      	lsls	r2, r3, #5
 800933c:	68fb      	ldr	r3, [r7, #12]
 800933e:	4413      	add	r3, r2
 8009340:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	68ba      	ldr	r2, [r7, #8]
 8009348:	0151      	lsls	r1, r2, #5
 800934a:	68fa      	ldr	r2, [r7, #12]
 800934c:	440a      	add	r2, r1
 800934e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009352:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009356:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009358:	68fb      	ldr	r3, [r7, #12]
 800935a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800935e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	781b      	ldrb	r3, [r3, #0]
 8009364:	f003 030f 	and.w	r3, r3, #15
 8009368:	2101      	movs	r1, #1
 800936a:	fa01 f303 	lsl.w	r3, r1, r3
 800936e:	b29b      	uxth	r3, r3
 8009370:	43db      	mvns	r3, r3
 8009372:	68f9      	ldr	r1, [r7, #12]
 8009374:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009378:	4013      	ands	r3, r2
 800937a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800937c:	68fb      	ldr	r3, [r7, #12]
 800937e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009382:	69da      	ldr	r2, [r3, #28]
 8009384:	683b      	ldr	r3, [r7, #0]
 8009386:	781b      	ldrb	r3, [r3, #0]
 8009388:	f003 030f 	and.w	r3, r3, #15
 800938c:	2101      	movs	r1, #1
 800938e:	fa01 f303 	lsl.w	r3, r1, r3
 8009392:	b29b      	uxth	r3, r3
 8009394:	43db      	mvns	r3, r3
 8009396:	68f9      	ldr	r1, [r7, #12]
 8009398:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800939c:	4013      	ands	r3, r2
 800939e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80093a0:	68bb      	ldr	r3, [r7, #8]
 80093a2:	015a      	lsls	r2, r3, #5
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	4413      	add	r3, r2
 80093a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ac:	681a      	ldr	r2, [r3, #0]
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	0159      	lsls	r1, r3, #5
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	440b      	add	r3, r1
 80093b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80093ba:	4619      	mov	r1, r3
 80093bc:	4b35      	ldr	r3, [pc, #212]	; (8009494 <USB_DeactivateEndpoint+0x1b0>)
 80093be:	4013      	ands	r3, r2
 80093c0:	600b      	str	r3, [r1, #0]
 80093c2:	e060      	b.n	8009486 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80093c4:	68bb      	ldr	r3, [r7, #8]
 80093c6:	015a      	lsls	r2, r3, #5
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	4413      	add	r3, r2
 80093cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80093d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80093da:	d11f      	bne.n	800941c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	015a      	lsls	r2, r3, #5
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	4413      	add	r3, r2
 80093e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	68ba      	ldr	r2, [r7, #8]
 80093ec:	0151      	lsls	r1, r2, #5
 80093ee:	68fa      	ldr	r2, [r7, #12]
 80093f0:	440a      	add	r2, r1
 80093f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80093f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80093fa:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	015a      	lsls	r2, r3, #5
 8009400:	68fb      	ldr	r3, [r7, #12]
 8009402:	4413      	add	r3, r2
 8009404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	0151      	lsls	r1, r2, #5
 800940e:	68fa      	ldr	r2, [r7, #12]
 8009410:	440a      	add	r2, r1
 8009412:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800941a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009422:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009424:	683b      	ldr	r3, [r7, #0]
 8009426:	781b      	ldrb	r3, [r3, #0]
 8009428:	f003 030f 	and.w	r3, r3, #15
 800942c:	2101      	movs	r1, #1
 800942e:	fa01 f303 	lsl.w	r3, r1, r3
 8009432:	041b      	lsls	r3, r3, #16
 8009434:	43db      	mvns	r3, r3
 8009436:	68f9      	ldr	r1, [r7, #12]
 8009438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800943c:	4013      	ands	r3, r2
 800943e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009446:	69da      	ldr	r2, [r3, #28]
 8009448:	683b      	ldr	r3, [r7, #0]
 800944a:	781b      	ldrb	r3, [r3, #0]
 800944c:	f003 030f 	and.w	r3, r3, #15
 8009450:	2101      	movs	r1, #1
 8009452:	fa01 f303 	lsl.w	r3, r1, r3
 8009456:	041b      	lsls	r3, r3, #16
 8009458:	43db      	mvns	r3, r3
 800945a:	68f9      	ldr	r1, [r7, #12]
 800945c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009460:	4013      	ands	r3, r2
 8009462:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	015a      	lsls	r2, r3, #5
 8009468:	68fb      	ldr	r3, [r7, #12]
 800946a:	4413      	add	r3, r2
 800946c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68bb      	ldr	r3, [r7, #8]
 8009474:	0159      	lsls	r1, r3, #5
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	440b      	add	r3, r1
 800947a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800947e:	4619      	mov	r1, r3
 8009480:	4b05      	ldr	r3, [pc, #20]	; (8009498 <USB_DeactivateEndpoint+0x1b4>)
 8009482:	4013      	ands	r3, r2
 8009484:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8009486:	2300      	movs	r3, #0
}
 8009488:	4618      	mov	r0, r3
 800948a:	3714      	adds	r7, #20
 800948c:	46bd      	mov	sp, r7
 800948e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009492:	4770      	bx	lr
 8009494:	ec337800 	.word	0xec337800
 8009498:	eff37800 	.word	0xeff37800

0800949c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800949c:	b580      	push	{r7, lr}
 800949e:	b08a      	sub	sp, #40	; 0x28
 80094a0:	af02      	add	r7, sp, #8
 80094a2:	60f8      	str	r0, [r7, #12]
 80094a4:	60b9      	str	r1, [r7, #8]
 80094a6:	4613      	mov	r3, r2
 80094a8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	781b      	ldrb	r3, [r3, #0]
 80094b2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	785b      	ldrb	r3, [r3, #1]
 80094b8:	2b01      	cmp	r3, #1
 80094ba:	f040 815c 	bne.w	8009776 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	699b      	ldr	r3, [r3, #24]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d132      	bne.n	800952c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80094c6:	69bb      	ldr	r3, [r7, #24]
 80094c8:	015a      	lsls	r2, r3, #5
 80094ca:	69fb      	ldr	r3, [r7, #28]
 80094cc:	4413      	add	r3, r2
 80094ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094d2:	691b      	ldr	r3, [r3, #16]
 80094d4:	69ba      	ldr	r2, [r7, #24]
 80094d6:	0151      	lsls	r1, r2, #5
 80094d8:	69fa      	ldr	r2, [r7, #28]
 80094da:	440a      	add	r2, r1
 80094dc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80094e0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80094e4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80094e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80094f6:	691b      	ldr	r3, [r3, #16]
 80094f8:	69ba      	ldr	r2, [r7, #24]
 80094fa:	0151      	lsls	r1, r2, #5
 80094fc:	69fa      	ldr	r2, [r7, #28]
 80094fe:	440a      	add	r2, r1
 8009500:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009504:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009508:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800950a:	69bb      	ldr	r3, [r7, #24]
 800950c:	015a      	lsls	r2, r3, #5
 800950e:	69fb      	ldr	r3, [r7, #28]
 8009510:	4413      	add	r3, r2
 8009512:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	69ba      	ldr	r2, [r7, #24]
 800951a:	0151      	lsls	r1, r2, #5
 800951c:	69fa      	ldr	r2, [r7, #28]
 800951e:	440a      	add	r2, r1
 8009520:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009524:	0cdb      	lsrs	r3, r3, #19
 8009526:	04db      	lsls	r3, r3, #19
 8009528:	6113      	str	r3, [r2, #16]
 800952a:	e074      	b.n	8009616 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800952c:	69bb      	ldr	r3, [r7, #24]
 800952e:	015a      	lsls	r2, r3, #5
 8009530:	69fb      	ldr	r3, [r7, #28]
 8009532:	4413      	add	r3, r2
 8009534:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	69ba      	ldr	r2, [r7, #24]
 800953c:	0151      	lsls	r1, r2, #5
 800953e:	69fa      	ldr	r2, [r7, #28]
 8009540:	440a      	add	r2, r1
 8009542:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009546:	0cdb      	lsrs	r3, r3, #19
 8009548:	04db      	lsls	r3, r3, #19
 800954a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	015a      	lsls	r2, r3, #5
 8009550:	69fb      	ldr	r3, [r7, #28]
 8009552:	4413      	add	r3, r2
 8009554:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009558:	691b      	ldr	r3, [r3, #16]
 800955a:	69ba      	ldr	r2, [r7, #24]
 800955c:	0151      	lsls	r1, r2, #5
 800955e:	69fa      	ldr	r2, [r7, #28]
 8009560:	440a      	add	r2, r1
 8009562:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009566:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800956a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800956e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009570:	69bb      	ldr	r3, [r7, #24]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	69fb      	ldr	r3, [r7, #28]
 8009576:	4413      	add	r3, r2
 8009578:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800957c:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800957e:	68bb      	ldr	r3, [r7, #8]
 8009580:	6999      	ldr	r1, [r3, #24]
 8009582:	68bb      	ldr	r3, [r7, #8]
 8009584:	68db      	ldr	r3, [r3, #12]
 8009586:	440b      	add	r3, r1
 8009588:	1e59      	subs	r1, r3, #1
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	68db      	ldr	r3, [r3, #12]
 800958e:	fbb1 f3f3 	udiv	r3, r1, r3
 8009592:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8009594:	4b9d      	ldr	r3, [pc, #628]	; (800980c <USB_EPStartXfer+0x370>)
 8009596:	400b      	ands	r3, r1
 8009598:	69b9      	ldr	r1, [r7, #24]
 800959a:	0148      	lsls	r0, r1, #5
 800959c:	69f9      	ldr	r1, [r7, #28]
 800959e:	4401      	add	r1, r0
 80095a0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80095a4:	4313      	orrs	r3, r2
 80095a6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80095a8:	69bb      	ldr	r3, [r7, #24]
 80095aa:	015a      	lsls	r2, r3, #5
 80095ac:	69fb      	ldr	r3, [r7, #28]
 80095ae:	4413      	add	r3, r2
 80095b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095b4:	691a      	ldr	r2, [r3, #16]
 80095b6:	68bb      	ldr	r3, [r7, #8]
 80095b8:	699b      	ldr	r3, [r3, #24]
 80095ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80095be:	69b9      	ldr	r1, [r7, #24]
 80095c0:	0148      	lsls	r0, r1, #5
 80095c2:	69f9      	ldr	r1, [r7, #28]
 80095c4:	4401      	add	r1, r0
 80095c6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80095ca:	4313      	orrs	r3, r2
 80095cc:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	791b      	ldrb	r3, [r3, #4]
 80095d2:	2b01      	cmp	r3, #1
 80095d4:	d11f      	bne.n	8009616 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80095d6:	69bb      	ldr	r3, [r7, #24]
 80095d8:	015a      	lsls	r2, r3, #5
 80095da:	69fb      	ldr	r3, [r7, #28]
 80095dc:	4413      	add	r3, r2
 80095de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80095e2:	691b      	ldr	r3, [r3, #16]
 80095e4:	69ba      	ldr	r2, [r7, #24]
 80095e6:	0151      	lsls	r1, r2, #5
 80095e8:	69fa      	ldr	r2, [r7, #28]
 80095ea:	440a      	add	r2, r1
 80095ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80095f0:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80095f4:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80095f6:	69bb      	ldr	r3, [r7, #24]
 80095f8:	015a      	lsls	r2, r3, #5
 80095fa:	69fb      	ldr	r3, [r7, #28]
 80095fc:	4413      	add	r3, r2
 80095fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009602:	691b      	ldr	r3, [r3, #16]
 8009604:	69ba      	ldr	r2, [r7, #24]
 8009606:	0151      	lsls	r1, r2, #5
 8009608:	69fa      	ldr	r2, [r7, #28]
 800960a:	440a      	add	r2, r1
 800960c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009610:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009614:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8009616:	79fb      	ldrb	r3, [r7, #7]
 8009618:	2b01      	cmp	r3, #1
 800961a:	d14b      	bne.n	80096b4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800961c:	68bb      	ldr	r3, [r7, #8]
 800961e:	695b      	ldr	r3, [r3, #20]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d009      	beq.n	8009638 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	015a      	lsls	r2, r3, #5
 8009628:	69fb      	ldr	r3, [r7, #28]
 800962a:	4413      	add	r3, r2
 800962c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009630:	461a      	mov	r2, r3
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	695b      	ldr	r3, [r3, #20]
 8009636:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8009638:	68bb      	ldr	r3, [r7, #8]
 800963a:	791b      	ldrb	r3, [r3, #4]
 800963c:	2b01      	cmp	r3, #1
 800963e:	d128      	bne.n	8009692 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009646:	689b      	ldr	r3, [r3, #8]
 8009648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800964c:	2b00      	cmp	r3, #0
 800964e:	d110      	bne.n	8009672 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009650:	69bb      	ldr	r3, [r7, #24]
 8009652:	015a      	lsls	r2, r3, #5
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	4413      	add	r3, r2
 8009658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	69ba      	ldr	r2, [r7, #24]
 8009660:	0151      	lsls	r1, r2, #5
 8009662:	69fa      	ldr	r2, [r7, #28]
 8009664:	440a      	add	r2, r1
 8009666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800966a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800966e:	6013      	str	r3, [r2, #0]
 8009670:	e00f      	b.n	8009692 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	015a      	lsls	r2, r3, #5
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	4413      	add	r3, r2
 800967a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	69ba      	ldr	r2, [r7, #24]
 8009682:	0151      	lsls	r1, r2, #5
 8009684:	69fa      	ldr	r2, [r7, #28]
 8009686:	440a      	add	r2, r1
 8009688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800968c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009690:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009692:	69bb      	ldr	r3, [r7, #24]
 8009694:	015a      	lsls	r2, r3, #5
 8009696:	69fb      	ldr	r3, [r7, #28]
 8009698:	4413      	add	r3, r2
 800969a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	69ba      	ldr	r2, [r7, #24]
 80096a2:	0151      	lsls	r1, r2, #5
 80096a4:	69fa      	ldr	r2, [r7, #28]
 80096a6:	440a      	add	r2, r1
 80096a8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096b0:	6013      	str	r3, [r2, #0]
 80096b2:	e133      	b.n	800991c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80096b4:	69bb      	ldr	r3, [r7, #24]
 80096b6:	015a      	lsls	r2, r3, #5
 80096b8:	69fb      	ldr	r3, [r7, #28]
 80096ba:	4413      	add	r3, r2
 80096bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	69ba      	ldr	r2, [r7, #24]
 80096c4:	0151      	lsls	r1, r2, #5
 80096c6:	69fa      	ldr	r2, [r7, #28]
 80096c8:	440a      	add	r2, r1
 80096ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80096ce:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80096d2:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80096d4:	68bb      	ldr	r3, [r7, #8]
 80096d6:	791b      	ldrb	r3, [r3, #4]
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d015      	beq.n	8009708 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80096dc:	68bb      	ldr	r3, [r7, #8]
 80096de:	699b      	ldr	r3, [r3, #24]
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 811b 	beq.w	800991c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80096e6:	69fb      	ldr	r3, [r7, #28]
 80096e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80096ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80096ee:	68bb      	ldr	r3, [r7, #8]
 80096f0:	781b      	ldrb	r3, [r3, #0]
 80096f2:	f003 030f 	and.w	r3, r3, #15
 80096f6:	2101      	movs	r1, #1
 80096f8:	fa01 f303 	lsl.w	r3, r1, r3
 80096fc:	69f9      	ldr	r1, [r7, #28]
 80096fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009702:	4313      	orrs	r3, r2
 8009704:	634b      	str	r3, [r1, #52]	; 0x34
 8009706:	e109      	b.n	800991c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800970e:	689b      	ldr	r3, [r3, #8]
 8009710:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009714:	2b00      	cmp	r3, #0
 8009716:	d110      	bne.n	800973a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	015a      	lsls	r2, r3, #5
 800971c:	69fb      	ldr	r3, [r7, #28]
 800971e:	4413      	add	r3, r2
 8009720:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	69ba      	ldr	r2, [r7, #24]
 8009728:	0151      	lsls	r1, r2, #5
 800972a:	69fa      	ldr	r2, [r7, #28]
 800972c:	440a      	add	r2, r1
 800972e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009732:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8009736:	6013      	str	r3, [r2, #0]
 8009738:	e00f      	b.n	800975a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	015a      	lsls	r2, r3, #5
 800973e:	69fb      	ldr	r3, [r7, #28]
 8009740:	4413      	add	r3, r2
 8009742:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	69ba      	ldr	r2, [r7, #24]
 800974a:	0151      	lsls	r1, r2, #5
 800974c:	69fa      	ldr	r2, [r7, #28]
 800974e:	440a      	add	r2, r1
 8009750:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009754:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009758:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800975a:	68bb      	ldr	r3, [r7, #8]
 800975c:	6919      	ldr	r1, [r3, #16]
 800975e:	68bb      	ldr	r3, [r7, #8]
 8009760:	781a      	ldrb	r2, [r3, #0]
 8009762:	68bb      	ldr	r3, [r7, #8]
 8009764:	699b      	ldr	r3, [r3, #24]
 8009766:	b298      	uxth	r0, r3
 8009768:	79fb      	ldrb	r3, [r7, #7]
 800976a:	9300      	str	r3, [sp, #0]
 800976c:	4603      	mov	r3, r0
 800976e:	68f8      	ldr	r0, [r7, #12]
 8009770:	f000 fade 	bl	8009d30 <USB_WritePacket>
 8009774:	e0d2      	b.n	800991c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009776:	69bb      	ldr	r3, [r7, #24]
 8009778:	015a      	lsls	r2, r3, #5
 800977a:	69fb      	ldr	r3, [r7, #28]
 800977c:	4413      	add	r3, r2
 800977e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009782:	691b      	ldr	r3, [r3, #16]
 8009784:	69ba      	ldr	r2, [r7, #24]
 8009786:	0151      	lsls	r1, r2, #5
 8009788:	69fa      	ldr	r2, [r7, #28]
 800978a:	440a      	add	r2, r1
 800978c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009790:	0cdb      	lsrs	r3, r3, #19
 8009792:	04db      	lsls	r3, r3, #19
 8009794:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009796:	69bb      	ldr	r3, [r7, #24]
 8009798:	015a      	lsls	r2, r3, #5
 800979a:	69fb      	ldr	r3, [r7, #28]
 800979c:	4413      	add	r3, r2
 800979e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097a2:	691b      	ldr	r3, [r3, #16]
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	0151      	lsls	r1, r2, #5
 80097a8:	69fa      	ldr	r2, [r7, #28]
 80097aa:	440a      	add	r2, r1
 80097ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80097b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80097b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80097b8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80097ba:	68bb      	ldr	r3, [r7, #8]
 80097bc:	699b      	ldr	r3, [r3, #24]
 80097be:	2b00      	cmp	r3, #0
 80097c0:	d126      	bne.n	8009810 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097ce:	691a      	ldr	r2, [r3, #16]
 80097d0:	68bb      	ldr	r3, [r7, #8]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097d8:	69b9      	ldr	r1, [r7, #24]
 80097da:	0148      	lsls	r0, r1, #5
 80097dc:	69f9      	ldr	r1, [r7, #28]
 80097de:	4401      	add	r1, r0
 80097e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80097e4:	4313      	orrs	r3, r2
 80097e6:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097e8:	69bb      	ldr	r3, [r7, #24]
 80097ea:	015a      	lsls	r2, r3, #5
 80097ec:	69fb      	ldr	r3, [r7, #28]
 80097ee:	4413      	add	r3, r2
 80097f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80097f4:	691b      	ldr	r3, [r3, #16]
 80097f6:	69ba      	ldr	r2, [r7, #24]
 80097f8:	0151      	lsls	r1, r2, #5
 80097fa:	69fa      	ldr	r2, [r7, #28]
 80097fc:	440a      	add	r2, r1
 80097fe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009802:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009806:	6113      	str	r3, [r2, #16]
 8009808:	e03a      	b.n	8009880 <USB_EPStartXfer+0x3e4>
 800980a:	bf00      	nop
 800980c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	699a      	ldr	r2, [r3, #24]
 8009814:	68bb      	ldr	r3, [r7, #8]
 8009816:	68db      	ldr	r3, [r3, #12]
 8009818:	4413      	add	r3, r2
 800981a:	1e5a      	subs	r2, r3, #1
 800981c:	68bb      	ldr	r3, [r7, #8]
 800981e:	68db      	ldr	r3, [r3, #12]
 8009820:	fbb2 f3f3 	udiv	r3, r2, r3
 8009824:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	68db      	ldr	r3, [r3, #12]
 800982a:	8afa      	ldrh	r2, [r7, #22]
 800982c:	fb03 f202 	mul.w	r2, r3, r2
 8009830:	68bb      	ldr	r3, [r7, #8]
 8009832:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009834:	69bb      	ldr	r3, [r7, #24]
 8009836:	015a      	lsls	r2, r3, #5
 8009838:	69fb      	ldr	r3, [r7, #28]
 800983a:	4413      	add	r3, r2
 800983c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009840:	691a      	ldr	r2, [r3, #16]
 8009842:	8afb      	ldrh	r3, [r7, #22]
 8009844:	04d9      	lsls	r1, r3, #19
 8009846:	4b38      	ldr	r3, [pc, #224]	; (8009928 <USB_EPStartXfer+0x48c>)
 8009848:	400b      	ands	r3, r1
 800984a:	69b9      	ldr	r1, [r7, #24]
 800984c:	0148      	lsls	r0, r1, #5
 800984e:	69f9      	ldr	r1, [r7, #28]
 8009850:	4401      	add	r1, r0
 8009852:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009856:	4313      	orrs	r3, r2
 8009858:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800985a:	69bb      	ldr	r3, [r7, #24]
 800985c:	015a      	lsls	r2, r3, #5
 800985e:	69fb      	ldr	r3, [r7, #28]
 8009860:	4413      	add	r3, r2
 8009862:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009866:	691a      	ldr	r2, [r3, #16]
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	69db      	ldr	r3, [r3, #28]
 800986c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009870:	69b9      	ldr	r1, [r7, #24]
 8009872:	0148      	lsls	r0, r1, #5
 8009874:	69f9      	ldr	r1, [r7, #28]
 8009876:	4401      	add	r1, r0
 8009878:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800987c:	4313      	orrs	r3, r2
 800987e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009880:	79fb      	ldrb	r3, [r7, #7]
 8009882:	2b01      	cmp	r3, #1
 8009884:	d10d      	bne.n	80098a2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009886:	68bb      	ldr	r3, [r7, #8]
 8009888:	691b      	ldr	r3, [r3, #16]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d009      	beq.n	80098a2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	6919      	ldr	r1, [r3, #16]
 8009892:	69bb      	ldr	r3, [r7, #24]
 8009894:	015a      	lsls	r2, r3, #5
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	4413      	add	r3, r2
 800989a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800989e:	460a      	mov	r2, r1
 80098a0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80098a2:	68bb      	ldr	r3, [r7, #8]
 80098a4:	791b      	ldrb	r3, [r3, #4]
 80098a6:	2b01      	cmp	r3, #1
 80098a8:	d128      	bne.n	80098fc <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80098b0:	689b      	ldr	r3, [r3, #8]
 80098b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	d110      	bne.n	80098dc <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80098ba:	69bb      	ldr	r3, [r7, #24]
 80098bc:	015a      	lsls	r2, r3, #5
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	4413      	add	r3, r2
 80098c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69ba      	ldr	r2, [r7, #24]
 80098ca:	0151      	lsls	r1, r2, #5
 80098cc:	69fa      	ldr	r2, [r7, #28]
 80098ce:	440a      	add	r2, r1
 80098d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80098d8:	6013      	str	r3, [r2, #0]
 80098da:	e00f      	b.n	80098fc <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80098dc:	69bb      	ldr	r3, [r7, #24]
 80098de:	015a      	lsls	r2, r3, #5
 80098e0:	69fb      	ldr	r3, [r7, #28]
 80098e2:	4413      	add	r3, r2
 80098e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	69ba      	ldr	r2, [r7, #24]
 80098ec:	0151      	lsls	r1, r2, #5
 80098ee:	69fa      	ldr	r2, [r7, #28]
 80098f0:	440a      	add	r2, r1
 80098f2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80098f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80098fa:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098fc:	69bb      	ldr	r3, [r7, #24]
 80098fe:	015a      	lsls	r2, r3, #5
 8009900:	69fb      	ldr	r3, [r7, #28]
 8009902:	4413      	add	r3, r2
 8009904:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	69ba      	ldr	r2, [r7, #24]
 800990c:	0151      	lsls	r1, r2, #5
 800990e:	69fa      	ldr	r2, [r7, #28]
 8009910:	440a      	add	r2, r1
 8009912:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009916:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800991a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800991c:	2300      	movs	r3, #0
}
 800991e:	4618      	mov	r0, r3
 8009920:	3720      	adds	r7, #32
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	1ff80000 	.word	0x1ff80000

0800992c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800992c:	b480      	push	{r7}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	4613      	mov	r3, r2
 8009938:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800993e:	68bb      	ldr	r3, [r7, #8]
 8009940:	781b      	ldrb	r3, [r3, #0]
 8009942:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009944:	68bb      	ldr	r3, [r7, #8]
 8009946:	785b      	ldrb	r3, [r3, #1]
 8009948:	2b01      	cmp	r3, #1
 800994a:	f040 80ce 	bne.w	8009aea <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800994e:	68bb      	ldr	r3, [r7, #8]
 8009950:	699b      	ldr	r3, [r3, #24]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d132      	bne.n	80099bc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009956:	693b      	ldr	r3, [r7, #16]
 8009958:	015a      	lsls	r2, r3, #5
 800995a:	697b      	ldr	r3, [r7, #20]
 800995c:	4413      	add	r3, r2
 800995e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	693a      	ldr	r2, [r7, #16]
 8009966:	0151      	lsls	r1, r2, #5
 8009968:	697a      	ldr	r2, [r7, #20]
 800996a:	440a      	add	r2, r1
 800996c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009970:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009974:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009978:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800997a:	693b      	ldr	r3, [r7, #16]
 800997c:	015a      	lsls	r2, r3, #5
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	4413      	add	r3, r2
 8009982:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	693a      	ldr	r2, [r7, #16]
 800998a:	0151      	lsls	r1, r2, #5
 800998c:	697a      	ldr	r2, [r7, #20]
 800998e:	440a      	add	r2, r1
 8009990:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009994:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009998:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800999a:	693b      	ldr	r3, [r7, #16]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	697b      	ldr	r3, [r7, #20]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099a6:	691b      	ldr	r3, [r3, #16]
 80099a8:	693a      	ldr	r2, [r7, #16]
 80099aa:	0151      	lsls	r1, r2, #5
 80099ac:	697a      	ldr	r2, [r7, #20]
 80099ae:	440a      	add	r2, r1
 80099b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099b4:	0cdb      	lsrs	r3, r3, #19
 80099b6:	04db      	lsls	r3, r3, #19
 80099b8:	6113      	str	r3, [r2, #16]
 80099ba:	e04e      	b.n	8009a5a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80099bc:	693b      	ldr	r3, [r7, #16]
 80099be:	015a      	lsls	r2, r3, #5
 80099c0:	697b      	ldr	r3, [r7, #20]
 80099c2:	4413      	add	r3, r2
 80099c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099c8:	691b      	ldr	r3, [r3, #16]
 80099ca:	693a      	ldr	r2, [r7, #16]
 80099cc:	0151      	lsls	r1, r2, #5
 80099ce:	697a      	ldr	r2, [r7, #20]
 80099d0:	440a      	add	r2, r1
 80099d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099d6:	0cdb      	lsrs	r3, r3, #19
 80099d8:	04db      	lsls	r3, r3, #19
 80099da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	015a      	lsls	r2, r3, #5
 80099e0:	697b      	ldr	r3, [r7, #20]
 80099e2:	4413      	add	r3, r2
 80099e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80099e8:	691b      	ldr	r3, [r3, #16]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	0151      	lsls	r1, r2, #5
 80099ee:	697a      	ldr	r2, [r7, #20]
 80099f0:	440a      	add	r2, r1
 80099f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80099f6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80099fa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80099fe:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8009a00:	68bb      	ldr	r3, [r7, #8]
 8009a02:	699a      	ldr	r2, [r3, #24]
 8009a04:	68bb      	ldr	r3, [r7, #8]
 8009a06:	68db      	ldr	r3, [r3, #12]
 8009a08:	429a      	cmp	r2, r3
 8009a0a:	d903      	bls.n	8009a14 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	68da      	ldr	r2, [r3, #12]
 8009a10:	68bb      	ldr	r3, [r7, #8]
 8009a12:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009a14:	693b      	ldr	r3, [r7, #16]
 8009a16:	015a      	lsls	r2, r3, #5
 8009a18:	697b      	ldr	r3, [r7, #20]
 8009a1a:	4413      	add	r3, r2
 8009a1c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a20:	691b      	ldr	r3, [r3, #16]
 8009a22:	693a      	ldr	r2, [r7, #16]
 8009a24:	0151      	lsls	r1, r2, #5
 8009a26:	697a      	ldr	r2, [r7, #20]
 8009a28:	440a      	add	r2, r1
 8009a2a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a2e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009a32:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8009a34:	693b      	ldr	r3, [r7, #16]
 8009a36:	015a      	lsls	r2, r3, #5
 8009a38:	697b      	ldr	r3, [r7, #20]
 8009a3a:	4413      	add	r3, r2
 8009a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a40:	691a      	ldr	r2, [r3, #16]
 8009a42:	68bb      	ldr	r3, [r7, #8]
 8009a44:	699b      	ldr	r3, [r3, #24]
 8009a46:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009a4a:	6939      	ldr	r1, [r7, #16]
 8009a4c:	0148      	lsls	r0, r1, #5
 8009a4e:	6979      	ldr	r1, [r7, #20]
 8009a50:	4401      	add	r1, r0
 8009a52:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8009a56:	4313      	orrs	r3, r2
 8009a58:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009a5a:	79fb      	ldrb	r3, [r7, #7]
 8009a5c:	2b01      	cmp	r3, #1
 8009a5e:	d11e      	bne.n	8009a9e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8009a60:	68bb      	ldr	r3, [r7, #8]
 8009a62:	695b      	ldr	r3, [r3, #20]
 8009a64:	2b00      	cmp	r3, #0
 8009a66:	d009      	beq.n	8009a7c <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	015a      	lsls	r2, r3, #5
 8009a6c:	697b      	ldr	r3, [r7, #20]
 8009a6e:	4413      	add	r3, r2
 8009a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a74:	461a      	mov	r2, r3
 8009a76:	68bb      	ldr	r3, [r7, #8]
 8009a78:	695b      	ldr	r3, [r3, #20]
 8009a7a:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a7c:	693b      	ldr	r3, [r7, #16]
 8009a7e:	015a      	lsls	r2, r3, #5
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	4413      	add	r3, r2
 8009a84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	693a      	ldr	r2, [r7, #16]
 8009a8c:	0151      	lsls	r1, r2, #5
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	440a      	add	r2, r1
 8009a92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009a96:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009a9a:	6013      	str	r3, [r2, #0]
 8009a9c:	e097      	b.n	8009bce <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009a9e:	693b      	ldr	r3, [r7, #16]
 8009aa0:	015a      	lsls	r2, r3, #5
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	4413      	add	r3, r2
 8009aa6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	693a      	ldr	r2, [r7, #16]
 8009aae:	0151      	lsls	r1, r2, #5
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	440a      	add	r2, r1
 8009ab4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009ab8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009abc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	699b      	ldr	r3, [r3, #24]
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	f000 8083 	beq.w	8009bce <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009ac8:	697b      	ldr	r3, [r7, #20]
 8009aca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8009ace:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009ad0:	68bb      	ldr	r3, [r7, #8]
 8009ad2:	781b      	ldrb	r3, [r3, #0]
 8009ad4:	f003 030f 	and.w	r3, r3, #15
 8009ad8:	2101      	movs	r1, #1
 8009ada:	fa01 f303 	lsl.w	r3, r1, r3
 8009ade:	6979      	ldr	r1, [r7, #20]
 8009ae0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	634b      	str	r3, [r1, #52]	; 0x34
 8009ae8:	e071      	b.n	8009bce <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8009aea:	693b      	ldr	r3, [r7, #16]
 8009aec:	015a      	lsls	r2, r3, #5
 8009aee:	697b      	ldr	r3, [r7, #20]
 8009af0:	4413      	add	r3, r2
 8009af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009af6:	691b      	ldr	r3, [r3, #16]
 8009af8:	693a      	ldr	r2, [r7, #16]
 8009afa:	0151      	lsls	r1, r2, #5
 8009afc:	697a      	ldr	r2, [r7, #20]
 8009afe:	440a      	add	r2, r1
 8009b00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b04:	0cdb      	lsrs	r3, r3, #19
 8009b06:	04db      	lsls	r3, r3, #19
 8009b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009b0a:	693b      	ldr	r3, [r7, #16]
 8009b0c:	015a      	lsls	r2, r3, #5
 8009b0e:	697b      	ldr	r3, [r7, #20]
 8009b10:	4413      	add	r3, r2
 8009b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b16:	691b      	ldr	r3, [r3, #16]
 8009b18:	693a      	ldr	r2, [r7, #16]
 8009b1a:	0151      	lsls	r1, r2, #5
 8009b1c:	697a      	ldr	r2, [r7, #20]
 8009b1e:	440a      	add	r2, r1
 8009b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b24:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8009b28:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8009b2c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	699b      	ldr	r3, [r3, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d003      	beq.n	8009b3e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	68da      	ldr	r2, [r3, #12]
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8009b3e:	68bb      	ldr	r3, [r7, #8]
 8009b40:	68da      	ldr	r2, [r3, #12]
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009b46:	693b      	ldr	r3, [r7, #16]
 8009b48:	015a      	lsls	r2, r3, #5
 8009b4a:	697b      	ldr	r3, [r7, #20]
 8009b4c:	4413      	add	r3, r2
 8009b4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	693a      	ldr	r2, [r7, #16]
 8009b56:	0151      	lsls	r1, r2, #5
 8009b58:	697a      	ldr	r2, [r7, #20]
 8009b5a:	440a      	add	r2, r1
 8009b5c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009b60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8009b64:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	015a      	lsls	r2, r3, #5
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	4413      	add	r3, r2
 8009b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009b72:	691a      	ldr	r2, [r3, #16]
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	69db      	ldr	r3, [r3, #28]
 8009b78:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009b7c:	6939      	ldr	r1, [r7, #16]
 8009b7e:	0148      	lsls	r0, r1, #5
 8009b80:	6979      	ldr	r1, [r7, #20]
 8009b82:	4401      	add	r1, r0
 8009b84:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8009b88:	4313      	orrs	r3, r2
 8009b8a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8009b8c:	79fb      	ldrb	r3, [r7, #7]
 8009b8e:	2b01      	cmp	r3, #1
 8009b90:	d10d      	bne.n	8009bae <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	691b      	ldr	r3, [r3, #16]
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	d009      	beq.n	8009bae <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009b9a:	68bb      	ldr	r3, [r7, #8]
 8009b9c:	6919      	ldr	r1, [r3, #16]
 8009b9e:	693b      	ldr	r3, [r7, #16]
 8009ba0:	015a      	lsls	r2, r3, #5
 8009ba2:	697b      	ldr	r3, [r7, #20]
 8009ba4:	4413      	add	r3, r2
 8009ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009baa:	460a      	mov	r2, r1
 8009bac:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	015a      	lsls	r2, r3, #5
 8009bb2:	697b      	ldr	r3, [r7, #20]
 8009bb4:	4413      	add	r3, r2
 8009bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	693a      	ldr	r2, [r7, #16]
 8009bbe:	0151      	lsls	r1, r2, #5
 8009bc0:	697a      	ldr	r2, [r7, #20]
 8009bc2:	440a      	add	r2, r1
 8009bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009bc8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8009bcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009bce:	2300      	movs	r3, #0
}
 8009bd0:	4618      	mov	r0, r3
 8009bd2:	371c      	adds	r7, #28
 8009bd4:	46bd      	mov	sp, r7
 8009bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bda:	4770      	bx	lr

08009bdc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b087      	sub	sp, #28
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009bea:	2300      	movs	r3, #0
 8009bec:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009bf2:	683b      	ldr	r3, [r7, #0]
 8009bf4:	785b      	ldrb	r3, [r3, #1]
 8009bf6:	2b01      	cmp	r3, #1
 8009bf8:	d14a      	bne.n	8009c90 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009bfa:	683b      	ldr	r3, [r7, #0]
 8009bfc:	781b      	ldrb	r3, [r3, #0]
 8009bfe:	015a      	lsls	r2, r3, #5
 8009c00:	693b      	ldr	r3, [r7, #16]
 8009c02:	4413      	add	r3, r2
 8009c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c08:	681b      	ldr	r3, [r3, #0]
 8009c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c12:	f040 8086 	bne.w	8009d22 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8009c16:	683b      	ldr	r3, [r7, #0]
 8009c18:	781b      	ldrb	r3, [r3, #0]
 8009c1a:	015a      	lsls	r2, r3, #5
 8009c1c:	693b      	ldr	r3, [r7, #16]
 8009c1e:	4413      	add	r3, r2
 8009c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	683a      	ldr	r2, [r7, #0]
 8009c28:	7812      	ldrb	r2, [r2, #0]
 8009c2a:	0151      	lsls	r1, r2, #5
 8009c2c:	693a      	ldr	r2, [r7, #16]
 8009c2e:	440a      	add	r2, r1
 8009c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009c38:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	015a      	lsls	r2, r3, #5
 8009c40:	693b      	ldr	r3, [r7, #16]
 8009c42:	4413      	add	r3, r2
 8009c44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	7812      	ldrb	r2, [r2, #0]
 8009c4e:	0151      	lsls	r1, r2, #5
 8009c50:	693a      	ldr	r2, [r7, #16]
 8009c52:	440a      	add	r2, r1
 8009c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009c58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009c5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	3301      	adds	r3, #1
 8009c62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	f242 7210 	movw	r2, #10000	; 0x2710
 8009c6a:	4293      	cmp	r3, r2
 8009c6c:	d902      	bls.n	8009c74 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009c6e:	2301      	movs	r3, #1
 8009c70:	75fb      	strb	r3, [r7, #23]
          break;
 8009c72:	e056      	b.n	8009d22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	015a      	lsls	r2, r3, #5
 8009c7a:	693b      	ldr	r3, [r7, #16]
 8009c7c:	4413      	add	r3, r2
 8009c7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009c88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009c8c:	d0e7      	beq.n	8009c5e <USB_EPStopXfer+0x82>
 8009c8e:	e048      	b.n	8009d22 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	781b      	ldrb	r3, [r3, #0]
 8009c94:	015a      	lsls	r2, r3, #5
 8009c96:	693b      	ldr	r3, [r7, #16]
 8009c98:	4413      	add	r3, r2
 8009c9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009ca4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009ca8:	d13b      	bne.n	8009d22 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009caa:	683b      	ldr	r3, [r7, #0]
 8009cac:	781b      	ldrb	r3, [r3, #0]
 8009cae:	015a      	lsls	r2, r3, #5
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	4413      	add	r3, r2
 8009cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	683a      	ldr	r2, [r7, #0]
 8009cbc:	7812      	ldrb	r2, [r2, #0]
 8009cbe:	0151      	lsls	r1, r2, #5
 8009cc0:	693a      	ldr	r2, [r7, #16]
 8009cc2:	440a      	add	r2, r1
 8009cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8009ccc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8009cce:	683b      	ldr	r3, [r7, #0]
 8009cd0:	781b      	ldrb	r3, [r3, #0]
 8009cd2:	015a      	lsls	r2, r3, #5
 8009cd4:	693b      	ldr	r3, [r7, #16]
 8009cd6:	4413      	add	r3, r2
 8009cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	683a      	ldr	r2, [r7, #0]
 8009ce0:	7812      	ldrb	r2, [r2, #0]
 8009ce2:	0151      	lsls	r1, r2, #5
 8009ce4:	693a      	ldr	r2, [r7, #16]
 8009ce6:	440a      	add	r2, r1
 8009ce8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009cec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8009cf0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	3301      	adds	r3, #1
 8009cf6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	f242 7210 	movw	r2, #10000	; 0x2710
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d902      	bls.n	8009d08 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009d02:	2301      	movs	r3, #1
 8009d04:	75fb      	strb	r3, [r7, #23]
          break;
 8009d06:	e00c      	b.n	8009d22 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	781b      	ldrb	r3, [r3, #0]
 8009d0c:	015a      	lsls	r2, r3, #5
 8009d0e:	693b      	ldr	r3, [r7, #16]
 8009d10:	4413      	add	r3, r2
 8009d12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009d16:	681b      	ldr	r3, [r3, #0]
 8009d18:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8009d1c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009d20:	d0e7      	beq.n	8009cf2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009d22:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d24:	4618      	mov	r0, r3
 8009d26:	371c      	adds	r7, #28
 8009d28:	46bd      	mov	sp, r7
 8009d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d2e:	4770      	bx	lr

08009d30 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009d30:	b480      	push	{r7}
 8009d32:	b089      	sub	sp, #36	; 0x24
 8009d34:	af00      	add	r7, sp, #0
 8009d36:	60f8      	str	r0, [r7, #12]
 8009d38:	60b9      	str	r1, [r7, #8]
 8009d3a:	4611      	mov	r1, r2
 8009d3c:	461a      	mov	r2, r3
 8009d3e:	460b      	mov	r3, r1
 8009d40:	71fb      	strb	r3, [r7, #7]
 8009d42:	4613      	mov	r3, r2
 8009d44:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d46:	68fb      	ldr	r3, [r7, #12]
 8009d48:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009d4e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d123      	bne.n	8009d9e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009d56:	88bb      	ldrh	r3, [r7, #4]
 8009d58:	3303      	adds	r3, #3
 8009d5a:	089b      	lsrs	r3, r3, #2
 8009d5c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009d5e:	2300      	movs	r3, #0
 8009d60:	61bb      	str	r3, [r7, #24]
 8009d62:	e018      	b.n	8009d96 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009d64:	79fb      	ldrb	r3, [r7, #7]
 8009d66:	031a      	lsls	r2, r3, #12
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	4413      	add	r3, r2
 8009d6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009d70:	461a      	mov	r2, r3
 8009d72:	69fb      	ldr	r3, [r7, #28]
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009d78:	69fb      	ldr	r3, [r7, #28]
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	3301      	adds	r3, #1
 8009d82:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d84:	69fb      	ldr	r3, [r7, #28]
 8009d86:	3301      	adds	r3, #1
 8009d88:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009d8a:	69fb      	ldr	r3, [r7, #28]
 8009d8c:	3301      	adds	r3, #1
 8009d8e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009d90:	69bb      	ldr	r3, [r7, #24]
 8009d92:	3301      	adds	r3, #1
 8009d94:	61bb      	str	r3, [r7, #24]
 8009d96:	69ba      	ldr	r2, [r7, #24]
 8009d98:	693b      	ldr	r3, [r7, #16]
 8009d9a:	429a      	cmp	r2, r3
 8009d9c:	d3e2      	bcc.n	8009d64 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009d9e:	2300      	movs	r3, #0
}
 8009da0:	4618      	mov	r0, r3
 8009da2:	3724      	adds	r7, #36	; 0x24
 8009da4:	46bd      	mov	sp, r7
 8009da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009daa:	4770      	bx	lr

08009dac <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b08b      	sub	sp, #44	; 0x2c
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	60f8      	str	r0, [r7, #12]
 8009db4:	60b9      	str	r1, [r7, #8]
 8009db6:	4613      	mov	r3, r2
 8009db8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009dbe:	68bb      	ldr	r3, [r7, #8]
 8009dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009dc2:	88fb      	ldrh	r3, [r7, #6]
 8009dc4:	089b      	lsrs	r3, r3, #2
 8009dc6:	b29b      	uxth	r3, r3
 8009dc8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009dca:	88fb      	ldrh	r3, [r7, #6]
 8009dcc:	f003 0303 	and.w	r3, r3, #3
 8009dd0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009dd2:	2300      	movs	r3, #0
 8009dd4:	623b      	str	r3, [r7, #32]
 8009dd6:	e014      	b.n	8009e02 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009dd8:	69bb      	ldr	r3, [r7, #24]
 8009dda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009dde:	681a      	ldr	r2, [r3, #0]
 8009de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de2:	601a      	str	r2, [r3, #0]
    pDest++;
 8009de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009de6:	3301      	adds	r3, #1
 8009de8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009dea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dec:	3301      	adds	r3, #1
 8009dee:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df2:	3301      	adds	r3, #1
 8009df4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8009df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009df8:	3301      	adds	r3, #1
 8009dfa:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8009dfc:	6a3b      	ldr	r3, [r7, #32]
 8009dfe:	3301      	adds	r3, #1
 8009e00:	623b      	str	r3, [r7, #32]
 8009e02:	6a3a      	ldr	r2, [r7, #32]
 8009e04:	697b      	ldr	r3, [r7, #20]
 8009e06:	429a      	cmp	r2, r3
 8009e08:	d3e6      	bcc.n	8009dd8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009e0a:	8bfb      	ldrh	r3, [r7, #30]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d01e      	beq.n	8009e4e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009e10:	2300      	movs	r3, #0
 8009e12:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009e14:	69bb      	ldr	r3, [r7, #24]
 8009e16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8009e1a:	461a      	mov	r2, r3
 8009e1c:	f107 0310 	add.w	r3, r7, #16
 8009e20:	6812      	ldr	r2, [r2, #0]
 8009e22:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009e24:	693a      	ldr	r2, [r7, #16]
 8009e26:	6a3b      	ldr	r3, [r7, #32]
 8009e28:	b2db      	uxtb	r3, r3
 8009e2a:	00db      	lsls	r3, r3, #3
 8009e2c:	fa22 f303 	lsr.w	r3, r2, r3
 8009e30:	b2da      	uxtb	r2, r3
 8009e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e34:	701a      	strb	r2, [r3, #0]
      i++;
 8009e36:	6a3b      	ldr	r3, [r7, #32]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	623b      	str	r3, [r7, #32]
      pDest++;
 8009e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e3e:	3301      	adds	r3, #1
 8009e40:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8009e42:	8bfb      	ldrh	r3, [r7, #30]
 8009e44:	3b01      	subs	r3, #1
 8009e46:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009e48:	8bfb      	ldrh	r3, [r7, #30]
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d1ea      	bne.n	8009e24 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8009e50:	4618      	mov	r0, r3
 8009e52:	372c      	adds	r7, #44	; 0x2c
 8009e54:	46bd      	mov	sp, r7
 8009e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5a:	4770      	bx	lr

08009e5c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009e5c:	b480      	push	{r7}
 8009e5e:	b085      	sub	sp, #20
 8009e60:	af00      	add	r7, sp, #0
 8009e62:	6078      	str	r0, [r7, #4]
 8009e64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	781b      	ldrb	r3, [r3, #0]
 8009e6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	785b      	ldrb	r3, [r3, #1]
 8009e74:	2b01      	cmp	r3, #1
 8009e76:	d12c      	bne.n	8009ed2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009e78:	68bb      	ldr	r3, [r7, #8]
 8009e7a:	015a      	lsls	r2, r3, #5
 8009e7c:	68fb      	ldr	r3, [r7, #12]
 8009e7e:	4413      	add	r3, r2
 8009e80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	db12      	blt.n	8009eb0 <USB_EPSetStall+0x54>
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	2b00      	cmp	r3, #0
 8009e8e:	d00f      	beq.n	8009eb0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009e90:	68bb      	ldr	r3, [r7, #8]
 8009e92:	015a      	lsls	r2, r3, #5
 8009e94:	68fb      	ldr	r3, [r7, #12]
 8009e96:	4413      	add	r3, r2
 8009e98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	68ba      	ldr	r2, [r7, #8]
 8009ea0:	0151      	lsls	r1, r2, #5
 8009ea2:	68fa      	ldr	r2, [r7, #12]
 8009ea4:	440a      	add	r2, r1
 8009ea6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eaa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009eae:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009eb0:	68bb      	ldr	r3, [r7, #8]
 8009eb2:	015a      	lsls	r2, r3, #5
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	4413      	add	r3, r2
 8009eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	68ba      	ldr	r2, [r7, #8]
 8009ec0:	0151      	lsls	r1, r2, #5
 8009ec2:	68fa      	ldr	r2, [r7, #12]
 8009ec4:	440a      	add	r2, r1
 8009ec6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009eca:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009ece:	6013      	str	r3, [r2, #0]
 8009ed0:	e02b      	b.n	8009f2a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009ed2:	68bb      	ldr	r3, [r7, #8]
 8009ed4:	015a      	lsls	r2, r3, #5
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	4413      	add	r3, r2
 8009eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	db12      	blt.n	8009f0a <USB_EPSetStall+0xae>
 8009ee4:	68bb      	ldr	r3, [r7, #8]
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d00f      	beq.n	8009f0a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009eea:	68bb      	ldr	r3, [r7, #8]
 8009eec:	015a      	lsls	r2, r3, #5
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	4413      	add	r3, r2
 8009ef2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	68ba      	ldr	r2, [r7, #8]
 8009efa:	0151      	lsls	r1, r2, #5
 8009efc:	68fa      	ldr	r2, [r7, #12]
 8009efe:	440a      	add	r2, r1
 8009f00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f04:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8009f08:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009f0a:	68bb      	ldr	r3, [r7, #8]
 8009f0c:	015a      	lsls	r2, r3, #5
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	4413      	add	r3, r2
 8009f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009f16:	681b      	ldr	r3, [r3, #0]
 8009f18:	68ba      	ldr	r2, [r7, #8]
 8009f1a:	0151      	lsls	r1, r2, #5
 8009f1c:	68fa      	ldr	r2, [r7, #12]
 8009f1e:	440a      	add	r2, r1
 8009f20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009f24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8009f28:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009f2a:	2300      	movs	r3, #0
}
 8009f2c:	4618      	mov	r0, r3
 8009f2e:	3714      	adds	r7, #20
 8009f30:	46bd      	mov	sp, r7
 8009f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f36:	4770      	bx	lr

08009f38 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009f38:	b480      	push	{r7}
 8009f3a:	b085      	sub	sp, #20
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
 8009f40:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	781b      	ldrb	r3, [r3, #0]
 8009f4a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009f4c:	683b      	ldr	r3, [r7, #0]
 8009f4e:	785b      	ldrb	r3, [r3, #1]
 8009f50:	2b01      	cmp	r3, #1
 8009f52:	d128      	bne.n	8009fa6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009f54:	68bb      	ldr	r3, [r7, #8]
 8009f56:	015a      	lsls	r2, r3, #5
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	68ba      	ldr	r2, [r7, #8]
 8009f64:	0151      	lsls	r1, r2, #5
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	440a      	add	r2, r1
 8009f6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f6e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009f72:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	791b      	ldrb	r3, [r3, #4]
 8009f78:	2b03      	cmp	r3, #3
 8009f7a:	d003      	beq.n	8009f84 <USB_EPClearStall+0x4c>
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	791b      	ldrb	r3, [r3, #4]
 8009f80:	2b02      	cmp	r3, #2
 8009f82:	d138      	bne.n	8009ff6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009f84:	68bb      	ldr	r3, [r7, #8]
 8009f86:	015a      	lsls	r2, r3, #5
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	4413      	add	r3, r2
 8009f8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	68ba      	ldr	r2, [r7, #8]
 8009f94:	0151      	lsls	r1, r2, #5
 8009f96:	68fa      	ldr	r2, [r7, #12]
 8009f98:	440a      	add	r2, r1
 8009f9a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8009f9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009fa2:	6013      	str	r3, [r2, #0]
 8009fa4:	e027      	b.n	8009ff6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009fa6:	68bb      	ldr	r3, [r7, #8]
 8009fa8:	015a      	lsls	r2, r3, #5
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	4413      	add	r3, r2
 8009fae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fb2:	681b      	ldr	r3, [r3, #0]
 8009fb4:	68ba      	ldr	r2, [r7, #8]
 8009fb6:	0151      	lsls	r1, r2, #5
 8009fb8:	68fa      	ldr	r2, [r7, #12]
 8009fba:	440a      	add	r2, r1
 8009fbc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009fc0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009fc4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009fc6:	683b      	ldr	r3, [r7, #0]
 8009fc8:	791b      	ldrb	r3, [r3, #4]
 8009fca:	2b03      	cmp	r3, #3
 8009fcc:	d003      	beq.n	8009fd6 <USB_EPClearStall+0x9e>
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	791b      	ldrb	r3, [r3, #4]
 8009fd2:	2b02      	cmp	r3, #2
 8009fd4:	d10f      	bne.n	8009ff6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	015a      	lsls	r2, r3, #5
 8009fda:	68fb      	ldr	r3, [r7, #12]
 8009fdc:	4413      	add	r3, r2
 8009fde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68ba      	ldr	r2, [r7, #8]
 8009fe6:	0151      	lsls	r1, r2, #5
 8009fe8:	68fa      	ldr	r2, [r7, #12]
 8009fea:	440a      	add	r2, r1
 8009fec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8009ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ff4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009ff6:	2300      	movs	r3, #0
}
 8009ff8:	4618      	mov	r0, r3
 8009ffa:	3714      	adds	r7, #20
 8009ffc:	46bd      	mov	sp, r7
 8009ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a002:	4770      	bx	lr

0800a004 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 800a004:	b480      	push	{r7}
 800a006:	b085      	sub	sp, #20
 800a008:	af00      	add	r7, sp, #0
 800a00a:	6078      	str	r0, [r7, #4]
 800a00c:	460b      	mov	r3, r1
 800a00e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 800a014:	68fb      	ldr	r3, [r7, #12]
 800a016:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	68fa      	ldr	r2, [r7, #12]
 800a01e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a022:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800a026:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a02e:	681a      	ldr	r2, [r3, #0]
 800a030:	78fb      	ldrb	r3, [r7, #3]
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800a038:	68f9      	ldr	r1, [r7, #12]
 800a03a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800a03e:	4313      	orrs	r3, r2
 800a040:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800a042:	2300      	movs	r3, #0
}
 800a044:	4618      	mov	r0, r3
 800a046:	3714      	adds	r7, #20
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr

0800a050 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a050:	b480      	push	{r7}
 800a052:	b085      	sub	sp, #20
 800a054:	af00      	add	r7, sp, #0
 800a056:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a06a:	f023 0303 	bic.w	r3, r3, #3
 800a06e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a076:	685b      	ldr	r3, [r3, #4]
 800a078:	68fa      	ldr	r2, [r7, #12]
 800a07a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a07e:	f023 0302 	bic.w	r3, r3, #2
 800a082:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a084:	2300      	movs	r3, #0
}
 800a086:	4618      	mov	r0, r3
 800a088:	3714      	adds	r7, #20
 800a08a:	46bd      	mov	sp, r7
 800a08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a090:	4770      	bx	lr

0800a092 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800a092:	b480      	push	{r7}
 800a094:	b085      	sub	sp, #20
 800a096:	af00      	add	r7, sp, #0
 800a098:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800a09e:	68fb      	ldr	r3, [r7, #12]
 800a0a0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	68fa      	ldr	r2, [r7, #12]
 800a0a8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a0ac:	f023 0303 	bic.w	r3, r3, #3
 800a0b0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a0b8:	685b      	ldr	r3, [r3, #4]
 800a0ba:	68fa      	ldr	r2, [r7, #12]
 800a0bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a0c0:	f043 0302 	orr.w	r3, r3, #2
 800a0c4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a0c6:	2300      	movs	r3, #0
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	3714      	adds	r7, #20
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr

0800a0d4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 800a0d4:	b480      	push	{r7}
 800a0d6:	b085      	sub	sp, #20
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	699b      	ldr	r3, [r3, #24]
 800a0e6:	68fa      	ldr	r2, [r7, #12]
 800a0e8:	4013      	ands	r3, r2
 800a0ea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800a0ec:	68fb      	ldr	r3, [r7, #12]
}
 800a0ee:	4618      	mov	r0, r3
 800a0f0:	3714      	adds	r7, #20
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr

0800a0fa <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a0fa:	b480      	push	{r7}
 800a0fc:	b085      	sub	sp, #20
 800a0fe:	af00      	add	r7, sp, #0
 800a100:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a10c:	699b      	ldr	r3, [r3, #24]
 800a10e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a116:	69db      	ldr	r3, [r3, #28]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	4013      	ands	r3, r2
 800a11c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800a11e:	68bb      	ldr	r3, [r7, #8]
 800a120:	0c1b      	lsrs	r3, r3, #16
}
 800a122:	4618      	mov	r0, r3
 800a124:	3714      	adds	r7, #20
 800a126:	46bd      	mov	sp, r7
 800a128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12c:	4770      	bx	lr

0800a12e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800a12e:	b480      	push	{r7}
 800a130:	b085      	sub	sp, #20
 800a132:	af00      	add	r7, sp, #0
 800a134:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a140:	699b      	ldr	r3, [r3, #24]
 800a142:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a14a:	69db      	ldr	r3, [r3, #28]
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	4013      	ands	r3, r2
 800a150:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	b29b      	uxth	r3, r3
}
 800a156:	4618      	mov	r0, r3
 800a158:	3714      	adds	r7, #20
 800a15a:	46bd      	mov	sp, r7
 800a15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a160:	4770      	bx	lr

0800a162 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a162:	b480      	push	{r7}
 800a164:	b085      	sub	sp, #20
 800a166:	af00      	add	r7, sp, #0
 800a168:	6078      	str	r0, [r7, #4]
 800a16a:	460b      	mov	r3, r1
 800a16c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800a172:	78fb      	ldrb	r3, [r7, #3]
 800a174:	015a      	lsls	r2, r3, #5
 800a176:	68fb      	ldr	r3, [r7, #12]
 800a178:	4413      	add	r3, r2
 800a17a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a17e:	689b      	ldr	r3, [r3, #8]
 800a180:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a188:	695b      	ldr	r3, [r3, #20]
 800a18a:	68ba      	ldr	r2, [r7, #8]
 800a18c:	4013      	ands	r3, r2
 800a18e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a190:	68bb      	ldr	r3, [r7, #8]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3714      	adds	r7, #20
 800a196:	46bd      	mov	sp, r7
 800a198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a19c:	4770      	bx	lr

0800a19e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800a19e:	b480      	push	{r7}
 800a1a0:	b087      	sub	sp, #28
 800a1a2:	af00      	add	r7, sp, #0
 800a1a4:	6078      	str	r0, [r7, #4]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800a1ae:	697b      	ldr	r3, [r7, #20]
 800a1b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1b4:	691b      	ldr	r3, [r3, #16]
 800a1b6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800a1b8:	697b      	ldr	r3, [r7, #20]
 800a1ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a1be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a1c0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800a1c2:	78fb      	ldrb	r3, [r7, #3]
 800a1c4:	f003 030f 	and.w	r3, r3, #15
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	fa22 f303 	lsr.w	r3, r2, r3
 800a1ce:	01db      	lsls	r3, r3, #7
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	693a      	ldr	r2, [r7, #16]
 800a1d4:	4313      	orrs	r3, r2
 800a1d6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800a1d8:	78fb      	ldrb	r3, [r7, #3]
 800a1da:	015a      	lsls	r2, r3, #5
 800a1dc:	697b      	ldr	r3, [r7, #20]
 800a1de:	4413      	add	r3, r2
 800a1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	693a      	ldr	r2, [r7, #16]
 800a1e8:	4013      	ands	r3, r2
 800a1ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800a1ec:	68bb      	ldr	r3, [r7, #8]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	371c      	adds	r7, #28
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f8:	4770      	bx	lr

0800a1fa <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800a1fa:	b480      	push	{r7}
 800a1fc:	b083      	sub	sp, #12
 800a1fe:	af00      	add	r7, sp, #0
 800a200:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	695b      	ldr	r3, [r3, #20]
 800a206:	f003 0301 	and.w	r3, r3, #1
}
 800a20a:	4618      	mov	r0, r3
 800a20c:	370c      	adds	r7, #12
 800a20e:	46bd      	mov	sp, r7
 800a210:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a214:	4770      	bx	lr

0800a216 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 800a216:	b480      	push	{r7}
 800a218:	b085      	sub	sp, #20
 800a21a:	af00      	add	r7, sp, #0
 800a21c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	68fa      	ldr	r2, [r7, #12]
 800a22c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800a230:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800a234:	f023 0307 	bic.w	r3, r3, #7
 800a238:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800a240:	685b      	ldr	r3, [r3, #4]
 800a242:	68fa      	ldr	r2, [r7, #12]
 800a244:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800a248:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a24c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800a24e:	2300      	movs	r3, #0
}
 800a250:	4618      	mov	r0, r3
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 800a25c:	b480      	push	{r7}
 800a25e:	b087      	sub	sp, #28
 800a260:	af00      	add	r7, sp, #0
 800a262:	60f8      	str	r0, [r7, #12]
 800a264:	460b      	mov	r3, r1
 800a266:	607a      	str	r2, [r7, #4]
 800a268:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	333c      	adds	r3, #60	; 0x3c
 800a272:	3304      	adds	r3, #4
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800a278:	693b      	ldr	r3, [r7, #16]
 800a27a:	4a26      	ldr	r2, [pc, #152]	; (800a314 <USB_EP0_OutStart+0xb8>)
 800a27c:	4293      	cmp	r3, r2
 800a27e:	d90a      	bls.n	800a296 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800a280:	697b      	ldr	r3, [r7, #20]
 800a282:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800a28c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800a290:	d101      	bne.n	800a296 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800a292:	2300      	movs	r3, #0
 800a294:	e037      	b.n	800a306 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800a296:	697b      	ldr	r3, [r7, #20]
 800a298:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a29c:	461a      	mov	r2, r3
 800a29e:	2300      	movs	r3, #0
 800a2a0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800a2a2:	697b      	ldr	r3, [r7, #20]
 800a2a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2a8:	691b      	ldr	r3, [r3, #16]
 800a2aa:	697a      	ldr	r2, [r7, #20]
 800a2ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a2b4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800a2b6:	697b      	ldr	r3, [r7, #20]
 800a2b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	697a      	ldr	r2, [r7, #20]
 800a2c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2c4:	f043 0318 	orr.w	r3, r3, #24
 800a2c8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	697a      	ldr	r2, [r7, #20]
 800a2d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2d8:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 800a2dc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a2de:	7afb      	ldrb	r3, [r7, #11]
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	d10f      	bne.n	800a304 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a2e4:	697b      	ldr	r3, [r7, #20]
 800a2e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2ea:	461a      	mov	r2, r3
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	697a      	ldr	r2, [r7, #20]
 800a2fa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800a2fe:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800a302:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a304:	2300      	movs	r3, #0
}
 800a306:	4618      	mov	r0, r3
 800a308:	371c      	adds	r7, #28
 800a30a:	46bd      	mov	sp, r7
 800a30c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a310:	4770      	bx	lr
 800a312:	bf00      	nop
 800a314:	4f54300a 	.word	0x4f54300a

0800a318 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a318:	b480      	push	{r7}
 800a31a:	b085      	sub	sp, #20
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a320:	2300      	movs	r3, #0
 800a322:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	3301      	adds	r3, #1
 800a328:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a32a:	68fb      	ldr	r3, [r7, #12]
 800a32c:	4a13      	ldr	r2, [pc, #76]	; (800a37c <USB_CoreReset+0x64>)
 800a32e:	4293      	cmp	r3, r2
 800a330:	d901      	bls.n	800a336 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a332:	2303      	movs	r3, #3
 800a334:	e01b      	b.n	800a36e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	691b      	ldr	r3, [r3, #16]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	daf2      	bge.n	800a324 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800a33e:	2300      	movs	r3, #0
 800a340:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	691b      	ldr	r3, [r3, #16]
 800a346:	f043 0201 	orr.w	r2, r3, #1
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	3301      	adds	r3, #1
 800a352:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	4a09      	ldr	r2, [pc, #36]	; (800a37c <USB_CoreReset+0x64>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d901      	bls.n	800a360 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800a35c:	2303      	movs	r3, #3
 800a35e:	e006      	b.n	800a36e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	691b      	ldr	r3, [r3, #16]
 800a364:	f003 0301 	and.w	r3, r3, #1
 800a368:	2b01      	cmp	r3, #1
 800a36a:	d0f0      	beq.n	800a34e <USB_CoreReset+0x36>

  return HAL_OK;
 800a36c:	2300      	movs	r3, #0
}
 800a36e:	4618      	mov	r0, r3
 800a370:	3714      	adds	r7, #20
 800a372:	46bd      	mov	sp, r7
 800a374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a378:	4770      	bx	lr
 800a37a:	bf00      	nop
 800a37c:	00030d40 	.word	0x00030d40

0800a380 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b084      	sub	sp, #16
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
 800a388:	460b      	mov	r3, r1
 800a38a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 800a38c:	2010      	movs	r0, #16
 800a38e:	f002 f8ef 	bl	800c570 <USBD_static_malloc>
 800a392:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d109      	bne.n	800a3ae <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3a0:	687b      	ldr	r3, [r7, #4]
 800a3a2:	32b0      	adds	r2, #176	; 0xb0
 800a3a4:	2100      	movs	r1, #0
 800a3a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a3aa:	2302      	movs	r3, #2
 800a3ac:	e048      	b.n	800a440 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800a3ae:	687b      	ldr	r3, [r7, #4]
 800a3b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	32b0      	adds	r2, #176	; 0xb0
 800a3b8:	68f9      	ldr	r1, [r7, #12]
 800a3ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	32b0      	adds	r2, #176	; 0xb0
 800a3c8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	7c1b      	ldrb	r3, [r3, #16]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d10d      	bne.n	800a3f6 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800a3da:	4b1b      	ldr	r3, [pc, #108]	; (800a448 <USBD_HID_Init+0xc8>)
 800a3dc:	781b      	ldrb	r3, [r3, #0]
 800a3de:	f003 020f 	and.w	r2, r3, #15
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	009b      	lsls	r3, r3, #2
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	440b      	add	r3, r1
 800a3ee:	3326      	adds	r3, #38	; 0x26
 800a3f0:	2207      	movs	r2, #7
 800a3f2:	801a      	strh	r2, [r3, #0]
 800a3f4:	e00c      	b.n	800a410 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800a3f6:	4b14      	ldr	r3, [pc, #80]	; (800a448 <USBD_HID_Init+0xc8>)
 800a3f8:	781b      	ldrb	r3, [r3, #0]
 800a3fa:	f003 020f 	and.w	r2, r3, #15
 800a3fe:	6879      	ldr	r1, [r7, #4]
 800a400:	4613      	mov	r3, r2
 800a402:	009b      	lsls	r3, r3, #2
 800a404:	4413      	add	r3, r2
 800a406:	009b      	lsls	r3, r3, #2
 800a408:	440b      	add	r3, r1
 800a40a:	3326      	adds	r3, #38	; 0x26
 800a40c:	220a      	movs	r2, #10
 800a40e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800a410:	4b0d      	ldr	r3, [pc, #52]	; (800a448 <USBD_HID_Init+0xc8>)
 800a412:	7819      	ldrb	r1, [r3, #0]
 800a414:	2304      	movs	r3, #4
 800a416:	2203      	movs	r2, #3
 800a418:	6878      	ldr	r0, [r7, #4]
 800a41a:	f001 ff98 	bl	800c34e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800a41e:	4b0a      	ldr	r3, [pc, #40]	; (800a448 <USBD_HID_Init+0xc8>)
 800a420:	781b      	ldrb	r3, [r3, #0]
 800a422:	f003 020f 	and.w	r2, r3, #15
 800a426:	6879      	ldr	r1, [r7, #4]
 800a428:	4613      	mov	r3, r2
 800a42a:	009b      	lsls	r3, r3, #2
 800a42c:	4413      	add	r3, r2
 800a42e:	009b      	lsls	r3, r3, #2
 800a430:	440b      	add	r3, r1
 800a432:	3324      	adds	r3, #36	; 0x24
 800a434:	2201      	movs	r2, #1
 800a436:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 800a438:	68fb      	ldr	r3, [r7, #12]
 800a43a:	2200      	movs	r2, #0
 800a43c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a43e:	2300      	movs	r3, #0
}
 800a440:	4618      	mov	r0, r3
 800a442:	3710      	adds	r7, #16
 800a444:	46bd      	mov	sp, r7
 800a446:	bd80      	pop	{r7, pc}
 800a448:	2000010e 	.word	0x2000010e

0800a44c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a44c:	b580      	push	{r7, lr}
 800a44e:	b082      	sub	sp, #8
 800a450:	af00      	add	r7, sp, #0
 800a452:	6078      	str	r0, [r7, #4]
 800a454:	460b      	mov	r3, r1
 800a456:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800a458:	4b1f      	ldr	r3, [pc, #124]	; (800a4d8 <USBD_HID_DeInit+0x8c>)
 800a45a:	781b      	ldrb	r3, [r3, #0]
 800a45c:	4619      	mov	r1, r3
 800a45e:	6878      	ldr	r0, [r7, #4]
 800a460:	f001 ff9b 	bl	800c39a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 800a464:	4b1c      	ldr	r3, [pc, #112]	; (800a4d8 <USBD_HID_DeInit+0x8c>)
 800a466:	781b      	ldrb	r3, [r3, #0]
 800a468:	f003 020f 	and.w	r2, r3, #15
 800a46c:	6879      	ldr	r1, [r7, #4]
 800a46e:	4613      	mov	r3, r2
 800a470:	009b      	lsls	r3, r3, #2
 800a472:	4413      	add	r3, r2
 800a474:	009b      	lsls	r3, r3, #2
 800a476:	440b      	add	r3, r1
 800a478:	3324      	adds	r3, #36	; 0x24
 800a47a:	2200      	movs	r2, #0
 800a47c:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800a47e:	4b16      	ldr	r3, [pc, #88]	; (800a4d8 <USBD_HID_DeInit+0x8c>)
 800a480:	781b      	ldrb	r3, [r3, #0]
 800a482:	f003 020f 	and.w	r2, r3, #15
 800a486:	6879      	ldr	r1, [r7, #4]
 800a488:	4613      	mov	r3, r2
 800a48a:	009b      	lsls	r3, r3, #2
 800a48c:	4413      	add	r3, r2
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	440b      	add	r3, r1
 800a492:	3326      	adds	r3, #38	; 0x26
 800a494:	2200      	movs	r2, #0
 800a496:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	32b0      	adds	r2, #176	; 0xb0
 800a4a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	d011      	beq.n	800a4ce <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	32b0      	adds	r2, #176	; 0xb0
 800a4b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4b8:	4618      	mov	r0, r3
 800a4ba:	f002 f867 	bl	800c58c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	32b0      	adds	r2, #176	; 0xb0
 800a4c8:	2100      	movs	r1, #0
 800a4ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800a4ce:	2300      	movs	r3, #0
}
 800a4d0:	4618      	mov	r0, r3
 800a4d2:	3708      	adds	r7, #8
 800a4d4:	46bd      	mov	sp, r7
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	2000010e 	.word	0x2000010e

0800a4dc <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800a4dc:	b580      	push	{r7, lr}
 800a4de:	b086      	sub	sp, #24
 800a4e0:	af00      	add	r7, sp, #0
 800a4e2:	6078      	str	r0, [r7, #4]
 800a4e4:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	32b0      	adds	r2, #176	; 0xb0
 800a4f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a4f4:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800a4fa:	2300      	movs	r3, #0
 800a4fc:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d101      	bne.n	800a508 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 800a504:	2303      	movs	r3, #3
 800a506:	e0e8      	b.n	800a6da <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a508:	683b      	ldr	r3, [r7, #0]
 800a50a:	781b      	ldrb	r3, [r3, #0]
 800a50c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800a510:	2b00      	cmp	r3, #0
 800a512:	d046      	beq.n	800a5a2 <USBD_HID_Setup+0xc6>
 800a514:	2b20      	cmp	r3, #32
 800a516:	f040 80d8 	bne.w	800a6ca <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	785b      	ldrb	r3, [r3, #1]
 800a51e:	3b02      	subs	r3, #2
 800a520:	2b09      	cmp	r3, #9
 800a522:	d836      	bhi.n	800a592 <USBD_HID_Setup+0xb6>
 800a524:	a201      	add	r2, pc, #4	; (adr r2, 800a52c <USBD_HID_Setup+0x50>)
 800a526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a52a:	bf00      	nop
 800a52c:	0800a583 	.word	0x0800a583
 800a530:	0800a563 	.word	0x0800a563
 800a534:	0800a593 	.word	0x0800a593
 800a538:	0800a593 	.word	0x0800a593
 800a53c:	0800a593 	.word	0x0800a593
 800a540:	0800a593 	.word	0x0800a593
 800a544:	0800a593 	.word	0x0800a593
 800a548:	0800a593 	.word	0x0800a593
 800a54c:	0800a571 	.word	0x0800a571
 800a550:	0800a555 	.word	0x0800a555
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	885b      	ldrh	r3, [r3, #2]
 800a558:	b2db      	uxtb	r3, r3
 800a55a:	461a      	mov	r2, r3
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	601a      	str	r2, [r3, #0]
          break;
 800a560:	e01e      	b.n	800a5a0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	2201      	movs	r2, #1
 800a566:	4619      	mov	r1, r3
 800a568:	6878      	ldr	r0, [r7, #4]
 800a56a:	f001 fba5 	bl	800bcb8 <USBD_CtlSendData>
          break;
 800a56e:	e017      	b.n	800a5a0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	885b      	ldrh	r3, [r3, #2]
 800a574:	0a1b      	lsrs	r3, r3, #8
 800a576:	b29b      	uxth	r3, r3
 800a578:	b2db      	uxtb	r3, r3
 800a57a:	461a      	mov	r2, r3
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	605a      	str	r2, [r3, #4]
          break;
 800a580:	e00e      	b.n	800a5a0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	3304      	adds	r3, #4
 800a586:	2201      	movs	r2, #1
 800a588:	4619      	mov	r1, r3
 800a58a:	6878      	ldr	r0, [r7, #4]
 800a58c:	f001 fb94 	bl	800bcb8 <USBD_CtlSendData>
          break;
 800a590:	e006      	b.n	800a5a0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800a592:	6839      	ldr	r1, [r7, #0]
 800a594:	6878      	ldr	r0, [r7, #4]
 800a596:	f001 fb1e 	bl	800bbd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a59a:	2303      	movs	r3, #3
 800a59c:	75fb      	strb	r3, [r7, #23]
          break;
 800a59e:	bf00      	nop
      }
      break;
 800a5a0:	e09a      	b.n	800a6d8 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	785b      	ldrb	r3, [r3, #1]
 800a5a6:	2b0b      	cmp	r3, #11
 800a5a8:	f200 8086 	bhi.w	800a6b8 <USBD_HID_Setup+0x1dc>
 800a5ac:	a201      	add	r2, pc, #4	; (adr r2, 800a5b4 <USBD_HID_Setup+0xd8>)
 800a5ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a5b2:	bf00      	nop
 800a5b4:	0800a5e5 	.word	0x0800a5e5
 800a5b8:	0800a6c7 	.word	0x0800a6c7
 800a5bc:	0800a6b9 	.word	0x0800a6b9
 800a5c0:	0800a6b9 	.word	0x0800a6b9
 800a5c4:	0800a6b9 	.word	0x0800a6b9
 800a5c8:	0800a6b9 	.word	0x0800a6b9
 800a5cc:	0800a60f 	.word	0x0800a60f
 800a5d0:	0800a6b9 	.word	0x0800a6b9
 800a5d4:	0800a6b9 	.word	0x0800a6b9
 800a5d8:	0800a6b9 	.word	0x0800a6b9
 800a5dc:	0800a667 	.word	0x0800a667
 800a5e0:	0800a691 	.word	0x0800a691
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	2b03      	cmp	r3, #3
 800a5ee:	d107      	bne.n	800a600 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a5f0:	f107 030a 	add.w	r3, r7, #10
 800a5f4:	2202      	movs	r2, #2
 800a5f6:	4619      	mov	r1, r3
 800a5f8:	6878      	ldr	r0, [r7, #4]
 800a5fa:	f001 fb5d 	bl	800bcb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a5fe:	e063      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a600:	6839      	ldr	r1, [r7, #0]
 800a602:	6878      	ldr	r0, [r7, #4]
 800a604:	f001 fae7 	bl	800bbd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a608:	2303      	movs	r3, #3
 800a60a:	75fb      	strb	r3, [r7, #23]
          break;
 800a60c:	e05c      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	885b      	ldrh	r3, [r3, #2]
 800a612:	0a1b      	lsrs	r3, r3, #8
 800a614:	b29b      	uxth	r3, r3
 800a616:	2b22      	cmp	r3, #34	; 0x22
 800a618:	d108      	bne.n	800a62c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800a61a:	683b      	ldr	r3, [r7, #0]
 800a61c:	88db      	ldrh	r3, [r3, #6]
 800a61e:	2b4a      	cmp	r3, #74	; 0x4a
 800a620:	bf28      	it	cs
 800a622:	234a      	movcs	r3, #74	; 0x4a
 800a624:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800a626:	4b2f      	ldr	r3, [pc, #188]	; (800a6e4 <USBD_HID_Setup+0x208>)
 800a628:	613b      	str	r3, [r7, #16]
 800a62a:	e015      	b.n	800a658 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800a62c:	683b      	ldr	r3, [r7, #0]
 800a62e:	885b      	ldrh	r3, [r3, #2]
 800a630:	0a1b      	lsrs	r3, r3, #8
 800a632:	b29b      	uxth	r3, r3
 800a634:	2b21      	cmp	r3, #33	; 0x21
 800a636:	d108      	bne.n	800a64a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800a638:	4b2b      	ldr	r3, [pc, #172]	; (800a6e8 <USBD_HID_Setup+0x20c>)
 800a63a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800a63c:	683b      	ldr	r3, [r7, #0]
 800a63e:	88db      	ldrh	r3, [r3, #6]
 800a640:	2b09      	cmp	r3, #9
 800a642:	bf28      	it	cs
 800a644:	2309      	movcs	r3, #9
 800a646:	82bb      	strh	r3, [r7, #20]
 800a648:	e006      	b.n	800a658 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800a64a:	6839      	ldr	r1, [r7, #0]
 800a64c:	6878      	ldr	r0, [r7, #4]
 800a64e:	f001 fac2 	bl	800bbd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a652:	2303      	movs	r3, #3
 800a654:	75fb      	strb	r3, [r7, #23]
            break;
 800a656:	e037      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800a658:	8abb      	ldrh	r3, [r7, #20]
 800a65a:	461a      	mov	r2, r3
 800a65c:	6939      	ldr	r1, [r7, #16]
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f001 fb2a 	bl	800bcb8 <USBD_CtlSendData>
          break;
 800a664:	e030      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a66c:	b2db      	uxtb	r3, r3
 800a66e:	2b03      	cmp	r3, #3
 800a670:	d107      	bne.n	800a682 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	3308      	adds	r3, #8
 800a676:	2201      	movs	r2, #1
 800a678:	4619      	mov	r1, r3
 800a67a:	6878      	ldr	r0, [r7, #4]
 800a67c:	f001 fb1c 	bl	800bcb8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a680:	e022      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a682:	6839      	ldr	r1, [r7, #0]
 800a684:	6878      	ldr	r0, [r7, #4]
 800a686:	f001 faa6 	bl	800bbd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a68a:	2303      	movs	r3, #3
 800a68c:	75fb      	strb	r3, [r7, #23]
          break;
 800a68e:	e01b      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800a696:	b2db      	uxtb	r3, r3
 800a698:	2b03      	cmp	r3, #3
 800a69a:	d106      	bne.n	800a6aa <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 800a69c:	683b      	ldr	r3, [r7, #0]
 800a69e:	885b      	ldrh	r3, [r3, #2]
 800a6a0:	b2db      	uxtb	r3, r3
 800a6a2:	461a      	mov	r2, r3
 800a6a4:	68fb      	ldr	r3, [r7, #12]
 800a6a6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a6a8:	e00e      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800a6aa:	6839      	ldr	r1, [r7, #0]
 800a6ac:	6878      	ldr	r0, [r7, #4]
 800a6ae:	f001 fa92 	bl	800bbd6 <USBD_CtlError>
            ret = USBD_FAIL;
 800a6b2:	2303      	movs	r3, #3
 800a6b4:	75fb      	strb	r3, [r7, #23]
          break;
 800a6b6:	e007      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a6b8:	6839      	ldr	r1, [r7, #0]
 800a6ba:	6878      	ldr	r0, [r7, #4]
 800a6bc:	f001 fa8b 	bl	800bbd6 <USBD_CtlError>
          ret = USBD_FAIL;
 800a6c0:	2303      	movs	r3, #3
 800a6c2:	75fb      	strb	r3, [r7, #23]
          break;
 800a6c4:	e000      	b.n	800a6c8 <USBD_HID_Setup+0x1ec>
          break;
 800a6c6:	bf00      	nop
      }
      break;
 800a6c8:	e006      	b.n	800a6d8 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800a6ca:	6839      	ldr	r1, [r7, #0]
 800a6cc:	6878      	ldr	r0, [r7, #4]
 800a6ce:	f001 fa82 	bl	800bbd6 <USBD_CtlError>
      ret = USBD_FAIL;
 800a6d2:	2303      	movs	r3, #3
 800a6d4:	75fb      	strb	r3, [r7, #23]
      break;
 800a6d6:	bf00      	nop
  }

  return (uint8_t)ret;
 800a6d8:	7dfb      	ldrb	r3, [r7, #23]
}
 800a6da:	4618      	mov	r0, r3
 800a6dc:	3718      	adds	r7, #24
 800a6de:	46bd      	mov	sp, r7
 800a6e0:	bd80      	pop	{r7, pc}
 800a6e2:	bf00      	nop
 800a6e4:	200000c4 	.word	0x200000c4
 800a6e8:	200000ac 	.word	0x200000ac

0800a6ec <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800a6ec:	b580      	push	{r7, lr}
 800a6ee:	b084      	sub	sp, #16
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a6f4:	2181      	movs	r1, #129	; 0x81
 800a6f6:	4809      	ldr	r0, [pc, #36]	; (800a71c <USBD_HID_GetFSCfgDesc+0x30>)
 800a6f8:	f000 fc35 	bl	800af66 <USBD_GetEpDesc>
 800a6fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	2b00      	cmp	r3, #0
 800a702:	d002      	beq.n	800a70a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	220a      	movs	r2, #10
 800a708:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2222      	movs	r2, #34	; 0x22
 800a70e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a710:	4b02      	ldr	r3, [pc, #8]	; (800a71c <USBD_HID_GetFSCfgDesc+0x30>)
}
 800a712:	4618      	mov	r0, r3
 800a714:	3710      	adds	r7, #16
 800a716:	46bd      	mov	sp, r7
 800a718:	bd80      	pop	{r7, pc}
 800a71a:	bf00      	nop
 800a71c:	20000088 	.word	0x20000088

0800a720 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a728:	2181      	movs	r1, #129	; 0x81
 800a72a:	4809      	ldr	r0, [pc, #36]	; (800a750 <USBD_HID_GetHSCfgDesc+0x30>)
 800a72c:	f000 fc1b 	bl	800af66 <USBD_GetEpDesc>
 800a730:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d002      	beq.n	800a73e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2207      	movs	r2, #7
 800a73c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a73e:	687b      	ldr	r3, [r7, #4]
 800a740:	2222      	movs	r2, #34	; 0x22
 800a742:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a744:	4b02      	ldr	r3, [pc, #8]	; (800a750 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800a746:	4618      	mov	r0, r3
 800a748:	3710      	adds	r7, #16
 800a74a:	46bd      	mov	sp, r7
 800a74c:	bd80      	pop	{r7, pc}
 800a74e:	bf00      	nop
 800a750:	20000088 	.word	0x20000088

0800a754 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a754:	b580      	push	{r7, lr}
 800a756:	b084      	sub	sp, #16
 800a758:	af00      	add	r7, sp, #0
 800a75a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800a75c:	2181      	movs	r1, #129	; 0x81
 800a75e:	4809      	ldr	r0, [pc, #36]	; (800a784 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 800a760:	f000 fc01 	bl	800af66 <USBD_GetEpDesc>
 800a764:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d002      	beq.n	800a772 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	220a      	movs	r2, #10
 800a770:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	2222      	movs	r2, #34	; 0x22
 800a776:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800a778:	4b02      	ldr	r3, [pc, #8]	; (800a784 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800a77a:	4618      	mov	r0, r3
 800a77c:	3710      	adds	r7, #16
 800a77e:	46bd      	mov	sp, r7
 800a780:	bd80      	pop	{r7, pc}
 800a782:	bf00      	nop
 800a784:	20000088 	.word	0x20000088

0800a788 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a788:	b480      	push	{r7}
 800a78a:	b083      	sub	sp, #12
 800a78c:	af00      	add	r7, sp, #0
 800a78e:	6078      	str	r0, [r7, #4]
 800a790:	460b      	mov	r3, r1
 800a792:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	32b0      	adds	r2, #176	; 0xb0
 800a79e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7a2:	2200      	movs	r2, #0
 800a7a4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800a7a6:	2300      	movs	r3, #0
}
 800a7a8:	4618      	mov	r0, r3
 800a7aa:	370c      	adds	r7, #12
 800a7ac:	46bd      	mov	sp, r7
 800a7ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7b2:	4770      	bx	lr

0800a7b4 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 800a7b4:	b480      	push	{r7}
 800a7b6:	b083      	sub	sp, #12
 800a7b8:	af00      	add	r7, sp, #0
 800a7ba:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	220a      	movs	r2, #10
 800a7c0:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 800a7c2:	4b03      	ldr	r3, [pc, #12]	; (800a7d0 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 800a7c4:	4618      	mov	r0, r3
 800a7c6:	370c      	adds	r7, #12
 800a7c8:	46bd      	mov	sp, r7
 800a7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ce:	4770      	bx	lr
 800a7d0:	200000b8 	.word	0x200000b8

0800a7d4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b086      	sub	sp, #24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	4613      	mov	r3, r2
 800a7e0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d101      	bne.n	800a7ec <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a7e8:	2303      	movs	r3, #3
 800a7ea:	e01f      	b.n	800a82c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	2200      	movs	r2, #0
 800a7f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d003      	beq.n	800a812 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	68ba      	ldr	r2, [r7, #8]
 800a80e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	2201      	movs	r2, #1
 800a816:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	79fa      	ldrb	r2, [r7, #7]
 800a81e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a820:	68f8      	ldr	r0, [r7, #12]
 800a822:	f001 fd2d 	bl	800c280 <USBD_LL_Init>
 800a826:	4603      	mov	r3, r0
 800a828:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a82a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a82c:	4618      	mov	r0, r3
 800a82e:	3718      	adds	r7, #24
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a834:	b580      	push	{r7, lr}
 800a836:	b084      	sub	sp, #16
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a83e:	2300      	movs	r3, #0
 800a840:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a842:	683b      	ldr	r3, [r7, #0]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d101      	bne.n	800a84c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a848:	2303      	movs	r3, #3
 800a84a:	e025      	b.n	800a898 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	683a      	ldr	r2, [r7, #0]
 800a850:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	32ae      	adds	r2, #174	; 0xae
 800a85e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00f      	beq.n	800a888 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	32ae      	adds	r2, #174	; 0xae
 800a872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a876:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a878:	f107 020e 	add.w	r2, r7, #14
 800a87c:	4610      	mov	r0, r2
 800a87e:	4798      	blx	r3
 800a880:	4602      	mov	r2, r0
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800a88e:	1c5a      	adds	r2, r3, #1
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800a896:	2300      	movs	r3, #0
}
 800a898:	4618      	mov	r0, r3
 800a89a:	3710      	adds	r7, #16
 800a89c:	46bd      	mov	sp, r7
 800a89e:	bd80      	pop	{r7, pc}

0800a8a0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a8a0:	b580      	push	{r7, lr}
 800a8a2:	b082      	sub	sp, #8
 800a8a4:	af00      	add	r7, sp, #0
 800a8a6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f001 fd35 	bl	800c318 <USBD_LL_Start>
 800a8ae:	4603      	mov	r3, r0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b083      	sub	sp, #12
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a8c0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a8c2:	4618      	mov	r0, r3
 800a8c4:	370c      	adds	r7, #12
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8cc:	4770      	bx	lr

0800a8ce <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a8ce:	b580      	push	{r7, lr}
 800a8d0:	b084      	sub	sp, #16
 800a8d2:	af00      	add	r7, sp, #0
 800a8d4:	6078      	str	r0, [r7, #4]
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a8da:	2300      	movs	r3, #0
 800a8dc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d009      	beq.n	800a8fc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	78fa      	ldrb	r2, [r7, #3]
 800a8f2:	4611      	mov	r1, r2
 800a8f4:	6878      	ldr	r0, [r7, #4]
 800a8f6:	4798      	blx	r3
 800a8f8:	4603      	mov	r3, r0
 800a8fa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a8fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8fe:	4618      	mov	r0, r3
 800a900:	3710      	adds	r7, #16
 800a902:	46bd      	mov	sp, r7
 800a904:	bd80      	pop	{r7, pc}

0800a906 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a906:	b580      	push	{r7, lr}
 800a908:	b084      	sub	sp, #16
 800a90a:	af00      	add	r7, sp, #0
 800a90c:	6078      	str	r0, [r7, #4]
 800a90e:	460b      	mov	r3, r1
 800a910:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a912:	2300      	movs	r3, #0
 800a914:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800a91c:	685b      	ldr	r3, [r3, #4]
 800a91e:	78fa      	ldrb	r2, [r7, #3]
 800a920:	4611      	mov	r1, r2
 800a922:	6878      	ldr	r0, [r7, #4]
 800a924:	4798      	blx	r3
 800a926:	4603      	mov	r3, r0
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d001      	beq.n	800a930 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a92c:	2303      	movs	r3, #3
 800a92e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a930:	7bfb      	ldrb	r3, [r7, #15]
}
 800a932:	4618      	mov	r0, r3
 800a934:	3710      	adds	r7, #16
 800a936:	46bd      	mov	sp, r7
 800a938:	bd80      	pop	{r7, pc}

0800a93a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a93a:	b580      	push	{r7, lr}
 800a93c:	b084      	sub	sp, #16
 800a93e:	af00      	add	r7, sp, #0
 800a940:	6078      	str	r0, [r7, #4]
 800a942:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a94a:	6839      	ldr	r1, [r7, #0]
 800a94c:	4618      	mov	r0, r3
 800a94e:	f001 f908 	bl	800bb62 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	2201      	movs	r2, #1
 800a956:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800a960:	461a      	mov	r2, r3
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a96e:	f003 031f 	and.w	r3, r3, #31
 800a972:	2b02      	cmp	r3, #2
 800a974:	d01a      	beq.n	800a9ac <USBD_LL_SetupStage+0x72>
 800a976:	2b02      	cmp	r3, #2
 800a978:	d822      	bhi.n	800a9c0 <USBD_LL_SetupStage+0x86>
 800a97a:	2b00      	cmp	r3, #0
 800a97c:	d002      	beq.n	800a984 <USBD_LL_SetupStage+0x4a>
 800a97e:	2b01      	cmp	r3, #1
 800a980:	d00a      	beq.n	800a998 <USBD_LL_SetupStage+0x5e>
 800a982:	e01d      	b.n	800a9c0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a98a:	4619      	mov	r1, r3
 800a98c:	6878      	ldr	r0, [r7, #4]
 800a98e:	f000 fb5f 	bl	800b050 <USBD_StdDevReq>
 800a992:	4603      	mov	r3, r0
 800a994:	73fb      	strb	r3, [r7, #15]
      break;
 800a996:	e020      	b.n	800a9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a99e:	4619      	mov	r1, r3
 800a9a0:	6878      	ldr	r0, [r7, #4]
 800a9a2:	f000 fbc7 	bl	800b134 <USBD_StdItfReq>
 800a9a6:	4603      	mov	r3, r0
 800a9a8:	73fb      	strb	r3, [r7, #15]
      break;
 800a9aa:	e016      	b.n	800a9da <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800a9b2:	4619      	mov	r1, r3
 800a9b4:	6878      	ldr	r0, [r7, #4]
 800a9b6:	f000 fc29 	bl	800b20c <USBD_StdEPReq>
 800a9ba:	4603      	mov	r3, r0
 800a9bc:	73fb      	strb	r3, [r7, #15]
      break;
 800a9be:	e00c      	b.n	800a9da <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800a9c6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800a9ca:	b2db      	uxtb	r3, r3
 800a9cc:	4619      	mov	r1, r3
 800a9ce:	6878      	ldr	r0, [r7, #4]
 800a9d0:	f001 fd02 	bl	800c3d8 <USBD_LL_StallEP>
 800a9d4:	4603      	mov	r3, r0
 800a9d6:	73fb      	strb	r3, [r7, #15]
      break;
 800a9d8:	bf00      	nop
  }

  return ret;
 800a9da:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9dc:	4618      	mov	r0, r3
 800a9de:	3710      	adds	r7, #16
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b086      	sub	sp, #24
 800a9e8:	af00      	add	r7, sp, #0
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	460b      	mov	r3, r1
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800a9f6:	7afb      	ldrb	r3, [r7, #11]
 800a9f8:	2b00      	cmp	r3, #0
 800a9fa:	d16e      	bne.n	800aada <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800aa02:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800aa0a:	2b03      	cmp	r3, #3
 800aa0c:	f040 8098 	bne.w	800ab40 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800aa10:	693b      	ldr	r3, [r7, #16]
 800aa12:	689a      	ldr	r2, [r3, #8]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	68db      	ldr	r3, [r3, #12]
 800aa18:	429a      	cmp	r2, r3
 800aa1a:	d913      	bls.n	800aa44 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800aa1c:	693b      	ldr	r3, [r7, #16]
 800aa1e:	689a      	ldr	r2, [r3, #8]
 800aa20:	693b      	ldr	r3, [r7, #16]
 800aa22:	68db      	ldr	r3, [r3, #12]
 800aa24:	1ad2      	subs	r2, r2, r3
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800aa2a:	693b      	ldr	r3, [r7, #16]
 800aa2c:	68da      	ldr	r2, [r3, #12]
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	689b      	ldr	r3, [r3, #8]
 800aa32:	4293      	cmp	r3, r2
 800aa34:	bf28      	it	cs
 800aa36:	4613      	movcs	r3, r2
 800aa38:	461a      	mov	r2, r3
 800aa3a:	6879      	ldr	r1, [r7, #4]
 800aa3c:	68f8      	ldr	r0, [r7, #12]
 800aa3e:	f001 f967 	bl	800bd10 <USBD_CtlContinueRx>
 800aa42:	e07d      	b.n	800ab40 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800aa4a:	f003 031f 	and.w	r3, r3, #31
 800aa4e:	2b02      	cmp	r3, #2
 800aa50:	d014      	beq.n	800aa7c <USBD_LL_DataOutStage+0x98>
 800aa52:	2b02      	cmp	r3, #2
 800aa54:	d81d      	bhi.n	800aa92 <USBD_LL_DataOutStage+0xae>
 800aa56:	2b00      	cmp	r3, #0
 800aa58:	d002      	beq.n	800aa60 <USBD_LL_DataOutStage+0x7c>
 800aa5a:	2b01      	cmp	r3, #1
 800aa5c:	d003      	beq.n	800aa66 <USBD_LL_DataOutStage+0x82>
 800aa5e:	e018      	b.n	800aa92 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800aa60:	2300      	movs	r3, #0
 800aa62:	75bb      	strb	r3, [r7, #22]
            break;
 800aa64:	e018      	b.n	800aa98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800aa66:	68fb      	ldr	r3, [r7, #12]
 800aa68:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa6c:	b2db      	uxtb	r3, r3
 800aa6e:	4619      	mov	r1, r3
 800aa70:	68f8      	ldr	r0, [r7, #12]
 800aa72:	f000 fa5e 	bl	800af32 <USBD_CoreFindIF>
 800aa76:	4603      	mov	r3, r0
 800aa78:	75bb      	strb	r3, [r7, #22]
            break;
 800aa7a:	e00d      	b.n	800aa98 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800aa82:	b2db      	uxtb	r3, r3
 800aa84:	4619      	mov	r1, r3
 800aa86:	68f8      	ldr	r0, [r7, #12]
 800aa88:	f000 fa60 	bl	800af4c <USBD_CoreFindEP>
 800aa8c:	4603      	mov	r3, r0
 800aa8e:	75bb      	strb	r3, [r7, #22]
            break;
 800aa90:	e002      	b.n	800aa98 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800aa92:	2300      	movs	r3, #0
 800aa94:	75bb      	strb	r3, [r7, #22]
            break;
 800aa96:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800aa98:	7dbb      	ldrb	r3, [r7, #22]
 800aa9a:	2b00      	cmp	r3, #0
 800aa9c:	d119      	bne.n	800aad2 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800aaa4:	b2db      	uxtb	r3, r3
 800aaa6:	2b03      	cmp	r3, #3
 800aaa8:	d113      	bne.n	800aad2 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800aaaa:	7dba      	ldrb	r2, [r7, #22]
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	32ae      	adds	r2, #174	; 0xae
 800aab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aab4:	691b      	ldr	r3, [r3, #16]
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	d00b      	beq.n	800aad2 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800aaba:	7dba      	ldrb	r2, [r7, #22]
 800aabc:	68fb      	ldr	r3, [r7, #12]
 800aabe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800aac2:	7dba      	ldrb	r2, [r7, #22]
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	32ae      	adds	r2, #174	; 0xae
 800aac8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aacc:	691b      	ldr	r3, [r3, #16]
 800aace:	68f8      	ldr	r0, [r7, #12]
 800aad0:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800aad2:	68f8      	ldr	r0, [r7, #12]
 800aad4:	f001 f92d 	bl	800bd32 <USBD_CtlSendStatus>
 800aad8:	e032      	b.n	800ab40 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800aada:	7afb      	ldrb	r3, [r7, #11]
 800aadc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800aae0:	b2db      	uxtb	r3, r3
 800aae2:	4619      	mov	r1, r3
 800aae4:	68f8      	ldr	r0, [r7, #12]
 800aae6:	f000 fa31 	bl	800af4c <USBD_CoreFindEP>
 800aaea:	4603      	mov	r3, r0
 800aaec:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aaee:	7dbb      	ldrb	r3, [r7, #22]
 800aaf0:	2bff      	cmp	r3, #255	; 0xff
 800aaf2:	d025      	beq.n	800ab40 <USBD_LL_DataOutStage+0x15c>
 800aaf4:	7dbb      	ldrb	r3, [r7, #22]
 800aaf6:	2b00      	cmp	r3, #0
 800aaf8:	d122      	bne.n	800ab40 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aafa:	68fb      	ldr	r3, [r7, #12]
 800aafc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ab00:	b2db      	uxtb	r3, r3
 800ab02:	2b03      	cmp	r3, #3
 800ab04:	d117      	bne.n	800ab36 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ab06:	7dba      	ldrb	r2, [r7, #22]
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	32ae      	adds	r2, #174	; 0xae
 800ab0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab10:	699b      	ldr	r3, [r3, #24]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00f      	beq.n	800ab36 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800ab16:	7dba      	ldrb	r2, [r7, #22]
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ab1e:	7dba      	ldrb	r2, [r7, #22]
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	32ae      	adds	r2, #174	; 0xae
 800ab24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab28:	699b      	ldr	r3, [r3, #24]
 800ab2a:	7afa      	ldrb	r2, [r7, #11]
 800ab2c:	4611      	mov	r1, r2
 800ab2e:	68f8      	ldr	r0, [r7, #12]
 800ab30:	4798      	blx	r3
 800ab32:	4603      	mov	r3, r0
 800ab34:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800ab36:	7dfb      	ldrb	r3, [r7, #23]
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	d001      	beq.n	800ab40 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800ab3c:	7dfb      	ldrb	r3, [r7, #23]
 800ab3e:	e000      	b.n	800ab42 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800ab40:	2300      	movs	r3, #0
}
 800ab42:	4618      	mov	r0, r3
 800ab44:	3718      	adds	r7, #24
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}

0800ab4a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800ab4a:	b580      	push	{r7, lr}
 800ab4c:	b086      	sub	sp, #24
 800ab4e:	af00      	add	r7, sp, #0
 800ab50:	60f8      	str	r0, [r7, #12]
 800ab52:	460b      	mov	r3, r1
 800ab54:	607a      	str	r2, [r7, #4]
 800ab56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800ab58:	7afb      	ldrb	r3, [r7, #11]
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d16f      	bne.n	800ac3e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800ab5e:	68fb      	ldr	r3, [r7, #12]
 800ab60:	3314      	adds	r3, #20
 800ab62:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ab6a:	2b02      	cmp	r3, #2
 800ab6c:	d15a      	bne.n	800ac24 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800ab6e:	693b      	ldr	r3, [r7, #16]
 800ab70:	689a      	ldr	r2, [r3, #8]
 800ab72:	693b      	ldr	r3, [r7, #16]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	429a      	cmp	r2, r3
 800ab78:	d914      	bls.n	800aba4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800ab7a:	693b      	ldr	r3, [r7, #16]
 800ab7c:	689a      	ldr	r2, [r3, #8]
 800ab7e:	693b      	ldr	r3, [r7, #16]
 800ab80:	68db      	ldr	r3, [r3, #12]
 800ab82:	1ad2      	subs	r2, r2, r3
 800ab84:	693b      	ldr	r3, [r7, #16]
 800ab86:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800ab88:	693b      	ldr	r3, [r7, #16]
 800ab8a:	689b      	ldr	r3, [r3, #8]
 800ab8c:	461a      	mov	r2, r3
 800ab8e:	6879      	ldr	r1, [r7, #4]
 800ab90:	68f8      	ldr	r0, [r7, #12]
 800ab92:	f001 f8ac 	bl	800bcee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ab96:	2300      	movs	r3, #0
 800ab98:	2200      	movs	r2, #0
 800ab9a:	2100      	movs	r1, #0
 800ab9c:	68f8      	ldr	r0, [r7, #12]
 800ab9e:	f001 fcc5 	bl	800c52c <USBD_LL_PrepareReceive>
 800aba2:	e03f      	b.n	800ac24 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	68da      	ldr	r2, [r3, #12]
 800aba8:	693b      	ldr	r3, [r7, #16]
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	429a      	cmp	r2, r3
 800abae:	d11c      	bne.n	800abea <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800abb0:	693b      	ldr	r3, [r7, #16]
 800abb2:	685a      	ldr	r2, [r3, #4]
 800abb4:	693b      	ldr	r3, [r7, #16]
 800abb6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800abb8:	429a      	cmp	r2, r3
 800abba:	d316      	bcc.n	800abea <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800abbc:	693b      	ldr	r3, [r7, #16]
 800abbe:	685a      	ldr	r2, [r3, #4]
 800abc0:	68fb      	ldr	r3, [r7, #12]
 800abc2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800abc6:	429a      	cmp	r2, r3
 800abc8:	d20f      	bcs.n	800abea <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800abca:	2200      	movs	r2, #0
 800abcc:	2100      	movs	r1, #0
 800abce:	68f8      	ldr	r0, [r7, #12]
 800abd0:	f001 f88d 	bl	800bcee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	2200      	movs	r2, #0
 800abd8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800abdc:	2300      	movs	r3, #0
 800abde:	2200      	movs	r2, #0
 800abe0:	2100      	movs	r1, #0
 800abe2:	68f8      	ldr	r0, [r7, #12]
 800abe4:	f001 fca2 	bl	800c52c <USBD_LL_PrepareReceive>
 800abe8:	e01c      	b.n	800ac24 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800abea:	68fb      	ldr	r3, [r7, #12]
 800abec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800abf0:	b2db      	uxtb	r3, r3
 800abf2:	2b03      	cmp	r3, #3
 800abf4:	d10f      	bne.n	800ac16 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800abfc:	68db      	ldr	r3, [r3, #12]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d009      	beq.n	800ac16 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	2200      	movs	r2, #0
 800ac06:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800ac0a:	68fb      	ldr	r3, [r7, #12]
 800ac0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	68f8      	ldr	r0, [r7, #12]
 800ac14:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800ac16:	2180      	movs	r1, #128	; 0x80
 800ac18:	68f8      	ldr	r0, [r7, #12]
 800ac1a:	f001 fbdd 	bl	800c3d8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800ac1e:	68f8      	ldr	r0, [r7, #12]
 800ac20:	f001 f89a 	bl	800bd58 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d03a      	beq.n	800aca4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800ac2e:	68f8      	ldr	r0, [r7, #12]
 800ac30:	f7ff fe42 	bl	800a8b8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	2200      	movs	r2, #0
 800ac38:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800ac3c:	e032      	b.n	800aca4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800ac3e:	7afb      	ldrb	r3, [r7, #11]
 800ac40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800ac44:	b2db      	uxtb	r3, r3
 800ac46:	4619      	mov	r1, r3
 800ac48:	68f8      	ldr	r0, [r7, #12]
 800ac4a:	f000 f97f 	bl	800af4c <USBD_CoreFindEP>
 800ac4e:	4603      	mov	r3, r0
 800ac50:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac52:	7dfb      	ldrb	r3, [r7, #23]
 800ac54:	2bff      	cmp	r3, #255	; 0xff
 800ac56:	d025      	beq.n	800aca4 <USBD_LL_DataInStage+0x15a>
 800ac58:	7dfb      	ldrb	r3, [r7, #23]
 800ac5a:	2b00      	cmp	r3, #0
 800ac5c:	d122      	bne.n	800aca4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ac5e:	68fb      	ldr	r3, [r7, #12]
 800ac60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ac64:	b2db      	uxtb	r3, r3
 800ac66:	2b03      	cmp	r3, #3
 800ac68:	d11c      	bne.n	800aca4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800ac6a:	7dfa      	ldrb	r2, [r7, #23]
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	32ae      	adds	r2, #174	; 0xae
 800ac70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac74:	695b      	ldr	r3, [r3, #20]
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d014      	beq.n	800aca4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800ac7a:	7dfa      	ldrb	r2, [r7, #23]
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800ac82:	7dfa      	ldrb	r2, [r7, #23]
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	32ae      	adds	r2, #174	; 0xae
 800ac88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ac8c:	695b      	ldr	r3, [r3, #20]
 800ac8e:	7afa      	ldrb	r2, [r7, #11]
 800ac90:	4611      	mov	r1, r2
 800ac92:	68f8      	ldr	r0, [r7, #12]
 800ac94:	4798      	blx	r3
 800ac96:	4603      	mov	r3, r0
 800ac98:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800ac9a:	7dbb      	ldrb	r3, [r7, #22]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d001      	beq.n	800aca4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800aca0:	7dbb      	ldrb	r3, [r7, #22]
 800aca2:	e000      	b.n	800aca6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800aca4:	2300      	movs	r3, #0
}
 800aca6:	4618      	mov	r0, r3
 800aca8:	3718      	adds	r7, #24
 800acaa:	46bd      	mov	sp, r7
 800acac:	bd80      	pop	{r7, pc}

0800acae <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800acae:	b580      	push	{r7, lr}
 800acb0:	b084      	sub	sp, #16
 800acb2:	af00      	add	r7, sp, #0
 800acb4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800acb6:	2300      	movs	r3, #0
 800acb8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	2201      	movs	r2, #1
 800acbe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	2200      	movs	r2, #0
 800acc6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	2200      	movs	r2, #0
 800acce:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	2200      	movs	r2, #0
 800acd4:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	2200      	movs	r2, #0
 800acdc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d014      	beq.n	800ad14 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acf0:	685b      	ldr	r3, [r3, #4]
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d00e      	beq.n	800ad14 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800acfc:	685b      	ldr	r3, [r3, #4]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	6852      	ldr	r2, [r2, #4]
 800ad02:	b2d2      	uxtb	r2, r2
 800ad04:	4611      	mov	r1, r2
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	4798      	blx	r3
 800ad0a:	4603      	mov	r3, r0
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d001      	beq.n	800ad14 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800ad10:	2303      	movs	r3, #3
 800ad12:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad14:	2340      	movs	r3, #64	; 0x40
 800ad16:	2200      	movs	r2, #0
 800ad18:	2100      	movs	r1, #0
 800ad1a:	6878      	ldr	r0, [r7, #4]
 800ad1c:	f001 fb17 	bl	800c34e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	2201      	movs	r2, #1
 800ad24:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2240      	movs	r2, #64	; 0x40
 800ad2c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800ad30:	2340      	movs	r3, #64	; 0x40
 800ad32:	2200      	movs	r2, #0
 800ad34:	2180      	movs	r1, #128	; 0x80
 800ad36:	6878      	ldr	r0, [r7, #4]
 800ad38:	f001 fb09 	bl	800c34e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2201      	movs	r2, #1
 800ad40:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	2240      	movs	r2, #64	; 0x40
 800ad46:	621a      	str	r2, [r3, #32]

  return ret;
 800ad48:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad4a:	4618      	mov	r0, r3
 800ad4c:	3710      	adds	r7, #16
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}

0800ad52 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800ad52:	b480      	push	{r7}
 800ad54:	b083      	sub	sp, #12
 800ad56:	af00      	add	r7, sp, #0
 800ad58:	6078      	str	r0, [r7, #4]
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	78fa      	ldrb	r2, [r7, #3]
 800ad62:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800ad64:	2300      	movs	r3, #0
}
 800ad66:	4618      	mov	r0, r3
 800ad68:	370c      	adds	r7, #12
 800ad6a:	46bd      	mov	sp, r7
 800ad6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad70:	4770      	bx	lr

0800ad72 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800ad72:	b480      	push	{r7}
 800ad74:	b083      	sub	sp, #12
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ad80:	b2da      	uxtb	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	2204      	movs	r2, #4
 800ad8c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	370c      	adds	r7, #12
 800ad96:	46bd      	mov	sp, r7
 800ad98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad9c:	4770      	bx	lr

0800ad9e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800ad9e:	b480      	push	{r7}
 800ada0:	b083      	sub	sp, #12
 800ada2:	af00      	add	r7, sp, #0
 800ada4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800adac:	b2db      	uxtb	r3, r3
 800adae:	2b04      	cmp	r3, #4
 800adb0:	d106      	bne.n	800adc0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800adc0:	2300      	movs	r3, #0
}
 800adc2:	4618      	mov	r0, r3
 800adc4:	370c      	adds	r7, #12
 800adc6:	46bd      	mov	sp, r7
 800adc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adcc:	4770      	bx	lr

0800adce <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800adce:	b580      	push	{r7, lr}
 800add0:	b082      	sub	sp, #8
 800add2:	af00      	add	r7, sp, #0
 800add4:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800addc:	b2db      	uxtb	r3, r3
 800adde:	2b03      	cmp	r3, #3
 800ade0:	d110      	bne.n	800ae04 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d00b      	beq.n	800ae04 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adf2:	69db      	ldr	r3, [r3, #28]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d005      	beq.n	800ae04 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800adfe:	69db      	ldr	r3, [r3, #28]
 800ae00:	6878      	ldr	r0, [r7, #4]
 800ae02:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800ae04:	2300      	movs	r3, #0
}
 800ae06:	4618      	mov	r0, r3
 800ae08:	3708      	adds	r7, #8
 800ae0a:	46bd      	mov	sp, r7
 800ae0c:	bd80      	pop	{r7, pc}

0800ae0e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800ae0e:	b580      	push	{r7, lr}
 800ae10:	b082      	sub	sp, #8
 800ae12:	af00      	add	r7, sp, #0
 800ae14:	6078      	str	r0, [r7, #4]
 800ae16:	460b      	mov	r3, r1
 800ae18:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	32ae      	adds	r2, #174	; 0xae
 800ae24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	d101      	bne.n	800ae30 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae2c:	2303      	movs	r3, #3
 800ae2e:	e01c      	b.n	800ae6a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	2b03      	cmp	r3, #3
 800ae3a:	d115      	bne.n	800ae68 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	32ae      	adds	r2, #174	; 0xae
 800ae46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae4a:	6a1b      	ldr	r3, [r3, #32]
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d00b      	beq.n	800ae68 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	32ae      	adds	r2, #174	; 0xae
 800ae5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae5e:	6a1b      	ldr	r3, [r3, #32]
 800ae60:	78fa      	ldrb	r2, [r7, #3]
 800ae62:	4611      	mov	r1, r2
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800ae68:	2300      	movs	r3, #0
}
 800ae6a:	4618      	mov	r0, r3
 800ae6c:	3708      	adds	r7, #8
 800ae6e:	46bd      	mov	sp, r7
 800ae70:	bd80      	pop	{r7, pc}

0800ae72 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800ae72:	b580      	push	{r7, lr}
 800ae74:	b082      	sub	sp, #8
 800ae76:	af00      	add	r7, sp, #0
 800ae78:	6078      	str	r0, [r7, #4]
 800ae7a:	460b      	mov	r3, r1
 800ae7c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	32ae      	adds	r2, #174	; 0xae
 800ae88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d101      	bne.n	800ae94 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800ae90:	2303      	movs	r3, #3
 800ae92:	e01c      	b.n	800aece <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ae9a:	b2db      	uxtb	r3, r3
 800ae9c:	2b03      	cmp	r3, #3
 800ae9e:	d115      	bne.n	800aecc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	32ae      	adds	r2, #174	; 0xae
 800aeaa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d00b      	beq.n	800aecc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	32ae      	adds	r2, #174	; 0xae
 800aebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec4:	78fa      	ldrb	r2, [r7, #3]
 800aec6:	4611      	mov	r1, r2
 800aec8:	6878      	ldr	r0, [r7, #4]
 800aeca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800aecc:	2300      	movs	r3, #0
}
 800aece:	4618      	mov	r0, r3
 800aed0:	3708      	adds	r7, #8
 800aed2:	46bd      	mov	sp, r7
 800aed4:	bd80      	pop	{r7, pc}

0800aed6 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800aed6:	b480      	push	{r7}
 800aed8:	b083      	sub	sp, #12
 800aeda:	af00      	add	r7, sp, #0
 800aedc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800aede:	2300      	movs	r3, #0
}
 800aee0:	4618      	mov	r0, r3
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aef4:	2300      	movs	r3, #0
 800aef6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	2201      	movs	r2, #1
 800aefc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af06:	2b00      	cmp	r3, #0
 800af08:	d00e      	beq.n	800af28 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800af10:	685b      	ldr	r3, [r3, #4]
 800af12:	687a      	ldr	r2, [r7, #4]
 800af14:	6852      	ldr	r2, [r2, #4]
 800af16:	b2d2      	uxtb	r2, r2
 800af18:	4611      	mov	r1, r2
 800af1a:	6878      	ldr	r0, [r7, #4]
 800af1c:	4798      	blx	r3
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	d001      	beq.n	800af28 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800af24:	2303      	movs	r3, #3
 800af26:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800af28:	7bfb      	ldrb	r3, [r7, #15]
}
 800af2a:	4618      	mov	r0, r3
 800af2c:	3710      	adds	r7, #16
 800af2e:	46bd      	mov	sp, r7
 800af30:	bd80      	pop	{r7, pc}

0800af32 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af32:	b480      	push	{r7}
 800af34:	b083      	sub	sp, #12
 800af36:	af00      	add	r7, sp, #0
 800af38:	6078      	str	r0, [r7, #4]
 800af3a:	460b      	mov	r3, r1
 800af3c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af3e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af40:	4618      	mov	r0, r3
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr

0800af4c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800af4c:	b480      	push	{r7}
 800af4e:	b083      	sub	sp, #12
 800af50:	af00      	add	r7, sp, #0
 800af52:	6078      	str	r0, [r7, #4]
 800af54:	460b      	mov	r3, r1
 800af56:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800af58:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800af5a:	4618      	mov	r0, r3
 800af5c:	370c      	adds	r7, #12
 800af5e:	46bd      	mov	sp, r7
 800af60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af64:	4770      	bx	lr

0800af66 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800af66:	b580      	push	{r7, lr}
 800af68:	b086      	sub	sp, #24
 800af6a:	af00      	add	r7, sp, #0
 800af6c:	6078      	str	r0, [r7, #4]
 800af6e:	460b      	mov	r3, r1
 800af70:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800af7a:	2300      	movs	r3, #0
 800af7c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	885b      	ldrh	r3, [r3, #2]
 800af82:	b29a      	uxth	r2, r3
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	781b      	ldrb	r3, [r3, #0]
 800af88:	b29b      	uxth	r3, r3
 800af8a:	429a      	cmp	r2, r3
 800af8c:	d920      	bls.n	800afd0 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	781b      	ldrb	r3, [r3, #0]
 800af92:	b29b      	uxth	r3, r3
 800af94:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800af96:	e013      	b.n	800afc0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800af98:	f107 030a 	add.w	r3, r7, #10
 800af9c:	4619      	mov	r1, r3
 800af9e:	6978      	ldr	r0, [r7, #20]
 800afa0:	f000 f81b 	bl	800afda <USBD_GetNextDesc>
 800afa4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	785b      	ldrb	r3, [r3, #1]
 800afaa:	2b05      	cmp	r3, #5
 800afac:	d108      	bne.n	800afc0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800afae:	697b      	ldr	r3, [r7, #20]
 800afb0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800afb2:	693b      	ldr	r3, [r7, #16]
 800afb4:	789b      	ldrb	r3, [r3, #2]
 800afb6:	78fa      	ldrb	r2, [r7, #3]
 800afb8:	429a      	cmp	r2, r3
 800afba:	d008      	beq.n	800afce <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800afbc:	2300      	movs	r3, #0
 800afbe:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	885b      	ldrh	r3, [r3, #2]
 800afc4:	b29a      	uxth	r2, r3
 800afc6:	897b      	ldrh	r3, [r7, #10]
 800afc8:	429a      	cmp	r2, r3
 800afca:	d8e5      	bhi.n	800af98 <USBD_GetEpDesc+0x32>
 800afcc:	e000      	b.n	800afd0 <USBD_GetEpDesc+0x6a>
          break;
 800afce:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800afd0:	693b      	ldr	r3, [r7, #16]
}
 800afd2:	4618      	mov	r0, r3
 800afd4:	3718      	adds	r7, #24
 800afd6:	46bd      	mov	sp, r7
 800afd8:	bd80      	pop	{r7, pc}

0800afda <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800afda:	b480      	push	{r7}
 800afdc:	b085      	sub	sp, #20
 800afde:	af00      	add	r7, sp, #0
 800afe0:	6078      	str	r0, [r7, #4]
 800afe2:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	881a      	ldrh	r2, [r3, #0]
 800afec:	68fb      	ldr	r3, [r7, #12]
 800afee:	781b      	ldrb	r3, [r3, #0]
 800aff0:	b29b      	uxth	r3, r3
 800aff2:	4413      	add	r3, r2
 800aff4:	b29a      	uxth	r2, r3
 800aff6:	683b      	ldr	r3, [r7, #0]
 800aff8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800affa:	68fb      	ldr	r3, [r7, #12]
 800affc:	781b      	ldrb	r3, [r3, #0]
 800affe:	461a      	mov	r2, r3
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	4413      	add	r3, r2
 800b004:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b006:	68fb      	ldr	r3, [r7, #12]
}
 800b008:	4618      	mov	r0, r3
 800b00a:	3714      	adds	r7, #20
 800b00c:	46bd      	mov	sp, r7
 800b00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b012:	4770      	bx	lr

0800b014 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b014:	b480      	push	{r7}
 800b016:	b087      	sub	sp, #28
 800b018:	af00      	add	r7, sp, #0
 800b01a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b020:	697b      	ldr	r3, [r7, #20]
 800b022:	781b      	ldrb	r3, [r3, #0]
 800b024:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	3301      	adds	r3, #1
 800b02a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b02c:	697b      	ldr	r3, [r7, #20]
 800b02e:	781b      	ldrb	r3, [r3, #0]
 800b030:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b032:	8a3b      	ldrh	r3, [r7, #16]
 800b034:	021b      	lsls	r3, r3, #8
 800b036:	b21a      	sxth	r2, r3
 800b038:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b03c:	4313      	orrs	r3, r2
 800b03e:	b21b      	sxth	r3, r3
 800b040:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b042:	89fb      	ldrh	r3, [r7, #14]
}
 800b044:	4618      	mov	r0, r3
 800b046:	371c      	adds	r7, #28
 800b048:	46bd      	mov	sp, r7
 800b04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04e:	4770      	bx	lr

0800b050 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b084      	sub	sp, #16
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
 800b058:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b05a:	2300      	movs	r3, #0
 800b05c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b05e:	683b      	ldr	r3, [r7, #0]
 800b060:	781b      	ldrb	r3, [r3, #0]
 800b062:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b066:	2b40      	cmp	r3, #64	; 0x40
 800b068:	d005      	beq.n	800b076 <USBD_StdDevReq+0x26>
 800b06a:	2b40      	cmp	r3, #64	; 0x40
 800b06c:	d857      	bhi.n	800b11e <USBD_StdDevReq+0xce>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d00f      	beq.n	800b092 <USBD_StdDevReq+0x42>
 800b072:	2b20      	cmp	r3, #32
 800b074:	d153      	bne.n	800b11e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	32ae      	adds	r2, #174	; 0xae
 800b080:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b084:	689b      	ldr	r3, [r3, #8]
 800b086:	6839      	ldr	r1, [r7, #0]
 800b088:	6878      	ldr	r0, [r7, #4]
 800b08a:	4798      	blx	r3
 800b08c:	4603      	mov	r3, r0
 800b08e:	73fb      	strb	r3, [r7, #15]
      break;
 800b090:	e04a      	b.n	800b128 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b092:	683b      	ldr	r3, [r7, #0]
 800b094:	785b      	ldrb	r3, [r3, #1]
 800b096:	2b09      	cmp	r3, #9
 800b098:	d83b      	bhi.n	800b112 <USBD_StdDevReq+0xc2>
 800b09a:	a201      	add	r2, pc, #4	; (adr r2, 800b0a0 <USBD_StdDevReq+0x50>)
 800b09c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0a0:	0800b0f5 	.word	0x0800b0f5
 800b0a4:	0800b109 	.word	0x0800b109
 800b0a8:	0800b113 	.word	0x0800b113
 800b0ac:	0800b0ff 	.word	0x0800b0ff
 800b0b0:	0800b113 	.word	0x0800b113
 800b0b4:	0800b0d3 	.word	0x0800b0d3
 800b0b8:	0800b0c9 	.word	0x0800b0c9
 800b0bc:	0800b113 	.word	0x0800b113
 800b0c0:	0800b0eb 	.word	0x0800b0eb
 800b0c4:	0800b0dd 	.word	0x0800b0dd
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b0c8:	6839      	ldr	r1, [r7, #0]
 800b0ca:	6878      	ldr	r0, [r7, #4]
 800b0cc:	f000 fa3c 	bl	800b548 <USBD_GetDescriptor>
          break;
 800b0d0:	e024      	b.n	800b11c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b0d2:	6839      	ldr	r1, [r7, #0]
 800b0d4:	6878      	ldr	r0, [r7, #4]
 800b0d6:	f000 fba1 	bl	800b81c <USBD_SetAddress>
          break;
 800b0da:	e01f      	b.n	800b11c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b0dc:	6839      	ldr	r1, [r7, #0]
 800b0de:	6878      	ldr	r0, [r7, #4]
 800b0e0:	f000 fbe0 	bl	800b8a4 <USBD_SetConfig>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	73fb      	strb	r3, [r7, #15]
          break;
 800b0e8:	e018      	b.n	800b11c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b0ea:	6839      	ldr	r1, [r7, #0]
 800b0ec:	6878      	ldr	r0, [r7, #4]
 800b0ee:	f000 fc83 	bl	800b9f8 <USBD_GetConfig>
          break;
 800b0f2:	e013      	b.n	800b11c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b0f4:	6839      	ldr	r1, [r7, #0]
 800b0f6:	6878      	ldr	r0, [r7, #4]
 800b0f8:	f000 fcb4 	bl	800ba64 <USBD_GetStatus>
          break;
 800b0fc:	e00e      	b.n	800b11c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b0fe:	6839      	ldr	r1, [r7, #0]
 800b100:	6878      	ldr	r0, [r7, #4]
 800b102:	f000 fce3 	bl	800bacc <USBD_SetFeature>
          break;
 800b106:	e009      	b.n	800b11c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b108:	6839      	ldr	r1, [r7, #0]
 800b10a:	6878      	ldr	r0, [r7, #4]
 800b10c:	f000 fd07 	bl	800bb1e <USBD_ClrFeature>
          break;
 800b110:	e004      	b.n	800b11c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b112:	6839      	ldr	r1, [r7, #0]
 800b114:	6878      	ldr	r0, [r7, #4]
 800b116:	f000 fd5e 	bl	800bbd6 <USBD_CtlError>
          break;
 800b11a:	bf00      	nop
      }
      break;
 800b11c:	e004      	b.n	800b128 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b11e:	6839      	ldr	r1, [r7, #0]
 800b120:	6878      	ldr	r0, [r7, #4]
 800b122:	f000 fd58 	bl	800bbd6 <USBD_CtlError>
      break;
 800b126:	bf00      	nop
  }

  return ret;
 800b128:	7bfb      	ldrb	r3, [r7, #15]
}
 800b12a:	4618      	mov	r0, r3
 800b12c:	3710      	adds	r7, #16
 800b12e:	46bd      	mov	sp, r7
 800b130:	bd80      	pop	{r7, pc}
 800b132:	bf00      	nop

0800b134 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b134:	b580      	push	{r7, lr}
 800b136:	b084      	sub	sp, #16
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
 800b13c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b13e:	2300      	movs	r3, #0
 800b140:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b142:	683b      	ldr	r3, [r7, #0]
 800b144:	781b      	ldrb	r3, [r3, #0]
 800b146:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b14a:	2b40      	cmp	r3, #64	; 0x40
 800b14c:	d005      	beq.n	800b15a <USBD_StdItfReq+0x26>
 800b14e:	2b40      	cmp	r3, #64	; 0x40
 800b150:	d852      	bhi.n	800b1f8 <USBD_StdItfReq+0xc4>
 800b152:	2b00      	cmp	r3, #0
 800b154:	d001      	beq.n	800b15a <USBD_StdItfReq+0x26>
 800b156:	2b20      	cmp	r3, #32
 800b158:	d14e      	bne.n	800b1f8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b160:	b2db      	uxtb	r3, r3
 800b162:	3b01      	subs	r3, #1
 800b164:	2b02      	cmp	r3, #2
 800b166:	d840      	bhi.n	800b1ea <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b168:	683b      	ldr	r3, [r7, #0]
 800b16a:	889b      	ldrh	r3, [r3, #4]
 800b16c:	b2db      	uxtb	r3, r3
 800b16e:	2b01      	cmp	r3, #1
 800b170:	d836      	bhi.n	800b1e0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b172:	683b      	ldr	r3, [r7, #0]
 800b174:	889b      	ldrh	r3, [r3, #4]
 800b176:	b2db      	uxtb	r3, r3
 800b178:	4619      	mov	r1, r3
 800b17a:	6878      	ldr	r0, [r7, #4]
 800b17c:	f7ff fed9 	bl	800af32 <USBD_CoreFindIF>
 800b180:	4603      	mov	r3, r0
 800b182:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b184:	7bbb      	ldrb	r3, [r7, #14]
 800b186:	2bff      	cmp	r3, #255	; 0xff
 800b188:	d01d      	beq.n	800b1c6 <USBD_StdItfReq+0x92>
 800b18a:	7bbb      	ldrb	r3, [r7, #14]
 800b18c:	2b00      	cmp	r3, #0
 800b18e:	d11a      	bne.n	800b1c6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b190:	7bba      	ldrb	r2, [r7, #14]
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	32ae      	adds	r2, #174	; 0xae
 800b196:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b19a:	689b      	ldr	r3, [r3, #8]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d00f      	beq.n	800b1c0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b1a0:	7bba      	ldrb	r2, [r7, #14]
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b1a8:	7bba      	ldrb	r2, [r7, #14]
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	32ae      	adds	r2, #174	; 0xae
 800b1ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b1b2:	689b      	ldr	r3, [r3, #8]
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	4798      	blx	r3
 800b1ba:	4603      	mov	r3, r0
 800b1bc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b1be:	e004      	b.n	800b1ca <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b1c0:	2303      	movs	r3, #3
 800b1c2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b1c4:	e001      	b.n	800b1ca <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b1c6:	2303      	movs	r3, #3
 800b1c8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b1ca:	683b      	ldr	r3, [r7, #0]
 800b1cc:	88db      	ldrh	r3, [r3, #6]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d110      	bne.n	800b1f4 <USBD_StdItfReq+0xc0>
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10d      	bne.n	800b1f4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b1d8:	6878      	ldr	r0, [r7, #4]
 800b1da:	f000 fdaa 	bl	800bd32 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b1de:	e009      	b.n	800b1f4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b1e0:	6839      	ldr	r1, [r7, #0]
 800b1e2:	6878      	ldr	r0, [r7, #4]
 800b1e4:	f000 fcf7 	bl	800bbd6 <USBD_CtlError>
          break;
 800b1e8:	e004      	b.n	800b1f4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b1ea:	6839      	ldr	r1, [r7, #0]
 800b1ec:	6878      	ldr	r0, [r7, #4]
 800b1ee:	f000 fcf2 	bl	800bbd6 <USBD_CtlError>
          break;
 800b1f2:	e000      	b.n	800b1f6 <USBD_StdItfReq+0xc2>
          break;
 800b1f4:	bf00      	nop
      }
      break;
 800b1f6:	e004      	b.n	800b202 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b1f8:	6839      	ldr	r1, [r7, #0]
 800b1fa:	6878      	ldr	r0, [r7, #4]
 800b1fc:	f000 fceb 	bl	800bbd6 <USBD_CtlError>
      break;
 800b200:	bf00      	nop
  }

  return ret;
 800b202:	7bfb      	ldrb	r3, [r7, #15]
}
 800b204:	4618      	mov	r0, r3
 800b206:	3710      	adds	r7, #16
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}

0800b20c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b20c:	b580      	push	{r7, lr}
 800b20e:	b084      	sub	sp, #16
 800b210:	af00      	add	r7, sp, #0
 800b212:	6078      	str	r0, [r7, #4]
 800b214:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b216:	2300      	movs	r3, #0
 800b218:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b21a:	683b      	ldr	r3, [r7, #0]
 800b21c:	889b      	ldrh	r3, [r3, #4]
 800b21e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b220:	683b      	ldr	r3, [r7, #0]
 800b222:	781b      	ldrb	r3, [r3, #0]
 800b224:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800b228:	2b40      	cmp	r3, #64	; 0x40
 800b22a:	d007      	beq.n	800b23c <USBD_StdEPReq+0x30>
 800b22c:	2b40      	cmp	r3, #64	; 0x40
 800b22e:	f200 817f 	bhi.w	800b530 <USBD_StdEPReq+0x324>
 800b232:	2b00      	cmp	r3, #0
 800b234:	d02a      	beq.n	800b28c <USBD_StdEPReq+0x80>
 800b236:	2b20      	cmp	r3, #32
 800b238:	f040 817a 	bne.w	800b530 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b23c:	7bbb      	ldrb	r3, [r7, #14]
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f7ff fe83 	bl	800af4c <USBD_CoreFindEP>
 800b246:	4603      	mov	r3, r0
 800b248:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b24a:	7b7b      	ldrb	r3, [r7, #13]
 800b24c:	2bff      	cmp	r3, #255	; 0xff
 800b24e:	f000 8174 	beq.w	800b53a <USBD_StdEPReq+0x32e>
 800b252:	7b7b      	ldrb	r3, [r7, #13]
 800b254:	2b00      	cmp	r3, #0
 800b256:	f040 8170 	bne.w	800b53a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800b25a:	7b7a      	ldrb	r2, [r7, #13]
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b262:	7b7a      	ldrb	r2, [r7, #13]
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	32ae      	adds	r2, #174	; 0xae
 800b268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b26c:	689b      	ldr	r3, [r3, #8]
 800b26e:	2b00      	cmp	r3, #0
 800b270:	f000 8163 	beq.w	800b53a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b274:	7b7a      	ldrb	r2, [r7, #13]
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	32ae      	adds	r2, #174	; 0xae
 800b27a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b27e:	689b      	ldr	r3, [r3, #8]
 800b280:	6839      	ldr	r1, [r7, #0]
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	4798      	blx	r3
 800b286:	4603      	mov	r3, r0
 800b288:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b28a:	e156      	b.n	800b53a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	785b      	ldrb	r3, [r3, #1]
 800b290:	2b03      	cmp	r3, #3
 800b292:	d008      	beq.n	800b2a6 <USBD_StdEPReq+0x9a>
 800b294:	2b03      	cmp	r3, #3
 800b296:	f300 8145 	bgt.w	800b524 <USBD_StdEPReq+0x318>
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	f000 809b 	beq.w	800b3d6 <USBD_StdEPReq+0x1ca>
 800b2a0:	2b01      	cmp	r3, #1
 800b2a2:	d03c      	beq.n	800b31e <USBD_StdEPReq+0x112>
 800b2a4:	e13e      	b.n	800b524 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b2ac:	b2db      	uxtb	r3, r3
 800b2ae:	2b02      	cmp	r3, #2
 800b2b0:	d002      	beq.n	800b2b8 <USBD_StdEPReq+0xac>
 800b2b2:	2b03      	cmp	r3, #3
 800b2b4:	d016      	beq.n	800b2e4 <USBD_StdEPReq+0xd8>
 800b2b6:	e02c      	b.n	800b312 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b2b8:	7bbb      	ldrb	r3, [r7, #14]
 800b2ba:	2b00      	cmp	r3, #0
 800b2bc:	d00d      	beq.n	800b2da <USBD_StdEPReq+0xce>
 800b2be:	7bbb      	ldrb	r3, [r7, #14]
 800b2c0:	2b80      	cmp	r3, #128	; 0x80
 800b2c2:	d00a      	beq.n	800b2da <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b2c4:	7bbb      	ldrb	r3, [r7, #14]
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	6878      	ldr	r0, [r7, #4]
 800b2ca:	f001 f885 	bl	800c3d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b2ce:	2180      	movs	r1, #128	; 0x80
 800b2d0:	6878      	ldr	r0, [r7, #4]
 800b2d2:	f001 f881 	bl	800c3d8 <USBD_LL_StallEP>
 800b2d6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b2d8:	e020      	b.n	800b31c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b2da:	6839      	ldr	r1, [r7, #0]
 800b2dc:	6878      	ldr	r0, [r7, #4]
 800b2de:	f000 fc7a 	bl	800bbd6 <USBD_CtlError>
              break;
 800b2e2:	e01b      	b.n	800b31c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b2e4:	683b      	ldr	r3, [r7, #0]
 800b2e6:	885b      	ldrh	r3, [r3, #2]
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d10e      	bne.n	800b30a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b2ec:	7bbb      	ldrb	r3, [r7, #14]
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00b      	beq.n	800b30a <USBD_StdEPReq+0xfe>
 800b2f2:	7bbb      	ldrb	r3, [r7, #14]
 800b2f4:	2b80      	cmp	r3, #128	; 0x80
 800b2f6:	d008      	beq.n	800b30a <USBD_StdEPReq+0xfe>
 800b2f8:	683b      	ldr	r3, [r7, #0]
 800b2fa:	88db      	ldrh	r3, [r3, #6]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	d104      	bne.n	800b30a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b300:	7bbb      	ldrb	r3, [r7, #14]
 800b302:	4619      	mov	r1, r3
 800b304:	6878      	ldr	r0, [r7, #4]
 800b306:	f001 f867 	bl	800c3d8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f000 fd11 	bl	800bd32 <USBD_CtlSendStatus>

              break;
 800b310:	e004      	b.n	800b31c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b312:	6839      	ldr	r1, [r7, #0]
 800b314:	6878      	ldr	r0, [r7, #4]
 800b316:	f000 fc5e 	bl	800bbd6 <USBD_CtlError>
              break;
 800b31a:	bf00      	nop
          }
          break;
 800b31c:	e107      	b.n	800b52e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b324:	b2db      	uxtb	r3, r3
 800b326:	2b02      	cmp	r3, #2
 800b328:	d002      	beq.n	800b330 <USBD_StdEPReq+0x124>
 800b32a:	2b03      	cmp	r3, #3
 800b32c:	d016      	beq.n	800b35c <USBD_StdEPReq+0x150>
 800b32e:	e04b      	b.n	800b3c8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b330:	7bbb      	ldrb	r3, [r7, #14]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00d      	beq.n	800b352 <USBD_StdEPReq+0x146>
 800b336:	7bbb      	ldrb	r3, [r7, #14]
 800b338:	2b80      	cmp	r3, #128	; 0x80
 800b33a:	d00a      	beq.n	800b352 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b33c:	7bbb      	ldrb	r3, [r7, #14]
 800b33e:	4619      	mov	r1, r3
 800b340:	6878      	ldr	r0, [r7, #4]
 800b342:	f001 f849 	bl	800c3d8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b346:	2180      	movs	r1, #128	; 0x80
 800b348:	6878      	ldr	r0, [r7, #4]
 800b34a:	f001 f845 	bl	800c3d8 <USBD_LL_StallEP>
 800b34e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b350:	e040      	b.n	800b3d4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b352:	6839      	ldr	r1, [r7, #0]
 800b354:	6878      	ldr	r0, [r7, #4]
 800b356:	f000 fc3e 	bl	800bbd6 <USBD_CtlError>
              break;
 800b35a:	e03b      	b.n	800b3d4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	885b      	ldrh	r3, [r3, #2]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d136      	bne.n	800b3d2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b364:	7bbb      	ldrb	r3, [r7, #14]
 800b366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d004      	beq.n	800b378 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b36e:	7bbb      	ldrb	r3, [r7, #14]
 800b370:	4619      	mov	r1, r3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f001 f84f 	bl	800c416 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b378:	6878      	ldr	r0, [r7, #4]
 800b37a:	f000 fcda 	bl	800bd32 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b37e:	7bbb      	ldrb	r3, [r7, #14]
 800b380:	4619      	mov	r1, r3
 800b382:	6878      	ldr	r0, [r7, #4]
 800b384:	f7ff fde2 	bl	800af4c <USBD_CoreFindEP>
 800b388:	4603      	mov	r3, r0
 800b38a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b38c:	7b7b      	ldrb	r3, [r7, #13]
 800b38e:	2bff      	cmp	r3, #255	; 0xff
 800b390:	d01f      	beq.n	800b3d2 <USBD_StdEPReq+0x1c6>
 800b392:	7b7b      	ldrb	r3, [r7, #13]
 800b394:	2b00      	cmp	r3, #0
 800b396:	d11c      	bne.n	800b3d2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b398:	7b7a      	ldrb	r2, [r7, #13]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b3a0:	7b7a      	ldrb	r2, [r7, #13]
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	32ae      	adds	r2, #174	; 0xae
 800b3a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3aa:	689b      	ldr	r3, [r3, #8]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	d010      	beq.n	800b3d2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b3b0:	7b7a      	ldrb	r2, [r7, #13]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	32ae      	adds	r2, #174	; 0xae
 800b3b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b3ba:	689b      	ldr	r3, [r3, #8]
 800b3bc:	6839      	ldr	r1, [r7, #0]
 800b3be:	6878      	ldr	r0, [r7, #4]
 800b3c0:	4798      	blx	r3
 800b3c2:	4603      	mov	r3, r0
 800b3c4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b3c6:	e004      	b.n	800b3d2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b3c8:	6839      	ldr	r1, [r7, #0]
 800b3ca:	6878      	ldr	r0, [r7, #4]
 800b3cc:	f000 fc03 	bl	800bbd6 <USBD_CtlError>
              break;
 800b3d0:	e000      	b.n	800b3d4 <USBD_StdEPReq+0x1c8>
              break;
 800b3d2:	bf00      	nop
          }
          break;
 800b3d4:	e0ab      	b.n	800b52e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b3dc:	b2db      	uxtb	r3, r3
 800b3de:	2b02      	cmp	r3, #2
 800b3e0:	d002      	beq.n	800b3e8 <USBD_StdEPReq+0x1dc>
 800b3e2:	2b03      	cmp	r3, #3
 800b3e4:	d032      	beq.n	800b44c <USBD_StdEPReq+0x240>
 800b3e6:	e097      	b.n	800b518 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b3e8:	7bbb      	ldrb	r3, [r7, #14]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d007      	beq.n	800b3fe <USBD_StdEPReq+0x1f2>
 800b3ee:	7bbb      	ldrb	r3, [r7, #14]
 800b3f0:	2b80      	cmp	r3, #128	; 0x80
 800b3f2:	d004      	beq.n	800b3fe <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b3f4:	6839      	ldr	r1, [r7, #0]
 800b3f6:	6878      	ldr	r0, [r7, #4]
 800b3f8:	f000 fbed 	bl	800bbd6 <USBD_CtlError>
                break;
 800b3fc:	e091      	b.n	800b522 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b3fe:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b402:	2b00      	cmp	r3, #0
 800b404:	da0b      	bge.n	800b41e <USBD_StdEPReq+0x212>
 800b406:	7bbb      	ldrb	r3, [r7, #14]
 800b408:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b40c:	4613      	mov	r3, r2
 800b40e:	009b      	lsls	r3, r3, #2
 800b410:	4413      	add	r3, r2
 800b412:	009b      	lsls	r3, r3, #2
 800b414:	3310      	adds	r3, #16
 800b416:	687a      	ldr	r2, [r7, #4]
 800b418:	4413      	add	r3, r2
 800b41a:	3304      	adds	r3, #4
 800b41c:	e00b      	b.n	800b436 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b41e:	7bbb      	ldrb	r3, [r7, #14]
 800b420:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b424:	4613      	mov	r3, r2
 800b426:	009b      	lsls	r3, r3, #2
 800b428:	4413      	add	r3, r2
 800b42a:	009b      	lsls	r3, r3, #2
 800b42c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b430:	687a      	ldr	r2, [r7, #4]
 800b432:	4413      	add	r3, r2
 800b434:	3304      	adds	r3, #4
 800b436:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b438:	68bb      	ldr	r3, [r7, #8]
 800b43a:	2200      	movs	r2, #0
 800b43c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b43e:	68bb      	ldr	r3, [r7, #8]
 800b440:	2202      	movs	r2, #2
 800b442:	4619      	mov	r1, r3
 800b444:	6878      	ldr	r0, [r7, #4]
 800b446:	f000 fc37 	bl	800bcb8 <USBD_CtlSendData>
              break;
 800b44a:	e06a      	b.n	800b522 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b44c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b450:	2b00      	cmp	r3, #0
 800b452:	da11      	bge.n	800b478 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b454:	7bbb      	ldrb	r3, [r7, #14]
 800b456:	f003 020f 	and.w	r2, r3, #15
 800b45a:	6879      	ldr	r1, [r7, #4]
 800b45c:	4613      	mov	r3, r2
 800b45e:	009b      	lsls	r3, r3, #2
 800b460:	4413      	add	r3, r2
 800b462:	009b      	lsls	r3, r3, #2
 800b464:	440b      	add	r3, r1
 800b466:	3324      	adds	r3, #36	; 0x24
 800b468:	881b      	ldrh	r3, [r3, #0]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d117      	bne.n	800b49e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b46e:	6839      	ldr	r1, [r7, #0]
 800b470:	6878      	ldr	r0, [r7, #4]
 800b472:	f000 fbb0 	bl	800bbd6 <USBD_CtlError>
                  break;
 800b476:	e054      	b.n	800b522 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b478:	7bbb      	ldrb	r3, [r7, #14]
 800b47a:	f003 020f 	and.w	r2, r3, #15
 800b47e:	6879      	ldr	r1, [r7, #4]
 800b480:	4613      	mov	r3, r2
 800b482:	009b      	lsls	r3, r3, #2
 800b484:	4413      	add	r3, r2
 800b486:	009b      	lsls	r3, r3, #2
 800b488:	440b      	add	r3, r1
 800b48a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800b48e:	881b      	ldrh	r3, [r3, #0]
 800b490:	2b00      	cmp	r3, #0
 800b492:	d104      	bne.n	800b49e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800b494:	6839      	ldr	r1, [r7, #0]
 800b496:	6878      	ldr	r0, [r7, #4]
 800b498:	f000 fb9d 	bl	800bbd6 <USBD_CtlError>
                  break;
 800b49c:	e041      	b.n	800b522 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b49e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	da0b      	bge.n	800b4be <USBD_StdEPReq+0x2b2>
 800b4a6:	7bbb      	ldrb	r3, [r7, #14]
 800b4a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800b4ac:	4613      	mov	r3, r2
 800b4ae:	009b      	lsls	r3, r3, #2
 800b4b0:	4413      	add	r3, r2
 800b4b2:	009b      	lsls	r3, r3, #2
 800b4b4:	3310      	adds	r3, #16
 800b4b6:	687a      	ldr	r2, [r7, #4]
 800b4b8:	4413      	add	r3, r2
 800b4ba:	3304      	adds	r3, #4
 800b4bc:	e00b      	b.n	800b4d6 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b4be:	7bbb      	ldrb	r3, [r7, #14]
 800b4c0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b4c4:	4613      	mov	r3, r2
 800b4c6:	009b      	lsls	r3, r3, #2
 800b4c8:	4413      	add	r3, r2
 800b4ca:	009b      	lsls	r3, r3, #2
 800b4cc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	4413      	add	r3, r2
 800b4d4:	3304      	adds	r3, #4
 800b4d6:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b4d8:	7bbb      	ldrb	r3, [r7, #14]
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d002      	beq.n	800b4e4 <USBD_StdEPReq+0x2d8>
 800b4de:	7bbb      	ldrb	r3, [r7, #14]
 800b4e0:	2b80      	cmp	r3, #128	; 0x80
 800b4e2:	d103      	bne.n	800b4ec <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 800b4e4:	68bb      	ldr	r3, [r7, #8]
 800b4e6:	2200      	movs	r2, #0
 800b4e8:	601a      	str	r2, [r3, #0]
 800b4ea:	e00e      	b.n	800b50a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b4ec:	7bbb      	ldrb	r3, [r7, #14]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f000 ffaf 	bl	800c454 <USBD_LL_IsStallEP>
 800b4f6:	4603      	mov	r3, r0
 800b4f8:	2b00      	cmp	r3, #0
 800b4fa:	d003      	beq.n	800b504 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800b4fc:	68bb      	ldr	r3, [r7, #8]
 800b4fe:	2201      	movs	r2, #1
 800b500:	601a      	str	r2, [r3, #0]
 800b502:	e002      	b.n	800b50a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	2200      	movs	r2, #0
 800b508:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b50a:	68bb      	ldr	r3, [r7, #8]
 800b50c:	2202      	movs	r2, #2
 800b50e:	4619      	mov	r1, r3
 800b510:	6878      	ldr	r0, [r7, #4]
 800b512:	f000 fbd1 	bl	800bcb8 <USBD_CtlSendData>
              break;
 800b516:	e004      	b.n	800b522 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800b518:	6839      	ldr	r1, [r7, #0]
 800b51a:	6878      	ldr	r0, [r7, #4]
 800b51c:	f000 fb5b 	bl	800bbd6 <USBD_CtlError>
              break;
 800b520:	bf00      	nop
          }
          break;
 800b522:	e004      	b.n	800b52e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800b524:	6839      	ldr	r1, [r7, #0]
 800b526:	6878      	ldr	r0, [r7, #4]
 800b528:	f000 fb55 	bl	800bbd6 <USBD_CtlError>
          break;
 800b52c:	bf00      	nop
      }
      break;
 800b52e:	e005      	b.n	800b53c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 800b530:	6839      	ldr	r1, [r7, #0]
 800b532:	6878      	ldr	r0, [r7, #4]
 800b534:	f000 fb4f 	bl	800bbd6 <USBD_CtlError>
      break;
 800b538:	e000      	b.n	800b53c <USBD_StdEPReq+0x330>
      break;
 800b53a:	bf00      	nop
  }

  return ret;
 800b53c:	7bfb      	ldrb	r3, [r7, #15]
}
 800b53e:	4618      	mov	r0, r3
 800b540:	3710      	adds	r7, #16
 800b542:	46bd      	mov	sp, r7
 800b544:	bd80      	pop	{r7, pc}
	...

0800b548 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b552:	2300      	movs	r3, #0
 800b554:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b556:	2300      	movs	r3, #0
 800b558:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b55a:	2300      	movs	r3, #0
 800b55c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	885b      	ldrh	r3, [r3, #2]
 800b562:	0a1b      	lsrs	r3, r3, #8
 800b564:	b29b      	uxth	r3, r3
 800b566:	3b01      	subs	r3, #1
 800b568:	2b06      	cmp	r3, #6
 800b56a:	f200 8128 	bhi.w	800b7be <USBD_GetDescriptor+0x276>
 800b56e:	a201      	add	r2, pc, #4	; (adr r2, 800b574 <USBD_GetDescriptor+0x2c>)
 800b570:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b574:	0800b591 	.word	0x0800b591
 800b578:	0800b5a9 	.word	0x0800b5a9
 800b57c:	0800b5e9 	.word	0x0800b5e9
 800b580:	0800b7bf 	.word	0x0800b7bf
 800b584:	0800b7bf 	.word	0x0800b7bf
 800b588:	0800b75f 	.word	0x0800b75f
 800b58c:	0800b78b 	.word	0x0800b78b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	687a      	ldr	r2, [r7, #4]
 800b59a:	7c12      	ldrb	r2, [r2, #16]
 800b59c:	f107 0108 	add.w	r1, r7, #8
 800b5a0:	4610      	mov	r0, r2
 800b5a2:	4798      	blx	r3
 800b5a4:	60f8      	str	r0, [r7, #12]
      break;
 800b5a6:	e112      	b.n	800b7ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	7c1b      	ldrb	r3, [r3, #16]
 800b5ac:	2b00      	cmp	r3, #0
 800b5ae:	d10d      	bne.n	800b5cc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5b8:	f107 0208 	add.w	r2, r7, #8
 800b5bc:	4610      	mov	r0, r2
 800b5be:	4798      	blx	r3
 800b5c0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	3301      	adds	r3, #1
 800b5c6:	2202      	movs	r2, #2
 800b5c8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b5ca:	e100      	b.n	800b7ce <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b5d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5d4:	f107 0208 	add.w	r2, r7, #8
 800b5d8:	4610      	mov	r0, r2
 800b5da:	4798      	blx	r3
 800b5dc:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	3301      	adds	r3, #1
 800b5e2:	2202      	movs	r2, #2
 800b5e4:	701a      	strb	r2, [r3, #0]
      break;
 800b5e6:	e0f2      	b.n	800b7ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b5e8:	683b      	ldr	r3, [r7, #0]
 800b5ea:	885b      	ldrh	r3, [r3, #2]
 800b5ec:	b2db      	uxtb	r3, r3
 800b5ee:	2b05      	cmp	r3, #5
 800b5f0:	f200 80ac 	bhi.w	800b74c <USBD_GetDescriptor+0x204>
 800b5f4:	a201      	add	r2, pc, #4	; (adr r2, 800b5fc <USBD_GetDescriptor+0xb4>)
 800b5f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5fa:	bf00      	nop
 800b5fc:	0800b615 	.word	0x0800b615
 800b600:	0800b649 	.word	0x0800b649
 800b604:	0800b67d 	.word	0x0800b67d
 800b608:	0800b6b1 	.word	0x0800b6b1
 800b60c:	0800b6e5 	.word	0x0800b6e5
 800b610:	0800b719 	.word	0x0800b719
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b61a:	685b      	ldr	r3, [r3, #4]
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d00b      	beq.n	800b638 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b626:	685b      	ldr	r3, [r3, #4]
 800b628:	687a      	ldr	r2, [r7, #4]
 800b62a:	7c12      	ldrb	r2, [r2, #16]
 800b62c:	f107 0108 	add.w	r1, r7, #8
 800b630:	4610      	mov	r0, r2
 800b632:	4798      	blx	r3
 800b634:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b636:	e091      	b.n	800b75c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b638:	6839      	ldr	r1, [r7, #0]
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f000 facb 	bl	800bbd6 <USBD_CtlError>
            err++;
 800b640:	7afb      	ldrb	r3, [r7, #11]
 800b642:	3301      	adds	r3, #1
 800b644:	72fb      	strb	r3, [r7, #11]
          break;
 800b646:	e089      	b.n	800b75c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b64e:	689b      	ldr	r3, [r3, #8]
 800b650:	2b00      	cmp	r3, #0
 800b652:	d00b      	beq.n	800b66c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b65a:	689b      	ldr	r3, [r3, #8]
 800b65c:	687a      	ldr	r2, [r7, #4]
 800b65e:	7c12      	ldrb	r2, [r2, #16]
 800b660:	f107 0108 	add.w	r1, r7, #8
 800b664:	4610      	mov	r0, r2
 800b666:	4798      	blx	r3
 800b668:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b66a:	e077      	b.n	800b75c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b66c:	6839      	ldr	r1, [r7, #0]
 800b66e:	6878      	ldr	r0, [r7, #4]
 800b670:	f000 fab1 	bl	800bbd6 <USBD_CtlError>
            err++;
 800b674:	7afb      	ldrb	r3, [r7, #11]
 800b676:	3301      	adds	r3, #1
 800b678:	72fb      	strb	r3, [r7, #11]
          break;
 800b67a:	e06f      	b.n	800b75c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b682:	68db      	ldr	r3, [r3, #12]
 800b684:	2b00      	cmp	r3, #0
 800b686:	d00b      	beq.n	800b6a0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b68e:	68db      	ldr	r3, [r3, #12]
 800b690:	687a      	ldr	r2, [r7, #4]
 800b692:	7c12      	ldrb	r2, [r2, #16]
 800b694:	f107 0108 	add.w	r1, r7, #8
 800b698:	4610      	mov	r0, r2
 800b69a:	4798      	blx	r3
 800b69c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b69e:	e05d      	b.n	800b75c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6a0:	6839      	ldr	r1, [r7, #0]
 800b6a2:	6878      	ldr	r0, [r7, #4]
 800b6a4:	f000 fa97 	bl	800bbd6 <USBD_CtlError>
            err++;
 800b6a8:	7afb      	ldrb	r3, [r7, #11]
 800b6aa:	3301      	adds	r3, #1
 800b6ac:	72fb      	strb	r3, [r7, #11]
          break;
 800b6ae:	e055      	b.n	800b75c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6b6:	691b      	ldr	r3, [r3, #16]
 800b6b8:	2b00      	cmp	r3, #0
 800b6ba:	d00b      	beq.n	800b6d4 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6c2:	691b      	ldr	r3, [r3, #16]
 800b6c4:	687a      	ldr	r2, [r7, #4]
 800b6c6:	7c12      	ldrb	r2, [r2, #16]
 800b6c8:	f107 0108 	add.w	r1, r7, #8
 800b6cc:	4610      	mov	r0, r2
 800b6ce:	4798      	blx	r3
 800b6d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b6d2:	e043      	b.n	800b75c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b6d4:	6839      	ldr	r1, [r7, #0]
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f000 fa7d 	bl	800bbd6 <USBD_CtlError>
            err++;
 800b6dc:	7afb      	ldrb	r3, [r7, #11]
 800b6de:	3301      	adds	r3, #1
 800b6e0:	72fb      	strb	r3, [r7, #11]
          break;
 800b6e2:	e03b      	b.n	800b75c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6ea:	695b      	ldr	r3, [r3, #20]
 800b6ec:	2b00      	cmp	r3, #0
 800b6ee:	d00b      	beq.n	800b708 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b6f6:	695b      	ldr	r3, [r3, #20]
 800b6f8:	687a      	ldr	r2, [r7, #4]
 800b6fa:	7c12      	ldrb	r2, [r2, #16]
 800b6fc:	f107 0108 	add.w	r1, r7, #8
 800b700:	4610      	mov	r0, r2
 800b702:	4798      	blx	r3
 800b704:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b706:	e029      	b.n	800b75c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b708:	6839      	ldr	r1, [r7, #0]
 800b70a:	6878      	ldr	r0, [r7, #4]
 800b70c:	f000 fa63 	bl	800bbd6 <USBD_CtlError>
            err++;
 800b710:	7afb      	ldrb	r3, [r7, #11]
 800b712:	3301      	adds	r3, #1
 800b714:	72fb      	strb	r3, [r7, #11]
          break;
 800b716:	e021      	b.n	800b75c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b71e:	699b      	ldr	r3, [r3, #24]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d00b      	beq.n	800b73c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800b72a:	699b      	ldr	r3, [r3, #24]
 800b72c:	687a      	ldr	r2, [r7, #4]
 800b72e:	7c12      	ldrb	r2, [r2, #16]
 800b730:	f107 0108 	add.w	r1, r7, #8
 800b734:	4610      	mov	r0, r2
 800b736:	4798      	blx	r3
 800b738:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b73a:	e00f      	b.n	800b75c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f000 fa49 	bl	800bbd6 <USBD_CtlError>
            err++;
 800b744:	7afb      	ldrb	r3, [r7, #11]
 800b746:	3301      	adds	r3, #1
 800b748:	72fb      	strb	r3, [r7, #11]
          break;
 800b74a:	e007      	b.n	800b75c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	6878      	ldr	r0, [r7, #4]
 800b750:	f000 fa41 	bl	800bbd6 <USBD_CtlError>
          err++;
 800b754:	7afb      	ldrb	r3, [r7, #11]
 800b756:	3301      	adds	r3, #1
 800b758:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b75a:	bf00      	nop
      }
      break;
 800b75c:	e037      	b.n	800b7ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	7c1b      	ldrb	r3, [r3, #16]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d109      	bne.n	800b77a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b766:	687b      	ldr	r3, [r7, #4]
 800b768:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b76c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b76e:	f107 0208 	add.w	r2, r7, #8
 800b772:	4610      	mov	r0, r2
 800b774:	4798      	blx	r3
 800b776:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b778:	e029      	b.n	800b7ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b77a:	6839      	ldr	r1, [r7, #0]
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f000 fa2a 	bl	800bbd6 <USBD_CtlError>
        err++;
 800b782:	7afb      	ldrb	r3, [r7, #11]
 800b784:	3301      	adds	r3, #1
 800b786:	72fb      	strb	r3, [r7, #11]
      break;
 800b788:	e021      	b.n	800b7ce <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	7c1b      	ldrb	r3, [r3, #16]
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d10d      	bne.n	800b7ae <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800b798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79a:	f107 0208 	add.w	r2, r7, #8
 800b79e:	4610      	mov	r0, r2
 800b7a0:	4798      	blx	r3
 800b7a2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b7a4:	68fb      	ldr	r3, [r7, #12]
 800b7a6:	3301      	adds	r3, #1
 800b7a8:	2207      	movs	r2, #7
 800b7aa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b7ac:	e00f      	b.n	800b7ce <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b7ae:	6839      	ldr	r1, [r7, #0]
 800b7b0:	6878      	ldr	r0, [r7, #4]
 800b7b2:	f000 fa10 	bl	800bbd6 <USBD_CtlError>
        err++;
 800b7b6:	7afb      	ldrb	r3, [r7, #11]
 800b7b8:	3301      	adds	r3, #1
 800b7ba:	72fb      	strb	r3, [r7, #11]
      break;
 800b7bc:	e007      	b.n	800b7ce <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b7be:	6839      	ldr	r1, [r7, #0]
 800b7c0:	6878      	ldr	r0, [r7, #4]
 800b7c2:	f000 fa08 	bl	800bbd6 <USBD_CtlError>
      err++;
 800b7c6:	7afb      	ldrb	r3, [r7, #11]
 800b7c8:	3301      	adds	r3, #1
 800b7ca:	72fb      	strb	r3, [r7, #11]
      break;
 800b7cc:	bf00      	nop
  }

  if (err != 0U)
 800b7ce:	7afb      	ldrb	r3, [r7, #11]
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d11e      	bne.n	800b812 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b7d4:	683b      	ldr	r3, [r7, #0]
 800b7d6:	88db      	ldrh	r3, [r3, #6]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d016      	beq.n	800b80a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b7dc:	893b      	ldrh	r3, [r7, #8]
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	d00e      	beq.n	800b800 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b7e2:	683b      	ldr	r3, [r7, #0]
 800b7e4:	88da      	ldrh	r2, [r3, #6]
 800b7e6:	893b      	ldrh	r3, [r7, #8]
 800b7e8:	4293      	cmp	r3, r2
 800b7ea:	bf28      	it	cs
 800b7ec:	4613      	movcs	r3, r2
 800b7ee:	b29b      	uxth	r3, r3
 800b7f0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b7f2:	893b      	ldrh	r3, [r7, #8]
 800b7f4:	461a      	mov	r2, r3
 800b7f6:	68f9      	ldr	r1, [r7, #12]
 800b7f8:	6878      	ldr	r0, [r7, #4]
 800b7fa:	f000 fa5d 	bl	800bcb8 <USBD_CtlSendData>
 800b7fe:	e009      	b.n	800b814 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b800:	6839      	ldr	r1, [r7, #0]
 800b802:	6878      	ldr	r0, [r7, #4]
 800b804:	f000 f9e7 	bl	800bbd6 <USBD_CtlError>
 800b808:	e004      	b.n	800b814 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	f000 fa91 	bl	800bd32 <USBD_CtlSendStatus>
 800b810:	e000      	b.n	800b814 <USBD_GetDescriptor+0x2cc>
    return;
 800b812:	bf00      	nop
  }
}
 800b814:	3710      	adds	r7, #16
 800b816:	46bd      	mov	sp, r7
 800b818:	bd80      	pop	{r7, pc}
 800b81a:	bf00      	nop

0800b81c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b084      	sub	sp, #16
 800b820:	af00      	add	r7, sp, #0
 800b822:	6078      	str	r0, [r7, #4]
 800b824:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	889b      	ldrh	r3, [r3, #4]
 800b82a:	2b00      	cmp	r3, #0
 800b82c:	d131      	bne.n	800b892 <USBD_SetAddress+0x76>
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	88db      	ldrh	r3, [r3, #6]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d12d      	bne.n	800b892 <USBD_SetAddress+0x76>
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	885b      	ldrh	r3, [r3, #2]
 800b83a:	2b7f      	cmp	r3, #127	; 0x7f
 800b83c:	d829      	bhi.n	800b892 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	885b      	ldrh	r3, [r3, #2]
 800b842:	b2db      	uxtb	r3, r3
 800b844:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b848:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b850:	b2db      	uxtb	r3, r3
 800b852:	2b03      	cmp	r3, #3
 800b854:	d104      	bne.n	800b860 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b856:	6839      	ldr	r1, [r7, #0]
 800b858:	6878      	ldr	r0, [r7, #4]
 800b85a:	f000 f9bc 	bl	800bbd6 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b85e:	e01d      	b.n	800b89c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	7bfa      	ldrb	r2, [r7, #15]
 800b864:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b868:	7bfb      	ldrb	r3, [r7, #15]
 800b86a:	4619      	mov	r1, r3
 800b86c:	6878      	ldr	r0, [r7, #4]
 800b86e:	f000 fe1d 	bl	800c4ac <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f000 fa5d 	bl	800bd32 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b878:	7bfb      	ldrb	r3, [r7, #15]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d004      	beq.n	800b888 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2202      	movs	r2, #2
 800b882:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b886:	e009      	b.n	800b89c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2201      	movs	r2, #1
 800b88c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b890:	e004      	b.n	800b89c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b892:	6839      	ldr	r1, [r7, #0]
 800b894:	6878      	ldr	r0, [r7, #4]
 800b896:	f000 f99e 	bl	800bbd6 <USBD_CtlError>
  }
}
 800b89a:	bf00      	nop
 800b89c:	bf00      	nop
 800b89e:	3710      	adds	r7, #16
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	bd80      	pop	{r7, pc}

0800b8a4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b8b2:	683b      	ldr	r3, [r7, #0]
 800b8b4:	885b      	ldrh	r3, [r3, #2]
 800b8b6:	b2da      	uxtb	r2, r3
 800b8b8:	4b4e      	ldr	r3, [pc, #312]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b8ba:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b8bc:	4b4d      	ldr	r3, [pc, #308]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b01      	cmp	r3, #1
 800b8c2:	d905      	bls.n	800b8d0 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b8c4:	6839      	ldr	r1, [r7, #0]
 800b8c6:	6878      	ldr	r0, [r7, #4]
 800b8c8:	f000 f985 	bl	800bbd6 <USBD_CtlError>
    return USBD_FAIL;
 800b8cc:	2303      	movs	r3, #3
 800b8ce:	e08c      	b.n	800b9ea <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800b8d6:	b2db      	uxtb	r3, r3
 800b8d8:	2b02      	cmp	r3, #2
 800b8da:	d002      	beq.n	800b8e2 <USBD_SetConfig+0x3e>
 800b8dc:	2b03      	cmp	r3, #3
 800b8de:	d029      	beq.n	800b934 <USBD_SetConfig+0x90>
 800b8e0:	e075      	b.n	800b9ce <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b8e2:	4b44      	ldr	r3, [pc, #272]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b8e4:	781b      	ldrb	r3, [r3, #0]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d020      	beq.n	800b92c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b8ea:	4b42      	ldr	r3, [pc, #264]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b8ec:	781b      	ldrb	r3, [r3, #0]
 800b8ee:	461a      	mov	r2, r3
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b8f4:	4b3f      	ldr	r3, [pc, #252]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b8f6:	781b      	ldrb	r3, [r3, #0]
 800b8f8:	4619      	mov	r1, r3
 800b8fa:	6878      	ldr	r0, [r7, #4]
 800b8fc:	f7fe ffe7 	bl	800a8ce <USBD_SetClassConfig>
 800b900:	4603      	mov	r3, r0
 800b902:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b904:	7bfb      	ldrb	r3, [r7, #15]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d008      	beq.n	800b91c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b90a:	6839      	ldr	r1, [r7, #0]
 800b90c:	6878      	ldr	r0, [r7, #4]
 800b90e:	f000 f962 	bl	800bbd6 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b912:	687b      	ldr	r3, [r7, #4]
 800b914:	2202      	movs	r2, #2
 800b916:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b91a:	e065      	b.n	800b9e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b91c:	6878      	ldr	r0, [r7, #4]
 800b91e:	f000 fa08 	bl	800bd32 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	2203      	movs	r2, #3
 800b926:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b92a:	e05d      	b.n	800b9e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	f000 fa00 	bl	800bd32 <USBD_CtlSendStatus>
      break;
 800b932:	e059      	b.n	800b9e8 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b934:	4b2f      	ldr	r3, [pc, #188]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b936:	781b      	ldrb	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d112      	bne.n	800b962 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2202      	movs	r2, #2
 800b940:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800b944:	4b2b      	ldr	r3, [pc, #172]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b946:	781b      	ldrb	r3, [r3, #0]
 800b948:	461a      	mov	r2, r3
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b94e:	4b29      	ldr	r3, [pc, #164]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b950:	781b      	ldrb	r3, [r3, #0]
 800b952:	4619      	mov	r1, r3
 800b954:	6878      	ldr	r0, [r7, #4]
 800b956:	f7fe ffd6 	bl	800a906 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f9e9 	bl	800bd32 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b960:	e042      	b.n	800b9e8 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b962:	4b24      	ldr	r3, [pc, #144]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b964:	781b      	ldrb	r3, [r3, #0]
 800b966:	461a      	mov	r2, r3
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	685b      	ldr	r3, [r3, #4]
 800b96c:	429a      	cmp	r2, r3
 800b96e:	d02a      	beq.n	800b9c6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	685b      	ldr	r3, [r3, #4]
 800b974:	b2db      	uxtb	r3, r3
 800b976:	4619      	mov	r1, r3
 800b978:	6878      	ldr	r0, [r7, #4]
 800b97a:	f7fe ffc4 	bl	800a906 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b97e:	4b1d      	ldr	r3, [pc, #116]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	461a      	mov	r2, r3
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b988:	4b1a      	ldr	r3, [pc, #104]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b98a:	781b      	ldrb	r3, [r3, #0]
 800b98c:	4619      	mov	r1, r3
 800b98e:	6878      	ldr	r0, [r7, #4]
 800b990:	f7fe ff9d 	bl	800a8ce <USBD_SetClassConfig>
 800b994:	4603      	mov	r3, r0
 800b996:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b998:	7bfb      	ldrb	r3, [r7, #15]
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d00f      	beq.n	800b9be <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b99e:	6839      	ldr	r1, [r7, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	f000 f918 	bl	800bbd6 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	685b      	ldr	r3, [r3, #4]
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	f7fe ffa9 	bl	800a906 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	2202      	movs	r2, #2
 800b9b8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800b9bc:	e014      	b.n	800b9e8 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f9b7 	bl	800bd32 <USBD_CtlSendStatus>
      break;
 800b9c4:	e010      	b.n	800b9e8 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b9c6:	6878      	ldr	r0, [r7, #4]
 800b9c8:	f000 f9b3 	bl	800bd32 <USBD_CtlSendStatus>
      break;
 800b9cc:	e00c      	b.n	800b9e8 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6878      	ldr	r0, [r7, #4]
 800b9d2:	f000 f900 	bl	800bbd6 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b9d6:	4b07      	ldr	r3, [pc, #28]	; (800b9f4 <USBD_SetConfig+0x150>)
 800b9d8:	781b      	ldrb	r3, [r3, #0]
 800b9da:	4619      	mov	r1, r3
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f7fe ff92 	bl	800a906 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b9e2:	2303      	movs	r3, #3
 800b9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e6:	bf00      	nop
  }

  return ret;
 800b9e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b9ea:	4618      	mov	r0, r3
 800b9ec:	3710      	adds	r7, #16
 800b9ee:	46bd      	mov	sp, r7
 800b9f0:	bd80      	pop	{r7, pc}
 800b9f2:	bf00      	nop
 800b9f4:	2000e610 	.word	0x2000e610

0800b9f8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b082      	sub	sp, #8
 800b9fc:	af00      	add	r7, sp, #0
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800ba02:	683b      	ldr	r3, [r7, #0]
 800ba04:	88db      	ldrh	r3, [r3, #6]
 800ba06:	2b01      	cmp	r3, #1
 800ba08:	d004      	beq.n	800ba14 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800ba0a:	6839      	ldr	r1, [r7, #0]
 800ba0c:	6878      	ldr	r0, [r7, #4]
 800ba0e:	f000 f8e2 	bl	800bbd6 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800ba12:	e023      	b.n	800ba5c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba1a:	b2db      	uxtb	r3, r3
 800ba1c:	2b02      	cmp	r3, #2
 800ba1e:	dc02      	bgt.n	800ba26 <USBD_GetConfig+0x2e>
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dc03      	bgt.n	800ba2c <USBD_GetConfig+0x34>
 800ba24:	e015      	b.n	800ba52 <USBD_GetConfig+0x5a>
 800ba26:	2b03      	cmp	r3, #3
 800ba28:	d00b      	beq.n	800ba42 <USBD_GetConfig+0x4a>
 800ba2a:	e012      	b.n	800ba52 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	3308      	adds	r3, #8
 800ba36:	2201      	movs	r2, #1
 800ba38:	4619      	mov	r1, r3
 800ba3a:	6878      	ldr	r0, [r7, #4]
 800ba3c:	f000 f93c 	bl	800bcb8 <USBD_CtlSendData>
        break;
 800ba40:	e00c      	b.n	800ba5c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	3304      	adds	r3, #4
 800ba46:	2201      	movs	r2, #1
 800ba48:	4619      	mov	r1, r3
 800ba4a:	6878      	ldr	r0, [r7, #4]
 800ba4c:	f000 f934 	bl	800bcb8 <USBD_CtlSendData>
        break;
 800ba50:	e004      	b.n	800ba5c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800ba52:	6839      	ldr	r1, [r7, #0]
 800ba54:	6878      	ldr	r0, [r7, #4]
 800ba56:	f000 f8be 	bl	800bbd6 <USBD_CtlError>
        break;
 800ba5a:	bf00      	nop
}
 800ba5c:	bf00      	nop
 800ba5e:	3708      	adds	r7, #8
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}

0800ba64 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ba64:	b580      	push	{r7, lr}
 800ba66:	b082      	sub	sp, #8
 800ba68:	af00      	add	r7, sp, #0
 800ba6a:	6078      	str	r0, [r7, #4]
 800ba6c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800ba6e:	687b      	ldr	r3, [r7, #4]
 800ba70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800ba74:	b2db      	uxtb	r3, r3
 800ba76:	3b01      	subs	r3, #1
 800ba78:	2b02      	cmp	r3, #2
 800ba7a:	d81e      	bhi.n	800baba <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800ba7c:	683b      	ldr	r3, [r7, #0]
 800ba7e:	88db      	ldrh	r3, [r3, #6]
 800ba80:	2b02      	cmp	r3, #2
 800ba82:	d004      	beq.n	800ba8e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800ba84:	6839      	ldr	r1, [r7, #0]
 800ba86:	6878      	ldr	r0, [r7, #4]
 800ba88:	f000 f8a5 	bl	800bbd6 <USBD_CtlError>
        break;
 800ba8c:	e01a      	b.n	800bac4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800ba9a:	2b00      	cmp	r3, #0
 800ba9c:	d005      	beq.n	800baaa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800ba9e:	687b      	ldr	r3, [r7, #4]
 800baa0:	68db      	ldr	r3, [r3, #12]
 800baa2:	f043 0202 	orr.w	r2, r3, #2
 800baa6:	687b      	ldr	r3, [r7, #4]
 800baa8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	330c      	adds	r3, #12
 800baae:	2202      	movs	r2, #2
 800bab0:	4619      	mov	r1, r3
 800bab2:	6878      	ldr	r0, [r7, #4]
 800bab4:	f000 f900 	bl	800bcb8 <USBD_CtlSendData>
      break;
 800bab8:	e004      	b.n	800bac4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800baba:	6839      	ldr	r1, [r7, #0]
 800babc:	6878      	ldr	r0, [r7, #4]
 800babe:	f000 f88a 	bl	800bbd6 <USBD_CtlError>
      break;
 800bac2:	bf00      	nop
  }
}
 800bac4:	bf00      	nop
 800bac6:	3708      	adds	r7, #8
 800bac8:	46bd      	mov	sp, r7
 800baca:	bd80      	pop	{r7, pc}

0800bacc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bacc:	b580      	push	{r7, lr}
 800bace:	b082      	sub	sp, #8
 800bad0:	af00      	add	r7, sp, #0
 800bad2:	6078      	str	r0, [r7, #4]
 800bad4:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bad6:	683b      	ldr	r3, [r7, #0]
 800bad8:	885b      	ldrh	r3, [r3, #2]
 800bada:	2b01      	cmp	r3, #1
 800badc:	d107      	bne.n	800baee <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	2201      	movs	r2, #1
 800bae2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bae6:	6878      	ldr	r0, [r7, #4]
 800bae8:	f000 f923 	bl	800bd32 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800baec:	e013      	b.n	800bb16 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800baee:	683b      	ldr	r3, [r7, #0]
 800baf0:	885b      	ldrh	r3, [r3, #2]
 800baf2:	2b02      	cmp	r3, #2
 800baf4:	d10b      	bne.n	800bb0e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800baf6:	683b      	ldr	r3, [r7, #0]
 800baf8:	889b      	ldrh	r3, [r3, #4]
 800bafa:	0a1b      	lsrs	r3, r3, #8
 800bafc:	b29b      	uxth	r3, r3
 800bafe:	b2da      	uxtb	r2, r3
 800bb00:	687b      	ldr	r3, [r7, #4]
 800bb02:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f913 	bl	800bd32 <USBD_CtlSendStatus>
}
 800bb0c:	e003      	b.n	800bb16 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bb0e:	6839      	ldr	r1, [r7, #0]
 800bb10:	6878      	ldr	r0, [r7, #4]
 800bb12:	f000 f860 	bl	800bbd6 <USBD_CtlError>
}
 800bb16:	bf00      	nop
 800bb18:	3708      	adds	r7, #8
 800bb1a:	46bd      	mov	sp, r7
 800bb1c:	bd80      	pop	{r7, pc}

0800bb1e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb1e:	b580      	push	{r7, lr}
 800bb20:	b082      	sub	sp, #8
 800bb22:	af00      	add	r7, sp, #0
 800bb24:	6078      	str	r0, [r7, #4]
 800bb26:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bb28:	687b      	ldr	r3, [r7, #4]
 800bb2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800bb2e:	b2db      	uxtb	r3, r3
 800bb30:	3b01      	subs	r3, #1
 800bb32:	2b02      	cmp	r3, #2
 800bb34:	d80b      	bhi.n	800bb4e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bb36:	683b      	ldr	r3, [r7, #0]
 800bb38:	885b      	ldrh	r3, [r3, #2]
 800bb3a:	2b01      	cmp	r3, #1
 800bb3c:	d10c      	bne.n	800bb58 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bb3e:	687b      	ldr	r3, [r7, #4]
 800bb40:	2200      	movs	r2, #0
 800bb42:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f000 f8f3 	bl	800bd32 <USBD_CtlSendStatus>
      }
      break;
 800bb4c:	e004      	b.n	800bb58 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bb4e:	6839      	ldr	r1, [r7, #0]
 800bb50:	6878      	ldr	r0, [r7, #4]
 800bb52:	f000 f840 	bl	800bbd6 <USBD_CtlError>
      break;
 800bb56:	e000      	b.n	800bb5a <USBD_ClrFeature+0x3c>
      break;
 800bb58:	bf00      	nop
  }
}
 800bb5a:	bf00      	nop
 800bb5c:	3708      	adds	r7, #8
 800bb5e:	46bd      	mov	sp, r7
 800bb60:	bd80      	pop	{r7, pc}

0800bb62 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800bb62:	b580      	push	{r7, lr}
 800bb64:	b084      	sub	sp, #16
 800bb66:	af00      	add	r7, sp, #0
 800bb68:	6078      	str	r0, [r7, #4]
 800bb6a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800bb6c:	683b      	ldr	r3, [r7, #0]
 800bb6e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	781a      	ldrb	r2, [r3, #0]
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	3301      	adds	r3, #1
 800bb7c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	781a      	ldrb	r2, [r3, #0]
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	3301      	adds	r3, #1
 800bb8a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800bb8c:	68f8      	ldr	r0, [r7, #12]
 800bb8e:	f7ff fa41 	bl	800b014 <SWAPBYTE>
 800bb92:	4603      	mov	r3, r0
 800bb94:	461a      	mov	r2, r3
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	3301      	adds	r3, #1
 800bb9e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bba0:	68fb      	ldr	r3, [r7, #12]
 800bba2:	3301      	adds	r3, #1
 800bba4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800bba6:	68f8      	ldr	r0, [r7, #12]
 800bba8:	f7ff fa34 	bl	800b014 <SWAPBYTE>
 800bbac:	4603      	mov	r3, r0
 800bbae:	461a      	mov	r2, r3
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
 800bbb6:	3301      	adds	r3, #1
 800bbb8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	3301      	adds	r3, #1
 800bbbe:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800bbc0:	68f8      	ldr	r0, [r7, #12]
 800bbc2:	f7ff fa27 	bl	800b014 <SWAPBYTE>
 800bbc6:	4603      	mov	r3, r0
 800bbc8:	461a      	mov	r2, r3
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	80da      	strh	r2, [r3, #6]
}
 800bbce:	bf00      	nop
 800bbd0:	3710      	adds	r7, #16
 800bbd2:	46bd      	mov	sp, r7
 800bbd4:	bd80      	pop	{r7, pc}

0800bbd6 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bbd6:	b580      	push	{r7, lr}
 800bbd8:	b082      	sub	sp, #8
 800bbda:	af00      	add	r7, sp, #0
 800bbdc:	6078      	str	r0, [r7, #4]
 800bbde:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800bbe0:	2180      	movs	r1, #128	; 0x80
 800bbe2:	6878      	ldr	r0, [r7, #4]
 800bbe4:	f000 fbf8 	bl	800c3d8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800bbe8:	2100      	movs	r1, #0
 800bbea:	6878      	ldr	r0, [r7, #4]
 800bbec:	f000 fbf4 	bl	800c3d8 <USBD_LL_StallEP>
}
 800bbf0:	bf00      	nop
 800bbf2:	3708      	adds	r7, #8
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd80      	pop	{r7, pc}

0800bbf8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bbf8:	b580      	push	{r7, lr}
 800bbfa:	b086      	sub	sp, #24
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	60f8      	str	r0, [r7, #12]
 800bc00:	60b9      	str	r1, [r7, #8]
 800bc02:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800bc04:	2300      	movs	r3, #0
 800bc06:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d036      	beq.n	800bc7c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800bc12:	6938      	ldr	r0, [r7, #16]
 800bc14:	f000 f836 	bl	800bc84 <USBD_GetLen>
 800bc18:	4603      	mov	r3, r0
 800bc1a:	3301      	adds	r3, #1
 800bc1c:	b29b      	uxth	r3, r3
 800bc1e:	005b      	lsls	r3, r3, #1
 800bc20:	b29a      	uxth	r2, r3
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800bc26:	7dfb      	ldrb	r3, [r7, #23]
 800bc28:	68ba      	ldr	r2, [r7, #8]
 800bc2a:	4413      	add	r3, r2
 800bc2c:	687a      	ldr	r2, [r7, #4]
 800bc2e:	7812      	ldrb	r2, [r2, #0]
 800bc30:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc32:	7dfb      	ldrb	r3, [r7, #23]
 800bc34:	3301      	adds	r3, #1
 800bc36:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800bc38:	7dfb      	ldrb	r3, [r7, #23]
 800bc3a:	68ba      	ldr	r2, [r7, #8]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	2203      	movs	r2, #3
 800bc40:	701a      	strb	r2, [r3, #0]
  idx++;
 800bc42:	7dfb      	ldrb	r3, [r7, #23]
 800bc44:	3301      	adds	r3, #1
 800bc46:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bc48:	e013      	b.n	800bc72 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800bc4a:	7dfb      	ldrb	r3, [r7, #23]
 800bc4c:	68ba      	ldr	r2, [r7, #8]
 800bc4e:	4413      	add	r3, r2
 800bc50:	693a      	ldr	r2, [r7, #16]
 800bc52:	7812      	ldrb	r2, [r2, #0]
 800bc54:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bc56:	693b      	ldr	r3, [r7, #16]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	613b      	str	r3, [r7, #16]
    idx++;
 800bc5c:	7dfb      	ldrb	r3, [r7, #23]
 800bc5e:	3301      	adds	r3, #1
 800bc60:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bc62:	7dfb      	ldrb	r3, [r7, #23]
 800bc64:	68ba      	ldr	r2, [r7, #8]
 800bc66:	4413      	add	r3, r2
 800bc68:	2200      	movs	r2, #0
 800bc6a:	701a      	strb	r2, [r3, #0]
    idx++;
 800bc6c:	7dfb      	ldrb	r3, [r7, #23]
 800bc6e:	3301      	adds	r3, #1
 800bc70:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bc72:	693b      	ldr	r3, [r7, #16]
 800bc74:	781b      	ldrb	r3, [r3, #0]
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d1e7      	bne.n	800bc4a <USBD_GetString+0x52>
 800bc7a:	e000      	b.n	800bc7e <USBD_GetString+0x86>
    return;
 800bc7c:	bf00      	nop
  }
}
 800bc7e:	3718      	adds	r7, #24
 800bc80:	46bd      	mov	sp, r7
 800bc82:	bd80      	pop	{r7, pc}

0800bc84 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b085      	sub	sp, #20
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bc94:	e005      	b.n	800bca2 <USBD_GetLen+0x1e>
  {
    len++;
 800bc96:	7bfb      	ldrb	r3, [r7, #15]
 800bc98:	3301      	adds	r3, #1
 800bc9a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bc9c:	68bb      	ldr	r3, [r7, #8]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bca2:	68bb      	ldr	r3, [r7, #8]
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d1f5      	bne.n	800bc96 <USBD_GetLen+0x12>
  }

  return len;
 800bcaa:	7bfb      	ldrb	r3, [r7, #15]
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3714      	adds	r7, #20
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcb6:	4770      	bx	lr

0800bcb8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bcb8:	b580      	push	{r7, lr}
 800bcba:	b084      	sub	sp, #16
 800bcbc:	af00      	add	r7, sp, #0
 800bcbe:	60f8      	str	r0, [r7, #12]
 800bcc0:	60b9      	str	r1, [r7, #8]
 800bcc2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2202      	movs	r2, #2
 800bcc8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800bccc:	68fb      	ldr	r3, [r7, #12]
 800bcce:	687a      	ldr	r2, [r7, #4]
 800bcd0:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	687a      	ldr	r2, [r7, #4]
 800bcd6:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	2100      	movs	r1, #0
 800bcde:	68f8      	ldr	r0, [r7, #12]
 800bce0:	f000 fc03 	bl	800c4ea <USBD_LL_Transmit>

  return USBD_OK;
 800bce4:	2300      	movs	r3, #0
}
 800bce6:	4618      	mov	r0, r3
 800bce8:	3710      	adds	r7, #16
 800bcea:	46bd      	mov	sp, r7
 800bcec:	bd80      	pop	{r7, pc}

0800bcee <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bcee:	b580      	push	{r7, lr}
 800bcf0:	b084      	sub	sp, #16
 800bcf2:	af00      	add	r7, sp, #0
 800bcf4:	60f8      	str	r0, [r7, #12]
 800bcf6:	60b9      	str	r1, [r7, #8]
 800bcf8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	68ba      	ldr	r2, [r7, #8]
 800bcfe:	2100      	movs	r1, #0
 800bd00:	68f8      	ldr	r0, [r7, #12]
 800bd02:	f000 fbf2 	bl	800c4ea <USBD_LL_Transmit>

  return USBD_OK;
 800bd06:	2300      	movs	r3, #0
}
 800bd08:	4618      	mov	r0, r3
 800bd0a:	3710      	adds	r7, #16
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b084      	sub	sp, #16
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	60f8      	str	r0, [r7, #12]
 800bd18:	60b9      	str	r1, [r7, #8]
 800bd1a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	68ba      	ldr	r2, [r7, #8]
 800bd20:	2100      	movs	r1, #0
 800bd22:	68f8      	ldr	r0, [r7, #12]
 800bd24:	f000 fc02 	bl	800c52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd28:	2300      	movs	r3, #0
}
 800bd2a:	4618      	mov	r0, r3
 800bd2c:	3710      	adds	r7, #16
 800bd2e:	46bd      	mov	sp, r7
 800bd30:	bd80      	pop	{r7, pc}

0800bd32 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800bd32:	b580      	push	{r7, lr}
 800bd34:	b082      	sub	sp, #8
 800bd36:	af00      	add	r7, sp, #0
 800bd38:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2204      	movs	r2, #4
 800bd3e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800bd42:	2300      	movs	r3, #0
 800bd44:	2200      	movs	r2, #0
 800bd46:	2100      	movs	r1, #0
 800bd48:	6878      	ldr	r0, [r7, #4]
 800bd4a:	f000 fbce 	bl	800c4ea <USBD_LL_Transmit>

  return USBD_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3708      	adds	r7, #8
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b082      	sub	sp, #8
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	2205      	movs	r2, #5
 800bd64:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800bd68:	2300      	movs	r3, #0
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	2100      	movs	r1, #0
 800bd6e:	6878      	ldr	r0, [r7, #4]
 800bd70:	f000 fbdc 	bl	800c52c <USBD_LL_PrepareReceive>

  return USBD_OK;
 800bd74:	2300      	movs	r3, #0
}
 800bd76:	4618      	mov	r0, r3
 800bd78:	3708      	adds	r7, #8
 800bd7a:	46bd      	mov	sp, r7
 800bd7c:	bd80      	pop	{r7, pc}
	...

0800bd80 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800bd84:	2200      	movs	r2, #0
 800bd86:	490e      	ldr	r1, [pc, #56]	; (800bdc0 <MX_USB_DEVICE_Init+0x40>)
 800bd88:	480e      	ldr	r0, [pc, #56]	; (800bdc4 <MX_USB_DEVICE_Init+0x44>)
 800bd8a:	f7fe fd23 	bl	800a7d4 <USBD_Init>
 800bd8e:	4603      	mov	r3, r0
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d001      	beq.n	800bd98 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800bd94:	f7f7 fe14 	bl	80039c0 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800bd98:	490b      	ldr	r1, [pc, #44]	; (800bdc8 <MX_USB_DEVICE_Init+0x48>)
 800bd9a:	480a      	ldr	r0, [pc, #40]	; (800bdc4 <MX_USB_DEVICE_Init+0x44>)
 800bd9c:	f7fe fd4a 	bl	800a834 <USBD_RegisterClass>
 800bda0:	4603      	mov	r3, r0
 800bda2:	2b00      	cmp	r3, #0
 800bda4:	d001      	beq.n	800bdaa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800bda6:	f7f7 fe0b 	bl	80039c0 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800bdaa:	4806      	ldr	r0, [pc, #24]	; (800bdc4 <MX_USB_DEVICE_Init+0x44>)
 800bdac:	f7fe fd78 	bl	800a8a0 <USBD_Start>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d001      	beq.n	800bdba <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800bdb6:	f7f7 fe03 	bl	80039c0 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800bdba:	bf00      	nop
 800bdbc:	bd80      	pop	{r7, pc}
 800bdbe:	bf00      	nop
 800bdc0:	20000110 	.word	0x20000110
 800bdc4:	2000e614 	.word	0x2000e614
 800bdc8:	20000050 	.word	0x20000050

0800bdcc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdcc:	b480      	push	{r7}
 800bdce:	b083      	sub	sp, #12
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	4603      	mov	r3, r0
 800bdd4:	6039      	str	r1, [r7, #0]
 800bdd6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	2212      	movs	r2, #18
 800bddc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800bdde:	4b03      	ldr	r3, [pc, #12]	; (800bdec <USBD_FS_DeviceDescriptor+0x20>)
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	370c      	adds	r7, #12
 800bde4:	46bd      	mov	sp, r7
 800bde6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdea:	4770      	bx	lr
 800bdec:	2000012c 	.word	0x2000012c

0800bdf0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bdf0:	b480      	push	{r7}
 800bdf2:	b083      	sub	sp, #12
 800bdf4:	af00      	add	r7, sp, #0
 800bdf6:	4603      	mov	r3, r0
 800bdf8:	6039      	str	r1, [r7, #0]
 800bdfa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	2204      	movs	r2, #4
 800be00:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800be02:	4b03      	ldr	r3, [pc, #12]	; (800be10 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800be04:	4618      	mov	r0, r3
 800be06:	370c      	adds	r7, #12
 800be08:	46bd      	mov	sp, r7
 800be0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0e:	4770      	bx	lr
 800be10:	20000140 	.word	0x20000140

0800be14 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b082      	sub	sp, #8
 800be18:	af00      	add	r7, sp, #0
 800be1a:	4603      	mov	r3, r0
 800be1c:	6039      	str	r1, [r7, #0]
 800be1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800be20:	79fb      	ldrb	r3, [r7, #7]
 800be22:	2b00      	cmp	r3, #0
 800be24:	d105      	bne.n	800be32 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be26:	683a      	ldr	r2, [r7, #0]
 800be28:	4907      	ldr	r1, [pc, #28]	; (800be48 <USBD_FS_ProductStrDescriptor+0x34>)
 800be2a:	4808      	ldr	r0, [pc, #32]	; (800be4c <USBD_FS_ProductStrDescriptor+0x38>)
 800be2c:	f7ff fee4 	bl	800bbf8 <USBD_GetString>
 800be30:	e004      	b.n	800be3c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800be32:	683a      	ldr	r2, [r7, #0]
 800be34:	4904      	ldr	r1, [pc, #16]	; (800be48 <USBD_FS_ProductStrDescriptor+0x34>)
 800be36:	4805      	ldr	r0, [pc, #20]	; (800be4c <USBD_FS_ProductStrDescriptor+0x38>)
 800be38:	f7ff fede 	bl	800bbf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800be3c:	4b02      	ldr	r3, [pc, #8]	; (800be48 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800be3e:	4618      	mov	r0, r3
 800be40:	3708      	adds	r7, #8
 800be42:	46bd      	mov	sp, r7
 800be44:	bd80      	pop	{r7, pc}
 800be46:	bf00      	nop
 800be48:	2000e8f0 	.word	0x2000e8f0
 800be4c:	0800de20 	.word	0x0800de20

0800be50 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be50:	b580      	push	{r7, lr}
 800be52:	b082      	sub	sp, #8
 800be54:	af00      	add	r7, sp, #0
 800be56:	4603      	mov	r3, r0
 800be58:	6039      	str	r1, [r7, #0]
 800be5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800be5c:	683a      	ldr	r2, [r7, #0]
 800be5e:	4904      	ldr	r1, [pc, #16]	; (800be70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800be60:	4804      	ldr	r0, [pc, #16]	; (800be74 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800be62:	f7ff fec9 	bl	800bbf8 <USBD_GetString>
  return USBD_StrDesc;
 800be66:	4b02      	ldr	r3, [pc, #8]	; (800be70 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800be68:	4618      	mov	r0, r3
 800be6a:	3708      	adds	r7, #8
 800be6c:	46bd      	mov	sp, r7
 800be6e:	bd80      	pop	{r7, pc}
 800be70:	2000e8f0 	.word	0x2000e8f0
 800be74:	0800de38 	.word	0x0800de38

0800be78 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be78:	b580      	push	{r7, lr}
 800be7a:	b082      	sub	sp, #8
 800be7c:	af00      	add	r7, sp, #0
 800be7e:	4603      	mov	r3, r0
 800be80:	6039      	str	r1, [r7, #0]
 800be82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800be84:	683b      	ldr	r3, [r7, #0]
 800be86:	221a      	movs	r2, #26
 800be88:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800be8a:	f000 f843 	bl	800bf14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800be8e:	4b02      	ldr	r3, [pc, #8]	; (800be98 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800be90:	4618      	mov	r0, r3
 800be92:	3708      	adds	r7, #8
 800be94:	46bd      	mov	sp, r7
 800be96:	bd80      	pop	{r7, pc}
 800be98:	20000144 	.word	0x20000144

0800be9c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b082      	sub	sp, #8
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	4603      	mov	r3, r0
 800bea4:	6039      	str	r1, [r7, #0]
 800bea6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bea8:	79fb      	ldrb	r3, [r7, #7]
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d105      	bne.n	800beba <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beae:	683a      	ldr	r2, [r7, #0]
 800beb0:	4907      	ldr	r1, [pc, #28]	; (800bed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800beb2:	4808      	ldr	r0, [pc, #32]	; (800bed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800beb4:	f7ff fea0 	bl	800bbf8 <USBD_GetString>
 800beb8:	e004      	b.n	800bec4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800beba:	683a      	ldr	r2, [r7, #0]
 800bebc:	4904      	ldr	r1, [pc, #16]	; (800bed0 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bebe:	4805      	ldr	r0, [pc, #20]	; (800bed4 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bec0:	f7ff fe9a 	bl	800bbf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bec4:	4b02      	ldr	r3, [pc, #8]	; (800bed0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bec6:	4618      	mov	r0, r3
 800bec8:	3708      	adds	r7, #8
 800beca:	46bd      	mov	sp, r7
 800becc:	bd80      	pop	{r7, pc}
 800bece:	bf00      	nop
 800bed0:	2000e8f0 	.word	0x2000e8f0
 800bed4:	0800de4c 	.word	0x0800de4c

0800bed8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b082      	sub	sp, #8
 800bedc:	af00      	add	r7, sp, #0
 800bede:	4603      	mov	r3, r0
 800bee0:	6039      	str	r1, [r7, #0]
 800bee2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bee4:	79fb      	ldrb	r3, [r7, #7]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	d105      	bne.n	800bef6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800beea:	683a      	ldr	r2, [r7, #0]
 800beec:	4907      	ldr	r1, [pc, #28]	; (800bf0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800beee:	4808      	ldr	r0, [pc, #32]	; (800bf10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bef0:	f7ff fe82 	bl	800bbf8 <USBD_GetString>
 800bef4:	e004      	b.n	800bf00 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bef6:	683a      	ldr	r2, [r7, #0]
 800bef8:	4904      	ldr	r1, [pc, #16]	; (800bf0c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800befa:	4805      	ldr	r0, [pc, #20]	; (800bf10 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800befc:	f7ff fe7c 	bl	800bbf8 <USBD_GetString>
  }
  return USBD_StrDesc;
 800bf00:	4b02      	ldr	r3, [pc, #8]	; (800bf0c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bf02:	4618      	mov	r0, r3
 800bf04:	3708      	adds	r7, #8
 800bf06:	46bd      	mov	sp, r7
 800bf08:	bd80      	pop	{r7, pc}
 800bf0a:	bf00      	nop
 800bf0c:	2000e8f0 	.word	0x2000e8f0
 800bf10:	0800de58 	.word	0x0800de58

0800bf14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bf14:	b580      	push	{r7, lr}
 800bf16:	b084      	sub	sp, #16
 800bf18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bf1a:	4b0f      	ldr	r3, [pc, #60]	; (800bf58 <Get_SerialNum+0x44>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bf20:	4b0e      	ldr	r3, [pc, #56]	; (800bf5c <Get_SerialNum+0x48>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bf26:	4b0e      	ldr	r3, [pc, #56]	; (800bf60 <Get_SerialNum+0x4c>)
 800bf28:	681b      	ldr	r3, [r3, #0]
 800bf2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bf2c:	68fa      	ldr	r2, [r7, #12]
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	4413      	add	r3, r2
 800bf32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bf34:	68fb      	ldr	r3, [r7, #12]
 800bf36:	2b00      	cmp	r3, #0
 800bf38:	d009      	beq.n	800bf4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bf3a:	2208      	movs	r2, #8
 800bf3c:	4909      	ldr	r1, [pc, #36]	; (800bf64 <Get_SerialNum+0x50>)
 800bf3e:	68f8      	ldr	r0, [r7, #12]
 800bf40:	f000 f814 	bl	800bf6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bf44:	2204      	movs	r2, #4
 800bf46:	4908      	ldr	r1, [pc, #32]	; (800bf68 <Get_SerialNum+0x54>)
 800bf48:	68b8      	ldr	r0, [r7, #8]
 800bf4a:	f000 f80f 	bl	800bf6c <IntToUnicode>
  }
}
 800bf4e:	bf00      	nop
 800bf50:	3710      	adds	r7, #16
 800bf52:	46bd      	mov	sp, r7
 800bf54:	bd80      	pop	{r7, pc}
 800bf56:	bf00      	nop
 800bf58:	1fff7a10 	.word	0x1fff7a10
 800bf5c:	1fff7a14 	.word	0x1fff7a14
 800bf60:	1fff7a18 	.word	0x1fff7a18
 800bf64:	20000146 	.word	0x20000146
 800bf68:	20000156 	.word	0x20000156

0800bf6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bf6c:	b480      	push	{r7}
 800bf6e:	b087      	sub	sp, #28
 800bf70:	af00      	add	r7, sp, #0
 800bf72:	60f8      	str	r0, [r7, #12]
 800bf74:	60b9      	str	r1, [r7, #8]
 800bf76:	4613      	mov	r3, r2
 800bf78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bf7e:	2300      	movs	r3, #0
 800bf80:	75fb      	strb	r3, [r7, #23]
 800bf82:	e027      	b.n	800bfd4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bf84:	68fb      	ldr	r3, [r7, #12]
 800bf86:	0f1b      	lsrs	r3, r3, #28
 800bf88:	2b09      	cmp	r3, #9
 800bf8a:	d80b      	bhi.n	800bfa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bf8c:	68fb      	ldr	r3, [r7, #12]
 800bf8e:	0f1b      	lsrs	r3, r3, #28
 800bf90:	b2da      	uxtb	r2, r3
 800bf92:	7dfb      	ldrb	r3, [r7, #23]
 800bf94:	005b      	lsls	r3, r3, #1
 800bf96:	4619      	mov	r1, r3
 800bf98:	68bb      	ldr	r3, [r7, #8]
 800bf9a:	440b      	add	r3, r1
 800bf9c:	3230      	adds	r2, #48	; 0x30
 800bf9e:	b2d2      	uxtb	r2, r2
 800bfa0:	701a      	strb	r2, [r3, #0]
 800bfa2:	e00a      	b.n	800bfba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	0f1b      	lsrs	r3, r3, #28
 800bfa8:	b2da      	uxtb	r2, r3
 800bfaa:	7dfb      	ldrb	r3, [r7, #23]
 800bfac:	005b      	lsls	r3, r3, #1
 800bfae:	4619      	mov	r1, r3
 800bfb0:	68bb      	ldr	r3, [r7, #8]
 800bfb2:	440b      	add	r3, r1
 800bfb4:	3237      	adds	r2, #55	; 0x37
 800bfb6:	b2d2      	uxtb	r2, r2
 800bfb8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	011b      	lsls	r3, r3, #4
 800bfbe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bfc0:	7dfb      	ldrb	r3, [r7, #23]
 800bfc2:	005b      	lsls	r3, r3, #1
 800bfc4:	3301      	adds	r3, #1
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	4413      	add	r3, r2
 800bfca:	2200      	movs	r2, #0
 800bfcc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bfce:	7dfb      	ldrb	r3, [r7, #23]
 800bfd0:	3301      	adds	r3, #1
 800bfd2:	75fb      	strb	r3, [r7, #23]
 800bfd4:	7dfa      	ldrb	r2, [r7, #23]
 800bfd6:	79fb      	ldrb	r3, [r7, #7]
 800bfd8:	429a      	cmp	r2, r3
 800bfda:	d3d3      	bcc.n	800bf84 <IntToUnicode+0x18>
  }
}
 800bfdc:	bf00      	nop
 800bfde:	bf00      	nop
 800bfe0:	371c      	adds	r7, #28
 800bfe2:	46bd      	mov	sp, r7
 800bfe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe8:	4770      	bx	lr
	...

0800bfec <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bfec:	b580      	push	{r7, lr}
 800bfee:	b08a      	sub	sp, #40	; 0x28
 800bff0:	af00      	add	r7, sp, #0
 800bff2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bff4:	f107 0314 	add.w	r3, r7, #20
 800bff8:	2200      	movs	r2, #0
 800bffa:	601a      	str	r2, [r3, #0]
 800bffc:	605a      	str	r2, [r3, #4]
 800bffe:	609a      	str	r2, [r3, #8]
 800c000:	60da      	str	r2, [r3, #12]
 800c002:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800c00c:	d147      	bne.n	800c09e <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c00e:	2300      	movs	r3, #0
 800c010:	613b      	str	r3, [r7, #16]
 800c012:	4b25      	ldr	r3, [pc, #148]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c016:	4a24      	ldr	r2, [pc, #144]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c018:	f043 0301 	orr.w	r3, r3, #1
 800c01c:	6313      	str	r3, [r2, #48]	; 0x30
 800c01e:	4b22      	ldr	r3, [pc, #136]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c022:	f003 0301 	and.w	r3, r3, #1
 800c026:	613b      	str	r3, [r7, #16]
 800c028:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800c02a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c02e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800c030:	2300      	movs	r3, #0
 800c032:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c034:	2300      	movs	r3, #0
 800c036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800c038:	f107 0314 	add.w	r3, r7, #20
 800c03c:	4619      	mov	r1, r3
 800c03e:	481b      	ldr	r0, [pc, #108]	; (800c0ac <HAL_PCD_MspInit+0xc0>)
 800c040:	f7f8 f99a 	bl	8004378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800c044:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800c048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c04a:	2302      	movs	r3, #2
 800c04c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c04e:	2300      	movs	r3, #0
 800c050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c052:	2303      	movs	r3, #3
 800c054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c056:	230a      	movs	r3, #10
 800c058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c05a:	f107 0314 	add.w	r3, r7, #20
 800c05e:	4619      	mov	r1, r3
 800c060:	4812      	ldr	r0, [pc, #72]	; (800c0ac <HAL_PCD_MspInit+0xc0>)
 800c062:	f7f8 f989 	bl	8004378 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c066:	4b10      	ldr	r3, [pc, #64]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c068:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c06a:	4a0f      	ldr	r2, [pc, #60]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c06c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c070:	6353      	str	r3, [r2, #52]	; 0x34
 800c072:	2300      	movs	r3, #0
 800c074:	60fb      	str	r3, [r7, #12]
 800c076:	4b0c      	ldr	r3, [pc, #48]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c07a:	4a0b      	ldr	r2, [pc, #44]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c07c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c080:	6453      	str	r3, [r2, #68]	; 0x44
 800c082:	4b09      	ldr	r3, [pc, #36]	; (800c0a8 <HAL_PCD_MspInit+0xbc>)
 800c084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c086:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c08a:	60fb      	str	r3, [r7, #12]
 800c08c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c08e:	2200      	movs	r2, #0
 800c090:	2100      	movs	r1, #0
 800c092:	2043      	movs	r0, #67	; 0x43
 800c094:	f7f8 f8a7 	bl	80041e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c098:	2043      	movs	r0, #67	; 0x43
 800c09a:	f7f8 f8c0 	bl	800421e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c09e:	bf00      	nop
 800c0a0:	3728      	adds	r7, #40	; 0x28
 800c0a2:	46bd      	mov	sp, r7
 800c0a4:	bd80      	pop	{r7, pc}
 800c0a6:	bf00      	nop
 800c0a8:	40023800 	.word	0x40023800
 800c0ac:	40020000 	.word	0x40020000

0800c0b0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0b0:	b580      	push	{r7, lr}
 800c0b2:	b082      	sub	sp, #8
 800c0b4:	af00      	add	r7, sp, #0
 800c0b6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800c0c4:	4619      	mov	r1, r3
 800c0c6:	4610      	mov	r0, r2
 800c0c8:	f7fe fc37 	bl	800a93a <USBD_LL_SetupStage>
}
 800c0cc:	bf00      	nop
 800c0ce:	3708      	adds	r7, #8
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}

0800c0d4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c0d4:	b580      	push	{r7, lr}
 800c0d6:	b082      	sub	sp, #8
 800c0d8:	af00      	add	r7, sp, #0
 800c0da:	6078      	str	r0, [r7, #4]
 800c0dc:	460b      	mov	r3, r1
 800c0de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c0e0:	687b      	ldr	r3, [r7, #4]
 800c0e2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c0e6:	78fa      	ldrb	r2, [r7, #3]
 800c0e8:	6879      	ldr	r1, [r7, #4]
 800c0ea:	4613      	mov	r3, r2
 800c0ec:	00db      	lsls	r3, r3, #3
 800c0ee:	4413      	add	r3, r2
 800c0f0:	009b      	lsls	r3, r3, #2
 800c0f2:	440b      	add	r3, r1
 800c0f4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800c0f8:	681a      	ldr	r2, [r3, #0]
 800c0fa:	78fb      	ldrb	r3, [r7, #3]
 800c0fc:	4619      	mov	r1, r3
 800c0fe:	f7fe fc71 	bl	800a9e4 <USBD_LL_DataOutStage>
}
 800c102:	bf00      	nop
 800c104:	3708      	adds	r7, #8
 800c106:	46bd      	mov	sp, r7
 800c108:	bd80      	pop	{r7, pc}

0800c10a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c10a:	b580      	push	{r7, lr}
 800c10c:	b082      	sub	sp, #8
 800c10e:	af00      	add	r7, sp, #0
 800c110:	6078      	str	r0, [r7, #4]
 800c112:	460b      	mov	r3, r1
 800c114:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c116:	687b      	ldr	r3, [r7, #4]
 800c118:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800c11c:	78fa      	ldrb	r2, [r7, #3]
 800c11e:	6879      	ldr	r1, [r7, #4]
 800c120:	4613      	mov	r3, r2
 800c122:	00db      	lsls	r3, r3, #3
 800c124:	4413      	add	r3, r2
 800c126:	009b      	lsls	r3, r3, #2
 800c128:	440b      	add	r3, r1
 800c12a:	334c      	adds	r3, #76	; 0x4c
 800c12c:	681a      	ldr	r2, [r3, #0]
 800c12e:	78fb      	ldrb	r3, [r7, #3]
 800c130:	4619      	mov	r1, r3
 800c132:	f7fe fd0a 	bl	800ab4a <USBD_LL_DataInStage>
}
 800c136:	bf00      	nop
 800c138:	3708      	adds	r7, #8
 800c13a:	46bd      	mov	sp, r7
 800c13c:	bd80      	pop	{r7, pc}

0800c13e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c14c:	4618      	mov	r0, r3
 800c14e:	f7fe fe3e 	bl	800adce <USBD_LL_SOF>
}
 800c152:	bf00      	nop
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b084      	sub	sp, #16
 800c15e:	af00      	add	r7, sp, #0
 800c160:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c162:	2301      	movs	r3, #1
 800c164:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	68db      	ldr	r3, [r3, #12]
 800c16a:	2b02      	cmp	r3, #2
 800c16c:	d001      	beq.n	800c172 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c16e:	f7f7 fc27 	bl	80039c0 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c178:	7bfa      	ldrb	r2, [r7, #15]
 800c17a:	4611      	mov	r1, r2
 800c17c:	4618      	mov	r0, r3
 800c17e:	f7fe fde8 	bl	800ad52 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c188:	4618      	mov	r0, r3
 800c18a:	f7fe fd90 	bl	800acae <USBD_LL_Reset>
}
 800c18e:	bf00      	nop
 800c190:	3710      	adds	r7, #16
 800c192:	46bd      	mov	sp, r7
 800c194:	bd80      	pop	{r7, pc}
	...

0800c198 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c198:	b580      	push	{r7, lr}
 800c19a:	b082      	sub	sp, #8
 800c19c:	af00      	add	r7, sp, #0
 800c19e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1a6:	4618      	mov	r0, r3
 800c1a8:	f7fe fde3 	bl	800ad72 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	687a      	ldr	r2, [r7, #4]
 800c1b8:	6812      	ldr	r2, [r2, #0]
 800c1ba:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800c1be:	f043 0301 	orr.w	r3, r3, #1
 800c1c2:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	6a1b      	ldr	r3, [r3, #32]
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d005      	beq.n	800c1d8 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c1cc:	4b04      	ldr	r3, [pc, #16]	; (800c1e0 <HAL_PCD_SuspendCallback+0x48>)
 800c1ce:	691b      	ldr	r3, [r3, #16]
 800c1d0:	4a03      	ldr	r2, [pc, #12]	; (800c1e0 <HAL_PCD_SuspendCallback+0x48>)
 800c1d2:	f043 0306 	orr.w	r3, r3, #6
 800c1d6:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c1d8:	bf00      	nop
 800c1da:	3708      	adds	r7, #8
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	e000ed00 	.word	0xe000ed00

0800c1e4 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b082      	sub	sp, #8
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c1f2:	4618      	mov	r0, r3
 800c1f4:	f7fe fdd3 	bl	800ad9e <USBD_LL_Resume>
}
 800c1f8:	bf00      	nop
 800c1fa:	3708      	adds	r7, #8
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	bd80      	pop	{r7, pc}

0800c200 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c200:	b580      	push	{r7, lr}
 800c202:	b082      	sub	sp, #8
 800c204:	af00      	add	r7, sp, #0
 800c206:	6078      	str	r0, [r7, #4]
 800c208:	460b      	mov	r3, r1
 800c20a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c212:	78fa      	ldrb	r2, [r7, #3]
 800c214:	4611      	mov	r1, r2
 800c216:	4618      	mov	r0, r3
 800c218:	f7fe fe2b 	bl	800ae72 <USBD_LL_IsoOUTIncomplete>
}
 800c21c:	bf00      	nop
 800c21e:	3708      	adds	r7, #8
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b082      	sub	sp, #8
 800c228:	af00      	add	r7, sp, #0
 800c22a:	6078      	str	r0, [r7, #4]
 800c22c:	460b      	mov	r3, r1
 800c22e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c236:	78fa      	ldrb	r2, [r7, #3]
 800c238:	4611      	mov	r1, r2
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7fe fde7 	bl	800ae0e <USBD_LL_IsoINIncomplete>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b082      	sub	sp, #8
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c256:	4618      	mov	r0, r3
 800c258:	f7fe fe3d 	bl	800aed6 <USBD_LL_DevConnected>
}
 800c25c:	bf00      	nop
 800c25e:	3708      	adds	r7, #8
 800c260:	46bd      	mov	sp, r7
 800c262:	bd80      	pop	{r7, pc}

0800c264 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c264:	b580      	push	{r7, lr}
 800c266:	b082      	sub	sp, #8
 800c268:	af00      	add	r7, sp, #0
 800c26a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800c272:	4618      	mov	r0, r3
 800c274:	f7fe fe3a 	bl	800aeec <USBD_LL_DevDisconnected>
}
 800c278:	bf00      	nop
 800c27a:	3708      	adds	r7, #8
 800c27c:	46bd      	mov	sp, r7
 800c27e:	bd80      	pop	{r7, pc}

0800c280 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c280:	b580      	push	{r7, lr}
 800c282:	b082      	sub	sp, #8
 800c284:	af00      	add	r7, sp, #0
 800c286:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	781b      	ldrb	r3, [r3, #0]
 800c28c:	2b00      	cmp	r3, #0
 800c28e:	d13c      	bne.n	800c30a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c290:	4a20      	ldr	r2, [pc, #128]	; (800c314 <USBD_LL_Init+0x94>)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	4a1e      	ldr	r2, [pc, #120]	; (800c314 <USBD_LL_Init+0x94>)
 800c29c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c2a0:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <USBD_LL_Init+0x94>)
 800c2a2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800c2a6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c2a8:	4b1a      	ldr	r3, [pc, #104]	; (800c314 <USBD_LL_Init+0x94>)
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c2ae:	4b19      	ldr	r3, [pc, #100]	; (800c314 <USBD_LL_Init+0x94>)
 800c2b0:	2202      	movs	r2, #2
 800c2b2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c2b4:	4b17      	ldr	r3, [pc, #92]	; (800c314 <USBD_LL_Init+0x94>)
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c2ba:	4b16      	ldr	r3, [pc, #88]	; (800c314 <USBD_LL_Init+0x94>)
 800c2bc:	2202      	movs	r2, #2
 800c2be:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c2c0:	4b14      	ldr	r3, [pc, #80]	; (800c314 <USBD_LL_Init+0x94>)
 800c2c2:	2200      	movs	r2, #0
 800c2c4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c2c6:	4b13      	ldr	r3, [pc, #76]	; (800c314 <USBD_LL_Init+0x94>)
 800c2c8:	2200      	movs	r2, #0
 800c2ca:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c2cc:	4b11      	ldr	r3, [pc, #68]	; (800c314 <USBD_LL_Init+0x94>)
 800c2ce:	2200      	movs	r2, #0
 800c2d0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800c2d2:	4b10      	ldr	r3, [pc, #64]	; (800c314 <USBD_LL_Init+0x94>)
 800c2d4:	2201      	movs	r2, #1
 800c2d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c2d8:	4b0e      	ldr	r3, [pc, #56]	; (800c314 <USBD_LL_Init+0x94>)
 800c2da:	2200      	movs	r2, #0
 800c2dc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c2de:	480d      	ldr	r0, [pc, #52]	; (800c314 <USBD_LL_Init+0x94>)
 800c2e0:	f7f9 f808 	bl	80052f4 <HAL_PCD_Init>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d001      	beq.n	800c2ee <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c2ea:	f7f7 fb69 	bl	80039c0 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c2ee:	2180      	movs	r1, #128	; 0x80
 800c2f0:	4808      	ldr	r0, [pc, #32]	; (800c314 <USBD_LL_Init+0x94>)
 800c2f2:	f7fa fa48 	bl	8006786 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c2f6:	2240      	movs	r2, #64	; 0x40
 800c2f8:	2100      	movs	r1, #0
 800c2fa:	4806      	ldr	r0, [pc, #24]	; (800c314 <USBD_LL_Init+0x94>)
 800c2fc:	f7fa f9fc 	bl	80066f8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c300:	2280      	movs	r2, #128	; 0x80
 800c302:	2101      	movs	r1, #1
 800c304:	4803      	ldr	r0, [pc, #12]	; (800c314 <USBD_LL_Init+0x94>)
 800c306:	f7fa f9f7 	bl	80066f8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c30a:	2300      	movs	r3, #0
}
 800c30c:	4618      	mov	r0, r3
 800c30e:	3708      	adds	r7, #8
 800c310:	46bd      	mov	sp, r7
 800c312:	bd80      	pop	{r7, pc}
 800c314:	2000eaf0 	.word	0x2000eaf0

0800c318 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b084      	sub	sp, #16
 800c31c:	af00      	add	r7, sp, #0
 800c31e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c320:	2300      	movs	r3, #0
 800c322:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c324:	2300      	movs	r3, #0
 800c326:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c32e:	4618      	mov	r0, r3
 800c330:	f7f9 f8fd 	bl	800552e <HAL_PCD_Start>
 800c334:	4603      	mov	r3, r0
 800c336:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c338:	7bfb      	ldrb	r3, [r7, #15]
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 f930 	bl	800c5a0 <USBD_Get_USB_Status>
 800c340:	4603      	mov	r3, r0
 800c342:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c344:	7bbb      	ldrb	r3, [r7, #14]
}
 800c346:	4618      	mov	r0, r3
 800c348:	3710      	adds	r7, #16
 800c34a:	46bd      	mov	sp, r7
 800c34c:	bd80      	pop	{r7, pc}

0800c34e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c34e:	b580      	push	{r7, lr}
 800c350:	b084      	sub	sp, #16
 800c352:	af00      	add	r7, sp, #0
 800c354:	6078      	str	r0, [r7, #4]
 800c356:	4608      	mov	r0, r1
 800c358:	4611      	mov	r1, r2
 800c35a:	461a      	mov	r2, r3
 800c35c:	4603      	mov	r3, r0
 800c35e:	70fb      	strb	r3, [r7, #3]
 800c360:	460b      	mov	r3, r1
 800c362:	70bb      	strb	r3, [r7, #2]
 800c364:	4613      	mov	r3, r2
 800c366:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c368:	2300      	movs	r3, #0
 800c36a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c36c:	2300      	movs	r3, #0
 800c36e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c376:	78bb      	ldrb	r3, [r7, #2]
 800c378:	883a      	ldrh	r2, [r7, #0]
 800c37a:	78f9      	ldrb	r1, [r7, #3]
 800c37c:	f7f9 fdce 	bl	8005f1c <HAL_PCD_EP_Open>
 800c380:	4603      	mov	r3, r0
 800c382:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c384:	7bfb      	ldrb	r3, [r7, #15]
 800c386:	4618      	mov	r0, r3
 800c388:	f000 f90a 	bl	800c5a0 <USBD_Get_USB_Status>
 800c38c:	4603      	mov	r3, r0
 800c38e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c390:	7bbb      	ldrb	r3, [r7, #14]
}
 800c392:	4618      	mov	r0, r3
 800c394:	3710      	adds	r7, #16
 800c396:	46bd      	mov	sp, r7
 800c398:	bd80      	pop	{r7, pc}

0800c39a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c39a:	b580      	push	{r7, lr}
 800c39c:	b084      	sub	sp, #16
 800c39e:	af00      	add	r7, sp, #0
 800c3a0:	6078      	str	r0, [r7, #4]
 800c3a2:	460b      	mov	r3, r1
 800c3a4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3aa:	2300      	movs	r3, #0
 800c3ac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c3ae:	687b      	ldr	r3, [r7, #4]
 800c3b0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3b4:	78fa      	ldrb	r2, [r7, #3]
 800c3b6:	4611      	mov	r1, r2
 800c3b8:	4618      	mov	r0, r3
 800c3ba:	f7f9 fe17 	bl	8005fec <HAL_PCD_EP_Close>
 800c3be:	4603      	mov	r3, r0
 800c3c0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c3c2:	7bfb      	ldrb	r3, [r7, #15]
 800c3c4:	4618      	mov	r0, r3
 800c3c6:	f000 f8eb 	bl	800c5a0 <USBD_Get_USB_Status>
 800c3ca:	4603      	mov	r3, r0
 800c3cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c3ce:	7bbb      	ldrb	r3, [r7, #14]
}
 800c3d0:	4618      	mov	r0, r3
 800c3d2:	3710      	adds	r7, #16
 800c3d4:	46bd      	mov	sp, r7
 800c3d6:	bd80      	pop	{r7, pc}

0800c3d8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c3d8:	b580      	push	{r7, lr}
 800c3da:	b084      	sub	sp, #16
 800c3dc:	af00      	add	r7, sp, #0
 800c3de:	6078      	str	r0, [r7, #4]
 800c3e0:	460b      	mov	r3, r1
 800c3e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c3e4:	2300      	movs	r3, #0
 800c3e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c3e8:	2300      	movs	r3, #0
 800c3ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c3f2:	78fa      	ldrb	r2, [r7, #3]
 800c3f4:	4611      	mov	r1, r2
 800c3f6:	4618      	mov	r0, r3
 800c3f8:	f7f9 fed7 	bl	80061aa <HAL_PCD_EP_SetStall>
 800c3fc:	4603      	mov	r3, r0
 800c3fe:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c400:	7bfb      	ldrb	r3, [r7, #15]
 800c402:	4618      	mov	r0, r3
 800c404:	f000 f8cc 	bl	800c5a0 <USBD_Get_USB_Status>
 800c408:	4603      	mov	r3, r0
 800c40a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c40c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c40e:	4618      	mov	r0, r3
 800c410:	3710      	adds	r7, #16
 800c412:	46bd      	mov	sp, r7
 800c414:	bd80      	pop	{r7, pc}

0800c416 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c416:	b580      	push	{r7, lr}
 800c418:	b084      	sub	sp, #16
 800c41a:	af00      	add	r7, sp, #0
 800c41c:	6078      	str	r0, [r7, #4]
 800c41e:	460b      	mov	r3, r1
 800c420:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c422:	2300      	movs	r3, #0
 800c424:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c426:	2300      	movs	r3, #0
 800c428:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c42a:	687b      	ldr	r3, [r7, #4]
 800c42c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c430:	78fa      	ldrb	r2, [r7, #3]
 800c432:	4611      	mov	r1, r2
 800c434:	4618      	mov	r0, r3
 800c436:	f7f9 ff1c 	bl	8006272 <HAL_PCD_EP_ClrStall>
 800c43a:	4603      	mov	r3, r0
 800c43c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c43e:	7bfb      	ldrb	r3, [r7, #15]
 800c440:	4618      	mov	r0, r3
 800c442:	f000 f8ad 	bl	800c5a0 <USBD_Get_USB_Status>
 800c446:	4603      	mov	r3, r0
 800c448:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c44a:	7bbb      	ldrb	r3, [r7, #14]
}
 800c44c:	4618      	mov	r0, r3
 800c44e:	3710      	adds	r7, #16
 800c450:	46bd      	mov	sp, r7
 800c452:	bd80      	pop	{r7, pc}

0800c454 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c454:	b480      	push	{r7}
 800c456:	b085      	sub	sp, #20
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	460b      	mov	r3, r1
 800c45e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c460:	687b      	ldr	r3, [r7, #4]
 800c462:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c466:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c468:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	da0b      	bge.n	800c488 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c470:	78fb      	ldrb	r3, [r7, #3]
 800c472:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c476:	68f9      	ldr	r1, [r7, #12]
 800c478:	4613      	mov	r3, r2
 800c47a:	00db      	lsls	r3, r3, #3
 800c47c:	4413      	add	r3, r2
 800c47e:	009b      	lsls	r3, r3, #2
 800c480:	440b      	add	r3, r1
 800c482:	333e      	adds	r3, #62	; 0x3e
 800c484:	781b      	ldrb	r3, [r3, #0]
 800c486:	e00b      	b.n	800c4a0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c488:	78fb      	ldrb	r3, [r7, #3]
 800c48a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c48e:	68f9      	ldr	r1, [r7, #12]
 800c490:	4613      	mov	r3, r2
 800c492:	00db      	lsls	r3, r3, #3
 800c494:	4413      	add	r3, r2
 800c496:	009b      	lsls	r3, r3, #2
 800c498:	440b      	add	r3, r1
 800c49a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800c49e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	3714      	adds	r7, #20
 800c4a4:	46bd      	mov	sp, r7
 800c4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4aa:	4770      	bx	lr

0800c4ac <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b084      	sub	sp, #16
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
 800c4b4:	460b      	mov	r3, r1
 800c4b6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4bc:	2300      	movs	r3, #0
 800c4be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800c4c6:	78fa      	ldrb	r2, [r7, #3]
 800c4c8:	4611      	mov	r1, r2
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7f9 fd01 	bl	8005ed2 <HAL_PCD_SetAddress>
 800c4d0:	4603      	mov	r3, r0
 800c4d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c4d4:	7bfb      	ldrb	r3, [r7, #15]
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 f862 	bl	800c5a0 <USBD_Get_USB_Status>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c4e0:	7bbb      	ldrb	r3, [r7, #14]
}
 800c4e2:	4618      	mov	r0, r3
 800c4e4:	3710      	adds	r7, #16
 800c4e6:	46bd      	mov	sp, r7
 800c4e8:	bd80      	pop	{r7, pc}

0800c4ea <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c4ea:	b580      	push	{r7, lr}
 800c4ec:	b086      	sub	sp, #24
 800c4ee:	af00      	add	r7, sp, #0
 800c4f0:	60f8      	str	r0, [r7, #12]
 800c4f2:	607a      	str	r2, [r7, #4]
 800c4f4:	603b      	str	r3, [r7, #0]
 800c4f6:	460b      	mov	r3, r1
 800c4f8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c4fa:	2300      	movs	r3, #0
 800c4fc:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c4fe:	2300      	movs	r3, #0
 800c500:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c508:	7af9      	ldrb	r1, [r7, #11]
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	687a      	ldr	r2, [r7, #4]
 800c50e:	f7f9 fe02 	bl	8006116 <HAL_PCD_EP_Transmit>
 800c512:	4603      	mov	r3, r0
 800c514:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c516:	7dfb      	ldrb	r3, [r7, #23]
 800c518:	4618      	mov	r0, r3
 800c51a:	f000 f841 	bl	800c5a0 <USBD_Get_USB_Status>
 800c51e:	4603      	mov	r3, r0
 800c520:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c522:	7dbb      	ldrb	r3, [r7, #22]
}
 800c524:	4618      	mov	r0, r3
 800c526:	3718      	adds	r7, #24
 800c528:	46bd      	mov	sp, r7
 800c52a:	bd80      	pop	{r7, pc}

0800c52c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c52c:	b580      	push	{r7, lr}
 800c52e:	b086      	sub	sp, #24
 800c530:	af00      	add	r7, sp, #0
 800c532:	60f8      	str	r0, [r7, #12]
 800c534:	607a      	str	r2, [r7, #4]
 800c536:	603b      	str	r3, [r7, #0]
 800c538:	460b      	mov	r3, r1
 800c53a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c53c:	2300      	movs	r3, #0
 800c53e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c540:	2300      	movs	r3, #0
 800c542:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800c54a:	7af9      	ldrb	r1, [r7, #11]
 800c54c:	683b      	ldr	r3, [r7, #0]
 800c54e:	687a      	ldr	r2, [r7, #4]
 800c550:	f7f9 fd96 	bl	8006080 <HAL_PCD_EP_Receive>
 800c554:	4603      	mov	r3, r0
 800c556:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c558:	7dfb      	ldrb	r3, [r7, #23]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f000 f820 	bl	800c5a0 <USBD_Get_USB_Status>
 800c560:	4603      	mov	r3, r0
 800c562:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c564:	7dbb      	ldrb	r3, [r7, #22]
}
 800c566:	4618      	mov	r0, r3
 800c568:	3718      	adds	r7, #24
 800c56a:	46bd      	mov	sp, r7
 800c56c:	bd80      	pop	{r7, pc}
	...

0800c570 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c570:	b480      	push	{r7}
 800c572:	b083      	sub	sp, #12
 800c574:	af00      	add	r7, sp, #0
 800c576:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c578:	4b03      	ldr	r3, [pc, #12]	; (800c588 <USBD_static_malloc+0x18>)
}
 800c57a:	4618      	mov	r0, r3
 800c57c:	370c      	adds	r7, #12
 800c57e:	46bd      	mov	sp, r7
 800c580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c584:	4770      	bx	lr
 800c586:	bf00      	nop
 800c588:	2000effc 	.word	0x2000effc

0800c58c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c58c:	b480      	push	{r7}
 800c58e:	b083      	sub	sp, #12
 800c590:	af00      	add	r7, sp, #0
 800c592:	6078      	str	r0, [r7, #4]

}
 800c594:	bf00      	nop
 800c596:	370c      	adds	r7, #12
 800c598:	46bd      	mov	sp, r7
 800c59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59e:	4770      	bx	lr

0800c5a0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	4603      	mov	r3, r0
 800c5a8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c5ae:	79fb      	ldrb	r3, [r7, #7]
 800c5b0:	2b03      	cmp	r3, #3
 800c5b2:	d817      	bhi.n	800c5e4 <USBD_Get_USB_Status+0x44>
 800c5b4:	a201      	add	r2, pc, #4	; (adr r2, 800c5bc <USBD_Get_USB_Status+0x1c>)
 800c5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5ba:	bf00      	nop
 800c5bc:	0800c5cd 	.word	0x0800c5cd
 800c5c0:	0800c5d3 	.word	0x0800c5d3
 800c5c4:	0800c5d9 	.word	0x0800c5d9
 800c5c8:	0800c5df 	.word	0x0800c5df
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c5cc:	2300      	movs	r3, #0
 800c5ce:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d0:	e00b      	b.n	800c5ea <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c5d2:	2303      	movs	r3, #3
 800c5d4:	73fb      	strb	r3, [r7, #15]
    break;
 800c5d6:	e008      	b.n	800c5ea <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c5d8:	2301      	movs	r3, #1
 800c5da:	73fb      	strb	r3, [r7, #15]
    break;
 800c5dc:	e005      	b.n	800c5ea <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c5de:	2303      	movs	r3, #3
 800c5e0:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e2:	e002      	b.n	800c5ea <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c5e4:	2303      	movs	r3, #3
 800c5e6:	73fb      	strb	r3, [r7, #15]
    break;
 800c5e8:	bf00      	nop
  }
  return usb_status;
 800c5ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	3714      	adds	r7, #20
 800c5f0:	46bd      	mov	sp, r7
 800c5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5f6:	4770      	bx	lr

0800c5f8 <exit>:
 800c5f8:	b508      	push	{r3, lr}
 800c5fa:	4b06      	ldr	r3, [pc, #24]	; (800c614 <exit+0x1c>)
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	b113      	cbz	r3, 800c606 <exit+0xe>
 800c600:	2100      	movs	r1, #0
 800c602:	f3af 8000 	nop.w
 800c606:	4b04      	ldr	r3, [pc, #16]	; (800c618 <exit+0x20>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	b103      	cbz	r3, 800c60e <exit+0x16>
 800c60c:	4798      	blx	r3
 800c60e:	4620      	mov	r0, r4
 800c610:	f7f7 faf4 	bl	8003bfc <_exit>
 800c614:	00000000 	.word	0x00000000
 800c618:	2000f150 	.word	0x2000f150

0800c61c <malloc>:
 800c61c:	4b02      	ldr	r3, [pc, #8]	; (800c628 <malloc+0xc>)
 800c61e:	4601      	mov	r1, r0
 800c620:	6818      	ldr	r0, [r3, #0]
 800c622:	f000 b823 	b.w	800c66c <_malloc_r>
 800c626:	bf00      	nop
 800c628:	200001b8 	.word	0x200001b8

0800c62c <sbrk_aligned>:
 800c62c:	b570      	push	{r4, r5, r6, lr}
 800c62e:	4e0e      	ldr	r6, [pc, #56]	; (800c668 <sbrk_aligned+0x3c>)
 800c630:	460c      	mov	r4, r1
 800c632:	6831      	ldr	r1, [r6, #0]
 800c634:	4605      	mov	r5, r0
 800c636:	b911      	cbnz	r1, 800c63e <sbrk_aligned+0x12>
 800c638:	f000 fba4 	bl	800cd84 <_sbrk_r>
 800c63c:	6030      	str	r0, [r6, #0]
 800c63e:	4621      	mov	r1, r4
 800c640:	4628      	mov	r0, r5
 800c642:	f000 fb9f 	bl	800cd84 <_sbrk_r>
 800c646:	1c43      	adds	r3, r0, #1
 800c648:	d00a      	beq.n	800c660 <sbrk_aligned+0x34>
 800c64a:	1cc4      	adds	r4, r0, #3
 800c64c:	f024 0403 	bic.w	r4, r4, #3
 800c650:	42a0      	cmp	r0, r4
 800c652:	d007      	beq.n	800c664 <sbrk_aligned+0x38>
 800c654:	1a21      	subs	r1, r4, r0
 800c656:	4628      	mov	r0, r5
 800c658:	f000 fb94 	bl	800cd84 <_sbrk_r>
 800c65c:	3001      	adds	r0, #1
 800c65e:	d101      	bne.n	800c664 <sbrk_aligned+0x38>
 800c660:	f04f 34ff 	mov.w	r4, #4294967295
 800c664:	4620      	mov	r0, r4
 800c666:	bd70      	pop	{r4, r5, r6, pc}
 800c668:	2000f014 	.word	0x2000f014

0800c66c <_malloc_r>:
 800c66c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c670:	1ccd      	adds	r5, r1, #3
 800c672:	f025 0503 	bic.w	r5, r5, #3
 800c676:	3508      	adds	r5, #8
 800c678:	2d0c      	cmp	r5, #12
 800c67a:	bf38      	it	cc
 800c67c:	250c      	movcc	r5, #12
 800c67e:	2d00      	cmp	r5, #0
 800c680:	4607      	mov	r7, r0
 800c682:	db01      	blt.n	800c688 <_malloc_r+0x1c>
 800c684:	42a9      	cmp	r1, r5
 800c686:	d905      	bls.n	800c694 <_malloc_r+0x28>
 800c688:	230c      	movs	r3, #12
 800c68a:	603b      	str	r3, [r7, #0]
 800c68c:	2600      	movs	r6, #0
 800c68e:	4630      	mov	r0, r6
 800c690:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c694:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800c768 <_malloc_r+0xfc>
 800c698:	f000 f868 	bl	800c76c <__malloc_lock>
 800c69c:	f8d8 3000 	ldr.w	r3, [r8]
 800c6a0:	461c      	mov	r4, r3
 800c6a2:	bb5c      	cbnz	r4, 800c6fc <_malloc_r+0x90>
 800c6a4:	4629      	mov	r1, r5
 800c6a6:	4638      	mov	r0, r7
 800c6a8:	f7ff ffc0 	bl	800c62c <sbrk_aligned>
 800c6ac:	1c43      	adds	r3, r0, #1
 800c6ae:	4604      	mov	r4, r0
 800c6b0:	d155      	bne.n	800c75e <_malloc_r+0xf2>
 800c6b2:	f8d8 4000 	ldr.w	r4, [r8]
 800c6b6:	4626      	mov	r6, r4
 800c6b8:	2e00      	cmp	r6, #0
 800c6ba:	d145      	bne.n	800c748 <_malloc_r+0xdc>
 800c6bc:	2c00      	cmp	r4, #0
 800c6be:	d048      	beq.n	800c752 <_malloc_r+0xe6>
 800c6c0:	6823      	ldr	r3, [r4, #0]
 800c6c2:	4631      	mov	r1, r6
 800c6c4:	4638      	mov	r0, r7
 800c6c6:	eb04 0903 	add.w	r9, r4, r3
 800c6ca:	f000 fb5b 	bl	800cd84 <_sbrk_r>
 800c6ce:	4581      	cmp	r9, r0
 800c6d0:	d13f      	bne.n	800c752 <_malloc_r+0xe6>
 800c6d2:	6821      	ldr	r1, [r4, #0]
 800c6d4:	1a6d      	subs	r5, r5, r1
 800c6d6:	4629      	mov	r1, r5
 800c6d8:	4638      	mov	r0, r7
 800c6da:	f7ff ffa7 	bl	800c62c <sbrk_aligned>
 800c6de:	3001      	adds	r0, #1
 800c6e0:	d037      	beq.n	800c752 <_malloc_r+0xe6>
 800c6e2:	6823      	ldr	r3, [r4, #0]
 800c6e4:	442b      	add	r3, r5
 800c6e6:	6023      	str	r3, [r4, #0]
 800c6e8:	f8d8 3000 	ldr.w	r3, [r8]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d038      	beq.n	800c762 <_malloc_r+0xf6>
 800c6f0:	685a      	ldr	r2, [r3, #4]
 800c6f2:	42a2      	cmp	r2, r4
 800c6f4:	d12b      	bne.n	800c74e <_malloc_r+0xe2>
 800c6f6:	2200      	movs	r2, #0
 800c6f8:	605a      	str	r2, [r3, #4]
 800c6fa:	e00f      	b.n	800c71c <_malloc_r+0xb0>
 800c6fc:	6822      	ldr	r2, [r4, #0]
 800c6fe:	1b52      	subs	r2, r2, r5
 800c700:	d41f      	bmi.n	800c742 <_malloc_r+0xd6>
 800c702:	2a0b      	cmp	r2, #11
 800c704:	d917      	bls.n	800c736 <_malloc_r+0xca>
 800c706:	1961      	adds	r1, r4, r5
 800c708:	42a3      	cmp	r3, r4
 800c70a:	6025      	str	r5, [r4, #0]
 800c70c:	bf18      	it	ne
 800c70e:	6059      	strne	r1, [r3, #4]
 800c710:	6863      	ldr	r3, [r4, #4]
 800c712:	bf08      	it	eq
 800c714:	f8c8 1000 	streq.w	r1, [r8]
 800c718:	5162      	str	r2, [r4, r5]
 800c71a:	604b      	str	r3, [r1, #4]
 800c71c:	4638      	mov	r0, r7
 800c71e:	f104 060b 	add.w	r6, r4, #11
 800c722:	f000 f829 	bl	800c778 <__malloc_unlock>
 800c726:	f026 0607 	bic.w	r6, r6, #7
 800c72a:	1d23      	adds	r3, r4, #4
 800c72c:	1af2      	subs	r2, r6, r3
 800c72e:	d0ae      	beq.n	800c68e <_malloc_r+0x22>
 800c730:	1b9b      	subs	r3, r3, r6
 800c732:	50a3      	str	r3, [r4, r2]
 800c734:	e7ab      	b.n	800c68e <_malloc_r+0x22>
 800c736:	42a3      	cmp	r3, r4
 800c738:	6862      	ldr	r2, [r4, #4]
 800c73a:	d1dd      	bne.n	800c6f8 <_malloc_r+0x8c>
 800c73c:	f8c8 2000 	str.w	r2, [r8]
 800c740:	e7ec      	b.n	800c71c <_malloc_r+0xb0>
 800c742:	4623      	mov	r3, r4
 800c744:	6864      	ldr	r4, [r4, #4]
 800c746:	e7ac      	b.n	800c6a2 <_malloc_r+0x36>
 800c748:	4634      	mov	r4, r6
 800c74a:	6876      	ldr	r6, [r6, #4]
 800c74c:	e7b4      	b.n	800c6b8 <_malloc_r+0x4c>
 800c74e:	4613      	mov	r3, r2
 800c750:	e7cc      	b.n	800c6ec <_malloc_r+0x80>
 800c752:	230c      	movs	r3, #12
 800c754:	603b      	str	r3, [r7, #0]
 800c756:	4638      	mov	r0, r7
 800c758:	f000 f80e 	bl	800c778 <__malloc_unlock>
 800c75c:	e797      	b.n	800c68e <_malloc_r+0x22>
 800c75e:	6025      	str	r5, [r4, #0]
 800c760:	e7dc      	b.n	800c71c <_malloc_r+0xb0>
 800c762:	605b      	str	r3, [r3, #4]
 800c764:	deff      	udf	#255	; 0xff
 800c766:	bf00      	nop
 800c768:	2000f010 	.word	0x2000f010

0800c76c <__malloc_lock>:
 800c76c:	4801      	ldr	r0, [pc, #4]	; (800c774 <__malloc_lock+0x8>)
 800c76e:	f000 bb56 	b.w	800ce1e <__retarget_lock_acquire_recursive>
 800c772:	bf00      	nop
 800c774:	2000f158 	.word	0x2000f158

0800c778 <__malloc_unlock>:
 800c778:	4801      	ldr	r0, [pc, #4]	; (800c780 <__malloc_unlock+0x8>)
 800c77a:	f000 bb51 	b.w	800ce20 <__retarget_lock_release_recursive>
 800c77e:	bf00      	nop
 800c780:	2000f158 	.word	0x2000f158

0800c784 <srand>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4b10      	ldr	r3, [pc, #64]	; (800c7c8 <srand+0x44>)
 800c788:	681d      	ldr	r5, [r3, #0]
 800c78a:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c78c:	4604      	mov	r4, r0
 800c78e:	b9b3      	cbnz	r3, 800c7be <srand+0x3a>
 800c790:	2018      	movs	r0, #24
 800c792:	f7ff ff43 	bl	800c61c <malloc>
 800c796:	4602      	mov	r2, r0
 800c798:	6328      	str	r0, [r5, #48]	; 0x30
 800c79a:	b920      	cbnz	r0, 800c7a6 <srand+0x22>
 800c79c:	4b0b      	ldr	r3, [pc, #44]	; (800c7cc <srand+0x48>)
 800c79e:	480c      	ldr	r0, [pc, #48]	; (800c7d0 <srand+0x4c>)
 800c7a0:	2146      	movs	r1, #70	; 0x46
 800c7a2:	f000 fb55 	bl	800ce50 <__assert_func>
 800c7a6:	490b      	ldr	r1, [pc, #44]	; (800c7d4 <srand+0x50>)
 800c7a8:	4b0b      	ldr	r3, [pc, #44]	; (800c7d8 <srand+0x54>)
 800c7aa:	e9c0 1300 	strd	r1, r3, [r0]
 800c7ae:	4b0b      	ldr	r3, [pc, #44]	; (800c7dc <srand+0x58>)
 800c7b0:	6083      	str	r3, [r0, #8]
 800c7b2:	230b      	movs	r3, #11
 800c7b4:	8183      	strh	r3, [r0, #12]
 800c7b6:	2100      	movs	r1, #0
 800c7b8:	2001      	movs	r0, #1
 800c7ba:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c7be:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	611c      	str	r4, [r3, #16]
 800c7c4:	615a      	str	r2, [r3, #20]
 800c7c6:	bd38      	pop	{r3, r4, r5, pc}
 800c7c8:	200001b8 	.word	0x200001b8
 800c7cc:	0800e490 	.word	0x0800e490
 800c7d0:	0800e4a7 	.word	0x0800e4a7
 800c7d4:	abcd330e 	.word	0xabcd330e
 800c7d8:	e66d1234 	.word	0xe66d1234
 800c7dc:	0005deec 	.word	0x0005deec

0800c7e0 <rand>:
 800c7e0:	4b16      	ldr	r3, [pc, #88]	; (800c83c <rand+0x5c>)
 800c7e2:	b510      	push	{r4, lr}
 800c7e4:	681c      	ldr	r4, [r3, #0]
 800c7e6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800c7e8:	b9b3      	cbnz	r3, 800c818 <rand+0x38>
 800c7ea:	2018      	movs	r0, #24
 800c7ec:	f7ff ff16 	bl	800c61c <malloc>
 800c7f0:	4602      	mov	r2, r0
 800c7f2:	6320      	str	r0, [r4, #48]	; 0x30
 800c7f4:	b920      	cbnz	r0, 800c800 <rand+0x20>
 800c7f6:	4b12      	ldr	r3, [pc, #72]	; (800c840 <rand+0x60>)
 800c7f8:	4812      	ldr	r0, [pc, #72]	; (800c844 <rand+0x64>)
 800c7fa:	2152      	movs	r1, #82	; 0x52
 800c7fc:	f000 fb28 	bl	800ce50 <__assert_func>
 800c800:	4911      	ldr	r1, [pc, #68]	; (800c848 <rand+0x68>)
 800c802:	4b12      	ldr	r3, [pc, #72]	; (800c84c <rand+0x6c>)
 800c804:	e9c0 1300 	strd	r1, r3, [r0]
 800c808:	4b11      	ldr	r3, [pc, #68]	; (800c850 <rand+0x70>)
 800c80a:	6083      	str	r3, [r0, #8]
 800c80c:	230b      	movs	r3, #11
 800c80e:	8183      	strh	r3, [r0, #12]
 800c810:	2100      	movs	r1, #0
 800c812:	2001      	movs	r0, #1
 800c814:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c818:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800c81a:	480e      	ldr	r0, [pc, #56]	; (800c854 <rand+0x74>)
 800c81c:	690b      	ldr	r3, [r1, #16]
 800c81e:	694c      	ldr	r4, [r1, #20]
 800c820:	4a0d      	ldr	r2, [pc, #52]	; (800c858 <rand+0x78>)
 800c822:	4358      	muls	r0, r3
 800c824:	fb02 0004 	mla	r0, r2, r4, r0
 800c828:	fba3 3202 	umull	r3, r2, r3, r2
 800c82c:	3301      	adds	r3, #1
 800c82e:	eb40 0002 	adc.w	r0, r0, r2
 800c832:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c836:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800c83a:	bd10      	pop	{r4, pc}
 800c83c:	200001b8 	.word	0x200001b8
 800c840:	0800e490 	.word	0x0800e490
 800c844:	0800e4a7 	.word	0x0800e4a7
 800c848:	abcd330e 	.word	0xabcd330e
 800c84c:	e66d1234 	.word	0xe66d1234
 800c850:	0005deec 	.word	0x0005deec
 800c854:	5851f42d 	.word	0x5851f42d
 800c858:	4c957f2d 	.word	0x4c957f2d

0800c85c <std>:
 800c85c:	2300      	movs	r3, #0
 800c85e:	b510      	push	{r4, lr}
 800c860:	4604      	mov	r4, r0
 800c862:	e9c0 3300 	strd	r3, r3, [r0]
 800c866:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c86a:	6083      	str	r3, [r0, #8]
 800c86c:	8181      	strh	r1, [r0, #12]
 800c86e:	6643      	str	r3, [r0, #100]	; 0x64
 800c870:	81c2      	strh	r2, [r0, #14]
 800c872:	6183      	str	r3, [r0, #24]
 800c874:	4619      	mov	r1, r3
 800c876:	2208      	movs	r2, #8
 800c878:	305c      	adds	r0, #92	; 0x5c
 800c87a:	f000 fa03 	bl	800cc84 <memset>
 800c87e:	4b0d      	ldr	r3, [pc, #52]	; (800c8b4 <std+0x58>)
 800c880:	6263      	str	r3, [r4, #36]	; 0x24
 800c882:	4b0d      	ldr	r3, [pc, #52]	; (800c8b8 <std+0x5c>)
 800c884:	62a3      	str	r3, [r4, #40]	; 0x28
 800c886:	4b0d      	ldr	r3, [pc, #52]	; (800c8bc <std+0x60>)
 800c888:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c88a:	4b0d      	ldr	r3, [pc, #52]	; (800c8c0 <std+0x64>)
 800c88c:	6323      	str	r3, [r4, #48]	; 0x30
 800c88e:	4b0d      	ldr	r3, [pc, #52]	; (800c8c4 <std+0x68>)
 800c890:	6224      	str	r4, [r4, #32]
 800c892:	429c      	cmp	r4, r3
 800c894:	d006      	beq.n	800c8a4 <std+0x48>
 800c896:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800c89a:	4294      	cmp	r4, r2
 800c89c:	d002      	beq.n	800c8a4 <std+0x48>
 800c89e:	33d0      	adds	r3, #208	; 0xd0
 800c8a0:	429c      	cmp	r4, r3
 800c8a2:	d105      	bne.n	800c8b0 <std+0x54>
 800c8a4:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c8a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c8ac:	f000 bab6 	b.w	800ce1c <__retarget_lock_init_recursive>
 800c8b0:	bd10      	pop	{r4, pc}
 800c8b2:	bf00      	nop
 800c8b4:	0800cad5 	.word	0x0800cad5
 800c8b8:	0800caf7 	.word	0x0800caf7
 800c8bc:	0800cb2f 	.word	0x0800cb2f
 800c8c0:	0800cb53 	.word	0x0800cb53
 800c8c4:	2000f018 	.word	0x2000f018

0800c8c8 <stdio_exit_handler>:
 800c8c8:	4a02      	ldr	r2, [pc, #8]	; (800c8d4 <stdio_exit_handler+0xc>)
 800c8ca:	4903      	ldr	r1, [pc, #12]	; (800c8d8 <stdio_exit_handler+0x10>)
 800c8cc:	4803      	ldr	r0, [pc, #12]	; (800c8dc <stdio_exit_handler+0x14>)
 800c8ce:	f000 b869 	b.w	800c9a4 <_fwalk_sglue>
 800c8d2:	bf00      	nop
 800c8d4:	20000160 	.word	0x20000160
 800c8d8:	0800d601 	.word	0x0800d601
 800c8dc:	2000016c 	.word	0x2000016c

0800c8e0 <cleanup_stdio>:
 800c8e0:	6841      	ldr	r1, [r0, #4]
 800c8e2:	4b0c      	ldr	r3, [pc, #48]	; (800c914 <cleanup_stdio+0x34>)
 800c8e4:	4299      	cmp	r1, r3
 800c8e6:	b510      	push	{r4, lr}
 800c8e8:	4604      	mov	r4, r0
 800c8ea:	d001      	beq.n	800c8f0 <cleanup_stdio+0x10>
 800c8ec:	f000 fe88 	bl	800d600 <_fflush_r>
 800c8f0:	68a1      	ldr	r1, [r4, #8]
 800c8f2:	4b09      	ldr	r3, [pc, #36]	; (800c918 <cleanup_stdio+0x38>)
 800c8f4:	4299      	cmp	r1, r3
 800c8f6:	d002      	beq.n	800c8fe <cleanup_stdio+0x1e>
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f000 fe81 	bl	800d600 <_fflush_r>
 800c8fe:	68e1      	ldr	r1, [r4, #12]
 800c900:	4b06      	ldr	r3, [pc, #24]	; (800c91c <cleanup_stdio+0x3c>)
 800c902:	4299      	cmp	r1, r3
 800c904:	d004      	beq.n	800c910 <cleanup_stdio+0x30>
 800c906:	4620      	mov	r0, r4
 800c908:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c90c:	f000 be78 	b.w	800d600 <_fflush_r>
 800c910:	bd10      	pop	{r4, pc}
 800c912:	bf00      	nop
 800c914:	2000f018 	.word	0x2000f018
 800c918:	2000f080 	.word	0x2000f080
 800c91c:	2000f0e8 	.word	0x2000f0e8

0800c920 <global_stdio_init.part.0>:
 800c920:	b510      	push	{r4, lr}
 800c922:	4b0b      	ldr	r3, [pc, #44]	; (800c950 <global_stdio_init.part.0+0x30>)
 800c924:	4c0b      	ldr	r4, [pc, #44]	; (800c954 <global_stdio_init.part.0+0x34>)
 800c926:	4a0c      	ldr	r2, [pc, #48]	; (800c958 <global_stdio_init.part.0+0x38>)
 800c928:	601a      	str	r2, [r3, #0]
 800c92a:	4620      	mov	r0, r4
 800c92c:	2200      	movs	r2, #0
 800c92e:	2104      	movs	r1, #4
 800c930:	f7ff ff94 	bl	800c85c <std>
 800c934:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800c938:	2201      	movs	r2, #1
 800c93a:	2109      	movs	r1, #9
 800c93c:	f7ff ff8e 	bl	800c85c <std>
 800c940:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800c944:	2202      	movs	r2, #2
 800c946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c94a:	2112      	movs	r1, #18
 800c94c:	f7ff bf86 	b.w	800c85c <std>
 800c950:	2000f150 	.word	0x2000f150
 800c954:	2000f018 	.word	0x2000f018
 800c958:	0800c8c9 	.word	0x0800c8c9

0800c95c <__sfp_lock_acquire>:
 800c95c:	4801      	ldr	r0, [pc, #4]	; (800c964 <__sfp_lock_acquire+0x8>)
 800c95e:	f000 ba5e 	b.w	800ce1e <__retarget_lock_acquire_recursive>
 800c962:	bf00      	nop
 800c964:	2000f159 	.word	0x2000f159

0800c968 <__sfp_lock_release>:
 800c968:	4801      	ldr	r0, [pc, #4]	; (800c970 <__sfp_lock_release+0x8>)
 800c96a:	f000 ba59 	b.w	800ce20 <__retarget_lock_release_recursive>
 800c96e:	bf00      	nop
 800c970:	2000f159 	.word	0x2000f159

0800c974 <__sinit>:
 800c974:	b510      	push	{r4, lr}
 800c976:	4604      	mov	r4, r0
 800c978:	f7ff fff0 	bl	800c95c <__sfp_lock_acquire>
 800c97c:	6a23      	ldr	r3, [r4, #32]
 800c97e:	b11b      	cbz	r3, 800c988 <__sinit+0x14>
 800c980:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c984:	f7ff bff0 	b.w	800c968 <__sfp_lock_release>
 800c988:	4b04      	ldr	r3, [pc, #16]	; (800c99c <__sinit+0x28>)
 800c98a:	6223      	str	r3, [r4, #32]
 800c98c:	4b04      	ldr	r3, [pc, #16]	; (800c9a0 <__sinit+0x2c>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1f5      	bne.n	800c980 <__sinit+0xc>
 800c994:	f7ff ffc4 	bl	800c920 <global_stdio_init.part.0>
 800c998:	e7f2      	b.n	800c980 <__sinit+0xc>
 800c99a:	bf00      	nop
 800c99c:	0800c8e1 	.word	0x0800c8e1
 800c9a0:	2000f150 	.word	0x2000f150

0800c9a4 <_fwalk_sglue>:
 800c9a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c9a8:	4607      	mov	r7, r0
 800c9aa:	4688      	mov	r8, r1
 800c9ac:	4614      	mov	r4, r2
 800c9ae:	2600      	movs	r6, #0
 800c9b0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c9b4:	f1b9 0901 	subs.w	r9, r9, #1
 800c9b8:	d505      	bpl.n	800c9c6 <_fwalk_sglue+0x22>
 800c9ba:	6824      	ldr	r4, [r4, #0]
 800c9bc:	2c00      	cmp	r4, #0
 800c9be:	d1f7      	bne.n	800c9b0 <_fwalk_sglue+0xc>
 800c9c0:	4630      	mov	r0, r6
 800c9c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c9c6:	89ab      	ldrh	r3, [r5, #12]
 800c9c8:	2b01      	cmp	r3, #1
 800c9ca:	d907      	bls.n	800c9dc <_fwalk_sglue+0x38>
 800c9cc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c9d0:	3301      	adds	r3, #1
 800c9d2:	d003      	beq.n	800c9dc <_fwalk_sglue+0x38>
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	4638      	mov	r0, r7
 800c9d8:	47c0      	blx	r8
 800c9da:	4306      	orrs	r6, r0
 800c9dc:	3568      	adds	r5, #104	; 0x68
 800c9de:	e7e9      	b.n	800c9b4 <_fwalk_sglue+0x10>

0800c9e0 <_fwrite_r>:
 800c9e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c9e4:	9c08      	ldr	r4, [sp, #32]
 800c9e6:	468a      	mov	sl, r1
 800c9e8:	4690      	mov	r8, r2
 800c9ea:	fb02 f903 	mul.w	r9, r2, r3
 800c9ee:	4606      	mov	r6, r0
 800c9f0:	b118      	cbz	r0, 800c9fa <_fwrite_r+0x1a>
 800c9f2:	6a03      	ldr	r3, [r0, #32]
 800c9f4:	b90b      	cbnz	r3, 800c9fa <_fwrite_r+0x1a>
 800c9f6:	f7ff ffbd 	bl	800c974 <__sinit>
 800c9fa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c9fc:	07dd      	lsls	r5, r3, #31
 800c9fe:	d405      	bmi.n	800ca0c <_fwrite_r+0x2c>
 800ca00:	89a3      	ldrh	r3, [r4, #12]
 800ca02:	0598      	lsls	r0, r3, #22
 800ca04:	d402      	bmi.n	800ca0c <_fwrite_r+0x2c>
 800ca06:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca08:	f000 fa09 	bl	800ce1e <__retarget_lock_acquire_recursive>
 800ca0c:	89a3      	ldrh	r3, [r4, #12]
 800ca0e:	0719      	lsls	r1, r3, #28
 800ca10:	d516      	bpl.n	800ca40 <_fwrite_r+0x60>
 800ca12:	6923      	ldr	r3, [r4, #16]
 800ca14:	b1a3      	cbz	r3, 800ca40 <_fwrite_r+0x60>
 800ca16:	2500      	movs	r5, #0
 800ca18:	454d      	cmp	r5, r9
 800ca1a:	d01f      	beq.n	800ca5c <_fwrite_r+0x7c>
 800ca1c:	68a7      	ldr	r7, [r4, #8]
 800ca1e:	f81a 1005 	ldrb.w	r1, [sl, r5]
 800ca22:	3f01      	subs	r7, #1
 800ca24:	2f00      	cmp	r7, #0
 800ca26:	60a7      	str	r7, [r4, #8]
 800ca28:	da04      	bge.n	800ca34 <_fwrite_r+0x54>
 800ca2a:	69a3      	ldr	r3, [r4, #24]
 800ca2c:	429f      	cmp	r7, r3
 800ca2e:	db0f      	blt.n	800ca50 <_fwrite_r+0x70>
 800ca30:	290a      	cmp	r1, #10
 800ca32:	d00d      	beq.n	800ca50 <_fwrite_r+0x70>
 800ca34:	6823      	ldr	r3, [r4, #0]
 800ca36:	1c5a      	adds	r2, r3, #1
 800ca38:	6022      	str	r2, [r4, #0]
 800ca3a:	7019      	strb	r1, [r3, #0]
 800ca3c:	3501      	adds	r5, #1
 800ca3e:	e7eb      	b.n	800ca18 <_fwrite_r+0x38>
 800ca40:	4621      	mov	r1, r4
 800ca42:	4630      	mov	r0, r6
 800ca44:	f000 f8c6 	bl	800cbd4 <__swsetup_r>
 800ca48:	2800      	cmp	r0, #0
 800ca4a:	d0e4      	beq.n	800ca16 <_fwrite_r+0x36>
 800ca4c:	2500      	movs	r5, #0
 800ca4e:	e005      	b.n	800ca5c <_fwrite_r+0x7c>
 800ca50:	4622      	mov	r2, r4
 800ca52:	4630      	mov	r0, r6
 800ca54:	f000 f881 	bl	800cb5a <__swbuf_r>
 800ca58:	3001      	adds	r0, #1
 800ca5a:	d1ef      	bne.n	800ca3c <_fwrite_r+0x5c>
 800ca5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca5e:	07da      	lsls	r2, r3, #31
 800ca60:	d405      	bmi.n	800ca6e <_fwrite_r+0x8e>
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	059b      	lsls	r3, r3, #22
 800ca66:	d402      	bmi.n	800ca6e <_fwrite_r+0x8e>
 800ca68:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca6a:	f000 f9d9 	bl	800ce20 <__retarget_lock_release_recursive>
 800ca6e:	fbb5 f0f8 	udiv	r0, r5, r8
 800ca72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0800ca78 <fwrite>:
 800ca78:	b507      	push	{r0, r1, r2, lr}
 800ca7a:	9300      	str	r3, [sp, #0]
 800ca7c:	4613      	mov	r3, r2
 800ca7e:	460a      	mov	r2, r1
 800ca80:	4601      	mov	r1, r0
 800ca82:	4803      	ldr	r0, [pc, #12]	; (800ca90 <fwrite+0x18>)
 800ca84:	6800      	ldr	r0, [r0, #0]
 800ca86:	f7ff ffab 	bl	800c9e0 <_fwrite_r>
 800ca8a:	b003      	add	sp, #12
 800ca8c:	f85d fb04 	ldr.w	pc, [sp], #4
 800ca90:	200001b8 	.word	0x200001b8

0800ca94 <siprintf>:
 800ca94:	b40e      	push	{r1, r2, r3}
 800ca96:	b500      	push	{lr}
 800ca98:	b09c      	sub	sp, #112	; 0x70
 800ca9a:	ab1d      	add	r3, sp, #116	; 0x74
 800ca9c:	9002      	str	r0, [sp, #8]
 800ca9e:	9006      	str	r0, [sp, #24]
 800caa0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800caa4:	4809      	ldr	r0, [pc, #36]	; (800cacc <siprintf+0x38>)
 800caa6:	9107      	str	r1, [sp, #28]
 800caa8:	9104      	str	r1, [sp, #16]
 800caaa:	4909      	ldr	r1, [pc, #36]	; (800cad0 <siprintf+0x3c>)
 800caac:	f853 2b04 	ldr.w	r2, [r3], #4
 800cab0:	9105      	str	r1, [sp, #20]
 800cab2:	6800      	ldr	r0, [r0, #0]
 800cab4:	9301      	str	r3, [sp, #4]
 800cab6:	a902      	add	r1, sp, #8
 800cab8:	f000 fa8e 	bl	800cfd8 <_svfiprintf_r>
 800cabc:	9b02      	ldr	r3, [sp, #8]
 800cabe:	2200      	movs	r2, #0
 800cac0:	701a      	strb	r2, [r3, #0]
 800cac2:	b01c      	add	sp, #112	; 0x70
 800cac4:	f85d eb04 	ldr.w	lr, [sp], #4
 800cac8:	b003      	add	sp, #12
 800caca:	4770      	bx	lr
 800cacc:	200001b8 	.word	0x200001b8
 800cad0:	ffff0208 	.word	0xffff0208

0800cad4 <__sread>:
 800cad4:	b510      	push	{r4, lr}
 800cad6:	460c      	mov	r4, r1
 800cad8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cadc:	f000 f940 	bl	800cd60 <_read_r>
 800cae0:	2800      	cmp	r0, #0
 800cae2:	bfab      	itete	ge
 800cae4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800cae6:	89a3      	ldrhlt	r3, [r4, #12]
 800cae8:	181b      	addge	r3, r3, r0
 800caea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800caee:	bfac      	ite	ge
 800caf0:	6563      	strge	r3, [r4, #84]	; 0x54
 800caf2:	81a3      	strhlt	r3, [r4, #12]
 800caf4:	bd10      	pop	{r4, pc}

0800caf6 <__swrite>:
 800caf6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cafa:	461f      	mov	r7, r3
 800cafc:	898b      	ldrh	r3, [r1, #12]
 800cafe:	05db      	lsls	r3, r3, #23
 800cb00:	4605      	mov	r5, r0
 800cb02:	460c      	mov	r4, r1
 800cb04:	4616      	mov	r6, r2
 800cb06:	d505      	bpl.n	800cb14 <__swrite+0x1e>
 800cb08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb0c:	2302      	movs	r3, #2
 800cb0e:	2200      	movs	r2, #0
 800cb10:	f000 f914 	bl	800cd3c <_lseek_r>
 800cb14:	89a3      	ldrh	r3, [r4, #12]
 800cb16:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cb1a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800cb1e:	81a3      	strh	r3, [r4, #12]
 800cb20:	4632      	mov	r2, r6
 800cb22:	463b      	mov	r3, r7
 800cb24:	4628      	mov	r0, r5
 800cb26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cb2a:	f000 b93b 	b.w	800cda4 <_write_r>

0800cb2e <__sseek>:
 800cb2e:	b510      	push	{r4, lr}
 800cb30:	460c      	mov	r4, r1
 800cb32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb36:	f000 f901 	bl	800cd3c <_lseek_r>
 800cb3a:	1c43      	adds	r3, r0, #1
 800cb3c:	89a3      	ldrh	r3, [r4, #12]
 800cb3e:	bf15      	itete	ne
 800cb40:	6560      	strne	r0, [r4, #84]	; 0x54
 800cb42:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cb46:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cb4a:	81a3      	strheq	r3, [r4, #12]
 800cb4c:	bf18      	it	ne
 800cb4e:	81a3      	strhne	r3, [r4, #12]
 800cb50:	bd10      	pop	{r4, pc}

0800cb52 <__sclose>:
 800cb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb56:	f000 b8e1 	b.w	800cd1c <_close_r>

0800cb5a <__swbuf_r>:
 800cb5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5c:	460e      	mov	r6, r1
 800cb5e:	4614      	mov	r4, r2
 800cb60:	4605      	mov	r5, r0
 800cb62:	b118      	cbz	r0, 800cb6c <__swbuf_r+0x12>
 800cb64:	6a03      	ldr	r3, [r0, #32]
 800cb66:	b90b      	cbnz	r3, 800cb6c <__swbuf_r+0x12>
 800cb68:	f7ff ff04 	bl	800c974 <__sinit>
 800cb6c:	69a3      	ldr	r3, [r4, #24]
 800cb6e:	60a3      	str	r3, [r4, #8]
 800cb70:	89a3      	ldrh	r3, [r4, #12]
 800cb72:	071a      	lsls	r2, r3, #28
 800cb74:	d525      	bpl.n	800cbc2 <__swbuf_r+0x68>
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	b31b      	cbz	r3, 800cbc2 <__swbuf_r+0x68>
 800cb7a:	6823      	ldr	r3, [r4, #0]
 800cb7c:	6922      	ldr	r2, [r4, #16]
 800cb7e:	1a98      	subs	r0, r3, r2
 800cb80:	6963      	ldr	r3, [r4, #20]
 800cb82:	b2f6      	uxtb	r6, r6
 800cb84:	4283      	cmp	r3, r0
 800cb86:	4637      	mov	r7, r6
 800cb88:	dc04      	bgt.n	800cb94 <__swbuf_r+0x3a>
 800cb8a:	4621      	mov	r1, r4
 800cb8c:	4628      	mov	r0, r5
 800cb8e:	f000 fd37 	bl	800d600 <_fflush_r>
 800cb92:	b9e0      	cbnz	r0, 800cbce <__swbuf_r+0x74>
 800cb94:	68a3      	ldr	r3, [r4, #8]
 800cb96:	3b01      	subs	r3, #1
 800cb98:	60a3      	str	r3, [r4, #8]
 800cb9a:	6823      	ldr	r3, [r4, #0]
 800cb9c:	1c5a      	adds	r2, r3, #1
 800cb9e:	6022      	str	r2, [r4, #0]
 800cba0:	701e      	strb	r6, [r3, #0]
 800cba2:	6962      	ldr	r2, [r4, #20]
 800cba4:	1c43      	adds	r3, r0, #1
 800cba6:	429a      	cmp	r2, r3
 800cba8:	d004      	beq.n	800cbb4 <__swbuf_r+0x5a>
 800cbaa:	89a3      	ldrh	r3, [r4, #12]
 800cbac:	07db      	lsls	r3, r3, #31
 800cbae:	d506      	bpl.n	800cbbe <__swbuf_r+0x64>
 800cbb0:	2e0a      	cmp	r6, #10
 800cbb2:	d104      	bne.n	800cbbe <__swbuf_r+0x64>
 800cbb4:	4621      	mov	r1, r4
 800cbb6:	4628      	mov	r0, r5
 800cbb8:	f000 fd22 	bl	800d600 <_fflush_r>
 800cbbc:	b938      	cbnz	r0, 800cbce <__swbuf_r+0x74>
 800cbbe:	4638      	mov	r0, r7
 800cbc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cbc2:	4621      	mov	r1, r4
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	f000 f805 	bl	800cbd4 <__swsetup_r>
 800cbca:	2800      	cmp	r0, #0
 800cbcc:	d0d5      	beq.n	800cb7a <__swbuf_r+0x20>
 800cbce:	f04f 37ff 	mov.w	r7, #4294967295
 800cbd2:	e7f4      	b.n	800cbbe <__swbuf_r+0x64>

0800cbd4 <__swsetup_r>:
 800cbd4:	b538      	push	{r3, r4, r5, lr}
 800cbd6:	4b2a      	ldr	r3, [pc, #168]	; (800cc80 <__swsetup_r+0xac>)
 800cbd8:	4605      	mov	r5, r0
 800cbda:	6818      	ldr	r0, [r3, #0]
 800cbdc:	460c      	mov	r4, r1
 800cbde:	b118      	cbz	r0, 800cbe8 <__swsetup_r+0x14>
 800cbe0:	6a03      	ldr	r3, [r0, #32]
 800cbe2:	b90b      	cbnz	r3, 800cbe8 <__swsetup_r+0x14>
 800cbe4:	f7ff fec6 	bl	800c974 <__sinit>
 800cbe8:	89a3      	ldrh	r3, [r4, #12]
 800cbea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cbee:	0718      	lsls	r0, r3, #28
 800cbf0:	d422      	bmi.n	800cc38 <__swsetup_r+0x64>
 800cbf2:	06d9      	lsls	r1, r3, #27
 800cbf4:	d407      	bmi.n	800cc06 <__swsetup_r+0x32>
 800cbf6:	2309      	movs	r3, #9
 800cbf8:	602b      	str	r3, [r5, #0]
 800cbfa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cbfe:	81a3      	strh	r3, [r4, #12]
 800cc00:	f04f 30ff 	mov.w	r0, #4294967295
 800cc04:	e034      	b.n	800cc70 <__swsetup_r+0x9c>
 800cc06:	0758      	lsls	r0, r3, #29
 800cc08:	d512      	bpl.n	800cc30 <__swsetup_r+0x5c>
 800cc0a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc0c:	b141      	cbz	r1, 800cc20 <__swsetup_r+0x4c>
 800cc0e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc12:	4299      	cmp	r1, r3
 800cc14:	d002      	beq.n	800cc1c <__swsetup_r+0x48>
 800cc16:	4628      	mov	r0, r5
 800cc18:	f000 f938 	bl	800ce8c <_free_r>
 800cc1c:	2300      	movs	r3, #0
 800cc1e:	6363      	str	r3, [r4, #52]	; 0x34
 800cc20:	89a3      	ldrh	r3, [r4, #12]
 800cc22:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cc26:	81a3      	strh	r3, [r4, #12]
 800cc28:	2300      	movs	r3, #0
 800cc2a:	6063      	str	r3, [r4, #4]
 800cc2c:	6923      	ldr	r3, [r4, #16]
 800cc2e:	6023      	str	r3, [r4, #0]
 800cc30:	89a3      	ldrh	r3, [r4, #12]
 800cc32:	f043 0308 	orr.w	r3, r3, #8
 800cc36:	81a3      	strh	r3, [r4, #12]
 800cc38:	6923      	ldr	r3, [r4, #16]
 800cc3a:	b94b      	cbnz	r3, 800cc50 <__swsetup_r+0x7c>
 800cc3c:	89a3      	ldrh	r3, [r4, #12]
 800cc3e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cc42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cc46:	d003      	beq.n	800cc50 <__swsetup_r+0x7c>
 800cc48:	4621      	mov	r1, r4
 800cc4a:	4628      	mov	r0, r5
 800cc4c:	f000 fd38 	bl	800d6c0 <__smakebuf_r>
 800cc50:	89a0      	ldrh	r0, [r4, #12]
 800cc52:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cc56:	f010 0301 	ands.w	r3, r0, #1
 800cc5a:	d00a      	beq.n	800cc72 <__swsetup_r+0x9e>
 800cc5c:	2300      	movs	r3, #0
 800cc5e:	60a3      	str	r3, [r4, #8]
 800cc60:	6963      	ldr	r3, [r4, #20]
 800cc62:	425b      	negs	r3, r3
 800cc64:	61a3      	str	r3, [r4, #24]
 800cc66:	6923      	ldr	r3, [r4, #16]
 800cc68:	b943      	cbnz	r3, 800cc7c <__swsetup_r+0xa8>
 800cc6a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cc6e:	d1c4      	bne.n	800cbfa <__swsetup_r+0x26>
 800cc70:	bd38      	pop	{r3, r4, r5, pc}
 800cc72:	0781      	lsls	r1, r0, #30
 800cc74:	bf58      	it	pl
 800cc76:	6963      	ldrpl	r3, [r4, #20]
 800cc78:	60a3      	str	r3, [r4, #8]
 800cc7a:	e7f4      	b.n	800cc66 <__swsetup_r+0x92>
 800cc7c:	2000      	movs	r0, #0
 800cc7e:	e7f7      	b.n	800cc70 <__swsetup_r+0x9c>
 800cc80:	200001b8 	.word	0x200001b8

0800cc84 <memset>:
 800cc84:	4402      	add	r2, r0
 800cc86:	4603      	mov	r3, r0
 800cc88:	4293      	cmp	r3, r2
 800cc8a:	d100      	bne.n	800cc8e <memset+0xa>
 800cc8c:	4770      	bx	lr
 800cc8e:	f803 1b01 	strb.w	r1, [r3], #1
 800cc92:	e7f9      	b.n	800cc88 <memset+0x4>

0800cc94 <strcat>:
 800cc94:	b510      	push	{r4, lr}
 800cc96:	4602      	mov	r2, r0
 800cc98:	7814      	ldrb	r4, [r2, #0]
 800cc9a:	4613      	mov	r3, r2
 800cc9c:	3201      	adds	r2, #1
 800cc9e:	2c00      	cmp	r4, #0
 800cca0:	d1fa      	bne.n	800cc98 <strcat+0x4>
 800cca2:	3b01      	subs	r3, #1
 800cca4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800cca8:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ccac:	2a00      	cmp	r2, #0
 800ccae:	d1f9      	bne.n	800cca4 <strcat+0x10>
 800ccb0:	bd10      	pop	{r4, pc}
	...

0800ccb4 <strdup>:
 800ccb4:	4b02      	ldr	r3, [pc, #8]	; (800ccc0 <strdup+0xc>)
 800ccb6:	4601      	mov	r1, r0
 800ccb8:	6818      	ldr	r0, [r3, #0]
 800ccba:	f000 b803 	b.w	800ccc4 <_strdup_r>
 800ccbe:	bf00      	nop
 800ccc0:	200001b8 	.word	0x200001b8

0800ccc4 <_strdup_r>:
 800ccc4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	460d      	mov	r5, r1
 800cccc:	f7f3 fa92 	bl	80001f4 <strlen>
 800ccd0:	1c42      	adds	r2, r0, #1
 800ccd2:	4611      	mov	r1, r2
 800ccd4:	4620      	mov	r0, r4
 800ccd6:	9201      	str	r2, [sp, #4]
 800ccd8:	f7ff fcc8 	bl	800c66c <_malloc_r>
 800ccdc:	4604      	mov	r4, r0
 800ccde:	b118      	cbz	r0, 800cce8 <_strdup_r+0x24>
 800cce0:	9a01      	ldr	r2, [sp, #4]
 800cce2:	4629      	mov	r1, r5
 800cce4:	f000 f8a5 	bl	800ce32 <memcpy>
 800cce8:	4620      	mov	r0, r4
 800ccea:	b003      	add	sp, #12
 800ccec:	bd30      	pop	{r4, r5, pc}

0800ccee <strstr>:
 800ccee:	780a      	ldrb	r2, [r1, #0]
 800ccf0:	b570      	push	{r4, r5, r6, lr}
 800ccf2:	b96a      	cbnz	r2, 800cd10 <strstr+0x22>
 800ccf4:	bd70      	pop	{r4, r5, r6, pc}
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d109      	bne.n	800cd0e <strstr+0x20>
 800ccfa:	460c      	mov	r4, r1
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800cd02:	2b00      	cmp	r3, #0
 800cd04:	d0f6      	beq.n	800ccf4 <strstr+0x6>
 800cd06:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800cd0a:	429e      	cmp	r6, r3
 800cd0c:	d0f7      	beq.n	800ccfe <strstr+0x10>
 800cd0e:	3001      	adds	r0, #1
 800cd10:	7803      	ldrb	r3, [r0, #0]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1ef      	bne.n	800ccf6 <strstr+0x8>
 800cd16:	4618      	mov	r0, r3
 800cd18:	e7ec      	b.n	800ccf4 <strstr+0x6>
	...

0800cd1c <_close_r>:
 800cd1c:	b538      	push	{r3, r4, r5, lr}
 800cd1e:	4d06      	ldr	r5, [pc, #24]	; (800cd38 <_close_r+0x1c>)
 800cd20:	2300      	movs	r3, #0
 800cd22:	4604      	mov	r4, r0
 800cd24:	4608      	mov	r0, r1
 800cd26:	602b      	str	r3, [r5, #0]
 800cd28:	f7f6 ffab 	bl	8003c82 <_close>
 800cd2c:	1c43      	adds	r3, r0, #1
 800cd2e:	d102      	bne.n	800cd36 <_close_r+0x1a>
 800cd30:	682b      	ldr	r3, [r5, #0]
 800cd32:	b103      	cbz	r3, 800cd36 <_close_r+0x1a>
 800cd34:	6023      	str	r3, [r4, #0]
 800cd36:	bd38      	pop	{r3, r4, r5, pc}
 800cd38:	2000f154 	.word	0x2000f154

0800cd3c <_lseek_r>:
 800cd3c:	b538      	push	{r3, r4, r5, lr}
 800cd3e:	4d07      	ldr	r5, [pc, #28]	; (800cd5c <_lseek_r+0x20>)
 800cd40:	4604      	mov	r4, r0
 800cd42:	4608      	mov	r0, r1
 800cd44:	4611      	mov	r1, r2
 800cd46:	2200      	movs	r2, #0
 800cd48:	602a      	str	r2, [r5, #0]
 800cd4a:	461a      	mov	r2, r3
 800cd4c:	f7f6 ffc0 	bl	8003cd0 <_lseek>
 800cd50:	1c43      	adds	r3, r0, #1
 800cd52:	d102      	bne.n	800cd5a <_lseek_r+0x1e>
 800cd54:	682b      	ldr	r3, [r5, #0]
 800cd56:	b103      	cbz	r3, 800cd5a <_lseek_r+0x1e>
 800cd58:	6023      	str	r3, [r4, #0]
 800cd5a:	bd38      	pop	{r3, r4, r5, pc}
 800cd5c:	2000f154 	.word	0x2000f154

0800cd60 <_read_r>:
 800cd60:	b538      	push	{r3, r4, r5, lr}
 800cd62:	4d07      	ldr	r5, [pc, #28]	; (800cd80 <_read_r+0x20>)
 800cd64:	4604      	mov	r4, r0
 800cd66:	4608      	mov	r0, r1
 800cd68:	4611      	mov	r1, r2
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	602a      	str	r2, [r5, #0]
 800cd6e:	461a      	mov	r2, r3
 800cd70:	f7f6 ff4e 	bl	8003c10 <_read>
 800cd74:	1c43      	adds	r3, r0, #1
 800cd76:	d102      	bne.n	800cd7e <_read_r+0x1e>
 800cd78:	682b      	ldr	r3, [r5, #0]
 800cd7a:	b103      	cbz	r3, 800cd7e <_read_r+0x1e>
 800cd7c:	6023      	str	r3, [r4, #0]
 800cd7e:	bd38      	pop	{r3, r4, r5, pc}
 800cd80:	2000f154 	.word	0x2000f154

0800cd84 <_sbrk_r>:
 800cd84:	b538      	push	{r3, r4, r5, lr}
 800cd86:	4d06      	ldr	r5, [pc, #24]	; (800cda0 <_sbrk_r+0x1c>)
 800cd88:	2300      	movs	r3, #0
 800cd8a:	4604      	mov	r4, r0
 800cd8c:	4608      	mov	r0, r1
 800cd8e:	602b      	str	r3, [r5, #0]
 800cd90:	f7f6 ffac 	bl	8003cec <_sbrk>
 800cd94:	1c43      	adds	r3, r0, #1
 800cd96:	d102      	bne.n	800cd9e <_sbrk_r+0x1a>
 800cd98:	682b      	ldr	r3, [r5, #0]
 800cd9a:	b103      	cbz	r3, 800cd9e <_sbrk_r+0x1a>
 800cd9c:	6023      	str	r3, [r4, #0]
 800cd9e:	bd38      	pop	{r3, r4, r5, pc}
 800cda0:	2000f154 	.word	0x2000f154

0800cda4 <_write_r>:
 800cda4:	b538      	push	{r3, r4, r5, lr}
 800cda6:	4d07      	ldr	r5, [pc, #28]	; (800cdc4 <_write_r+0x20>)
 800cda8:	4604      	mov	r4, r0
 800cdaa:	4608      	mov	r0, r1
 800cdac:	4611      	mov	r1, r2
 800cdae:	2200      	movs	r2, #0
 800cdb0:	602a      	str	r2, [r5, #0]
 800cdb2:	461a      	mov	r2, r3
 800cdb4:	f7f6 ff49 	bl	8003c4a <_write>
 800cdb8:	1c43      	adds	r3, r0, #1
 800cdba:	d102      	bne.n	800cdc2 <_write_r+0x1e>
 800cdbc:	682b      	ldr	r3, [r5, #0]
 800cdbe:	b103      	cbz	r3, 800cdc2 <_write_r+0x1e>
 800cdc0:	6023      	str	r3, [r4, #0]
 800cdc2:	bd38      	pop	{r3, r4, r5, pc}
 800cdc4:	2000f154 	.word	0x2000f154

0800cdc8 <__errno>:
 800cdc8:	4b01      	ldr	r3, [pc, #4]	; (800cdd0 <__errno+0x8>)
 800cdca:	6818      	ldr	r0, [r3, #0]
 800cdcc:	4770      	bx	lr
 800cdce:	bf00      	nop
 800cdd0:	200001b8 	.word	0x200001b8

0800cdd4 <__libc_init_array>:
 800cdd4:	b570      	push	{r4, r5, r6, lr}
 800cdd6:	4d0d      	ldr	r5, [pc, #52]	; (800ce0c <__libc_init_array+0x38>)
 800cdd8:	4c0d      	ldr	r4, [pc, #52]	; (800ce10 <__libc_init_array+0x3c>)
 800cdda:	1b64      	subs	r4, r4, r5
 800cddc:	10a4      	asrs	r4, r4, #2
 800cdde:	2600      	movs	r6, #0
 800cde0:	42a6      	cmp	r6, r4
 800cde2:	d109      	bne.n	800cdf8 <__libc_init_array+0x24>
 800cde4:	4d0b      	ldr	r5, [pc, #44]	; (800ce14 <__libc_init_array+0x40>)
 800cde6:	4c0c      	ldr	r4, [pc, #48]	; (800ce18 <__libc_init_array+0x44>)
 800cde8:	f000 fea8 	bl	800db3c <_init>
 800cdec:	1b64      	subs	r4, r4, r5
 800cdee:	10a4      	asrs	r4, r4, #2
 800cdf0:	2600      	movs	r6, #0
 800cdf2:	42a6      	cmp	r6, r4
 800cdf4:	d105      	bne.n	800ce02 <__libc_init_array+0x2e>
 800cdf6:	bd70      	pop	{r4, r5, r6, pc}
 800cdf8:	f855 3b04 	ldr.w	r3, [r5], #4
 800cdfc:	4798      	blx	r3
 800cdfe:	3601      	adds	r6, #1
 800ce00:	e7ee      	b.n	800cde0 <__libc_init_array+0xc>
 800ce02:	f855 3b04 	ldr.w	r3, [r5], #4
 800ce06:	4798      	blx	r3
 800ce08:	3601      	adds	r6, #1
 800ce0a:	e7f2      	b.n	800cdf2 <__libc_init_array+0x1e>
 800ce0c:	0800e678 	.word	0x0800e678
 800ce10:	0800e678 	.word	0x0800e678
 800ce14:	0800e678 	.word	0x0800e678
 800ce18:	0800e67c 	.word	0x0800e67c

0800ce1c <__retarget_lock_init_recursive>:
 800ce1c:	4770      	bx	lr

0800ce1e <__retarget_lock_acquire_recursive>:
 800ce1e:	4770      	bx	lr

0800ce20 <__retarget_lock_release_recursive>:
 800ce20:	4770      	bx	lr

0800ce22 <strcpy>:
 800ce22:	4603      	mov	r3, r0
 800ce24:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ce28:	f803 2b01 	strb.w	r2, [r3], #1
 800ce2c:	2a00      	cmp	r2, #0
 800ce2e:	d1f9      	bne.n	800ce24 <strcpy+0x2>
 800ce30:	4770      	bx	lr

0800ce32 <memcpy>:
 800ce32:	440a      	add	r2, r1
 800ce34:	4291      	cmp	r1, r2
 800ce36:	f100 33ff 	add.w	r3, r0, #4294967295
 800ce3a:	d100      	bne.n	800ce3e <memcpy+0xc>
 800ce3c:	4770      	bx	lr
 800ce3e:	b510      	push	{r4, lr}
 800ce40:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ce44:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ce48:	4291      	cmp	r1, r2
 800ce4a:	d1f9      	bne.n	800ce40 <memcpy+0xe>
 800ce4c:	bd10      	pop	{r4, pc}
	...

0800ce50 <__assert_func>:
 800ce50:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ce52:	4614      	mov	r4, r2
 800ce54:	461a      	mov	r2, r3
 800ce56:	4b09      	ldr	r3, [pc, #36]	; (800ce7c <__assert_func+0x2c>)
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	4605      	mov	r5, r0
 800ce5c:	68d8      	ldr	r0, [r3, #12]
 800ce5e:	b14c      	cbz	r4, 800ce74 <__assert_func+0x24>
 800ce60:	4b07      	ldr	r3, [pc, #28]	; (800ce80 <__assert_func+0x30>)
 800ce62:	9100      	str	r1, [sp, #0]
 800ce64:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ce68:	4906      	ldr	r1, [pc, #24]	; (800ce84 <__assert_func+0x34>)
 800ce6a:	462b      	mov	r3, r5
 800ce6c:	f000 fbf0 	bl	800d650 <fiprintf>
 800ce70:	f000 fc9e 	bl	800d7b0 <abort>
 800ce74:	4b04      	ldr	r3, [pc, #16]	; (800ce88 <__assert_func+0x38>)
 800ce76:	461c      	mov	r4, r3
 800ce78:	e7f3      	b.n	800ce62 <__assert_func+0x12>
 800ce7a:	bf00      	nop
 800ce7c:	200001b8 	.word	0x200001b8
 800ce80:	0800e600 	.word	0x0800e600
 800ce84:	0800e60d 	.word	0x0800e60d
 800ce88:	0800e63b 	.word	0x0800e63b

0800ce8c <_free_r>:
 800ce8c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ce8e:	2900      	cmp	r1, #0
 800ce90:	d044      	beq.n	800cf1c <_free_r+0x90>
 800ce92:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ce96:	9001      	str	r0, [sp, #4]
 800ce98:	2b00      	cmp	r3, #0
 800ce9a:	f1a1 0404 	sub.w	r4, r1, #4
 800ce9e:	bfb8      	it	lt
 800cea0:	18e4      	addlt	r4, r4, r3
 800cea2:	f7ff fc63 	bl	800c76c <__malloc_lock>
 800cea6:	4a1e      	ldr	r2, [pc, #120]	; (800cf20 <_free_r+0x94>)
 800cea8:	9801      	ldr	r0, [sp, #4]
 800ceaa:	6813      	ldr	r3, [r2, #0]
 800ceac:	b933      	cbnz	r3, 800cebc <_free_r+0x30>
 800ceae:	6063      	str	r3, [r4, #4]
 800ceb0:	6014      	str	r4, [r2, #0]
 800ceb2:	b003      	add	sp, #12
 800ceb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ceb8:	f7ff bc5e 	b.w	800c778 <__malloc_unlock>
 800cebc:	42a3      	cmp	r3, r4
 800cebe:	d908      	bls.n	800ced2 <_free_r+0x46>
 800cec0:	6825      	ldr	r5, [r4, #0]
 800cec2:	1961      	adds	r1, r4, r5
 800cec4:	428b      	cmp	r3, r1
 800cec6:	bf01      	itttt	eq
 800cec8:	6819      	ldreq	r1, [r3, #0]
 800ceca:	685b      	ldreq	r3, [r3, #4]
 800cecc:	1949      	addeq	r1, r1, r5
 800cece:	6021      	streq	r1, [r4, #0]
 800ced0:	e7ed      	b.n	800ceae <_free_r+0x22>
 800ced2:	461a      	mov	r2, r3
 800ced4:	685b      	ldr	r3, [r3, #4]
 800ced6:	b10b      	cbz	r3, 800cedc <_free_r+0x50>
 800ced8:	42a3      	cmp	r3, r4
 800ceda:	d9fa      	bls.n	800ced2 <_free_r+0x46>
 800cedc:	6811      	ldr	r1, [r2, #0]
 800cede:	1855      	adds	r5, r2, r1
 800cee0:	42a5      	cmp	r5, r4
 800cee2:	d10b      	bne.n	800cefc <_free_r+0x70>
 800cee4:	6824      	ldr	r4, [r4, #0]
 800cee6:	4421      	add	r1, r4
 800cee8:	1854      	adds	r4, r2, r1
 800ceea:	42a3      	cmp	r3, r4
 800ceec:	6011      	str	r1, [r2, #0]
 800ceee:	d1e0      	bne.n	800ceb2 <_free_r+0x26>
 800cef0:	681c      	ldr	r4, [r3, #0]
 800cef2:	685b      	ldr	r3, [r3, #4]
 800cef4:	6053      	str	r3, [r2, #4]
 800cef6:	440c      	add	r4, r1
 800cef8:	6014      	str	r4, [r2, #0]
 800cefa:	e7da      	b.n	800ceb2 <_free_r+0x26>
 800cefc:	d902      	bls.n	800cf04 <_free_r+0x78>
 800cefe:	230c      	movs	r3, #12
 800cf00:	6003      	str	r3, [r0, #0]
 800cf02:	e7d6      	b.n	800ceb2 <_free_r+0x26>
 800cf04:	6825      	ldr	r5, [r4, #0]
 800cf06:	1961      	adds	r1, r4, r5
 800cf08:	428b      	cmp	r3, r1
 800cf0a:	bf04      	itt	eq
 800cf0c:	6819      	ldreq	r1, [r3, #0]
 800cf0e:	685b      	ldreq	r3, [r3, #4]
 800cf10:	6063      	str	r3, [r4, #4]
 800cf12:	bf04      	itt	eq
 800cf14:	1949      	addeq	r1, r1, r5
 800cf16:	6021      	streq	r1, [r4, #0]
 800cf18:	6054      	str	r4, [r2, #4]
 800cf1a:	e7ca      	b.n	800ceb2 <_free_r+0x26>
 800cf1c:	b003      	add	sp, #12
 800cf1e:	bd30      	pop	{r4, r5, pc}
 800cf20:	2000f010 	.word	0x2000f010

0800cf24 <__ssputs_r>:
 800cf24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf28:	688e      	ldr	r6, [r1, #8]
 800cf2a:	461f      	mov	r7, r3
 800cf2c:	42be      	cmp	r6, r7
 800cf2e:	680b      	ldr	r3, [r1, #0]
 800cf30:	4682      	mov	sl, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	4690      	mov	r8, r2
 800cf36:	d82c      	bhi.n	800cf92 <__ssputs_r+0x6e>
 800cf38:	898a      	ldrh	r2, [r1, #12]
 800cf3a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cf3e:	d026      	beq.n	800cf8e <__ssputs_r+0x6a>
 800cf40:	6965      	ldr	r5, [r4, #20]
 800cf42:	6909      	ldr	r1, [r1, #16]
 800cf44:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cf48:	eba3 0901 	sub.w	r9, r3, r1
 800cf4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cf50:	1c7b      	adds	r3, r7, #1
 800cf52:	444b      	add	r3, r9
 800cf54:	106d      	asrs	r5, r5, #1
 800cf56:	429d      	cmp	r5, r3
 800cf58:	bf38      	it	cc
 800cf5a:	461d      	movcc	r5, r3
 800cf5c:	0553      	lsls	r3, r2, #21
 800cf5e:	d527      	bpl.n	800cfb0 <__ssputs_r+0x8c>
 800cf60:	4629      	mov	r1, r5
 800cf62:	f7ff fb83 	bl	800c66c <_malloc_r>
 800cf66:	4606      	mov	r6, r0
 800cf68:	b360      	cbz	r0, 800cfc4 <__ssputs_r+0xa0>
 800cf6a:	6921      	ldr	r1, [r4, #16]
 800cf6c:	464a      	mov	r2, r9
 800cf6e:	f7ff ff60 	bl	800ce32 <memcpy>
 800cf72:	89a3      	ldrh	r3, [r4, #12]
 800cf74:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cf78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cf7c:	81a3      	strh	r3, [r4, #12]
 800cf7e:	6126      	str	r6, [r4, #16]
 800cf80:	6165      	str	r5, [r4, #20]
 800cf82:	444e      	add	r6, r9
 800cf84:	eba5 0509 	sub.w	r5, r5, r9
 800cf88:	6026      	str	r6, [r4, #0]
 800cf8a:	60a5      	str	r5, [r4, #8]
 800cf8c:	463e      	mov	r6, r7
 800cf8e:	42be      	cmp	r6, r7
 800cf90:	d900      	bls.n	800cf94 <__ssputs_r+0x70>
 800cf92:	463e      	mov	r6, r7
 800cf94:	6820      	ldr	r0, [r4, #0]
 800cf96:	4632      	mov	r2, r6
 800cf98:	4641      	mov	r1, r8
 800cf9a:	f000 fbcd 	bl	800d738 <memmove>
 800cf9e:	68a3      	ldr	r3, [r4, #8]
 800cfa0:	1b9b      	subs	r3, r3, r6
 800cfa2:	60a3      	str	r3, [r4, #8]
 800cfa4:	6823      	ldr	r3, [r4, #0]
 800cfa6:	4433      	add	r3, r6
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	2000      	movs	r0, #0
 800cfac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfb0:	462a      	mov	r2, r5
 800cfb2:	f000 fc04 	bl	800d7be <_realloc_r>
 800cfb6:	4606      	mov	r6, r0
 800cfb8:	2800      	cmp	r0, #0
 800cfba:	d1e0      	bne.n	800cf7e <__ssputs_r+0x5a>
 800cfbc:	6921      	ldr	r1, [r4, #16]
 800cfbe:	4650      	mov	r0, sl
 800cfc0:	f7ff ff64 	bl	800ce8c <_free_r>
 800cfc4:	230c      	movs	r3, #12
 800cfc6:	f8ca 3000 	str.w	r3, [sl]
 800cfca:	89a3      	ldrh	r3, [r4, #12]
 800cfcc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cfd0:	81a3      	strh	r3, [r4, #12]
 800cfd2:	f04f 30ff 	mov.w	r0, #4294967295
 800cfd6:	e7e9      	b.n	800cfac <__ssputs_r+0x88>

0800cfd8 <_svfiprintf_r>:
 800cfd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfdc:	4698      	mov	r8, r3
 800cfde:	898b      	ldrh	r3, [r1, #12]
 800cfe0:	061b      	lsls	r3, r3, #24
 800cfe2:	b09d      	sub	sp, #116	; 0x74
 800cfe4:	4607      	mov	r7, r0
 800cfe6:	460d      	mov	r5, r1
 800cfe8:	4614      	mov	r4, r2
 800cfea:	d50e      	bpl.n	800d00a <_svfiprintf_r+0x32>
 800cfec:	690b      	ldr	r3, [r1, #16]
 800cfee:	b963      	cbnz	r3, 800d00a <_svfiprintf_r+0x32>
 800cff0:	2140      	movs	r1, #64	; 0x40
 800cff2:	f7ff fb3b 	bl	800c66c <_malloc_r>
 800cff6:	6028      	str	r0, [r5, #0]
 800cff8:	6128      	str	r0, [r5, #16]
 800cffa:	b920      	cbnz	r0, 800d006 <_svfiprintf_r+0x2e>
 800cffc:	230c      	movs	r3, #12
 800cffe:	603b      	str	r3, [r7, #0]
 800d000:	f04f 30ff 	mov.w	r0, #4294967295
 800d004:	e0d0      	b.n	800d1a8 <_svfiprintf_r+0x1d0>
 800d006:	2340      	movs	r3, #64	; 0x40
 800d008:	616b      	str	r3, [r5, #20]
 800d00a:	2300      	movs	r3, #0
 800d00c:	9309      	str	r3, [sp, #36]	; 0x24
 800d00e:	2320      	movs	r3, #32
 800d010:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d014:	f8cd 800c 	str.w	r8, [sp, #12]
 800d018:	2330      	movs	r3, #48	; 0x30
 800d01a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d1c0 <_svfiprintf_r+0x1e8>
 800d01e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d022:	f04f 0901 	mov.w	r9, #1
 800d026:	4623      	mov	r3, r4
 800d028:	469a      	mov	sl, r3
 800d02a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d02e:	b10a      	cbz	r2, 800d034 <_svfiprintf_r+0x5c>
 800d030:	2a25      	cmp	r2, #37	; 0x25
 800d032:	d1f9      	bne.n	800d028 <_svfiprintf_r+0x50>
 800d034:	ebba 0b04 	subs.w	fp, sl, r4
 800d038:	d00b      	beq.n	800d052 <_svfiprintf_r+0x7a>
 800d03a:	465b      	mov	r3, fp
 800d03c:	4622      	mov	r2, r4
 800d03e:	4629      	mov	r1, r5
 800d040:	4638      	mov	r0, r7
 800d042:	f7ff ff6f 	bl	800cf24 <__ssputs_r>
 800d046:	3001      	adds	r0, #1
 800d048:	f000 80a9 	beq.w	800d19e <_svfiprintf_r+0x1c6>
 800d04c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d04e:	445a      	add	r2, fp
 800d050:	9209      	str	r2, [sp, #36]	; 0x24
 800d052:	f89a 3000 	ldrb.w	r3, [sl]
 800d056:	2b00      	cmp	r3, #0
 800d058:	f000 80a1 	beq.w	800d19e <_svfiprintf_r+0x1c6>
 800d05c:	2300      	movs	r3, #0
 800d05e:	f04f 32ff 	mov.w	r2, #4294967295
 800d062:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d066:	f10a 0a01 	add.w	sl, sl, #1
 800d06a:	9304      	str	r3, [sp, #16]
 800d06c:	9307      	str	r3, [sp, #28]
 800d06e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d072:	931a      	str	r3, [sp, #104]	; 0x68
 800d074:	4654      	mov	r4, sl
 800d076:	2205      	movs	r2, #5
 800d078:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07c:	4850      	ldr	r0, [pc, #320]	; (800d1c0 <_svfiprintf_r+0x1e8>)
 800d07e:	f7f3 f8c7 	bl	8000210 <memchr>
 800d082:	9a04      	ldr	r2, [sp, #16]
 800d084:	b9d8      	cbnz	r0, 800d0be <_svfiprintf_r+0xe6>
 800d086:	06d0      	lsls	r0, r2, #27
 800d088:	bf44      	itt	mi
 800d08a:	2320      	movmi	r3, #32
 800d08c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d090:	0711      	lsls	r1, r2, #28
 800d092:	bf44      	itt	mi
 800d094:	232b      	movmi	r3, #43	; 0x2b
 800d096:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d09a:	f89a 3000 	ldrb.w	r3, [sl]
 800d09e:	2b2a      	cmp	r3, #42	; 0x2a
 800d0a0:	d015      	beq.n	800d0ce <_svfiprintf_r+0xf6>
 800d0a2:	9a07      	ldr	r2, [sp, #28]
 800d0a4:	4654      	mov	r4, sl
 800d0a6:	2000      	movs	r0, #0
 800d0a8:	f04f 0c0a 	mov.w	ip, #10
 800d0ac:	4621      	mov	r1, r4
 800d0ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d0b2:	3b30      	subs	r3, #48	; 0x30
 800d0b4:	2b09      	cmp	r3, #9
 800d0b6:	d94d      	bls.n	800d154 <_svfiprintf_r+0x17c>
 800d0b8:	b1b0      	cbz	r0, 800d0e8 <_svfiprintf_r+0x110>
 800d0ba:	9207      	str	r2, [sp, #28]
 800d0bc:	e014      	b.n	800d0e8 <_svfiprintf_r+0x110>
 800d0be:	eba0 0308 	sub.w	r3, r0, r8
 800d0c2:	fa09 f303 	lsl.w	r3, r9, r3
 800d0c6:	4313      	orrs	r3, r2
 800d0c8:	9304      	str	r3, [sp, #16]
 800d0ca:	46a2      	mov	sl, r4
 800d0cc:	e7d2      	b.n	800d074 <_svfiprintf_r+0x9c>
 800d0ce:	9b03      	ldr	r3, [sp, #12]
 800d0d0:	1d19      	adds	r1, r3, #4
 800d0d2:	681b      	ldr	r3, [r3, #0]
 800d0d4:	9103      	str	r1, [sp, #12]
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	bfbb      	ittet	lt
 800d0da:	425b      	neglt	r3, r3
 800d0dc:	f042 0202 	orrlt.w	r2, r2, #2
 800d0e0:	9307      	strge	r3, [sp, #28]
 800d0e2:	9307      	strlt	r3, [sp, #28]
 800d0e4:	bfb8      	it	lt
 800d0e6:	9204      	strlt	r2, [sp, #16]
 800d0e8:	7823      	ldrb	r3, [r4, #0]
 800d0ea:	2b2e      	cmp	r3, #46	; 0x2e
 800d0ec:	d10c      	bne.n	800d108 <_svfiprintf_r+0x130>
 800d0ee:	7863      	ldrb	r3, [r4, #1]
 800d0f0:	2b2a      	cmp	r3, #42	; 0x2a
 800d0f2:	d134      	bne.n	800d15e <_svfiprintf_r+0x186>
 800d0f4:	9b03      	ldr	r3, [sp, #12]
 800d0f6:	1d1a      	adds	r2, r3, #4
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	9203      	str	r2, [sp, #12]
 800d0fc:	2b00      	cmp	r3, #0
 800d0fe:	bfb8      	it	lt
 800d100:	f04f 33ff 	movlt.w	r3, #4294967295
 800d104:	3402      	adds	r4, #2
 800d106:	9305      	str	r3, [sp, #20]
 800d108:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d1d0 <_svfiprintf_r+0x1f8>
 800d10c:	7821      	ldrb	r1, [r4, #0]
 800d10e:	2203      	movs	r2, #3
 800d110:	4650      	mov	r0, sl
 800d112:	f7f3 f87d 	bl	8000210 <memchr>
 800d116:	b138      	cbz	r0, 800d128 <_svfiprintf_r+0x150>
 800d118:	9b04      	ldr	r3, [sp, #16]
 800d11a:	eba0 000a 	sub.w	r0, r0, sl
 800d11e:	2240      	movs	r2, #64	; 0x40
 800d120:	4082      	lsls	r2, r0
 800d122:	4313      	orrs	r3, r2
 800d124:	3401      	adds	r4, #1
 800d126:	9304      	str	r3, [sp, #16]
 800d128:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d12c:	4825      	ldr	r0, [pc, #148]	; (800d1c4 <_svfiprintf_r+0x1ec>)
 800d12e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d132:	2206      	movs	r2, #6
 800d134:	f7f3 f86c 	bl	8000210 <memchr>
 800d138:	2800      	cmp	r0, #0
 800d13a:	d038      	beq.n	800d1ae <_svfiprintf_r+0x1d6>
 800d13c:	4b22      	ldr	r3, [pc, #136]	; (800d1c8 <_svfiprintf_r+0x1f0>)
 800d13e:	bb1b      	cbnz	r3, 800d188 <_svfiprintf_r+0x1b0>
 800d140:	9b03      	ldr	r3, [sp, #12]
 800d142:	3307      	adds	r3, #7
 800d144:	f023 0307 	bic.w	r3, r3, #7
 800d148:	3308      	adds	r3, #8
 800d14a:	9303      	str	r3, [sp, #12]
 800d14c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d14e:	4433      	add	r3, r6
 800d150:	9309      	str	r3, [sp, #36]	; 0x24
 800d152:	e768      	b.n	800d026 <_svfiprintf_r+0x4e>
 800d154:	fb0c 3202 	mla	r2, ip, r2, r3
 800d158:	460c      	mov	r4, r1
 800d15a:	2001      	movs	r0, #1
 800d15c:	e7a6      	b.n	800d0ac <_svfiprintf_r+0xd4>
 800d15e:	2300      	movs	r3, #0
 800d160:	3401      	adds	r4, #1
 800d162:	9305      	str	r3, [sp, #20]
 800d164:	4619      	mov	r1, r3
 800d166:	f04f 0c0a 	mov.w	ip, #10
 800d16a:	4620      	mov	r0, r4
 800d16c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d170:	3a30      	subs	r2, #48	; 0x30
 800d172:	2a09      	cmp	r2, #9
 800d174:	d903      	bls.n	800d17e <_svfiprintf_r+0x1a6>
 800d176:	2b00      	cmp	r3, #0
 800d178:	d0c6      	beq.n	800d108 <_svfiprintf_r+0x130>
 800d17a:	9105      	str	r1, [sp, #20]
 800d17c:	e7c4      	b.n	800d108 <_svfiprintf_r+0x130>
 800d17e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d182:	4604      	mov	r4, r0
 800d184:	2301      	movs	r3, #1
 800d186:	e7f0      	b.n	800d16a <_svfiprintf_r+0x192>
 800d188:	ab03      	add	r3, sp, #12
 800d18a:	9300      	str	r3, [sp, #0]
 800d18c:	462a      	mov	r2, r5
 800d18e:	4b0f      	ldr	r3, [pc, #60]	; (800d1cc <_svfiprintf_r+0x1f4>)
 800d190:	a904      	add	r1, sp, #16
 800d192:	4638      	mov	r0, r7
 800d194:	f3af 8000 	nop.w
 800d198:	1c42      	adds	r2, r0, #1
 800d19a:	4606      	mov	r6, r0
 800d19c:	d1d6      	bne.n	800d14c <_svfiprintf_r+0x174>
 800d19e:	89ab      	ldrh	r3, [r5, #12]
 800d1a0:	065b      	lsls	r3, r3, #25
 800d1a2:	f53f af2d 	bmi.w	800d000 <_svfiprintf_r+0x28>
 800d1a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d1a8:	b01d      	add	sp, #116	; 0x74
 800d1aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1ae:	ab03      	add	r3, sp, #12
 800d1b0:	9300      	str	r3, [sp, #0]
 800d1b2:	462a      	mov	r2, r5
 800d1b4:	4b05      	ldr	r3, [pc, #20]	; (800d1cc <_svfiprintf_r+0x1f4>)
 800d1b6:	a904      	add	r1, sp, #16
 800d1b8:	4638      	mov	r0, r7
 800d1ba:	f000 f879 	bl	800d2b0 <_printf_i>
 800d1be:	e7eb      	b.n	800d198 <_svfiprintf_r+0x1c0>
 800d1c0:	0800e63c 	.word	0x0800e63c
 800d1c4:	0800e646 	.word	0x0800e646
 800d1c8:	00000000 	.word	0x00000000
 800d1cc:	0800cf25 	.word	0x0800cf25
 800d1d0:	0800e642 	.word	0x0800e642

0800d1d4 <_printf_common>:
 800d1d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1d8:	4616      	mov	r6, r2
 800d1da:	4699      	mov	r9, r3
 800d1dc:	688a      	ldr	r2, [r1, #8]
 800d1de:	690b      	ldr	r3, [r1, #16]
 800d1e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800d1e4:	4293      	cmp	r3, r2
 800d1e6:	bfb8      	it	lt
 800d1e8:	4613      	movlt	r3, r2
 800d1ea:	6033      	str	r3, [r6, #0]
 800d1ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800d1f0:	4607      	mov	r7, r0
 800d1f2:	460c      	mov	r4, r1
 800d1f4:	b10a      	cbz	r2, 800d1fa <_printf_common+0x26>
 800d1f6:	3301      	adds	r3, #1
 800d1f8:	6033      	str	r3, [r6, #0]
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	0699      	lsls	r1, r3, #26
 800d1fe:	bf42      	ittt	mi
 800d200:	6833      	ldrmi	r3, [r6, #0]
 800d202:	3302      	addmi	r3, #2
 800d204:	6033      	strmi	r3, [r6, #0]
 800d206:	6825      	ldr	r5, [r4, #0]
 800d208:	f015 0506 	ands.w	r5, r5, #6
 800d20c:	d106      	bne.n	800d21c <_printf_common+0x48>
 800d20e:	f104 0a19 	add.w	sl, r4, #25
 800d212:	68e3      	ldr	r3, [r4, #12]
 800d214:	6832      	ldr	r2, [r6, #0]
 800d216:	1a9b      	subs	r3, r3, r2
 800d218:	42ab      	cmp	r3, r5
 800d21a:	dc26      	bgt.n	800d26a <_printf_common+0x96>
 800d21c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800d220:	1e13      	subs	r3, r2, #0
 800d222:	6822      	ldr	r2, [r4, #0]
 800d224:	bf18      	it	ne
 800d226:	2301      	movne	r3, #1
 800d228:	0692      	lsls	r2, r2, #26
 800d22a:	d42b      	bmi.n	800d284 <_printf_common+0xb0>
 800d22c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800d230:	4649      	mov	r1, r9
 800d232:	4638      	mov	r0, r7
 800d234:	47c0      	blx	r8
 800d236:	3001      	adds	r0, #1
 800d238:	d01e      	beq.n	800d278 <_printf_common+0xa4>
 800d23a:	6823      	ldr	r3, [r4, #0]
 800d23c:	6922      	ldr	r2, [r4, #16]
 800d23e:	f003 0306 	and.w	r3, r3, #6
 800d242:	2b04      	cmp	r3, #4
 800d244:	bf02      	ittt	eq
 800d246:	68e5      	ldreq	r5, [r4, #12]
 800d248:	6833      	ldreq	r3, [r6, #0]
 800d24a:	1aed      	subeq	r5, r5, r3
 800d24c:	68a3      	ldr	r3, [r4, #8]
 800d24e:	bf0c      	ite	eq
 800d250:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d254:	2500      	movne	r5, #0
 800d256:	4293      	cmp	r3, r2
 800d258:	bfc4      	itt	gt
 800d25a:	1a9b      	subgt	r3, r3, r2
 800d25c:	18ed      	addgt	r5, r5, r3
 800d25e:	2600      	movs	r6, #0
 800d260:	341a      	adds	r4, #26
 800d262:	42b5      	cmp	r5, r6
 800d264:	d11a      	bne.n	800d29c <_printf_common+0xc8>
 800d266:	2000      	movs	r0, #0
 800d268:	e008      	b.n	800d27c <_printf_common+0xa8>
 800d26a:	2301      	movs	r3, #1
 800d26c:	4652      	mov	r2, sl
 800d26e:	4649      	mov	r1, r9
 800d270:	4638      	mov	r0, r7
 800d272:	47c0      	blx	r8
 800d274:	3001      	adds	r0, #1
 800d276:	d103      	bne.n	800d280 <_printf_common+0xac>
 800d278:	f04f 30ff 	mov.w	r0, #4294967295
 800d27c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d280:	3501      	adds	r5, #1
 800d282:	e7c6      	b.n	800d212 <_printf_common+0x3e>
 800d284:	18e1      	adds	r1, r4, r3
 800d286:	1c5a      	adds	r2, r3, #1
 800d288:	2030      	movs	r0, #48	; 0x30
 800d28a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d28e:	4422      	add	r2, r4
 800d290:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d294:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d298:	3302      	adds	r3, #2
 800d29a:	e7c7      	b.n	800d22c <_printf_common+0x58>
 800d29c:	2301      	movs	r3, #1
 800d29e:	4622      	mov	r2, r4
 800d2a0:	4649      	mov	r1, r9
 800d2a2:	4638      	mov	r0, r7
 800d2a4:	47c0      	blx	r8
 800d2a6:	3001      	adds	r0, #1
 800d2a8:	d0e6      	beq.n	800d278 <_printf_common+0xa4>
 800d2aa:	3601      	adds	r6, #1
 800d2ac:	e7d9      	b.n	800d262 <_printf_common+0x8e>
	...

0800d2b0 <_printf_i>:
 800d2b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d2b4:	7e0f      	ldrb	r7, [r1, #24]
 800d2b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d2b8:	2f78      	cmp	r7, #120	; 0x78
 800d2ba:	4691      	mov	r9, r2
 800d2bc:	4680      	mov	r8, r0
 800d2be:	460c      	mov	r4, r1
 800d2c0:	469a      	mov	sl, r3
 800d2c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d2c6:	d807      	bhi.n	800d2d8 <_printf_i+0x28>
 800d2c8:	2f62      	cmp	r7, #98	; 0x62
 800d2ca:	d80a      	bhi.n	800d2e2 <_printf_i+0x32>
 800d2cc:	2f00      	cmp	r7, #0
 800d2ce:	f000 80d4 	beq.w	800d47a <_printf_i+0x1ca>
 800d2d2:	2f58      	cmp	r7, #88	; 0x58
 800d2d4:	f000 80c0 	beq.w	800d458 <_printf_i+0x1a8>
 800d2d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d2dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d2e0:	e03a      	b.n	800d358 <_printf_i+0xa8>
 800d2e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d2e6:	2b15      	cmp	r3, #21
 800d2e8:	d8f6      	bhi.n	800d2d8 <_printf_i+0x28>
 800d2ea:	a101      	add	r1, pc, #4	; (adr r1, 800d2f0 <_printf_i+0x40>)
 800d2ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2f0:	0800d349 	.word	0x0800d349
 800d2f4:	0800d35d 	.word	0x0800d35d
 800d2f8:	0800d2d9 	.word	0x0800d2d9
 800d2fc:	0800d2d9 	.word	0x0800d2d9
 800d300:	0800d2d9 	.word	0x0800d2d9
 800d304:	0800d2d9 	.word	0x0800d2d9
 800d308:	0800d35d 	.word	0x0800d35d
 800d30c:	0800d2d9 	.word	0x0800d2d9
 800d310:	0800d2d9 	.word	0x0800d2d9
 800d314:	0800d2d9 	.word	0x0800d2d9
 800d318:	0800d2d9 	.word	0x0800d2d9
 800d31c:	0800d461 	.word	0x0800d461
 800d320:	0800d389 	.word	0x0800d389
 800d324:	0800d41b 	.word	0x0800d41b
 800d328:	0800d2d9 	.word	0x0800d2d9
 800d32c:	0800d2d9 	.word	0x0800d2d9
 800d330:	0800d483 	.word	0x0800d483
 800d334:	0800d2d9 	.word	0x0800d2d9
 800d338:	0800d389 	.word	0x0800d389
 800d33c:	0800d2d9 	.word	0x0800d2d9
 800d340:	0800d2d9 	.word	0x0800d2d9
 800d344:	0800d423 	.word	0x0800d423
 800d348:	682b      	ldr	r3, [r5, #0]
 800d34a:	1d1a      	adds	r2, r3, #4
 800d34c:	681b      	ldr	r3, [r3, #0]
 800d34e:	602a      	str	r2, [r5, #0]
 800d350:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d354:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d358:	2301      	movs	r3, #1
 800d35a:	e09f      	b.n	800d49c <_printf_i+0x1ec>
 800d35c:	6820      	ldr	r0, [r4, #0]
 800d35e:	682b      	ldr	r3, [r5, #0]
 800d360:	0607      	lsls	r7, r0, #24
 800d362:	f103 0104 	add.w	r1, r3, #4
 800d366:	6029      	str	r1, [r5, #0]
 800d368:	d501      	bpl.n	800d36e <_printf_i+0xbe>
 800d36a:	681e      	ldr	r6, [r3, #0]
 800d36c:	e003      	b.n	800d376 <_printf_i+0xc6>
 800d36e:	0646      	lsls	r6, r0, #25
 800d370:	d5fb      	bpl.n	800d36a <_printf_i+0xba>
 800d372:	f9b3 6000 	ldrsh.w	r6, [r3]
 800d376:	2e00      	cmp	r6, #0
 800d378:	da03      	bge.n	800d382 <_printf_i+0xd2>
 800d37a:	232d      	movs	r3, #45	; 0x2d
 800d37c:	4276      	negs	r6, r6
 800d37e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d382:	485a      	ldr	r0, [pc, #360]	; (800d4ec <_printf_i+0x23c>)
 800d384:	230a      	movs	r3, #10
 800d386:	e012      	b.n	800d3ae <_printf_i+0xfe>
 800d388:	682b      	ldr	r3, [r5, #0]
 800d38a:	6820      	ldr	r0, [r4, #0]
 800d38c:	1d19      	adds	r1, r3, #4
 800d38e:	6029      	str	r1, [r5, #0]
 800d390:	0605      	lsls	r5, r0, #24
 800d392:	d501      	bpl.n	800d398 <_printf_i+0xe8>
 800d394:	681e      	ldr	r6, [r3, #0]
 800d396:	e002      	b.n	800d39e <_printf_i+0xee>
 800d398:	0641      	lsls	r1, r0, #25
 800d39a:	d5fb      	bpl.n	800d394 <_printf_i+0xe4>
 800d39c:	881e      	ldrh	r6, [r3, #0]
 800d39e:	4853      	ldr	r0, [pc, #332]	; (800d4ec <_printf_i+0x23c>)
 800d3a0:	2f6f      	cmp	r7, #111	; 0x6f
 800d3a2:	bf0c      	ite	eq
 800d3a4:	2308      	moveq	r3, #8
 800d3a6:	230a      	movne	r3, #10
 800d3a8:	2100      	movs	r1, #0
 800d3aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d3ae:	6865      	ldr	r5, [r4, #4]
 800d3b0:	60a5      	str	r5, [r4, #8]
 800d3b2:	2d00      	cmp	r5, #0
 800d3b4:	bfa2      	ittt	ge
 800d3b6:	6821      	ldrge	r1, [r4, #0]
 800d3b8:	f021 0104 	bicge.w	r1, r1, #4
 800d3bc:	6021      	strge	r1, [r4, #0]
 800d3be:	b90e      	cbnz	r6, 800d3c4 <_printf_i+0x114>
 800d3c0:	2d00      	cmp	r5, #0
 800d3c2:	d04b      	beq.n	800d45c <_printf_i+0x1ac>
 800d3c4:	4615      	mov	r5, r2
 800d3c6:	fbb6 f1f3 	udiv	r1, r6, r3
 800d3ca:	fb03 6711 	mls	r7, r3, r1, r6
 800d3ce:	5dc7      	ldrb	r7, [r0, r7]
 800d3d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d3d4:	4637      	mov	r7, r6
 800d3d6:	42bb      	cmp	r3, r7
 800d3d8:	460e      	mov	r6, r1
 800d3da:	d9f4      	bls.n	800d3c6 <_printf_i+0x116>
 800d3dc:	2b08      	cmp	r3, #8
 800d3de:	d10b      	bne.n	800d3f8 <_printf_i+0x148>
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	07de      	lsls	r6, r3, #31
 800d3e4:	d508      	bpl.n	800d3f8 <_printf_i+0x148>
 800d3e6:	6923      	ldr	r3, [r4, #16]
 800d3e8:	6861      	ldr	r1, [r4, #4]
 800d3ea:	4299      	cmp	r1, r3
 800d3ec:	bfde      	ittt	le
 800d3ee:	2330      	movle	r3, #48	; 0x30
 800d3f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d3f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d3f8:	1b52      	subs	r2, r2, r5
 800d3fa:	6122      	str	r2, [r4, #16]
 800d3fc:	f8cd a000 	str.w	sl, [sp]
 800d400:	464b      	mov	r3, r9
 800d402:	aa03      	add	r2, sp, #12
 800d404:	4621      	mov	r1, r4
 800d406:	4640      	mov	r0, r8
 800d408:	f7ff fee4 	bl	800d1d4 <_printf_common>
 800d40c:	3001      	adds	r0, #1
 800d40e:	d14a      	bne.n	800d4a6 <_printf_i+0x1f6>
 800d410:	f04f 30ff 	mov.w	r0, #4294967295
 800d414:	b004      	add	sp, #16
 800d416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d41a:	6823      	ldr	r3, [r4, #0]
 800d41c:	f043 0320 	orr.w	r3, r3, #32
 800d420:	6023      	str	r3, [r4, #0]
 800d422:	4833      	ldr	r0, [pc, #204]	; (800d4f0 <_printf_i+0x240>)
 800d424:	2778      	movs	r7, #120	; 0x78
 800d426:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800d42a:	6823      	ldr	r3, [r4, #0]
 800d42c:	6829      	ldr	r1, [r5, #0]
 800d42e:	061f      	lsls	r7, r3, #24
 800d430:	f851 6b04 	ldr.w	r6, [r1], #4
 800d434:	d402      	bmi.n	800d43c <_printf_i+0x18c>
 800d436:	065f      	lsls	r7, r3, #25
 800d438:	bf48      	it	mi
 800d43a:	b2b6      	uxthmi	r6, r6
 800d43c:	07df      	lsls	r7, r3, #31
 800d43e:	bf48      	it	mi
 800d440:	f043 0320 	orrmi.w	r3, r3, #32
 800d444:	6029      	str	r1, [r5, #0]
 800d446:	bf48      	it	mi
 800d448:	6023      	strmi	r3, [r4, #0]
 800d44a:	b91e      	cbnz	r6, 800d454 <_printf_i+0x1a4>
 800d44c:	6823      	ldr	r3, [r4, #0]
 800d44e:	f023 0320 	bic.w	r3, r3, #32
 800d452:	6023      	str	r3, [r4, #0]
 800d454:	2310      	movs	r3, #16
 800d456:	e7a7      	b.n	800d3a8 <_printf_i+0xf8>
 800d458:	4824      	ldr	r0, [pc, #144]	; (800d4ec <_printf_i+0x23c>)
 800d45a:	e7e4      	b.n	800d426 <_printf_i+0x176>
 800d45c:	4615      	mov	r5, r2
 800d45e:	e7bd      	b.n	800d3dc <_printf_i+0x12c>
 800d460:	682b      	ldr	r3, [r5, #0]
 800d462:	6826      	ldr	r6, [r4, #0]
 800d464:	6961      	ldr	r1, [r4, #20]
 800d466:	1d18      	adds	r0, r3, #4
 800d468:	6028      	str	r0, [r5, #0]
 800d46a:	0635      	lsls	r5, r6, #24
 800d46c:	681b      	ldr	r3, [r3, #0]
 800d46e:	d501      	bpl.n	800d474 <_printf_i+0x1c4>
 800d470:	6019      	str	r1, [r3, #0]
 800d472:	e002      	b.n	800d47a <_printf_i+0x1ca>
 800d474:	0670      	lsls	r0, r6, #25
 800d476:	d5fb      	bpl.n	800d470 <_printf_i+0x1c0>
 800d478:	8019      	strh	r1, [r3, #0]
 800d47a:	2300      	movs	r3, #0
 800d47c:	6123      	str	r3, [r4, #16]
 800d47e:	4615      	mov	r5, r2
 800d480:	e7bc      	b.n	800d3fc <_printf_i+0x14c>
 800d482:	682b      	ldr	r3, [r5, #0]
 800d484:	1d1a      	adds	r2, r3, #4
 800d486:	602a      	str	r2, [r5, #0]
 800d488:	681d      	ldr	r5, [r3, #0]
 800d48a:	6862      	ldr	r2, [r4, #4]
 800d48c:	2100      	movs	r1, #0
 800d48e:	4628      	mov	r0, r5
 800d490:	f7f2 febe 	bl	8000210 <memchr>
 800d494:	b108      	cbz	r0, 800d49a <_printf_i+0x1ea>
 800d496:	1b40      	subs	r0, r0, r5
 800d498:	6060      	str	r0, [r4, #4]
 800d49a:	6863      	ldr	r3, [r4, #4]
 800d49c:	6123      	str	r3, [r4, #16]
 800d49e:	2300      	movs	r3, #0
 800d4a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d4a4:	e7aa      	b.n	800d3fc <_printf_i+0x14c>
 800d4a6:	6923      	ldr	r3, [r4, #16]
 800d4a8:	462a      	mov	r2, r5
 800d4aa:	4649      	mov	r1, r9
 800d4ac:	4640      	mov	r0, r8
 800d4ae:	47d0      	blx	sl
 800d4b0:	3001      	adds	r0, #1
 800d4b2:	d0ad      	beq.n	800d410 <_printf_i+0x160>
 800d4b4:	6823      	ldr	r3, [r4, #0]
 800d4b6:	079b      	lsls	r3, r3, #30
 800d4b8:	d413      	bmi.n	800d4e2 <_printf_i+0x232>
 800d4ba:	68e0      	ldr	r0, [r4, #12]
 800d4bc:	9b03      	ldr	r3, [sp, #12]
 800d4be:	4298      	cmp	r0, r3
 800d4c0:	bfb8      	it	lt
 800d4c2:	4618      	movlt	r0, r3
 800d4c4:	e7a6      	b.n	800d414 <_printf_i+0x164>
 800d4c6:	2301      	movs	r3, #1
 800d4c8:	4632      	mov	r2, r6
 800d4ca:	4649      	mov	r1, r9
 800d4cc:	4640      	mov	r0, r8
 800d4ce:	47d0      	blx	sl
 800d4d0:	3001      	adds	r0, #1
 800d4d2:	d09d      	beq.n	800d410 <_printf_i+0x160>
 800d4d4:	3501      	adds	r5, #1
 800d4d6:	68e3      	ldr	r3, [r4, #12]
 800d4d8:	9903      	ldr	r1, [sp, #12]
 800d4da:	1a5b      	subs	r3, r3, r1
 800d4dc:	42ab      	cmp	r3, r5
 800d4de:	dcf2      	bgt.n	800d4c6 <_printf_i+0x216>
 800d4e0:	e7eb      	b.n	800d4ba <_printf_i+0x20a>
 800d4e2:	2500      	movs	r5, #0
 800d4e4:	f104 0619 	add.w	r6, r4, #25
 800d4e8:	e7f5      	b.n	800d4d6 <_printf_i+0x226>
 800d4ea:	bf00      	nop
 800d4ec:	0800e64d 	.word	0x0800e64d
 800d4f0:	0800e65e 	.word	0x0800e65e

0800d4f4 <__sflush_r>:
 800d4f4:	898a      	ldrh	r2, [r1, #12]
 800d4f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d4fa:	4605      	mov	r5, r0
 800d4fc:	0710      	lsls	r0, r2, #28
 800d4fe:	460c      	mov	r4, r1
 800d500:	d458      	bmi.n	800d5b4 <__sflush_r+0xc0>
 800d502:	684b      	ldr	r3, [r1, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	dc05      	bgt.n	800d514 <__sflush_r+0x20>
 800d508:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d50a:	2b00      	cmp	r3, #0
 800d50c:	dc02      	bgt.n	800d514 <__sflush_r+0x20>
 800d50e:	2000      	movs	r0, #0
 800d510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d514:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d516:	2e00      	cmp	r6, #0
 800d518:	d0f9      	beq.n	800d50e <__sflush_r+0x1a>
 800d51a:	2300      	movs	r3, #0
 800d51c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d520:	682f      	ldr	r7, [r5, #0]
 800d522:	6a21      	ldr	r1, [r4, #32]
 800d524:	602b      	str	r3, [r5, #0]
 800d526:	d032      	beq.n	800d58e <__sflush_r+0x9a>
 800d528:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d52a:	89a3      	ldrh	r3, [r4, #12]
 800d52c:	075a      	lsls	r2, r3, #29
 800d52e:	d505      	bpl.n	800d53c <__sflush_r+0x48>
 800d530:	6863      	ldr	r3, [r4, #4]
 800d532:	1ac0      	subs	r0, r0, r3
 800d534:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d536:	b10b      	cbz	r3, 800d53c <__sflush_r+0x48>
 800d538:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d53a:	1ac0      	subs	r0, r0, r3
 800d53c:	2300      	movs	r3, #0
 800d53e:	4602      	mov	r2, r0
 800d540:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d542:	6a21      	ldr	r1, [r4, #32]
 800d544:	4628      	mov	r0, r5
 800d546:	47b0      	blx	r6
 800d548:	1c43      	adds	r3, r0, #1
 800d54a:	89a3      	ldrh	r3, [r4, #12]
 800d54c:	d106      	bne.n	800d55c <__sflush_r+0x68>
 800d54e:	6829      	ldr	r1, [r5, #0]
 800d550:	291d      	cmp	r1, #29
 800d552:	d82b      	bhi.n	800d5ac <__sflush_r+0xb8>
 800d554:	4a29      	ldr	r2, [pc, #164]	; (800d5fc <__sflush_r+0x108>)
 800d556:	410a      	asrs	r2, r1
 800d558:	07d6      	lsls	r6, r2, #31
 800d55a:	d427      	bmi.n	800d5ac <__sflush_r+0xb8>
 800d55c:	2200      	movs	r2, #0
 800d55e:	6062      	str	r2, [r4, #4]
 800d560:	04d9      	lsls	r1, r3, #19
 800d562:	6922      	ldr	r2, [r4, #16]
 800d564:	6022      	str	r2, [r4, #0]
 800d566:	d504      	bpl.n	800d572 <__sflush_r+0x7e>
 800d568:	1c42      	adds	r2, r0, #1
 800d56a:	d101      	bne.n	800d570 <__sflush_r+0x7c>
 800d56c:	682b      	ldr	r3, [r5, #0]
 800d56e:	b903      	cbnz	r3, 800d572 <__sflush_r+0x7e>
 800d570:	6560      	str	r0, [r4, #84]	; 0x54
 800d572:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d574:	602f      	str	r7, [r5, #0]
 800d576:	2900      	cmp	r1, #0
 800d578:	d0c9      	beq.n	800d50e <__sflush_r+0x1a>
 800d57a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d57e:	4299      	cmp	r1, r3
 800d580:	d002      	beq.n	800d588 <__sflush_r+0x94>
 800d582:	4628      	mov	r0, r5
 800d584:	f7ff fc82 	bl	800ce8c <_free_r>
 800d588:	2000      	movs	r0, #0
 800d58a:	6360      	str	r0, [r4, #52]	; 0x34
 800d58c:	e7c0      	b.n	800d510 <__sflush_r+0x1c>
 800d58e:	2301      	movs	r3, #1
 800d590:	4628      	mov	r0, r5
 800d592:	47b0      	blx	r6
 800d594:	1c41      	adds	r1, r0, #1
 800d596:	d1c8      	bne.n	800d52a <__sflush_r+0x36>
 800d598:	682b      	ldr	r3, [r5, #0]
 800d59a:	2b00      	cmp	r3, #0
 800d59c:	d0c5      	beq.n	800d52a <__sflush_r+0x36>
 800d59e:	2b1d      	cmp	r3, #29
 800d5a0:	d001      	beq.n	800d5a6 <__sflush_r+0xb2>
 800d5a2:	2b16      	cmp	r3, #22
 800d5a4:	d101      	bne.n	800d5aa <__sflush_r+0xb6>
 800d5a6:	602f      	str	r7, [r5, #0]
 800d5a8:	e7b1      	b.n	800d50e <__sflush_r+0x1a>
 800d5aa:	89a3      	ldrh	r3, [r4, #12]
 800d5ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5b0:	81a3      	strh	r3, [r4, #12]
 800d5b2:	e7ad      	b.n	800d510 <__sflush_r+0x1c>
 800d5b4:	690f      	ldr	r7, [r1, #16]
 800d5b6:	2f00      	cmp	r7, #0
 800d5b8:	d0a9      	beq.n	800d50e <__sflush_r+0x1a>
 800d5ba:	0793      	lsls	r3, r2, #30
 800d5bc:	680e      	ldr	r6, [r1, #0]
 800d5be:	bf08      	it	eq
 800d5c0:	694b      	ldreq	r3, [r1, #20]
 800d5c2:	600f      	str	r7, [r1, #0]
 800d5c4:	bf18      	it	ne
 800d5c6:	2300      	movne	r3, #0
 800d5c8:	eba6 0807 	sub.w	r8, r6, r7
 800d5cc:	608b      	str	r3, [r1, #8]
 800d5ce:	f1b8 0f00 	cmp.w	r8, #0
 800d5d2:	dd9c      	ble.n	800d50e <__sflush_r+0x1a>
 800d5d4:	6a21      	ldr	r1, [r4, #32]
 800d5d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d5d8:	4643      	mov	r3, r8
 800d5da:	463a      	mov	r2, r7
 800d5dc:	4628      	mov	r0, r5
 800d5de:	47b0      	blx	r6
 800d5e0:	2800      	cmp	r0, #0
 800d5e2:	dc06      	bgt.n	800d5f2 <__sflush_r+0xfe>
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5ea:	81a3      	strh	r3, [r4, #12]
 800d5ec:	f04f 30ff 	mov.w	r0, #4294967295
 800d5f0:	e78e      	b.n	800d510 <__sflush_r+0x1c>
 800d5f2:	4407      	add	r7, r0
 800d5f4:	eba8 0800 	sub.w	r8, r8, r0
 800d5f8:	e7e9      	b.n	800d5ce <__sflush_r+0xda>
 800d5fa:	bf00      	nop
 800d5fc:	dfbffffe 	.word	0xdfbffffe

0800d600 <_fflush_r>:
 800d600:	b538      	push	{r3, r4, r5, lr}
 800d602:	690b      	ldr	r3, [r1, #16]
 800d604:	4605      	mov	r5, r0
 800d606:	460c      	mov	r4, r1
 800d608:	b913      	cbnz	r3, 800d610 <_fflush_r+0x10>
 800d60a:	2500      	movs	r5, #0
 800d60c:	4628      	mov	r0, r5
 800d60e:	bd38      	pop	{r3, r4, r5, pc}
 800d610:	b118      	cbz	r0, 800d61a <_fflush_r+0x1a>
 800d612:	6a03      	ldr	r3, [r0, #32]
 800d614:	b90b      	cbnz	r3, 800d61a <_fflush_r+0x1a>
 800d616:	f7ff f9ad 	bl	800c974 <__sinit>
 800d61a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d0f3      	beq.n	800d60a <_fflush_r+0xa>
 800d622:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d624:	07d0      	lsls	r0, r2, #31
 800d626:	d404      	bmi.n	800d632 <_fflush_r+0x32>
 800d628:	0599      	lsls	r1, r3, #22
 800d62a:	d402      	bmi.n	800d632 <_fflush_r+0x32>
 800d62c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d62e:	f7ff fbf6 	bl	800ce1e <__retarget_lock_acquire_recursive>
 800d632:	4628      	mov	r0, r5
 800d634:	4621      	mov	r1, r4
 800d636:	f7ff ff5d 	bl	800d4f4 <__sflush_r>
 800d63a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d63c:	07da      	lsls	r2, r3, #31
 800d63e:	4605      	mov	r5, r0
 800d640:	d4e4      	bmi.n	800d60c <_fflush_r+0xc>
 800d642:	89a3      	ldrh	r3, [r4, #12]
 800d644:	059b      	lsls	r3, r3, #22
 800d646:	d4e1      	bmi.n	800d60c <_fflush_r+0xc>
 800d648:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d64a:	f7ff fbe9 	bl	800ce20 <__retarget_lock_release_recursive>
 800d64e:	e7dd      	b.n	800d60c <_fflush_r+0xc>

0800d650 <fiprintf>:
 800d650:	b40e      	push	{r1, r2, r3}
 800d652:	b503      	push	{r0, r1, lr}
 800d654:	4601      	mov	r1, r0
 800d656:	ab03      	add	r3, sp, #12
 800d658:	4805      	ldr	r0, [pc, #20]	; (800d670 <fiprintf+0x20>)
 800d65a:	f853 2b04 	ldr.w	r2, [r3], #4
 800d65e:	6800      	ldr	r0, [r0, #0]
 800d660:	9301      	str	r3, [sp, #4]
 800d662:	f000 f905 	bl	800d870 <_vfiprintf_r>
 800d666:	b002      	add	sp, #8
 800d668:	f85d eb04 	ldr.w	lr, [sp], #4
 800d66c:	b003      	add	sp, #12
 800d66e:	4770      	bx	lr
 800d670:	200001b8 	.word	0x200001b8

0800d674 <__swhatbuf_r>:
 800d674:	b570      	push	{r4, r5, r6, lr}
 800d676:	460c      	mov	r4, r1
 800d678:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d67c:	2900      	cmp	r1, #0
 800d67e:	b096      	sub	sp, #88	; 0x58
 800d680:	4615      	mov	r5, r2
 800d682:	461e      	mov	r6, r3
 800d684:	da0d      	bge.n	800d6a2 <__swhatbuf_r+0x2e>
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d68c:	f04f 0100 	mov.w	r1, #0
 800d690:	bf0c      	ite	eq
 800d692:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d696:	2340      	movne	r3, #64	; 0x40
 800d698:	2000      	movs	r0, #0
 800d69a:	6031      	str	r1, [r6, #0]
 800d69c:	602b      	str	r3, [r5, #0]
 800d69e:	b016      	add	sp, #88	; 0x58
 800d6a0:	bd70      	pop	{r4, r5, r6, pc}
 800d6a2:	466a      	mov	r2, sp
 800d6a4:	f000 f862 	bl	800d76c <_fstat_r>
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	dbec      	blt.n	800d686 <__swhatbuf_r+0x12>
 800d6ac:	9901      	ldr	r1, [sp, #4]
 800d6ae:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d6b2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d6b6:	4259      	negs	r1, r3
 800d6b8:	4159      	adcs	r1, r3
 800d6ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d6be:	e7eb      	b.n	800d698 <__swhatbuf_r+0x24>

0800d6c0 <__smakebuf_r>:
 800d6c0:	898b      	ldrh	r3, [r1, #12]
 800d6c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d6c4:	079d      	lsls	r5, r3, #30
 800d6c6:	4606      	mov	r6, r0
 800d6c8:	460c      	mov	r4, r1
 800d6ca:	d507      	bpl.n	800d6dc <__smakebuf_r+0x1c>
 800d6cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d6d0:	6023      	str	r3, [r4, #0]
 800d6d2:	6123      	str	r3, [r4, #16]
 800d6d4:	2301      	movs	r3, #1
 800d6d6:	6163      	str	r3, [r4, #20]
 800d6d8:	b002      	add	sp, #8
 800d6da:	bd70      	pop	{r4, r5, r6, pc}
 800d6dc:	ab01      	add	r3, sp, #4
 800d6de:	466a      	mov	r2, sp
 800d6e0:	f7ff ffc8 	bl	800d674 <__swhatbuf_r>
 800d6e4:	9900      	ldr	r1, [sp, #0]
 800d6e6:	4605      	mov	r5, r0
 800d6e8:	4630      	mov	r0, r6
 800d6ea:	f7fe ffbf 	bl	800c66c <_malloc_r>
 800d6ee:	b948      	cbnz	r0, 800d704 <__smakebuf_r+0x44>
 800d6f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6f4:	059a      	lsls	r2, r3, #22
 800d6f6:	d4ef      	bmi.n	800d6d8 <__smakebuf_r+0x18>
 800d6f8:	f023 0303 	bic.w	r3, r3, #3
 800d6fc:	f043 0302 	orr.w	r3, r3, #2
 800d700:	81a3      	strh	r3, [r4, #12]
 800d702:	e7e3      	b.n	800d6cc <__smakebuf_r+0xc>
 800d704:	89a3      	ldrh	r3, [r4, #12]
 800d706:	6020      	str	r0, [r4, #0]
 800d708:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d70c:	81a3      	strh	r3, [r4, #12]
 800d70e:	9b00      	ldr	r3, [sp, #0]
 800d710:	6163      	str	r3, [r4, #20]
 800d712:	9b01      	ldr	r3, [sp, #4]
 800d714:	6120      	str	r0, [r4, #16]
 800d716:	b15b      	cbz	r3, 800d730 <__smakebuf_r+0x70>
 800d718:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d71c:	4630      	mov	r0, r6
 800d71e:	f000 f837 	bl	800d790 <_isatty_r>
 800d722:	b128      	cbz	r0, 800d730 <__smakebuf_r+0x70>
 800d724:	89a3      	ldrh	r3, [r4, #12]
 800d726:	f023 0303 	bic.w	r3, r3, #3
 800d72a:	f043 0301 	orr.w	r3, r3, #1
 800d72e:	81a3      	strh	r3, [r4, #12]
 800d730:	89a3      	ldrh	r3, [r4, #12]
 800d732:	431d      	orrs	r5, r3
 800d734:	81a5      	strh	r5, [r4, #12]
 800d736:	e7cf      	b.n	800d6d8 <__smakebuf_r+0x18>

0800d738 <memmove>:
 800d738:	4288      	cmp	r0, r1
 800d73a:	b510      	push	{r4, lr}
 800d73c:	eb01 0402 	add.w	r4, r1, r2
 800d740:	d902      	bls.n	800d748 <memmove+0x10>
 800d742:	4284      	cmp	r4, r0
 800d744:	4623      	mov	r3, r4
 800d746:	d807      	bhi.n	800d758 <memmove+0x20>
 800d748:	1e43      	subs	r3, r0, #1
 800d74a:	42a1      	cmp	r1, r4
 800d74c:	d008      	beq.n	800d760 <memmove+0x28>
 800d74e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d752:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d756:	e7f8      	b.n	800d74a <memmove+0x12>
 800d758:	4402      	add	r2, r0
 800d75a:	4601      	mov	r1, r0
 800d75c:	428a      	cmp	r2, r1
 800d75e:	d100      	bne.n	800d762 <memmove+0x2a>
 800d760:	bd10      	pop	{r4, pc}
 800d762:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d766:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d76a:	e7f7      	b.n	800d75c <memmove+0x24>

0800d76c <_fstat_r>:
 800d76c:	b538      	push	{r3, r4, r5, lr}
 800d76e:	4d07      	ldr	r5, [pc, #28]	; (800d78c <_fstat_r+0x20>)
 800d770:	2300      	movs	r3, #0
 800d772:	4604      	mov	r4, r0
 800d774:	4608      	mov	r0, r1
 800d776:	4611      	mov	r1, r2
 800d778:	602b      	str	r3, [r5, #0]
 800d77a:	f7f6 fa8e 	bl	8003c9a <_fstat>
 800d77e:	1c43      	adds	r3, r0, #1
 800d780:	d102      	bne.n	800d788 <_fstat_r+0x1c>
 800d782:	682b      	ldr	r3, [r5, #0]
 800d784:	b103      	cbz	r3, 800d788 <_fstat_r+0x1c>
 800d786:	6023      	str	r3, [r4, #0]
 800d788:	bd38      	pop	{r3, r4, r5, pc}
 800d78a:	bf00      	nop
 800d78c:	2000f154 	.word	0x2000f154

0800d790 <_isatty_r>:
 800d790:	b538      	push	{r3, r4, r5, lr}
 800d792:	4d06      	ldr	r5, [pc, #24]	; (800d7ac <_isatty_r+0x1c>)
 800d794:	2300      	movs	r3, #0
 800d796:	4604      	mov	r4, r0
 800d798:	4608      	mov	r0, r1
 800d79a:	602b      	str	r3, [r5, #0]
 800d79c:	f7f6 fa8d 	bl	8003cba <_isatty>
 800d7a0:	1c43      	adds	r3, r0, #1
 800d7a2:	d102      	bne.n	800d7aa <_isatty_r+0x1a>
 800d7a4:	682b      	ldr	r3, [r5, #0]
 800d7a6:	b103      	cbz	r3, 800d7aa <_isatty_r+0x1a>
 800d7a8:	6023      	str	r3, [r4, #0]
 800d7aa:	bd38      	pop	{r3, r4, r5, pc}
 800d7ac:	2000f154 	.word	0x2000f154

0800d7b0 <abort>:
 800d7b0:	b508      	push	{r3, lr}
 800d7b2:	2006      	movs	r0, #6
 800d7b4:	f000 f99e 	bl	800daf4 <raise>
 800d7b8:	2001      	movs	r0, #1
 800d7ba:	f7f6 fa1f 	bl	8003bfc <_exit>

0800d7be <_realloc_r>:
 800d7be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c2:	4680      	mov	r8, r0
 800d7c4:	4614      	mov	r4, r2
 800d7c6:	460e      	mov	r6, r1
 800d7c8:	b921      	cbnz	r1, 800d7d4 <_realloc_r+0x16>
 800d7ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ce:	4611      	mov	r1, r2
 800d7d0:	f7fe bf4c 	b.w	800c66c <_malloc_r>
 800d7d4:	b92a      	cbnz	r2, 800d7e2 <_realloc_r+0x24>
 800d7d6:	f7ff fb59 	bl	800ce8c <_free_r>
 800d7da:	4625      	mov	r5, r4
 800d7dc:	4628      	mov	r0, r5
 800d7de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d7e2:	f000 f9a3 	bl	800db2c <_malloc_usable_size_r>
 800d7e6:	4284      	cmp	r4, r0
 800d7e8:	4607      	mov	r7, r0
 800d7ea:	d802      	bhi.n	800d7f2 <_realloc_r+0x34>
 800d7ec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d7f0:	d812      	bhi.n	800d818 <_realloc_r+0x5a>
 800d7f2:	4621      	mov	r1, r4
 800d7f4:	4640      	mov	r0, r8
 800d7f6:	f7fe ff39 	bl	800c66c <_malloc_r>
 800d7fa:	4605      	mov	r5, r0
 800d7fc:	2800      	cmp	r0, #0
 800d7fe:	d0ed      	beq.n	800d7dc <_realloc_r+0x1e>
 800d800:	42bc      	cmp	r4, r7
 800d802:	4622      	mov	r2, r4
 800d804:	4631      	mov	r1, r6
 800d806:	bf28      	it	cs
 800d808:	463a      	movcs	r2, r7
 800d80a:	f7ff fb12 	bl	800ce32 <memcpy>
 800d80e:	4631      	mov	r1, r6
 800d810:	4640      	mov	r0, r8
 800d812:	f7ff fb3b 	bl	800ce8c <_free_r>
 800d816:	e7e1      	b.n	800d7dc <_realloc_r+0x1e>
 800d818:	4635      	mov	r5, r6
 800d81a:	e7df      	b.n	800d7dc <_realloc_r+0x1e>

0800d81c <__sfputc_r>:
 800d81c:	6893      	ldr	r3, [r2, #8]
 800d81e:	3b01      	subs	r3, #1
 800d820:	2b00      	cmp	r3, #0
 800d822:	b410      	push	{r4}
 800d824:	6093      	str	r3, [r2, #8]
 800d826:	da08      	bge.n	800d83a <__sfputc_r+0x1e>
 800d828:	6994      	ldr	r4, [r2, #24]
 800d82a:	42a3      	cmp	r3, r4
 800d82c:	db01      	blt.n	800d832 <__sfputc_r+0x16>
 800d82e:	290a      	cmp	r1, #10
 800d830:	d103      	bne.n	800d83a <__sfputc_r+0x1e>
 800d832:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d836:	f7ff b990 	b.w	800cb5a <__swbuf_r>
 800d83a:	6813      	ldr	r3, [r2, #0]
 800d83c:	1c58      	adds	r0, r3, #1
 800d83e:	6010      	str	r0, [r2, #0]
 800d840:	7019      	strb	r1, [r3, #0]
 800d842:	4608      	mov	r0, r1
 800d844:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d848:	4770      	bx	lr

0800d84a <__sfputs_r>:
 800d84a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d84c:	4606      	mov	r6, r0
 800d84e:	460f      	mov	r7, r1
 800d850:	4614      	mov	r4, r2
 800d852:	18d5      	adds	r5, r2, r3
 800d854:	42ac      	cmp	r4, r5
 800d856:	d101      	bne.n	800d85c <__sfputs_r+0x12>
 800d858:	2000      	movs	r0, #0
 800d85a:	e007      	b.n	800d86c <__sfputs_r+0x22>
 800d85c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d860:	463a      	mov	r2, r7
 800d862:	4630      	mov	r0, r6
 800d864:	f7ff ffda 	bl	800d81c <__sfputc_r>
 800d868:	1c43      	adds	r3, r0, #1
 800d86a:	d1f3      	bne.n	800d854 <__sfputs_r+0xa>
 800d86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d870 <_vfiprintf_r>:
 800d870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d874:	460d      	mov	r5, r1
 800d876:	b09d      	sub	sp, #116	; 0x74
 800d878:	4614      	mov	r4, r2
 800d87a:	4698      	mov	r8, r3
 800d87c:	4606      	mov	r6, r0
 800d87e:	b118      	cbz	r0, 800d888 <_vfiprintf_r+0x18>
 800d880:	6a03      	ldr	r3, [r0, #32]
 800d882:	b90b      	cbnz	r3, 800d888 <_vfiprintf_r+0x18>
 800d884:	f7ff f876 	bl	800c974 <__sinit>
 800d888:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d88a:	07d9      	lsls	r1, r3, #31
 800d88c:	d405      	bmi.n	800d89a <_vfiprintf_r+0x2a>
 800d88e:	89ab      	ldrh	r3, [r5, #12]
 800d890:	059a      	lsls	r2, r3, #22
 800d892:	d402      	bmi.n	800d89a <_vfiprintf_r+0x2a>
 800d894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d896:	f7ff fac2 	bl	800ce1e <__retarget_lock_acquire_recursive>
 800d89a:	89ab      	ldrh	r3, [r5, #12]
 800d89c:	071b      	lsls	r3, r3, #28
 800d89e:	d501      	bpl.n	800d8a4 <_vfiprintf_r+0x34>
 800d8a0:	692b      	ldr	r3, [r5, #16]
 800d8a2:	b99b      	cbnz	r3, 800d8cc <_vfiprintf_r+0x5c>
 800d8a4:	4629      	mov	r1, r5
 800d8a6:	4630      	mov	r0, r6
 800d8a8:	f7ff f994 	bl	800cbd4 <__swsetup_r>
 800d8ac:	b170      	cbz	r0, 800d8cc <_vfiprintf_r+0x5c>
 800d8ae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8b0:	07dc      	lsls	r4, r3, #31
 800d8b2:	d504      	bpl.n	800d8be <_vfiprintf_r+0x4e>
 800d8b4:	f04f 30ff 	mov.w	r0, #4294967295
 800d8b8:	b01d      	add	sp, #116	; 0x74
 800d8ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8be:	89ab      	ldrh	r3, [r5, #12]
 800d8c0:	0598      	lsls	r0, r3, #22
 800d8c2:	d4f7      	bmi.n	800d8b4 <_vfiprintf_r+0x44>
 800d8c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8c6:	f7ff faab 	bl	800ce20 <__retarget_lock_release_recursive>
 800d8ca:	e7f3      	b.n	800d8b4 <_vfiprintf_r+0x44>
 800d8cc:	2300      	movs	r3, #0
 800d8ce:	9309      	str	r3, [sp, #36]	; 0x24
 800d8d0:	2320      	movs	r3, #32
 800d8d2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d8d6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8da:	2330      	movs	r3, #48	; 0x30
 800d8dc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da90 <_vfiprintf_r+0x220>
 800d8e0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8e4:	f04f 0901 	mov.w	r9, #1
 800d8e8:	4623      	mov	r3, r4
 800d8ea:	469a      	mov	sl, r3
 800d8ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8f0:	b10a      	cbz	r2, 800d8f6 <_vfiprintf_r+0x86>
 800d8f2:	2a25      	cmp	r2, #37	; 0x25
 800d8f4:	d1f9      	bne.n	800d8ea <_vfiprintf_r+0x7a>
 800d8f6:	ebba 0b04 	subs.w	fp, sl, r4
 800d8fa:	d00b      	beq.n	800d914 <_vfiprintf_r+0xa4>
 800d8fc:	465b      	mov	r3, fp
 800d8fe:	4622      	mov	r2, r4
 800d900:	4629      	mov	r1, r5
 800d902:	4630      	mov	r0, r6
 800d904:	f7ff ffa1 	bl	800d84a <__sfputs_r>
 800d908:	3001      	adds	r0, #1
 800d90a:	f000 80a9 	beq.w	800da60 <_vfiprintf_r+0x1f0>
 800d90e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d910:	445a      	add	r2, fp
 800d912:	9209      	str	r2, [sp, #36]	; 0x24
 800d914:	f89a 3000 	ldrb.w	r3, [sl]
 800d918:	2b00      	cmp	r3, #0
 800d91a:	f000 80a1 	beq.w	800da60 <_vfiprintf_r+0x1f0>
 800d91e:	2300      	movs	r3, #0
 800d920:	f04f 32ff 	mov.w	r2, #4294967295
 800d924:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d928:	f10a 0a01 	add.w	sl, sl, #1
 800d92c:	9304      	str	r3, [sp, #16]
 800d92e:	9307      	str	r3, [sp, #28]
 800d930:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d934:	931a      	str	r3, [sp, #104]	; 0x68
 800d936:	4654      	mov	r4, sl
 800d938:	2205      	movs	r2, #5
 800d93a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d93e:	4854      	ldr	r0, [pc, #336]	; (800da90 <_vfiprintf_r+0x220>)
 800d940:	f7f2 fc66 	bl	8000210 <memchr>
 800d944:	9a04      	ldr	r2, [sp, #16]
 800d946:	b9d8      	cbnz	r0, 800d980 <_vfiprintf_r+0x110>
 800d948:	06d1      	lsls	r1, r2, #27
 800d94a:	bf44      	itt	mi
 800d94c:	2320      	movmi	r3, #32
 800d94e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d952:	0713      	lsls	r3, r2, #28
 800d954:	bf44      	itt	mi
 800d956:	232b      	movmi	r3, #43	; 0x2b
 800d958:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d95c:	f89a 3000 	ldrb.w	r3, [sl]
 800d960:	2b2a      	cmp	r3, #42	; 0x2a
 800d962:	d015      	beq.n	800d990 <_vfiprintf_r+0x120>
 800d964:	9a07      	ldr	r2, [sp, #28]
 800d966:	4654      	mov	r4, sl
 800d968:	2000      	movs	r0, #0
 800d96a:	f04f 0c0a 	mov.w	ip, #10
 800d96e:	4621      	mov	r1, r4
 800d970:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d974:	3b30      	subs	r3, #48	; 0x30
 800d976:	2b09      	cmp	r3, #9
 800d978:	d94d      	bls.n	800da16 <_vfiprintf_r+0x1a6>
 800d97a:	b1b0      	cbz	r0, 800d9aa <_vfiprintf_r+0x13a>
 800d97c:	9207      	str	r2, [sp, #28]
 800d97e:	e014      	b.n	800d9aa <_vfiprintf_r+0x13a>
 800d980:	eba0 0308 	sub.w	r3, r0, r8
 800d984:	fa09 f303 	lsl.w	r3, r9, r3
 800d988:	4313      	orrs	r3, r2
 800d98a:	9304      	str	r3, [sp, #16]
 800d98c:	46a2      	mov	sl, r4
 800d98e:	e7d2      	b.n	800d936 <_vfiprintf_r+0xc6>
 800d990:	9b03      	ldr	r3, [sp, #12]
 800d992:	1d19      	adds	r1, r3, #4
 800d994:	681b      	ldr	r3, [r3, #0]
 800d996:	9103      	str	r1, [sp, #12]
 800d998:	2b00      	cmp	r3, #0
 800d99a:	bfbb      	ittet	lt
 800d99c:	425b      	neglt	r3, r3
 800d99e:	f042 0202 	orrlt.w	r2, r2, #2
 800d9a2:	9307      	strge	r3, [sp, #28]
 800d9a4:	9307      	strlt	r3, [sp, #28]
 800d9a6:	bfb8      	it	lt
 800d9a8:	9204      	strlt	r2, [sp, #16]
 800d9aa:	7823      	ldrb	r3, [r4, #0]
 800d9ac:	2b2e      	cmp	r3, #46	; 0x2e
 800d9ae:	d10c      	bne.n	800d9ca <_vfiprintf_r+0x15a>
 800d9b0:	7863      	ldrb	r3, [r4, #1]
 800d9b2:	2b2a      	cmp	r3, #42	; 0x2a
 800d9b4:	d134      	bne.n	800da20 <_vfiprintf_r+0x1b0>
 800d9b6:	9b03      	ldr	r3, [sp, #12]
 800d9b8:	1d1a      	adds	r2, r3, #4
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	9203      	str	r2, [sp, #12]
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	bfb8      	it	lt
 800d9c2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9c6:	3402      	adds	r4, #2
 800d9c8:	9305      	str	r3, [sp, #20]
 800d9ca:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800daa0 <_vfiprintf_r+0x230>
 800d9ce:	7821      	ldrb	r1, [r4, #0]
 800d9d0:	2203      	movs	r2, #3
 800d9d2:	4650      	mov	r0, sl
 800d9d4:	f7f2 fc1c 	bl	8000210 <memchr>
 800d9d8:	b138      	cbz	r0, 800d9ea <_vfiprintf_r+0x17a>
 800d9da:	9b04      	ldr	r3, [sp, #16]
 800d9dc:	eba0 000a 	sub.w	r0, r0, sl
 800d9e0:	2240      	movs	r2, #64	; 0x40
 800d9e2:	4082      	lsls	r2, r0
 800d9e4:	4313      	orrs	r3, r2
 800d9e6:	3401      	adds	r4, #1
 800d9e8:	9304      	str	r3, [sp, #16]
 800d9ea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9ee:	4829      	ldr	r0, [pc, #164]	; (800da94 <_vfiprintf_r+0x224>)
 800d9f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9f4:	2206      	movs	r2, #6
 800d9f6:	f7f2 fc0b 	bl	8000210 <memchr>
 800d9fa:	2800      	cmp	r0, #0
 800d9fc:	d03f      	beq.n	800da7e <_vfiprintf_r+0x20e>
 800d9fe:	4b26      	ldr	r3, [pc, #152]	; (800da98 <_vfiprintf_r+0x228>)
 800da00:	bb1b      	cbnz	r3, 800da4a <_vfiprintf_r+0x1da>
 800da02:	9b03      	ldr	r3, [sp, #12]
 800da04:	3307      	adds	r3, #7
 800da06:	f023 0307 	bic.w	r3, r3, #7
 800da0a:	3308      	adds	r3, #8
 800da0c:	9303      	str	r3, [sp, #12]
 800da0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da10:	443b      	add	r3, r7
 800da12:	9309      	str	r3, [sp, #36]	; 0x24
 800da14:	e768      	b.n	800d8e8 <_vfiprintf_r+0x78>
 800da16:	fb0c 3202 	mla	r2, ip, r2, r3
 800da1a:	460c      	mov	r4, r1
 800da1c:	2001      	movs	r0, #1
 800da1e:	e7a6      	b.n	800d96e <_vfiprintf_r+0xfe>
 800da20:	2300      	movs	r3, #0
 800da22:	3401      	adds	r4, #1
 800da24:	9305      	str	r3, [sp, #20]
 800da26:	4619      	mov	r1, r3
 800da28:	f04f 0c0a 	mov.w	ip, #10
 800da2c:	4620      	mov	r0, r4
 800da2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da32:	3a30      	subs	r2, #48	; 0x30
 800da34:	2a09      	cmp	r2, #9
 800da36:	d903      	bls.n	800da40 <_vfiprintf_r+0x1d0>
 800da38:	2b00      	cmp	r3, #0
 800da3a:	d0c6      	beq.n	800d9ca <_vfiprintf_r+0x15a>
 800da3c:	9105      	str	r1, [sp, #20]
 800da3e:	e7c4      	b.n	800d9ca <_vfiprintf_r+0x15a>
 800da40:	fb0c 2101 	mla	r1, ip, r1, r2
 800da44:	4604      	mov	r4, r0
 800da46:	2301      	movs	r3, #1
 800da48:	e7f0      	b.n	800da2c <_vfiprintf_r+0x1bc>
 800da4a:	ab03      	add	r3, sp, #12
 800da4c:	9300      	str	r3, [sp, #0]
 800da4e:	462a      	mov	r2, r5
 800da50:	4b12      	ldr	r3, [pc, #72]	; (800da9c <_vfiprintf_r+0x22c>)
 800da52:	a904      	add	r1, sp, #16
 800da54:	4630      	mov	r0, r6
 800da56:	f3af 8000 	nop.w
 800da5a:	4607      	mov	r7, r0
 800da5c:	1c78      	adds	r0, r7, #1
 800da5e:	d1d6      	bne.n	800da0e <_vfiprintf_r+0x19e>
 800da60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da62:	07d9      	lsls	r1, r3, #31
 800da64:	d405      	bmi.n	800da72 <_vfiprintf_r+0x202>
 800da66:	89ab      	ldrh	r3, [r5, #12]
 800da68:	059a      	lsls	r2, r3, #22
 800da6a:	d402      	bmi.n	800da72 <_vfiprintf_r+0x202>
 800da6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da6e:	f7ff f9d7 	bl	800ce20 <__retarget_lock_release_recursive>
 800da72:	89ab      	ldrh	r3, [r5, #12]
 800da74:	065b      	lsls	r3, r3, #25
 800da76:	f53f af1d 	bmi.w	800d8b4 <_vfiprintf_r+0x44>
 800da7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da7c:	e71c      	b.n	800d8b8 <_vfiprintf_r+0x48>
 800da7e:	ab03      	add	r3, sp, #12
 800da80:	9300      	str	r3, [sp, #0]
 800da82:	462a      	mov	r2, r5
 800da84:	4b05      	ldr	r3, [pc, #20]	; (800da9c <_vfiprintf_r+0x22c>)
 800da86:	a904      	add	r1, sp, #16
 800da88:	4630      	mov	r0, r6
 800da8a:	f7ff fc11 	bl	800d2b0 <_printf_i>
 800da8e:	e7e4      	b.n	800da5a <_vfiprintf_r+0x1ea>
 800da90:	0800e63c 	.word	0x0800e63c
 800da94:	0800e646 	.word	0x0800e646
 800da98:	00000000 	.word	0x00000000
 800da9c:	0800d84b 	.word	0x0800d84b
 800daa0:	0800e642 	.word	0x0800e642

0800daa4 <_raise_r>:
 800daa4:	291f      	cmp	r1, #31
 800daa6:	b538      	push	{r3, r4, r5, lr}
 800daa8:	4604      	mov	r4, r0
 800daaa:	460d      	mov	r5, r1
 800daac:	d904      	bls.n	800dab8 <_raise_r+0x14>
 800daae:	2316      	movs	r3, #22
 800dab0:	6003      	str	r3, [r0, #0]
 800dab2:	f04f 30ff 	mov.w	r0, #4294967295
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800daba:	b112      	cbz	r2, 800dac2 <_raise_r+0x1e>
 800dabc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dac0:	b94b      	cbnz	r3, 800dad6 <_raise_r+0x32>
 800dac2:	4620      	mov	r0, r4
 800dac4:	f000 f830 	bl	800db28 <_getpid_r>
 800dac8:	462a      	mov	r2, r5
 800daca:	4601      	mov	r1, r0
 800dacc:	4620      	mov	r0, r4
 800dace:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dad2:	f000 b817 	b.w	800db04 <_kill_r>
 800dad6:	2b01      	cmp	r3, #1
 800dad8:	d00a      	beq.n	800daf0 <_raise_r+0x4c>
 800dada:	1c59      	adds	r1, r3, #1
 800dadc:	d103      	bne.n	800dae6 <_raise_r+0x42>
 800dade:	2316      	movs	r3, #22
 800dae0:	6003      	str	r3, [r0, #0]
 800dae2:	2001      	movs	r0, #1
 800dae4:	e7e7      	b.n	800dab6 <_raise_r+0x12>
 800dae6:	2400      	movs	r4, #0
 800dae8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800daec:	4628      	mov	r0, r5
 800daee:	4798      	blx	r3
 800daf0:	2000      	movs	r0, #0
 800daf2:	e7e0      	b.n	800dab6 <_raise_r+0x12>

0800daf4 <raise>:
 800daf4:	4b02      	ldr	r3, [pc, #8]	; (800db00 <raise+0xc>)
 800daf6:	4601      	mov	r1, r0
 800daf8:	6818      	ldr	r0, [r3, #0]
 800dafa:	f7ff bfd3 	b.w	800daa4 <_raise_r>
 800dafe:	bf00      	nop
 800db00:	200001b8 	.word	0x200001b8

0800db04 <_kill_r>:
 800db04:	b538      	push	{r3, r4, r5, lr}
 800db06:	4d07      	ldr	r5, [pc, #28]	; (800db24 <_kill_r+0x20>)
 800db08:	2300      	movs	r3, #0
 800db0a:	4604      	mov	r4, r0
 800db0c:	4608      	mov	r0, r1
 800db0e:	4611      	mov	r1, r2
 800db10:	602b      	str	r3, [r5, #0]
 800db12:	f7f6 f863 	bl	8003bdc <_kill>
 800db16:	1c43      	adds	r3, r0, #1
 800db18:	d102      	bne.n	800db20 <_kill_r+0x1c>
 800db1a:	682b      	ldr	r3, [r5, #0]
 800db1c:	b103      	cbz	r3, 800db20 <_kill_r+0x1c>
 800db1e:	6023      	str	r3, [r4, #0]
 800db20:	bd38      	pop	{r3, r4, r5, pc}
 800db22:	bf00      	nop
 800db24:	2000f154 	.word	0x2000f154

0800db28 <_getpid_r>:
 800db28:	f7f6 b850 	b.w	8003bcc <_getpid>

0800db2c <_malloc_usable_size_r>:
 800db2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800db30:	1f18      	subs	r0, r3, #4
 800db32:	2b00      	cmp	r3, #0
 800db34:	bfbc      	itt	lt
 800db36:	580b      	ldrlt	r3, [r1, r0]
 800db38:	18c0      	addlt	r0, r0, r3
 800db3a:	4770      	bx	lr

0800db3c <_init>:
 800db3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db3e:	bf00      	nop
 800db40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db42:	bc08      	pop	{r3}
 800db44:	469e      	mov	lr, r3
 800db46:	4770      	bx	lr

0800db48 <_fini>:
 800db48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800db4a:	bf00      	nop
 800db4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800db4e:	bc08      	pop	{r3}
 800db50:	469e      	mov	lr, r3
 800db52:	4770      	bx	lr
