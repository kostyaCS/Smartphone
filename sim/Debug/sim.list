
sim.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008290  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000005c  08008430  08008430  00018430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800848c  0800848c  00020088  2**0
                  CONTENTS
  4 .ARM          00000008  0800848c  0800848c  0001848c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008494  08008494  00020088  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008494  08008494  00018494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008498  08008498  00018498  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  0800849c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000088  08008524  00020088  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  08008524  00020a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200b8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000183fc  00000000  00000000  000200fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003d97  00000000  00000000  000384f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000013e8  00000000  00000000  0003c290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f51  00000000  00000000  0003d678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a552  00000000  00000000  0003e5c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019ffc  00000000  00000000  00058b1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00092302  00000000  00000000  00072b17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005b04  00000000  00000000  00104e1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000057  00000000  00000000  0010a920  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000088 	.word	0x20000088
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008418 	.word	0x08008418

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000008c 	.word	0x2000008c
 80001dc:	08008418 	.word	0x08008418

080001e0 <strcmp>:
 80001e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001e8:	2a01      	cmp	r2, #1
 80001ea:	bf28      	it	cs
 80001ec:	429a      	cmpcs	r2, r3
 80001ee:	d0f7      	beq.n	80001e0 <strcmp>
 80001f0:	1ad0      	subs	r0, r2, r3
 80001f2:	4770      	bx	lr

080001f4 <strlen>:
 80001f4:	4603      	mov	r3, r0
 80001f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001fa:	2a00      	cmp	r2, #0
 80001fc:	d1fb      	bne.n	80001f6 <strlen+0x2>
 80001fe:	1a18      	subs	r0, r3, r0
 8000200:	3801      	subs	r0, #1
 8000202:	4770      	bx	lr
	...

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b2:	f000 fdd5 	bl	8001160 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005b6:	f000 f87d 	bl	80006b4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80005ba:	f000 f8e3 	bl	8000784 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f9ed 	bl	800099c <MX_GPIO_Init>
  MX_I2C1_Init();
 80005c2:	f000 f8ff 	bl	80007c4 <MX_I2C1_Init>
  MX_I2S2_Init();
 80005c6:	f000 f92b 	bl	8000820 <MX_I2S2_Init>
  MX_I2S3_Init();
 80005ca:	f000 f957 	bl	800087c <MX_I2S3_Init>
  MX_SPI1_Init();
 80005ce:	f000 f985 	bl	80008dc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80005d2:	f006 fd29 	bl	8007028 <MX_USB_HOST_Init>
  MX_USART1_UART_Init();
 80005d6:	f000 f9b7 	bl	8000948 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  char Test[] = "AT";
 80005da:	4a31      	ldr	r2, [pc, #196]	; (80006a0 <main+0xf4>)
 80005dc:	f107 0308 	add.w	r3, r7, #8
 80005e0:	6812      	ldr	r2, [r2, #0]
 80005e2:	4611      	mov	r1, r2
 80005e4:	8019      	strh	r1, [r3, #0]
 80005e6:	3302      	adds	r3, #2
 80005e8:	0c12      	lsrs	r2, r2, #16
 80005ea:	701a      	strb	r2, [r3, #0]
  char Reply[] = "";
 80005ec:	2300      	movs	r3, #0
 80005ee:	713b      	strb	r3, [r7, #4]
  HAL_UART_Transmit(&huart1,(uint8_t *)Test,strlen(Test),40);
 80005f0:	f107 0308 	add.w	r3, r7, #8
 80005f4:	4618      	mov	r0, r3
 80005f6:	f7ff fdfd 	bl	80001f4 <strlen>
 80005fa:	4603      	mov	r3, r0
 80005fc:	b29a      	uxth	r2, r3
 80005fe:	f107 0108 	add.w	r1, r7, #8
 8000602:	2328      	movs	r3, #40	; 0x28
 8000604:	4827      	ldr	r0, [pc, #156]	; (80006a4 <main+0xf8>)
 8000606:	f004 f981 	bl	800490c <HAL_UART_Transmit>
  HAL_UART_Transmit(&huart1,(uint8_t *)Reply,5,40);
 800060a:	1d39      	adds	r1, r7, #4
 800060c:	2328      	movs	r3, #40	; 0x28
 800060e:	2205      	movs	r2, #5
 8000610:	4824      	ldr	r0, [pc, #144]	; (80006a4 <main+0xf8>)
 8000612:	f004 f97b 	bl	800490c <HAL_UART_Transmit>
  for (int i = 0; i < strlen(Reply); ++i){
 8000616:	2300      	movs	r3, #0
 8000618:	60fb      	str	r3, [r7, #12]
 800061a:	e00a      	b.n	8000632 <main+0x86>
	  printf("%c ", Reply[i]);
 800061c:	1d3a      	adds	r2, r7, #4
 800061e:	68fb      	ldr	r3, [r7, #12]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	4619      	mov	r1, r3
 8000626:	4820      	ldr	r0, [pc, #128]	; (80006a8 <main+0xfc>)
 8000628:	f007 f92c 	bl	8007884 <iprintf>
  for (int i = 0; i < strlen(Reply); ++i){
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	3301      	adds	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
 8000632:	2200      	movs	r2, #0
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	429a      	cmp	r2, r3
 8000638:	d8f0      	bhi.n	800061c <main+0x70>
  }

  if (strcmp(Reply,"OK") == 0){
 800063a:	1d3b      	adds	r3, r7, #4
 800063c:	491b      	ldr	r1, [pc, #108]	; (80006ac <main+0x100>)
 800063e:	4618      	mov	r0, r3
 8000640:	f7ff fdce 	bl	80001e0 <strcmp>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d114      	bne.n	8000674 <main+0xc8>
	  while (1){
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 800064a:	2201      	movs	r2, #1
 800064c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000650:	4817      	ldr	r0, [pc, #92]	; (80006b0 <main+0x104>)
 8000652:	f001 f8b1 	bl	80017b8 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 8000656:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800065a:	f000 fdf3 	bl	8001244 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000664:	4812      	ldr	r0, [pc, #72]	; (80006b0 <main+0x104>)
 8000666:	f001 f8a7 	bl	80017b8 <HAL_GPIO_WritePin>
		  HAL_Delay(1000);
 800066a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800066e:	f000 fde9 	bl	8001244 <HAL_Delay>
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 8000672:	e7ea      	b.n	800064a <main+0x9e>
	  }
  }
  else{
	  while (1){
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);    // red
 8000674:	2201      	movs	r2, #1
 8000676:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800067a:	480d      	ldr	r0, [pc, #52]	; (80006b0 <main+0x104>)
 800067c:	f001 f89c 	bl	80017b8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000680:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000684:	f000 fdde 	bl	8001244 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_RESET);
 8000688:	2200      	movs	r2, #0
 800068a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800068e:	4808      	ldr	r0, [pc, #32]	; (80006b0 <main+0x104>)
 8000690:	f001 f892 	bl	80017b8 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000694:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000698:	f000 fdd4 	bl	8001244 <HAL_Delay>
		HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);    // red
 800069c:	e7ea      	b.n	8000674 <main+0xc8>
 800069e:	bf00      	nop
 80006a0:	08008438 	.word	0x08008438
 80006a4:	200001e0 	.word	0x200001e0
 80006a8:	08008430 	.word	0x08008430
 80006ac:	08008434 	.word	0x08008434
 80006b0:	40020c00 	.word	0x40020c00

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	; 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	; 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f007 f933 	bl	800792e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b27      	ldr	r3, [pc, #156]	; (800077c <SystemClock_Config+0xc8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006e0:	4a26      	ldr	r2, [pc, #152]	; (800077c <SystemClock_Config+0xc8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	; 0x40
 80006e8:	4b24      	ldr	r3, [pc, #144]	; (800077c <SystemClock_Config+0xc8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b21      	ldr	r3, [pc, #132]	; (8000780 <SystemClock_Config+0xcc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a20      	ldr	r2, [pc, #128]	; (8000780 <SystemClock_Config+0xcc>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1e      	ldr	r3, [pc, #120]	; (8000780 <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000710:	2301      	movs	r3, #1
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000714:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000718:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071a:	2302      	movs	r3, #2
 800071c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800071e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000722:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000724:	2304      	movs	r3, #4
 8000726:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000728:	23c0      	movs	r3, #192	; 0xc0
 800072a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800072c:	2304      	movs	r3, #4
 800072e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f003 fa29 	bl	8003b90 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 fa04 	bl	8000b50 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2103      	movs	r1, #3
 8000764:	4618      	mov	r0, r3
 8000766:	f003 fc8b 	bl	8004080 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000770:	f000 f9ee 	bl	8000b50 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	; 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b086      	sub	sp, #24
 8000788:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800078a:	463b      	mov	r3, r7
 800078c:	2200      	movs	r2, #0
 800078e:	601a      	str	r2, [r3, #0]
 8000790:	605a      	str	r2, [r3, #4]
 8000792:	609a      	str	r2, [r3, #8]
 8000794:	60da      	str	r2, [r3, #12]
 8000796:	611a      	str	r2, [r3, #16]
 8000798:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800079a:	2301      	movs	r3, #1
 800079c:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 800079e:	23c8      	movs	r3, #200	; 0xc8
 80007a0:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 80007a2:	2305      	movs	r3, #5
 80007a4:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80007a6:	2302      	movs	r3, #2
 80007a8:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007aa:	463b      	mov	r3, r7
 80007ac:	4618      	mov	r0, r3
 80007ae:	f003 fe87 	bl	80044c0 <HAL_RCCEx_PeriphCLKConfig>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 80007b8:	f000 f9ca 	bl	8000b50 <Error_Handler>
  }
}
 80007bc:	bf00      	nop
 80007be:	3718      	adds	r7, #24
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_I2C1_Init+0x50>)
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <MX_I2C1_Init+0x54>)
 80007cc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_I2C1_Init+0x50>)
 80007d0:	4a12      	ldr	r2, [pc, #72]	; (800081c <MX_I2C1_Init+0x58>)
 80007d2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80007d4:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_I2C1_Init+0x50>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80007da:	4b0e      	ldr	r3, [pc, #56]	; (8000814 <MX_I2C1_Init+0x50>)
 80007dc:	2200      	movs	r2, #0
 80007de:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80007e0:	4b0c      	ldr	r3, [pc, #48]	; (8000814 <MX_I2C1_Init+0x50>)
 80007e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80007e6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <MX_I2C1_Init+0x50>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80007ee:	4b09      	ldr	r3, [pc, #36]	; (8000814 <MX_I2C1_Init+0x50>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007f4:	4b07      	ldr	r3, [pc, #28]	; (8000814 <MX_I2C1_Init+0x50>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007fa:	4b06      	ldr	r3, [pc, #24]	; (8000814 <MX_I2C1_Init+0x50>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000800:	4804      	ldr	r0, [pc, #16]	; (8000814 <MX_I2C1_Init+0x50>)
 8000802:	f002 fbe1 	bl	8002fc8 <HAL_I2C_Init>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800080c:	f000 f9a0 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	200000a4 	.word	0x200000a4
 8000818:	40005400 	.word	0x40005400
 800081c:	000186a0 	.word	0x000186a0

08000820 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000824:	4b12      	ldr	r3, [pc, #72]	; (8000870 <MX_I2S2_Init+0x50>)
 8000826:	4a13      	ldr	r2, [pc, #76]	; (8000874 <MX_I2S2_Init+0x54>)
 8000828:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800082a:	4b11      	ldr	r3, [pc, #68]	; (8000870 <MX_I2S2_Init+0x50>)
 800082c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000830:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000832:	4b0f      	ldr	r3, [pc, #60]	; (8000870 <MX_I2S2_Init+0x50>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000838:	4b0d      	ldr	r3, [pc, #52]	; (8000870 <MX_I2S2_Init+0x50>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800083e:	4b0c      	ldr	r3, [pc, #48]	; (8000870 <MX_I2S2_Init+0x50>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000844:	4b0a      	ldr	r3, [pc, #40]	; (8000870 <MX_I2S2_Init+0x50>)
 8000846:	4a0c      	ldr	r2, [pc, #48]	; (8000878 <MX_I2S2_Init+0x58>)
 8000848:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800084a:	4b09      	ldr	r3, [pc, #36]	; (8000870 <MX_I2S2_Init+0x50>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000850:	4b07      	ldr	r3, [pc, #28]	; (8000870 <MX_I2S2_Init+0x50>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000856:	4b06      	ldr	r3, [pc, #24]	; (8000870 <MX_I2S2_Init+0x50>)
 8000858:	2201      	movs	r2, #1
 800085a:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800085c:	4804      	ldr	r0, [pc, #16]	; (8000870 <MX_I2S2_Init+0x50>)
 800085e:	f002 fcf7 	bl	8003250 <HAL_I2S_Init>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000868:	f000 f972 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800086c:	bf00      	nop
 800086e:	bd80      	pop	{r7, pc}
 8000870:	200000f8 	.word	0x200000f8
 8000874:	40003800 	.word	0x40003800
 8000878:	00017700 	.word	0x00017700

0800087c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000880:	4b13      	ldr	r3, [pc, #76]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000882:	4a14      	ldr	r2, [pc, #80]	; (80008d4 <MX_I2S3_Init+0x58>)
 8000884:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000886:	4b12      	ldr	r3, [pc, #72]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000888:	f44f 7200 	mov.w	r2, #512	; 0x200
 800088c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000890:	2200      	movs	r2, #0
 8000892:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000894:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <MX_I2S3_Init+0x54>)
 8000896:	2200      	movs	r2, #0
 8000898:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <MX_I2S3_Init+0x54>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008a4:	4a0c      	ldr	r2, [pc, #48]	; (80008d8 <MX_I2S3_Init+0x5c>)
 80008a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008a8:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008ae:	4b08      	ldr	r3, [pc, #32]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008b4:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ba:	4805      	ldr	r0, [pc, #20]	; (80008d0 <MX_I2S3_Init+0x54>)
 80008bc:	f002 fcc8 	bl	8003250 <HAL_I2S_Init>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008c6:	f000 f943 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008ca:	bf00      	nop
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000140 	.word	0x20000140
 80008d4:	40003c00 	.word	0x40003c00
 80008d8:	00017700 	.word	0x00017700

080008dc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80008e0:	4b17      	ldr	r3, [pc, #92]	; (8000940 <MX_SPI1_Init+0x64>)
 80008e2:	4a18      	ldr	r2, [pc, #96]	; (8000944 <MX_SPI1_Init+0x68>)
 80008e4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80008e6:	4b16      	ldr	r3, [pc, #88]	; (8000940 <MX_SPI1_Init+0x64>)
 80008e8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80008ec:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <MX_SPI1_Init+0x64>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <MX_SPI1_Init+0x64>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <MX_SPI1_Init+0x64>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <MX_SPI1_Init+0x64>)
 8000902:	2200      	movs	r2, #0
 8000904:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000906:	4b0e      	ldr	r3, [pc, #56]	; (8000940 <MX_SPI1_Init+0x64>)
 8000908:	f44f 7200 	mov.w	r2, #512	; 0x200
 800090c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800090e:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <MX_SPI1_Init+0x64>)
 8000910:	2200      	movs	r2, #0
 8000912:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000914:	4b0a      	ldr	r3, [pc, #40]	; (8000940 <MX_SPI1_Init+0x64>)
 8000916:	2200      	movs	r2, #0
 8000918:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800091a:	4b09      	ldr	r3, [pc, #36]	; (8000940 <MX_SPI1_Init+0x64>)
 800091c:	2200      	movs	r2, #0
 800091e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000920:	4b07      	ldr	r3, [pc, #28]	; (8000940 <MX_SPI1_Init+0x64>)
 8000922:	2200      	movs	r2, #0
 8000924:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MX_SPI1_Init+0x64>)
 8000928:	220a      	movs	r2, #10
 800092a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800092c:	4804      	ldr	r0, [pc, #16]	; (8000940 <MX_SPI1_Init+0x64>)
 800092e:	f003 ff17 	bl	8004760 <HAL_SPI_Init>
 8000932:	4603      	mov	r3, r0
 8000934:	2b00      	cmp	r3, #0
 8000936:	d001      	beq.n	800093c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000938:	f000 f90a 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800093c:	bf00      	nop
 800093e:	bd80      	pop	{r7, pc}
 8000940:	20000188 	.word	0x20000188
 8000944:	40013000 	.word	0x40013000

08000948 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800094c:	4b11      	ldr	r3, [pc, #68]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800094e:	4a12      	ldr	r2, [pc, #72]	; (8000998 <MX_USART1_UART_Init+0x50>)
 8000950:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000952:	4b10      	ldr	r3, [pc, #64]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000954:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000958:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800095a:	4b0e      	ldr	r3, [pc, #56]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000960:	4b0c      	ldr	r3, [pc, #48]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000966:	4b0b      	ldr	r3, [pc, #44]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000968:	2200      	movs	r2, #0
 800096a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800096c:	4b09      	ldr	r3, [pc, #36]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800096e:	220c      	movs	r2, #12
 8000970:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000972:	4b08      	ldr	r3, [pc, #32]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000974:	2200      	movs	r2, #0
 8000976:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000978:	4b06      	ldr	r3, [pc, #24]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 800097a:	2200      	movs	r2, #0
 800097c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800097e:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_USART1_UART_Init+0x4c>)
 8000980:	f003 ff77 	bl	8004872 <HAL_UART_Init>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800098a:	f000 f8e1 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800098e:	bf00      	nop
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	200001e0 	.word	0x200001e0
 8000998:	40011000 	.word	0x40011000

0800099c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08c      	sub	sp, #48	; 0x30
 80009a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 031c 	add.w	r3, r7, #28
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
 80009b6:	4b61      	ldr	r3, [pc, #388]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a60      	ldr	r2, [pc, #384]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b5e      	ldr	r3, [pc, #376]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	61bb      	str	r3, [r7, #24]
 80009cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
 80009d2:	4b5a      	ldr	r3, [pc, #360]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a59      	ldr	r2, [pc, #356]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009d8:	f043 0304 	orr.w	r3, r3, #4
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b57      	ldr	r3, [pc, #348]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0304 	and.w	r3, r3, #4
 80009e6:	617b      	str	r3, [r7, #20]
 80009e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009ea:	2300      	movs	r3, #0
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	4b53      	ldr	r3, [pc, #332]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f2:	4a52      	ldr	r2, [pc, #328]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009f8:	6313      	str	r3, [r2, #48]	; 0x30
 80009fa:	4b50      	ldr	r3, [pc, #320]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a02:	613b      	str	r3, [r7, #16]
 8000a04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a06:	2300      	movs	r3, #0
 8000a08:	60fb      	str	r3, [r7, #12]
 8000a0a:	4b4c      	ldr	r3, [pc, #304]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0e:	4a4b      	ldr	r2, [pc, #300]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a10:	f043 0301 	orr.w	r3, r3, #1
 8000a14:	6313      	str	r3, [r2, #48]	; 0x30
 8000a16:	4b49      	ldr	r3, [pc, #292]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a1a:	f003 0301 	and.w	r3, r3, #1
 8000a1e:	60fb      	str	r3, [r7, #12]
 8000a20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a22:	2300      	movs	r3, #0
 8000a24:	60bb      	str	r3, [r7, #8]
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a2a:	4a44      	ldr	r2, [pc, #272]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a2c:	f043 0302 	orr.w	r3, r3, #2
 8000a30:	6313      	str	r3, [r2, #48]	; 0x30
 8000a32:	4b42      	ldr	r3, [pc, #264]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a36:	f003 0302 	and.w	r3, r3, #2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
 8000a42:	4b3e      	ldr	r3, [pc, #248]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a46:	4a3d      	ldr	r2, [pc, #244]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a48:	f043 0308 	orr.w	r3, r3, #8
 8000a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4e:	4b3b      	ldr	r3, [pc, #236]	; (8000b3c <MX_GPIO_Init+0x1a0>)
 8000a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a52:	f003 0308 	and.w	r3, r3, #8
 8000a56:	607b      	str	r3, [r7, #4]
 8000a58:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2108      	movs	r1, #8
 8000a5e:	4838      	ldr	r0, [pc, #224]	; (8000b40 <MX_GPIO_Init+0x1a4>)
 8000a60:	f000 feaa 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000a64:	2201      	movs	r2, #1
 8000a66:	2101      	movs	r1, #1
 8000a68:	4836      	ldr	r0, [pc, #216]	; (8000b44 <MX_GPIO_Init+0x1a8>)
 8000a6a:	f000 fea5 	bl	80017b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000a6e:	2200      	movs	r2, #0
 8000a70:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000a74:	4834      	ldr	r0, [pc, #208]	; (8000b48 <MX_GPIO_Init+0x1ac>)
 8000a76:	f000 fe9f 	bl	80017b8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : DATA_Ready_Pin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 031c 	add.w	r3, r7, #28
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	482c      	ldr	r0, [pc, #176]	; (8000b40 <MX_GPIO_Init+0x1a4>)
 8000a8e:	f000 fd0f 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000a92:	2308      	movs	r3, #8
 8000a94:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a96:	2301      	movs	r3, #1
 8000a98:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000aa2:	f107 031c 	add.w	r3, r7, #28
 8000aa6:	4619      	mov	r1, r3
 8000aa8:	4825      	ldr	r0, [pc, #148]	; (8000b40 <MX_GPIO_Init+0x1a4>)
 8000aaa:	f000 fd01 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : INT1_Pin INT2_Pin MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin|MEMS_INT2_Pin;
 8000aae:	2332      	movs	r3, #50	; 0x32
 8000ab0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ab2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ab6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000abc:	f107 031c 	add.w	r3, r7, #28
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	481f      	ldr	r0, [pc, #124]	; (8000b40 <MX_GPIO_Init+0x1a4>)
 8000ac4:	f000 fcf4 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000acc:	2301      	movs	r3, #1
 8000ace:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ad8:	f107 031c 	add.w	r3, r7, #28
 8000adc:	4619      	mov	r1, r3
 8000ade:	4819      	ldr	r0, [pc, #100]	; (8000b44 <MX_GPIO_Init+0x1a8>)
 8000ae0:	f000 fce6 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ae8:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000aec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 031c 	add.w	r3, r7, #28
 8000af6:	4619      	mov	r1, r3
 8000af8:	4814      	ldr	r0, [pc, #80]	; (8000b4c <MX_GPIO_Init+0x1b0>)
 8000afa:	f000 fcd9 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000afe:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000b02:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b04:	2301      	movs	r3, #1
 8000b06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b10:	f107 031c 	add.w	r3, r7, #28
 8000b14:	4619      	mov	r1, r3
 8000b16:	480c      	ldr	r0, [pc, #48]	; (8000b48 <MX_GPIO_Init+0x1ac>)
 8000b18:	f000 fcca 	bl	80014b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000b1c:	2320      	movs	r3, #32
 8000b1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b20:	2300      	movs	r3, #0
 8000b22:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b24:	2300      	movs	r3, #0
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000b28:	f107 031c 	add.w	r3, r7, #28
 8000b2c:	4619      	mov	r1, r3
 8000b2e:	4806      	ldr	r0, [pc, #24]	; (8000b48 <MX_GPIO_Init+0x1ac>)
 8000b30:	f000 fcbe 	bl	80014b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40023800 	.word	0x40023800
 8000b40:	40021000 	.word	0x40021000
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020c00 	.word	0x40020c00
 8000b4c:	40020000 	.word	0x40020000

08000b50 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b54:	b672      	cpsid	i
}
 8000b56:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b58:	e7fe      	b.n	8000b58 <Error_Handler+0x8>
	...

08000b5c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b62:	2300      	movs	r3, #0
 8000b64:	607b      	str	r3, [r7, #4]
 8000b66:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b0d      	ldr	r3, [pc, #52]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	607b      	str	r3, [r7, #4]
 8000b7c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	603b      	str	r3, [r7, #0]
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_MspInit+0x4c>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b96:	603b      	str	r3, [r7, #0]
 8000b98:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000b9a:	2007      	movs	r0, #7
 8000b9c:	f000 fc46 	bl	800142c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}
 8000ba8:	40023800 	.word	0x40023800

08000bac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b08a      	sub	sp, #40	; 0x28
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb4:	f107 0314 	add.w	r3, r7, #20
 8000bb8:	2200      	movs	r2, #0
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	605a      	str	r2, [r3, #4]
 8000bbe:	609a      	str	r2, [r3, #8]
 8000bc0:	60da      	str	r2, [r3, #12]
 8000bc2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a19      	ldr	r2, [pc, #100]	; (8000c30 <HAL_I2C_MspInit+0x84>)
 8000bca:	4293      	cmp	r3, r2
 8000bcc:	d12c      	bne.n	8000c28 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bce:	2300      	movs	r3, #0
 8000bd0:	613b      	str	r3, [r7, #16]
 8000bd2:	4b18      	ldr	r3, [pc, #96]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	4a17      	ldr	r2, [pc, #92]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000bd8:	f043 0302 	orr.w	r3, r3, #2
 8000bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bde:	4b15      	ldr	r3, [pc, #84]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be2:	f003 0302 	and.w	r3, r3, #2
 8000be6:	613b      	str	r3, [r7, #16]
 8000be8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000bea:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bf0:	2312      	movs	r3, #18
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf8:	2300      	movs	r3, #0
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000bfc:	2304      	movs	r3, #4
 8000bfe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	480c      	ldr	r0, [pc, #48]	; (8000c38 <HAL_I2C_MspInit+0x8c>)
 8000c08:	f000 fc52 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	60fb      	str	r3, [r7, #12]
 8000c10:	4b08      	ldr	r3, [pc, #32]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c14:	4a07      	ldr	r2, [pc, #28]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c16:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c1a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1c:	4b05      	ldr	r3, [pc, #20]	; (8000c34 <HAL_I2C_MspInit+0x88>)
 8000c1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000c28:	bf00      	nop
 8000c2a:	3728      	adds	r7, #40	; 0x28
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40005400 	.word	0x40005400
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40020400 	.word	0x40020400

08000c3c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b08e      	sub	sp, #56	; 0x38
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c48:	2200      	movs	r2, #0
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	605a      	str	r2, [r3, #4]
 8000c4e:	609a      	str	r2, [r3, #8]
 8000c50:	60da      	str	r2, [r3, #12]
 8000c52:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	4a59      	ldr	r2, [pc, #356]	; (8000dc0 <HAL_I2S_MspInit+0x184>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d15b      	bne.n	8000d16 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	623b      	str	r3, [r7, #32]
 8000c62:	4b58      	ldr	r3, [pc, #352]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c66:	4a57      	ldr	r2, [pc, #348]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c6e:	4b55      	ldr	r3, [pc, #340]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c76:	623b      	str	r3, [r7, #32]
 8000c78:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	61fb      	str	r3, [r7, #28]
 8000c7e:	4b51      	ldr	r3, [pc, #324]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a50      	ldr	r2, [pc, #320]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000c84:	f043 0304 	orr.w	r3, r3, #4
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b4e      	ldr	r3, [pc, #312]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0304 	and.w	r3, r3, #4
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	61bb      	str	r3, [r7, #24]
 8000c9a:	4b4a      	ldr	r3, [pc, #296]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a49      	ldr	r2, [pc, #292]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b47      	ldr	r3, [pc, #284]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	61bb      	str	r3, [r7, #24]
 8000cb0:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000cb2:	2304      	movs	r3, #4
 8000cb4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cb6:	2302      	movs	r3, #2
 8000cb8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000cc2:	2306      	movs	r3, #6
 8000cc4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cca:	4619      	mov	r1, r3
 8000ccc:	483e      	ldr	r0, [pc, #248]	; (8000dc8 <HAL_I2S_MspInit+0x18c>)
 8000cce:	f000 fbef 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cd2:	2308      	movs	r3, #8
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cd6:	2302      	movs	r3, #2
 8000cd8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000ce6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cea:	4619      	mov	r1, r3
 8000cec:	4836      	ldr	r0, [pc, #216]	; (8000dc8 <HAL_I2S_MspInit+0x18c>)
 8000cee:	f000 fbdf 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000cf2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d00:	2300      	movs	r3, #0
 8000d02:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d04:	2305      	movs	r3, #5
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	482f      	ldr	r0, [pc, #188]	; (8000dcc <HAL_I2S_MspInit+0x190>)
 8000d10:	f000 fbce 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000d14:	e04f      	b.n	8000db6 <HAL_I2S_MspInit+0x17a>
  else if(hi2s->Instance==SPI3)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	4a2d      	ldr	r2, [pc, #180]	; (8000dd0 <HAL_I2S_MspInit+0x194>)
 8000d1c:	4293      	cmp	r3, r2
 8000d1e:	d14a      	bne.n	8000db6 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000d20:	2300      	movs	r3, #0
 8000d22:	617b      	str	r3, [r7, #20]
 8000d24:	4b27      	ldr	r3, [pc, #156]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d28:	4a26      	ldr	r2, [pc, #152]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000d2e:	6413      	str	r3, [r2, #64]	; 0x40
 8000d30:	4b24      	ldr	r3, [pc, #144]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000d38:	617b      	str	r3, [r7, #20]
 8000d3a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
 8000d40:	4b20      	ldr	r3, [pc, #128]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	4a1f      	ldr	r2, [pc, #124]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d46:	f043 0301 	orr.w	r3, r3, #1
 8000d4a:	6313      	str	r3, [r2, #48]	; 0x30
 8000d4c:	4b1d      	ldr	r3, [pc, #116]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	f003 0301 	and.w	r3, r3, #1
 8000d54:	613b      	str	r3, [r7, #16]
 8000d56:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d58:	2300      	movs	r3, #0
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	4b19      	ldr	r3, [pc, #100]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d60:	4a18      	ldr	r2, [pc, #96]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d62:	f043 0304 	orr.w	r3, r3, #4
 8000d66:	6313      	str	r3, [r2, #48]	; 0x30
 8000d68:	4b16      	ldr	r3, [pc, #88]	; (8000dc4 <HAL_I2S_MspInit+0x188>)
 8000d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6c:	f003 0304 	and.w	r3, r3, #4
 8000d70:	60fb      	str	r3, [r7, #12]
 8000d72:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000d74:	2310      	movs	r3, #16
 8000d76:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d78:	2302      	movs	r3, #2
 8000d7a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d80:	2300      	movs	r3, #0
 8000d82:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000d84:	2306      	movs	r3, #6
 8000d86:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000d88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4811      	ldr	r0, [pc, #68]	; (8000dd4 <HAL_I2S_MspInit+0x198>)
 8000d90:	f000 fb8e 	bl	80014b0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000d94:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000d98:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d9a:	2302      	movs	r3, #2
 8000d9c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da2:	2300      	movs	r3, #0
 8000da4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000da6:	2306      	movs	r3, #6
 8000da8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000daa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dae:	4619      	mov	r1, r3
 8000db0:	4805      	ldr	r0, [pc, #20]	; (8000dc8 <HAL_I2S_MspInit+0x18c>)
 8000db2:	f000 fb7d 	bl	80014b0 <HAL_GPIO_Init>
}
 8000db6:	bf00      	nop
 8000db8:	3738      	adds	r7, #56	; 0x38
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40003800 	.word	0x40003800
 8000dc4:	40023800 	.word	0x40023800
 8000dc8:	40020800 	.word	0x40020800
 8000dcc:	40020400 	.word	0x40020400
 8000dd0:	40003c00 	.word	0x40003c00
 8000dd4:	40020000 	.word	0x40020000

08000dd8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a19      	ldr	r2, [pc, #100]	; (8000e5c <HAL_SPI_MspInit+0x84>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d12b      	bne.n	8000e52 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b18      	ldr	r3, [pc, #96]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a17      	ldr	r2, [pc, #92]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b15      	ldr	r3, [pc, #84]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_SPI_MspInit+0x88>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000e32:	23e0      	movs	r3, #224	; 0xe0
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000e42:	2305      	movs	r3, #5
 8000e44:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 0314 	add.w	r3, r7, #20
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4805      	ldr	r0, [pc, #20]	; (8000e64 <HAL_SPI_MspInit+0x8c>)
 8000e4e:	f000 fb2f 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000e52:	bf00      	nop
 8000e54:	3728      	adds	r7, #40	; 0x28
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	40013000 	.word	0x40013000
 8000e60:	40023800 	.word	0x40023800
 8000e64:	40020000 	.word	0x40020000

08000e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b08a      	sub	sp, #40	; 0x28
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e70:	f107 0314 	add.w	r3, r7, #20
 8000e74:	2200      	movs	r2, #0
 8000e76:	601a      	str	r2, [r3, #0]
 8000e78:	605a      	str	r2, [r3, #4]
 8000e7a:	609a      	str	r2, [r3, #8]
 8000e7c:	60da      	str	r2, [r3, #12]
 8000e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a28      	ldr	r2, [pc, #160]	; (8000f28 <HAL_UART_MspInit+0xc0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d14a      	bne.n	8000f20 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	4b27      	ldr	r3, [pc, #156]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a26      	ldr	r2, [pc, #152]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000e94:	f043 0310 	orr.w	r3, r3, #16
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f003 0310 	and.w	r3, r3, #16
 8000ea2:	613b      	str	r3, [r7, #16]
 8000ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b20      	ldr	r3, [pc, #128]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eae:	4a1f      	ldr	r2, [pc, #124]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000eb0:	f043 0301 	orr.w	r3, r3, #1
 8000eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000eb6:	4b1d      	ldr	r3, [pc, #116]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eba:	f003 0301 	and.w	r3, r3, #1
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	60bb      	str	r3, [r7, #8]
 8000ec6:	4b19      	ldr	r3, [pc, #100]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a18      	ldr	r2, [pc, #96]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000ecc:	f043 0302 	orr.w	r3, r3, #2
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b16      	ldr	r3, [pc, #88]	; (8000f2c <HAL_UART_MspInit+0xc4>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0302 	and.w	r3, r3, #2
 8000eda:	60bb      	str	r3, [r7, #8]
 8000edc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eec:	2303      	movs	r3, #3
 8000eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000ef0:	2307      	movs	r3, #7
 8000ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ef4:	f107 0314 	add.w	r3, r7, #20
 8000ef8:	4619      	mov	r1, r3
 8000efa:	480d      	ldr	r0, [pc, #52]	; (8000f30 <HAL_UART_MspInit+0xc8>)
 8000efc:	f000 fad8 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000f00:	2380      	movs	r3, #128	; 0x80
 8000f02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f04:	2302      	movs	r3, #2
 8000f06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f0c:	2303      	movs	r3, #3
 8000f0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000f10:	2307      	movs	r3, #7
 8000f12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f14:	f107 0314 	add.w	r3, r7, #20
 8000f18:	4619      	mov	r1, r3
 8000f1a:	4806      	ldr	r0, [pc, #24]	; (8000f34 <HAL_UART_MspInit+0xcc>)
 8000f1c:	f000 fac8 	bl	80014b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000f20:	bf00      	nop
 8000f22:	3728      	adds	r7, #40	; 0x28
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	40011000 	.word	0x40011000
 8000f2c:	40023800 	.word	0x40023800
 8000f30:	40020000 	.word	0x40020000
 8000f34:	40020400 	.word	0x40020400

08000f38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f3c:	e7fe      	b.n	8000f3c <NMI_Handler+0x4>

08000f3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f3e:	b480      	push	{r7}
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f42:	e7fe      	b.n	8000f42 <HardFault_Handler+0x4>

08000f44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f48:	e7fe      	b.n	8000f48 <MemManage_Handler+0x4>

08000f4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f4e:	e7fe      	b.n	8000f4e <BusFault_Handler+0x4>

08000f50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f54:	e7fe      	b.n	8000f54 <UsageFault_Handler+0x4>

08000f56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f72:	b480      	push	{r7}
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f76:	bf00      	nop
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr

08000f80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f84:	f000 f93e 	bl	8001204 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <OTG_FS_IRQHandler+0x10>)
 8000f92:	f000 fe95 	bl	8001cc0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	20000608 	.word	0x20000608

08000fa0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b086      	sub	sp, #24
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	60f8      	str	r0, [r7, #12]
 8000fa8:	60b9      	str	r1, [r7, #8]
 8000faa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fac:	2300      	movs	r3, #0
 8000fae:	617b      	str	r3, [r7, #20]
 8000fb0:	e00a      	b.n	8000fc8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000fb2:	f3af 8000 	nop.w
 8000fb6:	4601      	mov	r1, r0
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	1c5a      	adds	r2, r3, #1
 8000fbc:	60ba      	str	r2, [r7, #8]
 8000fbe:	b2ca      	uxtb	r2, r1
 8000fc0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc2:	697b      	ldr	r3, [r7, #20]
 8000fc4:	3301      	adds	r3, #1
 8000fc6:	617b      	str	r3, [r7, #20]
 8000fc8:	697a      	ldr	r2, [r7, #20]
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	429a      	cmp	r2, r3
 8000fce:	dbf0      	blt.n	8000fb2 <_read+0x12>
  }

  return len;
 8000fd0:	687b      	ldr	r3, [r7, #4]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3718      	adds	r7, #24
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	b086      	sub	sp, #24
 8000fde:	af00      	add	r7, sp, #0
 8000fe0:	60f8      	str	r0, [r7, #12]
 8000fe2:	60b9      	str	r1, [r7, #8]
 8000fe4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
 8000fea:	e009      	b.n	8001000 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	1c5a      	adds	r2, r3, #1
 8000ff0:	60ba      	str	r2, [r7, #8]
 8000ff2:	781b      	ldrb	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	3301      	adds	r3, #1
 8000ffe:	617b      	str	r3, [r7, #20]
 8001000:	697a      	ldr	r2, [r7, #20]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	429a      	cmp	r2, r3
 8001006:	dbf1      	blt.n	8000fec <_write+0x12>
  }
  return len;
 8001008:	687b      	ldr	r3, [r7, #4]
}
 800100a:	4618      	mov	r0, r3
 800100c:	3718      	adds	r7, #24
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <_close>:

int _close(int file)
{
 8001012:	b480      	push	{r7}
 8001014:	b083      	sub	sp, #12
 8001016:	af00      	add	r7, sp, #0
 8001018:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800101a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800101e:	4618      	mov	r0, r3
 8001020:	370c      	adds	r7, #12
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
 8001032:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800103a:	605a      	str	r2, [r3, #4]
  return 0;
 800103c:	2300      	movs	r3, #0
}
 800103e:	4618      	mov	r0, r3
 8001040:	370c      	adds	r7, #12
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <_isatty>:

int _isatty(int file)
{
 800104a:	b480      	push	{r7}
 800104c:	b083      	sub	sp, #12
 800104e:	af00      	add	r7, sp, #0
 8001050:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001052:	2301      	movs	r3, #1
}
 8001054:	4618      	mov	r0, r3
 8001056:	370c      	adds	r7, #12
 8001058:	46bd      	mov	sp, r7
 800105a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105e:	4770      	bx	lr

08001060 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001060:	b480      	push	{r7}
 8001062:	b085      	sub	sp, #20
 8001064:	af00      	add	r7, sp, #0
 8001066:	60f8      	str	r0, [r7, #12]
 8001068:	60b9      	str	r1, [r7, #8]
 800106a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800106c:	2300      	movs	r3, #0
}
 800106e:	4618      	mov	r0, r3
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
	...

0800107c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b086      	sub	sp, #24
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001084:	4a14      	ldr	r2, [pc, #80]	; (80010d8 <_sbrk+0x5c>)
 8001086:	4b15      	ldr	r3, [pc, #84]	; (80010dc <_sbrk+0x60>)
 8001088:	1ad3      	subs	r3, r2, r3
 800108a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800108c:	697b      	ldr	r3, [r7, #20]
 800108e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001090:	4b13      	ldr	r3, [pc, #76]	; (80010e0 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2b00      	cmp	r3, #0
 8001096:	d102      	bne.n	800109e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001098:	4b11      	ldr	r3, [pc, #68]	; (80010e0 <_sbrk+0x64>)
 800109a:	4a12      	ldr	r2, [pc, #72]	; (80010e4 <_sbrk+0x68>)
 800109c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800109e:	4b10      	ldr	r3, [pc, #64]	; (80010e0 <_sbrk+0x64>)
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	4413      	add	r3, r2
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d207      	bcs.n	80010bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80010ac:	f006 fc9e 	bl	80079ec <__errno>
 80010b0:	4603      	mov	r3, r0
 80010b2:	220c      	movs	r2, #12
 80010b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80010b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010ba:	e009      	b.n	80010d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80010bc:	4b08      	ldr	r3, [pc, #32]	; (80010e0 <_sbrk+0x64>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80010c2:	4b07      	ldr	r3, [pc, #28]	; (80010e0 <_sbrk+0x64>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4413      	add	r3, r2
 80010ca:	4a05      	ldr	r2, [pc, #20]	; (80010e0 <_sbrk+0x64>)
 80010cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010ce:	68fb      	ldr	r3, [r7, #12]
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3718      	adds	r7, #24
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20020000 	.word	0x20020000
 80010dc:	00000400 	.word	0x00000400
 80010e0:	20000224 	.word	0x20000224
 80010e4:	20000a58 	.word	0x20000a58

080010e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010ec:	4b06      	ldr	r3, [pc, #24]	; (8001108 <SystemInit+0x20>)
 80010ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010f2:	4a05      	ldr	r2, [pc, #20]	; (8001108 <SystemInit+0x20>)
 80010f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010fc:	bf00      	nop
 80010fe:	46bd      	mov	sp, r7
 8001100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001104:	4770      	bx	lr
 8001106:	bf00      	nop
 8001108:	e000ed00 	.word	0xe000ed00

0800110c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800110c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001144 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001114:	4a0e      	ldr	r2, [pc, #56]	; (8001150 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001116:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001118:	e002      	b.n	8001120 <LoopCopyDataInit>

0800111a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800111a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800111c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800111e:	3304      	adds	r3, #4

08001120 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001120:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001122:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001124:	d3f9      	bcc.n	800111a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001126:	4a0b      	ldr	r2, [pc, #44]	; (8001154 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001128:	4c0b      	ldr	r4, [pc, #44]	; (8001158 <LoopFillZerobss+0x26>)
  movs r3, #0
 800112a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800112c:	e001      	b.n	8001132 <LoopFillZerobss>

0800112e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800112e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001130:	3204      	adds	r2, #4

08001132 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001132:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001134:	d3fb      	bcc.n	800112e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001136:	f7ff ffd7 	bl	80010e8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800113a:	f006 fc5d 	bl	80079f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800113e:	f7ff fa35 	bl	80005ac <main>
  bx  lr    
 8001142:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001144:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001148:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800114c:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 8001150:	0800849c 	.word	0x0800849c
  ldr r2, =_sbss
 8001154:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 8001158:	20000a58 	.word	0x20000a58

0800115c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800115c:	e7fe      	b.n	800115c <ADC_IRQHandler>
	...

08001160 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001164:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_Init+0x40>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a0d      	ldr	r2, [pc, #52]	; (80011a0 <HAL_Init+0x40>)
 800116a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800116e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001170:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_Init+0x40>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a0a      	ldr	r2, [pc, #40]	; (80011a0 <HAL_Init+0x40>)
 8001176:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800117a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800117c:	4b08      	ldr	r3, [pc, #32]	; (80011a0 <HAL_Init+0x40>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a07      	ldr	r2, [pc, #28]	; (80011a0 <HAL_Init+0x40>)
 8001182:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001186:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001188:	2003      	movs	r0, #3
 800118a:	f000 f94f 	bl	800142c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800118e:	2000      	movs	r0, #0
 8001190:	f000 f808 	bl	80011a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001194:	f7ff fce2 	bl	8000b5c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001198:	2300      	movs	r3, #0
}
 800119a:	4618      	mov	r0, r3
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	40023c00 	.word	0x40023c00

080011a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ac:	4b12      	ldr	r3, [pc, #72]	; (80011f8 <HAL_InitTick+0x54>)
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	4b12      	ldr	r3, [pc, #72]	; (80011fc <HAL_InitTick+0x58>)
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	4619      	mov	r1, r3
 80011b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80011be:	fbb2 f3f3 	udiv	r3, r2, r3
 80011c2:	4618      	mov	r0, r3
 80011c4:	f000 f967 	bl	8001496 <HAL_SYSTICK_Config>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	e00e      	b.n	80011f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	2b0f      	cmp	r3, #15
 80011d6:	d80a      	bhi.n	80011ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011d8:	2200      	movs	r2, #0
 80011da:	6879      	ldr	r1, [r7, #4]
 80011dc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80011e0:	f000 f92f 	bl	8001442 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80011e4:	4a06      	ldr	r2, [pc, #24]	; (8001200 <HAL_InitTick+0x5c>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80011ea:	2300      	movs	r3, #0
 80011ec:	e000      	b.n	80011f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011ee:	2301      	movs	r3, #1
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	20000000 	.word	0x20000000
 80011fc:	20000008 	.word	0x20000008
 8001200:	20000004 	.word	0x20000004

08001204 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001208:	4b06      	ldr	r3, [pc, #24]	; (8001224 <HAL_IncTick+0x20>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	461a      	mov	r2, r3
 800120e:	4b06      	ldr	r3, [pc, #24]	; (8001228 <HAL_IncTick+0x24>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4413      	add	r3, r2
 8001214:	4a04      	ldr	r2, [pc, #16]	; (8001228 <HAL_IncTick+0x24>)
 8001216:	6013      	str	r3, [r2, #0]
}
 8001218:	bf00      	nop
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	20000008 	.word	0x20000008
 8001228:	20000228 	.word	0x20000228

0800122c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  return uwTick;
 8001230:	4b03      	ldr	r3, [pc, #12]	; (8001240 <HAL_GetTick+0x14>)
 8001232:	681b      	ldr	r3, [r3, #0]
}
 8001234:	4618      	mov	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop
 8001240:	20000228 	.word	0x20000228

08001244 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b084      	sub	sp, #16
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800124c:	f7ff ffee 	bl	800122c <HAL_GetTick>
 8001250:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001256:	68fb      	ldr	r3, [r7, #12]
 8001258:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800125c:	d005      	beq.n	800126a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800125e:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <HAL_Delay+0x44>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	461a      	mov	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800126a:	bf00      	nop
 800126c:	f7ff ffde 	bl	800122c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	68fa      	ldr	r2, [r7, #12]
 8001278:	429a      	cmp	r2, r3
 800127a:	d8f7      	bhi.n	800126c <HAL_Delay+0x28>
  {
  }
}
 800127c:	bf00      	nop
 800127e:	bf00      	nop
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000008 	.word	0x20000008

0800128c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800128c:	b480      	push	{r7}
 800128e:	b085      	sub	sp, #20
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800129c:	4b0c      	ldr	r3, [pc, #48]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 800129e:	68db      	ldr	r3, [r3, #12]
 80012a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012a2:	68ba      	ldr	r2, [r7, #8]
 80012a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012a8:	4013      	ands	r3, r2
 80012aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80012b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80012b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012be:	4a04      	ldr	r2, [pc, #16]	; (80012d0 <__NVIC_SetPriorityGrouping+0x44>)
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	60d3      	str	r3, [r2, #12]
}
 80012c4:	bf00      	nop
 80012c6:	3714      	adds	r7, #20
 80012c8:	46bd      	mov	sp, r7
 80012ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ce:	4770      	bx	lr
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80012d4:	b480      	push	{r7}
 80012d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80012d8:	4b04      	ldr	r3, [pc, #16]	; (80012ec <__NVIC_GetPriorityGrouping+0x18>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	0a1b      	lsrs	r3, r3, #8
 80012de:	f003 0307 	and.w	r3, r3, #7
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	db0b      	blt.n	800131a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	f003 021f 	and.w	r2, r3, #31
 8001308:	4907      	ldr	r1, [pc, #28]	; (8001328 <__NVIC_EnableIRQ+0x38>)
 800130a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800130e:	095b      	lsrs	r3, r3, #5
 8001310:	2001      	movs	r0, #1
 8001312:	fa00 f202 	lsl.w	r2, r0, r2
 8001316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800131a:	bf00      	nop
 800131c:	370c      	adds	r7, #12
 800131e:	46bd      	mov	sp, r7
 8001320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001324:	4770      	bx	lr
 8001326:	bf00      	nop
 8001328:	e000e100 	.word	0xe000e100

0800132c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
 8001332:	4603      	mov	r3, r0
 8001334:	6039      	str	r1, [r7, #0]
 8001336:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001338:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133c:	2b00      	cmp	r3, #0
 800133e:	db0a      	blt.n	8001356 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001340:	683b      	ldr	r3, [r7, #0]
 8001342:	b2da      	uxtb	r2, r3
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <__NVIC_SetPriority+0x4c>)
 8001346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134a:	0112      	lsls	r2, r2, #4
 800134c:	b2d2      	uxtb	r2, r2
 800134e:	440b      	add	r3, r1
 8001350:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001354:	e00a      	b.n	800136c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	b2da      	uxtb	r2, r3
 800135a:	4908      	ldr	r1, [pc, #32]	; (800137c <__NVIC_SetPriority+0x50>)
 800135c:	79fb      	ldrb	r3, [r7, #7]
 800135e:	f003 030f 	and.w	r3, r3, #15
 8001362:	3b04      	subs	r3, #4
 8001364:	0112      	lsls	r2, r2, #4
 8001366:	b2d2      	uxtb	r2, r2
 8001368:	440b      	add	r3, r1
 800136a:	761a      	strb	r2, [r3, #24]
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr
 8001378:	e000e100 	.word	0xe000e100
 800137c:	e000ed00 	.word	0xe000ed00

08001380 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001380:	b480      	push	{r7}
 8001382:	b089      	sub	sp, #36	; 0x24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001394:	69fb      	ldr	r3, [r7, #28]
 8001396:	f1c3 0307 	rsb	r3, r3, #7
 800139a:	2b04      	cmp	r3, #4
 800139c:	bf28      	it	cs
 800139e:	2304      	movcs	r3, #4
 80013a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a2:	69fb      	ldr	r3, [r7, #28]
 80013a4:	3304      	adds	r3, #4
 80013a6:	2b06      	cmp	r3, #6
 80013a8:	d902      	bls.n	80013b0 <NVIC_EncodePriority+0x30>
 80013aa:	69fb      	ldr	r3, [r7, #28]
 80013ac:	3b03      	subs	r3, #3
 80013ae:	e000      	b.n	80013b2 <NVIC_EncodePriority+0x32>
 80013b0:	2300      	movs	r3, #0
 80013b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80013b8:	69bb      	ldr	r3, [r7, #24]
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	43da      	mvns	r2, r3
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	401a      	ands	r2, r3
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013c8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	fa01 f303 	lsl.w	r3, r1, r3
 80013d2:	43d9      	mvns	r1, r3
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013d8:	4313      	orrs	r3, r2
         );
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3724      	adds	r7, #36	; 0x24
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
	...

080013e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	3b01      	subs	r3, #1
 80013f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013f8:	d301      	bcc.n	80013fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fa:	2301      	movs	r3, #1
 80013fc:	e00f      	b.n	800141e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013fe:	4a0a      	ldr	r2, [pc, #40]	; (8001428 <SysTick_Config+0x40>)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	3b01      	subs	r3, #1
 8001404:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001406:	210f      	movs	r1, #15
 8001408:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800140c:	f7ff ff8e 	bl	800132c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001410:	4b05      	ldr	r3, [pc, #20]	; (8001428 <SysTick_Config+0x40>)
 8001412:	2200      	movs	r2, #0
 8001414:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001416:	4b04      	ldr	r3, [pc, #16]	; (8001428 <SysTick_Config+0x40>)
 8001418:	2207      	movs	r2, #7
 800141a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800141c:	2300      	movs	r3, #0
}
 800141e:	4618      	mov	r0, r3
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	e000e010 	.word	0xe000e010

0800142c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001434:	6878      	ldr	r0, [r7, #4]
 8001436:	f7ff ff29 	bl	800128c <__NVIC_SetPriorityGrouping>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001442:	b580      	push	{r7, lr}
 8001444:	b086      	sub	sp, #24
 8001446:	af00      	add	r7, sp, #0
 8001448:	4603      	mov	r3, r0
 800144a:	60b9      	str	r1, [r7, #8]
 800144c:	607a      	str	r2, [r7, #4]
 800144e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001450:	2300      	movs	r3, #0
 8001452:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001454:	f7ff ff3e 	bl	80012d4 <__NVIC_GetPriorityGrouping>
 8001458:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145a:	687a      	ldr	r2, [r7, #4]
 800145c:	68b9      	ldr	r1, [r7, #8]
 800145e:	6978      	ldr	r0, [r7, #20]
 8001460:	f7ff ff8e 	bl	8001380 <NVIC_EncodePriority>
 8001464:	4602      	mov	r2, r0
 8001466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146a:	4611      	mov	r1, r2
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff5d 	bl	800132c <__NVIC_SetPriority>
}
 8001472:	bf00      	nop
 8001474:	3718      	adds	r7, #24
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}

0800147a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b082      	sub	sp, #8
 800147e:	af00      	add	r7, sp, #0
 8001480:	4603      	mov	r3, r0
 8001482:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001484:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001488:	4618      	mov	r0, r3
 800148a:	f7ff ff31 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148e:	bf00      	nop
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b082      	sub	sp, #8
 800149a:	af00      	add	r7, sp, #0
 800149c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff ffa2 	bl	80013e8 <SysTick_Config>
 80014a4:	4603      	mov	r3, r0
}
 80014a6:	4618      	mov	r0, r3
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}
	...

080014b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b089      	sub	sp, #36	; 0x24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80014ba:	2300      	movs	r3, #0
 80014bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014be:	2300      	movs	r3, #0
 80014c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80014c2:	2300      	movs	r3, #0
 80014c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80014c6:	2300      	movs	r3, #0
 80014c8:	61fb      	str	r3, [r7, #28]
 80014ca:	e159      	b.n	8001780 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80014cc:	2201      	movs	r2, #1
 80014ce:	69fb      	ldr	r3, [r7, #28]
 80014d0:	fa02 f303 	lsl.w	r3, r2, r3
 80014d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80014e0:	693a      	ldr	r2, [r7, #16]
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	f040 8148 	bne.w	800177a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f003 0303 	and.w	r3, r3, #3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d005      	beq.n	8001502 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	685b      	ldr	r3, [r3, #4]
 80014fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014fe:	2b02      	cmp	r3, #2
 8001500:	d130      	bne.n	8001564 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001508:	69fb      	ldr	r3, [r7, #28]
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	2203      	movs	r2, #3
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43db      	mvns	r3, r3
 8001514:	69ba      	ldr	r2, [r7, #24]
 8001516:	4013      	ands	r3, r2
 8001518:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	68da      	ldr	r2, [r3, #12]
 800151e:	69fb      	ldr	r3, [r7, #28]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	fa02 f303 	lsl.w	r3, r2, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	69ba      	ldr	r2, [r7, #24]
 8001530:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001538:	2201      	movs	r2, #1
 800153a:	69fb      	ldr	r3, [r7, #28]
 800153c:	fa02 f303 	lsl.w	r3, r2, r3
 8001540:	43db      	mvns	r3, r3
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4013      	ands	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001548:	683b      	ldr	r3, [r7, #0]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	091b      	lsrs	r3, r3, #4
 800154e:	f003 0201 	and.w	r2, r3, #1
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	fa02 f303 	lsl.w	r3, r2, r3
 8001558:	69ba      	ldr	r2, [r7, #24]
 800155a:	4313      	orrs	r3, r2
 800155c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f003 0303 	and.w	r3, r3, #3
 800156c:	2b03      	cmp	r3, #3
 800156e:	d017      	beq.n	80015a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	68db      	ldr	r3, [r3, #12]
 8001574:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	005b      	lsls	r3, r3, #1
 800157a:	2203      	movs	r2, #3
 800157c:	fa02 f303 	lsl.w	r3, r2, r3
 8001580:	43db      	mvns	r3, r3
 8001582:	69ba      	ldr	r2, [r7, #24]
 8001584:	4013      	ands	r3, r2
 8001586:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	689a      	ldr	r2, [r3, #8]
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	fa02 f303 	lsl.w	r3, r2, r3
 8001594:	69ba      	ldr	r2, [r7, #24]
 8001596:	4313      	orrs	r3, r2
 8001598:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f003 0303 	and.w	r3, r3, #3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d123      	bne.n	80015f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	08da      	lsrs	r2, r3, #3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	3208      	adds	r2, #8
 80015b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80015b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	f003 0307 	and.w	r3, r3, #7
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	220f      	movs	r2, #15
 80015c4:	fa02 f303 	lsl.w	r3, r2, r3
 80015c8:	43db      	mvns	r3, r3
 80015ca:	69ba      	ldr	r2, [r7, #24]
 80015cc:	4013      	ands	r3, r2
 80015ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	691a      	ldr	r2, [r3, #16]
 80015d4:	69fb      	ldr	r3, [r7, #28]
 80015d6:	f003 0307 	and.w	r3, r3, #7
 80015da:	009b      	lsls	r3, r3, #2
 80015dc:	fa02 f303 	lsl.w	r3, r2, r3
 80015e0:	69ba      	ldr	r2, [r7, #24]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80015e6:	69fb      	ldr	r3, [r7, #28]
 80015e8:	08da      	lsrs	r2, r3, #3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	3208      	adds	r2, #8
 80015ee:	69b9      	ldr	r1, [r7, #24]
 80015f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	005b      	lsls	r3, r3, #1
 80015fe:	2203      	movs	r2, #3
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4013      	ands	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f003 0203 	and.w	r2, r3, #3
 8001614:	69fb      	ldr	r3, [r7, #28]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	fa02 f303 	lsl.w	r3, r2, r3
 800161c:	69ba      	ldr	r2, [r7, #24]
 800161e:	4313      	orrs	r3, r2
 8001620:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a2 	beq.w	800177a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b57      	ldr	r3, [pc, #348]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 800163c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163e:	4a56      	ldr	r2, [pc, #344]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 8001640:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001644:	6453      	str	r3, [r2, #68]	; 0x44
 8001646:	4b54      	ldr	r3, [pc, #336]	; (8001798 <HAL_GPIO_Init+0x2e8>)
 8001648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001652:	4a52      	ldr	r2, [pc, #328]	; (800179c <HAL_GPIO_Init+0x2ec>)
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	089b      	lsrs	r3, r3, #2
 8001658:	3302      	adds	r3, #2
 800165a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800165e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001660:	69fb      	ldr	r3, [r7, #28]
 8001662:	f003 0303 	and.w	r3, r3, #3
 8001666:	009b      	lsls	r3, r3, #2
 8001668:	220f      	movs	r2, #15
 800166a:	fa02 f303 	lsl.w	r3, r2, r3
 800166e:	43db      	mvns	r3, r3
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4013      	ands	r3, r2
 8001674:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	4a49      	ldr	r2, [pc, #292]	; (80017a0 <HAL_GPIO_Init+0x2f0>)
 800167a:	4293      	cmp	r3, r2
 800167c:	d019      	beq.n	80016b2 <HAL_GPIO_Init+0x202>
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4a48      	ldr	r2, [pc, #288]	; (80017a4 <HAL_GPIO_Init+0x2f4>)
 8001682:	4293      	cmp	r3, r2
 8001684:	d013      	beq.n	80016ae <HAL_GPIO_Init+0x1fe>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <HAL_GPIO_Init+0x2f8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d00d      	beq.n	80016aa <HAL_GPIO_Init+0x1fa>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a46      	ldr	r2, [pc, #280]	; (80017ac <HAL_GPIO_Init+0x2fc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d007      	beq.n	80016a6 <HAL_GPIO_Init+0x1f6>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_GPIO_Init+0x300>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d101      	bne.n	80016a2 <HAL_GPIO_Init+0x1f2>
 800169e:	2304      	movs	r3, #4
 80016a0:	e008      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016a2:	2307      	movs	r3, #7
 80016a4:	e006      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016a6:	2303      	movs	r3, #3
 80016a8:	e004      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016aa:	2302      	movs	r3, #2
 80016ac:	e002      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016ae:	2301      	movs	r3, #1
 80016b0:	e000      	b.n	80016b4 <HAL_GPIO_Init+0x204>
 80016b2:	2300      	movs	r3, #0
 80016b4:	69fa      	ldr	r2, [r7, #28]
 80016b6:	f002 0203 	and.w	r2, r2, #3
 80016ba:	0092      	lsls	r2, r2, #2
 80016bc:	4093      	lsls	r3, r2
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016c4:	4935      	ldr	r1, [pc, #212]	; (800179c <HAL_GPIO_Init+0x2ec>)
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	089b      	lsrs	r3, r3, #2
 80016ca:	3302      	adds	r3, #2
 80016cc:	69ba      	ldr	r2, [r7, #24]
 80016ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80016d2:	4b38      	ldr	r3, [pc, #224]	; (80017b4 <HAL_GPIO_Init+0x304>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	43db      	mvns	r3, r3
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	4013      	ands	r3, r2
 80016e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80016ee:	69ba      	ldr	r2, [r7, #24]
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80016f6:	4a2f      	ldr	r2, [pc, #188]	; (80017b4 <HAL_GPIO_Init+0x304>)
 80016f8:	69bb      	ldr	r3, [r7, #24]
 80016fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016fc:	4b2d      	ldr	r3, [pc, #180]	; (80017b4 <HAL_GPIO_Init+0x304>)
 80016fe:	68db      	ldr	r3, [r3, #12]
 8001700:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	43db      	mvns	r3, r3
 8001706:	69ba      	ldr	r2, [r7, #24]
 8001708:	4013      	ands	r3, r2
 800170a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001714:	2b00      	cmp	r3, #0
 8001716:	d003      	beq.n	8001720 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	4313      	orrs	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001720:	4a24      	ldr	r2, [pc, #144]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001722:	69bb      	ldr	r3, [r7, #24]
 8001724:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001726:	4b23      	ldr	r3, [pc, #140]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	43db      	mvns	r3, r3
 8001730:	69ba      	ldr	r2, [r7, #24]
 8001732:	4013      	ands	r3, r2
 8001734:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001736:	683b      	ldr	r3, [r7, #0]
 8001738:	685b      	ldr	r3, [r3, #4]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d003      	beq.n	800174a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	693b      	ldr	r3, [r7, #16]
 8001746:	4313      	orrs	r3, r2
 8001748:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800174a:	4a1a      	ldr	r2, [pc, #104]	; (80017b4 <HAL_GPIO_Init+0x304>)
 800174c:	69bb      	ldr	r3, [r7, #24]
 800174e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001750:	4b18      	ldr	r3, [pc, #96]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	43db      	mvns	r3, r3
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	4013      	ands	r3, r2
 800175e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001768:	2b00      	cmp	r3, #0
 800176a:	d003      	beq.n	8001774 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	693b      	ldr	r3, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001774:	4a0f      	ldr	r2, [pc, #60]	; (80017b4 <HAL_GPIO_Init+0x304>)
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800177a:	69fb      	ldr	r3, [r7, #28]
 800177c:	3301      	adds	r3, #1
 800177e:	61fb      	str	r3, [r7, #28]
 8001780:	69fb      	ldr	r3, [r7, #28]
 8001782:	2b0f      	cmp	r3, #15
 8001784:	f67f aea2 	bls.w	80014cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3724      	adds	r7, #36	; 0x24
 800178e:	46bd      	mov	sp, r7
 8001790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001794:	4770      	bx	lr
 8001796:	bf00      	nop
 8001798:	40023800 	.word	0x40023800
 800179c:	40013800 	.word	0x40013800
 80017a0:	40020000 	.word	0x40020000
 80017a4:	40020400 	.word	0x40020400
 80017a8:	40020800 	.word	0x40020800
 80017ac:	40020c00 	.word	0x40020c00
 80017b0:	40021000 	.word	0x40021000
 80017b4:	40013c00 	.word	0x40013c00

080017b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017b8:	b480      	push	{r7}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
 80017c0:	460b      	mov	r3, r1
 80017c2:	807b      	strh	r3, [r7, #2]
 80017c4:	4613      	mov	r3, r2
 80017c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80017c8:	787b      	ldrb	r3, [r7, #1]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d003      	beq.n	80017d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017ce:	887a      	ldrh	r2, [r7, #2]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017d4:	e003      	b.n	80017de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017d6:	887b      	ldrh	r3, [r7, #2]
 80017d8:	041a      	lsls	r2, r3, #16
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	619a      	str	r2, [r3, #24]
}
 80017de:	bf00      	nop
 80017e0:	370c      	adds	r7, #12
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80017ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017ec:	b08f      	sub	sp, #60	; 0x3c
 80017ee:	af0a      	add	r7, sp, #40	; 0x28
 80017f0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d101      	bne.n	80017fc <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80017f8:	2301      	movs	r3, #1
 80017fa:	e054      	b.n	80018a6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b00      	cmp	r3, #0
 800180c:	d106      	bne.n	800181c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	2200      	movs	r2, #0
 8001812:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f005 fc5a 	bl	80070d0 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2203      	movs	r2, #3
 8001820:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001828:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2200      	movs	r2, #0
 8001834:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f003 fc4c 	bl	80050d8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	603b      	str	r3, [r7, #0]
 8001846:	687e      	ldr	r6, [r7, #4]
 8001848:	466d      	mov	r5, sp
 800184a:	f106 0410 	add.w	r4, r6, #16
 800184e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001850:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001852:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001854:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001856:	e894 0003 	ldmia.w	r4, {r0, r1}
 800185a:	e885 0003 	stmia.w	r5, {r0, r1}
 800185e:	1d33      	adds	r3, r6, #4
 8001860:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001862:	6838      	ldr	r0, [r7, #0]
 8001864:	f003 fbc6 	bl	8004ff4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2101      	movs	r1, #1
 800186e:	4618      	mov	r0, r3
 8001870:	f003 fc43 	bl	80050fa <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	603b      	str	r3, [r7, #0]
 800187a:	687e      	ldr	r6, [r7, #4]
 800187c:	466d      	mov	r5, sp
 800187e:	f106 0410 	add.w	r4, r6, #16
 8001882:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001884:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001886:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001888:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800188a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800188e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001892:	1d33      	adds	r3, r6, #4
 8001894:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001896:	6838      	ldr	r0, [r7, #0]
 8001898:	f003 fdcc 	bl	8005434 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2201      	movs	r2, #1
 80018a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80018a4:	2300      	movs	r3, #0
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3714      	adds	r7, #20
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080018ae <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80018ae:	b590      	push	{r4, r7, lr}
 80018b0:	b089      	sub	sp, #36	; 0x24
 80018b2:	af04      	add	r7, sp, #16
 80018b4:	6078      	str	r0, [r7, #4]
 80018b6:	4608      	mov	r0, r1
 80018b8:	4611      	mov	r1, r2
 80018ba:	461a      	mov	r2, r3
 80018bc:	4603      	mov	r3, r0
 80018be:	70fb      	strb	r3, [r7, #3]
 80018c0:	460b      	mov	r3, r1
 80018c2:	70bb      	strb	r3, [r7, #2]
 80018c4:	4613      	mov	r3, r2
 80018c6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d101      	bne.n	80018d6 <HAL_HCD_HC_Init+0x28>
 80018d2:	2302      	movs	r3, #2
 80018d4:	e076      	b.n	80019c4 <HAL_HCD_HC_Init+0x116>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	2201      	movs	r2, #1
 80018da:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	687a      	ldr	r2, [r7, #4]
 80018e2:	212c      	movs	r1, #44	; 0x2c
 80018e4:	fb01 f303 	mul.w	r3, r1, r3
 80018e8:	4413      	add	r3, r2
 80018ea:	333d      	adds	r3, #61	; 0x3d
 80018ec:	2200      	movs	r2, #0
 80018ee:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80018f0:	78fb      	ldrb	r3, [r7, #3]
 80018f2:	687a      	ldr	r2, [r7, #4]
 80018f4:	212c      	movs	r1, #44	; 0x2c
 80018f6:	fb01 f303 	mul.w	r3, r1, r3
 80018fa:	4413      	add	r3, r2
 80018fc:	3338      	adds	r3, #56	; 0x38
 80018fe:	787a      	ldrb	r2, [r7, #1]
 8001900:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001902:	78fb      	ldrb	r3, [r7, #3]
 8001904:	687a      	ldr	r2, [r7, #4]
 8001906:	212c      	movs	r1, #44	; 0x2c
 8001908:	fb01 f303 	mul.w	r3, r1, r3
 800190c:	4413      	add	r3, r2
 800190e:	3340      	adds	r3, #64	; 0x40
 8001910:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001912:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	212c      	movs	r1, #44	; 0x2c
 800191a:	fb01 f303 	mul.w	r3, r1, r3
 800191e:	4413      	add	r3, r2
 8001920:	3339      	adds	r3, #57	; 0x39
 8001922:	78fa      	ldrb	r2, [r7, #3]
 8001924:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001926:	78fb      	ldrb	r3, [r7, #3]
 8001928:	687a      	ldr	r2, [r7, #4]
 800192a:	212c      	movs	r1, #44	; 0x2c
 800192c:	fb01 f303 	mul.w	r3, r1, r3
 8001930:	4413      	add	r3, r2
 8001932:	333f      	adds	r3, #63	; 0x3f
 8001934:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001938:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800193a:	78fb      	ldrb	r3, [r7, #3]
 800193c:	78ba      	ldrb	r2, [r7, #2]
 800193e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001942:	b2d0      	uxtb	r0, r2
 8001944:	687a      	ldr	r2, [r7, #4]
 8001946:	212c      	movs	r1, #44	; 0x2c
 8001948:	fb01 f303 	mul.w	r3, r1, r3
 800194c:	4413      	add	r3, r2
 800194e:	333a      	adds	r3, #58	; 0x3a
 8001950:	4602      	mov	r2, r0
 8001952:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001954:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da09      	bge.n	8001970 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	687a      	ldr	r2, [r7, #4]
 8001960:	212c      	movs	r1, #44	; 0x2c
 8001962:	fb01 f303 	mul.w	r3, r1, r3
 8001966:	4413      	add	r3, r2
 8001968:	333b      	adds	r3, #59	; 0x3b
 800196a:	2201      	movs	r2, #1
 800196c:	701a      	strb	r2, [r3, #0]
 800196e:	e008      	b.n	8001982 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001970:	78fb      	ldrb	r3, [r7, #3]
 8001972:	687a      	ldr	r2, [r7, #4]
 8001974:	212c      	movs	r1, #44	; 0x2c
 8001976:	fb01 f303 	mul.w	r3, r1, r3
 800197a:	4413      	add	r3, r2
 800197c:	333b      	adds	r3, #59	; 0x3b
 800197e:	2200      	movs	r2, #0
 8001980:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001982:	78fb      	ldrb	r3, [r7, #3]
 8001984:	687a      	ldr	r2, [r7, #4]
 8001986:	212c      	movs	r1, #44	; 0x2c
 8001988:	fb01 f303 	mul.w	r3, r1, r3
 800198c:	4413      	add	r3, r2
 800198e:	333c      	adds	r3, #60	; 0x3c
 8001990:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001994:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6818      	ldr	r0, [r3, #0]
 800199a:	787c      	ldrb	r4, [r7, #1]
 800199c:	78ba      	ldrb	r2, [r7, #2]
 800199e:	78f9      	ldrb	r1, [r7, #3]
 80019a0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80019a2:	9302      	str	r3, [sp, #8]
 80019a4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80019a8:	9301      	str	r3, [sp, #4]
 80019aa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80019ae:	9300      	str	r3, [sp, #0]
 80019b0:	4623      	mov	r3, r4
 80019b2:	f003 fe9b 	bl	80056ec <USB_HC_Init>
 80019b6:	4603      	mov	r3, r0
 80019b8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	2200      	movs	r2, #0
 80019be:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80019c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3714      	adds	r7, #20
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd90      	pop	{r4, r7, pc}

080019cc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b084      	sub	sp, #16
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
 80019d4:	460b      	mov	r3, r1
 80019d6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80019d8:	2300      	movs	r3, #0
 80019da:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_HCD_HC_Halt+0x1e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e00f      	b.n	8001a0a <HAL_HCD_HC_Halt+0x3e>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	78fa      	ldrb	r2, [r7, #3]
 80019f8:	4611      	mov	r1, r2
 80019fa:	4618      	mov	r0, r3
 80019fc:	f004 f8eb 	bl	8005bd6 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2200      	movs	r2, #0
 8001a04:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3710      	adds	r7, #16
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
	...

08001a14 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
 8001a1c:	4608      	mov	r0, r1
 8001a1e:	4611      	mov	r1, r2
 8001a20:	461a      	mov	r2, r3
 8001a22:	4603      	mov	r3, r0
 8001a24:	70fb      	strb	r3, [r7, #3]
 8001a26:	460b      	mov	r3, r1
 8001a28:	70bb      	strb	r3, [r7, #2]
 8001a2a:	4613      	mov	r3, r2
 8001a2c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001a2e:	78fb      	ldrb	r3, [r7, #3]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	212c      	movs	r1, #44	; 0x2c
 8001a34:	fb01 f303 	mul.w	r3, r1, r3
 8001a38:	4413      	add	r3, r2
 8001a3a:	333b      	adds	r3, #59	; 0x3b
 8001a3c:	78ba      	ldrb	r2, [r7, #2]
 8001a3e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001a40:	78fb      	ldrb	r3, [r7, #3]
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	212c      	movs	r1, #44	; 0x2c
 8001a46:	fb01 f303 	mul.w	r3, r1, r3
 8001a4a:	4413      	add	r3, r2
 8001a4c:	333f      	adds	r3, #63	; 0x3f
 8001a4e:	787a      	ldrb	r2, [r7, #1]
 8001a50:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001a52:	7c3b      	ldrb	r3, [r7, #16]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d112      	bne.n	8001a7e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	212c      	movs	r1, #44	; 0x2c
 8001a5e:	fb01 f303 	mul.w	r3, r1, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	3342      	adds	r3, #66	; 0x42
 8001a66:	2203      	movs	r2, #3
 8001a68:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001a6a:	78fb      	ldrb	r3, [r7, #3]
 8001a6c:	687a      	ldr	r2, [r7, #4]
 8001a6e:	212c      	movs	r1, #44	; 0x2c
 8001a70:	fb01 f303 	mul.w	r3, r1, r3
 8001a74:	4413      	add	r3, r2
 8001a76:	333d      	adds	r3, #61	; 0x3d
 8001a78:	7f3a      	ldrb	r2, [r7, #28]
 8001a7a:	701a      	strb	r2, [r3, #0]
 8001a7c:	e008      	b.n	8001a90 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001a7e:	78fb      	ldrb	r3, [r7, #3]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	212c      	movs	r1, #44	; 0x2c
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	4413      	add	r3, r2
 8001a8a:	3342      	adds	r3, #66	; 0x42
 8001a8c:	2202      	movs	r2, #2
 8001a8e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001a90:	787b      	ldrb	r3, [r7, #1]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	f200 80c6 	bhi.w	8001c24 <HAL_HCD_HC_SubmitRequest+0x210>
 8001a98:	a201      	add	r2, pc, #4	; (adr r2, 8001aa0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001a9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a9e:	bf00      	nop
 8001aa0:	08001ab1 	.word	0x08001ab1
 8001aa4:	08001c11 	.word	0x08001c11
 8001aa8:	08001b15 	.word	0x08001b15
 8001aac:	08001b93 	.word	0x08001b93
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ab0:	7c3b      	ldrb	r3, [r7, #16]
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	f040 80b8 	bne.w	8001c28 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ab8:	78bb      	ldrb	r3, [r7, #2]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f040 80b4 	bne.w	8001c28 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ac0:	8b3b      	ldrh	r3, [r7, #24]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d108      	bne.n	8001ad8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001ac6:	78fb      	ldrb	r3, [r7, #3]
 8001ac8:	687a      	ldr	r2, [r7, #4]
 8001aca:	212c      	movs	r1, #44	; 0x2c
 8001acc:	fb01 f303 	mul.w	r3, r1, r3
 8001ad0:	4413      	add	r3, r2
 8001ad2:	3355      	adds	r3, #85	; 0x55
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001ad8:	78fb      	ldrb	r3, [r7, #3]
 8001ada:	687a      	ldr	r2, [r7, #4]
 8001adc:	212c      	movs	r1, #44	; 0x2c
 8001ade:	fb01 f303 	mul.w	r3, r1, r3
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3355      	adds	r3, #85	; 0x55
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d109      	bne.n	8001b00 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001aec:	78fb      	ldrb	r3, [r7, #3]
 8001aee:	687a      	ldr	r2, [r7, #4]
 8001af0:	212c      	movs	r1, #44	; 0x2c
 8001af2:	fb01 f303 	mul.w	r3, r1, r3
 8001af6:	4413      	add	r3, r2
 8001af8:	3342      	adds	r3, #66	; 0x42
 8001afa:	2200      	movs	r2, #0
 8001afc:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001afe:	e093      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b00:	78fb      	ldrb	r3, [r7, #3]
 8001b02:	687a      	ldr	r2, [r7, #4]
 8001b04:	212c      	movs	r1, #44	; 0x2c
 8001b06:	fb01 f303 	mul.w	r3, r1, r3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3342      	adds	r3, #66	; 0x42
 8001b0e:	2202      	movs	r2, #2
 8001b10:	701a      	strb	r2, [r3, #0]
      break;
 8001b12:	e089      	b.n	8001c28 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001b14:	78bb      	ldrb	r3, [r7, #2]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d11d      	bne.n	8001b56 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b1a:	78fb      	ldrb	r3, [r7, #3]
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	212c      	movs	r1, #44	; 0x2c
 8001b20:	fb01 f303 	mul.w	r3, r1, r3
 8001b24:	4413      	add	r3, r2
 8001b26:	3355      	adds	r3, #85	; 0x55
 8001b28:	781b      	ldrb	r3, [r3, #0]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d109      	bne.n	8001b42 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b2e:	78fb      	ldrb	r3, [r7, #3]
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	212c      	movs	r1, #44	; 0x2c
 8001b34:	fb01 f303 	mul.w	r3, r1, r3
 8001b38:	4413      	add	r3, r2
 8001b3a:	3342      	adds	r3, #66	; 0x42
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001b40:	e073      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b42:	78fb      	ldrb	r3, [r7, #3]
 8001b44:	687a      	ldr	r2, [r7, #4]
 8001b46:	212c      	movs	r1, #44	; 0x2c
 8001b48:	fb01 f303 	mul.w	r3, r1, r3
 8001b4c:	4413      	add	r3, r2
 8001b4e:	3342      	adds	r3, #66	; 0x42
 8001b50:	2202      	movs	r2, #2
 8001b52:	701a      	strb	r2, [r3, #0]
      break;
 8001b54:	e069      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	3354      	adds	r3, #84	; 0x54
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d109      	bne.n	8001b7e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	212c      	movs	r1, #44	; 0x2c
 8001b70:	fb01 f303 	mul.w	r3, r1, r3
 8001b74:	4413      	add	r3, r2
 8001b76:	3342      	adds	r3, #66	; 0x42
 8001b78:	2200      	movs	r2, #0
 8001b7a:	701a      	strb	r2, [r3, #0]
      break;
 8001b7c:	e055      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001b7e:	78fb      	ldrb	r3, [r7, #3]
 8001b80:	687a      	ldr	r2, [r7, #4]
 8001b82:	212c      	movs	r1, #44	; 0x2c
 8001b84:	fb01 f303 	mul.w	r3, r1, r3
 8001b88:	4413      	add	r3, r2
 8001b8a:	3342      	adds	r3, #66	; 0x42
 8001b8c:	2202      	movs	r2, #2
 8001b8e:	701a      	strb	r2, [r3, #0]
      break;
 8001b90:	e04b      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001b92:	78bb      	ldrb	r3, [r7, #2]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d11d      	bne.n	8001bd4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	687a      	ldr	r2, [r7, #4]
 8001b9c:	212c      	movs	r1, #44	; 0x2c
 8001b9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ba2:	4413      	add	r3, r2
 8001ba4:	3355      	adds	r3, #85	; 0x55
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d109      	bne.n	8001bc0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001bac:	78fb      	ldrb	r3, [r7, #3]
 8001bae:	687a      	ldr	r2, [r7, #4]
 8001bb0:	212c      	movs	r1, #44	; 0x2c
 8001bb2:	fb01 f303 	mul.w	r3, r1, r3
 8001bb6:	4413      	add	r3, r2
 8001bb8:	3342      	adds	r3, #66	; 0x42
 8001bba:	2200      	movs	r2, #0
 8001bbc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001bbe:	e034      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bc0:	78fb      	ldrb	r3, [r7, #3]
 8001bc2:	687a      	ldr	r2, [r7, #4]
 8001bc4:	212c      	movs	r1, #44	; 0x2c
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	3342      	adds	r3, #66	; 0x42
 8001bce:	2202      	movs	r2, #2
 8001bd0:	701a      	strb	r2, [r3, #0]
      break;
 8001bd2:	e02a      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001bd4:	78fb      	ldrb	r3, [r7, #3]
 8001bd6:	687a      	ldr	r2, [r7, #4]
 8001bd8:	212c      	movs	r1, #44	; 0x2c
 8001bda:	fb01 f303 	mul.w	r3, r1, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	3354      	adds	r3, #84	; 0x54
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d109      	bne.n	8001bfc <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001be8:	78fb      	ldrb	r3, [r7, #3]
 8001bea:	687a      	ldr	r2, [r7, #4]
 8001bec:	212c      	movs	r1, #44	; 0x2c
 8001bee:	fb01 f303 	mul.w	r3, r1, r3
 8001bf2:	4413      	add	r3, r2
 8001bf4:	3342      	adds	r3, #66	; 0x42
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
      break;
 8001bfa:	e016      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001bfc:	78fb      	ldrb	r3, [r7, #3]
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	212c      	movs	r1, #44	; 0x2c
 8001c02:	fb01 f303 	mul.w	r3, r1, r3
 8001c06:	4413      	add	r3, r2
 8001c08:	3342      	adds	r3, #66	; 0x42
 8001c0a:	2202      	movs	r2, #2
 8001c0c:	701a      	strb	r2, [r3, #0]
      break;
 8001c0e:	e00c      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001c10:	78fb      	ldrb	r3, [r7, #3]
 8001c12:	687a      	ldr	r2, [r7, #4]
 8001c14:	212c      	movs	r1, #44	; 0x2c
 8001c16:	fb01 f303 	mul.w	r3, r1, r3
 8001c1a:	4413      	add	r3, r2
 8001c1c:	3342      	adds	r3, #66	; 0x42
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]
      break;
 8001c22:	e002      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001c24:	bf00      	nop
 8001c26:	e000      	b.n	8001c2a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001c28:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001c2a:	78fb      	ldrb	r3, [r7, #3]
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	212c      	movs	r1, #44	; 0x2c
 8001c30:	fb01 f303 	mul.w	r3, r1, r3
 8001c34:	4413      	add	r3, r2
 8001c36:	3344      	adds	r3, #68	; 0x44
 8001c38:	697a      	ldr	r2, [r7, #20]
 8001c3a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001c3c:	78fb      	ldrb	r3, [r7, #3]
 8001c3e:	8b3a      	ldrh	r2, [r7, #24]
 8001c40:	6879      	ldr	r1, [r7, #4]
 8001c42:	202c      	movs	r0, #44	; 0x2c
 8001c44:	fb00 f303 	mul.w	r3, r0, r3
 8001c48:	440b      	add	r3, r1
 8001c4a:	334c      	adds	r3, #76	; 0x4c
 8001c4c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001c4e:	78fb      	ldrb	r3, [r7, #3]
 8001c50:	687a      	ldr	r2, [r7, #4]
 8001c52:	212c      	movs	r1, #44	; 0x2c
 8001c54:	fb01 f303 	mul.w	r3, r1, r3
 8001c58:	4413      	add	r3, r2
 8001c5a:	3360      	adds	r3, #96	; 0x60
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	687a      	ldr	r2, [r7, #4]
 8001c64:	212c      	movs	r1, #44	; 0x2c
 8001c66:	fb01 f303 	mul.w	r3, r1, r3
 8001c6a:	4413      	add	r3, r2
 8001c6c:	3350      	adds	r3, #80	; 0x50
 8001c6e:	2200      	movs	r2, #0
 8001c70:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001c72:	78fb      	ldrb	r3, [r7, #3]
 8001c74:	687a      	ldr	r2, [r7, #4]
 8001c76:	212c      	movs	r1, #44	; 0x2c
 8001c78:	fb01 f303 	mul.w	r3, r1, r3
 8001c7c:	4413      	add	r3, r2
 8001c7e:	3339      	adds	r3, #57	; 0x39
 8001c80:	78fa      	ldrb	r2, [r7, #3]
 8001c82:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001c84:	78fb      	ldrb	r3, [r7, #3]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	212c      	movs	r1, #44	; 0x2c
 8001c8a:	fb01 f303 	mul.w	r3, r1, r3
 8001c8e:	4413      	add	r3, r2
 8001c90:	3361      	adds	r3, #97	; 0x61
 8001c92:	2200      	movs	r2, #0
 8001c94:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6818      	ldr	r0, [r3, #0]
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	222c      	movs	r2, #44	; 0x2c
 8001c9e:	fb02 f303 	mul.w	r3, r2, r3
 8001ca2:	3338      	adds	r3, #56	; 0x38
 8001ca4:	687a      	ldr	r2, [r7, #4]
 8001ca6:	18d1      	adds	r1, r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691b      	ldr	r3, [r3, #16]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	f003 fe3e 	bl	8005930 <USB_HC_StartXfer>
 8001cb4:	4603      	mov	r3, r0
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop

08001cc0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b086      	sub	sp, #24
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	f003 fb69 	bl	80053ae <USB_GetMode>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	f040 80f6 	bne.w	8001ed0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f003 fb4d 	bl	8005388 <USB_ReadInterrupts>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f000 80ec 	beq.w	8001ece <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f003 fb44 	bl	8005388 <USB_ReadInterrupts>
 8001d00:	4603      	mov	r3, r0
 8001d02:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001d0a:	d104      	bne.n	8001d16 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001d14:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f003 fb34 	bl	8005388 <USB_ReadInterrupts>
 8001d20:	4603      	mov	r3, r0
 8001d22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001d2a:	d104      	bne.n	8001d36 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001d34:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f003 fb24 	bl	8005388 <USB_ReadInterrupts>
 8001d40:	4603      	mov	r3, r0
 8001d42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001d46:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d4a:	d104      	bne.n	8001d56 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001d54:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f003 fb14 	bl	8005388 <USB_ReadInterrupts>
 8001d60:	4603      	mov	r3, r0
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b02      	cmp	r3, #2
 8001d68:	d103      	bne.n	8001d72 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2202      	movs	r2, #2
 8001d70:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f003 fb06 	bl	8005388 <USB_ReadInterrupts>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001d82:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001d86:	d11c      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001d90:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0301 	and.w	r3, r3, #1
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d10f      	bne.n	8001dc2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001da2:	2110      	movs	r1, #16
 8001da4:	6938      	ldr	r0, [r7, #16]
 8001da6:	f003 f9f5 	bl	8005194 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001daa:	6938      	ldr	r0, [r7, #16]
 8001dac:	f003 fa26 	bl	80051fc <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	2101      	movs	r1, #1
 8001db6:	4618      	mov	r0, r3
 8001db8:	f003 fbfc 	bl	80055b4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f005 fa05 	bl	80071cc <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f003 fade 	bl	8005388 <USB_ReadInterrupts>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001dd2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001dd6:	d102      	bne.n	8001dde <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f001 f882 	bl	8002ee2 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4618      	mov	r0, r3
 8001de4:	f003 fad0 	bl	8005388 <USB_ReadInterrupts>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b08      	cmp	r3, #8
 8001df0:	d106      	bne.n	8001e00 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8001df2:	6878      	ldr	r0, [r7, #4]
 8001df4:	f005 f9ce 	bl	8007194 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2208      	movs	r2, #8
 8001dfe:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f003 fabf 	bl	8005388 <USB_ReadInterrupts>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d101      	bne.n	8001e18 <HAL_HCD_IRQHandler+0x158>
 8001e14:	2301      	movs	r3, #1
 8001e16:	e000      	b.n	8001e1a <HAL_HCD_IRQHandler+0x15a>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d012      	beq.n	8001e44 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	699a      	ldr	r2, [r3, #24]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f022 0210 	bic.w	r2, r2, #16
 8001e2c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 ff85 	bl	8002d3e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0210 	orr.w	r2, r2, #16
 8001e42:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fa9d 	bl	8005388 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e54:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001e58:	d13a      	bne.n	8001ed0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 fea8 	bl	8005bb4 <USB_HC_ReadInterrupt>
 8001e64:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001e66:	2300      	movs	r3, #0
 8001e68:	617b      	str	r3, [r7, #20]
 8001e6a:	e025      	b.n	8001eb8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8001e6c:	697b      	ldr	r3, [r7, #20]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	fa22 f303 	lsr.w	r3, r2, r3
 8001e78:	f003 0301 	and.w	r3, r3, #1
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d018      	beq.n	8001eb2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	015a      	lsls	r2, r3, #5
 8001e84:	68fb      	ldr	r3, [r7, #12]
 8001e86:	4413      	add	r3, r2
 8001e88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001e92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e96:	d106      	bne.n	8001ea6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	b2db      	uxtb	r3, r3
 8001e9c:	4619      	mov	r1, r3
 8001e9e:	6878      	ldr	r0, [r7, #4]
 8001ea0:	f000 f88f 	bl	8001fc2 <HCD_HC_IN_IRQHandler>
 8001ea4:	e005      	b.n	8001eb2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	4619      	mov	r1, r3
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f000 fbdd 	bl	800266c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	3301      	adds	r3, #1
 8001eb6:	617b      	str	r3, [r7, #20]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	697a      	ldr	r2, [r7, #20]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d3d4      	bcc.n	8001e6c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001eca:	615a      	str	r2, [r3, #20]
 8001ecc:	e000      	b.n	8001ed0 <HAL_HCD_IRQHandler+0x210>
      return;
 8001ece:	bf00      	nop
    }
  }
}
 8001ed0:	3718      	adds	r7, #24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b082      	sub	sp, #8
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d101      	bne.n	8001eec <HAL_HCD_Start+0x16>
 8001ee8:	2302      	movs	r3, #2
 8001eea:	e013      	b.n	8001f14 <HAL_HCD_Start+0x3e>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2201      	movs	r2, #1
 8001ef0:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	2101      	movs	r1, #1
 8001efa:	4618      	mov	r0, r3
 8001efc:	f003 fb94 	bl	8005628 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 f8d6 	bl	80050b6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f12:	2300      	movs	r3, #0
}
 8001f14:	4618      	mov	r0, r3
 8001f16:	3708      	adds	r7, #8
 8001f18:	46bd      	mov	sp, r7
 8001f1a:	bd80      	pop	{r7, pc}

08001f1c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d101      	bne.n	8001f32 <HAL_HCD_Stop+0x16>
 8001f2e:	2302      	movs	r3, #2
 8001f30:	e00d      	b.n	8001f4e <HAL_HCD_Stop+0x32>
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2201      	movs	r2, #1
 8001f36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f003 ff82 	bl	8005e48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8001f4c:	2300      	movs	r3, #0
}
 8001f4e:	4618      	mov	r0, r3
 8001f50:	3708      	adds	r7, #8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}

08001f56 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f56:	b480      	push	{r7}
 8001f58:	b083      	sub	sp, #12
 8001f5a:	af00      	add	r7, sp, #0
 8001f5c:	6078      	str	r0, [r7, #4]
 8001f5e:	460b      	mov	r3, r1
 8001f60:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8001f62:	78fb      	ldrb	r3, [r7, #3]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	212c      	movs	r1, #44	; 0x2c
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	3360      	adds	r3, #96	; 0x60
 8001f70:	781b      	ldrb	r3, [r3, #0]
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b083      	sub	sp, #12
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	6078      	str	r0, [r7, #4]
 8001f86:	460b      	mov	r3, r1
 8001f88:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	687a      	ldr	r2, [r7, #4]
 8001f8e:	212c      	movs	r1, #44	; 0x2c
 8001f90:	fb01 f303 	mul.w	r3, r1, r3
 8001f94:	4413      	add	r3, r2
 8001f96:	3350      	adds	r3, #80	; 0x50
 8001f98:	681b      	ldr	r3, [r3, #0]
}
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	370c      	adds	r7, #12
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa4:	4770      	bx	lr

08001fa6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8001fa6:	b580      	push	{r7, lr}
 8001fa8:	b082      	sub	sp, #8
 8001faa:	af00      	add	r7, sp, #0
 8001fac:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 fb88 	bl	80056c8 <USB_GetCurrentFrame>
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}

08001fc2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8001fc2:	b580      	push	{r7, lr}
 8001fc4:	b086      	sub	sp, #24
 8001fc6:	af00      	add	r7, sp, #0
 8001fc8:	6078      	str	r0, [r7, #4]
 8001fca:	460b      	mov	r3, r1
 8001fcc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8001fd8:	78fb      	ldrb	r3, [r7, #3]
 8001fda:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	015a      	lsls	r2, r3, #5
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	2b04      	cmp	r3, #4
 8001ff0:	d11a      	bne.n	8002028 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	015a      	lsls	r2, r3, #5
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	4413      	add	r3, r2
 8001ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8001ffe:	461a      	mov	r2, r3
 8002000:	2304      	movs	r3, #4
 8002002:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	212c      	movs	r1, #44	; 0x2c
 800200a:	fb01 f303 	mul.w	r3, r1, r3
 800200e:	4413      	add	r3, r2
 8002010:	3361      	adds	r3, #97	; 0x61
 8002012:	2206      	movs	r2, #6
 8002014:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	b2d2      	uxtb	r2, r2
 800201e:	4611      	mov	r1, r2
 8002020:	4618      	mov	r0, r3
 8002022:	f003 fdd8 	bl	8005bd6 <USB_HC_Halt>
 8002026:	e0af      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	015a      	lsls	r2, r3, #5
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	4413      	add	r3, r2
 8002030:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002034:	689b      	ldr	r3, [r3, #8]
 8002036:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800203a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800203e:	d11b      	bne.n	8002078 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	015a      	lsls	r2, r3, #5
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	4413      	add	r3, r2
 8002048:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800204c:	461a      	mov	r2, r3
 800204e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002052:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	212c      	movs	r1, #44	; 0x2c
 800205a:	fb01 f303 	mul.w	r3, r1, r3
 800205e:	4413      	add	r3, r2
 8002060:	3361      	adds	r3, #97	; 0x61
 8002062:	2207      	movs	r2, #7
 8002064:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	68fa      	ldr	r2, [r7, #12]
 800206c:	b2d2      	uxtb	r2, r2
 800206e:	4611      	mov	r1, r2
 8002070:	4618      	mov	r0, r3
 8002072:	f003 fdb0 	bl	8005bd6 <USB_HC_Halt>
 8002076:	e087      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	015a      	lsls	r2, r3, #5
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	4413      	add	r3, r2
 8002080:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002084:	689b      	ldr	r3, [r3, #8]
 8002086:	f003 0320 	and.w	r3, r3, #32
 800208a:	2b20      	cmp	r3, #32
 800208c:	d109      	bne.n	80020a2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	015a      	lsls	r2, r3, #5
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4413      	add	r3, r2
 8002096:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800209a:	461a      	mov	r2, r3
 800209c:	2320      	movs	r3, #32
 800209e:	6093      	str	r3, [r2, #8]
 80020a0:	e072      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	015a      	lsls	r2, r3, #5
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	4413      	add	r3, r2
 80020aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f003 0308 	and.w	r3, r3, #8
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d11a      	bne.n	80020ee <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	015a      	lsls	r2, r3, #5
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4413      	add	r3, r2
 80020c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020c4:	461a      	mov	r2, r3
 80020c6:	2308      	movs	r3, #8
 80020c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	212c      	movs	r1, #44	; 0x2c
 80020d0:	fb01 f303 	mul.w	r3, r1, r3
 80020d4:	4413      	add	r3, r2
 80020d6:	3361      	adds	r3, #97	; 0x61
 80020d8:	2205      	movs	r2, #5
 80020da:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	b2d2      	uxtb	r2, r2
 80020e4:	4611      	mov	r1, r2
 80020e6:	4618      	mov	r0, r3
 80020e8:	f003 fd75 	bl	8005bd6 <USB_HC_Halt>
 80020ec:	e04c      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	693b      	ldr	r3, [r7, #16]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002104:	d11b      	bne.n	800213e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	015a      	lsls	r2, r3, #5
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	4413      	add	r3, r2
 800210e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002112:	461a      	mov	r2, r3
 8002114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002118:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800211a:	687a      	ldr	r2, [r7, #4]
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	212c      	movs	r1, #44	; 0x2c
 8002120:	fb01 f303 	mul.w	r3, r1, r3
 8002124:	4413      	add	r3, r2
 8002126:	3361      	adds	r3, #97	; 0x61
 8002128:	2208      	movs	r2, #8
 800212a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	68fa      	ldr	r2, [r7, #12]
 8002132:	b2d2      	uxtb	r2, r2
 8002134:	4611      	mov	r1, r2
 8002136:	4618      	mov	r0, r3
 8002138:	f003 fd4d 	bl	8005bd6 <USB_HC_Halt>
 800213c:	e024      	b.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	015a      	lsls	r2, r3, #5
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4413      	add	r3, r2
 8002146:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800214a:	689b      	ldr	r3, [r3, #8]
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b80      	cmp	r3, #128	; 0x80
 8002152:	d119      	bne.n	8002188 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	015a      	lsls	r2, r3, #5
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	4413      	add	r3, r2
 800215c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002160:	461a      	mov	r2, r3
 8002162:	2380      	movs	r3, #128	; 0x80
 8002164:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3361      	adds	r3, #97	; 0x61
 8002174:	2206      	movs	r2, #6
 8002176:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	68fa      	ldr	r2, [r7, #12]
 800217e:	b2d2      	uxtb	r2, r2
 8002180:	4611      	mov	r1, r2
 8002182:	4618      	mov	r0, r3
 8002184:	f003 fd27 	bl	8005bd6 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	015a      	lsls	r2, r3, #5
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	4413      	add	r3, r2
 8002190:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800219a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800219e:	d112      	bne.n	80021c6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	68fa      	ldr	r2, [r7, #12]
 80021a6:	b2d2      	uxtb	r2, r2
 80021a8:	4611      	mov	r1, r2
 80021aa:	4618      	mov	r0, r3
 80021ac:	f003 fd13 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	015a      	lsls	r2, r3, #5
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	4413      	add	r3, r2
 80021b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021bc:	461a      	mov	r2, r3
 80021be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021c2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80021c4:	e24e      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	015a      	lsls	r2, r3, #5
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	4413      	add	r3, r2
 80021ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	f003 0301 	and.w	r3, r3, #1
 80021d8:	2b01      	cmp	r3, #1
 80021da:	f040 80df 	bne.w	800239c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	691b      	ldr	r3, [r3, #16]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d019      	beq.n	800221a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	212c      	movs	r1, #44	; 0x2c
 80021ec:	fb01 f303 	mul.w	r3, r1, r3
 80021f0:	4413      	add	r3, r2
 80021f2:	3348      	adds	r3, #72	; 0x48
 80021f4:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	0159      	lsls	r1, r3, #5
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	440b      	add	r3, r1
 80021fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002208:	1ad2      	subs	r2, r2, r3
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	202c      	movs	r0, #44	; 0x2c
 8002210:	fb00 f303 	mul.w	r3, r0, r3
 8002214:	440b      	add	r3, r1
 8002216:	3350      	adds	r3, #80	; 0x50
 8002218:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800221a:	687a      	ldr	r2, [r7, #4]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	212c      	movs	r1, #44	; 0x2c
 8002220:	fb01 f303 	mul.w	r3, r1, r3
 8002224:	4413      	add	r3, r2
 8002226:	3361      	adds	r3, #97	; 0x61
 8002228:	2201      	movs	r2, #1
 800222a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800222c:	687a      	ldr	r2, [r7, #4]
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	212c      	movs	r1, #44	; 0x2c
 8002232:	fb01 f303 	mul.w	r3, r1, r3
 8002236:	4413      	add	r3, r2
 8002238:	335c      	adds	r3, #92	; 0x5c
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	015a      	lsls	r2, r3, #5
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800224a:	461a      	mov	r2, r3
 800224c:	2301      	movs	r3, #1
 800224e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	212c      	movs	r1, #44	; 0x2c
 8002256:	fb01 f303 	mul.w	r3, r1, r3
 800225a:	4413      	add	r3, r2
 800225c:	333f      	adds	r3, #63	; 0x3f
 800225e:	781b      	ldrb	r3, [r3, #0]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d009      	beq.n	8002278 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002264:	687a      	ldr	r2, [r7, #4]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	212c      	movs	r1, #44	; 0x2c
 800226a:	fb01 f303 	mul.w	r3, r1, r3
 800226e:	4413      	add	r3, r2
 8002270:	333f      	adds	r3, #63	; 0x3f
 8002272:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002274:	2b02      	cmp	r3, #2
 8002276:	d111      	bne.n	800229c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	68fa      	ldr	r2, [r7, #12]
 800227e:	b2d2      	uxtb	r2, r2
 8002280:	4611      	mov	r1, r2
 8002282:	4618      	mov	r0, r3
 8002284:	f003 fca7 	bl	8005bd6 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	015a      	lsls	r2, r3, #5
 800228c:	693b      	ldr	r3, [r7, #16]
 800228e:	4413      	add	r3, r2
 8002290:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002294:	461a      	mov	r2, r3
 8002296:	2310      	movs	r3, #16
 8002298:	6093      	str	r3, [r2, #8]
 800229a:	e03a      	b.n	8002312 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800229c:	687a      	ldr	r2, [r7, #4]
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	212c      	movs	r1, #44	; 0x2c
 80022a2:	fb01 f303 	mul.w	r3, r1, r3
 80022a6:	4413      	add	r3, r2
 80022a8:	333f      	adds	r3, #63	; 0x3f
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	2b03      	cmp	r3, #3
 80022ae:	d009      	beq.n	80022c4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80022b0:	687a      	ldr	r2, [r7, #4]
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	212c      	movs	r1, #44	; 0x2c
 80022b6:	fb01 f303 	mul.w	r3, r1, r3
 80022ba:	4413      	add	r3, r2
 80022bc:	333f      	adds	r3, #63	; 0x3f
 80022be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80022c0:	2b01      	cmp	r3, #1
 80022c2:	d126      	bne.n	8002312 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	015a      	lsls	r2, r3, #5
 80022c8:	693b      	ldr	r3, [r7, #16]
 80022ca:	4413      	add	r3, r2
 80022cc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	0151      	lsls	r1, r2, #5
 80022d6:	693a      	ldr	r2, [r7, #16]
 80022d8:	440a      	add	r2, r1
 80022da:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80022de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80022e2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80022e4:	687a      	ldr	r2, [r7, #4]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	212c      	movs	r1, #44	; 0x2c
 80022ea:	fb01 f303 	mul.w	r3, r1, r3
 80022ee:	4413      	add	r3, r2
 80022f0:	3360      	adds	r3, #96	; 0x60
 80022f2:	2201      	movs	r2, #1
 80022f4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	b2d9      	uxtb	r1, r3
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	202c      	movs	r0, #44	; 0x2c
 8002300:	fb00 f303 	mul.w	r3, r0, r3
 8002304:	4413      	add	r3, r2
 8002306:	3360      	adds	r3, #96	; 0x60
 8002308:	781b      	ldrb	r3, [r3, #0]
 800230a:	461a      	mov	r2, r3
 800230c:	6878      	ldr	r0, [r7, #4]
 800230e:	f004 ff6b 	bl	80071e8 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	691b      	ldr	r3, [r3, #16]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d12b      	bne.n	8002372 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800231a:	687a      	ldr	r2, [r7, #4]
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	212c      	movs	r1, #44	; 0x2c
 8002320:	fb01 f303 	mul.w	r3, r1, r3
 8002324:	4413      	add	r3, r2
 8002326:	3348      	adds	r3, #72	; 0x48
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	6879      	ldr	r1, [r7, #4]
 800232c:	68fa      	ldr	r2, [r7, #12]
 800232e:	202c      	movs	r0, #44	; 0x2c
 8002330:	fb00 f202 	mul.w	r2, r0, r2
 8002334:	440a      	add	r2, r1
 8002336:	3240      	adds	r2, #64	; 0x40
 8002338:	8812      	ldrh	r2, [r2, #0]
 800233a:	fbb3 f3f2 	udiv	r3, r3, r2
 800233e:	f003 0301 	and.w	r3, r3, #1
 8002342:	2b00      	cmp	r3, #0
 8002344:	f000 818e 	beq.w	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	212c      	movs	r1, #44	; 0x2c
 800234e:	fb01 f303 	mul.w	r3, r1, r3
 8002352:	4413      	add	r3, r2
 8002354:	3354      	adds	r3, #84	; 0x54
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	f083 0301 	eor.w	r3, r3, #1
 800235c:	b2d8      	uxtb	r0, r3
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	212c      	movs	r1, #44	; 0x2c
 8002364:	fb01 f303 	mul.w	r3, r1, r3
 8002368:	4413      	add	r3, r2
 800236a:	3354      	adds	r3, #84	; 0x54
 800236c:	4602      	mov	r2, r0
 800236e:	701a      	strb	r2, [r3, #0]
}
 8002370:	e178      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002372:	687a      	ldr	r2, [r7, #4]
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	212c      	movs	r1, #44	; 0x2c
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	4413      	add	r3, r2
 800237e:	3354      	adds	r3, #84	; 0x54
 8002380:	781b      	ldrb	r3, [r3, #0]
 8002382:	f083 0301 	eor.w	r3, r3, #1
 8002386:	b2d8      	uxtb	r0, r3
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	212c      	movs	r1, #44	; 0x2c
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	4413      	add	r3, r2
 8002394:	3354      	adds	r3, #84	; 0x54
 8002396:	4602      	mov	r2, r0
 8002398:	701a      	strb	r2, [r3, #0]
}
 800239a:	e163      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	015a      	lsls	r2, r3, #5
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	4413      	add	r3, r2
 80023a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	f003 0302 	and.w	r3, r3, #2
 80023ae:	2b02      	cmp	r3, #2
 80023b0:	f040 80f6 	bne.w	80025a0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80023b4:	687a      	ldr	r2, [r7, #4]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	212c      	movs	r1, #44	; 0x2c
 80023ba:	fb01 f303 	mul.w	r3, r1, r3
 80023be:	4413      	add	r3, r2
 80023c0:	3361      	adds	r3, #97	; 0x61
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b01      	cmp	r3, #1
 80023c6:	d109      	bne.n	80023dc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80023c8:	687a      	ldr	r2, [r7, #4]
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	212c      	movs	r1, #44	; 0x2c
 80023ce:	fb01 f303 	mul.w	r3, r1, r3
 80023d2:	4413      	add	r3, r2
 80023d4:	3360      	adds	r3, #96	; 0x60
 80023d6:	2201      	movs	r2, #1
 80023d8:	701a      	strb	r2, [r3, #0]
 80023da:	e0c9      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80023dc:	687a      	ldr	r2, [r7, #4]
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	212c      	movs	r1, #44	; 0x2c
 80023e2:	fb01 f303 	mul.w	r3, r1, r3
 80023e6:	4413      	add	r3, r2
 80023e8:	3361      	adds	r3, #97	; 0x61
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	2b05      	cmp	r3, #5
 80023ee:	d109      	bne.n	8002404 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80023f0:	687a      	ldr	r2, [r7, #4]
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	212c      	movs	r1, #44	; 0x2c
 80023f6:	fb01 f303 	mul.w	r3, r1, r3
 80023fa:	4413      	add	r3, r2
 80023fc:	3360      	adds	r3, #96	; 0x60
 80023fe:	2205      	movs	r2, #5
 8002400:	701a      	strb	r2, [r3, #0]
 8002402:	e0b5      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	212c      	movs	r1, #44	; 0x2c
 800240a:	fb01 f303 	mul.w	r3, r1, r3
 800240e:	4413      	add	r3, r2
 8002410:	3361      	adds	r3, #97	; 0x61
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b06      	cmp	r3, #6
 8002416:	d009      	beq.n	800242c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002418:	687a      	ldr	r2, [r7, #4]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	212c      	movs	r1, #44	; 0x2c
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	4413      	add	r3, r2
 8002424:	3361      	adds	r3, #97	; 0x61
 8002426:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002428:	2b08      	cmp	r3, #8
 800242a:	d150      	bne.n	80024ce <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	212c      	movs	r1, #44	; 0x2c
 8002432:	fb01 f303 	mul.w	r3, r1, r3
 8002436:	4413      	add	r3, r2
 8002438:	335c      	adds	r3, #92	; 0x5c
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	1c5a      	adds	r2, r3, #1
 800243e:	6879      	ldr	r1, [r7, #4]
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	202c      	movs	r0, #44	; 0x2c
 8002444:	fb00 f303 	mul.w	r3, r0, r3
 8002448:	440b      	add	r3, r1
 800244a:	335c      	adds	r3, #92	; 0x5c
 800244c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	212c      	movs	r1, #44	; 0x2c
 8002454:	fb01 f303 	mul.w	r3, r1, r3
 8002458:	4413      	add	r3, r2
 800245a:	335c      	adds	r3, #92	; 0x5c
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	2b02      	cmp	r3, #2
 8002460:	d912      	bls.n	8002488 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	212c      	movs	r1, #44	; 0x2c
 8002468:	fb01 f303 	mul.w	r3, r1, r3
 800246c:	4413      	add	r3, r2
 800246e:	335c      	adds	r3, #92	; 0x5c
 8002470:	2200      	movs	r2, #0
 8002472:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002474:	687a      	ldr	r2, [r7, #4]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	212c      	movs	r1, #44	; 0x2c
 800247a:	fb01 f303 	mul.w	r3, r1, r3
 800247e:	4413      	add	r3, r2
 8002480:	3360      	adds	r3, #96	; 0x60
 8002482:	2204      	movs	r2, #4
 8002484:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002486:	e073      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002488:	687a      	ldr	r2, [r7, #4]
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	212c      	movs	r1, #44	; 0x2c
 800248e:	fb01 f303 	mul.w	r3, r1, r3
 8002492:	4413      	add	r3, r2
 8002494:	3360      	adds	r3, #96	; 0x60
 8002496:	2202      	movs	r2, #2
 8002498:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	015a      	lsls	r2, r3, #5
 800249e:	693b      	ldr	r3, [r7, #16]
 80024a0:	4413      	add	r3, r2
 80024a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80024aa:	68bb      	ldr	r3, [r7, #8]
 80024ac:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80024b0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80024b8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	015a      	lsls	r2, r3, #5
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	4413      	add	r3, r2
 80024c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c6:	461a      	mov	r2, r3
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80024cc:	e050      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80024ce:	687a      	ldr	r2, [r7, #4]
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	212c      	movs	r1, #44	; 0x2c
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	4413      	add	r3, r2
 80024da:	3361      	adds	r3, #97	; 0x61
 80024dc:	781b      	ldrb	r3, [r3, #0]
 80024de:	2b03      	cmp	r3, #3
 80024e0:	d122      	bne.n	8002528 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	212c      	movs	r1, #44	; 0x2c
 80024e8:	fb01 f303 	mul.w	r3, r1, r3
 80024ec:	4413      	add	r3, r2
 80024ee:	3360      	adds	r3, #96	; 0x60
 80024f0:	2202      	movs	r2, #2
 80024f2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002504:	68bb      	ldr	r3, [r7, #8]
 8002506:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800250a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800250c:	68bb      	ldr	r3, [r7, #8]
 800250e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002512:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	015a      	lsls	r2, r3, #5
 8002518:	693b      	ldr	r3, [r7, #16]
 800251a:	4413      	add	r3, r2
 800251c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002520:	461a      	mov	r2, r3
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	6013      	str	r3, [r2, #0]
 8002526:	e023      	b.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	212c      	movs	r1, #44	; 0x2c
 800252e:	fb01 f303 	mul.w	r3, r1, r3
 8002532:	4413      	add	r3, r2
 8002534:	3361      	adds	r3, #97	; 0x61
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b07      	cmp	r3, #7
 800253a:	d119      	bne.n	8002570 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	212c      	movs	r1, #44	; 0x2c
 8002542:	fb01 f303 	mul.w	r3, r1, r3
 8002546:	4413      	add	r3, r2
 8002548:	335c      	adds	r3, #92	; 0x5c
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	1c5a      	adds	r2, r3, #1
 800254e:	6879      	ldr	r1, [r7, #4]
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	202c      	movs	r0, #44	; 0x2c
 8002554:	fb00 f303 	mul.w	r3, r0, r3
 8002558:	440b      	add	r3, r1
 800255a:	335c      	adds	r3, #92	; 0x5c
 800255c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800255e:	687a      	ldr	r2, [r7, #4]
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	212c      	movs	r1, #44	; 0x2c
 8002564:	fb01 f303 	mul.w	r3, r1, r3
 8002568:	4413      	add	r3, r2
 800256a:	3360      	adds	r3, #96	; 0x60
 800256c:	2204      	movs	r2, #4
 800256e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	461a      	mov	r2, r3
 800257e:	2302      	movs	r3, #2
 8002580:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	b2d9      	uxtb	r1, r3
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	202c      	movs	r0, #44	; 0x2c
 800258c:	fb00 f303 	mul.w	r3, r0, r3
 8002590:	4413      	add	r3, r2
 8002592:	3360      	adds	r3, #96	; 0x60
 8002594:	781b      	ldrb	r3, [r3, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	6878      	ldr	r0, [r7, #4]
 800259a:	f004 fe25 	bl	80071e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800259e:	e061      	b.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	015a      	lsls	r2, r3, #5
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	4413      	add	r3, r2
 80025a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	f003 0310 	and.w	r3, r3, #16
 80025b2:	2b10      	cmp	r3, #16
 80025b4:	d156      	bne.n	8002664 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	212c      	movs	r1, #44	; 0x2c
 80025bc:	fb01 f303 	mul.w	r3, r1, r3
 80025c0:	4413      	add	r3, r2
 80025c2:	333f      	adds	r3, #63	; 0x3f
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d111      	bne.n	80025ee <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	335c      	adds	r3, #92	; 0x5c
 80025d8:	2200      	movs	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68fa      	ldr	r2, [r7, #12]
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	4611      	mov	r1, r2
 80025e6:	4618      	mov	r0, r3
 80025e8:	f003 faf5 	bl	8005bd6 <USB_HC_Halt>
 80025ec:	e031      	b.n	8002652 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80025ee:	687a      	ldr	r2, [r7, #4]
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	212c      	movs	r1, #44	; 0x2c
 80025f4:	fb01 f303 	mul.w	r3, r1, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	333f      	adds	r3, #63	; 0x3f
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d009      	beq.n	8002616 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	212c      	movs	r1, #44	; 0x2c
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	4413      	add	r3, r2
 800260e:	333f      	adds	r3, #63	; 0x3f
 8002610:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002612:	2b02      	cmp	r3, #2
 8002614:	d11d      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	212c      	movs	r1, #44	; 0x2c
 800261c:	fb01 f303 	mul.w	r3, r1, r3
 8002620:	4413      	add	r3, r2
 8002622:	335c      	adds	r3, #92	; 0x5c
 8002624:	2200      	movs	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	691b      	ldr	r3, [r3, #16]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d110      	bne.n	8002652 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	3361      	adds	r3, #97	; 0x61
 800263e:	2203      	movs	r2, #3
 8002640:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	b2d2      	uxtb	r2, r2
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f003 fac2 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	015a      	lsls	r2, r3, #5
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	4413      	add	r3, r2
 800265a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265e:	461a      	mov	r2, r3
 8002660:	2310      	movs	r3, #16
 8002662:	6093      	str	r3, [r2, #8]
}
 8002664:	bf00      	nop
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	460b      	mov	r3, r1
 8002676:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002682:	78fb      	ldrb	r3, [r7, #3]
 8002684:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	015a      	lsls	r2, r3, #5
 800268a:	69bb      	ldr	r3, [r7, #24]
 800268c:	4413      	add	r3, r2
 800268e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002692:	689b      	ldr	r3, [r3, #8]
 8002694:	f003 0304 	and.w	r3, r3, #4
 8002698:	2b04      	cmp	r3, #4
 800269a:	d11a      	bne.n	80026d2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	2304      	movs	r3, #4
 80026ac:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80026ae:	687a      	ldr	r2, [r7, #4]
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	212c      	movs	r1, #44	; 0x2c
 80026b4:	fb01 f303 	mul.w	r3, r1, r3
 80026b8:	4413      	add	r3, r2
 80026ba:	3361      	adds	r3, #97	; 0x61
 80026bc:	2206      	movs	r2, #6
 80026be:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	697a      	ldr	r2, [r7, #20]
 80026c6:	b2d2      	uxtb	r2, r2
 80026c8:	4611      	mov	r1, r2
 80026ca:	4618      	mov	r0, r3
 80026cc:	f003 fa83 	bl	8005bd6 <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 80026d0:	e331      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	015a      	lsls	r2, r3, #5
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	4413      	add	r3, r2
 80026da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	f003 0320 	and.w	r3, r3, #32
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d12e      	bne.n	8002746 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	015a      	lsls	r2, r3, #5
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	4413      	add	r3, r2
 80026f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f4:	461a      	mov	r2, r3
 80026f6:	2320      	movs	r3, #32
 80026f8:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	333d      	adds	r3, #61	; 0x3d
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	2b01      	cmp	r3, #1
 800270c:	f040 8313 	bne.w	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002710:	687a      	ldr	r2, [r7, #4]
 8002712:	697b      	ldr	r3, [r7, #20]
 8002714:	212c      	movs	r1, #44	; 0x2c
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4413      	add	r3, r2
 800271c:	333d      	adds	r3, #61	; 0x3d
 800271e:	2200      	movs	r2, #0
 8002720:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	212c      	movs	r1, #44	; 0x2c
 8002728:	fb01 f303 	mul.w	r3, r1, r3
 800272c:	4413      	add	r3, r2
 800272e:	3360      	adds	r3, #96	; 0x60
 8002730:	2202      	movs	r2, #2
 8002732:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	b2d2      	uxtb	r2, r2
 800273c:	4611      	mov	r1, r2
 800273e:	4618      	mov	r0, r3
 8002740:	f003 fa49 	bl	8005bd6 <USB_HC_Halt>
}
 8002744:	e2f7      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002746:	697b      	ldr	r3, [r7, #20]
 8002748:	015a      	lsls	r2, r3, #5
 800274a:	69bb      	ldr	r3, [r7, #24]
 800274c:	4413      	add	r3, r2
 800274e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002752:	689b      	ldr	r3, [r3, #8]
 8002754:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800275c:	d112      	bne.n	8002784 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800275e:	697b      	ldr	r3, [r7, #20]
 8002760:	015a      	lsls	r2, r3, #5
 8002762:	69bb      	ldr	r3, [r7, #24]
 8002764:	4413      	add	r3, r2
 8002766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276a:	461a      	mov	r2, r3
 800276c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002770:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	b2d2      	uxtb	r2, r2
 800277a:	4611      	mov	r1, r2
 800277c:	4618      	mov	r0, r3
 800277e:	f003 fa2a 	bl	8005bd6 <USB_HC_Halt>
}
 8002782:	e2d8      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002784:	697b      	ldr	r3, [r7, #20]
 8002786:	015a      	lsls	r2, r3, #5
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	4413      	add	r3, r2
 800278c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 0301 	and.w	r3, r3, #1
 8002796:	2b01      	cmp	r3, #1
 8002798:	d140      	bne.n	800281c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	212c      	movs	r1, #44	; 0x2c
 80027a0:	fb01 f303 	mul.w	r3, r1, r3
 80027a4:	4413      	add	r3, r2
 80027a6:	335c      	adds	r3, #92	; 0x5c
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	015a      	lsls	r2, r3, #5
 80027b0:	69bb      	ldr	r3, [r7, #24]
 80027b2:	4413      	add	r3, r2
 80027b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027be:	2b40      	cmp	r3, #64	; 0x40
 80027c0:	d111      	bne.n	80027e6 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	697b      	ldr	r3, [r7, #20]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	333d      	adds	r3, #61	; 0x3d
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	015a      	lsls	r2, r3, #5
 80027d8:	69bb      	ldr	r3, [r7, #24]
 80027da:	4413      	add	r3, r2
 80027dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027e0:	461a      	mov	r2, r3
 80027e2:	2340      	movs	r3, #64	; 0x40
 80027e4:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80027e6:	697b      	ldr	r3, [r7, #20]
 80027e8:	015a      	lsls	r2, r3, #5
 80027ea:	69bb      	ldr	r3, [r7, #24]
 80027ec:	4413      	add	r3, r2
 80027ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f2:	461a      	mov	r2, r3
 80027f4:	2301      	movs	r3, #1
 80027f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3361      	adds	r3, #97	; 0x61
 8002806:	2201      	movs	r2, #1
 8002808:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	697a      	ldr	r2, [r7, #20]
 8002810:	b2d2      	uxtb	r2, r2
 8002812:	4611      	mov	r1, r2
 8002814:	4618      	mov	r0, r3
 8002816:	f003 f9de 	bl	8005bd6 <USB_HC_Halt>
}
 800281a:	e28c      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	015a      	lsls	r2, r3, #5
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	4413      	add	r3, r2
 8002824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002828:	689b      	ldr	r3, [r3, #8]
 800282a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800282e:	2b40      	cmp	r3, #64	; 0x40
 8002830:	d12c      	bne.n	800288c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	3361      	adds	r3, #97	; 0x61
 8002840:	2204      	movs	r2, #4
 8002842:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	212c      	movs	r1, #44	; 0x2c
 800284a:	fb01 f303 	mul.w	r3, r1, r3
 800284e:	4413      	add	r3, r2
 8002850:	333d      	adds	r3, #61	; 0x3d
 8002852:	2201      	movs	r2, #1
 8002854:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002856:	687a      	ldr	r2, [r7, #4]
 8002858:	697b      	ldr	r3, [r7, #20]
 800285a:	212c      	movs	r1, #44	; 0x2c
 800285c:	fb01 f303 	mul.w	r3, r1, r3
 8002860:	4413      	add	r3, r2
 8002862:	335c      	adds	r3, #92	; 0x5c
 8002864:	2200      	movs	r2, #0
 8002866:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	697a      	ldr	r2, [r7, #20]
 800286e:	b2d2      	uxtb	r2, r2
 8002870:	4611      	mov	r1, r2
 8002872:	4618      	mov	r0, r3
 8002874:	f003 f9af 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	015a      	lsls	r2, r3, #5
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	4413      	add	r3, r2
 8002880:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002884:	461a      	mov	r2, r3
 8002886:	2340      	movs	r3, #64	; 0x40
 8002888:	6093      	str	r3, [r2, #8]
}
 800288a:	e254      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	015a      	lsls	r2, r3, #5
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	4413      	add	r3, r2
 8002894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002898:	689b      	ldr	r3, [r3, #8]
 800289a:	f003 0308 	and.w	r3, r3, #8
 800289e:	2b08      	cmp	r3, #8
 80028a0:	d11a      	bne.n	80028d8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	015a      	lsls	r2, r3, #5
 80028a6:	69bb      	ldr	r3, [r7, #24]
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028ae:	461a      	mov	r2, r3
 80028b0:	2308      	movs	r3, #8
 80028b2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80028b4:	687a      	ldr	r2, [r7, #4]
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	212c      	movs	r1, #44	; 0x2c
 80028ba:	fb01 f303 	mul.w	r3, r1, r3
 80028be:	4413      	add	r3, r2
 80028c0:	3361      	adds	r3, #97	; 0x61
 80028c2:	2205      	movs	r2, #5
 80028c4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	b2d2      	uxtb	r2, r2
 80028ce:	4611      	mov	r1, r2
 80028d0:	4618      	mov	r0, r3
 80028d2:	f003 f980 	bl	8005bd6 <USB_HC_Halt>
}
 80028d6:	e22e      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	015a      	lsls	r2, r3, #5
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	4413      	add	r3, r2
 80028e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d140      	bne.n	8002970 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	697b      	ldr	r3, [r7, #20]
 80028f2:	212c      	movs	r1, #44	; 0x2c
 80028f4:	fb01 f303 	mul.w	r3, r1, r3
 80028f8:	4413      	add	r3, r2
 80028fa:	335c      	adds	r3, #92	; 0x5c
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	212c      	movs	r1, #44	; 0x2c
 8002906:	fb01 f303 	mul.w	r3, r1, r3
 800290a:	4413      	add	r3, r2
 800290c:	3361      	adds	r3, #97	; 0x61
 800290e:	2203      	movs	r2, #3
 8002910:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	212c      	movs	r1, #44	; 0x2c
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	333d      	adds	r3, #61	; 0x3d
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d112      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	212c      	movs	r1, #44	; 0x2c
 800292c:	fb01 f303 	mul.w	r3, r1, r3
 8002930:	4413      	add	r3, r2
 8002932:	333c      	adds	r3, #60	; 0x3c
 8002934:	781b      	ldrb	r3, [r3, #0]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d108      	bne.n	800294c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800293a:	687a      	ldr	r2, [r7, #4]
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	212c      	movs	r1, #44	; 0x2c
 8002940:	fb01 f303 	mul.w	r3, r1, r3
 8002944:	4413      	add	r3, r2
 8002946:	333d      	adds	r3, #61	; 0x3d
 8002948:	2201      	movs	r2, #1
 800294a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	697a      	ldr	r2, [r7, #20]
 8002952:	b2d2      	uxtb	r2, r2
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f003 f93d 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	015a      	lsls	r2, r3, #5
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002968:	461a      	mov	r2, r3
 800296a:	2310      	movs	r3, #16
 800296c:	6093      	str	r3, [r2, #8]
}
 800296e:	e1e2      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	4413      	add	r3, r2
 8002978:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002982:	2b80      	cmp	r3, #128	; 0x80
 8002984:	d164      	bne.n	8002a50 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	691b      	ldr	r3, [r3, #16]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d111      	bne.n	80029b2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	212c      	movs	r1, #44	; 0x2c
 8002994:	fb01 f303 	mul.w	r3, r1, r3
 8002998:	4413      	add	r3, r2
 800299a:	3361      	adds	r3, #97	; 0x61
 800299c:	2206      	movs	r2, #6
 800299e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	697a      	ldr	r2, [r7, #20]
 80029a6:	b2d2      	uxtb	r2, r2
 80029a8:	4611      	mov	r1, r2
 80029aa:	4618      	mov	r0, r3
 80029ac:	f003 f913 	bl	8005bd6 <USB_HC_Halt>
 80029b0:	e044      	b.n	8002a3c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	212c      	movs	r1, #44	; 0x2c
 80029b8:	fb01 f303 	mul.w	r3, r1, r3
 80029bc:	4413      	add	r3, r2
 80029be:	335c      	adds	r3, #92	; 0x5c
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	1c5a      	adds	r2, r3, #1
 80029c4:	6879      	ldr	r1, [r7, #4]
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	202c      	movs	r0, #44	; 0x2c
 80029ca:	fb00 f303 	mul.w	r3, r0, r3
 80029ce:	440b      	add	r3, r1
 80029d0:	335c      	adds	r3, #92	; 0x5c
 80029d2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	212c      	movs	r1, #44	; 0x2c
 80029da:	fb01 f303 	mul.w	r3, r1, r3
 80029de:	4413      	add	r3, r2
 80029e0:	335c      	adds	r3, #92	; 0x5c
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b02      	cmp	r3, #2
 80029e6:	d920      	bls.n	8002a2a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80029e8:	687a      	ldr	r2, [r7, #4]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	212c      	movs	r1, #44	; 0x2c
 80029ee:	fb01 f303 	mul.w	r3, r1, r3
 80029f2:	4413      	add	r3, r2
 80029f4:	335c      	adds	r3, #92	; 0x5c
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80029fa:	687a      	ldr	r2, [r7, #4]
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	212c      	movs	r1, #44	; 0x2c
 8002a00:	fb01 f303 	mul.w	r3, r1, r3
 8002a04:	4413      	add	r3, r2
 8002a06:	3360      	adds	r3, #96	; 0x60
 8002a08:	2204      	movs	r2, #4
 8002a0a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002a0c:	697b      	ldr	r3, [r7, #20]
 8002a0e:	b2d9      	uxtb	r1, r3
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	202c      	movs	r0, #44	; 0x2c
 8002a16:	fb00 f303 	mul.w	r3, r0, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3360      	adds	r3, #96	; 0x60
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	461a      	mov	r2, r3
 8002a22:	6878      	ldr	r0, [r7, #4]
 8002a24:	f004 fbe0 	bl	80071e8 <HAL_HCD_HC_NotifyURBChange_Callback>
 8002a28:	e008      	b.n	8002a3c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002a2a:	687a      	ldr	r2, [r7, #4]
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	212c      	movs	r1, #44	; 0x2c
 8002a30:	fb01 f303 	mul.w	r3, r1, r3
 8002a34:	4413      	add	r3, r2
 8002a36:	3360      	adds	r3, #96	; 0x60
 8002a38:	2202      	movs	r2, #2
 8002a3a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002a3c:	697b      	ldr	r3, [r7, #20]
 8002a3e:	015a      	lsls	r2, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	4413      	add	r3, r2
 8002a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a48:	461a      	mov	r2, r3
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	6093      	str	r3, [r2, #8]
}
 8002a4e:	e172      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002a50:	697b      	ldr	r3, [r7, #20]
 8002a52:	015a      	lsls	r2, r3, #5
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	4413      	add	r3, r2
 8002a58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002a66:	d11b      	bne.n	8002aa0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	212c      	movs	r1, #44	; 0x2c
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	4413      	add	r3, r2
 8002a74:	3361      	adds	r3, #97	; 0x61
 8002a76:	2208      	movs	r2, #8
 8002a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	b2d2      	uxtb	r2, r2
 8002a82:	4611      	mov	r1, r2
 8002a84:	4618      	mov	r0, r3
 8002a86:	f003 f8a6 	bl	8005bd6 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	015a      	lsls	r2, r3, #5
 8002a8e:	69bb      	ldr	r3, [r7, #24]
 8002a90:	4413      	add	r3, r2
 8002a92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a96:	461a      	mov	r2, r3
 8002a98:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a9c:	6093      	str	r3, [r2, #8]
}
 8002a9e:	e14a      	b.n	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002aa0:	697b      	ldr	r3, [r7, #20]
 8002aa2:	015a      	lsls	r2, r3, #5
 8002aa4:	69bb      	ldr	r3, [r7, #24]
 8002aa6:	4413      	add	r3, r2
 8002aa8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b02      	cmp	r3, #2
 8002ab4:	f040 813f 	bne.w	8002d36 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ab8:	687a      	ldr	r2, [r7, #4]
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	212c      	movs	r1, #44	; 0x2c
 8002abe:	fb01 f303 	mul.w	r3, r1, r3
 8002ac2:	4413      	add	r3, r2
 8002ac4:	3361      	adds	r3, #97	; 0x61
 8002ac6:	781b      	ldrb	r3, [r3, #0]
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d17d      	bne.n	8002bc8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002acc:	687a      	ldr	r2, [r7, #4]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	212c      	movs	r1, #44	; 0x2c
 8002ad2:	fb01 f303 	mul.w	r3, r1, r3
 8002ad6:	4413      	add	r3, r2
 8002ad8:	3360      	adds	r3, #96	; 0x60
 8002ada:	2201      	movs	r2, #1
 8002adc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	212c      	movs	r1, #44	; 0x2c
 8002ae4:	fb01 f303 	mul.w	r3, r1, r3
 8002ae8:	4413      	add	r3, r2
 8002aea:	333f      	adds	r3, #63	; 0x3f
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b02      	cmp	r3, #2
 8002af0:	d00a      	beq.n	8002b08 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	212c      	movs	r1, #44	; 0x2c
 8002af8:	fb01 f303 	mul.w	r3, r1, r3
 8002afc:	4413      	add	r3, r2
 8002afe:	333f      	adds	r3, #63	; 0x3f
 8002b00:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002b02:	2b03      	cmp	r3, #3
 8002b04:	f040 8100 	bne.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	691b      	ldr	r3, [r3, #16]
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d113      	bne.n	8002b38 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	212c      	movs	r1, #44	; 0x2c
 8002b16:	fb01 f303 	mul.w	r3, r1, r3
 8002b1a:	4413      	add	r3, r2
 8002b1c:	3355      	adds	r3, #85	; 0x55
 8002b1e:	781b      	ldrb	r3, [r3, #0]
 8002b20:	f083 0301 	eor.w	r3, r3, #1
 8002b24:	b2d8      	uxtb	r0, r3
 8002b26:	687a      	ldr	r2, [r7, #4]
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	212c      	movs	r1, #44	; 0x2c
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	4413      	add	r3, r2
 8002b32:	3355      	adds	r3, #85	; 0x55
 8002b34:	4602      	mov	r2, r0
 8002b36:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	f040 80e3 	bne.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	334c      	adds	r3, #76	; 0x4c
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 80d8 	beq.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	697b      	ldr	r3, [r7, #20]
 8002b5c:	212c      	movs	r1, #44	; 0x2c
 8002b5e:	fb01 f303 	mul.w	r3, r1, r3
 8002b62:	4413      	add	r3, r2
 8002b64:	334c      	adds	r3, #76	; 0x4c
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	6879      	ldr	r1, [r7, #4]
 8002b6a:	697a      	ldr	r2, [r7, #20]
 8002b6c:	202c      	movs	r0, #44	; 0x2c
 8002b6e:	fb00 f202 	mul.w	r2, r0, r2
 8002b72:	440a      	add	r2, r1
 8002b74:	3240      	adds	r2, #64	; 0x40
 8002b76:	8812      	ldrh	r2, [r2, #0]
 8002b78:	4413      	add	r3, r2
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	202c      	movs	r0, #44	; 0x2c
 8002b82:	fb00 f202 	mul.w	r2, r0, r2
 8002b86:	440a      	add	r2, r1
 8002b88:	3240      	adds	r2, #64	; 0x40
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002b90:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	f003 0301 	and.w	r3, r3, #1
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80b5 	beq.w	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	212c      	movs	r1, #44	; 0x2c
 8002ba4:	fb01 f303 	mul.w	r3, r1, r3
 8002ba8:	4413      	add	r3, r2
 8002baa:	3355      	adds	r3, #85	; 0x55
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	f083 0301 	eor.w	r3, r3, #1
 8002bb2:	b2d8      	uxtb	r0, r3
 8002bb4:	687a      	ldr	r2, [r7, #4]
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	212c      	movs	r1, #44	; 0x2c
 8002bba:	fb01 f303 	mul.w	r3, r1, r3
 8002bbe:	4413      	add	r3, r2
 8002bc0:	3355      	adds	r3, #85	; 0x55
 8002bc2:	4602      	mov	r2, r0
 8002bc4:	701a      	strb	r2, [r3, #0]
 8002bc6:	e09f      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	212c      	movs	r1, #44	; 0x2c
 8002bce:	fb01 f303 	mul.w	r3, r1, r3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	3361      	adds	r3, #97	; 0x61
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b03      	cmp	r3, #3
 8002bda:	d109      	bne.n	8002bf0 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	212c      	movs	r1, #44	; 0x2c
 8002be2:	fb01 f303 	mul.w	r3, r1, r3
 8002be6:	4413      	add	r3, r2
 8002be8:	3360      	adds	r3, #96	; 0x60
 8002bea:	2202      	movs	r2, #2
 8002bec:	701a      	strb	r2, [r3, #0]
 8002bee:	e08b      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002bf0:	687a      	ldr	r2, [r7, #4]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	212c      	movs	r1, #44	; 0x2c
 8002bf6:	fb01 f303 	mul.w	r3, r1, r3
 8002bfa:	4413      	add	r3, r2
 8002bfc:	3361      	adds	r3, #97	; 0x61
 8002bfe:	781b      	ldrb	r3, [r3, #0]
 8002c00:	2b04      	cmp	r3, #4
 8002c02:	d109      	bne.n	8002c18 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	3360      	adds	r3, #96	; 0x60
 8002c12:	2202      	movs	r2, #2
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e077      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	3361      	adds	r3, #97	; 0x61
 8002c26:	781b      	ldrb	r3, [r3, #0]
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d109      	bne.n	8002c40 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	212c      	movs	r1, #44	; 0x2c
 8002c32:	fb01 f303 	mul.w	r3, r1, r3
 8002c36:	4413      	add	r3, r2
 8002c38:	3360      	adds	r3, #96	; 0x60
 8002c3a:	2205      	movs	r2, #5
 8002c3c:	701a      	strb	r2, [r3, #0]
 8002c3e:	e063      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	212c      	movs	r1, #44	; 0x2c
 8002c46:	fb01 f303 	mul.w	r3, r1, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3361      	adds	r3, #97	; 0x61
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b06      	cmp	r3, #6
 8002c52:	d009      	beq.n	8002c68 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002c54:	687a      	ldr	r2, [r7, #4]
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	212c      	movs	r1, #44	; 0x2c
 8002c5a:	fb01 f303 	mul.w	r3, r1, r3
 8002c5e:	4413      	add	r3, r2
 8002c60:	3361      	adds	r3, #97	; 0x61
 8002c62:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002c64:	2b08      	cmp	r3, #8
 8002c66:	d14f      	bne.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002c68:	687a      	ldr	r2, [r7, #4]
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	212c      	movs	r1, #44	; 0x2c
 8002c6e:	fb01 f303 	mul.w	r3, r1, r3
 8002c72:	4413      	add	r3, r2
 8002c74:	335c      	adds	r3, #92	; 0x5c
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	6879      	ldr	r1, [r7, #4]
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	202c      	movs	r0, #44	; 0x2c
 8002c80:	fb00 f303 	mul.w	r3, r0, r3
 8002c84:	440b      	add	r3, r1
 8002c86:	335c      	adds	r3, #92	; 0x5c
 8002c88:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	212c      	movs	r1, #44	; 0x2c
 8002c90:	fb01 f303 	mul.w	r3, r1, r3
 8002c94:	4413      	add	r3, r2
 8002c96:	335c      	adds	r3, #92	; 0x5c
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	2b02      	cmp	r3, #2
 8002c9c:	d912      	bls.n	8002cc4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c9e:	687a      	ldr	r2, [r7, #4]
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	212c      	movs	r1, #44	; 0x2c
 8002ca4:	fb01 f303 	mul.w	r3, r1, r3
 8002ca8:	4413      	add	r3, r2
 8002caa:	335c      	adds	r3, #92	; 0x5c
 8002cac:	2200      	movs	r2, #0
 8002cae:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	212c      	movs	r1, #44	; 0x2c
 8002cb6:	fb01 f303 	mul.w	r3, r1, r3
 8002cba:	4413      	add	r3, r2
 8002cbc:	3360      	adds	r3, #96	; 0x60
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	701a      	strb	r2, [r3, #0]
 8002cc2:	e021      	b.n	8002d08 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	697b      	ldr	r3, [r7, #20]
 8002cc8:	212c      	movs	r1, #44	; 0x2c
 8002cca:	fb01 f303 	mul.w	r3, r1, r3
 8002cce:	4413      	add	r3, r2
 8002cd0:	3360      	adds	r3, #96	; 0x60
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	015a      	lsls	r2, r3, #5
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	4413      	add	r3, r2
 8002cde:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ce6:	693b      	ldr	r3, [r7, #16]
 8002ce8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002cec:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002cf4:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	015a      	lsls	r2, r3, #5
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d02:	461a      	mov	r2, r3
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	015a      	lsls	r2, r3, #5
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	4413      	add	r3, r2
 8002d10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d14:	461a      	mov	r2, r3
 8002d16:	2302      	movs	r3, #2
 8002d18:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002d1a:	697b      	ldr	r3, [r7, #20]
 8002d1c:	b2d9      	uxtb	r1, r3
 8002d1e:	687a      	ldr	r2, [r7, #4]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	202c      	movs	r0, #44	; 0x2c
 8002d24:	fb00 f303 	mul.w	r3, r0, r3
 8002d28:	4413      	add	r3, r2
 8002d2a:	3360      	adds	r3, #96	; 0x60
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f004 fa59 	bl	80071e8 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002d36:	bf00      	nop
 8002d38:	3720      	adds	r7, #32
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002d3e:	b580      	push	{r7, lr}
 8002d40:	b08a      	sub	sp, #40	; 0x28
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d4e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6a1b      	ldr	r3, [r3, #32]
 8002d56:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	f003 030f 	and.w	r3, r3, #15
 8002d5e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	0c5b      	lsrs	r3, r3, #17
 8002d64:	f003 030f 	and.w	r3, r3, #15
 8002d68:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002d6a:	69fb      	ldr	r3, [r7, #28]
 8002d6c:	091b      	lsrs	r3, r3, #4
 8002d6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002d72:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	2b02      	cmp	r3, #2
 8002d78:	d004      	beq.n	8002d84 <HCD_RXQLVL_IRQHandler+0x46>
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	2b05      	cmp	r3, #5
 8002d7e:	f000 80a9 	beq.w	8002ed4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002d82:	e0aa      	b.n	8002eda <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002d84:	693b      	ldr	r3, [r7, #16]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	f000 80a6 	beq.w	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	212c      	movs	r1, #44	; 0x2c
 8002d92:	fb01 f303 	mul.w	r3, r1, r3
 8002d96:	4413      	add	r3, r2
 8002d98:	3344      	adds	r3, #68	; 0x44
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f000 809b 	beq.w	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002da2:	687a      	ldr	r2, [r7, #4]
 8002da4:	69bb      	ldr	r3, [r7, #24]
 8002da6:	212c      	movs	r1, #44	; 0x2c
 8002da8:	fb01 f303 	mul.w	r3, r1, r3
 8002dac:	4413      	add	r3, r2
 8002dae:	3350      	adds	r3, #80	; 0x50
 8002db0:	681a      	ldr	r2, [r3, #0]
 8002db2:	693b      	ldr	r3, [r7, #16]
 8002db4:	441a      	add	r2, r3
 8002db6:	6879      	ldr	r1, [r7, #4]
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	202c      	movs	r0, #44	; 0x2c
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	440b      	add	r3, r1
 8002dc2:	334c      	adds	r3, #76	; 0x4c
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	d87a      	bhi.n	8002ec0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3344      	adds	r3, #68	; 0x44
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	693a      	ldr	r2, [r7, #16]
 8002de0:	b292      	uxth	r2, r2
 8002de2:	4619      	mov	r1, r3
 8002de4:	f002 fa78 	bl	80052d8 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	69bb      	ldr	r3, [r7, #24]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	3344      	adds	r3, #68	; 0x44
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	441a      	add	r2, r3
 8002dfc:	6879      	ldr	r1, [r7, #4]
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	202c      	movs	r0, #44	; 0x2c
 8002e02:	fb00 f303 	mul.w	r3, r0, r3
 8002e06:	440b      	add	r3, r1
 8002e08:	3344      	adds	r3, #68	; 0x44
 8002e0a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3350      	adds	r3, #80	; 0x50
 8002e1a:	681a      	ldr	r2, [r3, #0]
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	441a      	add	r2, r3
 8002e20:	6879      	ldr	r1, [r7, #4]
 8002e22:	69bb      	ldr	r3, [r7, #24]
 8002e24:	202c      	movs	r0, #44	; 0x2c
 8002e26:	fb00 f303 	mul.w	r3, r0, r3
 8002e2a:	440b      	add	r3, r1
 8002e2c:	3350      	adds	r3, #80	; 0x50
 8002e2e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	6a3b      	ldr	r3, [r7, #32]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	691b      	ldr	r3, [r3, #16]
 8002e3e:	0cdb      	lsrs	r3, r3, #19
 8002e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002e44:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8002e46:	687a      	ldr	r2, [r7, #4]
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	3340      	adds	r3, #64	; 0x40
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	461a      	mov	r2, r3
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d13c      	bne.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d039      	beq.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002e64:	69bb      	ldr	r3, [r7, #24]
 8002e66:	015a      	lsls	r2, r3, #5
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	4413      	add	r3, r2
 8002e6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002e7a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e82:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	015a      	lsls	r2, r3, #5
 8002e88:	6a3b      	ldr	r3, [r7, #32]
 8002e8a:	4413      	add	r3, r2
 8002e8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e90:	461a      	mov	r2, r3
 8002e92:	68bb      	ldr	r3, [r7, #8]
 8002e94:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8002e96:	687a      	ldr	r2, [r7, #4]
 8002e98:	69bb      	ldr	r3, [r7, #24]
 8002e9a:	212c      	movs	r1, #44	; 0x2c
 8002e9c:	fb01 f303 	mul.w	r3, r1, r3
 8002ea0:	4413      	add	r3, r2
 8002ea2:	3354      	adds	r3, #84	; 0x54
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2d8      	uxtb	r0, r3
 8002eac:	687a      	ldr	r2, [r7, #4]
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	212c      	movs	r1, #44	; 0x2c
 8002eb2:	fb01 f303 	mul.w	r3, r1, r3
 8002eb6:	4413      	add	r3, r2
 8002eb8:	3354      	adds	r3, #84	; 0x54
 8002eba:	4602      	mov	r2, r0
 8002ebc:	701a      	strb	r2, [r3, #0]
      break;
 8002ebe:	e00b      	b.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ec0:	687a      	ldr	r2, [r7, #4]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	212c      	movs	r1, #44	; 0x2c
 8002ec6:	fb01 f303 	mul.w	r3, r1, r3
 8002eca:	4413      	add	r3, r2
 8002ecc:	3360      	adds	r3, #96	; 0x60
 8002ece:	2204      	movs	r2, #4
 8002ed0:	701a      	strb	r2, [r3, #0]
      break;
 8002ed2:	e001      	b.n	8002ed8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8002ed4:	bf00      	nop
 8002ed6:	e000      	b.n	8002eda <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8002ed8:	bf00      	nop
  }
}
 8002eda:	bf00      	nop
 8002edc:	3728      	adds	r7, #40	; 0x28
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b086      	sub	sp, #24
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8002ef4:	693b      	ldr	r3, [r7, #16]
 8002ef6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8002efe:	693b      	ldr	r3, [r7, #16]
 8002f00:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8002f0e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0302 	and.w	r3, r3, #2
 8002f16:	2b02      	cmp	r3, #2
 8002f18:	d10b      	bne.n	8002f32 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	f003 0301 	and.w	r3, r3, #1
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d102      	bne.n	8002f2a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f004 f943 	bl	80071b0 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	f043 0302 	orr.w	r3, r3, #2
 8002f30:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	f003 0308 	and.w	r3, r3, #8
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d132      	bne.n	8002fa2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	f043 0308 	orr.w	r3, r3, #8
 8002f42:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f003 0304 	and.w	r3, r3, #4
 8002f4a:	2b04      	cmp	r3, #4
 8002f4c:	d126      	bne.n	8002f9c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	699b      	ldr	r3, [r3, #24]
 8002f52:	2b02      	cmp	r3, #2
 8002f54:	d113      	bne.n	8002f7e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002f5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002f60:	d106      	bne.n	8002f70 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2102      	movs	r1, #2
 8002f68:	4618      	mov	r0, r3
 8002f6a:	f002 fb23 	bl	80055b4 <USB_InitFSLSPClkSel>
 8002f6e:	e011      	b.n	8002f94 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	2101      	movs	r1, #1
 8002f76:	4618      	mov	r0, r3
 8002f78:	f002 fb1c 	bl	80055b4 <USB_InitFSLSPClkSel>
 8002f7c:	e00a      	b.n	8002f94 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	68db      	ldr	r3, [r3, #12]
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d106      	bne.n	8002f94 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8002f92:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f004 f935 	bl	8007204 <HAL_HCD_PortEnabled_Callback>
 8002f9a:	e002      	b.n	8002fa2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f004 f93f 	bl	8007220 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	f003 0320 	and.w	r3, r3, #32
 8002fa8:	2b20      	cmp	r3, #32
 8002faa:	d103      	bne.n	8002fb4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f043 0320 	orr.w	r3, r3, #32
 8002fb2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002fba:	461a      	mov	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6013      	str	r3, [r2, #0]
}
 8002fc0:	bf00      	nop
 8002fc2:	3718      	adds	r7, #24
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	bd80      	pop	{r7, pc}

08002fc8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d101      	bne.n	8002fda <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e12b      	b.n	8003232 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f7fd fddc 	bl	8000bac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2224      	movs	r2, #36	; 0x24
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f022 0201 	bic.w	r2, r2, #1
 800300a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800301a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	681a      	ldr	r2, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800302a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800302c:	f001 fa20 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8003030:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	4a81      	ldr	r2, [pc, #516]	; (800323c <HAL_I2C_Init+0x274>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d807      	bhi.n	800304c <HAL_I2C_Init+0x84>
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4a80      	ldr	r2, [pc, #512]	; (8003240 <HAL_I2C_Init+0x278>)
 8003040:	4293      	cmp	r3, r2
 8003042:	bf94      	ite	ls
 8003044:	2301      	movls	r3, #1
 8003046:	2300      	movhi	r3, #0
 8003048:	b2db      	uxtb	r3, r3
 800304a:	e006      	b.n	800305a <HAL_I2C_Init+0x92>
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	4a7d      	ldr	r2, [pc, #500]	; (8003244 <HAL_I2C_Init+0x27c>)
 8003050:	4293      	cmp	r3, r2
 8003052:	bf94      	ite	ls
 8003054:	2301      	movls	r3, #1
 8003056:	2300      	movhi	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	e0e7      	b.n	8003232 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	4a78      	ldr	r2, [pc, #480]	; (8003248 <HAL_I2C_Init+0x280>)
 8003066:	fba2 2303 	umull	r2, r3, r2, r3
 800306a:	0c9b      	lsrs	r3, r3, #18
 800306c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	685b      	ldr	r3, [r3, #4]
 8003074:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	68ba      	ldr	r2, [r7, #8]
 800307e:	430a      	orrs	r2, r1
 8003080:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	4a6a      	ldr	r2, [pc, #424]	; (800323c <HAL_I2C_Init+0x274>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d802      	bhi.n	800309c <HAL_I2C_Init+0xd4>
 8003096:	68bb      	ldr	r3, [r7, #8]
 8003098:	3301      	adds	r3, #1
 800309a:	e009      	b.n	80030b0 <HAL_I2C_Init+0xe8>
 800309c:	68bb      	ldr	r3, [r7, #8]
 800309e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80030a2:	fb02 f303 	mul.w	r3, r2, r3
 80030a6:	4a69      	ldr	r2, [pc, #420]	; (800324c <HAL_I2C_Init+0x284>)
 80030a8:	fba2 2303 	umull	r2, r3, r2, r3
 80030ac:	099b      	lsrs	r3, r3, #6
 80030ae:	3301      	adds	r3, #1
 80030b0:	687a      	ldr	r2, [r7, #4]
 80030b2:	6812      	ldr	r2, [r2, #0]
 80030b4:	430b      	orrs	r3, r1
 80030b6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	69db      	ldr	r3, [r3, #28]
 80030be:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030c2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	495c      	ldr	r1, [pc, #368]	; (800323c <HAL_I2C_Init+0x274>)
 80030cc:	428b      	cmp	r3, r1
 80030ce:	d819      	bhi.n	8003104 <HAL_I2C_Init+0x13c>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	1e59      	subs	r1, r3, #1
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	005b      	lsls	r3, r3, #1
 80030da:	fbb1 f3f3 	udiv	r3, r1, r3
 80030de:	1c59      	adds	r1, r3, #1
 80030e0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80030e4:	400b      	ands	r3, r1
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d00a      	beq.n	8003100 <HAL_I2C_Init+0x138>
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	1e59      	subs	r1, r3, #1
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	005b      	lsls	r3, r3, #1
 80030f4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030f8:	3301      	adds	r3, #1
 80030fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fe:	e051      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003100:	2304      	movs	r3, #4
 8003102:	e04f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d111      	bne.n	8003130 <HAL_I2C_Init+0x168>
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	1e58      	subs	r0, r3, #1
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6859      	ldr	r1, [r3, #4]
 8003114:	460b      	mov	r3, r1
 8003116:	005b      	lsls	r3, r3, #1
 8003118:	440b      	add	r3, r1
 800311a:	fbb0 f3f3 	udiv	r3, r0, r3
 800311e:	3301      	adds	r3, #1
 8003120:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003124:	2b00      	cmp	r3, #0
 8003126:	bf0c      	ite	eq
 8003128:	2301      	moveq	r3, #1
 800312a:	2300      	movne	r3, #0
 800312c:	b2db      	uxtb	r3, r3
 800312e:	e012      	b.n	8003156 <HAL_I2C_Init+0x18e>
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	1e58      	subs	r0, r3, #1
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6859      	ldr	r1, [r3, #4]
 8003138:	460b      	mov	r3, r1
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	0099      	lsls	r1, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	fbb0 f3f3 	udiv	r3, r0, r3
 8003146:	3301      	adds	r3, #1
 8003148:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314c:	2b00      	cmp	r3, #0
 800314e:	bf0c      	ite	eq
 8003150:	2301      	moveq	r3, #1
 8003152:	2300      	movne	r3, #0
 8003154:	b2db      	uxtb	r3, r3
 8003156:	2b00      	cmp	r3, #0
 8003158:	d001      	beq.n	800315e <HAL_I2C_Init+0x196>
 800315a:	2301      	movs	r3, #1
 800315c:	e022      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d10e      	bne.n	8003184 <HAL_I2C_Init+0x1bc>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1e58      	subs	r0, r3, #1
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6859      	ldr	r1, [r3, #4]
 800316e:	460b      	mov	r3, r1
 8003170:	005b      	lsls	r3, r3, #1
 8003172:	440b      	add	r3, r1
 8003174:	fbb0 f3f3 	udiv	r3, r0, r3
 8003178:	3301      	adds	r3, #1
 800317a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800317e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003182:	e00f      	b.n	80031a4 <HAL_I2C_Init+0x1dc>
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	1e58      	subs	r0, r3, #1
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	6859      	ldr	r1, [r3, #4]
 800318c:	460b      	mov	r3, r1
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	440b      	add	r3, r1
 8003192:	0099      	lsls	r1, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	fbb0 f3f3 	udiv	r3, r0, r3
 800319a:	3301      	adds	r3, #1
 800319c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031a0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80031a4:	6879      	ldr	r1, [r7, #4]
 80031a6:	6809      	ldr	r1, [r1, #0]
 80031a8:	4313      	orrs	r3, r2
 80031aa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	69da      	ldr	r2, [r3, #28]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031d6:	687a      	ldr	r2, [r7, #4]
 80031d8:	6911      	ldr	r1, [r2, #16]
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	68d2      	ldr	r2, [r2, #12]
 80031de:	4311      	orrs	r1, r2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	430b      	orrs	r3, r1
 80031e6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695a      	ldr	r2, [r3, #20]
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	431a      	orrs	r2, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f042 0201 	orr.w	r2, r2, #1
 8003212:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2220      	movs	r2, #32
 800321e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003230:	2300      	movs	r3, #0
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
 800323a:	bf00      	nop
 800323c:	000186a0 	.word	0x000186a0
 8003240:	001e847f 	.word	0x001e847f
 8003244:	003d08ff 	.word	0x003d08ff
 8003248:	431bde83 	.word	0x431bde83
 800324c:	10624dd3 	.word	0x10624dd3

08003250 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d101      	bne.n	8003262 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e128      	b.n	80034b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003268:	b2db      	uxtb	r3, r3
 800326a:	2b00      	cmp	r3, #0
 800326c:	d109      	bne.n	8003282 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a90      	ldr	r2, [pc, #576]	; (80034bc <HAL_I2S_Init+0x26c>)
 800327a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f7fd fcdd 	bl	8000c3c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2202      	movs	r2, #2
 8003286:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	69db      	ldr	r3, [r3, #28]
 8003290:	687a      	ldr	r2, [r7, #4]
 8003292:	6812      	ldr	r2, [r2, #0]
 8003294:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003298:	f023 030f 	bic.w	r3, r3, #15
 800329c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	2202      	movs	r2, #2
 80032a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	695b      	ldr	r3, [r3, #20]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d060      	beq.n	8003370 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	68db      	ldr	r3, [r3, #12]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d102      	bne.n	80032bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80032b6:	2310      	movs	r3, #16
 80032b8:	617b      	str	r3, [r7, #20]
 80032ba:	e001      	b.n	80032c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80032bc:	2320      	movs	r3, #32
 80032be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	689b      	ldr	r3, [r3, #8]
 80032c4:	2b20      	cmp	r3, #32
 80032c6:	d802      	bhi.n	80032ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80032ce:	2001      	movs	r0, #1
 80032d0:	f001 f9e6 	bl	80046a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80032d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	691b      	ldr	r3, [r3, #16]
 80032da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032de:	d125      	bne.n	800332c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	68db      	ldr	r3, [r3, #12]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d010      	beq.n	800330a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	68fa      	ldr	r2, [r7, #12]
 80032ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80032f2:	4613      	mov	r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	4413      	add	r3, r2
 80032f8:	005b      	lsls	r3, r3, #1
 80032fa:	461a      	mov	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	695b      	ldr	r3, [r3, #20]
 8003300:	fbb2 f3f3 	udiv	r3, r2, r3
 8003304:	3305      	adds	r3, #5
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	e01f      	b.n	800334a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	00db      	lsls	r3, r3, #3
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	fbb2 f2f3 	udiv	r2, r2, r3
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	461a      	mov	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	fbb2 f3f3 	udiv	r3, r2, r3
 8003326:	3305      	adds	r3, #5
 8003328:	613b      	str	r3, [r7, #16]
 800332a:	e00e      	b.n	800334a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800332c:	68fa      	ldr	r2, [r7, #12]
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	fbb2 f2f3 	udiv	r2, r2, r3
 8003334:	4613      	mov	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	4413      	add	r3, r2
 800333a:	005b      	lsls	r3, r3, #1
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	fbb2 f3f3 	udiv	r3, r2, r3
 8003346:	3305      	adds	r3, #5
 8003348:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4a5c      	ldr	r2, [pc, #368]	; (80034c0 <HAL_I2S_Init+0x270>)
 800334e:	fba2 2303 	umull	r2, r3, r2, r3
 8003352:	08db      	lsrs	r3, r3, #3
 8003354:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	f003 0301 	and.w	r3, r3, #1
 800335c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800335e:	693a      	ldr	r2, [r7, #16]
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	1ad3      	subs	r3, r2, r3
 8003364:	085b      	lsrs	r3, r3, #1
 8003366:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	021b      	lsls	r3, r3, #8
 800336c:	61bb      	str	r3, [r7, #24]
 800336e:	e003      	b.n	8003378 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003370:	2302      	movs	r3, #2
 8003372:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003374:	2300      	movs	r3, #0
 8003376:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8003378:	69fb      	ldr	r3, [r7, #28]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d902      	bls.n	8003384 <HAL_I2S_Init+0x134>
 800337e:	69fb      	ldr	r3, [r7, #28]
 8003380:	2bff      	cmp	r3, #255	; 0xff
 8003382:	d907      	bls.n	8003394 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003388:	f043 0210 	orr.w	r2, r3, #16
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e08f      	b.n	80034b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	691a      	ldr	r2, [r3, #16]
 8003398:	69bb      	ldr	r3, [r7, #24]
 800339a:	ea42 0103 	orr.w	r1, r2, r3
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	430a      	orrs	r2, r1
 80033a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80033b2:	f023 030f 	bic.w	r3, r3, #15
 80033b6:	687a      	ldr	r2, [r7, #4]
 80033b8:	6851      	ldr	r1, [r2, #4]
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	6892      	ldr	r2, [r2, #8]
 80033be:	4311      	orrs	r1, r2
 80033c0:	687a      	ldr	r2, [r7, #4]
 80033c2:	68d2      	ldr	r2, [r2, #12]
 80033c4:	4311      	orrs	r1, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6992      	ldr	r2, [r2, #24]
 80033ca:	430a      	orrs	r2, r1
 80033cc:	431a      	orrs	r2, r3
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a1b      	ldr	r3, [r3, #32]
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d161      	bne.n	80034a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	4a38      	ldr	r2, [pc, #224]	; (80034c4 <HAL_I2S_Init+0x274>)
 80033e4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a37      	ldr	r2, [pc, #220]	; (80034c8 <HAL_I2S_Init+0x278>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d101      	bne.n	80033f4 <HAL_I2S_Init+0x1a4>
 80033f0:	4b36      	ldr	r3, [pc, #216]	; (80034cc <HAL_I2S_Init+0x27c>)
 80033f2:	e001      	b.n	80033f8 <HAL_I2S_Init+0x1a8>
 80033f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80033f8:	69db      	ldr	r3, [r3, #28]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	6812      	ldr	r2, [r2, #0]
 80033fe:	4932      	ldr	r1, [pc, #200]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003400:	428a      	cmp	r2, r1
 8003402:	d101      	bne.n	8003408 <HAL_I2S_Init+0x1b8>
 8003404:	4a31      	ldr	r2, [pc, #196]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003406:	e001      	b.n	800340c <HAL_I2S_Init+0x1bc>
 8003408:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800340c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003410:	f023 030f 	bic.w	r3, r3, #15
 8003414:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a2b      	ldr	r2, [pc, #172]	; (80034c8 <HAL_I2S_Init+0x278>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d101      	bne.n	8003424 <HAL_I2S_Init+0x1d4>
 8003420:	4b2a      	ldr	r3, [pc, #168]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003422:	e001      	b.n	8003428 <HAL_I2S_Init+0x1d8>
 8003424:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003428:	2202      	movs	r2, #2
 800342a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d101      	bne.n	800343a <HAL_I2S_Init+0x1ea>
 8003436:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_I2S_Init+0x27c>)
 8003438:	e001      	b.n	800343e <HAL_I2S_Init+0x1ee>
 800343a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800343e:	69db      	ldr	r3, [r3, #28]
 8003440:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800344a:	d003      	beq.n	8003454 <HAL_I2S_Init+0x204>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	685b      	ldr	r3, [r3, #4]
 8003450:	2b00      	cmp	r3, #0
 8003452:	d103      	bne.n	800345c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003454:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003458:	613b      	str	r3, [r7, #16]
 800345a:	e001      	b.n	8003460 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800345c:	2300      	movs	r3, #0
 800345e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800346a:	4313      	orrs	r3, r2
 800346c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003474:	4313      	orrs	r3, r2
 8003476:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	699b      	ldr	r3, [r3, #24]
 800347c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800347e:	4313      	orrs	r3, r2
 8003480:	b29a      	uxth	r2, r3
 8003482:	897b      	ldrh	r3, [r7, #10]
 8003484:	4313      	orrs	r3, r2
 8003486:	b29b      	uxth	r3, r3
 8003488:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800348c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a0d      	ldr	r2, [pc, #52]	; (80034c8 <HAL_I2S_Init+0x278>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d101      	bne.n	800349c <HAL_I2S_Init+0x24c>
 8003498:	4b0c      	ldr	r3, [pc, #48]	; (80034cc <HAL_I2S_Init+0x27c>)
 800349a:	e001      	b.n	80034a0 <HAL_I2S_Init+0x250>
 800349c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80034a0:	897a      	ldrh	r2, [r7, #10]
 80034a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80034b2:	2300      	movs	r3, #0
}
 80034b4:	4618      	mov	r0, r3
 80034b6:	3720      	adds	r7, #32
 80034b8:	46bd      	mov	sp, r7
 80034ba:	bd80      	pop	{r7, pc}
 80034bc:	080035c7 	.word	0x080035c7
 80034c0:	cccccccd 	.word	0xcccccccd
 80034c4:	080036dd 	.word	0x080036dd
 80034c8:	40003800 	.word	0x40003800
 80034cc:	40003400 	.word	0x40003400

080034d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80034ec:	bf00      	nop
 80034ee:	370c      	adds	r7, #12
 80034f0:	46bd      	mov	sp, r7
 80034f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f6:	4770      	bx	lr

080034f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80034f8:	b480      	push	{r7}
 80034fa:	b083      	sub	sp, #12
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003500:	bf00      	nop
 8003502:	370c      	adds	r7, #12
 8003504:	46bd      	mov	sp, r7
 8003506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350a:	4770      	bx	lr

0800350c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003518:	881a      	ldrh	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003524:	1c9a      	adds	r2, r3, #2
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800352e:	b29b      	uxth	r3, r3
 8003530:	3b01      	subs	r3, #1
 8003532:	b29a      	uxth	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800353c:	b29b      	uxth	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d10e      	bne.n	8003560 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	685a      	ldr	r2, [r3, #4]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003550:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f7ff ffb8 	bl	80034d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003560:	bf00      	nop
 8003562:	3708      	adds	r7, #8
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}

08003568 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b082      	sub	sp, #8
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	68da      	ldr	r2, [r3, #12]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800357a:	b292      	uxth	r2, r2
 800357c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003582:	1c9a      	adds	r2, r3, #2
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800358c:	b29b      	uxth	r3, r3
 800358e:	3b01      	subs	r3, #1
 8003590:	b29a      	uxth	r2, r3
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800359a:	b29b      	uxth	r3, r3
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10e      	bne.n	80035be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685a      	ldr	r2, [r3, #4]
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80035ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80035b8:	6878      	ldr	r0, [r7, #4]
 80035ba:	f7ff ff93 	bl	80034e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80035be:	bf00      	nop
 80035c0:	3708      	adds	r7, #8
 80035c2:	46bd      	mov	sp, r7
 80035c4:	bd80      	pop	{r7, pc}

080035c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80035c6:	b580      	push	{r7, lr}
 80035c8:	b086      	sub	sp, #24
 80035ca:	af00      	add	r7, sp, #0
 80035cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	689b      	ldr	r3, [r3, #8]
 80035d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035dc:	b2db      	uxtb	r3, r3
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d13a      	bne.n	8003658 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80035e2:	697b      	ldr	r3, [r7, #20]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d109      	bne.n	8003600 <I2S_IRQHandler+0x3a>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685b      	ldr	r3, [r3, #4]
 80035f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f6:	2b40      	cmp	r3, #64	; 0x40
 80035f8:	d102      	bne.n	8003600 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80035fa:	6878      	ldr	r0, [r7, #4]
 80035fc:	f7ff ffb4 	bl	8003568 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003606:	2b40      	cmp	r3, #64	; 0x40
 8003608:	d126      	bne.n	8003658 <I2S_IRQHandler+0x92>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	f003 0320 	and.w	r3, r3, #32
 8003614:	2b20      	cmp	r3, #32
 8003616:	d11f      	bne.n	8003658 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003626:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003628:	2300      	movs	r3, #0
 800362a:	613b      	str	r3, [r7, #16]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	68db      	ldr	r3, [r3, #12]
 8003632:	613b      	str	r3, [r7, #16]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	613b      	str	r3, [r7, #16]
 800363c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2201      	movs	r2, #1
 8003642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800364a:	f043 0202 	orr.w	r2, r3, #2
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003652:	6878      	ldr	r0, [r7, #4]
 8003654:	f7ff ff50 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b03      	cmp	r3, #3
 8003662:	d136      	bne.n	80036d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003664:	697b      	ldr	r3, [r7, #20]
 8003666:	f003 0302 	and.w	r3, r3, #2
 800366a:	2b02      	cmp	r3, #2
 800366c:	d109      	bne.n	8003682 <I2S_IRQHandler+0xbc>
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685b      	ldr	r3, [r3, #4]
 8003674:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003678:	2b80      	cmp	r3, #128	; 0x80
 800367a:	d102      	bne.n	8003682 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f7ff ff45 	bl	800350c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003682:	697b      	ldr	r3, [r7, #20]
 8003684:	f003 0308 	and.w	r3, r3, #8
 8003688:	2b08      	cmp	r3, #8
 800368a:	d122      	bne.n	80036d2 <I2S_IRQHandler+0x10c>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f003 0320 	and.w	r3, r3, #32
 8003696:	2b20      	cmp	r3, #32
 8003698:	d11b      	bne.n	80036d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	685a      	ldr	r2, [r3, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80036a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80036aa:	2300      	movs	r3, #0
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	60fb      	str	r3, [r7, #12]
 80036b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036c4:	f043 0204 	orr.w	r2, r3, #4
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	f7ff ff13 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80036d2:	bf00      	nop
 80036d4:	3718      	adds	r7, #24
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}
	...

080036dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80036dc:	b580      	push	{r7, lr}
 80036de:	b088      	sub	sp, #32
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	4a92      	ldr	r2, [pc, #584]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d101      	bne.n	80036fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80036f6:	4b92      	ldr	r3, [pc, #584]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80036f8:	e001      	b.n	80036fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80036fa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	4a8b      	ldr	r2, [pc, #556]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003710:	4293      	cmp	r3, r2
 8003712:	d101      	bne.n	8003718 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003714:	4b8a      	ldr	r3, [pc, #552]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003716:	e001      	b.n	800371c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	685b      	ldr	r3, [r3, #4]
 8003724:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003728:	d004      	beq.n	8003734 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	2b00      	cmp	r3, #0
 8003730:	f040 8099 	bne.w	8003866 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003734:	69fb      	ldr	r3, [r7, #28]
 8003736:	f003 0302 	and.w	r3, r3, #2
 800373a:	2b02      	cmp	r3, #2
 800373c:	d107      	bne.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003744:	2b00      	cmp	r3, #0
 8003746:	d002      	beq.n	800374e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003748:	6878      	ldr	r0, [r7, #4]
 800374a:	f000 f925 	bl	8003998 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	f003 0301 	and.w	r3, r3, #1
 8003754:	2b01      	cmp	r3, #1
 8003756:	d107      	bne.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9c8 	bl	8003af8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800376e:	2b40      	cmp	r3, #64	; 0x40
 8003770:	d13a      	bne.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003772:	693b      	ldr	r3, [r7, #16]
 8003774:	f003 0320 	and.w	r3, r3, #32
 8003778:	2b00      	cmp	r3, #0
 800377a:	d035      	beq.n	80037e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	4a6e      	ldr	r2, [pc, #440]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d101      	bne.n	800378a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003786:	4b6e      	ldr	r3, [pc, #440]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003788:	e001      	b.n	800378e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800378a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378e:	685a      	ldr	r2, [r3, #4]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	4969      	ldr	r1, [pc, #420]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003796:	428b      	cmp	r3, r1
 8003798:	d101      	bne.n	800379e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800379a:	4b69      	ldr	r3, [pc, #420]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800379c:	e001      	b.n	80037a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800379e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	685a      	ldr	r2, [r3, #4]
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80037b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80037b8:	2300      	movs	r3, #0
 80037ba:	60fb      	str	r3, [r7, #12]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	60fb      	str	r3, [r7, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	689b      	ldr	r3, [r3, #8]
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037da:	f043 0202 	orr.w	r2, r3, #2
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f7ff fe88 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80037e8:	69fb      	ldr	r3, [r7, #28]
 80037ea:	f003 0308 	and.w	r3, r3, #8
 80037ee:	2b08      	cmp	r3, #8
 80037f0:	f040 80c3 	bne.w	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80037f4:	697b      	ldr	r3, [r7, #20]
 80037f6:	f003 0320 	and.w	r3, r3, #32
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	f000 80bd 	beq.w	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	685a      	ldr	r2, [r3, #4]
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800380e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a49      	ldr	r2, [pc, #292]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d101      	bne.n	800381e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800381a:	4b49      	ldr	r3, [pc, #292]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800381c:	e001      	b.n	8003822 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800381e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4944      	ldr	r1, [pc, #272]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800382a:	428b      	cmp	r3, r1
 800382c:	d101      	bne.n	8003832 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800382e:	4b44      	ldr	r3, [pc, #272]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003830:	e001      	b.n	8003836 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003832:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003836:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800383a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800383c:	2300      	movs	r3, #0
 800383e:	60bb      	str	r3, [r7, #8]
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	60bb      	str	r3, [r7, #8]
 8003848:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2201      	movs	r2, #1
 800384e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	f043 0204 	orr.w	r2, r3, #4
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7ff fe4a 	bl	80034f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003864:	e089      	b.n	800397a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	f003 0302 	and.w	r3, r3, #2
 800386c:	2b02      	cmp	r3, #2
 800386e:	d107      	bne.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003876:	2b00      	cmp	r3, #0
 8003878:	d002      	beq.n	8003880 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f8be 	bl	80039fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b01      	cmp	r3, #1
 8003888:	d107      	bne.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003890:	2b00      	cmp	r3, #0
 8003892:	d002      	beq.n	800389a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	f000 f8fd 	bl	8003a94 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d12f      	bne.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f003 0320 	and.w	r3, r3, #32
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d02a      	beq.n	8003904 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80038bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d101      	bne.n	80038cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80038c8:	4b1d      	ldr	r3, [pc, #116]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038ca:	e001      	b.n	80038d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80038cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4919      	ldr	r1, [pc, #100]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80038d8:	428b      	cmp	r3, r1
 80038da:	d101      	bne.n	80038e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80038dc:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80038de:	e001      	b.n	80038e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80038e0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80038e4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f6:	f043 0202 	orr.w	r2, r3, #2
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff fdfa 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	f003 0308 	and.w	r3, r3, #8
 800390a:	2b08      	cmp	r3, #8
 800390c:	d136      	bne.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	f003 0320 	and.w	r3, r3, #32
 8003914:	2b00      	cmp	r3, #0
 8003916:	d031      	beq.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a07      	ldr	r2, [pc, #28]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d101      	bne.n	8003926 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003922:	4b07      	ldr	r3, [pc, #28]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003924:	e001      	b.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003926:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392a:	685a      	ldr	r2, [r3, #4]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4902      	ldr	r1, [pc, #8]	; (800393c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003932:	428b      	cmp	r3, r1
 8003934:	d106      	bne.n	8003944 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003936:	4b02      	ldr	r3, [pc, #8]	; (8003940 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003938:	e006      	b.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800393a:	bf00      	nop
 800393c:	40003800 	.word	0x40003800
 8003940:	40003400 	.word	0x40003400
 8003944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003948:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800394c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800395c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800396a:	f043 0204 	orr.w	r2, r3, #4
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003972:	6878      	ldr	r0, [r7, #4]
 8003974:	f7ff fdc0 	bl	80034f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003978:	e000      	b.n	800397c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800397a:	bf00      	nop
}
 800397c:	bf00      	nop
 800397e:	3720      	adds	r7, #32
 8003980:	46bd      	mov	sp, r7
 8003982:	bd80      	pop	{r7, pc}

08003984 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003984:	b480      	push	{r7}
 8003986:	b083      	sub	sp, #12
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800398c:	bf00      	nop
 800398e:	370c      	adds	r7, #12
 8003990:	46bd      	mov	sp, r7
 8003992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003996:	4770      	bx	lr

08003998 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b082      	sub	sp, #8
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a4:	1c99      	adds	r1, r3, #2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6251      	str	r1, [r2, #36]	; 0x24
 80039aa:	881a      	ldrh	r2, [r3, #0]
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039b6:	b29b      	uxth	r3, r3
 80039b8:	3b01      	subs	r3, #1
 80039ba:	b29a      	uxth	r2, r3
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d113      	bne.n	80039f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	685a      	ldr	r2, [r3, #4]
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039de:	b29b      	uxth	r3, r3
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d106      	bne.n	80039f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff ffc9 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80039f2:	bf00      	nop
 80039f4:	3708      	adds	r7, #8
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
	...

080039fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	1c99      	adds	r1, r3, #2
 8003a0a:	687a      	ldr	r2, [r7, #4]
 8003a0c:	6251      	str	r1, [r2, #36]	; 0x24
 8003a0e:	8819      	ldrh	r1, [r3, #0]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	4a1d      	ldr	r2, [pc, #116]	; (8003a8c <I2SEx_TxISR_I2SExt+0x90>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d101      	bne.n	8003a1e <I2SEx_TxISR_I2SExt+0x22>
 8003a1a:	4b1d      	ldr	r3, [pc, #116]	; (8003a90 <I2SEx_TxISR_I2SExt+0x94>)
 8003a1c:	e001      	b.n	8003a22 <I2SEx_TxISR_I2SExt+0x26>
 8003a1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a22:	460a      	mov	r2, r1
 8003a24:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b01      	subs	r3, #1
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a38:	b29b      	uxth	r3, r3
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d121      	bne.n	8003a82 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	4a12      	ldr	r2, [pc, #72]	; (8003a8c <I2SEx_TxISR_I2SExt+0x90>)
 8003a44:	4293      	cmp	r3, r2
 8003a46:	d101      	bne.n	8003a4c <I2SEx_TxISR_I2SExt+0x50>
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <I2SEx_TxISR_I2SExt+0x94>)
 8003a4a:	e001      	b.n	8003a50 <I2SEx_TxISR_I2SExt+0x54>
 8003a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a50:	685a      	ldr	r2, [r3, #4]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	490d      	ldr	r1, [pc, #52]	; (8003a8c <I2SEx_TxISR_I2SExt+0x90>)
 8003a58:	428b      	cmp	r3, r1
 8003a5a:	d101      	bne.n	8003a60 <I2SEx_TxISR_I2SExt+0x64>
 8003a5c:	4b0c      	ldr	r3, [pc, #48]	; (8003a90 <I2SEx_TxISR_I2SExt+0x94>)
 8003a5e:	e001      	b.n	8003a64 <I2SEx_TxISR_I2SExt+0x68>
 8003a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a68:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a6e:	b29b      	uxth	r3, r3
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d106      	bne.n	8003a82 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff ff81 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a82:	bf00      	nop
 8003a84:	3708      	adds	r7, #8
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40003800 	.word	0x40003800
 8003a90:	40003400 	.word	0x40003400

08003a94 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b082      	sub	sp, #8
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68d8      	ldr	r0, [r3, #12]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	1c99      	adds	r1, r3, #2
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003aac:	b282      	uxth	r2, r0
 8003aae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ab4:	b29b      	uxth	r3, r3
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d113      	bne.n	8003af0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	685a      	ldr	r2, [r3, #4]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ad6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d106      	bne.n	8003af0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2201      	movs	r2, #1
 8003ae6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f7ff ff4a 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003af0:	bf00      	nop
 8003af2:	3708      	adds	r7, #8
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bd80      	pop	{r7, pc}

08003af8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a20      	ldr	r2, [pc, #128]	; (8003b88 <I2SEx_RxISR_I2SExt+0x90>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d101      	bne.n	8003b0e <I2SEx_RxISR_I2SExt+0x16>
 8003b0a:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <I2SEx_RxISR_I2SExt+0x94>)
 8003b0c:	e001      	b.n	8003b12 <I2SEx_RxISR_I2SExt+0x1a>
 8003b0e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b12:	68d8      	ldr	r0, [r3, #12]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b18:	1c99      	adds	r1, r3, #2
 8003b1a:	687a      	ldr	r2, [r7, #4]
 8003b1c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003b1e:	b282      	uxth	r2, r0
 8003b20:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	3b01      	subs	r3, #1
 8003b2a:	b29a      	uxth	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003b34:	b29b      	uxth	r3, r3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d121      	bne.n	8003b7e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a12      	ldr	r2, [pc, #72]	; (8003b88 <I2SEx_RxISR_I2SExt+0x90>)
 8003b40:	4293      	cmp	r3, r2
 8003b42:	d101      	bne.n	8003b48 <I2SEx_RxISR_I2SExt+0x50>
 8003b44:	4b11      	ldr	r3, [pc, #68]	; (8003b8c <I2SEx_RxISR_I2SExt+0x94>)
 8003b46:	e001      	b.n	8003b4c <I2SEx_RxISR_I2SExt+0x54>
 8003b48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	490d      	ldr	r1, [pc, #52]	; (8003b88 <I2SEx_RxISR_I2SExt+0x90>)
 8003b54:	428b      	cmp	r3, r1
 8003b56:	d101      	bne.n	8003b5c <I2SEx_RxISR_I2SExt+0x64>
 8003b58:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <I2SEx_RxISR_I2SExt+0x94>)
 8003b5a:	e001      	b.n	8003b60 <I2SEx_RxISR_I2SExt+0x68>
 8003b5c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b60:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b64:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d106      	bne.n	8003b7e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	2201      	movs	r2, #1
 8003b74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003b78:	6878      	ldr	r0, [r7, #4]
 8003b7a:	f7ff ff03 	bl	8003984 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003b7e:	bf00      	nop
 8003b80:	3708      	adds	r7, #8
 8003b82:	46bd      	mov	sp, r7
 8003b84:	bd80      	pop	{r7, pc}
 8003b86:	bf00      	nop
 8003b88:	40003800 	.word	0x40003800
 8003b8c:	40003400 	.word	0x40003400

08003b90 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b90:	b580      	push	{r7, lr}
 8003b92:	b086      	sub	sp, #24
 8003b94:	af00      	add	r7, sp, #0
 8003b96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d101      	bne.n	8003ba2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e267      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f003 0301 	and.w	r3, r3, #1
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d075      	beq.n	8003c9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bae:	4b88      	ldr	r3, [pc, #544]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	689b      	ldr	r3, [r3, #8]
 8003bb2:	f003 030c 	and.w	r3, r3, #12
 8003bb6:	2b04      	cmp	r3, #4
 8003bb8:	d00c      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bba:	4b85      	ldr	r3, [pc, #532]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003bc2:	2b08      	cmp	r3, #8
 8003bc4:	d112      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bc6:	4b82      	ldr	r3, [pc, #520]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003bd2:	d10b      	bne.n	8003bec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003bd4:	4b7e      	ldr	r3, [pc, #504]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d05b      	beq.n	8003c98 <HAL_RCC_OscConfig+0x108>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d157      	bne.n	8003c98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003be8:	2301      	movs	r3, #1
 8003bea:	e242      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bf4:	d106      	bne.n	8003c04 <HAL_RCC_OscConfig+0x74>
 8003bf6:	4b76      	ldr	r3, [pc, #472]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a75      	ldr	r2, [pc, #468]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003bfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c00:	6013      	str	r3, [r2, #0]
 8003c02:	e01d      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c0c:	d10c      	bne.n	8003c28 <HAL_RCC_OscConfig+0x98>
 8003c0e:	4b70      	ldr	r3, [pc, #448]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4a6f      	ldr	r2, [pc, #444]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c14:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c18:	6013      	str	r3, [r2, #0]
 8003c1a:	4b6d      	ldr	r3, [pc, #436]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a6c      	ldr	r2, [pc, #432]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c24:	6013      	str	r3, [r2, #0]
 8003c26:	e00b      	b.n	8003c40 <HAL_RCC_OscConfig+0xb0>
 8003c28:	4b69      	ldr	r3, [pc, #420]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a68      	ldr	r2, [pc, #416]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	4b66      	ldr	r3, [pc, #408]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4a65      	ldr	r2, [pc, #404]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c3a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d013      	beq.n	8003c70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c48:	f7fd faf0 	bl	800122c <HAL_GetTick>
 8003c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c4e:	e008      	b.n	8003c62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c50:	f7fd faec 	bl	800122c <HAL_GetTick>
 8003c54:	4602      	mov	r2, r0
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	1ad3      	subs	r3, r2, r3
 8003c5a:	2b64      	cmp	r3, #100	; 0x64
 8003c5c:	d901      	bls.n	8003c62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c5e:	2303      	movs	r3, #3
 8003c60:	e207      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c62:	4b5b      	ldr	r3, [pc, #364]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0f0      	beq.n	8003c50 <HAL_RCC_OscConfig+0xc0>
 8003c6e:	e014      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c70:	f7fd fadc 	bl	800122c <HAL_GetTick>
 8003c74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c76:	e008      	b.n	8003c8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c78:	f7fd fad8 	bl	800122c <HAL_GetTick>
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	1ad3      	subs	r3, r2, r3
 8003c82:	2b64      	cmp	r3, #100	; 0x64
 8003c84:	d901      	bls.n	8003c8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c86:	2303      	movs	r3, #3
 8003c88:	e1f3      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c8a:	4b51      	ldr	r3, [pc, #324]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1f0      	bne.n	8003c78 <HAL_RCC_OscConfig+0xe8>
 8003c96:	e000      	b.n	8003c9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	f003 0302 	and.w	r3, r3, #2
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d063      	beq.n	8003d6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ca6:	4b4a      	ldr	r3, [pc, #296]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 030c 	and.w	r3, r3, #12
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d00b      	beq.n	8003cca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cb2:	4b47      	ldr	r3, [pc, #284]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003cba:	2b08      	cmp	r3, #8
 8003cbc:	d11c      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003cbe:	4b44      	ldr	r3, [pc, #272]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cc0:	685b      	ldr	r3, [r3, #4]
 8003cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d116      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cca:	4b41      	ldr	r3, [pc, #260]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d005      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68db      	ldr	r3, [r3, #12]
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d001      	beq.n	8003ce2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e1c7      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ce2:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	691b      	ldr	r3, [r3, #16]
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	4937      	ldr	r1, [pc, #220]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003cf6:	e03a      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	68db      	ldr	r3, [r3, #12]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d020      	beq.n	8003d42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d00:	4b34      	ldr	r3, [pc, #208]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d02:	2201      	movs	r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d06:	f7fd fa91 	bl	800122c <HAL_GetTick>
 8003d0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d0c:	e008      	b.n	8003d20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d0e:	f7fd fa8d 	bl	800122c <HAL_GetTick>
 8003d12:	4602      	mov	r2, r0
 8003d14:	693b      	ldr	r3, [r7, #16]
 8003d16:	1ad3      	subs	r3, r2, r3
 8003d18:	2b02      	cmp	r3, #2
 8003d1a:	d901      	bls.n	8003d20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	e1a8      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d20:	4b2b      	ldr	r3, [pc, #172]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f003 0302 	and.w	r3, r3, #2
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d0f0      	beq.n	8003d0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d2c:	4b28      	ldr	r3, [pc, #160]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	00db      	lsls	r3, r3, #3
 8003d3a:	4925      	ldr	r1, [pc, #148]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	600b      	str	r3, [r1, #0]
 8003d40:	e015      	b.n	8003d6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d42:	4b24      	ldr	r3, [pc, #144]	; (8003dd4 <HAL_RCC_OscConfig+0x244>)
 8003d44:	2200      	movs	r2, #0
 8003d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d48:	f7fd fa70 	bl	800122c <HAL_GetTick>
 8003d4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d4e:	e008      	b.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d50:	f7fd fa6c 	bl	800122c <HAL_GetTick>
 8003d54:	4602      	mov	r2, r0
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	2b02      	cmp	r3, #2
 8003d5c:	d901      	bls.n	8003d62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d5e:	2303      	movs	r3, #3
 8003d60:	e187      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d62:	4b1b      	ldr	r3, [pc, #108]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f003 0302 	and.w	r3, r3, #2
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d1f0      	bne.n	8003d50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0308 	and.w	r3, r3, #8
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d036      	beq.n	8003de8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d016      	beq.n	8003db0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d82:	4b15      	ldr	r3, [pc, #84]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003d84:	2201      	movs	r2, #1
 8003d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d88:	f7fd fa50 	bl	800122c <HAL_GetTick>
 8003d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d8e:	e008      	b.n	8003da2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d90:	f7fd fa4c 	bl	800122c <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d901      	bls.n	8003da2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d9e:	2303      	movs	r3, #3
 8003da0:	e167      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <HAL_RCC_OscConfig+0x240>)
 8003da4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da6:	f003 0302 	and.w	r3, r3, #2
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d0f0      	beq.n	8003d90 <HAL_RCC_OscConfig+0x200>
 8003dae:	e01b      	b.n	8003de8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003db0:	4b09      	ldr	r3, [pc, #36]	; (8003dd8 <HAL_RCC_OscConfig+0x248>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003db6:	f7fd fa39 	bl	800122c <HAL_GetTick>
 8003dba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003dbc:	e00e      	b.n	8003ddc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dbe:	f7fd fa35 	bl	800122c <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d907      	bls.n	8003ddc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003dcc:	2303      	movs	r3, #3
 8003dce:	e150      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8003dd0:	40023800 	.word	0x40023800
 8003dd4:	42470000 	.word	0x42470000
 8003dd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ddc:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	f003 0302 	and.w	r3, r3, #2
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ea      	bne.n	8003dbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f003 0304 	and.w	r3, r3, #4
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	f000 8097 	beq.w	8003f24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003df6:	2300      	movs	r3, #0
 8003df8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003dfa:	4b81      	ldr	r3, [pc, #516]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10f      	bne.n	8003e26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e06:	2300      	movs	r3, #0
 8003e08:	60bb      	str	r3, [r7, #8]
 8003e0a:	4b7d      	ldr	r3, [pc, #500]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0e:	4a7c      	ldr	r2, [pc, #496]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e14:	6413      	str	r3, [r2, #64]	; 0x40
 8003e16:	4b7a      	ldr	r3, [pc, #488]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e1e:	60bb      	str	r3, [r7, #8]
 8003e20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e22:	2301      	movs	r3, #1
 8003e24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e26:	4b77      	ldr	r3, [pc, #476]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d118      	bne.n	8003e64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e32:	4b74      	ldr	r3, [pc, #464]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4a73      	ldr	r2, [pc, #460]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e3e:	f7fd f9f5 	bl	800122c <HAL_GetTick>
 8003e42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e44:	e008      	b.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e46:	f7fd f9f1 	bl	800122c <HAL_GetTick>
 8003e4a:	4602      	mov	r2, r0
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	1ad3      	subs	r3, r2, r3
 8003e50:	2b02      	cmp	r3, #2
 8003e52:	d901      	bls.n	8003e58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003e54:	2303      	movs	r3, #3
 8003e56:	e10c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e58:	4b6a      	ldr	r3, [pc, #424]	; (8004004 <HAL_RCC_OscConfig+0x474>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d0f0      	beq.n	8003e46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d106      	bne.n	8003e7a <HAL_RCC_OscConfig+0x2ea>
 8003e6c:	4b64      	ldr	r3, [pc, #400]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e70:	4a63      	ldr	r2, [pc, #396]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e72:	f043 0301 	orr.w	r3, r3, #1
 8003e76:	6713      	str	r3, [r2, #112]	; 0x70
 8003e78:	e01c      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	2b05      	cmp	r3, #5
 8003e80:	d10c      	bne.n	8003e9c <HAL_RCC_OscConfig+0x30c>
 8003e82:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	4a5e      	ldr	r2, [pc, #376]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e88:	f043 0304 	orr.w	r3, r3, #4
 8003e8c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e8e:	4b5c      	ldr	r3, [pc, #368]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e92:	4a5b      	ldr	r2, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e94:	f043 0301 	orr.w	r3, r3, #1
 8003e98:	6713      	str	r3, [r2, #112]	; 0x70
 8003e9a:	e00b      	b.n	8003eb4 <HAL_RCC_OscConfig+0x324>
 8003e9c:	4b58      	ldr	r3, [pc, #352]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003e9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ea0:	4a57      	ldr	r2, [pc, #348]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003ea2:	f023 0301 	bic.w	r3, r3, #1
 8003ea6:	6713      	str	r3, [r2, #112]	; 0x70
 8003ea8:	4b55      	ldr	r3, [pc, #340]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eac:	4a54      	ldr	r2, [pc, #336]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 0304 	bic.w	r3, r3, #4
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	689b      	ldr	r3, [r3, #8]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d015      	beq.n	8003ee8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fd f9b6 	bl	800122c <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ec2:	e00a      	b.n	8003eda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ec4:	f7fd f9b2 	bl	800122c <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d901      	bls.n	8003eda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003ed6:	2303      	movs	r3, #3
 8003ed8:	e0cb      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	4b49      	ldr	r3, [pc, #292]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003edc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ede:	f003 0302 	and.w	r3, r3, #2
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d0ee      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x334>
 8003ee6:	e014      	b.n	8003f12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ee8:	f7fd f9a0 	bl	800122c <HAL_GetTick>
 8003eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eee:	e00a      	b.n	8003f06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ef0:	f7fd f99c 	bl	800122c <HAL_GetTick>
 8003ef4:	4602      	mov	r2, r0
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	1ad3      	subs	r3, r2, r3
 8003efa:	f241 3288 	movw	r2, #5000	; 0x1388
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d901      	bls.n	8003f06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	e0b5      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f06:	4b3e      	ldr	r3, [pc, #248]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d1ee      	bne.n	8003ef0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f12:	7dfb      	ldrb	r3, [r7, #23]
 8003f14:	2b01      	cmp	r3, #1
 8003f16:	d105      	bne.n	8003f24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f18:	4b39      	ldr	r3, [pc, #228]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f1c:	4a38      	ldr	r2, [pc, #224]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f1e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f22:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	699b      	ldr	r3, [r3, #24]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	f000 80a1 	beq.w	8004070 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003f2e:	4b34      	ldr	r3, [pc, #208]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b08      	cmp	r3, #8
 8003f38:	d05c      	beq.n	8003ff4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	699b      	ldr	r3, [r3, #24]
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d141      	bne.n	8003fc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f42:	4b31      	ldr	r3, [pc, #196]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f48:	f7fd f970 	bl	800122c <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f4e:	e008      	b.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f50:	f7fd f96c 	bl	800122c <HAL_GetTick>
 8003f54:	4602      	mov	r2, r0
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	1ad3      	subs	r3, r2, r3
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d901      	bls.n	8003f62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f5e:	2303      	movs	r3, #3
 8003f60:	e087      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	4b27      	ldr	r3, [pc, #156]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d1f0      	bne.n	8003f50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69da      	ldr	r2, [r3, #28]
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	6a1b      	ldr	r3, [r3, #32]
 8003f76:	431a      	orrs	r2, r3
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7c:	019b      	lsls	r3, r3, #6
 8003f7e:	431a      	orrs	r2, r3
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f84:	085b      	lsrs	r3, r3, #1
 8003f86:	3b01      	subs	r3, #1
 8003f88:	041b      	lsls	r3, r3, #16
 8003f8a:	431a      	orrs	r2, r3
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f90:	061b      	lsls	r3, r3, #24
 8003f92:	491b      	ldr	r1, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f98:	4b1b      	ldr	r3, [pc, #108]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f9e:	f7fd f945 	bl	800122c <HAL_GetTick>
 8003fa2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fa4:	e008      	b.n	8003fb8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fa6:	f7fd f941 	bl	800122c <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	693b      	ldr	r3, [r7, #16]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	2b02      	cmp	r3, #2
 8003fb2:	d901      	bls.n	8003fb8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003fb4:	2303      	movs	r3, #3
 8003fb6:	e05c      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003fb8:	4b11      	ldr	r3, [pc, #68]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d0f0      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x416>
 8003fc4:	e054      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc6:	4b10      	ldr	r3, [pc, #64]	; (8004008 <HAL_RCC_OscConfig+0x478>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fcc:	f7fd f92e 	bl	800122c <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7fd f92a 	bl	800122c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e045      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_RCC_OscConfig+0x470>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x444>
 8003ff2:	e03d      	b.n	8004070 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	699b      	ldr	r3, [r3, #24]
 8003ff8:	2b01      	cmp	r3, #1
 8003ffa:	d107      	bne.n	800400c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e038      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	40007000 	.word	0x40007000
 8004008:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800400c:	4b1b      	ldr	r3, [pc, #108]	; (800407c <HAL_RCC_OscConfig+0x4ec>)
 800400e:	685b      	ldr	r3, [r3, #4]
 8004010:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d028      	beq.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004024:	429a      	cmp	r2, r3
 8004026:	d121      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004032:	429a      	cmp	r2, r3
 8004034:	d11a      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800403c:	4013      	ands	r3, r2
 800403e:	687a      	ldr	r2, [r7, #4]
 8004040:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004042:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004044:	4293      	cmp	r3, r2
 8004046:	d111      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004052:	085b      	lsrs	r3, r3, #1
 8004054:	3b01      	subs	r3, #1
 8004056:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004058:	429a      	cmp	r2, r3
 800405a:	d107      	bne.n	800406c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004066:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004068:	429a      	cmp	r2, r3
 800406a:	d001      	beq.n	8004070 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3718      	adds	r7, #24
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004080:	b580      	push	{r7, lr}
 8004082:	b084      	sub	sp, #16
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
 8004088:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004090:	2301      	movs	r3, #1
 8004092:	e0cc      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004094:	4b68      	ldr	r3, [pc, #416]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0307 	and.w	r3, r3, #7
 800409c:	683a      	ldr	r2, [r7, #0]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d90c      	bls.n	80040bc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a2:	4b65      	ldr	r3, [pc, #404]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040a4:	683a      	ldr	r2, [r7, #0]
 80040a6:	b2d2      	uxtb	r2, r2
 80040a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040aa:	4b63      	ldr	r3, [pc, #396]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 0307 	and.w	r3, r3, #7
 80040b2:	683a      	ldr	r2, [r7, #0]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d001      	beq.n	80040bc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e0b8      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	f003 0302 	and.w	r3, r3, #2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d020      	beq.n	800410a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0304 	and.w	r3, r3, #4
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d005      	beq.n	80040e0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80040d4:	4b59      	ldr	r3, [pc, #356]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	4a58      	ldr	r2, [pc, #352]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80040de:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0308 	and.w	r3, r3, #8
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d005      	beq.n	80040f8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80040ec:	4b53      	ldr	r3, [pc, #332]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040ee:	689b      	ldr	r3, [r3, #8]
 80040f0:	4a52      	ldr	r2, [pc, #328]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040f6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040f8:	4b50      	ldr	r3, [pc, #320]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	689b      	ldr	r3, [r3, #8]
 8004104:	494d      	ldr	r1, [pc, #308]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004106:	4313      	orrs	r3, r2
 8004108:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	f003 0301 	and.w	r3, r3, #1
 8004112:	2b00      	cmp	r3, #0
 8004114:	d044      	beq.n	80041a0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	685b      	ldr	r3, [r3, #4]
 800411a:	2b01      	cmp	r3, #1
 800411c:	d107      	bne.n	800412e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800411e:	4b47      	ldr	r3, [pc, #284]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004126:	2b00      	cmp	r3, #0
 8004128:	d119      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b02      	cmp	r3, #2
 8004134:	d003      	beq.n	800413e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800413a:	2b03      	cmp	r3, #3
 800413c:	d107      	bne.n	800414e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800413e:	4b3f      	ldr	r3, [pc, #252]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004146:	2b00      	cmp	r3, #0
 8004148:	d109      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e06f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800414e:	4b3b      	ldr	r3, [pc, #236]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e067      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800415e:	4b37      	ldr	r3, [pc, #220]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f023 0203 	bic.w	r2, r3, #3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	685b      	ldr	r3, [r3, #4]
 800416a:	4934      	ldr	r1, [pc, #208]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800416c:	4313      	orrs	r3, r2
 800416e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004170:	f7fd f85c 	bl	800122c <HAL_GetTick>
 8004174:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004176:	e00a      	b.n	800418e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004178:	f7fd f858 	bl	800122c <HAL_GetTick>
 800417c:	4602      	mov	r2, r0
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	f241 3288 	movw	r2, #5000	; 0x1388
 8004186:	4293      	cmp	r3, r2
 8004188:	d901      	bls.n	800418e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800418a:	2303      	movs	r3, #3
 800418c:	e04f      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800418e:	4b2b      	ldr	r3, [pc, #172]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004190:	689b      	ldr	r3, [r3, #8]
 8004192:	f003 020c 	and.w	r2, r3, #12
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	009b      	lsls	r3, r3, #2
 800419c:	429a      	cmp	r2, r3
 800419e:	d1eb      	bne.n	8004178 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80041a0:	4b25      	ldr	r3, [pc, #148]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0307 	and.w	r3, r3, #7
 80041a8:	683a      	ldr	r2, [r7, #0]
 80041aa:	429a      	cmp	r2, r3
 80041ac:	d20c      	bcs.n	80041c8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ae:	4b22      	ldr	r3, [pc, #136]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b0:	683a      	ldr	r2, [r7, #0]
 80041b2:	b2d2      	uxtb	r2, r2
 80041b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041b6:	4b20      	ldr	r3, [pc, #128]	; (8004238 <HAL_RCC_ClockConfig+0x1b8>)
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	429a      	cmp	r2, r3
 80041c2:	d001      	beq.n	80041c8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e032      	b.n	800422e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0304 	and.w	r3, r3, #4
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d008      	beq.n	80041e6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80041d4:	4b19      	ldr	r3, [pc, #100]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041d6:	689b      	ldr	r3, [r3, #8]
 80041d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	4916      	ldr	r1, [pc, #88]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0308 	and.w	r3, r3, #8
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d009      	beq.n	8004206 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80041f2:	4b12      	ldr	r3, [pc, #72]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	00db      	lsls	r3, r3, #3
 8004200:	490e      	ldr	r1, [pc, #56]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 8004202:	4313      	orrs	r3, r2
 8004204:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004206:	f000 f821 	bl	800424c <HAL_RCC_GetSysClockFreq>
 800420a:	4602      	mov	r2, r0
 800420c:	4b0b      	ldr	r3, [pc, #44]	; (800423c <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 030f 	and.w	r3, r3, #15
 8004216:	490a      	ldr	r1, [pc, #40]	; (8004240 <HAL_RCC_ClockConfig+0x1c0>)
 8004218:	5ccb      	ldrb	r3, [r1, r3]
 800421a:	fa22 f303 	lsr.w	r3, r2, r3
 800421e:	4a09      	ldr	r2, [pc, #36]	; (8004244 <HAL_RCC_ClockConfig+0x1c4>)
 8004220:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004222:	4b09      	ldr	r3, [pc, #36]	; (8004248 <HAL_RCC_ClockConfig+0x1c8>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4618      	mov	r0, r3
 8004228:	f7fc ffbc 	bl	80011a4 <HAL_InitTick>

  return HAL_OK;
 800422c:	2300      	movs	r3, #0
}
 800422e:	4618      	mov	r0, r3
 8004230:	3710      	adds	r7, #16
 8004232:	46bd      	mov	sp, r7
 8004234:	bd80      	pop	{r7, pc}
 8004236:	bf00      	nop
 8004238:	40023c00 	.word	0x40023c00
 800423c:	40023800 	.word	0x40023800
 8004240:	08008440 	.word	0x08008440
 8004244:	20000000 	.word	0x20000000
 8004248:	20000004 	.word	0x20000004

0800424c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800424c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004250:	b094      	sub	sp, #80	; 0x50
 8004252:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004254:	2300      	movs	r3, #0
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	2300      	movs	r3, #0
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800425c:	2300      	movs	r3, #0
 800425e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004260:	2300      	movs	r3, #0
 8004262:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004264:	4b79      	ldr	r3, [pc, #484]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 030c 	and.w	r3, r3, #12
 800426c:	2b08      	cmp	r3, #8
 800426e:	d00d      	beq.n	800428c <HAL_RCC_GetSysClockFreq+0x40>
 8004270:	2b08      	cmp	r3, #8
 8004272:	f200 80e1 	bhi.w	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004276:	2b00      	cmp	r3, #0
 8004278:	d002      	beq.n	8004280 <HAL_RCC_GetSysClockFreq+0x34>
 800427a:	2b04      	cmp	r3, #4
 800427c:	d003      	beq.n	8004286 <HAL_RCC_GetSysClockFreq+0x3a>
 800427e:	e0db      	b.n	8004438 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004280:	4b73      	ldr	r3, [pc, #460]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 8004282:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004284:	e0db      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004286:	4b73      	ldr	r3, [pc, #460]	; (8004454 <HAL_RCC_GetSysClockFreq+0x208>)
 8004288:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800428a:	e0d8      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800428c:	4b6f      	ldr	r3, [pc, #444]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800428e:	685b      	ldr	r3, [r3, #4]
 8004290:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004294:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004296:	4b6d      	ldr	r3, [pc, #436]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d063      	beq.n	800436a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042a2:	4b6a      	ldr	r3, [pc, #424]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	099b      	lsrs	r3, r3, #6
 80042a8:	2200      	movs	r2, #0
 80042aa:	63bb      	str	r3, [r7, #56]	; 0x38
 80042ac:	63fa      	str	r2, [r7, #60]	; 0x3c
 80042ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042b4:	633b      	str	r3, [r7, #48]	; 0x30
 80042b6:	2300      	movs	r3, #0
 80042b8:	637b      	str	r3, [r7, #52]	; 0x34
 80042ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80042be:	4622      	mov	r2, r4
 80042c0:	462b      	mov	r3, r5
 80042c2:	f04f 0000 	mov.w	r0, #0
 80042c6:	f04f 0100 	mov.w	r1, #0
 80042ca:	0159      	lsls	r1, r3, #5
 80042cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80042d0:	0150      	lsls	r0, r2, #5
 80042d2:	4602      	mov	r2, r0
 80042d4:	460b      	mov	r3, r1
 80042d6:	4621      	mov	r1, r4
 80042d8:	1a51      	subs	r1, r2, r1
 80042da:	6139      	str	r1, [r7, #16]
 80042dc:	4629      	mov	r1, r5
 80042de:	eb63 0301 	sbc.w	r3, r3, r1
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	f04f 0200 	mov.w	r2, #0
 80042e8:	f04f 0300 	mov.w	r3, #0
 80042ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80042f0:	4659      	mov	r1, fp
 80042f2:	018b      	lsls	r3, r1, #6
 80042f4:	4651      	mov	r1, sl
 80042f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042fa:	4651      	mov	r1, sl
 80042fc:	018a      	lsls	r2, r1, #6
 80042fe:	4651      	mov	r1, sl
 8004300:	ebb2 0801 	subs.w	r8, r2, r1
 8004304:	4659      	mov	r1, fp
 8004306:	eb63 0901 	sbc.w	r9, r3, r1
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004316:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800431a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800431e:	4690      	mov	r8, r2
 8004320:	4699      	mov	r9, r3
 8004322:	4623      	mov	r3, r4
 8004324:	eb18 0303 	adds.w	r3, r8, r3
 8004328:	60bb      	str	r3, [r7, #8]
 800432a:	462b      	mov	r3, r5
 800432c:	eb49 0303 	adc.w	r3, r9, r3
 8004330:	60fb      	str	r3, [r7, #12]
 8004332:	f04f 0200 	mov.w	r2, #0
 8004336:	f04f 0300 	mov.w	r3, #0
 800433a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800433e:	4629      	mov	r1, r5
 8004340:	024b      	lsls	r3, r1, #9
 8004342:	4621      	mov	r1, r4
 8004344:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004348:	4621      	mov	r1, r4
 800434a:	024a      	lsls	r2, r1, #9
 800434c:	4610      	mov	r0, r2
 800434e:	4619      	mov	r1, r3
 8004350:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004352:	2200      	movs	r2, #0
 8004354:	62bb      	str	r3, [r7, #40]	; 0x28
 8004356:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004358:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800435c:	f7fb ffa8 	bl	80002b0 <__aeabi_uldivmod>
 8004360:	4602      	mov	r2, r0
 8004362:	460b      	mov	r3, r1
 8004364:	4613      	mov	r3, r2
 8004366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004368:	e058      	b.n	800441c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800436a:	4b38      	ldr	r3, [pc, #224]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	099b      	lsrs	r3, r3, #6
 8004370:	2200      	movs	r2, #0
 8004372:	4618      	mov	r0, r3
 8004374:	4611      	mov	r1, r2
 8004376:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800437a:	623b      	str	r3, [r7, #32]
 800437c:	2300      	movs	r3, #0
 800437e:	627b      	str	r3, [r7, #36]	; 0x24
 8004380:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004384:	4642      	mov	r2, r8
 8004386:	464b      	mov	r3, r9
 8004388:	f04f 0000 	mov.w	r0, #0
 800438c:	f04f 0100 	mov.w	r1, #0
 8004390:	0159      	lsls	r1, r3, #5
 8004392:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004396:	0150      	lsls	r0, r2, #5
 8004398:	4602      	mov	r2, r0
 800439a:	460b      	mov	r3, r1
 800439c:	4641      	mov	r1, r8
 800439e:	ebb2 0a01 	subs.w	sl, r2, r1
 80043a2:	4649      	mov	r1, r9
 80043a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80043a8:	f04f 0200 	mov.w	r2, #0
 80043ac:	f04f 0300 	mov.w	r3, #0
 80043b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80043b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80043b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80043bc:	ebb2 040a 	subs.w	r4, r2, sl
 80043c0:	eb63 050b 	sbc.w	r5, r3, fp
 80043c4:	f04f 0200 	mov.w	r2, #0
 80043c8:	f04f 0300 	mov.w	r3, #0
 80043cc:	00eb      	lsls	r3, r5, #3
 80043ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80043d2:	00e2      	lsls	r2, r4, #3
 80043d4:	4614      	mov	r4, r2
 80043d6:	461d      	mov	r5, r3
 80043d8:	4643      	mov	r3, r8
 80043da:	18e3      	adds	r3, r4, r3
 80043dc:	603b      	str	r3, [r7, #0]
 80043de:	464b      	mov	r3, r9
 80043e0:	eb45 0303 	adc.w	r3, r5, r3
 80043e4:	607b      	str	r3, [r7, #4]
 80043e6:	f04f 0200 	mov.w	r2, #0
 80043ea:	f04f 0300 	mov.w	r3, #0
 80043ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80043f2:	4629      	mov	r1, r5
 80043f4:	028b      	lsls	r3, r1, #10
 80043f6:	4621      	mov	r1, r4
 80043f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043fc:	4621      	mov	r1, r4
 80043fe:	028a      	lsls	r2, r1, #10
 8004400:	4610      	mov	r0, r2
 8004402:	4619      	mov	r1, r3
 8004404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004406:	2200      	movs	r2, #0
 8004408:	61bb      	str	r3, [r7, #24]
 800440a:	61fa      	str	r2, [r7, #28]
 800440c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004410:	f7fb ff4e 	bl	80002b0 <__aeabi_uldivmod>
 8004414:	4602      	mov	r2, r0
 8004416:	460b      	mov	r3, r1
 8004418:	4613      	mov	r3, r2
 800441a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800441c:	4b0b      	ldr	r3, [pc, #44]	; (800444c <HAL_RCC_GetSysClockFreq+0x200>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	0c1b      	lsrs	r3, r3, #16
 8004422:	f003 0303 	and.w	r3, r3, #3
 8004426:	3301      	adds	r3, #1
 8004428:	005b      	lsls	r3, r3, #1
 800442a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800442c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800442e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004430:	fbb2 f3f3 	udiv	r3, r2, r3
 8004434:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004436:	e002      	b.n	800443e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004438:	4b05      	ldr	r3, [pc, #20]	; (8004450 <HAL_RCC_GetSysClockFreq+0x204>)
 800443a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800443c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800443e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004440:	4618      	mov	r0, r3
 8004442:	3750      	adds	r7, #80	; 0x50
 8004444:	46bd      	mov	sp, r7
 8004446:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800444a:	bf00      	nop
 800444c:	40023800 	.word	0x40023800
 8004450:	00f42400 	.word	0x00f42400
 8004454:	007a1200 	.word	0x007a1200

08004458 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004458:	b480      	push	{r7}
 800445a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800445c:	4b03      	ldr	r3, [pc, #12]	; (800446c <HAL_RCC_GetHCLKFreq+0x14>)
 800445e:	681b      	ldr	r3, [r3, #0]
}
 8004460:	4618      	mov	r0, r3
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr
 800446a:	bf00      	nop
 800446c:	20000000 	.word	0x20000000

08004470 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004474:	f7ff fff0 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 8004478:	4602      	mov	r2, r0
 800447a:	4b05      	ldr	r3, [pc, #20]	; (8004490 <HAL_RCC_GetPCLK1Freq+0x20>)
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	0a9b      	lsrs	r3, r3, #10
 8004480:	f003 0307 	and.w	r3, r3, #7
 8004484:	4903      	ldr	r1, [pc, #12]	; (8004494 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004486:	5ccb      	ldrb	r3, [r1, r3]
 8004488:	fa22 f303 	lsr.w	r3, r2, r3
}
 800448c:	4618      	mov	r0, r3
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40023800 	.word	0x40023800
 8004494:	08008450 	.word	0x08008450

08004498 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800449c:	f7ff ffdc 	bl	8004458 <HAL_RCC_GetHCLKFreq>
 80044a0:	4602      	mov	r2, r0
 80044a2:	4b05      	ldr	r3, [pc, #20]	; (80044b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	0b5b      	lsrs	r3, r3, #13
 80044a8:	f003 0307 	and.w	r3, r3, #7
 80044ac:	4903      	ldr	r1, [pc, #12]	; (80044bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80044ae:	5ccb      	ldrb	r3, [r1, r3]
 80044b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	40023800 	.word	0x40023800
 80044bc:	08008450 	.word	0x08008450

080044c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80044cc:	2300      	movs	r3, #0
 80044ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d105      	bne.n	80044e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d038      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80044e8:	4b68      	ldr	r3, [pc, #416]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044ee:	f7fc fe9d 	bl	800122c <HAL_GetTick>
 80044f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044f4:	e008      	b.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044f6:	f7fc fe99 	bl	800122c <HAL_GetTick>
 80044fa:	4602      	mov	r2, r0
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	2b02      	cmp	r3, #2
 8004502:	d901      	bls.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e0bd      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004508:	4b61      	ldr	r3, [pc, #388]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004510:	2b00      	cmp	r3, #0
 8004512:	d1f0      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	685a      	ldr	r2, [r3, #4]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	689b      	ldr	r3, [r3, #8]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	431a      	orrs	r2, r3
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68db      	ldr	r3, [r3, #12]
 8004524:	071b      	lsls	r3, r3, #28
 8004526:	495a      	ldr	r1, [pc, #360]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004528:	4313      	orrs	r3, r2
 800452a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800452e:	4b57      	ldr	r3, [pc, #348]	; (800468c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004530:	2201      	movs	r2, #1
 8004532:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004534:	f7fc fe7a 	bl	800122c <HAL_GetTick>
 8004538:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800453a:	e008      	b.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800453c:	f7fc fe76 	bl	800122c <HAL_GetTick>
 8004540:	4602      	mov	r2, r0
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	1ad3      	subs	r3, r2, r3
 8004546:	2b02      	cmp	r3, #2
 8004548:	d901      	bls.n	800454e <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e09a      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800454e:	4b50      	ldr	r3, [pc, #320]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004556:	2b00      	cmp	r3, #0
 8004558:	d0f0      	beq.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0302 	and.w	r3, r3, #2
 8004562:	2b00      	cmp	r3, #0
 8004564:	f000 8083 	beq.w	800466e <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004568:	2300      	movs	r3, #0
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	4b48      	ldr	r3, [pc, #288]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800456e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004570:	4a47      	ldr	r2, [pc, #284]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004572:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004576:	6413      	str	r3, [r2, #64]	; 0x40
 8004578:	4b45      	ldr	r3, [pc, #276]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800457a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004584:	4b43      	ldr	r3, [pc, #268]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	4a42      	ldr	r2, [pc, #264]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800458a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800458e:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004590:	f7fc fe4c 	bl	800122c <HAL_GetTick>
 8004594:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004596:	e008      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004598:	f7fc fe48 	bl	800122c <HAL_GetTick>
 800459c:	4602      	mov	r2, r0
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	1ad3      	subs	r3, r2, r3
 80045a2:	2b02      	cmp	r3, #2
 80045a4:	d901      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 80045a6:	2303      	movs	r3, #3
 80045a8:	e06c      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80045aa:	4b3a      	ldr	r3, [pc, #232]	; (8004694 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0f0      	beq.n	8004598 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80045b6:	4b36      	ldr	r3, [pc, #216]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045be:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80045c0:	693b      	ldr	r3, [r7, #16]
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d02f      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x166>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	691b      	ldr	r3, [r3, #16]
 80045ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045ce:	693a      	ldr	r2, [r7, #16]
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d028      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80045d4:	4b2e      	ldr	r3, [pc, #184]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045dc:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80045de:	4b2e      	ldr	r3, [pc, #184]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045e0:	2201      	movs	r2, #1
 80045e2:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80045e4:	4b2c      	ldr	r3, [pc, #176]	; (8004698 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80045e6:	2200      	movs	r2, #0
 80045e8:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80045ea:	4a29      	ldr	r2, [pc, #164]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ec:	693b      	ldr	r3, [r7, #16]
 80045ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80045f0:	4b27      	ldr	r3, [pc, #156]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045f4:	f003 0301 	and.w	r3, r3, #1
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d114      	bne.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80045fc:	f7fc fe16 	bl	800122c <HAL_GetTick>
 8004600:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004602:	e00a      	b.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004604:	f7fc fe12 	bl	800122c <HAL_GetTick>
 8004608:	4602      	mov	r2, r0
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	1ad3      	subs	r3, r2, r3
 800460e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004612:	4293      	cmp	r3, r2
 8004614:	d901      	bls.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8004616:	2303      	movs	r3, #3
 8004618:	e034      	b.n	8004684 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800461a:	4b1d      	ldr	r3, [pc, #116]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800461c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461e:	f003 0302 	and.w	r3, r3, #2
 8004622:	2b00      	cmp	r3, #0
 8004624:	d0ee      	beq.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	691b      	ldr	r3, [r3, #16]
 800462a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800462e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004632:	d10d      	bne.n	8004650 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8004634:	4b16      	ldr	r3, [pc, #88]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004644:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004648:	4911      	ldr	r1, [pc, #68]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	4313      	orrs	r3, r2
 800464c:	608b      	str	r3, [r1, #8]
 800464e:	e005      	b.n	800465c <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8004650:	4b0f      	ldr	r3, [pc, #60]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004652:	689b      	ldr	r3, [r3, #8]
 8004654:	4a0e      	ldr	r2, [pc, #56]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800465a:	6093      	str	r3, [r2, #8]
 800465c:	4b0c      	ldr	r3, [pc, #48]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800465e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004668:	4909      	ldr	r1, [pc, #36]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800466a:	4313      	orrs	r3, r2
 800466c:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f003 0308 	and.w	r3, r3, #8
 8004676:	2b00      	cmp	r3, #0
 8004678:	d003      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	7d1a      	ldrb	r2, [r3, #20]
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8004680:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004682:	2300      	movs	r3, #0
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	42470068 	.word	0x42470068
 8004690:	40023800 	.word	0x40023800
 8004694:	40007000 	.word	0x40007000
 8004698:	42470e40 	.word	0x42470e40
 800469c:	424711e0 	.word	0x424711e0

080046a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b087      	sub	sp, #28
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80046a8:	2300      	movs	r3, #0
 80046aa:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80046ac:	2300      	movs	r3, #0
 80046ae:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80046b0:	2300      	movs	r3, #0
 80046b2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d140      	bne.n	8004740 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80046be:	4b24      	ldr	r3, [pc, #144]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80046c6:	60fb      	str	r3, [r7, #12]
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d005      	beq.n	80046da <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d131      	bne.n	8004738 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80046d4:	4b1f      	ldr	r3, [pc, #124]	; (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80046d6:	617b      	str	r3, [r7, #20]
          break;
 80046d8:	e031      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80046da:	4b1d      	ldr	r3, [pc, #116]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046e6:	d109      	bne.n	80046fc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046e8:	4b19      	ldr	r3, [pc, #100]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046ee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80046f2:	4a19      	ldr	r2, [pc, #100]	; (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80046f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046f8:	613b      	str	r3, [r7, #16]
 80046fa:	e008      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80046fc:	4b14      	ldr	r3, [pc, #80]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80046fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004702:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004706:	4a15      	ldr	r2, [pc, #84]	; (800475c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8004708:	fbb2 f3f3 	udiv	r3, r2, r3
 800470c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800470e:	4b10      	ldr	r3, [pc, #64]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004714:	099b      	lsrs	r3, r3, #6
 8004716:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	fb02 f303 	mul.w	r3, r2, r3
 8004720:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004722:	4b0b      	ldr	r3, [pc, #44]	; (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004728:	0f1b      	lsrs	r3, r3, #28
 800472a:	f003 0307 	and.w	r3, r3, #7
 800472e:	68ba      	ldr	r2, [r7, #8]
 8004730:	fbb2 f3f3 	udiv	r3, r2, r3
 8004734:	617b      	str	r3, [r7, #20]
          break;
 8004736:	e002      	b.n	800473e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	617b      	str	r3, [r7, #20]
          break;
 800473c:	bf00      	nop
        }
      }
      break;
 800473e:	bf00      	nop
    }
  }
  return frequency;
 8004740:	697b      	ldr	r3, [r7, #20]
}
 8004742:	4618      	mov	r0, r3
 8004744:	371c      	adds	r7, #28
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40023800 	.word	0x40023800
 8004754:	00bb8000 	.word	0x00bb8000
 8004758:	007a1200 	.word	0x007a1200
 800475c:	00f42400 	.word	0x00f42400

08004760 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d101      	bne.n	8004772 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800476e:	2301      	movs	r3, #1
 8004770:	e07b      	b.n	800486a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004776:	2b00      	cmp	r3, #0
 8004778:	d108      	bne.n	800478c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	685b      	ldr	r3, [r3, #4]
 800477e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004782:	d009      	beq.n	8004798 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	61da      	str	r2, [r3, #28]
 800478a:	e005      	b.n	8004798 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	2200      	movs	r2, #0
 8004790:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2200      	movs	r2, #0
 8004796:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d106      	bne.n	80047b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2200      	movs	r2, #0
 80047ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f7fc fb10 	bl	8000dd8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2202      	movs	r2, #2
 80047bc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	689b      	ldr	r3, [r3, #8]
 80047dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80047e0:	431a      	orrs	r2, r3
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	68db      	ldr	r3, [r3, #12]
 80047e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80047ea:	431a      	orrs	r2, r3
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	f003 0302 	and.w	r3, r3, #2
 80047f4:	431a      	orrs	r2, r3
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	695b      	ldr	r3, [r3, #20]
 80047fa:	f003 0301 	and.w	r3, r3, #1
 80047fe:	431a      	orrs	r2, r3
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	699b      	ldr	r3, [r3, #24]
 8004804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004808:	431a      	orrs	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69db      	ldr	r3, [r3, #28]
 800480e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004812:	431a      	orrs	r2, r3
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a1b      	ldr	r3, [r3, #32]
 8004818:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800481c:	ea42 0103 	orr.w	r1, r2, r3
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004824:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	430a      	orrs	r2, r1
 800482e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699b      	ldr	r3, [r3, #24]
 8004834:	0c1b      	lsrs	r3, r3, #16
 8004836:	f003 0104 	and.w	r1, r3, #4
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483e:	f003 0210 	and.w	r2, r3, #16
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	69da      	ldr	r2, [r3, #28]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004858:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2201      	movs	r2, #1
 8004864:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004868:	2300      	movs	r3, #0
}
 800486a:	4618      	mov	r0, r3
 800486c:	3708      	adds	r7, #8
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}

08004872 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004872:	b580      	push	{r7, lr}
 8004874:	b082      	sub	sp, #8
 8004876:	af00      	add	r7, sp, #0
 8004878:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004880:	2301      	movs	r3, #1
 8004882:	e03f      	b.n	8004904 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800488a:	b2db      	uxtb	r3, r3
 800488c:	2b00      	cmp	r3, #0
 800488e:	d106      	bne.n	800489e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2200      	movs	r2, #0
 8004894:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fc fae5 	bl	8000e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2224      	movs	r2, #36	; 0x24
 80048a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68da      	ldr	r2, [r3, #12]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048b4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f928 	bl	8004b0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	691a      	ldr	r2, [r3, #16]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048ca:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	695a      	ldr	r2, [r3, #20]
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048da:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	68da      	ldr	r2, [r3, #12]
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048ea:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2200      	movs	r2, #0
 80048f0:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2220      	movs	r2, #32
 80048f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2220      	movs	r2, #32
 80048fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004902:	2300      	movs	r3, #0
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af02      	add	r7, sp, #8
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	60b9      	str	r1, [r7, #8]
 8004916:	603b      	str	r3, [r7, #0]
 8004918:	4613      	mov	r3, r2
 800491a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800491c:	2300      	movs	r3, #0
 800491e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004926:	b2db      	uxtb	r3, r3
 8004928:	2b20      	cmp	r3, #32
 800492a:	d17c      	bne.n	8004a26 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800492c:	68bb      	ldr	r3, [r7, #8]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d002      	beq.n	8004938 <HAL_UART_Transmit+0x2c>
 8004932:	88fb      	ldrh	r3, [r7, #6]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d101      	bne.n	800493c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004938:	2301      	movs	r3, #1
 800493a:	e075      	b.n	8004a28 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004942:	2b01      	cmp	r3, #1
 8004944:	d101      	bne.n	800494a <HAL_UART_Transmit+0x3e>
 8004946:	2302      	movs	r3, #2
 8004948:	e06e      	b.n	8004a28 <HAL_UART_Transmit+0x11c>
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	2201      	movs	r2, #1
 800494e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	2200      	movs	r2, #0
 8004956:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2221      	movs	r2, #33	; 0x21
 800495c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004960:	f7fc fc64 	bl	800122c <HAL_GetTick>
 8004964:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	88fa      	ldrh	r2, [r7, #6]
 800496a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800497a:	d108      	bne.n	800498e <HAL_UART_Transmit+0x82>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d104      	bne.n	800498e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	61bb      	str	r3, [r7, #24]
 800498c:	e003      	b.n	8004996 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800499e:	e02a      	b.n	80049f6 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	9300      	str	r3, [sp, #0]
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	2200      	movs	r2, #0
 80049a8:	2180      	movs	r1, #128	; 0x80
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f000 f840 	bl	8004a30 <UART_WaitOnFlagUntilTimeout>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d001      	beq.n	80049ba <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e036      	b.n	8004a28 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d10b      	bne.n	80049d8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049c0:	69bb      	ldr	r3, [r7, #24]
 80049c2:	881b      	ldrh	r3, [r3, #0]
 80049c4:	461a      	mov	r2, r3
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ce:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	3302      	adds	r3, #2
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e007      	b.n	80049e8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049d8:	69fb      	ldr	r3, [r7, #28]
 80049da:	781a      	ldrb	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049e2:	69fb      	ldr	r3, [r7, #28]
 80049e4:	3301      	adds	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	3b01      	subs	r3, #1
 80049f0:	b29a      	uxth	r2, r3
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1cf      	bne.n	80049a0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	9300      	str	r3, [sp, #0]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	2200      	movs	r2, #0
 8004a08:	2140      	movs	r1, #64	; 0x40
 8004a0a:	68f8      	ldr	r0, [r7, #12]
 8004a0c:	f000 f810 	bl	8004a30 <UART_WaitOnFlagUntilTimeout>
 8004a10:	4603      	mov	r3, r0
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d001      	beq.n	8004a1a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a16:	2303      	movs	r3, #3
 8004a18:	e006      	b.n	8004a28 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a22:	2300      	movs	r3, #0
 8004a24:	e000      	b.n	8004a28 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a26:	2302      	movs	r3, #2
  }
}
 8004a28:	4618      	mov	r0, r3
 8004a2a:	3720      	adds	r7, #32
 8004a2c:	46bd      	mov	sp, r7
 8004a2e:	bd80      	pop	{r7, pc}

08004a30 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004a30:	b580      	push	{r7, lr}
 8004a32:	b090      	sub	sp, #64	; 0x40
 8004a34:	af00      	add	r7, sp, #0
 8004a36:	60f8      	str	r0, [r7, #12]
 8004a38:	60b9      	str	r1, [r7, #8]
 8004a3a:	603b      	str	r3, [r7, #0]
 8004a3c:	4613      	mov	r3, r2
 8004a3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a40:	e050      	b.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a42:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a48:	d04c      	beq.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004a4a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d007      	beq.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a50:	f7fc fbec 	bl	800122c <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	683b      	ldr	r3, [r7, #0]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a5c:	429a      	cmp	r2, r3
 8004a5e:	d241      	bcs.n	8004ae4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	330c      	adds	r3, #12
 8004a66:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6a:	e853 3f00 	ldrex	r3, [r3]
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	330c      	adds	r3, #12
 8004a7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004a80:	637a      	str	r2, [r7, #52]	; 0x34
 8004a82:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a84:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a88:	e841 2300 	strex	r3, r2, [r1]
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d1e5      	bne.n	8004a60 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	3314      	adds	r3, #20
 8004a9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	e853 3f00 	ldrex	r3, [r3]
 8004aa2:	613b      	str	r3, [r7, #16]
   return(result);
 8004aa4:	693b      	ldr	r3, [r7, #16]
 8004aa6:	f023 0301 	bic.w	r3, r3, #1
 8004aaa:	63bb      	str	r3, [r7, #56]	; 0x38
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	3314      	adds	r3, #20
 8004ab2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ab4:	623a      	str	r2, [r7, #32]
 8004ab6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab8:	69f9      	ldr	r1, [r7, #28]
 8004aba:	6a3a      	ldr	r2, [r7, #32]
 8004abc:	e841 2300 	strex	r3, r2, [r1]
 8004ac0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ac2:	69bb      	ldr	r3, [r7, #24]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d1e5      	bne.n	8004a94 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2220      	movs	r2, #32
 8004acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004ae0:	2303      	movs	r3, #3
 8004ae2:	e00f      	b.n	8004b04 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	4013      	ands	r3, r2
 8004aee:	68ba      	ldr	r2, [r7, #8]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	bf0c      	ite	eq
 8004af4:	2301      	moveq	r3, #1
 8004af6:	2300      	movne	r3, #0
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	461a      	mov	r2, r3
 8004afc:	79fb      	ldrb	r3, [r7, #7]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d09f      	beq.n	8004a42 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b02:	2300      	movs	r3, #0
}
 8004b04:	4618      	mov	r0, r3
 8004b06:	3740      	adds	r7, #64	; 0x40
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b0c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b10:	b0c0      	sub	sp, #256	; 0x100
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b28:	68d9      	ldr	r1, [r3, #12]
 8004b2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	ea40 0301 	orr.w	r3, r0, r1
 8004b34:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b3a:	689a      	ldr	r2, [r3, #8]
 8004b3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b40:	691b      	ldr	r3, [r3, #16]
 8004b42:	431a      	orrs	r2, r3
 8004b44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b48:	695b      	ldr	r3, [r3, #20]
 8004b4a:	431a      	orrs	r2, r3
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b50:	69db      	ldr	r3, [r3, #28]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004b64:	f021 010c 	bic.w	r1, r1, #12
 8004b68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004b72:	430b      	orrs	r3, r1
 8004b74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b86:	6999      	ldr	r1, [r3, #24]
 8004b88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b8c:	681a      	ldr	r2, [r3, #0]
 8004b8e:	ea40 0301 	orr.w	r3, r0, r1
 8004b92:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	681a      	ldr	r2, [r3, #0]
 8004b9a:	4b8f      	ldr	r3, [pc, #572]	; (8004dd8 <UART_SetConfig+0x2cc>)
 8004b9c:	429a      	cmp	r2, r3
 8004b9e:	d005      	beq.n	8004bac <UART_SetConfig+0xa0>
 8004ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	4b8d      	ldr	r3, [pc, #564]	; (8004ddc <UART_SetConfig+0x2d0>)
 8004ba8:	429a      	cmp	r2, r3
 8004baa:	d104      	bne.n	8004bb6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bac:	f7ff fc74 	bl	8004498 <HAL_RCC_GetPCLK2Freq>
 8004bb0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004bb4:	e003      	b.n	8004bbe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bb6:	f7ff fc5b 	bl	8004470 <HAL_RCC_GetPCLK1Freq>
 8004bba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	69db      	ldr	r3, [r3, #28]
 8004bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bc8:	f040 810c 	bne.w	8004de4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bcc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004bd6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004bda:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004bde:	4622      	mov	r2, r4
 8004be0:	462b      	mov	r3, r5
 8004be2:	1891      	adds	r1, r2, r2
 8004be4:	65b9      	str	r1, [r7, #88]	; 0x58
 8004be6:	415b      	adcs	r3, r3
 8004be8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004bea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004bee:	4621      	mov	r1, r4
 8004bf0:	eb12 0801 	adds.w	r8, r2, r1
 8004bf4:	4629      	mov	r1, r5
 8004bf6:	eb43 0901 	adc.w	r9, r3, r1
 8004bfa:	f04f 0200 	mov.w	r2, #0
 8004bfe:	f04f 0300 	mov.w	r3, #0
 8004c02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c0e:	4690      	mov	r8, r2
 8004c10:	4699      	mov	r9, r3
 8004c12:	4623      	mov	r3, r4
 8004c14:	eb18 0303 	adds.w	r3, r8, r3
 8004c18:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c1c:	462b      	mov	r3, r5
 8004c1e:	eb49 0303 	adc.w	r3, r9, r3
 8004c22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c32:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c3a:	460b      	mov	r3, r1
 8004c3c:	18db      	adds	r3, r3, r3
 8004c3e:	653b      	str	r3, [r7, #80]	; 0x50
 8004c40:	4613      	mov	r3, r2
 8004c42:	eb42 0303 	adc.w	r3, r2, r3
 8004c46:	657b      	str	r3, [r7, #84]	; 0x54
 8004c48:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004c4c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004c50:	f7fb fb2e 	bl	80002b0 <__aeabi_uldivmod>
 8004c54:	4602      	mov	r2, r0
 8004c56:	460b      	mov	r3, r1
 8004c58:	4b61      	ldr	r3, [pc, #388]	; (8004de0 <UART_SetConfig+0x2d4>)
 8004c5a:	fba3 2302 	umull	r2, r3, r3, r2
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	011c      	lsls	r4, r3, #4
 8004c62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c66:	2200      	movs	r2, #0
 8004c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c6c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004c70:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004c74:	4642      	mov	r2, r8
 8004c76:	464b      	mov	r3, r9
 8004c78:	1891      	adds	r1, r2, r2
 8004c7a:	64b9      	str	r1, [r7, #72]	; 0x48
 8004c7c:	415b      	adcs	r3, r3
 8004c7e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c80:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004c84:	4641      	mov	r1, r8
 8004c86:	eb12 0a01 	adds.w	sl, r2, r1
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	eb43 0b01 	adc.w	fp, r3, r1
 8004c90:	f04f 0200 	mov.w	r2, #0
 8004c94:	f04f 0300 	mov.w	r3, #0
 8004c98:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004c9c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004ca0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ca4:	4692      	mov	sl, r2
 8004ca6:	469b      	mov	fp, r3
 8004ca8:	4643      	mov	r3, r8
 8004caa:	eb1a 0303 	adds.w	r3, sl, r3
 8004cae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004cb2:	464b      	mov	r3, r9
 8004cb4:	eb4b 0303 	adc.w	r3, fp, r3
 8004cb8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	2200      	movs	r2, #0
 8004cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cc8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ccc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	18db      	adds	r3, r3, r3
 8004cd4:	643b      	str	r3, [r7, #64]	; 0x40
 8004cd6:	4613      	mov	r3, r2
 8004cd8:	eb42 0303 	adc.w	r3, r2, r3
 8004cdc:	647b      	str	r3, [r7, #68]	; 0x44
 8004cde:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ce2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ce6:	f7fb fae3 	bl	80002b0 <__aeabi_uldivmod>
 8004cea:	4602      	mov	r2, r0
 8004cec:	460b      	mov	r3, r1
 8004cee:	4611      	mov	r1, r2
 8004cf0:	4b3b      	ldr	r3, [pc, #236]	; (8004de0 <UART_SetConfig+0x2d4>)
 8004cf2:	fba3 2301 	umull	r2, r3, r3, r1
 8004cf6:	095b      	lsrs	r3, r3, #5
 8004cf8:	2264      	movs	r2, #100	; 0x64
 8004cfa:	fb02 f303 	mul.w	r3, r2, r3
 8004cfe:	1acb      	subs	r3, r1, r3
 8004d00:	00db      	lsls	r3, r3, #3
 8004d02:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d06:	4b36      	ldr	r3, [pc, #216]	; (8004de0 <UART_SetConfig+0x2d4>)
 8004d08:	fba3 2302 	umull	r2, r3, r3, r2
 8004d0c:	095b      	lsrs	r3, r3, #5
 8004d0e:	005b      	lsls	r3, r3, #1
 8004d10:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d14:	441c      	add	r4, r3
 8004d16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d20:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d24:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d28:	4642      	mov	r2, r8
 8004d2a:	464b      	mov	r3, r9
 8004d2c:	1891      	adds	r1, r2, r2
 8004d2e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d30:	415b      	adcs	r3, r3
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d34:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d38:	4641      	mov	r1, r8
 8004d3a:	1851      	adds	r1, r2, r1
 8004d3c:	6339      	str	r1, [r7, #48]	; 0x30
 8004d3e:	4649      	mov	r1, r9
 8004d40:	414b      	adcs	r3, r1
 8004d42:	637b      	str	r3, [r7, #52]	; 0x34
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	f04f 0300 	mov.w	r3, #0
 8004d4c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004d50:	4659      	mov	r1, fp
 8004d52:	00cb      	lsls	r3, r1, #3
 8004d54:	4651      	mov	r1, sl
 8004d56:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d5a:	4651      	mov	r1, sl
 8004d5c:	00ca      	lsls	r2, r1, #3
 8004d5e:	4610      	mov	r0, r2
 8004d60:	4619      	mov	r1, r3
 8004d62:	4603      	mov	r3, r0
 8004d64:	4642      	mov	r2, r8
 8004d66:	189b      	adds	r3, r3, r2
 8004d68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004d6c:	464b      	mov	r3, r9
 8004d6e:	460a      	mov	r2, r1
 8004d70:	eb42 0303 	adc.w	r3, r2, r3
 8004d74:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d84:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004d88:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	18db      	adds	r3, r3, r3
 8004d90:	62bb      	str	r3, [r7, #40]	; 0x28
 8004d92:	4613      	mov	r3, r2
 8004d94:	eb42 0303 	adc.w	r3, r2, r3
 8004d98:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d9a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d9e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004da2:	f7fb fa85 	bl	80002b0 <__aeabi_uldivmod>
 8004da6:	4602      	mov	r2, r0
 8004da8:	460b      	mov	r3, r1
 8004daa:	4b0d      	ldr	r3, [pc, #52]	; (8004de0 <UART_SetConfig+0x2d4>)
 8004dac:	fba3 1302 	umull	r1, r3, r3, r2
 8004db0:	095b      	lsrs	r3, r3, #5
 8004db2:	2164      	movs	r1, #100	; 0x64
 8004db4:	fb01 f303 	mul.w	r3, r1, r3
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	3332      	adds	r3, #50	; 0x32
 8004dbe:	4a08      	ldr	r2, [pc, #32]	; (8004de0 <UART_SetConfig+0x2d4>)
 8004dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc4:	095b      	lsrs	r3, r3, #5
 8004dc6:	f003 0207 	and.w	r2, r3, #7
 8004dca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4422      	add	r2, r4
 8004dd2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dd4:	e106      	b.n	8004fe4 <UART_SetConfig+0x4d8>
 8004dd6:	bf00      	nop
 8004dd8:	40011000 	.word	0x40011000
 8004ddc:	40011400 	.word	0x40011400
 8004de0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004dee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004df2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004df6:	4642      	mov	r2, r8
 8004df8:	464b      	mov	r3, r9
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	6239      	str	r1, [r7, #32]
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	627b      	str	r3, [r7, #36]	; 0x24
 8004e02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e06:	4641      	mov	r1, r8
 8004e08:	1854      	adds	r4, r2, r1
 8004e0a:	4649      	mov	r1, r9
 8004e0c:	eb43 0501 	adc.w	r5, r3, r1
 8004e10:	f04f 0200 	mov.w	r2, #0
 8004e14:	f04f 0300 	mov.w	r3, #0
 8004e18:	00eb      	lsls	r3, r5, #3
 8004e1a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e1e:	00e2      	lsls	r2, r4, #3
 8004e20:	4614      	mov	r4, r2
 8004e22:	461d      	mov	r5, r3
 8004e24:	4643      	mov	r3, r8
 8004e26:	18e3      	adds	r3, r4, r3
 8004e28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e2c:	464b      	mov	r3, r9
 8004e2e:	eb45 0303 	adc.w	r3, r5, r3
 8004e32:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	2200      	movs	r2, #0
 8004e3e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e42:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e46:	f04f 0200 	mov.w	r2, #0
 8004e4a:	f04f 0300 	mov.w	r3, #0
 8004e4e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004e52:	4629      	mov	r1, r5
 8004e54:	008b      	lsls	r3, r1, #2
 8004e56:	4621      	mov	r1, r4
 8004e58:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e5c:	4621      	mov	r1, r4
 8004e5e:	008a      	lsls	r2, r1, #2
 8004e60:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004e64:	f7fb fa24 	bl	80002b0 <__aeabi_uldivmod>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	460b      	mov	r3, r1
 8004e6c:	4b60      	ldr	r3, [pc, #384]	; (8004ff0 <UART_SetConfig+0x4e4>)
 8004e6e:	fba3 2302 	umull	r2, r3, r3, r2
 8004e72:	095b      	lsrs	r3, r3, #5
 8004e74:	011c      	lsls	r4, r3, #4
 8004e76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e7a:	2200      	movs	r2, #0
 8004e7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004e80:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004e84:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004e88:	4642      	mov	r2, r8
 8004e8a:	464b      	mov	r3, r9
 8004e8c:	1891      	adds	r1, r2, r2
 8004e8e:	61b9      	str	r1, [r7, #24]
 8004e90:	415b      	adcs	r3, r3
 8004e92:	61fb      	str	r3, [r7, #28]
 8004e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e98:	4641      	mov	r1, r8
 8004e9a:	1851      	adds	r1, r2, r1
 8004e9c:	6139      	str	r1, [r7, #16]
 8004e9e:	4649      	mov	r1, r9
 8004ea0:	414b      	adcs	r3, r1
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	f04f 0200 	mov.w	r2, #0
 8004ea8:	f04f 0300 	mov.w	r3, #0
 8004eac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004eb0:	4659      	mov	r1, fp
 8004eb2:	00cb      	lsls	r3, r1, #3
 8004eb4:	4651      	mov	r1, sl
 8004eb6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004eba:	4651      	mov	r1, sl
 8004ebc:	00ca      	lsls	r2, r1, #3
 8004ebe:	4610      	mov	r0, r2
 8004ec0:	4619      	mov	r1, r3
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	189b      	adds	r3, r3, r2
 8004ec8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ecc:	464b      	mov	r3, r9
 8004ece:	460a      	mov	r2, r1
 8004ed0:	eb42 0303 	adc.w	r3, r2, r3
 8004ed4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ed8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004edc:	685b      	ldr	r3, [r3, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	67bb      	str	r3, [r7, #120]	; 0x78
 8004ee2:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ef0:	4649      	mov	r1, r9
 8004ef2:	008b      	lsls	r3, r1, #2
 8004ef4:	4641      	mov	r1, r8
 8004ef6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004efa:	4641      	mov	r1, r8
 8004efc:	008a      	lsls	r2, r1, #2
 8004efe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f02:	f7fb f9d5 	bl	80002b0 <__aeabi_uldivmod>
 8004f06:	4602      	mov	r2, r0
 8004f08:	460b      	mov	r3, r1
 8004f0a:	4611      	mov	r1, r2
 8004f0c:	4b38      	ldr	r3, [pc, #224]	; (8004ff0 <UART_SetConfig+0x4e4>)
 8004f0e:	fba3 2301 	umull	r2, r3, r3, r1
 8004f12:	095b      	lsrs	r3, r3, #5
 8004f14:	2264      	movs	r2, #100	; 0x64
 8004f16:	fb02 f303 	mul.w	r3, r2, r3
 8004f1a:	1acb      	subs	r3, r1, r3
 8004f1c:	011b      	lsls	r3, r3, #4
 8004f1e:	3332      	adds	r3, #50	; 0x32
 8004f20:	4a33      	ldr	r2, [pc, #204]	; (8004ff0 <UART_SetConfig+0x4e4>)
 8004f22:	fba2 2303 	umull	r2, r3, r2, r3
 8004f26:	095b      	lsrs	r3, r3, #5
 8004f28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f2c:	441c      	add	r4, r3
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	673b      	str	r3, [r7, #112]	; 0x70
 8004f36:	677a      	str	r2, [r7, #116]	; 0x74
 8004f38:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f3c:	4642      	mov	r2, r8
 8004f3e:	464b      	mov	r3, r9
 8004f40:	1891      	adds	r1, r2, r2
 8004f42:	60b9      	str	r1, [r7, #8]
 8004f44:	415b      	adcs	r3, r3
 8004f46:	60fb      	str	r3, [r7, #12]
 8004f48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	1851      	adds	r1, r2, r1
 8004f50:	6039      	str	r1, [r7, #0]
 8004f52:	4649      	mov	r1, r9
 8004f54:	414b      	adcs	r3, r1
 8004f56:	607b      	str	r3, [r7, #4]
 8004f58:	f04f 0200 	mov.w	r2, #0
 8004f5c:	f04f 0300 	mov.w	r3, #0
 8004f60:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f64:	4659      	mov	r1, fp
 8004f66:	00cb      	lsls	r3, r1, #3
 8004f68:	4651      	mov	r1, sl
 8004f6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f6e:	4651      	mov	r1, sl
 8004f70:	00ca      	lsls	r2, r1, #3
 8004f72:	4610      	mov	r0, r2
 8004f74:	4619      	mov	r1, r3
 8004f76:	4603      	mov	r3, r0
 8004f78:	4642      	mov	r2, r8
 8004f7a:	189b      	adds	r3, r3, r2
 8004f7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f7e:	464b      	mov	r3, r9
 8004f80:	460a      	mov	r2, r1
 8004f82:	eb42 0303 	adc.w	r3, r2, r3
 8004f86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	2200      	movs	r2, #0
 8004f90:	663b      	str	r3, [r7, #96]	; 0x60
 8004f92:	667a      	str	r2, [r7, #100]	; 0x64
 8004f94:	f04f 0200 	mov.w	r2, #0
 8004f98:	f04f 0300 	mov.w	r3, #0
 8004f9c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004fa0:	4649      	mov	r1, r9
 8004fa2:	008b      	lsls	r3, r1, #2
 8004fa4:	4641      	mov	r1, r8
 8004fa6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004faa:	4641      	mov	r1, r8
 8004fac:	008a      	lsls	r2, r1, #2
 8004fae:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004fb2:	f7fb f97d 	bl	80002b0 <__aeabi_uldivmod>
 8004fb6:	4602      	mov	r2, r0
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4b0d      	ldr	r3, [pc, #52]	; (8004ff0 <UART_SetConfig+0x4e4>)
 8004fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc0:	095b      	lsrs	r3, r3, #5
 8004fc2:	2164      	movs	r1, #100	; 0x64
 8004fc4:	fb01 f303 	mul.w	r3, r1, r3
 8004fc8:	1ad3      	subs	r3, r2, r3
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	3332      	adds	r3, #50	; 0x32
 8004fce:	4a08      	ldr	r2, [pc, #32]	; (8004ff0 <UART_SetConfig+0x4e4>)
 8004fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8004fd4:	095b      	lsrs	r3, r3, #5
 8004fd6:	f003 020f 	and.w	r2, r3, #15
 8004fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	4422      	add	r2, r4
 8004fe2:	609a      	str	r2, [r3, #8]
}
 8004fe4:	bf00      	nop
 8004fe6:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004fea:	46bd      	mov	sp, r7
 8004fec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff0:	51eb851f 	.word	0x51eb851f

08004ff4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004ff4:	b084      	sub	sp, #16
 8004ff6:	b580      	push	{r7, lr}
 8004ff8:	b084      	sub	sp, #16
 8004ffa:	af00      	add	r7, sp, #0
 8004ffc:	6078      	str	r0, [r7, #4]
 8004ffe:	f107 001c 	add.w	r0, r7, #28
 8005002:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005006:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005008:	2b01      	cmp	r3, #1
 800500a:	d122      	bne.n	8005052 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005010:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005024:	687a      	ldr	r2, [r7, #4]
 8005026:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	68db      	ldr	r3, [r3, #12]
 800502c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005036:	2b01      	cmp	r3, #1
 8005038:	d105      	bne.n	8005046 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005046:	6878      	ldr	r0, [r7, #4]
 8005048:	f000 f9c0 	bl	80053cc <USB_CoreReset>
 800504c:	4603      	mov	r3, r0
 800504e:	73fb      	strb	r3, [r7, #15]
 8005050:	e01a      	b.n	8005088 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	68db      	ldr	r3, [r3, #12]
 8005056:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9b4 	bl	80053cc <USB_CoreReset>
 8005064:	4603      	mov	r3, r0
 8005066:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005068:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800506a:	2b00      	cmp	r3, #0
 800506c:	d106      	bne.n	800507c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005072:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	639a      	str	r2, [r3, #56]	; 0x38
 800507a:	e005      	b.n	8005088 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005088:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800508a:	2b01      	cmp	r3, #1
 800508c:	d10b      	bne.n	80050a6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	f043 0206 	orr.w	r2, r3, #6
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f043 0220 	orr.w	r2, r3, #32
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80050a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	3710      	adds	r7, #16
 80050ac:	46bd      	mov	sp, r7
 80050ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80050b2:	b004      	add	sp, #16
 80050b4:	4770      	bx	lr

080050b6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050b6:	b480      	push	{r7}
 80050b8:	b083      	sub	sp, #12
 80050ba:	af00      	add	r7, sp, #0
 80050bc:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	689b      	ldr	r3, [r3, #8]
 80050c2:	f043 0201 	orr.w	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	370c      	adds	r7, #12
 80050d0:	46bd      	mov	sp, r7
 80050d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d6:	4770      	bx	lr

080050d8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80050d8:	b480      	push	{r7}
 80050da:	b083      	sub	sp, #12
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	f023 0201 	bic.w	r2, r3, #1
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	370c      	adds	r7, #12
 80050f2:	46bd      	mov	sp, r7
 80050f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f8:	4770      	bx	lr

080050fa <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b084      	sub	sp, #16
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
 8005102:	460b      	mov	r3, r1
 8005104:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005106:	2300      	movs	r3, #0
 8005108:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005116:	78fb      	ldrb	r3, [r7, #3]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d115      	bne.n	8005148 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	68db      	ldr	r3, [r3, #12]
 8005120:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005128:	2001      	movs	r0, #1
 800512a:	f7fc f88b 	bl	8001244 <HAL_Delay>
      ms++;
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	3301      	adds	r3, #1
 8005132:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f000 f93a 	bl	80053ae <USB_GetMode>
 800513a:	4603      	mov	r3, r0
 800513c:	2b01      	cmp	r3, #1
 800513e:	d01e      	beq.n	800517e <USB_SetCurrentMode+0x84>
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2b31      	cmp	r3, #49	; 0x31
 8005144:	d9f0      	bls.n	8005128 <USB_SetCurrentMode+0x2e>
 8005146:	e01a      	b.n	800517e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005148:	78fb      	ldrb	r3, [r7, #3]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d115      	bne.n	800517a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800515a:	2001      	movs	r0, #1
 800515c:	f7fc f872 	bl	8001244 <HAL_Delay>
      ms++;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	3301      	adds	r3, #1
 8005164:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 f921 	bl	80053ae <USB_GetMode>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d005      	beq.n	800517e <USB_SetCurrentMode+0x84>
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	2b31      	cmp	r3, #49	; 0x31
 8005176:	d9f0      	bls.n	800515a <USB_SetCurrentMode+0x60>
 8005178:	e001      	b.n	800517e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800517a:	2301      	movs	r3, #1
 800517c:	e005      	b.n	800518a <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	2b32      	cmp	r3, #50	; 0x32
 8005182:	d101      	bne.n	8005188 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e000      	b.n	800518a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005188:	2300      	movs	r3, #0
}
 800518a:	4618      	mov	r0, r3
 800518c:	3710      	adds	r7, #16
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3301      	adds	r3, #1
 80051a6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	4a13      	ldr	r2, [pc, #76]	; (80051f8 <USB_FlushTxFifo+0x64>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d901      	bls.n	80051b4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80051b0:	2303      	movs	r3, #3
 80051b2:	e01b      	b.n	80051ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	691b      	ldr	r3, [r3, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	daf2      	bge.n	80051a2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80051bc:	2300      	movs	r3, #0
 80051be:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	019b      	lsls	r3, r3, #6
 80051c4:	f043 0220 	orr.w	r2, r3, #32
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3301      	adds	r3, #1
 80051d0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	4a08      	ldr	r2, [pc, #32]	; (80051f8 <USB_FlushTxFifo+0x64>)
 80051d6:	4293      	cmp	r3, r2
 80051d8:	d901      	bls.n	80051de <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80051da:	2303      	movs	r3, #3
 80051dc:	e006      	b.n	80051ec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	f003 0320 	and.w	r3, r3, #32
 80051e6:	2b20      	cmp	r3, #32
 80051e8:	d0f0      	beq.n	80051cc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80051ea:	2300      	movs	r3, #0
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3714      	adds	r7, #20
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	00030d40 	.word	0x00030d40

080051fc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005204:	2300      	movs	r3, #0
 8005206:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	3301      	adds	r3, #1
 800520c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	4a11      	ldr	r2, [pc, #68]	; (8005258 <USB_FlushRxFifo+0x5c>)
 8005212:	4293      	cmp	r3, r2
 8005214:	d901      	bls.n	800521a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005216:	2303      	movs	r3, #3
 8005218:	e018      	b.n	800524c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	691b      	ldr	r3, [r3, #16]
 800521e:	2b00      	cmp	r3, #0
 8005220:	daf2      	bge.n	8005208 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2210      	movs	r2, #16
 800522a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	3301      	adds	r3, #1
 8005230:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	4a08      	ldr	r2, [pc, #32]	; (8005258 <USB_FlushRxFifo+0x5c>)
 8005236:	4293      	cmp	r3, r2
 8005238:	d901      	bls.n	800523e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800523a:	2303      	movs	r3, #3
 800523c:	e006      	b.n	800524c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0310 	and.w	r3, r3, #16
 8005246:	2b10      	cmp	r3, #16
 8005248:	d0f0      	beq.n	800522c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800524a:	2300      	movs	r3, #0
}
 800524c:	4618      	mov	r0, r3
 800524e:	3714      	adds	r7, #20
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	00030d40 	.word	0x00030d40

0800525c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800525c:	b480      	push	{r7}
 800525e:	b089      	sub	sp, #36	; 0x24
 8005260:	af00      	add	r7, sp, #0
 8005262:	60f8      	str	r0, [r7, #12]
 8005264:	60b9      	str	r1, [r7, #8]
 8005266:	4611      	mov	r1, r2
 8005268:	461a      	mov	r2, r3
 800526a:	460b      	mov	r3, r1
 800526c:	71fb      	strb	r3, [r7, #7]
 800526e:	4613      	mov	r3, r2
 8005270:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800527a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800527e:	2b00      	cmp	r3, #0
 8005280:	d123      	bne.n	80052ca <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005282:	88bb      	ldrh	r3, [r7, #4]
 8005284:	3303      	adds	r3, #3
 8005286:	089b      	lsrs	r3, r3, #2
 8005288:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800528a:	2300      	movs	r3, #0
 800528c:	61bb      	str	r3, [r7, #24]
 800528e:	e018      	b.n	80052c2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005290:	79fb      	ldrb	r3, [r7, #7]
 8005292:	031a      	lsls	r2, r3, #12
 8005294:	697b      	ldr	r3, [r7, #20]
 8005296:	4413      	add	r3, r2
 8005298:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800529c:	461a      	mov	r2, r3
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80052a4:	69fb      	ldr	r3, [r7, #28]
 80052a6:	3301      	adds	r3, #1
 80052a8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052aa:	69fb      	ldr	r3, [r7, #28]
 80052ac:	3301      	adds	r3, #1
 80052ae:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052b0:	69fb      	ldr	r3, [r7, #28]
 80052b2:	3301      	adds	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80052b6:	69fb      	ldr	r3, [r7, #28]
 80052b8:	3301      	adds	r3, #1
 80052ba:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80052bc:	69bb      	ldr	r3, [r7, #24]
 80052be:	3301      	adds	r3, #1
 80052c0:	61bb      	str	r3, [r7, #24]
 80052c2:	69ba      	ldr	r2, [r7, #24]
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d3e2      	bcc.n	8005290 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80052ca:	2300      	movs	r3, #0
}
 80052cc:	4618      	mov	r0, r3
 80052ce:	3724      	adds	r7, #36	; 0x24
 80052d0:	46bd      	mov	sp, r7
 80052d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d6:	4770      	bx	lr

080052d8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80052d8:	b480      	push	{r7}
 80052da:	b08b      	sub	sp, #44	; 0x2c
 80052dc:	af00      	add	r7, sp, #0
 80052de:	60f8      	str	r0, [r7, #12]
 80052e0:	60b9      	str	r1, [r7, #8]
 80052e2:	4613      	mov	r3, r2
 80052e4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80052ee:	88fb      	ldrh	r3, [r7, #6]
 80052f0:	089b      	lsrs	r3, r3, #2
 80052f2:	b29b      	uxth	r3, r3
 80052f4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80052f6:	88fb      	ldrh	r3, [r7, #6]
 80052f8:	f003 0303 	and.w	r3, r3, #3
 80052fc:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80052fe:	2300      	movs	r3, #0
 8005300:	623b      	str	r3, [r7, #32]
 8005302:	e014      	b.n	800532e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005304:	69bb      	ldr	r3, [r7, #24]
 8005306:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530a:	681a      	ldr	r2, [r3, #0]
 800530c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	3301      	adds	r3, #1
 8005314:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005318:	3301      	adds	r3, #1
 800531a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800531c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531e:	3301      	adds	r3, #1
 8005320:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005324:	3301      	adds	r3, #1
 8005326:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005328:	6a3b      	ldr	r3, [r7, #32]
 800532a:	3301      	adds	r3, #1
 800532c:	623b      	str	r3, [r7, #32]
 800532e:	6a3a      	ldr	r2, [r7, #32]
 8005330:	697b      	ldr	r3, [r7, #20]
 8005332:	429a      	cmp	r2, r3
 8005334:	d3e6      	bcc.n	8005304 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005336:	8bfb      	ldrh	r3, [r7, #30]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d01e      	beq.n	800537a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800533c:	2300      	movs	r3, #0
 800533e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005346:	461a      	mov	r2, r3
 8005348:	f107 0310 	add.w	r3, r7, #16
 800534c:	6812      	ldr	r2, [r2, #0]
 800534e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	6a3b      	ldr	r3, [r7, #32]
 8005354:	b2db      	uxtb	r3, r3
 8005356:	00db      	lsls	r3, r3, #3
 8005358:	fa22 f303 	lsr.w	r3, r2, r3
 800535c:	b2da      	uxtb	r2, r3
 800535e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005360:	701a      	strb	r2, [r3, #0]
      i++;
 8005362:	6a3b      	ldr	r3, [r7, #32]
 8005364:	3301      	adds	r3, #1
 8005366:	623b      	str	r3, [r7, #32]
      pDest++;
 8005368:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800536a:	3301      	adds	r3, #1
 800536c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800536e:	8bfb      	ldrh	r3, [r7, #30]
 8005370:	3b01      	subs	r3, #1
 8005372:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005374:	8bfb      	ldrh	r3, [r7, #30]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d1ea      	bne.n	8005350 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800537a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800537c:	4618      	mov	r0, r3
 800537e:	372c      	adds	r7, #44	; 0x2c
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr

08005388 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	695b      	ldr	r3, [r3, #20]
 8005394:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4013      	ands	r3, r2
 800539e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80053a0:	68fb      	ldr	r3, [r7, #12]
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b083      	sub	sp, #12
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	695b      	ldr	r3, [r3, #20]
 80053ba:	f003 0301 	and.w	r3, r3, #1
}
 80053be:	4618      	mov	r0, r3
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
	...

080053cc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	3301      	adds	r3, #1
 80053dc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	4a13      	ldr	r2, [pc, #76]	; (8005430 <USB_CoreReset+0x64>)
 80053e2:	4293      	cmp	r3, r2
 80053e4:	d901      	bls.n	80053ea <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80053e6:	2303      	movs	r3, #3
 80053e8:	e01b      	b.n	8005422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	691b      	ldr	r3, [r3, #16]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	daf2      	bge.n	80053d8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80053f2:	2300      	movs	r3, #0
 80053f4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	f043 0201 	orr.w	r2, r3, #1
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	3301      	adds	r3, #1
 8005406:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a09      	ldr	r2, [pc, #36]	; (8005430 <USB_CoreReset+0x64>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e006      	b.n	8005422 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f003 0301 	and.w	r3, r3, #1
 800541c:	2b01      	cmp	r3, #1
 800541e:	d0f0      	beq.n	8005402 <USB_CoreReset+0x36>

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	00030d40 	.word	0x00030d40

08005434 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005434:	b084      	sub	sp, #16
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
 800543e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005442:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005454:	461a      	mov	r2, r3
 8005456:	2300      	movs	r3, #0
 8005458:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800545e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800546a:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005476:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005482:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005486:	2b00      	cmp	r3, #0
 8005488:	d018      	beq.n	80054bc <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800548a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d10a      	bne.n	80054a6 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800549e:	f043 0304 	orr.w	r3, r3, #4
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e014      	b.n	80054d0 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054b4:	f023 0304 	bic.w	r3, r3, #4
 80054b8:	6013      	str	r3, [r2, #0]
 80054ba:	e009      	b.n	80054d0 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80054ca:	f023 0304 	bic.w	r3, r3, #4
 80054ce:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80054d0:	2110      	movs	r1, #16
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7ff fe5e 	bl	8005194 <USB_FlushTxFifo>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d001      	beq.n	80054e2 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f7ff fe8a 	bl	80051fc <USB_FlushRxFifo>
 80054e8:	4603      	mov	r3, r0
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d001      	beq.n	80054f2 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80054f2:	2300      	movs	r3, #0
 80054f4:	613b      	str	r3, [r7, #16]
 80054f6:	e015      	b.n	8005524 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	015a      	lsls	r2, r3, #5
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4413      	add	r3, r2
 8005500:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005504:	461a      	mov	r2, r3
 8005506:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800550a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800550c:	693b      	ldr	r3, [r7, #16]
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	4413      	add	r3, r2
 8005514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005518:	461a      	mov	r2, r3
 800551a:	2300      	movs	r3, #0
 800551c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	3301      	adds	r3, #1
 8005522:	613b      	str	r3, [r7, #16]
 8005524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005526:	693a      	ldr	r2, [r7, #16]
 8005528:	429a      	cmp	r2, r3
 800552a:	d3e5      	bcc.n	80054f8 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005538:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800553e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005542:	2b00      	cmp	r3, #0
 8005544:	d00b      	beq.n	800555e <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f44f 7200 	mov.w	r2, #512	; 0x200
 800554c:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4a13      	ldr	r2, [pc, #76]	; (80055a0 <USB_HostInit+0x16c>)
 8005552:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a13      	ldr	r2, [pc, #76]	; (80055a4 <USB_HostInit+0x170>)
 8005558:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800555c:	e009      	b.n	8005572 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	2280      	movs	r2, #128	; 0x80
 8005562:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	4a10      	ldr	r2, [pc, #64]	; (80055a8 <USB_HostInit+0x174>)
 8005568:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	4a0f      	ldr	r2, [pc, #60]	; (80055ac <USB_HostInit+0x178>)
 800556e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005574:	2b00      	cmp	r3, #0
 8005576:	d105      	bne.n	8005584 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	699b      	ldr	r3, [r3, #24]
 800557c:	f043 0210 	orr.w	r2, r3, #16
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	699a      	ldr	r2, [r3, #24]
 8005588:	4b09      	ldr	r3, [pc, #36]	; (80055b0 <USB_HostInit+0x17c>)
 800558a:	4313      	orrs	r3, r2
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005590:	7dfb      	ldrb	r3, [r7, #23]
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800559c:	b004      	add	sp, #16
 800559e:	4770      	bx	lr
 80055a0:	01000200 	.word	0x01000200
 80055a4:	00e00300 	.word	0x00e00300
 80055a8:	00600080 	.word	0x00600080
 80055ac:	004000e0 	.word	0x004000e0
 80055b0:	a3200008 	.word	0xa3200008

080055b4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	460b      	mov	r3, r1
 80055be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68fa      	ldr	r2, [r7, #12]
 80055ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80055d2:	f023 0303 	bic.w	r3, r3, #3
 80055d6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055de:	681a      	ldr	r2, [r3, #0]
 80055e0:	78fb      	ldrb	r3, [r7, #3]
 80055e2:	f003 0303 	and.w	r3, r3, #3
 80055e6:	68f9      	ldr	r1, [r7, #12]
 80055e8:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80055ec:	4313      	orrs	r3, r2
 80055ee:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 80055f0:	78fb      	ldrb	r3, [r7, #3]
 80055f2:	2b01      	cmp	r3, #1
 80055f4:	d107      	bne.n	8005606 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055fc:	461a      	mov	r2, r3
 80055fe:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005602:	6053      	str	r3, [r2, #4]
 8005604:	e009      	b.n	800561a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005606:	78fb      	ldrb	r3, [r7, #3]
 8005608:	2b02      	cmp	r3, #2
 800560a:	d106      	bne.n	800561a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005612:	461a      	mov	r2, r3
 8005614:	f241 7370 	movw	r3, #6000	; 0x1770
 8005618:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800561a:	2300      	movs	r3, #0
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8005628:	b480      	push	{r7}
 800562a:	b085      	sub	sp, #20
 800562c:	af00      	add	r7, sp, #0
 800562e:	6078      	str	r0, [r7, #4]
 8005630:	460b      	mov	r3, r1
 8005632:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800564c:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005654:	2b00      	cmp	r3, #0
 8005656:	d109      	bne.n	800566c <USB_DriveVbus+0x44>
 8005658:	78fb      	ldrb	r3, [r7, #3]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d106      	bne.n	800566c <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	68fa      	ldr	r2, [r7, #12]
 8005662:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005666:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800566a:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005672:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005676:	d109      	bne.n	800568c <USB_DriveVbus+0x64>
 8005678:	78fb      	ldrb	r3, [r7, #3]
 800567a:	2b00      	cmp	r3, #0
 800567c:	d106      	bne.n	800568c <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	68fa      	ldr	r2, [r7, #12]
 8005682:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8005686:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800568a:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800568c:	2300      	movs	r3, #0
}
 800568e:	4618      	mov	r0, r3
 8005690:	3714      	adds	r7, #20
 8005692:	46bd      	mov	sp, r7
 8005694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005698:	4770      	bx	lr

0800569a <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800569a:	b480      	push	{r7}
 800569c:	b085      	sub	sp, #20
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	0c5b      	lsrs	r3, r3, #17
 80056b8:	f003 0303 	and.w	r3, r3, #3
}
 80056bc:	4618      	mov	r0, r3
 80056be:	3714      	adds	r7, #20
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr

080056c8 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b085      	sub	sp, #20
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	b29b      	uxth	r3, r3
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3714      	adds	r7, #20
 80056e2:	46bd      	mov	sp, r7
 80056e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e8:	4770      	bx	lr
	...

080056ec <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b088      	sub	sp, #32
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	4608      	mov	r0, r1
 80056f6:	4611      	mov	r1, r2
 80056f8:	461a      	mov	r2, r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	70fb      	strb	r3, [r7, #3]
 80056fe:	460b      	mov	r3, r1
 8005700:	70bb      	strb	r3, [r7, #2]
 8005702:	4613      	mov	r3, r2
 8005704:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8005706:	2300      	movs	r3, #0
 8005708:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 800570e:	78fb      	ldrb	r3, [r7, #3]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800571a:	461a      	mov	r2, r3
 800571c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005720:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005722:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005726:	2b03      	cmp	r3, #3
 8005728:	d87e      	bhi.n	8005828 <USB_HC_Init+0x13c>
 800572a:	a201      	add	r2, pc, #4	; (adr r2, 8005730 <USB_HC_Init+0x44>)
 800572c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005730:	08005741 	.word	0x08005741
 8005734:	080057eb 	.word	0x080057eb
 8005738:	08005741 	.word	0x08005741
 800573c:	080057ad 	.word	0x080057ad
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005740:	78fb      	ldrb	r3, [r7, #3]
 8005742:	015a      	lsls	r2, r3, #5
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	4413      	add	r3, r2
 8005748:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574c:	461a      	mov	r2, r3
 800574e:	f240 439d 	movw	r3, #1181	; 0x49d
 8005752:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005754:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005758:	2b00      	cmp	r3, #0
 800575a:	da10      	bge.n	800577e <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800575c:	78fb      	ldrb	r3, [r7, #3]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	4413      	add	r3, r2
 8005764:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005768:	68db      	ldr	r3, [r3, #12]
 800576a:	78fa      	ldrb	r2, [r7, #3]
 800576c:	0151      	lsls	r1, r2, #5
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	440a      	add	r2, r1
 8005772:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800577a:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 800577c:	e057      	b.n	800582e <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005786:	2b00      	cmp	r3, #0
 8005788:	d051      	beq.n	800582e <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800578a:	78fb      	ldrb	r3, [r7, #3]
 800578c:	015a      	lsls	r2, r3, #5
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	4413      	add	r3, r2
 8005792:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	78fa      	ldrb	r2, [r7, #3]
 800579a:	0151      	lsls	r1, r2, #5
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	440a      	add	r2, r1
 80057a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057a4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80057a8:	60d3      	str	r3, [r2, #12]
      break;
 80057aa:	e040      	b.n	800582e <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ac:	78fb      	ldrb	r3, [r7, #3]
 80057ae:	015a      	lsls	r2, r3, #5
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	4413      	add	r3, r2
 80057b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057b8:	461a      	mov	r2, r3
 80057ba:	f240 639d 	movw	r3, #1693	; 0x69d
 80057be:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057c0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	da34      	bge.n	8005832 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80057c8:	78fb      	ldrb	r3, [r7, #3]
 80057ca:	015a      	lsls	r2, r3, #5
 80057cc:	693b      	ldr	r3, [r7, #16]
 80057ce:	4413      	add	r3, r2
 80057d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057d4:	68db      	ldr	r3, [r3, #12]
 80057d6:	78fa      	ldrb	r2, [r7, #3]
 80057d8:	0151      	lsls	r1, r2, #5
 80057da:	693a      	ldr	r2, [r7, #16]
 80057dc:	440a      	add	r2, r1
 80057de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e6:	60d3      	str	r3, [r2, #12]
      }

      break;
 80057e8:	e023      	b.n	8005832 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	015a      	lsls	r2, r3, #5
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	4413      	add	r3, r2
 80057f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f6:	461a      	mov	r2, r3
 80057f8:	f240 2325 	movw	r3, #549	; 0x225
 80057fc:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80057fe:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005802:	2b00      	cmp	r3, #0
 8005804:	da17      	bge.n	8005836 <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8005806:	78fb      	ldrb	r3, [r7, #3]
 8005808:	015a      	lsls	r2, r3, #5
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	4413      	add	r3, r2
 800580e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	78fa      	ldrb	r2, [r7, #3]
 8005816:	0151      	lsls	r1, r2, #5
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	440a      	add	r2, r1
 800581c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005820:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005824:	60d3      	str	r3, [r2, #12]
      }
      break;
 8005826:	e006      	b.n	8005836 <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	77fb      	strb	r3, [r7, #31]
      break;
 800582c:	e004      	b.n	8005838 <USB_HC_Init+0x14c>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <USB_HC_Init+0x14c>
      break;
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <USB_HC_Init+0x14c>
      break;
 8005836:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8005838:	78fb      	ldrb	r3, [r7, #3]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	4413      	add	r3, r2
 8005840:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005844:	68db      	ldr	r3, [r3, #12]
 8005846:	78fa      	ldrb	r2, [r7, #3]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	693a      	ldr	r2, [r7, #16]
 800584c:	440a      	add	r2, r1
 800584e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005852:	f043 0302 	orr.w	r3, r3, #2
 8005856:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8005858:	693b      	ldr	r3, [r7, #16]
 800585a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800585e:	699a      	ldr	r2, [r3, #24]
 8005860:	78fb      	ldrb	r3, [r7, #3]
 8005862:	f003 030f 	and.w	r3, r3, #15
 8005866:	2101      	movs	r1, #1
 8005868:	fa01 f303 	lsl.w	r3, r1, r3
 800586c:	6939      	ldr	r1, [r7, #16]
 800586e:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005872:	4313      	orrs	r3, r2
 8005874:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	699b      	ldr	r3, [r3, #24]
 800587a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005882:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005886:	2b00      	cmp	r3, #0
 8005888:	da03      	bge.n	8005892 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800588a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800588e:	61bb      	str	r3, [r7, #24]
 8005890:	e001      	b.n	8005896 <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005892:	2300      	movs	r3, #0
 8005894:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f7ff feff 	bl	800569a <USB_GetHostSpeed>
 800589c:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800589e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80058a2:	2b02      	cmp	r3, #2
 80058a4:	d106      	bne.n	80058b4 <USB_HC_Init+0x1c8>
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	2b02      	cmp	r3, #2
 80058aa:	d003      	beq.n	80058b4 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80058ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80058b0:	617b      	str	r3, [r7, #20]
 80058b2:	e001      	b.n	80058b8 <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80058b4:	2300      	movs	r3, #0
 80058b6:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058b8:	787b      	ldrb	r3, [r7, #1]
 80058ba:	059b      	lsls	r3, r3, #22
 80058bc:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058c0:	78bb      	ldrb	r3, [r7, #2]
 80058c2:	02db      	lsls	r3, r3, #11
 80058c4:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058c8:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058ca:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058ce:	049b      	lsls	r3, r3, #18
 80058d0:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80058d4:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058d6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80058d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80058dc:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058de:	69bb      	ldr	r3, [r7, #24]
 80058e0:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058e2:	78fb      	ldrb	r3, [r7, #3]
 80058e4:	0159      	lsls	r1, r3, #5
 80058e6:	693b      	ldr	r3, [r7, #16]
 80058e8:	440b      	add	r3, r1
 80058ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ee:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80058f0:	697b      	ldr	r3, [r7, #20]
 80058f2:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80058f4:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80058f6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80058fa:	2b03      	cmp	r3, #3
 80058fc:	d003      	beq.n	8005906 <USB_HC_Init+0x21a>
 80058fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005902:	2b01      	cmp	r3, #1
 8005904:	d10f      	bne.n	8005926 <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8005906:	78fb      	ldrb	r3, [r7, #3]
 8005908:	015a      	lsls	r2, r3, #5
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	4413      	add	r3, r2
 800590e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	78fa      	ldrb	r2, [r7, #3]
 8005916:	0151      	lsls	r1, r2, #5
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	440a      	add	r2, r1
 800591c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005920:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005924:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8005926:	7ffb      	ldrb	r3, [r7, #31]
}
 8005928:	4618      	mov	r0, r3
 800592a:	3720      	adds	r7, #32
 800592c:	46bd      	mov	sp, r7
 800592e:	bd80      	pop	{r7, pc}

08005930 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b08c      	sub	sp, #48	; 0x30
 8005934:	af02      	add	r7, sp, #8
 8005936:	60f8      	str	r0, [r7, #12]
 8005938:	60b9      	str	r1, [r7, #8]
 800593a:	4613      	mov	r3, r2
 800593c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	785b      	ldrb	r3, [r3, #1]
 8005946:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005948:	f44f 7380 	mov.w	r3, #256	; 0x100
 800594c:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005952:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005956:	2b00      	cmp	r3, #0
 8005958:	d02d      	beq.n	80059b6 <USB_HC_StartXfer+0x86>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	791b      	ldrb	r3, [r3, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d129      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005962:	79fb      	ldrb	r3, [r7, #7]
 8005964:	2b01      	cmp	r3, #1
 8005966:	d117      	bne.n	8005998 <USB_HC_StartXfer+0x68>
 8005968:	68bb      	ldr	r3, [r7, #8]
 800596a:	79db      	ldrb	r3, [r3, #7]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d003      	beq.n	8005978 <USB_HC_StartXfer+0x48>
 8005970:	68bb      	ldr	r3, [r7, #8]
 8005972:	79db      	ldrb	r3, [r3, #7]
 8005974:	2b02      	cmp	r3, #2
 8005976:	d10f      	bne.n	8005998 <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	015a      	lsls	r2, r3, #5
 800597c:	6a3b      	ldr	r3, [r7, #32]
 800597e:	4413      	add	r3, r2
 8005980:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	69fa      	ldr	r2, [r7, #28]
 8005988:	0151      	lsls	r1, r2, #5
 800598a:	6a3a      	ldr	r2, [r7, #32]
 800598c:	440a      	add	r2, r1
 800598e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005996:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005998:	79fb      	ldrb	r3, [r7, #7]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10b      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	795b      	ldrb	r3, [r3, #5]
 80059a2:	2b01      	cmp	r3, #1
 80059a4:	d107      	bne.n	80059b6 <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80059a6:	68bb      	ldr	r3, [r7, #8]
 80059a8:	785b      	ldrb	r3, [r3, #1]
 80059aa:	4619      	mov	r1, r3
 80059ac:	68f8      	ldr	r0, [r7, #12]
 80059ae:	f000 fa0f 	bl	8005dd0 <USB_DoPing>
      return HAL_OK;
 80059b2:	2300      	movs	r3, #0
 80059b4:	e0f8      	b.n	8005ba8 <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d018      	beq.n	80059f0 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80059be:	68bb      	ldr	r3, [r7, #8]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	68ba      	ldr	r2, [r7, #8]
 80059c4:	8912      	ldrh	r2, [r2, #8]
 80059c6:	4413      	add	r3, r2
 80059c8:	3b01      	subs	r3, #1
 80059ca:	68ba      	ldr	r2, [r7, #8]
 80059cc:	8912      	ldrh	r2, [r2, #8]
 80059ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80059d2:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 80059d4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80059d6:	8b7b      	ldrh	r3, [r7, #26]
 80059d8:	429a      	cmp	r2, r3
 80059da:	d90b      	bls.n	80059f4 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 80059dc:	8b7b      	ldrh	r3, [r7, #26]
 80059de:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059e0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059e2:	68ba      	ldr	r2, [r7, #8]
 80059e4:	8912      	ldrh	r2, [r2, #8]
 80059e6:	fb03 f202 	mul.w	r2, r3, r2
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	611a      	str	r2, [r3, #16]
 80059ee:	e001      	b.n	80059f4 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 80059f0:	2301      	movs	r3, #1
 80059f2:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	78db      	ldrb	r3, [r3, #3]
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d007      	beq.n	8005a0c <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80059fc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	8912      	ldrh	r2, [r2, #8]
 8005a02:	fb03 f202 	mul.w	r2, r3, r2
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	611a      	str	r2, [r3, #16]
 8005a0a:	e003      	b.n	8005a14 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005a0c:	68bb      	ldr	r3, [r7, #8]
 8005a0e:	695a      	ldr	r2, [r3, #20]
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a1c:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005a1e:	04d9      	lsls	r1, r3, #19
 8005a20:	4b63      	ldr	r3, [pc, #396]	; (8005bb0 <USB_HC_StartXfer+0x280>)
 8005a22:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a24:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	7a9b      	ldrb	r3, [r3, #10]
 8005a2a:	075b      	lsls	r3, r3, #29
 8005a2c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a30:	69f9      	ldr	r1, [r7, #28]
 8005a32:	0148      	lsls	r0, r1, #5
 8005a34:	6a39      	ldr	r1, [r7, #32]
 8005a36:	4401      	add	r1, r0
 8005a38:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005a3c:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005a3e:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005a40:	79fb      	ldrb	r3, [r7, #7]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d009      	beq.n	8005a5a <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005a46:	68bb      	ldr	r3, [r7, #8]
 8005a48:	68d9      	ldr	r1, [r3, #12]
 8005a4a:	69fb      	ldr	r3, [r7, #28]
 8005a4c:	015a      	lsls	r2, r3, #5
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	4413      	add	r3, r2
 8005a52:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a56:	460a      	mov	r2, r1
 8005a58:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005a60:	689b      	ldr	r3, [r3, #8]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	bf0c      	ite	eq
 8005a6a:	2301      	moveq	r3, #1
 8005a6c:	2300      	movne	r3, #0
 8005a6e:	b2db      	uxtb	r3, r3
 8005a70:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	015a      	lsls	r2, r3, #5
 8005a76:	6a3b      	ldr	r3, [r7, #32]
 8005a78:	4413      	add	r3, r2
 8005a7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	69fa      	ldr	r2, [r7, #28]
 8005a82:	0151      	lsls	r1, r2, #5
 8005a84:	6a3a      	ldr	r2, [r7, #32]
 8005a86:	440a      	add	r2, r1
 8005a88:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a8c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005a90:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005a92:	69fb      	ldr	r3, [r7, #28]
 8005a94:	015a      	lsls	r2, r3, #5
 8005a96:	6a3b      	ldr	r3, [r7, #32]
 8005a98:	4413      	add	r3, r2
 8005a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	7e7b      	ldrb	r3, [r7, #25]
 8005aa2:	075b      	lsls	r3, r3, #29
 8005aa4:	69f9      	ldr	r1, [r7, #28]
 8005aa6:	0148      	lsls	r0, r1, #5
 8005aa8:	6a39      	ldr	r1, [r7, #32]
 8005aaa:	4401      	add	r1, r0
 8005aac:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005ab4:	69fb      	ldr	r3, [r7, #28]
 8005ab6:	015a      	lsls	r2, r3, #5
 8005ab8:	6a3b      	ldr	r3, [r7, #32]
 8005aba:	4413      	add	r3, r2
 8005abc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ac4:	693b      	ldr	r3, [r7, #16]
 8005ac6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005aca:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	78db      	ldrb	r3, [r3, #3]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d004      	beq.n	8005ade <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ada:	613b      	str	r3, [r7, #16]
 8005adc:	e003      	b.n	8005ae6 <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ae4:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005aec:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005aee:	69fb      	ldr	r3, [r7, #28]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	6a3b      	ldr	r3, [r7, #32]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005afa:	461a      	mov	r2, r3
 8005afc:	693b      	ldr	r3, [r7, #16]
 8005afe:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005b00:	79fb      	ldrb	r3, [r7, #7]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d001      	beq.n	8005b0a <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005b06:	2300      	movs	r3, #0
 8005b08:	e04e      	b.n	8005ba8 <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	78db      	ldrb	r3, [r3, #3]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d149      	bne.n	8005ba6 <USB_HC_StartXfer+0x276>
 8005b12:	68bb      	ldr	r3, [r7, #8]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d045      	beq.n	8005ba6 <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005b1a:	68bb      	ldr	r3, [r7, #8]
 8005b1c:	79db      	ldrb	r3, [r3, #7]
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	d830      	bhi.n	8005b84 <USB_HC_StartXfer+0x254>
 8005b22:	a201      	add	r2, pc, #4	; (adr r2, 8005b28 <USB_HC_StartXfer+0x1f8>)
 8005b24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b28:	08005b39 	.word	0x08005b39
 8005b2c:	08005b5d 	.word	0x08005b5d
 8005b30:	08005b39 	.word	0x08005b39
 8005b34:	08005b5d 	.word	0x08005b5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	3303      	adds	r3, #3
 8005b3e:	089b      	lsrs	r3, r3, #2
 8005b40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005b42:	8afa      	ldrh	r2, [r7, #22]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b48:	b29b      	uxth	r3, r3
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d91c      	bls.n	8005b88 <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	f043 0220 	orr.w	r2, r3, #32
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b5a:	e015      	b.n	8005b88 <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	3303      	adds	r3, #3
 8005b62:	089b      	lsrs	r3, r3, #2
 8005b64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005b66:	8afa      	ldrh	r2, [r7, #22]
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b6e:	691b      	ldr	r3, [r3, #16]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d90a      	bls.n	8005b8c <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	699b      	ldr	r3, [r3, #24]
 8005b7a:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	619a      	str	r2, [r3, #24]
        }
        break;
 8005b82:	e003      	b.n	8005b8c <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005b84:	bf00      	nop
 8005b86:	e002      	b.n	8005b8e <USB_HC_StartXfer+0x25e>
        break;
 8005b88:	bf00      	nop
 8005b8a:	e000      	b.n	8005b8e <USB_HC_StartXfer+0x25e>
        break;
 8005b8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005b8e:	68bb      	ldr	r3, [r7, #8]
 8005b90:	68d9      	ldr	r1, [r3, #12]
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	785a      	ldrb	r2, [r3, #1]
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	b29b      	uxth	r3, r3
 8005b9c:	2000      	movs	r0, #0
 8005b9e:	9000      	str	r0, [sp, #0]
 8005ba0:	68f8      	ldr	r0, [r7, #12]
 8005ba2:	f7ff fb5b 	bl	800525c <USB_WritePacket>
  }

  return HAL_OK;
 8005ba6:	2300      	movs	r3, #0
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3728      	adds	r7, #40	; 0x28
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	1ff80000 	.word	0x1ff80000

08005bb4 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005bc6:	695b      	ldr	r3, [r3, #20]
 8005bc8:	b29b      	uxth	r3, r3
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3714      	adds	r7, #20
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd4:	4770      	bx	lr

08005bd6 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005bd6:	b480      	push	{r7}
 8005bd8:	b089      	sub	sp, #36	; 0x24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	460b      	mov	r3, r1
 8005be0:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005be6:	78fb      	ldrb	r3, [r7, #3]
 8005be8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005bea:	2300      	movs	r3, #0
 8005bec:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	015a      	lsls	r2, r3, #5
 8005bf2:	69fb      	ldr	r3, [r7, #28]
 8005bf4:	4413      	add	r3, r2
 8005bf6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	0c9b      	lsrs	r3, r3, #18
 8005bfe:	f003 0303 	and.w	r3, r3, #3
 8005c02:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005c04:	69bb      	ldr	r3, [r7, #24]
 8005c06:	015a      	lsls	r2, r3, #5
 8005c08:	69fb      	ldr	r3, [r7, #28]
 8005c0a:	4413      	add	r3, r2
 8005c0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	0fdb      	lsrs	r3, r3, #31
 8005c14:	f003 0301 	and.w	r3, r3, #1
 8005c18:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	689b      	ldr	r3, [r3, #8]
 8005c1e:	f003 0320 	and.w	r3, r3, #32
 8005c22:	2b20      	cmp	r3, #32
 8005c24:	d104      	bne.n	8005c30 <USB_HC_Halt+0x5a>
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d101      	bne.n	8005c30 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
 8005c2e:	e0c8      	b.n	8005dc2 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005c30:	697b      	ldr	r3, [r7, #20]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d002      	beq.n	8005c3c <USB_HC_Halt+0x66>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d163      	bne.n	8005d04 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005c3c:	69bb      	ldr	r3, [r7, #24]
 8005c3e:	015a      	lsls	r2, r3, #5
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	4413      	add	r3, r2
 8005c44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	69ba      	ldr	r2, [r7, #24]
 8005c4c:	0151      	lsls	r1, r2, #5
 8005c4e:	69fa      	ldr	r2, [r7, #28]
 8005c50:	440a      	add	r2, r1
 8005c52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005c5a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0320 	and.w	r3, r3, #32
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	f040 80ab 	bne.w	8005dc0 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c6e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d133      	bne.n	8005cde <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005c76:	69bb      	ldr	r3, [r7, #24]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	69fb      	ldr	r3, [r7, #28]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	69ba      	ldr	r2, [r7, #24]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	69fa      	ldr	r2, [r7, #28]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005c90:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c94:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005c96:	69bb      	ldr	r3, [r7, #24]
 8005c98:	015a      	lsls	r2, r3, #5
 8005c9a:	69fb      	ldr	r3, [r7, #28]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	69ba      	ldr	r2, [r7, #24]
 8005ca6:	0151      	lsls	r1, r2, #5
 8005ca8:	69fa      	ldr	r2, [r7, #28]
 8005caa:	440a      	add	r2, r1
 8005cac:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cb0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cb4:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3301      	adds	r3, #1
 8005cba:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005cc2:	d81d      	bhi.n	8005d00 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005cc4:	69bb      	ldr	r3, [r7, #24]
 8005cc6:	015a      	lsls	r2, r3, #5
 8005cc8:	69fb      	ldr	r3, [r7, #28]
 8005cca:	4413      	add	r3, r2
 8005ccc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cd6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cda:	d0ec      	beq.n	8005cb6 <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cdc:	e070      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005cde:	69bb      	ldr	r3, [r7, #24]
 8005ce0:	015a      	lsls	r2, r3, #5
 8005ce2:	69fb      	ldr	r3, [r7, #28]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	0151      	lsls	r1, r2, #5
 8005cf0:	69fa      	ldr	r2, [r7, #28]
 8005cf2:	440a      	add	r2, r1
 8005cf4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005cf8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005cfc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005cfe:	e05f      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
            break;
 8005d00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d02:	e05d      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	015a      	lsls	r2, r3, #5
 8005d08:	69fb      	ldr	r3, [r7, #28]
 8005d0a:	4413      	add	r3, r2
 8005d0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	0151      	lsls	r1, r2, #5
 8005d16:	69fa      	ldr	r2, [r7, #28]
 8005d18:	440a      	add	r2, r1
 8005d1a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005d2a:	691b      	ldr	r3, [r3, #16]
 8005d2c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d133      	bne.n	8005d9c <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d34:	69bb      	ldr	r3, [r7, #24]
 8005d36:	015a      	lsls	r2, r3, #5
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	4413      	add	r3, r2
 8005d3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	69ba      	ldr	r2, [r7, #24]
 8005d44:	0151      	lsls	r1, r2, #5
 8005d46:	69fa      	ldr	r2, [r7, #28]
 8005d48:	440a      	add	r2, r1
 8005d4a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d4e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d54:	69bb      	ldr	r3, [r7, #24]
 8005d56:	015a      	lsls	r2, r3, #5
 8005d58:	69fb      	ldr	r3, [r7, #28]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	69ba      	ldr	r2, [r7, #24]
 8005d64:	0151      	lsls	r1, r2, #5
 8005d66:	69fa      	ldr	r2, [r7, #28]
 8005d68:	440a      	add	r2, r1
 8005d6a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d6e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	3301      	adds	r3, #1
 8005d78:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d80:	d81d      	bhi.n	8005dbe <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d82:	69bb      	ldr	r3, [r7, #24]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	69fb      	ldr	r3, [r7, #28]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d98:	d0ec      	beq.n	8005d74 <USB_HC_Halt+0x19e>
 8005d9a:	e011      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d9c:	69bb      	ldr	r3, [r7, #24]
 8005d9e:	015a      	lsls	r2, r3, #5
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	4413      	add	r3, r2
 8005da4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	69ba      	ldr	r2, [r7, #24]
 8005dac:	0151      	lsls	r1, r2, #5
 8005dae:	69fa      	ldr	r2, [r7, #28]
 8005db0:	440a      	add	r2, r1
 8005db2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005db6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dba:	6013      	str	r3, [r2, #0]
 8005dbc:	e000      	b.n	8005dc0 <USB_HC_Halt+0x1ea>
          break;
 8005dbe:	bf00      	nop
    }
  }

  return HAL_OK;
 8005dc0:	2300      	movs	r3, #0
}
 8005dc2:	4618      	mov	r0, r3
 8005dc4:	3724      	adds	r7, #36	; 0x24
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
	...

08005dd0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b087      	sub	sp, #28
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
 8005dd8:	460b      	mov	r3, r1
 8005dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005de0:	78fb      	ldrb	r3, [r7, #3]
 8005de2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005de4:	2301      	movs	r3, #1
 8005de6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	04da      	lsls	r2, r3, #19
 8005dec:	4b15      	ldr	r3, [pc, #84]	; (8005e44 <USB_DoPing+0x74>)
 8005dee:	4013      	ands	r3, r2
 8005df0:	693a      	ldr	r2, [r7, #16]
 8005df2:	0151      	lsls	r1, r2, #5
 8005df4:	697a      	ldr	r2, [r7, #20]
 8005df6:	440a      	add	r2, r1
 8005df8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dfc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005e12:	68bb      	ldr	r3, [r7, #8]
 8005e14:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005e18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005e1a:	68bb      	ldr	r3, [r7, #8]
 8005e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	015a      	lsls	r2, r3, #5
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	4413      	add	r3, r2
 8005e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e2e:	461a      	mov	r2, r3
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005e34:	2300      	movs	r3, #0
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	1ff80000 	.word	0x1ff80000

08005e48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b088      	sub	sp, #32
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005e50:	2300      	movs	r3, #0
 8005e52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f7ff f93b 	bl	80050d8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005e62:	2110      	movs	r1, #16
 8005e64:	6878      	ldr	r0, [r7, #4]
 8005e66:	f7ff f995 	bl	8005194 <USB_FlushTxFifo>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005e74:	6878      	ldr	r0, [r7, #4]
 8005e76:	f7ff f9c1 	bl	80051fc <USB_FlushRxFifo>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d001      	beq.n	8005e84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005e80:	2301      	movs	r3, #1
 8005e82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005e84:	2300      	movs	r3, #0
 8005e86:	61bb      	str	r3, [r7, #24]
 8005e88:	e01f      	b.n	8005eca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005e8a:	69bb      	ldr	r3, [r7, #24]
 8005e8c:	015a      	lsls	r2, r3, #5
 8005e8e:	697b      	ldr	r3, [r7, #20]
 8005e90:	4413      	add	r3, r2
 8005e92:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ea0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005ea8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005eaa:	693b      	ldr	r3, [r7, #16]
 8005eac:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005eb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005eb2:	69bb      	ldr	r3, [r7, #24]
 8005eb4:	015a      	lsls	r2, r3, #5
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	4413      	add	r3, r2
 8005eba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	693b      	ldr	r3, [r7, #16]
 8005ec2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	61bb      	str	r3, [r7, #24]
 8005eca:	69bb      	ldr	r3, [r7, #24]
 8005ecc:	2b0f      	cmp	r3, #15
 8005ece:	d9dc      	bls.n	8005e8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	61bb      	str	r3, [r7, #24]
 8005ed4:	e034      	b.n	8005f40 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005ed6:	69bb      	ldr	r3, [r7, #24]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005eec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ef4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005efc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005efe:	69bb      	ldr	r3, [r7, #24]
 8005f00:	015a      	lsls	r2, r3, #5
 8005f02:	697b      	ldr	r3, [r7, #20]
 8005f04:	4413      	add	r3, r2
 8005f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f0a:	461a      	mov	r2, r3
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	3301      	adds	r3, #1
 8005f14:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005f1c:	d80c      	bhi.n	8005f38 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f34:	d0ec      	beq.n	8005f10 <USB_StopHost+0xc8>
 8005f36:	e000      	b.n	8005f3a <USB_StopHost+0xf2>
        break;
 8005f38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005f3a:	69bb      	ldr	r3, [r7, #24]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	61bb      	str	r3, [r7, #24]
 8005f40:	69bb      	ldr	r3, [r7, #24]
 8005f42:	2b0f      	cmp	r3, #15
 8005f44:	d9c7      	bls.n	8005ed6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8005f46:	697b      	ldr	r3, [r7, #20]
 8005f48:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f7ff f8aa 	bl	80050b6 <USB_EnableGlobalInt>

  return ret;
 8005f62:	7ffb      	ldrb	r3, [r7, #31]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3720      	adds	r7, #32
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8005f6c:	b590      	push	{r4, r7, lr}
 8005f6e:	b089      	sub	sp, #36	; 0x24
 8005f70:	af04      	add	r7, sp, #16
 8005f72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8005f74:	2301      	movs	r3, #1
 8005f76:	2202      	movs	r2, #2
 8005f78:	2102      	movs	r1, #2
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 fc66 	bl	800684c <USBH_FindInterface>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005f84:	7bfb      	ldrb	r3, [r7, #15]
 8005f86:	2bff      	cmp	r3, #255	; 0xff
 8005f88:	d002      	beq.n	8005f90 <USBH_CDC_InterfaceInit+0x24>
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d901      	bls.n	8005f94 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005f90:	2302      	movs	r3, #2
 8005f92:	e13d      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8005f94:	7bfb      	ldrb	r3, [r7, #15]
 8005f96:	4619      	mov	r1, r3
 8005f98:	6878      	ldr	r0, [r7, #4]
 8005f9a:	f000 fc3b 	bl	8006814 <USBH_SelectInterface>
 8005f9e:	4603      	mov	r3, r0
 8005fa0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005fa2:	7bbb      	ldrb	r3, [r7, #14]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d001      	beq.n	8005fac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005fa8:	2302      	movs	r3, #2
 8005faa:	e131      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005fb2:	2050      	movs	r0, #80	; 0x50
 8005fb4:	f001 fae8 	bl	8007588 <malloc>
 8005fb8:	4603      	mov	r3, r0
 8005fba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005fcc:	2302      	movs	r3, #2
 8005fce:	e11f      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005fd0:	2250      	movs	r2, #80	; 0x50
 8005fd2:	2100      	movs	r1, #0
 8005fd4:	68b8      	ldr	r0, [r7, #8]
 8005fd6:	f001 fcaa 	bl	800792e <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
 8005fdc:	687a      	ldr	r2, [r7, #4]
 8005fde:	211a      	movs	r1, #26
 8005fe0:	fb01 f303 	mul.w	r3, r1, r3
 8005fe4:	4413      	add	r3, r2
 8005fe6:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005fea:	781b      	ldrb	r3, [r3, #0]
 8005fec:	b25b      	sxtb	r3, r3
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	da15      	bge.n	800601e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005ff2:	7bfb      	ldrb	r3, [r7, #15]
 8005ff4:	687a      	ldr	r2, [r7, #4]
 8005ff6:	211a      	movs	r1, #26
 8005ff8:	fb01 f303 	mul.w	r3, r1, r3
 8005ffc:	4413      	add	r3, r2
 8005ffe:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006002:	781a      	ldrb	r2, [r3, #0]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006008:	7bfb      	ldrb	r3, [r7, #15]
 800600a:	687a      	ldr	r2, [r7, #4]
 800600c:	211a      	movs	r1, #26
 800600e:	fb01 f303 	mul.w	r3, r1, r3
 8006012:	4413      	add	r3, r2
 8006014:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006018:	881a      	ldrh	r2, [r3, #0]
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800601e:	68bb      	ldr	r3, [r7, #8]
 8006020:	785b      	ldrb	r3, [r3, #1]
 8006022:	4619      	mov	r1, r3
 8006024:	6878      	ldr	r0, [r7, #4]
 8006026:	f000 ff9c 	bl	8006f62 <USBH_AllocPipe>
 800602a:	4603      	mov	r3, r0
 800602c:	461a      	mov	r2, r3
 800602e:	68bb      	ldr	r3, [r7, #8]
 8006030:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006032:	68bb      	ldr	r3, [r7, #8]
 8006034:	7819      	ldrb	r1, [r3, #0]
 8006036:	68bb      	ldr	r3, [r7, #8]
 8006038:	7858      	ldrb	r0, [r3, #1]
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006046:	68ba      	ldr	r2, [r7, #8]
 8006048:	8952      	ldrh	r2, [r2, #10]
 800604a:	9202      	str	r2, [sp, #8]
 800604c:	2203      	movs	r2, #3
 800604e:	9201      	str	r2, [sp, #4]
 8006050:	9300      	str	r3, [sp, #0]
 8006052:	4623      	mov	r3, r4
 8006054:	4602      	mov	r2, r0
 8006056:	6878      	ldr	r0, [r7, #4]
 8006058:	f000 ff54 	bl	8006f04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2200      	movs	r2, #0
 8006062:	4619      	mov	r1, r3
 8006064:	6878      	ldr	r0, [r7, #4]
 8006066:	f001 fa17 	bl	8007498 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800606a:	2300      	movs	r3, #0
 800606c:	2200      	movs	r2, #0
 800606e:	210a      	movs	r1, #10
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fbeb 	bl	800684c <USBH_FindInterface>
 8006076:	4603      	mov	r3, r0
 8006078:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800607a:	7bfb      	ldrb	r3, [r7, #15]
 800607c:	2bff      	cmp	r3, #255	; 0xff
 800607e:	d002      	beq.n	8006086 <USBH_CDC_InterfaceInit+0x11a>
 8006080:	7bfb      	ldrb	r3, [r7, #15]
 8006082:	2b01      	cmp	r3, #1
 8006084:	d901      	bls.n	800608a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006086:	2302      	movs	r3, #2
 8006088:	e0c2      	b.n	8006210 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800608a:	7bfb      	ldrb	r3, [r7, #15]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	211a      	movs	r1, #26
 8006090:	fb01 f303 	mul.w	r3, r1, r3
 8006094:	4413      	add	r3, r2
 8006096:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	b25b      	sxtb	r3, r3
 800609e:	2b00      	cmp	r3, #0
 80060a0:	da16      	bge.n	80060d0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060a2:	7bfb      	ldrb	r3, [r7, #15]
 80060a4:	687a      	ldr	r2, [r7, #4]
 80060a6:	211a      	movs	r1, #26
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	4413      	add	r3, r2
 80060ae:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060b2:	781a      	ldrb	r2, [r3, #0]
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060b8:	7bfb      	ldrb	r3, [r7, #15]
 80060ba:	687a      	ldr	r2, [r7, #4]
 80060bc:	211a      	movs	r1, #26
 80060be:	fb01 f303 	mul.w	r3, r1, r3
 80060c2:	4413      	add	r3, r2
 80060c4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060c8:	881a      	ldrh	r2, [r3, #0]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	835a      	strh	r2, [r3, #26]
 80060ce:	e015      	b.n	80060fc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060d0:	7bfb      	ldrb	r3, [r7, #15]
 80060d2:	687a      	ldr	r2, [r7, #4]
 80060d4:	211a      	movs	r1, #26
 80060d6:	fb01 f303 	mul.w	r3, r1, r3
 80060da:	4413      	add	r3, r2
 80060dc:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060e0:	781a      	ldrb	r2, [r3, #0]
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	687a      	ldr	r2, [r7, #4]
 80060ea:	211a      	movs	r1, #26
 80060ec:	fb01 f303 	mul.w	r3, r1, r3
 80060f0:	4413      	add	r3, r2
 80060f2:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060f6:	881a      	ldrh	r2, [r3, #0]
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80060fc:	7bfb      	ldrb	r3, [r7, #15]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	211a      	movs	r1, #26
 8006102:	fb01 f303 	mul.w	r3, r1, r3
 8006106:	4413      	add	r3, r2
 8006108:	f203 3356 	addw	r3, r3, #854	; 0x356
 800610c:	781b      	ldrb	r3, [r3, #0]
 800610e:	b25b      	sxtb	r3, r3
 8006110:	2b00      	cmp	r3, #0
 8006112:	da16      	bge.n	8006142 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006114:	7bfb      	ldrb	r3, [r7, #15]
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	211a      	movs	r1, #26
 800611a:	fb01 f303 	mul.w	r3, r1, r3
 800611e:	4413      	add	r3, r2
 8006120:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006124:	781a      	ldrb	r2, [r3, #0]
 8006126:	68bb      	ldr	r3, [r7, #8]
 8006128:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
 800612c:	687a      	ldr	r2, [r7, #4]
 800612e:	211a      	movs	r1, #26
 8006130:	fb01 f303 	mul.w	r3, r1, r3
 8006134:	4413      	add	r3, r2
 8006136:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800613a:	881a      	ldrh	r2, [r3, #0]
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	835a      	strh	r2, [r3, #26]
 8006140:	e015      	b.n	800616e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006142:	7bfb      	ldrb	r3, [r7, #15]
 8006144:	687a      	ldr	r2, [r7, #4]
 8006146:	211a      	movs	r1, #26
 8006148:	fb01 f303 	mul.w	r3, r1, r3
 800614c:	4413      	add	r3, r2
 800614e:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006152:	781a      	ldrb	r2, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006158:	7bfb      	ldrb	r3, [r7, #15]
 800615a:	687a      	ldr	r2, [r7, #4]
 800615c:	211a      	movs	r1, #26
 800615e:	fb01 f303 	mul.w	r3, r1, r3
 8006162:	4413      	add	r3, r2
 8006164:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006168:	881a      	ldrh	r2, [r3, #0]
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	7b9b      	ldrb	r3, [r3, #14]
 8006172:	4619      	mov	r1, r3
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fef4 	bl	8006f62 <USBH_AllocPipe>
 800617a:	4603      	mov	r3, r0
 800617c:	461a      	mov	r2, r3
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	7bdb      	ldrb	r3, [r3, #15]
 8006186:	4619      	mov	r1, r3
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 feea 	bl	8006f62 <USBH_AllocPipe>
 800618e:	4603      	mov	r3, r0
 8006190:	461a      	mov	r2, r3
 8006192:	68bb      	ldr	r3, [r7, #8]
 8006194:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	7b59      	ldrb	r1, [r3, #13]
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	7b98      	ldrb	r0, [r3, #14]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	8b12      	ldrh	r2, [r2, #24]
 80061ae:	9202      	str	r2, [sp, #8]
 80061b0:	2202      	movs	r2, #2
 80061b2:	9201      	str	r2, [sp, #4]
 80061b4:	9300      	str	r3, [sp, #0]
 80061b6:	4623      	mov	r3, r4
 80061b8:	4602      	mov	r2, r0
 80061ba:	6878      	ldr	r0, [r7, #4]
 80061bc:	f000 fea2 	bl	8006f04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	7b19      	ldrb	r1, [r3, #12]
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	7bd8      	ldrb	r0, [r3, #15]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80061d4:	68ba      	ldr	r2, [r7, #8]
 80061d6:	8b52      	ldrh	r2, [r2, #26]
 80061d8:	9202      	str	r2, [sp, #8]
 80061da:	2202      	movs	r2, #2
 80061dc:	9201      	str	r2, [sp, #4]
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	4623      	mov	r3, r4
 80061e2:	4602      	mov	r2, r0
 80061e4:	6878      	ldr	r0, [r7, #4]
 80061e6:	f000 fe8d 	bl	8006f04 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	2200      	movs	r2, #0
 80061ee:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	7b5b      	ldrb	r3, [r3, #13]
 80061f6:	2200      	movs	r2, #0
 80061f8:	4619      	mov	r1, r3
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f001 f94c 	bl	8007498 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	7b1b      	ldrb	r3, [r3, #12]
 8006204:	2200      	movs	r2, #0
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f001 f945 	bl	8007498 <USBH_LL_SetToggle>

  return USBH_OK;
 800620e:	2300      	movs	r3, #0
}
 8006210:	4618      	mov	r0, r3
 8006212:	3714      	adds	r7, #20
 8006214:	46bd      	mov	sp, r7
 8006216:	bd90      	pop	{r4, r7, pc}

08006218 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006226:	69db      	ldr	r3, [r3, #28]
 8006228:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	781b      	ldrb	r3, [r3, #0]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d00e      	beq.n	8006250 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f000 fe82 	bl	8006f42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	781b      	ldrb	r3, [r3, #0]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 fead 	bl	8006fa4 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2200      	movs	r2, #0
 800624e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	7b1b      	ldrb	r3, [r3, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	d00e      	beq.n	8006276 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	7b1b      	ldrb	r3, [r3, #12]
 800625c:	4619      	mov	r1, r3
 800625e:	6878      	ldr	r0, [r7, #4]
 8006260:	f000 fe6f 	bl	8006f42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	7b1b      	ldrb	r3, [r3, #12]
 8006268:	4619      	mov	r1, r3
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 fe9a 	bl	8006fa4 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	2200      	movs	r2, #0
 8006274:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	7b5b      	ldrb	r3, [r3, #13]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d00e      	beq.n	800629c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	7b5b      	ldrb	r3, [r3, #13]
 8006282:	4619      	mov	r1, r3
 8006284:	6878      	ldr	r0, [r7, #4]
 8006286:	f000 fe5c 	bl	8006f42 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	7b5b      	ldrb	r3, [r3, #13]
 800628e:	4619      	mov	r1, r3
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f000 fe87 	bl	8006fa4 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2200      	movs	r2, #0
 800629a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062a2:	69db      	ldr	r3, [r3, #28]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d00b      	beq.n	80062c0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ae:	69db      	ldr	r3, [r3, #28]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f001 f971 	bl	8007598 <free>
    phost->pActiveClass->pData = 0U;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062bc:	2200      	movs	r2, #0
 80062be:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80062c0:	2300      	movs	r3, #0
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062d8:	69db      	ldr	r3, [r3, #28]
 80062da:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	3340      	adds	r3, #64	; 0x40
 80062e0:	4619      	mov	r1, r3
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 f8b1 	bl	800644a <GetLineCoding>
 80062e8:	4603      	mov	r3, r0
 80062ea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80062ec:	7afb      	ldrb	r3, [r7, #11]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d105      	bne.n	80062fe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80062f8:	2102      	movs	r1, #2
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80062fe:	7afb      	ldrb	r3, [r7, #11]
}
 8006300:	4618      	mov	r0, r3
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006310:	2301      	movs	r3, #1
 8006312:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006314:	2300      	movs	r3, #0
 8006316:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800631e:	69db      	ldr	r3, [r3, #28]
 8006320:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006322:	68bb      	ldr	r3, [r7, #8]
 8006324:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006328:	2b04      	cmp	r3, #4
 800632a:	d877      	bhi.n	800641c <USBH_CDC_Process+0x114>
 800632c:	a201      	add	r2, pc, #4	; (adr r2, 8006334 <USBH_CDC_Process+0x2c>)
 800632e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006332:	bf00      	nop
 8006334:	08006349 	.word	0x08006349
 8006338:	0800634f 	.word	0x0800634f
 800633c:	0800637f 	.word	0x0800637f
 8006340:	080063f3 	.word	0x080063f3
 8006344:	08006401 	.word	0x08006401
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006348:	2300      	movs	r3, #0
 800634a:	73fb      	strb	r3, [r7, #15]
      break;
 800634c:	e06d      	b.n	800642a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f897 	bl	8006488 <SetLineCoding>
 800635a:	4603      	mov	r3, r0
 800635c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800635e:	7bbb      	ldrb	r3, [r7, #14]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d104      	bne.n	800636e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800636c:	e058      	b.n	8006420 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800636e:	7bbb      	ldrb	r3, [r7, #14]
 8006370:	2b01      	cmp	r3, #1
 8006372:	d055      	beq.n	8006420 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2204      	movs	r2, #4
 8006378:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800637c:	e050      	b.n	8006420 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	3340      	adds	r3, #64	; 0x40
 8006382:	4619      	mov	r1, r3
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f860 	bl	800644a <GetLineCoding>
 800638a:	4603      	mov	r3, r0
 800638c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800638e:	7bbb      	ldrb	r3, [r7, #14]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d126      	bne.n	80063e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	2200      	movs	r2, #0
 8006398:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063a6:	791b      	ldrb	r3, [r3, #4]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d13b      	bne.n	8006424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80063b2:	68bb      	ldr	r3, [r7, #8]
 80063b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80063b8:	429a      	cmp	r2, r3
 80063ba:	d133      	bne.n	8006424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80063c2:	68bb      	ldr	r3, [r7, #8]
 80063c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d12b      	bne.n	8006424 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063d0:	68bb      	ldr	r3, [r7, #8]
 80063d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80063d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80063d6:	429a      	cmp	r2, r3
 80063d8:	d124      	bne.n	8006424 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 f958 	bl	8006690 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80063e0:	e020      	b.n	8006424 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80063e2:	7bbb      	ldrb	r3, [r7, #14]
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d01d      	beq.n	8006424 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	2204      	movs	r2, #4
 80063ec:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80063f0:	e018      	b.n	8006424 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f867 	bl	80064c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	f000 f8da 	bl	80065b2 <CDC_ProcessReception>
      break;
 80063fe:	e014      	b.n	800642a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006400:	2100      	movs	r1, #0
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fb08 	bl	8006a18 <USBH_ClrFeature>
 8006408:	4603      	mov	r3, r0
 800640a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800640c:	7bbb      	ldrb	r3, [r7, #14]
 800640e:	2b00      	cmp	r3, #0
 8006410:	d10a      	bne.n	8006428 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800641a:	e005      	b.n	8006428 <USBH_CDC_Process+0x120>

    default:
      break;
 800641c:	bf00      	nop
 800641e:	e004      	b.n	800642a <USBH_CDC_Process+0x122>
      break;
 8006420:	bf00      	nop
 8006422:	e002      	b.n	800642a <USBH_CDC_Process+0x122>
      break;
 8006424:	bf00      	nop
 8006426:	e000      	b.n	800642a <USBH_CDC_Process+0x122>
      break;
 8006428:	bf00      	nop

  }

  return status;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3710      	adds	r7, #16
 8006430:	46bd      	mov	sp, r7
 8006432:	bd80      	pop	{r7, pc}

08006434 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800643c:	2300      	movs	r3, #0
}
 800643e:	4618      	mov	r0, r3
 8006440:	370c      	adds	r7, #12
 8006442:	46bd      	mov	sp, r7
 8006444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006448:	4770      	bx	lr

0800644a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800644a:	b580      	push	{r7, lr}
 800644c:	b082      	sub	sp, #8
 800644e:	af00      	add	r7, sp, #0
 8006450:	6078      	str	r0, [r7, #4]
 8006452:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	22a1      	movs	r2, #161	; 0xa1
 8006458:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2221      	movs	r2, #33	; 0x21
 800645e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2207      	movs	r2, #7
 8006470:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	2207      	movs	r2, #7
 8006476:	4619      	mov	r1, r3
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 faf1 	bl	8006a60 <USBH_CtlReq>
 800647e:	4603      	mov	r3, r0
}
 8006480:	4618      	mov	r0, r3
 8006482:	3708      	adds	r7, #8
 8006484:	46bd      	mov	sp, r7
 8006486:	bd80      	pop	{r7, pc}

08006488 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8006488:	b580      	push	{r7, lr}
 800648a:	b082      	sub	sp, #8
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
 8006490:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2221      	movs	r2, #33	; 0x21
 8006496:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2220      	movs	r2, #32
 800649c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2207      	movs	r2, #7
 80064ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	2207      	movs	r2, #7
 80064b4:	4619      	mov	r1, r3
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 fad2 	bl	8006a60 <USBH_CtlReq>
 80064bc:	4603      	mov	r3, r0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3708      	adds	r7, #8
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}

080064c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80064c6:	b580      	push	{r7, lr}
 80064c8:	b086      	sub	sp, #24
 80064ca:	af02      	add	r7, sp, #8
 80064cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80064d8:	2300      	movs	r3, #0
 80064da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80064e2:	2b01      	cmp	r3, #1
 80064e4:	d002      	beq.n	80064ec <CDC_ProcessTransmission+0x26>
 80064e6:	2b02      	cmp	r3, #2
 80064e8:	d023      	beq.n	8006532 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80064ea:	e05e      	b.n	80065aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	8b12      	ldrh	r2, [r2, #24]
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d90b      	bls.n	8006510 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	69d9      	ldr	r1, [r3, #28]
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	8b1a      	ldrh	r2, [r3, #24]
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	7b5b      	ldrb	r3, [r3, #13]
 8006504:	2001      	movs	r0, #1
 8006506:	9000      	str	r0, [sp, #0]
 8006508:	6878      	ldr	r0, [r7, #4]
 800650a:	f000 fcb8 	bl	8006e7e <USBH_BulkSendData>
 800650e:	e00b      	b.n	8006528 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8006518:	b29a      	uxth	r2, r3
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	7b5b      	ldrb	r3, [r3, #13]
 800651e:	2001      	movs	r0, #1
 8006520:	9000      	str	r0, [sp, #0]
 8006522:	6878      	ldr	r0, [r7, #4]
 8006524:	f000 fcab 	bl	8006e7e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	2202      	movs	r2, #2
 800652c:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006530:	e03b      	b.n	80065aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	7b5b      	ldrb	r3, [r3, #13]
 8006536:	4619      	mov	r1, r3
 8006538:	6878      	ldr	r0, [r7, #4]
 800653a:	f000 ff83 	bl	8007444 <USBH_LL_GetURBState>
 800653e:	4603      	mov	r3, r0
 8006540:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006542:	7afb      	ldrb	r3, [r7, #11]
 8006544:	2b01      	cmp	r3, #1
 8006546:	d128      	bne.n	800659a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	8b12      	ldrh	r2, [r2, #24]
 8006550:	4293      	cmp	r3, r2
 8006552:	d90e      	bls.n	8006572 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006558:	68fa      	ldr	r2, [r7, #12]
 800655a:	8b12      	ldrh	r2, [r2, #24]
 800655c:	1a9a      	subs	r2, r3, r2
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	69db      	ldr	r3, [r3, #28]
 8006566:	68fa      	ldr	r2, [r7, #12]
 8006568:	8b12      	ldrh	r2, [r2, #24]
 800656a:	441a      	add	r2, r3
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	61da      	str	r2, [r3, #28]
 8006570:	e002      	b.n	8006578 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	2200      	movs	r2, #0
 8006576:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800657c:	2b00      	cmp	r3, #0
 800657e:	d004      	beq.n	800658a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2201      	movs	r2, #1
 8006584:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8006588:	e00e      	b.n	80065a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	2200      	movs	r2, #0
 800658e:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006592:	6878      	ldr	r0, [r7, #4]
 8006594:	f000 f868 	bl	8006668 <USBH_CDC_TransmitCallback>
      break;
 8006598:	e006      	b.n	80065a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800659a:	7afb      	ldrb	r3, [r7, #11]
 800659c:	2b02      	cmp	r3, #2
 800659e:	d103      	bne.n	80065a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065a8:	bf00      	nop
  }
}
 80065aa:	bf00      	nop
 80065ac:	3710      	adds	r7, #16
 80065ae:	46bd      	mov	sp, r7
 80065b0:	bd80      	pop	{r7, pc}

080065b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80065b2:	b580      	push	{r7, lr}
 80065b4:	b086      	sub	sp, #24
 80065b6:	af00      	add	r7, sp, #0
 80065b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80065c0:	69db      	ldr	r3, [r3, #28]
 80065c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80065c4:	2300      	movs	r3, #0
 80065c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 80065ce:	2b03      	cmp	r3, #3
 80065d0:	d002      	beq.n	80065d8 <CDC_ProcessReception+0x26>
 80065d2:	2b04      	cmp	r3, #4
 80065d4:	d00e      	beq.n	80065f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 80065d6:	e043      	b.n	8006660 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	6a19      	ldr	r1, [r3, #32]
 80065dc:	697b      	ldr	r3, [r7, #20]
 80065de:	8b5a      	ldrh	r2, [r3, #26]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	7b1b      	ldrb	r3, [r3, #12]
 80065e4:	6878      	ldr	r0, [r7, #4]
 80065e6:	f000 fc6f 	bl	8006ec8 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	2204      	movs	r2, #4
 80065ee:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80065f2:	e035      	b.n	8006660 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	7b1b      	ldrb	r3, [r3, #12]
 80065f8:	4619      	mov	r1, r3
 80065fa:	6878      	ldr	r0, [r7, #4]
 80065fc:	f000 ff22 	bl	8007444 <USBH_LL_GetURBState>
 8006600:	4603      	mov	r3, r0
 8006602:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006604:	7cfb      	ldrb	r3, [r7, #19]
 8006606:	2b01      	cmp	r3, #1
 8006608:	d129      	bne.n	800665e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	7b1b      	ldrb	r3, [r3, #12]
 800660e:	4619      	mov	r1, r3
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 fe85 	bl	8007320 <USBH_LL_GetLastXferSize>
 8006616:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8006618:	697b      	ldr	r3, [r7, #20]
 800661a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	429a      	cmp	r2, r3
 8006620:	d016      	beq.n	8006650 <CDC_ProcessReception+0x9e>
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	8b5b      	ldrh	r3, [r3, #26]
 8006626:	461a      	mov	r2, r3
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4293      	cmp	r3, r2
 800662c:	d910      	bls.n	8006650 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	1ad2      	subs	r2, r2, r3
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	6a1a      	ldr	r2, [r3, #32]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	441a      	add	r2, r3
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8006646:	697b      	ldr	r3, [r7, #20]
 8006648:	2203      	movs	r2, #3
 800664a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 800664e:	e006      	b.n	800665e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 f80f 	bl	800667c <USBH_CDC_ReceiveCallback>
      break;
 800665e:	bf00      	nop
  }
}
 8006660:	bf00      	nop
 8006662:	3718      	adds	r7, #24
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006670:	bf00      	nop
 8006672:	370c      	adds	r7, #12
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr

0800667c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006684:	bf00      	nop
 8006686:	370c      	adds	r7, #12
 8006688:	46bd      	mov	sp, r7
 800668a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668e:	4770      	bx	lr

08006690 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006690:	b480      	push	{r7}
 8006692:	b083      	sub	sp, #12
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006698:	bf00      	nop
 800669a:	370c      	adds	r7, #12
 800669c:	46bd      	mov	sp, r7
 800669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a2:	4770      	bx	lr

080066a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b084      	sub	sp, #16
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	60f8      	str	r0, [r7, #12]
 80066ac:	60b9      	str	r1, [r7, #8]
 80066ae:	4613      	mov	r3, r2
 80066b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d101      	bne.n	80066bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80066b8:	2302      	movs	r3, #2
 80066ba:	e029      	b.n	8006710 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	79fa      	ldrb	r2, [r7, #7]
 80066c0:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2200      	movs	r2, #0
 80066c8:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 80066d4:	68f8      	ldr	r0, [r7, #12]
 80066d6:	f000 f81f 	bl	8006718 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	2200      	movs	r2, #0
 80066de:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	2200      	movs	r2, #0
 80066ee:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80066fa:	68bb      	ldr	r3, [r7, #8]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d003      	beq.n	8006708 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8006708:	68f8      	ldr	r0, [r7, #12]
 800670a:	f000 fd97 	bl	800723c <USBH_LL_Init>

  return USBH_OK;
 800670e:	2300      	movs	r3, #0
}
 8006710:	4618      	mov	r0, r3
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}

08006718 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8006718:	b480      	push	{r7}
 800671a:	b085      	sub	sp, #20
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006720:	2300      	movs	r3, #0
 8006722:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006724:	2300      	movs	r3, #0
 8006726:	60fb      	str	r3, [r7, #12]
 8006728:	e009      	b.n	800673e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800672a:	687a      	ldr	r2, [r7, #4]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	33e0      	adds	r3, #224	; 0xe0
 8006730:	009b      	lsls	r3, r3, #2
 8006732:	4413      	add	r3, r2
 8006734:	2200      	movs	r2, #0
 8006736:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	3301      	adds	r3, #1
 800673c:	60fb      	str	r3, [r7, #12]
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b0f      	cmp	r3, #15
 8006742:	d9f2      	bls.n	800672a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006744:	2300      	movs	r3, #0
 8006746:	60fb      	str	r3, [r7, #12]
 8006748:	e009      	b.n	800675e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006754:	2200      	movs	r2, #0
 8006756:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3301      	adds	r3, #1
 800675c:	60fb      	str	r3, [r7, #12]
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006764:	d3f1      	bcc.n	800674a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2200      	movs	r2, #0
 800676a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	2200      	movs	r2, #0
 8006770:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2201      	movs	r2, #1
 8006776:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2201      	movs	r2, #1
 8006784:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	2240      	movs	r2, #64	; 0x40
 800678a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2200      	movs	r2, #0
 8006790:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2200      	movs	r2, #0
 8006796:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2201      	movs	r2, #1
 800679e:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2200      	movs	r2, #0
 80067a6:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3714      	adds	r7, #20
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b085      	sub	sp, #20
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80067ca:	2300      	movs	r3, #0
 80067cc:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80067ce:	683b      	ldr	r3, [r7, #0]
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d016      	beq.n	8006802 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d10e      	bne.n	80067fc <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80067e4:	1c59      	adds	r1, r3, #1
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	33de      	adds	r3, #222	; 0xde
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80067f6:	2300      	movs	r3, #0
 80067f8:	73fb      	strb	r3, [r7, #15]
 80067fa:	e004      	b.n	8006806 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80067fc:	2302      	movs	r3, #2
 80067fe:	73fb      	strb	r3, [r7, #15]
 8006800:	e001      	b.n	8006806 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006806:	7bfb      	ldrb	r3, [r7, #15]
}
 8006808:	4618      	mov	r0, r3
 800680a:	3714      	adds	r7, #20
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	429a      	cmp	r2, r3
 800682e:	d204      	bcs.n	800683a <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	78fa      	ldrb	r2, [r7, #3]
 8006834:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8006838:	e001      	b.n	800683e <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800683a:	2302      	movs	r3, #2
 800683c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800683e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006840:	4618      	mov	r0, r3
 8006842:	3714      	adds	r7, #20
 8006844:	46bd      	mov	sp, r7
 8006846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684a:	4770      	bx	lr

0800684c <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800684c:	b480      	push	{r7}
 800684e:	b087      	sub	sp, #28
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	4608      	mov	r0, r1
 8006856:	4611      	mov	r1, r2
 8006858:	461a      	mov	r2, r3
 800685a:	4603      	mov	r3, r0
 800685c:	70fb      	strb	r3, [r7, #3]
 800685e:	460b      	mov	r3, r1
 8006860:	70bb      	strb	r3, [r7, #2]
 8006862:	4613      	mov	r3, r2
 8006864:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8006866:	2300      	movs	r3, #0
 8006868:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800686a:	2300      	movs	r3, #0
 800686c:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006874:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006876:	e025      	b.n	80068c4 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8006878:	7dfb      	ldrb	r3, [r7, #23]
 800687a:	221a      	movs	r2, #26
 800687c:	fb02 f303 	mul.w	r3, r2, r3
 8006880:	3308      	adds	r3, #8
 8006882:	68fa      	ldr	r2, [r7, #12]
 8006884:	4413      	add	r3, r2
 8006886:	3302      	adds	r3, #2
 8006888:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	795b      	ldrb	r3, [r3, #5]
 800688e:	78fa      	ldrb	r2, [r7, #3]
 8006890:	429a      	cmp	r2, r3
 8006892:	d002      	beq.n	800689a <USBH_FindInterface+0x4e>
 8006894:	78fb      	ldrb	r3, [r7, #3]
 8006896:	2bff      	cmp	r3, #255	; 0xff
 8006898:	d111      	bne.n	80068be <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800689a:	693b      	ldr	r3, [r7, #16]
 800689c:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800689e:	78ba      	ldrb	r2, [r7, #2]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d002      	beq.n	80068aa <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068a4:	78bb      	ldrb	r3, [r7, #2]
 80068a6:	2bff      	cmp	r3, #255	; 0xff
 80068a8:	d109      	bne.n	80068be <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068aa:	693b      	ldr	r3, [r7, #16]
 80068ac:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80068ae:	787a      	ldrb	r2, [r7, #1]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d002      	beq.n	80068ba <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80068b4:	787b      	ldrb	r3, [r7, #1]
 80068b6:	2bff      	cmp	r3, #255	; 0xff
 80068b8:	d101      	bne.n	80068be <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80068ba:	7dfb      	ldrb	r3, [r7, #23]
 80068bc:	e006      	b.n	80068cc <USBH_FindInterface+0x80>
    }
    if_ix++;
 80068be:	7dfb      	ldrb	r3, [r7, #23]
 80068c0:	3301      	adds	r3, #1
 80068c2:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
 80068c6:	2b01      	cmp	r3, #1
 80068c8:	d9d6      	bls.n	8006878 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80068ca:	23ff      	movs	r3, #255	; 0xff
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	371c      	adds	r7, #28
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 80068d8:	b580      	push	{r7, lr}
 80068da:	b082      	sub	sp, #8
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f000 fce7 	bl	80072b4 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80068e6:	2101      	movs	r1, #1
 80068e8:	6878      	ldr	r0, [r7, #4]
 80068ea:	f000 fdbe 	bl	800746a <USBH_LL_DriverVBUS>

  return USBH_OK;
 80068ee:	2300      	movs	r3, #0
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3708      	adds	r7, #8
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}

080068f8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 80068f8:	b480      	push	{r7}
 80068fa:	b083      	sub	sp, #12
 80068fc:	af00      	add	r7, sp, #0
 80068fe:	6078      	str	r0, [r7, #4]
 8006900:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	683a      	ldr	r2, [r7, #0]
 8006906:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800690a:	bf00      	nop
 800690c:	370c      	adds	r7, #12
 800690e:	46bd      	mov	sp, r7
 8006910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006914:	4770      	bx	lr

08006916 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8006916:	b580      	push	{r7, lr}
 8006918:	b082      	sub	sp, #8
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006924:	1c5a      	adds	r2, r3, #1
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 f804 	bl	800693a <USBH_HandleSof>
}
 8006932:	bf00      	nop
 8006934:	3708      	adds	r7, #8
 8006936:	46bd      	mov	sp, r7
 8006938:	bd80      	pop	{r7, pc}

0800693a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800693a:	b580      	push	{r7, lr}
 800693c:	b082      	sub	sp, #8
 800693e:	af00      	add	r7, sp, #0
 8006940:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b0b      	cmp	r3, #11
 800694a:	d10a      	bne.n	8006962 <USBH_HandleSof+0x28>
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800695c:	699b      	ldr	r3, [r3, #24]
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	4798      	blx	r3
  }
}
 8006962:	bf00      	nop
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	2201      	movs	r2, #1
 8006976:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800697a:	bf00      	nop
}
 800697c:	370c      	adds	r7, #12
 800697e:	46bd      	mov	sp, r7
 8006980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006984:	4770      	bx	lr

08006986 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8006986:	b480      	push	{r7}
 8006988:	b083      	sub	sp, #12
 800698a:	af00      	add	r7, sp, #0
 800698c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	2200      	movs	r2, #0
 8006992:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8006996:	bf00      	nop
}
 8006998:	370c      	adds	r7, #12
 800699a:	46bd      	mov	sp, r7
 800699c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a0:	4770      	bx	lr

080069a2 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80069a2:	b480      	push	{r7}
 80069a4:	b083      	sub	sp, #12
 80069a6:	af00      	add	r7, sp, #0
 80069a8:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2201      	movs	r2, #1
 80069ae:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80069c2:	2300      	movs	r3, #0
}
 80069c4:	4618      	mov	r0, r3
 80069c6:	370c      	adds	r7, #12
 80069c8:	46bd      	mov	sp, r7
 80069ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ce:	4770      	bx	lr

080069d0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b082      	sub	sp, #8
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2201      	movs	r2, #1
 80069dc:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2200      	movs	r2, #0
 80069e4:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	2200      	movs	r2, #0
 80069ec:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f000 fc7a 	bl	80072ea <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	791b      	ldrb	r3, [r3, #4]
 80069fa:	4619      	mov	r1, r3
 80069fc:	6878      	ldr	r0, [r7, #4]
 80069fe:	f000 fad1 	bl	8006fa4 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	795b      	ldrb	r3, [r3, #5]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f000 facb 	bl	8006fa4 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006a0e:	2300      	movs	r3, #0
}
 8006a10:	4618      	mov	r0, r3
 8006a12:	3708      	adds	r7, #8
 8006a14:	46bd      	mov	sp, r7
 8006a16:	bd80      	pop	{r7, pc}

08006a18 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b082      	sub	sp, #8
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	460b      	mov	r3, r1
 8006a22:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	2b01      	cmp	r3, #1
 8006a2a:	d10f      	bne.n	8006a4c <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2202      	movs	r2, #2
 8006a30:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	2201      	movs	r2, #1
 8006a36:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8006a3e:	78fb      	ldrb	r3, [r7, #3]
 8006a40:	b29a      	uxth	r2, r3
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	2200      	movs	r2, #0
 8006a4a:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	2100      	movs	r1, #0
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 f805 	bl	8006a60 <USBH_CtlReq>
 8006a56:	4603      	mov	r3, r0
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	3708      	adds	r7, #8
 8006a5c:	46bd      	mov	sp, r7
 8006a5e:	bd80      	pop	{r7, pc}

08006a60 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8006a60:	b580      	push	{r7, lr}
 8006a62:	b086      	sub	sp, #24
 8006a64:	af00      	add	r7, sp, #0
 8006a66:	60f8      	str	r0, [r7, #12]
 8006a68:	60b9      	str	r1, [r7, #8]
 8006a6a:	4613      	mov	r3, r2
 8006a6c:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8006a6e:	2301      	movs	r3, #1
 8006a70:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	789b      	ldrb	r3, [r3, #2]
 8006a76:	2b01      	cmp	r3, #1
 8006a78:	d002      	beq.n	8006a80 <USBH_CtlReq+0x20>
 8006a7a:	2b02      	cmp	r3, #2
 8006a7c:	d00f      	beq.n	8006a9e <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8006a7e:	e027      	b.n	8006ad0 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	68ba      	ldr	r2, [r7, #8]
 8006a84:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2201      	movs	r2, #1
 8006a90:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	2202      	movs	r2, #2
 8006a96:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8006a98:	2301      	movs	r3, #1
 8006a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8006a9c:	e018      	b.n	8006ad0 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006a9e:	68f8      	ldr	r0, [r7, #12]
 8006aa0:	f000 f81c 	bl	8006adc <USBH_HandleControl>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8006aa8:	7dfb      	ldrb	r3, [r7, #23]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <USBH_CtlReq+0x54>
 8006aae:	7dfb      	ldrb	r3, [r7, #23]
 8006ab0:	2b03      	cmp	r3, #3
 8006ab2:	d106      	bne.n	8006ac2 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2200      	movs	r2, #0
 8006abe:	761a      	strb	r2, [r3, #24]
      break;
 8006ac0:	e005      	b.n	8006ace <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006ac2:	7dfb      	ldrb	r3, [r7, #23]
 8006ac4:	2b02      	cmp	r3, #2
 8006ac6:	d102      	bne.n	8006ace <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	2201      	movs	r2, #1
 8006acc:	709a      	strb	r2, [r3, #2]
      break;
 8006ace:	bf00      	nop
  }
  return status;
 8006ad0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3718      	adds	r7, #24
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	bd80      	pop	{r7, pc}
	...

08006adc <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b086      	sub	sp, #24
 8006ae0:	af02      	add	r7, sp, #8
 8006ae2:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ae4:	2301      	movs	r3, #1
 8006ae6:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	7e1b      	ldrb	r3, [r3, #24]
 8006af0:	3b01      	subs	r3, #1
 8006af2:	2b0a      	cmp	r3, #10
 8006af4:	f200 8156 	bhi.w	8006da4 <USBH_HandleControl+0x2c8>
 8006af8:	a201      	add	r2, pc, #4	; (adr r2, 8006b00 <USBH_HandleControl+0x24>)
 8006afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006afe:	bf00      	nop
 8006b00:	08006b2d 	.word	0x08006b2d
 8006b04:	08006b47 	.word	0x08006b47
 8006b08:	08006bb1 	.word	0x08006bb1
 8006b0c:	08006bd7 	.word	0x08006bd7
 8006b10:	08006c0f 	.word	0x08006c0f
 8006b14:	08006c39 	.word	0x08006c39
 8006b18:	08006c8b 	.word	0x08006c8b
 8006b1c:	08006cad 	.word	0x08006cad
 8006b20:	08006ce9 	.word	0x08006ce9
 8006b24:	08006d0f 	.word	0x08006d0f
 8006b28:	08006d4d 	.word	0x08006d4d
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f103 0110 	add.w	r1, r3, #16
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	795b      	ldrb	r3, [r3, #5]
 8006b36:	461a      	mov	r2, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 f943 	bl	8006dc4 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2202      	movs	r2, #2
 8006b42:	761a      	strb	r2, [r3, #24]
      break;
 8006b44:	e139      	b.n	8006dba <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	795b      	ldrb	r3, [r3, #5]
 8006b4a:	4619      	mov	r1, r3
 8006b4c:	6878      	ldr	r0, [r7, #4]
 8006b4e:	f000 fc79 	bl	8007444 <USBH_LL_GetURBState>
 8006b52:	4603      	mov	r3, r0
 8006b54:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d11e      	bne.n	8006b9a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	7c1b      	ldrb	r3, [r3, #16]
 8006b60:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006b64:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	8adb      	ldrh	r3, [r3, #22]
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d00a      	beq.n	8006b84 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8006b6e:	7b7b      	ldrb	r3, [r7, #13]
 8006b70:	2b80      	cmp	r3, #128	; 0x80
 8006b72:	d103      	bne.n	8006b7c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2203      	movs	r2, #3
 8006b78:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006b7a:	e115      	b.n	8006da8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2205      	movs	r2, #5
 8006b80:	761a      	strb	r2, [r3, #24]
      break;
 8006b82:	e111      	b.n	8006da8 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8006b84:	7b7b      	ldrb	r3, [r7, #13]
 8006b86:	2b80      	cmp	r3, #128	; 0x80
 8006b88:	d103      	bne.n	8006b92 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2209      	movs	r2, #9
 8006b8e:	761a      	strb	r2, [r3, #24]
      break;
 8006b90:	e10a      	b.n	8006da8 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2207      	movs	r2, #7
 8006b96:	761a      	strb	r2, [r3, #24]
      break;
 8006b98:	e106      	b.n	8006da8 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8006b9a:	7bbb      	ldrb	r3, [r7, #14]
 8006b9c:	2b04      	cmp	r3, #4
 8006b9e:	d003      	beq.n	8006ba8 <USBH_HandleControl+0xcc>
 8006ba0:	7bbb      	ldrb	r3, [r7, #14]
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	f040 8100 	bne.w	8006da8 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	220b      	movs	r2, #11
 8006bac:	761a      	strb	r2, [r3, #24]
      break;
 8006bae:	e0fb      	b.n	8006da8 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006bb6:	b29a      	uxth	r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6899      	ldr	r1, [r3, #8]
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	899a      	ldrh	r2, [r3, #12]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	791b      	ldrb	r3, [r3, #4]
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 f93a 	bl	8006e42 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2204      	movs	r2, #4
 8006bd2:	761a      	strb	r2, [r3, #24]
      break;
 8006bd4:	e0f1      	b.n	8006dba <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	791b      	ldrb	r3, [r3, #4]
 8006bda:	4619      	mov	r1, r3
 8006bdc:	6878      	ldr	r0, [r7, #4]
 8006bde:	f000 fc31 	bl	8007444 <USBH_LL_GetURBState>
 8006be2:	4603      	mov	r3, r0
 8006be4:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8006be6:	7bbb      	ldrb	r3, [r7, #14]
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d102      	bne.n	8006bf2 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	2209      	movs	r2, #9
 8006bf0:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006bf2:	7bbb      	ldrb	r3, [r7, #14]
 8006bf4:	2b05      	cmp	r3, #5
 8006bf6:	d102      	bne.n	8006bfe <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8006bf8:	2303      	movs	r3, #3
 8006bfa:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006bfc:	e0d6      	b.n	8006dac <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	2b04      	cmp	r3, #4
 8006c02:	f040 80d3 	bne.w	8006dac <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	220b      	movs	r2, #11
 8006c0a:	761a      	strb	r2, [r3, #24]
      break;
 8006c0c:	e0ce      	b.n	8006dac <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6899      	ldr	r1, [r3, #8]
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	899a      	ldrh	r2, [r3, #12]
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	795b      	ldrb	r3, [r3, #5]
 8006c1a:	2001      	movs	r0, #1
 8006c1c:	9000      	str	r0, [sp, #0]
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8ea 	bl	8006df8 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2206      	movs	r2, #6
 8006c34:	761a      	strb	r2, [r3, #24]
      break;
 8006c36:	e0c0      	b.n	8006dba <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	795b      	ldrb	r3, [r3, #5]
 8006c3c:	4619      	mov	r1, r3
 8006c3e:	6878      	ldr	r0, [r7, #4]
 8006c40:	f000 fc00 	bl	8007444 <USBH_LL_GetURBState>
 8006c44:	4603      	mov	r3, r0
 8006c46:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d103      	bne.n	8006c56 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2207      	movs	r2, #7
 8006c52:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006c54:	e0ac      	b.n	8006db0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8006c56:	7bbb      	ldrb	r3, [r7, #14]
 8006c58:	2b05      	cmp	r3, #5
 8006c5a:	d105      	bne.n	8006c68 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	220c      	movs	r2, #12
 8006c60:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8006c62:	2303      	movs	r3, #3
 8006c64:	73fb      	strb	r3, [r7, #15]
      break;
 8006c66:	e0a3      	b.n	8006db0 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006c68:	7bbb      	ldrb	r3, [r7, #14]
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d103      	bne.n	8006c76 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2205      	movs	r2, #5
 8006c72:	761a      	strb	r2, [r3, #24]
      break;
 8006c74:	e09c      	b.n	8006db0 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	f040 8099 	bne.w	8006db0 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	220b      	movs	r2, #11
 8006c82:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8006c84:	2302      	movs	r3, #2
 8006c86:	73fb      	strb	r3, [r7, #15]
      break;
 8006c88:	e092      	b.n	8006db0 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	791b      	ldrb	r3, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	2100      	movs	r1, #0
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f8d5 	bl	8006e42 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006c9e:	b29a      	uxth	r2, r3
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2208      	movs	r2, #8
 8006ca8:	761a      	strb	r2, [r3, #24]

      break;
 8006caa:	e086      	b.n	8006dba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	791b      	ldrb	r3, [r3, #4]
 8006cb0:	4619      	mov	r1, r3
 8006cb2:	6878      	ldr	r0, [r7, #4]
 8006cb4:	f000 fbc6 	bl	8007444 <USBH_LL_GetURBState>
 8006cb8:	4603      	mov	r3, r0
 8006cba:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006cbc:	7bbb      	ldrb	r3, [r7, #14]
 8006cbe:	2b01      	cmp	r3, #1
 8006cc0:	d105      	bne.n	8006cce <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	220d      	movs	r2, #13
 8006cc6:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006ccc:	e072      	b.n	8006db4 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	2b04      	cmp	r3, #4
 8006cd2:	d103      	bne.n	8006cdc <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	220b      	movs	r2, #11
 8006cd8:	761a      	strb	r2, [r3, #24]
      break;
 8006cda:	e06b      	b.n	8006db4 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	2b05      	cmp	r3, #5
 8006ce0:	d168      	bne.n	8006db4 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006ce2:	2303      	movs	r3, #3
 8006ce4:	73fb      	strb	r3, [r7, #15]
      break;
 8006ce6:	e065      	b.n	8006db4 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	795b      	ldrb	r3, [r3, #5]
 8006cec:	2201      	movs	r2, #1
 8006cee:	9200      	str	r2, [sp, #0]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f000 f87f 	bl	8006df8 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006d00:	b29a      	uxth	r2, r3
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	220a      	movs	r2, #10
 8006d0a:	761a      	strb	r2, [r3, #24]
      break;
 8006d0c:	e055      	b.n	8006dba <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	795b      	ldrb	r3, [r3, #5]
 8006d12:	4619      	mov	r1, r3
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	f000 fb95 	bl	8007444 <USBH_LL_GetURBState>
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006d1e:	7bbb      	ldrb	r3, [r7, #14]
 8006d20:	2b01      	cmp	r3, #1
 8006d22:	d105      	bne.n	8006d30 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	220d      	movs	r2, #13
 8006d2c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006d2e:	e043      	b.n	8006db8 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006d30:	7bbb      	ldrb	r3, [r7, #14]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d103      	bne.n	8006d3e <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	2209      	movs	r2, #9
 8006d3a:	761a      	strb	r2, [r3, #24]
      break;
 8006d3c:	e03c      	b.n	8006db8 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	2b04      	cmp	r3, #4
 8006d42:	d139      	bne.n	8006db8 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	220b      	movs	r2, #11
 8006d48:	761a      	strb	r2, [r3, #24]
      break;
 8006d4a:	e035      	b.n	8006db8 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	7e5b      	ldrb	r3, [r3, #25]
 8006d50:	3301      	adds	r3, #1
 8006d52:	b2da      	uxtb	r2, r3
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	765a      	strb	r2, [r3, #25]
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	7e5b      	ldrb	r3, [r3, #25]
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d806      	bhi.n	8006d6e <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2201      	movs	r2, #1
 8006d6a:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8006d6c:	e025      	b.n	8006dba <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d74:	2106      	movs	r1, #6
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	795b      	ldrb	r3, [r3, #5]
 8006d84:	4619      	mov	r1, r3
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f90c 	bl	8006fa4 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	791b      	ldrb	r3, [r3, #4]
 8006d90:	4619      	mov	r1, r3
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f906 	bl	8006fa4 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006d9e:	2302      	movs	r3, #2
 8006da0:	73fb      	strb	r3, [r7, #15]
      break;
 8006da2:	e00a      	b.n	8006dba <USBH_HandleControl+0x2de>

    default:
      break;
 8006da4:	bf00      	nop
 8006da6:	e008      	b.n	8006dba <USBH_HandleControl+0x2de>
      break;
 8006da8:	bf00      	nop
 8006daa:	e006      	b.n	8006dba <USBH_HandleControl+0x2de>
      break;
 8006dac:	bf00      	nop
 8006dae:	e004      	b.n	8006dba <USBH_HandleControl+0x2de>
      break;
 8006db0:	bf00      	nop
 8006db2:	e002      	b.n	8006dba <USBH_HandleControl+0x2de>
      break;
 8006db4:	bf00      	nop
 8006db6:	e000      	b.n	8006dba <USBH_HandleControl+0x2de>
      break;
 8006db8:	bf00      	nop
  }

  return status;
 8006dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b088      	sub	sp, #32
 8006dc8:	af04      	add	r7, sp, #16
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	4613      	mov	r3, r2
 8006dd0:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006dd2:	79f9      	ldrb	r1, [r7, #7]
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9303      	str	r3, [sp, #12]
 8006dd8:	2308      	movs	r3, #8
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	68bb      	ldr	r3, [r7, #8]
 8006dde:	9301      	str	r3, [sp, #4]
 8006de0:	2300      	movs	r3, #0
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	2200      	movs	r2, #0
 8006de8:	68f8      	ldr	r0, [r7, #12]
 8006dea:	f000 fafa 	bl	80073e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006dee:	2300      	movs	r3, #0
}
 8006df0:	4618      	mov	r0, r3
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af04      	add	r7, sp, #16
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	4611      	mov	r1, r2
 8006e04:	461a      	mov	r2, r3
 8006e06:	460b      	mov	r3, r1
 8006e08:	80fb      	strh	r3, [r7, #6]
 8006e0a:	4613      	mov	r3, r2
 8006e0c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d001      	beq.n	8006e1c <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006e1c:	7979      	ldrb	r1, [r7, #5]
 8006e1e:	7e3b      	ldrb	r3, [r7, #24]
 8006e20:	9303      	str	r3, [sp, #12]
 8006e22:	88fb      	ldrh	r3, [r7, #6]
 8006e24:	9302      	str	r3, [sp, #8]
 8006e26:	68bb      	ldr	r3, [r7, #8]
 8006e28:	9301      	str	r3, [sp, #4]
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	2300      	movs	r3, #0
 8006e30:	2200      	movs	r2, #0
 8006e32:	68f8      	ldr	r0, [r7, #12]
 8006e34:	f000 fad5 	bl	80073e2 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8006e38:	2300      	movs	r3, #0
}
 8006e3a:	4618      	mov	r0, r3
 8006e3c:	3710      	adds	r7, #16
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b088      	sub	sp, #32
 8006e46:	af04      	add	r7, sp, #16
 8006e48:	60f8      	str	r0, [r7, #12]
 8006e4a:	60b9      	str	r1, [r7, #8]
 8006e4c:	4611      	mov	r1, r2
 8006e4e:	461a      	mov	r2, r3
 8006e50:	460b      	mov	r3, r1
 8006e52:	80fb      	strh	r3, [r7, #6]
 8006e54:	4613      	mov	r3, r2
 8006e56:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006e58:	7979      	ldrb	r1, [r7, #5]
 8006e5a:	2300      	movs	r3, #0
 8006e5c:	9303      	str	r3, [sp, #12]
 8006e5e:	88fb      	ldrh	r3, [r7, #6]
 8006e60:	9302      	str	r3, [sp, #8]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	9301      	str	r3, [sp, #4]
 8006e66:	2301      	movs	r3, #1
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	2201      	movs	r2, #1
 8006e6e:	68f8      	ldr	r0, [r7, #12]
 8006e70:	f000 fab7 	bl	80073e2 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006e74:	2300      	movs	r3, #0

}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}

08006e7e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8006e7e:	b580      	push	{r7, lr}
 8006e80:	b088      	sub	sp, #32
 8006e82:	af04      	add	r7, sp, #16
 8006e84:	60f8      	str	r0, [r7, #12]
 8006e86:	60b9      	str	r1, [r7, #8]
 8006e88:	4611      	mov	r1, r2
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	80fb      	strh	r3, [r7, #6]
 8006e90:	4613      	mov	r3, r2
 8006e92:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006e9e:	2300      	movs	r3, #0
 8006ea0:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ea2:	7979      	ldrb	r1, [r7, #5]
 8006ea4:	7e3b      	ldrb	r3, [r7, #24]
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	88fb      	ldrh	r3, [r7, #6]
 8006eaa:	9302      	str	r3, [sp, #8]
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	9301      	str	r3, [sp, #4]
 8006eb0:	2301      	movs	r3, #1
 8006eb2:	9300      	str	r3, [sp, #0]
 8006eb4:	2302      	movs	r3, #2
 8006eb6:	2200      	movs	r2, #0
 8006eb8:	68f8      	ldr	r0, [r7, #12]
 8006eba:	f000 fa92 	bl	80073e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006ebe:	2300      	movs	r3, #0
}
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	3710      	adds	r7, #16
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}

08006ec8 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	b088      	sub	sp, #32
 8006ecc:	af04      	add	r7, sp, #16
 8006ece:	60f8      	str	r0, [r7, #12]
 8006ed0:	60b9      	str	r1, [r7, #8]
 8006ed2:	4611      	mov	r1, r2
 8006ed4:	461a      	mov	r2, r3
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	80fb      	strh	r3, [r7, #6]
 8006eda:	4613      	mov	r3, r2
 8006edc:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006ede:	7979      	ldrb	r1, [r7, #5]
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	9303      	str	r3, [sp, #12]
 8006ee4:	88fb      	ldrh	r3, [r7, #6]
 8006ee6:	9302      	str	r3, [sp, #8]
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	9301      	str	r3, [sp, #4]
 8006eec:	2301      	movs	r3, #1
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2302      	movs	r3, #2
 8006ef2:	2201      	movs	r2, #1
 8006ef4:	68f8      	ldr	r0, [r7, #12]
 8006ef6:	f000 fa74 	bl	80073e2 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8006efa:	2300      	movs	r3, #0
}
 8006efc:	4618      	mov	r0, r3
 8006efe:	3710      	adds	r7, #16
 8006f00:	46bd      	mov	sp, r7
 8006f02:	bd80      	pop	{r7, pc}

08006f04 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af04      	add	r7, sp, #16
 8006f0a:	6078      	str	r0, [r7, #4]
 8006f0c:	4608      	mov	r0, r1
 8006f0e:	4611      	mov	r1, r2
 8006f10:	461a      	mov	r2, r3
 8006f12:	4603      	mov	r3, r0
 8006f14:	70fb      	strb	r3, [r7, #3]
 8006f16:	460b      	mov	r3, r1
 8006f18:	70bb      	strb	r3, [r7, #2]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006f1e:	7878      	ldrb	r0, [r7, #1]
 8006f20:	78ba      	ldrb	r2, [r7, #2]
 8006f22:	78f9      	ldrb	r1, [r7, #3]
 8006f24:	8b3b      	ldrh	r3, [r7, #24]
 8006f26:	9302      	str	r3, [sp, #8]
 8006f28:	7d3b      	ldrb	r3, [r7, #20]
 8006f2a:	9301      	str	r3, [sp, #4]
 8006f2c:	7c3b      	ldrb	r3, [r7, #16]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	4603      	mov	r3, r0
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 fa07 	bl	8007346 <USBH_LL_OpenPipe>

  return USBH_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3708      	adds	r7, #8
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8006f42:	b580      	push	{r7, lr}
 8006f44:	b082      	sub	sp, #8
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
 8006f4a:	460b      	mov	r3, r1
 8006f4c:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8006f4e:	78fb      	ldrb	r3, [r7, #3]
 8006f50:	4619      	mov	r1, r3
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 fa26 	bl	80073a4 <USBH_LL_ClosePipe>

  return USBH_OK;
 8006f58:	2300      	movs	r3, #0
}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3708      	adds	r7, #8
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}

08006f62 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8006f62:	b580      	push	{r7, lr}
 8006f64:	b084      	sub	sp, #16
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]
 8006f6a:	460b      	mov	r3, r1
 8006f6c:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f836 	bl	8006fe0 <USBH_GetFreePipe>
 8006f74:	4603      	mov	r3, r0
 8006f76:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8006f78:	89fb      	ldrh	r3, [r7, #14]
 8006f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006f7e:	4293      	cmp	r3, r2
 8006f80:	d00a      	beq.n	8006f98 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8006f82:	78fa      	ldrb	r2, [r7, #3]
 8006f84:	89fb      	ldrh	r3, [r7, #14]
 8006f86:	f003 030f 	and.w	r3, r3, #15
 8006f8a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006f8e:	6879      	ldr	r1, [r7, #4]
 8006f90:	33e0      	adds	r3, #224	; 0xe0
 8006f92:	009b      	lsls	r3, r3, #2
 8006f94:	440b      	add	r3, r1
 8006f96:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8006f98:	89fb      	ldrh	r3, [r7, #14]
 8006f9a:	b2db      	uxtb	r3, r3
}
 8006f9c:	4618      	mov	r0, r3
 8006f9e:	3710      	adds	r7, #16
 8006fa0:	46bd      	mov	sp, r7
 8006fa2:	bd80      	pop	{r7, pc}

08006fa4 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006fa4:	b480      	push	{r7}
 8006fa6:	b083      	sub	sp, #12
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
 8006fac:	460b      	mov	r3, r1
 8006fae:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006fb0:	78fb      	ldrb	r3, [r7, #3]
 8006fb2:	2b0f      	cmp	r3, #15
 8006fb4:	d80d      	bhi.n	8006fd2 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006fb6:	78fb      	ldrb	r3, [r7, #3]
 8006fb8:	687a      	ldr	r2, [r7, #4]
 8006fba:	33e0      	adds	r3, #224	; 0xe0
 8006fbc:	009b      	lsls	r3, r3, #2
 8006fbe:	4413      	add	r3, r2
 8006fc0:	685a      	ldr	r2, [r3, #4]
 8006fc2:	78fb      	ldrb	r3, [r7, #3]
 8006fc4:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006fc8:	6879      	ldr	r1, [r7, #4]
 8006fca:	33e0      	adds	r3, #224	; 0xe0
 8006fcc:	009b      	lsls	r3, r3, #2
 8006fce:	440b      	add	r3, r1
 8006fd0:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	370c      	adds	r7, #12
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fde:	4770      	bx	lr

08006fe0 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006fe8:	2300      	movs	r3, #0
 8006fea:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006fec:	2300      	movs	r3, #0
 8006fee:	73fb      	strb	r3, [r7, #15]
 8006ff0:	e00f      	b.n	8007012 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006ff2:	7bfb      	ldrb	r3, [r7, #15]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	33e0      	adds	r3, #224	; 0xe0
 8006ff8:	009b      	lsls	r3, r3, #2
 8006ffa:	4413      	add	r3, r2
 8006ffc:	685b      	ldr	r3, [r3, #4]
 8006ffe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007002:	2b00      	cmp	r3, #0
 8007004:	d102      	bne.n	800700c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007006:	7bfb      	ldrb	r3, [r7, #15]
 8007008:	b29b      	uxth	r3, r3
 800700a:	e007      	b.n	800701c <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 800700c:	7bfb      	ldrb	r3, [r7, #15]
 800700e:	3301      	adds	r3, #1
 8007010:	73fb      	strb	r3, [r7, #15]
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	2b0f      	cmp	r3, #15
 8007016:	d9ec      	bls.n	8006ff2 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007018:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 800701c:	4618      	mov	r0, r3
 800701e:	3714      	adds	r7, #20
 8007020:	46bd      	mov	sp, r7
 8007022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007026:	4770      	bx	lr

08007028 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800702c:	2201      	movs	r2, #1
 800702e:	490e      	ldr	r1, [pc, #56]	; (8007068 <MX_USB_HOST_Init+0x40>)
 8007030:	480e      	ldr	r0, [pc, #56]	; (800706c <MX_USB_HOST_Init+0x44>)
 8007032:	f7ff fb37 	bl	80066a4 <USBH_Init>
 8007036:	4603      	mov	r3, r0
 8007038:	2b00      	cmp	r3, #0
 800703a:	d001      	beq.n	8007040 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800703c:	f7f9 fd88 	bl	8000b50 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007040:	490b      	ldr	r1, [pc, #44]	; (8007070 <MX_USB_HOST_Init+0x48>)
 8007042:	480a      	ldr	r0, [pc, #40]	; (800706c <MX_USB_HOST_Init+0x44>)
 8007044:	f7ff fbbc 	bl	80067c0 <USBH_RegisterClass>
 8007048:	4603      	mov	r3, r0
 800704a:	2b00      	cmp	r3, #0
 800704c:	d001      	beq.n	8007052 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800704e:	f7f9 fd7f 	bl	8000b50 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007052:	4806      	ldr	r0, [pc, #24]	; (800706c <MX_USB_HOST_Init+0x44>)
 8007054:	f7ff fc40 	bl	80068d8 <USBH_Start>
 8007058:	4603      	mov	r3, r0
 800705a:	2b00      	cmp	r3, #0
 800705c:	d001      	beq.n	8007062 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800705e:	f7f9 fd77 	bl	8000b50 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007062:	bf00      	nop
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	08007075 	.word	0x08007075
 800706c:	2000022c 	.word	0x2000022c
 8007070:	2000000c 	.word	0x2000000c

08007074 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
 800707c:	460b      	mov	r3, r1
 800707e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007080:	78fb      	ldrb	r3, [r7, #3]
 8007082:	3b01      	subs	r3, #1
 8007084:	2b04      	cmp	r3, #4
 8007086:	d819      	bhi.n	80070bc <USBH_UserProcess+0x48>
 8007088:	a201      	add	r2, pc, #4	; (adr r2, 8007090 <USBH_UserProcess+0x1c>)
 800708a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800708e:	bf00      	nop
 8007090:	080070bd 	.word	0x080070bd
 8007094:	080070ad 	.word	0x080070ad
 8007098:	080070bd 	.word	0x080070bd
 800709c:	080070b5 	.word	0x080070b5
 80070a0:	080070a5 	.word	0x080070a5
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80070a4:	4b09      	ldr	r3, [pc, #36]	; (80070cc <USBH_UserProcess+0x58>)
 80070a6:	2203      	movs	r2, #3
 80070a8:	701a      	strb	r2, [r3, #0]
  break;
 80070aa:	e008      	b.n	80070be <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80070ac:	4b07      	ldr	r3, [pc, #28]	; (80070cc <USBH_UserProcess+0x58>)
 80070ae:	2202      	movs	r2, #2
 80070b0:	701a      	strb	r2, [r3, #0]
  break;
 80070b2:	e004      	b.n	80070be <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80070b4:	4b05      	ldr	r3, [pc, #20]	; (80070cc <USBH_UserProcess+0x58>)
 80070b6:	2201      	movs	r2, #1
 80070b8:	701a      	strb	r2, [r3, #0]
  break;
 80070ba:	e000      	b.n	80070be <USBH_UserProcess+0x4a>

  default:
  break;
 80070bc:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80070be:	bf00      	nop
 80070c0:	370c      	adds	r7, #12
 80070c2:	46bd      	mov	sp, r7
 80070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c8:	4770      	bx	lr
 80070ca:	bf00      	nop
 80070cc:	20000604 	.word	0x20000604

080070d0 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b08a      	sub	sp, #40	; 0x28
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80070d8:	f107 0314 	add.w	r3, r7, #20
 80070dc:	2200      	movs	r2, #0
 80070de:	601a      	str	r2, [r3, #0]
 80070e0:	605a      	str	r2, [r3, #4]
 80070e2:	609a      	str	r2, [r3, #8]
 80070e4:	60da      	str	r2, [r3, #12]
 80070e6:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80070f0:	d147      	bne.n	8007182 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80070f2:	2300      	movs	r3, #0
 80070f4:	613b      	str	r3, [r7, #16]
 80070f6:	4b25      	ldr	r3, [pc, #148]	; (800718c <HAL_HCD_MspInit+0xbc>)
 80070f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070fa:	4a24      	ldr	r2, [pc, #144]	; (800718c <HAL_HCD_MspInit+0xbc>)
 80070fc:	f043 0301 	orr.w	r3, r3, #1
 8007100:	6313      	str	r3, [r2, #48]	; 0x30
 8007102:	4b22      	ldr	r3, [pc, #136]	; (800718c <HAL_HCD_MspInit+0xbc>)
 8007104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007106:	f003 0301 	and.w	r3, r3, #1
 800710a:	613b      	str	r3, [r7, #16]
 800710c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800710e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007114:	2300      	movs	r3, #0
 8007116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007118:	2300      	movs	r3, #0
 800711a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800711c:	f107 0314 	add.w	r3, r7, #20
 8007120:	4619      	mov	r1, r3
 8007122:	481b      	ldr	r0, [pc, #108]	; (8007190 <HAL_HCD_MspInit+0xc0>)
 8007124:	f7fa f9c4 	bl	80014b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007128:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800712c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800712e:	2302      	movs	r3, #2
 8007130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007132:	2300      	movs	r3, #0
 8007134:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007136:	2303      	movs	r3, #3
 8007138:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800713a:	230a      	movs	r3, #10
 800713c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800713e:	f107 0314 	add.w	r3, r7, #20
 8007142:	4619      	mov	r1, r3
 8007144:	4812      	ldr	r0, [pc, #72]	; (8007190 <HAL_HCD_MspInit+0xc0>)
 8007146:	f7fa f9b3 	bl	80014b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800714a:	4b10      	ldr	r3, [pc, #64]	; (800718c <HAL_HCD_MspInit+0xbc>)
 800714c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800714e:	4a0f      	ldr	r2, [pc, #60]	; (800718c <HAL_HCD_MspInit+0xbc>)
 8007150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007154:	6353      	str	r3, [r2, #52]	; 0x34
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
 800715a:	4b0c      	ldr	r3, [pc, #48]	; (800718c <HAL_HCD_MspInit+0xbc>)
 800715c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800715e:	4a0b      	ldr	r2, [pc, #44]	; (800718c <HAL_HCD_MspInit+0xbc>)
 8007160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007164:	6453      	str	r3, [r2, #68]	; 0x44
 8007166:	4b09      	ldr	r3, [pc, #36]	; (800718c <HAL_HCD_MspInit+0xbc>)
 8007168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800716a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800716e:	60fb      	str	r3, [r7, #12]
 8007170:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007172:	2200      	movs	r2, #0
 8007174:	2100      	movs	r1, #0
 8007176:	2043      	movs	r0, #67	; 0x43
 8007178:	f7fa f963 	bl	8001442 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800717c:	2043      	movs	r0, #67	; 0x43
 800717e:	f7fa f97c 	bl	800147a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007182:	bf00      	nop
 8007184:	3728      	adds	r7, #40	; 0x28
 8007186:	46bd      	mov	sp, r7
 8007188:	bd80      	pop	{r7, pc}
 800718a:	bf00      	nop
 800718c:	40023800 	.word	0x40023800
 8007190:	40020000 	.word	0x40020000

08007194 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80071a2:	4618      	mov	r0, r3
 80071a4:	f7ff fbb7 	bl	8006916 <USBH_LL_IncTimer>
}
 80071a8:	bf00      	nop
 80071aa:	3708      	adds	r7, #8
 80071ac:	46bd      	mov	sp, r7
 80071ae:	bd80      	pop	{r7, pc}

080071b0 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80071b0:	b580      	push	{r7, lr}
 80071b2:	b082      	sub	sp, #8
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80071be:	4618      	mov	r0, r3
 80071c0:	f7ff fbef 	bl	80069a2 <USBH_LL_Connect>
}
 80071c4:	bf00      	nop
 80071c6:	3708      	adds	r7, #8
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80071da:	4618      	mov	r0, r3
 80071dc:	f7ff fbf8 	bl	80069d0 <USBH_LL_Disconnect>
}
 80071e0:	bf00      	nop
 80071e2:	3708      	adds	r7, #8
 80071e4:	46bd      	mov	sp, r7
 80071e6:	bd80      	pop	{r7, pc}

080071e8 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80071e8:	b480      	push	{r7}
 80071ea:	b083      	sub	sp, #12
 80071ec:	af00      	add	r7, sp, #0
 80071ee:	6078      	str	r0, [r7, #4]
 80071f0:	460b      	mov	r3, r1
 80071f2:	70fb      	strb	r3, [r7, #3]
 80071f4:	4613      	mov	r3, r2
 80071f6:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80071f8:	bf00      	nop
 80071fa:	370c      	adds	r7, #12
 80071fc:	46bd      	mov	sp, r7
 80071fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007202:	4770      	bx	lr

08007204 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007204:	b580      	push	{r7, lr}
 8007206:	b082      	sub	sp, #8
 8007208:	af00      	add	r7, sp, #0
 800720a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007212:	4618      	mov	r0, r3
 8007214:	f7ff fba9 	bl	800696a <USBH_LL_PortEnabled>
}
 8007218:	bf00      	nop
 800721a:	3708      	adds	r7, #8
 800721c:	46bd      	mov	sp, r7
 800721e:	bd80      	pop	{r7, pc}

08007220 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800722e:	4618      	mov	r0, r3
 8007230:	f7ff fba9 	bl	8006986 <USBH_LL_PortDisabled>
}
 8007234:	bf00      	nop
 8007236:	3708      	adds	r7, #8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b082      	sub	sp, #8
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800724a:	2b01      	cmp	r3, #1
 800724c:	d12a      	bne.n	80072a4 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800724e:	4a18      	ldr	r2, [pc, #96]	; (80072b0 <USBH_LL_Init+0x74>)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	4a15      	ldr	r2, [pc, #84]	; (80072b0 <USBH_LL_Init+0x74>)
 800725a:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800725e:	4b14      	ldr	r3, [pc, #80]	; (80072b0 <USBH_LL_Init+0x74>)
 8007260:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007264:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007266:	4b12      	ldr	r3, [pc, #72]	; (80072b0 <USBH_LL_Init+0x74>)
 8007268:	2208      	movs	r2, #8
 800726a:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800726c:	4b10      	ldr	r3, [pc, #64]	; (80072b0 <USBH_LL_Init+0x74>)
 800726e:	2201      	movs	r2, #1
 8007270:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007272:	4b0f      	ldr	r3, [pc, #60]	; (80072b0 <USBH_LL_Init+0x74>)
 8007274:	2200      	movs	r2, #0
 8007276:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007278:	4b0d      	ldr	r3, [pc, #52]	; (80072b0 <USBH_LL_Init+0x74>)
 800727a:	2202      	movs	r2, #2
 800727c:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800727e:	4b0c      	ldr	r3, [pc, #48]	; (80072b0 <USBH_LL_Init+0x74>)
 8007280:	2200      	movs	r2, #0
 8007282:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007284:	480a      	ldr	r0, [pc, #40]	; (80072b0 <USBH_LL_Init+0x74>)
 8007286:	f7fa fab0 	bl	80017ea <HAL_HCD_Init>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007290:	f7f9 fc5e 	bl	8000b50 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007294:	4806      	ldr	r0, [pc, #24]	; (80072b0 <USBH_LL_Init+0x74>)
 8007296:	f7fa fe86 	bl	8001fa6 <HAL_HCD_GetCurrentFrame>
 800729a:	4603      	mov	r3, r0
 800729c:	4619      	mov	r1, r3
 800729e:	6878      	ldr	r0, [r7, #4]
 80072a0:	f7ff fb2a 	bl	80068f8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80072a4:	2300      	movs	r3, #0
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3708      	adds	r7, #8
 80072aa:	46bd      	mov	sp, r7
 80072ac:	bd80      	pop	{r7, pc}
 80072ae:	bf00      	nop
 80072b0:	20000608 	.word	0x20000608

080072b4 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80072b4:	b580      	push	{r7, lr}
 80072b6:	b084      	sub	sp, #16
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072bc:	2300      	movs	r3, #0
 80072be:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072c0:	2300      	movs	r3, #0
 80072c2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80072ca:	4618      	mov	r0, r3
 80072cc:	f7fa fe03 	bl	8001ed6 <HAL_HCD_Start>
 80072d0:	4603      	mov	r3, r0
 80072d2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80072d4:	7bfb      	ldrb	r3, [r7, #15]
 80072d6:	4618      	mov	r0, r3
 80072d8:	f000 f90e 	bl	80074f8 <USBH_Get_USB_Status>
 80072dc:	4603      	mov	r3, r0
 80072de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80072e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80072e2:	4618      	mov	r0, r3
 80072e4:	3710      	adds	r7, #16
 80072e6:	46bd      	mov	sp, r7
 80072e8:	bd80      	pop	{r7, pc}

080072ea <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80072ea:	b580      	push	{r7, lr}
 80072ec:	b084      	sub	sp, #16
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80072f2:	2300      	movs	r3, #0
 80072f4:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80072f6:	2300      	movs	r3, #0
 80072f8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007300:	4618      	mov	r0, r3
 8007302:	f7fa fe0b 	bl	8001f1c <HAL_HCD_Stop>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800730a:	7bfb      	ldrb	r3, [r7, #15]
 800730c:	4618      	mov	r0, r3
 800730e:	f000 f8f3 	bl	80074f8 <USBH_Get_USB_Status>
 8007312:	4603      	mov	r3, r0
 8007314:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007316:	7bbb      	ldrb	r3, [r7, #14]
}
 8007318:	4618      	mov	r0, r3
 800731a:	3710      	adds	r7, #16
 800731c:	46bd      	mov	sp, r7
 800731e:	bd80      	pop	{r7, pc}

08007320 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	460b      	mov	r3, r1
 800732a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007332:	78fa      	ldrb	r2, [r7, #3]
 8007334:	4611      	mov	r1, r2
 8007336:	4618      	mov	r0, r3
 8007338:	f7fa fe21 	bl	8001f7e <HAL_HCD_HC_GetXferCount>
 800733c:	4603      	mov	r3, r0
}
 800733e:	4618      	mov	r0, r3
 8007340:	3708      	adds	r7, #8
 8007342:	46bd      	mov	sp, r7
 8007344:	bd80      	pop	{r7, pc}

08007346 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007346:	b590      	push	{r4, r7, lr}
 8007348:	b089      	sub	sp, #36	; 0x24
 800734a:	af04      	add	r7, sp, #16
 800734c:	6078      	str	r0, [r7, #4]
 800734e:	4608      	mov	r0, r1
 8007350:	4611      	mov	r1, r2
 8007352:	461a      	mov	r2, r3
 8007354:	4603      	mov	r3, r0
 8007356:	70fb      	strb	r3, [r7, #3]
 8007358:	460b      	mov	r3, r1
 800735a:	70bb      	strb	r3, [r7, #2]
 800735c:	4613      	mov	r3, r2
 800735e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007360:	2300      	movs	r3, #0
 8007362:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007364:	2300      	movs	r3, #0
 8007366:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800736e:	787c      	ldrb	r4, [r7, #1]
 8007370:	78ba      	ldrb	r2, [r7, #2]
 8007372:	78f9      	ldrb	r1, [r7, #3]
 8007374:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007376:	9302      	str	r3, [sp, #8]
 8007378:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 800737c:	9301      	str	r3, [sp, #4]
 800737e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007382:	9300      	str	r3, [sp, #0]
 8007384:	4623      	mov	r3, r4
 8007386:	f7fa fa92 	bl	80018ae <HAL_HCD_HC_Init>
 800738a:	4603      	mov	r3, r0
 800738c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800738e:	7bfb      	ldrb	r3, [r7, #15]
 8007390:	4618      	mov	r0, r3
 8007392:	f000 f8b1 	bl	80074f8 <USBH_Get_USB_Status>
 8007396:	4603      	mov	r3, r0
 8007398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800739a:	7bbb      	ldrb	r3, [r7, #14]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd90      	pop	{r4, r7, pc}

080073a4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
 80073ac:	460b      	mov	r3, r1
 80073ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073b0:	2300      	movs	r3, #0
 80073b2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	4611      	mov	r1, r2
 80073c2:	4618      	mov	r0, r3
 80073c4:	f7fa fb02 	bl	80019cc <HAL_HCD_HC_Halt>
 80073c8:	4603      	mov	r3, r0
 80073ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80073cc:	7bfb      	ldrb	r3, [r7, #15]
 80073ce:	4618      	mov	r0, r3
 80073d0:	f000 f892 	bl	80074f8 <USBH_Get_USB_Status>
 80073d4:	4603      	mov	r3, r0
 80073d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80073d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 80073e2:	b590      	push	{r4, r7, lr}
 80073e4:	b089      	sub	sp, #36	; 0x24
 80073e6:	af04      	add	r7, sp, #16
 80073e8:	6078      	str	r0, [r7, #4]
 80073ea:	4608      	mov	r0, r1
 80073ec:	4611      	mov	r1, r2
 80073ee:	461a      	mov	r2, r3
 80073f0:	4603      	mov	r3, r0
 80073f2:	70fb      	strb	r3, [r7, #3]
 80073f4:	460b      	mov	r3, r1
 80073f6:	70bb      	strb	r3, [r7, #2]
 80073f8:	4613      	mov	r3, r2
 80073fa:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80073fc:	2300      	movs	r3, #0
 80073fe:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007400:	2300      	movs	r3, #0
 8007402:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800740a:	787c      	ldrb	r4, [r7, #1]
 800740c:	78ba      	ldrb	r2, [r7, #2]
 800740e:	78f9      	ldrb	r1, [r7, #3]
 8007410:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007414:	9303      	str	r3, [sp, #12]
 8007416:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007418:	9302      	str	r3, [sp, #8]
 800741a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741c:	9301      	str	r3, [sp, #4]
 800741e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007422:	9300      	str	r3, [sp, #0]
 8007424:	4623      	mov	r3, r4
 8007426:	f7fa faf5 	bl	8001a14 <HAL_HCD_HC_SubmitRequest>
 800742a:	4603      	mov	r3, r0
 800742c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800742e:	7bfb      	ldrb	r3, [r7, #15]
 8007430:	4618      	mov	r0, r3
 8007432:	f000 f861 	bl	80074f8 <USBH_Get_USB_Status>
 8007436:	4603      	mov	r3, r0
 8007438:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800743a:	7bbb      	ldrb	r3, [r7, #14]
}
 800743c:	4618      	mov	r0, r3
 800743e:	3714      	adds	r7, #20
 8007440:	46bd      	mov	sp, r7
 8007442:	bd90      	pop	{r4, r7, pc}

08007444 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b082      	sub	sp, #8
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
 800744c:	460b      	mov	r3, r1
 800744e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007456:	78fa      	ldrb	r2, [r7, #3]
 8007458:	4611      	mov	r1, r2
 800745a:	4618      	mov	r0, r3
 800745c:	f7fa fd7b 	bl	8001f56 <HAL_HCD_HC_GetURBState>
 8007460:	4603      	mov	r3, r0
}
 8007462:	4618      	mov	r0, r3
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800747c:	2b01      	cmp	r3, #1
 800747e:	d103      	bne.n	8007488 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8007480:	78fb      	ldrb	r3, [r7, #3]
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f864 	bl	8007550 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8007488:	20c8      	movs	r0, #200	; 0xc8
 800748a:	f7f9 fedb 	bl	8001244 <HAL_Delay>
  return USBH_OK;
 800748e:	2300      	movs	r3, #0
}
 8007490:	4618      	mov	r0, r3
 8007492:	3708      	adds	r7, #8
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}

08007498 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	460b      	mov	r3, r1
 80074a2:	70fb      	strb	r3, [r7, #3]
 80074a4:	4613      	mov	r3, r2
 80074a6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80074ae:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80074b0:	78fb      	ldrb	r3, [r7, #3]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	212c      	movs	r1, #44	; 0x2c
 80074b6:	fb01 f303 	mul.w	r3, r1, r3
 80074ba:	4413      	add	r3, r2
 80074bc:	333b      	adds	r3, #59	; 0x3b
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d009      	beq.n	80074d8 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80074c4:	78fb      	ldrb	r3, [r7, #3]
 80074c6:	68fa      	ldr	r2, [r7, #12]
 80074c8:	212c      	movs	r1, #44	; 0x2c
 80074ca:	fb01 f303 	mul.w	r3, r1, r3
 80074ce:	4413      	add	r3, r2
 80074d0:	3354      	adds	r3, #84	; 0x54
 80074d2:	78ba      	ldrb	r2, [r7, #2]
 80074d4:	701a      	strb	r2, [r3, #0]
 80074d6:	e008      	b.n	80074ea <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 80074d8:	78fb      	ldrb	r3, [r7, #3]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	212c      	movs	r1, #44	; 0x2c
 80074de:	fb01 f303 	mul.w	r3, r1, r3
 80074e2:	4413      	add	r3, r2
 80074e4:	3355      	adds	r3, #85	; 0x55
 80074e6:	78ba      	ldrb	r2, [r7, #2]
 80074e8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 80074ea:	2300      	movs	r3, #0
}
 80074ec:	4618      	mov	r0, r3
 80074ee:	3714      	adds	r7, #20
 80074f0:	46bd      	mov	sp, r7
 80074f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074f6:	4770      	bx	lr

080074f8 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80074f8:	b480      	push	{r7}
 80074fa:	b085      	sub	sp, #20
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	4603      	mov	r3, r0
 8007500:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007502:	2300      	movs	r3, #0
 8007504:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007506:	79fb      	ldrb	r3, [r7, #7]
 8007508:	2b03      	cmp	r3, #3
 800750a:	d817      	bhi.n	800753c <USBH_Get_USB_Status+0x44>
 800750c:	a201      	add	r2, pc, #4	; (adr r2, 8007514 <USBH_Get_USB_Status+0x1c>)
 800750e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007512:	bf00      	nop
 8007514:	08007525 	.word	0x08007525
 8007518:	0800752b 	.word	0x0800752b
 800751c:	08007531 	.word	0x08007531
 8007520:	08007537 	.word	0x08007537
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8007524:	2300      	movs	r3, #0
 8007526:	73fb      	strb	r3, [r7, #15]
    break;
 8007528:	e00b      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800752a:	2302      	movs	r3, #2
 800752c:	73fb      	strb	r3, [r7, #15]
    break;
 800752e:	e008      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8007530:	2301      	movs	r3, #1
 8007532:	73fb      	strb	r3, [r7, #15]
    break;
 8007534:	e005      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8007536:	2302      	movs	r3, #2
 8007538:	73fb      	strb	r3, [r7, #15]
    break;
 800753a:	e002      	b.n	8007542 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800753c:	2302      	movs	r3, #2
 800753e:	73fb      	strb	r3, [r7, #15]
    break;
 8007540:	bf00      	nop
  }
  return usb_status;
 8007542:	7bfb      	ldrb	r3, [r7, #15]
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b084      	sub	sp, #16
 8007554:	af00      	add	r7, sp, #0
 8007556:	4603      	mov	r3, r0
 8007558:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800755a:	79fb      	ldrb	r3, [r7, #7]
 800755c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800755e:	79fb      	ldrb	r3, [r7, #7]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d102      	bne.n	800756a <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8007564:	2300      	movs	r3, #0
 8007566:	73fb      	strb	r3, [r7, #15]
 8007568:	e001      	b.n	800756e <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800756a:	2301      	movs	r3, #1
 800756c:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800756e:	7bfb      	ldrb	r3, [r7, #15]
 8007570:	461a      	mov	r2, r3
 8007572:	2101      	movs	r1, #1
 8007574:	4803      	ldr	r0, [pc, #12]	; (8007584 <MX_DriverVbusFS+0x34>)
 8007576:	f7fa f91f 	bl	80017b8 <HAL_GPIO_WritePin>
}
 800757a:	bf00      	nop
 800757c:	3710      	adds	r7, #16
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	40020800 	.word	0x40020800

08007588 <malloc>:
 8007588:	4b02      	ldr	r3, [pc, #8]	; (8007594 <malloc+0xc>)
 800758a:	4601      	mov	r1, r0
 800758c:	6818      	ldr	r0, [r3, #0]
 800758e:	f000 b82b 	b.w	80075e8 <_malloc_r>
 8007592:	bf00      	nop
 8007594:	20000084 	.word	0x20000084

08007598 <free>:
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <free+0xc>)
 800759a:	4601      	mov	r1, r0
 800759c:	6818      	ldr	r0, [r3, #0]
 800759e:	f000 ba53 	b.w	8007a48 <_free_r>
 80075a2:	bf00      	nop
 80075a4:	20000084 	.word	0x20000084

080075a8 <sbrk_aligned>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	4e0e      	ldr	r6, [pc, #56]	; (80075e4 <sbrk_aligned+0x3c>)
 80075ac:	460c      	mov	r4, r1
 80075ae:	6831      	ldr	r1, [r6, #0]
 80075b0:	4605      	mov	r5, r0
 80075b2:	b911      	cbnz	r1, 80075ba <sbrk_aligned+0x12>
 80075b4:	f000 f9f8 	bl	80079a8 <_sbrk_r>
 80075b8:	6030      	str	r0, [r6, #0]
 80075ba:	4621      	mov	r1, r4
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 f9f3 	bl	80079a8 <_sbrk_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d00a      	beq.n	80075dc <sbrk_aligned+0x34>
 80075c6:	1cc4      	adds	r4, r0, #3
 80075c8:	f024 0403 	bic.w	r4, r4, #3
 80075cc:	42a0      	cmp	r0, r4
 80075ce:	d007      	beq.n	80075e0 <sbrk_aligned+0x38>
 80075d0:	1a21      	subs	r1, r4, r0
 80075d2:	4628      	mov	r0, r5
 80075d4:	f000 f9e8 	bl	80079a8 <_sbrk_r>
 80075d8:	3001      	adds	r0, #1
 80075da:	d101      	bne.n	80075e0 <sbrk_aligned+0x38>
 80075dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80075e0:	4620      	mov	r0, r4
 80075e2:	bd70      	pop	{r4, r5, r6, pc}
 80075e4:	20000910 	.word	0x20000910

080075e8 <_malloc_r>:
 80075e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075ec:	1ccd      	adds	r5, r1, #3
 80075ee:	f025 0503 	bic.w	r5, r5, #3
 80075f2:	3508      	adds	r5, #8
 80075f4:	2d0c      	cmp	r5, #12
 80075f6:	bf38      	it	cc
 80075f8:	250c      	movcc	r5, #12
 80075fa:	2d00      	cmp	r5, #0
 80075fc:	4607      	mov	r7, r0
 80075fe:	db01      	blt.n	8007604 <_malloc_r+0x1c>
 8007600:	42a9      	cmp	r1, r5
 8007602:	d905      	bls.n	8007610 <_malloc_r+0x28>
 8007604:	230c      	movs	r3, #12
 8007606:	603b      	str	r3, [r7, #0]
 8007608:	2600      	movs	r6, #0
 800760a:	4630      	mov	r0, r6
 800760c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007610:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80076e4 <_malloc_r+0xfc>
 8007614:	f000 f868 	bl	80076e8 <__malloc_lock>
 8007618:	f8d8 3000 	ldr.w	r3, [r8]
 800761c:	461c      	mov	r4, r3
 800761e:	bb5c      	cbnz	r4, 8007678 <_malloc_r+0x90>
 8007620:	4629      	mov	r1, r5
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ffc0 	bl	80075a8 <sbrk_aligned>
 8007628:	1c43      	adds	r3, r0, #1
 800762a:	4604      	mov	r4, r0
 800762c:	d155      	bne.n	80076da <_malloc_r+0xf2>
 800762e:	f8d8 4000 	ldr.w	r4, [r8]
 8007632:	4626      	mov	r6, r4
 8007634:	2e00      	cmp	r6, #0
 8007636:	d145      	bne.n	80076c4 <_malloc_r+0xdc>
 8007638:	2c00      	cmp	r4, #0
 800763a:	d048      	beq.n	80076ce <_malloc_r+0xe6>
 800763c:	6823      	ldr	r3, [r4, #0]
 800763e:	4631      	mov	r1, r6
 8007640:	4638      	mov	r0, r7
 8007642:	eb04 0903 	add.w	r9, r4, r3
 8007646:	f000 f9af 	bl	80079a8 <_sbrk_r>
 800764a:	4581      	cmp	r9, r0
 800764c:	d13f      	bne.n	80076ce <_malloc_r+0xe6>
 800764e:	6821      	ldr	r1, [r4, #0]
 8007650:	1a6d      	subs	r5, r5, r1
 8007652:	4629      	mov	r1, r5
 8007654:	4638      	mov	r0, r7
 8007656:	f7ff ffa7 	bl	80075a8 <sbrk_aligned>
 800765a:	3001      	adds	r0, #1
 800765c:	d037      	beq.n	80076ce <_malloc_r+0xe6>
 800765e:	6823      	ldr	r3, [r4, #0]
 8007660:	442b      	add	r3, r5
 8007662:	6023      	str	r3, [r4, #0]
 8007664:	f8d8 3000 	ldr.w	r3, [r8]
 8007668:	2b00      	cmp	r3, #0
 800766a:	d038      	beq.n	80076de <_malloc_r+0xf6>
 800766c:	685a      	ldr	r2, [r3, #4]
 800766e:	42a2      	cmp	r2, r4
 8007670:	d12b      	bne.n	80076ca <_malloc_r+0xe2>
 8007672:	2200      	movs	r2, #0
 8007674:	605a      	str	r2, [r3, #4]
 8007676:	e00f      	b.n	8007698 <_malloc_r+0xb0>
 8007678:	6822      	ldr	r2, [r4, #0]
 800767a:	1b52      	subs	r2, r2, r5
 800767c:	d41f      	bmi.n	80076be <_malloc_r+0xd6>
 800767e:	2a0b      	cmp	r2, #11
 8007680:	d917      	bls.n	80076b2 <_malloc_r+0xca>
 8007682:	1961      	adds	r1, r4, r5
 8007684:	42a3      	cmp	r3, r4
 8007686:	6025      	str	r5, [r4, #0]
 8007688:	bf18      	it	ne
 800768a:	6059      	strne	r1, [r3, #4]
 800768c:	6863      	ldr	r3, [r4, #4]
 800768e:	bf08      	it	eq
 8007690:	f8c8 1000 	streq.w	r1, [r8]
 8007694:	5162      	str	r2, [r4, r5]
 8007696:	604b      	str	r3, [r1, #4]
 8007698:	4638      	mov	r0, r7
 800769a:	f104 060b 	add.w	r6, r4, #11
 800769e:	f000 f829 	bl	80076f4 <__malloc_unlock>
 80076a2:	f026 0607 	bic.w	r6, r6, #7
 80076a6:	1d23      	adds	r3, r4, #4
 80076a8:	1af2      	subs	r2, r6, r3
 80076aa:	d0ae      	beq.n	800760a <_malloc_r+0x22>
 80076ac:	1b9b      	subs	r3, r3, r6
 80076ae:	50a3      	str	r3, [r4, r2]
 80076b0:	e7ab      	b.n	800760a <_malloc_r+0x22>
 80076b2:	42a3      	cmp	r3, r4
 80076b4:	6862      	ldr	r2, [r4, #4]
 80076b6:	d1dd      	bne.n	8007674 <_malloc_r+0x8c>
 80076b8:	f8c8 2000 	str.w	r2, [r8]
 80076bc:	e7ec      	b.n	8007698 <_malloc_r+0xb0>
 80076be:	4623      	mov	r3, r4
 80076c0:	6864      	ldr	r4, [r4, #4]
 80076c2:	e7ac      	b.n	800761e <_malloc_r+0x36>
 80076c4:	4634      	mov	r4, r6
 80076c6:	6876      	ldr	r6, [r6, #4]
 80076c8:	e7b4      	b.n	8007634 <_malloc_r+0x4c>
 80076ca:	4613      	mov	r3, r2
 80076cc:	e7cc      	b.n	8007668 <_malloc_r+0x80>
 80076ce:	230c      	movs	r3, #12
 80076d0:	603b      	str	r3, [r7, #0]
 80076d2:	4638      	mov	r0, r7
 80076d4:	f000 f80e 	bl	80076f4 <__malloc_unlock>
 80076d8:	e797      	b.n	800760a <_malloc_r+0x22>
 80076da:	6025      	str	r5, [r4, #0]
 80076dc:	e7dc      	b.n	8007698 <_malloc_r+0xb0>
 80076de:	605b      	str	r3, [r3, #4]
 80076e0:	deff      	udf	#255	; 0xff
 80076e2:	bf00      	nop
 80076e4:	2000090c 	.word	0x2000090c

080076e8 <__malloc_lock>:
 80076e8:	4801      	ldr	r0, [pc, #4]	; (80076f0 <__malloc_lock+0x8>)
 80076ea:	f000 b9aa 	b.w	8007a42 <__retarget_lock_acquire_recursive>
 80076ee:	bf00      	nop
 80076f0:	20000a54 	.word	0x20000a54

080076f4 <__malloc_unlock>:
 80076f4:	4801      	ldr	r0, [pc, #4]	; (80076fc <__malloc_unlock+0x8>)
 80076f6:	f000 b9a5 	b.w	8007a44 <__retarget_lock_release_recursive>
 80076fa:	bf00      	nop
 80076fc:	20000a54 	.word	0x20000a54

08007700 <std>:
 8007700:	2300      	movs	r3, #0
 8007702:	b510      	push	{r4, lr}
 8007704:	4604      	mov	r4, r0
 8007706:	e9c0 3300 	strd	r3, r3, [r0]
 800770a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800770e:	6083      	str	r3, [r0, #8]
 8007710:	8181      	strh	r1, [r0, #12]
 8007712:	6643      	str	r3, [r0, #100]	; 0x64
 8007714:	81c2      	strh	r2, [r0, #14]
 8007716:	6183      	str	r3, [r0, #24]
 8007718:	4619      	mov	r1, r3
 800771a:	2208      	movs	r2, #8
 800771c:	305c      	adds	r0, #92	; 0x5c
 800771e:	f000 f906 	bl	800792e <memset>
 8007722:	4b0d      	ldr	r3, [pc, #52]	; (8007758 <std+0x58>)
 8007724:	6263      	str	r3, [r4, #36]	; 0x24
 8007726:	4b0d      	ldr	r3, [pc, #52]	; (800775c <std+0x5c>)
 8007728:	62a3      	str	r3, [r4, #40]	; 0x28
 800772a:	4b0d      	ldr	r3, [pc, #52]	; (8007760 <std+0x60>)
 800772c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800772e:	4b0d      	ldr	r3, [pc, #52]	; (8007764 <std+0x64>)
 8007730:	6323      	str	r3, [r4, #48]	; 0x30
 8007732:	4b0d      	ldr	r3, [pc, #52]	; (8007768 <std+0x68>)
 8007734:	6224      	str	r4, [r4, #32]
 8007736:	429c      	cmp	r4, r3
 8007738:	d006      	beq.n	8007748 <std+0x48>
 800773a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800773e:	4294      	cmp	r4, r2
 8007740:	d002      	beq.n	8007748 <std+0x48>
 8007742:	33d0      	adds	r3, #208	; 0xd0
 8007744:	429c      	cmp	r4, r3
 8007746:	d105      	bne.n	8007754 <std+0x54>
 8007748:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800774c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007750:	f000 b976 	b.w	8007a40 <__retarget_lock_init_recursive>
 8007754:	bd10      	pop	{r4, pc}
 8007756:	bf00      	nop
 8007758:	080078a9 	.word	0x080078a9
 800775c:	080078cb 	.word	0x080078cb
 8007760:	08007903 	.word	0x08007903
 8007764:	08007927 	.word	0x08007927
 8007768:	20000914 	.word	0x20000914

0800776c <stdio_exit_handler>:
 800776c:	4a02      	ldr	r2, [pc, #8]	; (8007778 <stdio_exit_handler+0xc>)
 800776e:	4903      	ldr	r1, [pc, #12]	; (800777c <stdio_exit_handler+0x10>)
 8007770:	4803      	ldr	r0, [pc, #12]	; (8007780 <stdio_exit_handler+0x14>)
 8007772:	f000 b869 	b.w	8007848 <_fwalk_sglue>
 8007776:	bf00      	nop
 8007778:	2000002c 	.word	0x2000002c
 800777c:	08008195 	.word	0x08008195
 8007780:	20000038 	.word	0x20000038

08007784 <cleanup_stdio>:
 8007784:	6841      	ldr	r1, [r0, #4]
 8007786:	4b0c      	ldr	r3, [pc, #48]	; (80077b8 <cleanup_stdio+0x34>)
 8007788:	4299      	cmp	r1, r3
 800778a:	b510      	push	{r4, lr}
 800778c:	4604      	mov	r4, r0
 800778e:	d001      	beq.n	8007794 <cleanup_stdio+0x10>
 8007790:	f000 fd00 	bl	8008194 <_fflush_r>
 8007794:	68a1      	ldr	r1, [r4, #8]
 8007796:	4b09      	ldr	r3, [pc, #36]	; (80077bc <cleanup_stdio+0x38>)
 8007798:	4299      	cmp	r1, r3
 800779a:	d002      	beq.n	80077a2 <cleanup_stdio+0x1e>
 800779c:	4620      	mov	r0, r4
 800779e:	f000 fcf9 	bl	8008194 <_fflush_r>
 80077a2:	68e1      	ldr	r1, [r4, #12]
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <cleanup_stdio+0x3c>)
 80077a6:	4299      	cmp	r1, r3
 80077a8:	d004      	beq.n	80077b4 <cleanup_stdio+0x30>
 80077aa:	4620      	mov	r0, r4
 80077ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b0:	f000 bcf0 	b.w	8008194 <_fflush_r>
 80077b4:	bd10      	pop	{r4, pc}
 80077b6:	bf00      	nop
 80077b8:	20000914 	.word	0x20000914
 80077bc:	2000097c 	.word	0x2000097c
 80077c0:	200009e4 	.word	0x200009e4

080077c4 <global_stdio_init.part.0>:
 80077c4:	b510      	push	{r4, lr}
 80077c6:	4b0b      	ldr	r3, [pc, #44]	; (80077f4 <global_stdio_init.part.0+0x30>)
 80077c8:	4c0b      	ldr	r4, [pc, #44]	; (80077f8 <global_stdio_init.part.0+0x34>)
 80077ca:	4a0c      	ldr	r2, [pc, #48]	; (80077fc <global_stdio_init.part.0+0x38>)
 80077cc:	601a      	str	r2, [r3, #0]
 80077ce:	4620      	mov	r0, r4
 80077d0:	2200      	movs	r2, #0
 80077d2:	2104      	movs	r1, #4
 80077d4:	f7ff ff94 	bl	8007700 <std>
 80077d8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80077dc:	2201      	movs	r2, #1
 80077de:	2109      	movs	r1, #9
 80077e0:	f7ff ff8e 	bl	8007700 <std>
 80077e4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80077e8:	2202      	movs	r2, #2
 80077ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077ee:	2112      	movs	r1, #18
 80077f0:	f7ff bf86 	b.w	8007700 <std>
 80077f4:	20000a4c 	.word	0x20000a4c
 80077f8:	20000914 	.word	0x20000914
 80077fc:	0800776d 	.word	0x0800776d

08007800 <__sfp_lock_acquire>:
 8007800:	4801      	ldr	r0, [pc, #4]	; (8007808 <__sfp_lock_acquire+0x8>)
 8007802:	f000 b91e 	b.w	8007a42 <__retarget_lock_acquire_recursive>
 8007806:	bf00      	nop
 8007808:	20000a55 	.word	0x20000a55

0800780c <__sfp_lock_release>:
 800780c:	4801      	ldr	r0, [pc, #4]	; (8007814 <__sfp_lock_release+0x8>)
 800780e:	f000 b919 	b.w	8007a44 <__retarget_lock_release_recursive>
 8007812:	bf00      	nop
 8007814:	20000a55 	.word	0x20000a55

08007818 <__sinit>:
 8007818:	b510      	push	{r4, lr}
 800781a:	4604      	mov	r4, r0
 800781c:	f7ff fff0 	bl	8007800 <__sfp_lock_acquire>
 8007820:	6a23      	ldr	r3, [r4, #32]
 8007822:	b11b      	cbz	r3, 800782c <__sinit+0x14>
 8007824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007828:	f7ff bff0 	b.w	800780c <__sfp_lock_release>
 800782c:	4b04      	ldr	r3, [pc, #16]	; (8007840 <__sinit+0x28>)
 800782e:	6223      	str	r3, [r4, #32]
 8007830:	4b04      	ldr	r3, [pc, #16]	; (8007844 <__sinit+0x2c>)
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1f5      	bne.n	8007824 <__sinit+0xc>
 8007838:	f7ff ffc4 	bl	80077c4 <global_stdio_init.part.0>
 800783c:	e7f2      	b.n	8007824 <__sinit+0xc>
 800783e:	bf00      	nop
 8007840:	08007785 	.word	0x08007785
 8007844:	20000a4c 	.word	0x20000a4c

08007848 <_fwalk_sglue>:
 8007848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800784c:	4607      	mov	r7, r0
 800784e:	4688      	mov	r8, r1
 8007850:	4614      	mov	r4, r2
 8007852:	2600      	movs	r6, #0
 8007854:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007858:	f1b9 0901 	subs.w	r9, r9, #1
 800785c:	d505      	bpl.n	800786a <_fwalk_sglue+0x22>
 800785e:	6824      	ldr	r4, [r4, #0]
 8007860:	2c00      	cmp	r4, #0
 8007862:	d1f7      	bne.n	8007854 <_fwalk_sglue+0xc>
 8007864:	4630      	mov	r0, r6
 8007866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800786a:	89ab      	ldrh	r3, [r5, #12]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d907      	bls.n	8007880 <_fwalk_sglue+0x38>
 8007870:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007874:	3301      	adds	r3, #1
 8007876:	d003      	beq.n	8007880 <_fwalk_sglue+0x38>
 8007878:	4629      	mov	r1, r5
 800787a:	4638      	mov	r0, r7
 800787c:	47c0      	blx	r8
 800787e:	4306      	orrs	r6, r0
 8007880:	3568      	adds	r5, #104	; 0x68
 8007882:	e7e9      	b.n	8007858 <_fwalk_sglue+0x10>

08007884 <iprintf>:
 8007884:	b40f      	push	{r0, r1, r2, r3}
 8007886:	b507      	push	{r0, r1, r2, lr}
 8007888:	4906      	ldr	r1, [pc, #24]	; (80078a4 <iprintf+0x20>)
 800788a:	ab04      	add	r3, sp, #16
 800788c:	6808      	ldr	r0, [r1, #0]
 800788e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007892:	6881      	ldr	r1, [r0, #8]
 8007894:	9301      	str	r3, [sp, #4]
 8007896:	f000 f94d 	bl	8007b34 <_vfiprintf_r>
 800789a:	b003      	add	sp, #12
 800789c:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a0:	b004      	add	sp, #16
 80078a2:	4770      	bx	lr
 80078a4:	20000084 	.word	0x20000084

080078a8 <__sread>:
 80078a8:	b510      	push	{r4, lr}
 80078aa:	460c      	mov	r4, r1
 80078ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078b0:	f000 f868 	bl	8007984 <_read_r>
 80078b4:	2800      	cmp	r0, #0
 80078b6:	bfab      	itete	ge
 80078b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078ba:	89a3      	ldrhlt	r3, [r4, #12]
 80078bc:	181b      	addge	r3, r3, r0
 80078be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078c2:	bfac      	ite	ge
 80078c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80078c6:	81a3      	strhlt	r3, [r4, #12]
 80078c8:	bd10      	pop	{r4, pc}

080078ca <__swrite>:
 80078ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ce:	461f      	mov	r7, r3
 80078d0:	898b      	ldrh	r3, [r1, #12]
 80078d2:	05db      	lsls	r3, r3, #23
 80078d4:	4605      	mov	r5, r0
 80078d6:	460c      	mov	r4, r1
 80078d8:	4616      	mov	r6, r2
 80078da:	d505      	bpl.n	80078e8 <__swrite+0x1e>
 80078dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078e0:	2302      	movs	r3, #2
 80078e2:	2200      	movs	r2, #0
 80078e4:	f000 f83c 	bl	8007960 <_lseek_r>
 80078e8:	89a3      	ldrh	r3, [r4, #12]
 80078ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80078ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80078f2:	81a3      	strh	r3, [r4, #12]
 80078f4:	4632      	mov	r2, r6
 80078f6:	463b      	mov	r3, r7
 80078f8:	4628      	mov	r0, r5
 80078fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80078fe:	f000 b863 	b.w	80079c8 <_write_r>

08007902 <__sseek>:
 8007902:	b510      	push	{r4, lr}
 8007904:	460c      	mov	r4, r1
 8007906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800790a:	f000 f829 	bl	8007960 <_lseek_r>
 800790e:	1c43      	adds	r3, r0, #1
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	bf15      	itete	ne
 8007914:	6560      	strne	r0, [r4, #84]	; 0x54
 8007916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800791a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800791e:	81a3      	strheq	r3, [r4, #12]
 8007920:	bf18      	it	ne
 8007922:	81a3      	strhne	r3, [r4, #12]
 8007924:	bd10      	pop	{r4, pc}

08007926 <__sclose>:
 8007926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800792a:	f000 b809 	b.w	8007940 <_close_r>

0800792e <memset>:
 800792e:	4402      	add	r2, r0
 8007930:	4603      	mov	r3, r0
 8007932:	4293      	cmp	r3, r2
 8007934:	d100      	bne.n	8007938 <memset+0xa>
 8007936:	4770      	bx	lr
 8007938:	f803 1b01 	strb.w	r1, [r3], #1
 800793c:	e7f9      	b.n	8007932 <memset+0x4>
	...

08007940 <_close_r>:
 8007940:	b538      	push	{r3, r4, r5, lr}
 8007942:	4d06      	ldr	r5, [pc, #24]	; (800795c <_close_r+0x1c>)
 8007944:	2300      	movs	r3, #0
 8007946:	4604      	mov	r4, r0
 8007948:	4608      	mov	r0, r1
 800794a:	602b      	str	r3, [r5, #0]
 800794c:	f7f9 fb61 	bl	8001012 <_close>
 8007950:	1c43      	adds	r3, r0, #1
 8007952:	d102      	bne.n	800795a <_close_r+0x1a>
 8007954:	682b      	ldr	r3, [r5, #0]
 8007956:	b103      	cbz	r3, 800795a <_close_r+0x1a>
 8007958:	6023      	str	r3, [r4, #0]
 800795a:	bd38      	pop	{r3, r4, r5, pc}
 800795c:	20000a50 	.word	0x20000a50

08007960 <_lseek_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d07      	ldr	r5, [pc, #28]	; (8007980 <_lseek_r+0x20>)
 8007964:	4604      	mov	r4, r0
 8007966:	4608      	mov	r0, r1
 8007968:	4611      	mov	r1, r2
 800796a:	2200      	movs	r2, #0
 800796c:	602a      	str	r2, [r5, #0]
 800796e:	461a      	mov	r2, r3
 8007970:	f7f9 fb76 	bl	8001060 <_lseek>
 8007974:	1c43      	adds	r3, r0, #1
 8007976:	d102      	bne.n	800797e <_lseek_r+0x1e>
 8007978:	682b      	ldr	r3, [r5, #0]
 800797a:	b103      	cbz	r3, 800797e <_lseek_r+0x1e>
 800797c:	6023      	str	r3, [r4, #0]
 800797e:	bd38      	pop	{r3, r4, r5, pc}
 8007980:	20000a50 	.word	0x20000a50

08007984 <_read_r>:
 8007984:	b538      	push	{r3, r4, r5, lr}
 8007986:	4d07      	ldr	r5, [pc, #28]	; (80079a4 <_read_r+0x20>)
 8007988:	4604      	mov	r4, r0
 800798a:	4608      	mov	r0, r1
 800798c:	4611      	mov	r1, r2
 800798e:	2200      	movs	r2, #0
 8007990:	602a      	str	r2, [r5, #0]
 8007992:	461a      	mov	r2, r3
 8007994:	f7f9 fb04 	bl	8000fa0 <_read>
 8007998:	1c43      	adds	r3, r0, #1
 800799a:	d102      	bne.n	80079a2 <_read_r+0x1e>
 800799c:	682b      	ldr	r3, [r5, #0]
 800799e:	b103      	cbz	r3, 80079a2 <_read_r+0x1e>
 80079a0:	6023      	str	r3, [r4, #0]
 80079a2:	bd38      	pop	{r3, r4, r5, pc}
 80079a4:	20000a50 	.word	0x20000a50

080079a8 <_sbrk_r>:
 80079a8:	b538      	push	{r3, r4, r5, lr}
 80079aa:	4d06      	ldr	r5, [pc, #24]	; (80079c4 <_sbrk_r+0x1c>)
 80079ac:	2300      	movs	r3, #0
 80079ae:	4604      	mov	r4, r0
 80079b0:	4608      	mov	r0, r1
 80079b2:	602b      	str	r3, [r5, #0]
 80079b4:	f7f9 fb62 	bl	800107c <_sbrk>
 80079b8:	1c43      	adds	r3, r0, #1
 80079ba:	d102      	bne.n	80079c2 <_sbrk_r+0x1a>
 80079bc:	682b      	ldr	r3, [r5, #0]
 80079be:	b103      	cbz	r3, 80079c2 <_sbrk_r+0x1a>
 80079c0:	6023      	str	r3, [r4, #0]
 80079c2:	bd38      	pop	{r3, r4, r5, pc}
 80079c4:	20000a50 	.word	0x20000a50

080079c8 <_write_r>:
 80079c8:	b538      	push	{r3, r4, r5, lr}
 80079ca:	4d07      	ldr	r5, [pc, #28]	; (80079e8 <_write_r+0x20>)
 80079cc:	4604      	mov	r4, r0
 80079ce:	4608      	mov	r0, r1
 80079d0:	4611      	mov	r1, r2
 80079d2:	2200      	movs	r2, #0
 80079d4:	602a      	str	r2, [r5, #0]
 80079d6:	461a      	mov	r2, r3
 80079d8:	f7f9 faff 	bl	8000fda <_write>
 80079dc:	1c43      	adds	r3, r0, #1
 80079de:	d102      	bne.n	80079e6 <_write_r+0x1e>
 80079e0:	682b      	ldr	r3, [r5, #0]
 80079e2:	b103      	cbz	r3, 80079e6 <_write_r+0x1e>
 80079e4:	6023      	str	r3, [r4, #0]
 80079e6:	bd38      	pop	{r3, r4, r5, pc}
 80079e8:	20000a50 	.word	0x20000a50

080079ec <__errno>:
 80079ec:	4b01      	ldr	r3, [pc, #4]	; (80079f4 <__errno+0x8>)
 80079ee:	6818      	ldr	r0, [r3, #0]
 80079f0:	4770      	bx	lr
 80079f2:	bf00      	nop
 80079f4:	20000084 	.word	0x20000084

080079f8 <__libc_init_array>:
 80079f8:	b570      	push	{r4, r5, r6, lr}
 80079fa:	4d0d      	ldr	r5, [pc, #52]	; (8007a30 <__libc_init_array+0x38>)
 80079fc:	4c0d      	ldr	r4, [pc, #52]	; (8007a34 <__libc_init_array+0x3c>)
 80079fe:	1b64      	subs	r4, r4, r5
 8007a00:	10a4      	asrs	r4, r4, #2
 8007a02:	2600      	movs	r6, #0
 8007a04:	42a6      	cmp	r6, r4
 8007a06:	d109      	bne.n	8007a1c <__libc_init_array+0x24>
 8007a08:	4d0b      	ldr	r5, [pc, #44]	; (8007a38 <__libc_init_array+0x40>)
 8007a0a:	4c0c      	ldr	r4, [pc, #48]	; (8007a3c <__libc_init_array+0x44>)
 8007a0c:	f000 fd04 	bl	8008418 <_init>
 8007a10:	1b64      	subs	r4, r4, r5
 8007a12:	10a4      	asrs	r4, r4, #2
 8007a14:	2600      	movs	r6, #0
 8007a16:	42a6      	cmp	r6, r4
 8007a18:	d105      	bne.n	8007a26 <__libc_init_array+0x2e>
 8007a1a:	bd70      	pop	{r4, r5, r6, pc}
 8007a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a20:	4798      	blx	r3
 8007a22:	3601      	adds	r6, #1
 8007a24:	e7ee      	b.n	8007a04 <__libc_init_array+0xc>
 8007a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a2a:	4798      	blx	r3
 8007a2c:	3601      	adds	r6, #1
 8007a2e:	e7f2      	b.n	8007a16 <__libc_init_array+0x1e>
 8007a30:	08008494 	.word	0x08008494
 8007a34:	08008494 	.word	0x08008494
 8007a38:	08008494 	.word	0x08008494
 8007a3c:	08008498 	.word	0x08008498

08007a40 <__retarget_lock_init_recursive>:
 8007a40:	4770      	bx	lr

08007a42 <__retarget_lock_acquire_recursive>:
 8007a42:	4770      	bx	lr

08007a44 <__retarget_lock_release_recursive>:
 8007a44:	4770      	bx	lr
	...

08007a48 <_free_r>:
 8007a48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a4a:	2900      	cmp	r1, #0
 8007a4c:	d044      	beq.n	8007ad8 <_free_r+0x90>
 8007a4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a52:	9001      	str	r0, [sp, #4]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f1a1 0404 	sub.w	r4, r1, #4
 8007a5a:	bfb8      	it	lt
 8007a5c:	18e4      	addlt	r4, r4, r3
 8007a5e:	f7ff fe43 	bl	80076e8 <__malloc_lock>
 8007a62:	4a1e      	ldr	r2, [pc, #120]	; (8007adc <_free_r+0x94>)
 8007a64:	9801      	ldr	r0, [sp, #4]
 8007a66:	6813      	ldr	r3, [r2, #0]
 8007a68:	b933      	cbnz	r3, 8007a78 <_free_r+0x30>
 8007a6a:	6063      	str	r3, [r4, #4]
 8007a6c:	6014      	str	r4, [r2, #0]
 8007a6e:	b003      	add	sp, #12
 8007a70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007a74:	f7ff be3e 	b.w	80076f4 <__malloc_unlock>
 8007a78:	42a3      	cmp	r3, r4
 8007a7a:	d908      	bls.n	8007a8e <_free_r+0x46>
 8007a7c:	6825      	ldr	r5, [r4, #0]
 8007a7e:	1961      	adds	r1, r4, r5
 8007a80:	428b      	cmp	r3, r1
 8007a82:	bf01      	itttt	eq
 8007a84:	6819      	ldreq	r1, [r3, #0]
 8007a86:	685b      	ldreq	r3, [r3, #4]
 8007a88:	1949      	addeq	r1, r1, r5
 8007a8a:	6021      	streq	r1, [r4, #0]
 8007a8c:	e7ed      	b.n	8007a6a <_free_r+0x22>
 8007a8e:	461a      	mov	r2, r3
 8007a90:	685b      	ldr	r3, [r3, #4]
 8007a92:	b10b      	cbz	r3, 8007a98 <_free_r+0x50>
 8007a94:	42a3      	cmp	r3, r4
 8007a96:	d9fa      	bls.n	8007a8e <_free_r+0x46>
 8007a98:	6811      	ldr	r1, [r2, #0]
 8007a9a:	1855      	adds	r5, r2, r1
 8007a9c:	42a5      	cmp	r5, r4
 8007a9e:	d10b      	bne.n	8007ab8 <_free_r+0x70>
 8007aa0:	6824      	ldr	r4, [r4, #0]
 8007aa2:	4421      	add	r1, r4
 8007aa4:	1854      	adds	r4, r2, r1
 8007aa6:	42a3      	cmp	r3, r4
 8007aa8:	6011      	str	r1, [r2, #0]
 8007aaa:	d1e0      	bne.n	8007a6e <_free_r+0x26>
 8007aac:	681c      	ldr	r4, [r3, #0]
 8007aae:	685b      	ldr	r3, [r3, #4]
 8007ab0:	6053      	str	r3, [r2, #4]
 8007ab2:	440c      	add	r4, r1
 8007ab4:	6014      	str	r4, [r2, #0]
 8007ab6:	e7da      	b.n	8007a6e <_free_r+0x26>
 8007ab8:	d902      	bls.n	8007ac0 <_free_r+0x78>
 8007aba:	230c      	movs	r3, #12
 8007abc:	6003      	str	r3, [r0, #0]
 8007abe:	e7d6      	b.n	8007a6e <_free_r+0x26>
 8007ac0:	6825      	ldr	r5, [r4, #0]
 8007ac2:	1961      	adds	r1, r4, r5
 8007ac4:	428b      	cmp	r3, r1
 8007ac6:	bf04      	itt	eq
 8007ac8:	6819      	ldreq	r1, [r3, #0]
 8007aca:	685b      	ldreq	r3, [r3, #4]
 8007acc:	6063      	str	r3, [r4, #4]
 8007ace:	bf04      	itt	eq
 8007ad0:	1949      	addeq	r1, r1, r5
 8007ad2:	6021      	streq	r1, [r4, #0]
 8007ad4:	6054      	str	r4, [r2, #4]
 8007ad6:	e7ca      	b.n	8007a6e <_free_r+0x26>
 8007ad8:	b003      	add	sp, #12
 8007ada:	bd30      	pop	{r4, r5, pc}
 8007adc:	2000090c 	.word	0x2000090c

08007ae0 <__sfputc_r>:
 8007ae0:	6893      	ldr	r3, [r2, #8]
 8007ae2:	3b01      	subs	r3, #1
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	b410      	push	{r4}
 8007ae8:	6093      	str	r3, [r2, #8]
 8007aea:	da08      	bge.n	8007afe <__sfputc_r+0x1e>
 8007aec:	6994      	ldr	r4, [r2, #24]
 8007aee:	42a3      	cmp	r3, r4
 8007af0:	db01      	blt.n	8007af6 <__sfputc_r+0x16>
 8007af2:	290a      	cmp	r1, #10
 8007af4:	d103      	bne.n	8007afe <__sfputc_r+0x1e>
 8007af6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007afa:	f000 bb73 	b.w	80081e4 <__swbuf_r>
 8007afe:	6813      	ldr	r3, [r2, #0]
 8007b00:	1c58      	adds	r0, r3, #1
 8007b02:	6010      	str	r0, [r2, #0]
 8007b04:	7019      	strb	r1, [r3, #0]
 8007b06:	4608      	mov	r0, r1
 8007b08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b0c:	4770      	bx	lr

08007b0e <__sfputs_r>:
 8007b0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b10:	4606      	mov	r6, r0
 8007b12:	460f      	mov	r7, r1
 8007b14:	4614      	mov	r4, r2
 8007b16:	18d5      	adds	r5, r2, r3
 8007b18:	42ac      	cmp	r4, r5
 8007b1a:	d101      	bne.n	8007b20 <__sfputs_r+0x12>
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	e007      	b.n	8007b30 <__sfputs_r+0x22>
 8007b20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b24:	463a      	mov	r2, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	f7ff ffda 	bl	8007ae0 <__sfputc_r>
 8007b2c:	1c43      	adds	r3, r0, #1
 8007b2e:	d1f3      	bne.n	8007b18 <__sfputs_r+0xa>
 8007b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007b34 <_vfiprintf_r>:
 8007b34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b38:	460d      	mov	r5, r1
 8007b3a:	b09d      	sub	sp, #116	; 0x74
 8007b3c:	4614      	mov	r4, r2
 8007b3e:	4698      	mov	r8, r3
 8007b40:	4606      	mov	r6, r0
 8007b42:	b118      	cbz	r0, 8007b4c <_vfiprintf_r+0x18>
 8007b44:	6a03      	ldr	r3, [r0, #32]
 8007b46:	b90b      	cbnz	r3, 8007b4c <_vfiprintf_r+0x18>
 8007b48:	f7ff fe66 	bl	8007818 <__sinit>
 8007b4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b4e:	07d9      	lsls	r1, r3, #31
 8007b50:	d405      	bmi.n	8007b5e <_vfiprintf_r+0x2a>
 8007b52:	89ab      	ldrh	r3, [r5, #12]
 8007b54:	059a      	lsls	r2, r3, #22
 8007b56:	d402      	bmi.n	8007b5e <_vfiprintf_r+0x2a>
 8007b58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b5a:	f7ff ff72 	bl	8007a42 <__retarget_lock_acquire_recursive>
 8007b5e:	89ab      	ldrh	r3, [r5, #12]
 8007b60:	071b      	lsls	r3, r3, #28
 8007b62:	d501      	bpl.n	8007b68 <_vfiprintf_r+0x34>
 8007b64:	692b      	ldr	r3, [r5, #16]
 8007b66:	b99b      	cbnz	r3, 8007b90 <_vfiprintf_r+0x5c>
 8007b68:	4629      	mov	r1, r5
 8007b6a:	4630      	mov	r0, r6
 8007b6c:	f000 fb78 	bl	8008260 <__swsetup_r>
 8007b70:	b170      	cbz	r0, 8007b90 <_vfiprintf_r+0x5c>
 8007b72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007b74:	07dc      	lsls	r4, r3, #31
 8007b76:	d504      	bpl.n	8007b82 <_vfiprintf_r+0x4e>
 8007b78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007b7c:	b01d      	add	sp, #116	; 0x74
 8007b7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b82:	89ab      	ldrh	r3, [r5, #12]
 8007b84:	0598      	lsls	r0, r3, #22
 8007b86:	d4f7      	bmi.n	8007b78 <_vfiprintf_r+0x44>
 8007b88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007b8a:	f7ff ff5b 	bl	8007a44 <__retarget_lock_release_recursive>
 8007b8e:	e7f3      	b.n	8007b78 <_vfiprintf_r+0x44>
 8007b90:	2300      	movs	r3, #0
 8007b92:	9309      	str	r3, [sp, #36]	; 0x24
 8007b94:	2320      	movs	r3, #32
 8007b96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007b9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8007b9e:	2330      	movs	r3, #48	; 0x30
 8007ba0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8007d54 <_vfiprintf_r+0x220>
 8007ba4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007ba8:	f04f 0901 	mov.w	r9, #1
 8007bac:	4623      	mov	r3, r4
 8007bae:	469a      	mov	sl, r3
 8007bb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bb4:	b10a      	cbz	r2, 8007bba <_vfiprintf_r+0x86>
 8007bb6:	2a25      	cmp	r2, #37	; 0x25
 8007bb8:	d1f9      	bne.n	8007bae <_vfiprintf_r+0x7a>
 8007bba:	ebba 0b04 	subs.w	fp, sl, r4
 8007bbe:	d00b      	beq.n	8007bd8 <_vfiprintf_r+0xa4>
 8007bc0:	465b      	mov	r3, fp
 8007bc2:	4622      	mov	r2, r4
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f7ff ffa1 	bl	8007b0e <__sfputs_r>
 8007bcc:	3001      	adds	r0, #1
 8007bce:	f000 80a9 	beq.w	8007d24 <_vfiprintf_r+0x1f0>
 8007bd2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007bd4:	445a      	add	r2, fp
 8007bd6:	9209      	str	r2, [sp, #36]	; 0x24
 8007bd8:	f89a 3000 	ldrb.w	r3, [sl]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	f000 80a1 	beq.w	8007d24 <_vfiprintf_r+0x1f0>
 8007be2:	2300      	movs	r3, #0
 8007be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007be8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007bec:	f10a 0a01 	add.w	sl, sl, #1
 8007bf0:	9304      	str	r3, [sp, #16]
 8007bf2:	9307      	str	r3, [sp, #28]
 8007bf4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007bf8:	931a      	str	r3, [sp, #104]	; 0x68
 8007bfa:	4654      	mov	r4, sl
 8007bfc:	2205      	movs	r2, #5
 8007bfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c02:	4854      	ldr	r0, [pc, #336]	; (8007d54 <_vfiprintf_r+0x220>)
 8007c04:	f7f8 fb04 	bl	8000210 <memchr>
 8007c08:	9a04      	ldr	r2, [sp, #16]
 8007c0a:	b9d8      	cbnz	r0, 8007c44 <_vfiprintf_r+0x110>
 8007c0c:	06d1      	lsls	r1, r2, #27
 8007c0e:	bf44      	itt	mi
 8007c10:	2320      	movmi	r3, #32
 8007c12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c16:	0713      	lsls	r3, r2, #28
 8007c18:	bf44      	itt	mi
 8007c1a:	232b      	movmi	r3, #43	; 0x2b
 8007c1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007c20:	f89a 3000 	ldrb.w	r3, [sl]
 8007c24:	2b2a      	cmp	r3, #42	; 0x2a
 8007c26:	d015      	beq.n	8007c54 <_vfiprintf_r+0x120>
 8007c28:	9a07      	ldr	r2, [sp, #28]
 8007c2a:	4654      	mov	r4, sl
 8007c2c:	2000      	movs	r0, #0
 8007c2e:	f04f 0c0a 	mov.w	ip, #10
 8007c32:	4621      	mov	r1, r4
 8007c34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c38:	3b30      	subs	r3, #48	; 0x30
 8007c3a:	2b09      	cmp	r3, #9
 8007c3c:	d94d      	bls.n	8007cda <_vfiprintf_r+0x1a6>
 8007c3e:	b1b0      	cbz	r0, 8007c6e <_vfiprintf_r+0x13a>
 8007c40:	9207      	str	r2, [sp, #28]
 8007c42:	e014      	b.n	8007c6e <_vfiprintf_r+0x13a>
 8007c44:	eba0 0308 	sub.w	r3, r0, r8
 8007c48:	fa09 f303 	lsl.w	r3, r9, r3
 8007c4c:	4313      	orrs	r3, r2
 8007c4e:	9304      	str	r3, [sp, #16]
 8007c50:	46a2      	mov	sl, r4
 8007c52:	e7d2      	b.n	8007bfa <_vfiprintf_r+0xc6>
 8007c54:	9b03      	ldr	r3, [sp, #12]
 8007c56:	1d19      	adds	r1, r3, #4
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	9103      	str	r1, [sp, #12]
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	bfbb      	ittet	lt
 8007c60:	425b      	neglt	r3, r3
 8007c62:	f042 0202 	orrlt.w	r2, r2, #2
 8007c66:	9307      	strge	r3, [sp, #28]
 8007c68:	9307      	strlt	r3, [sp, #28]
 8007c6a:	bfb8      	it	lt
 8007c6c:	9204      	strlt	r2, [sp, #16]
 8007c6e:	7823      	ldrb	r3, [r4, #0]
 8007c70:	2b2e      	cmp	r3, #46	; 0x2e
 8007c72:	d10c      	bne.n	8007c8e <_vfiprintf_r+0x15a>
 8007c74:	7863      	ldrb	r3, [r4, #1]
 8007c76:	2b2a      	cmp	r3, #42	; 0x2a
 8007c78:	d134      	bne.n	8007ce4 <_vfiprintf_r+0x1b0>
 8007c7a:	9b03      	ldr	r3, [sp, #12]
 8007c7c:	1d1a      	adds	r2, r3, #4
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	9203      	str	r2, [sp, #12]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	bfb8      	it	lt
 8007c86:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007c8a:	3402      	adds	r4, #2
 8007c8c:	9305      	str	r3, [sp, #20]
 8007c8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8007d64 <_vfiprintf_r+0x230>
 8007c92:	7821      	ldrb	r1, [r4, #0]
 8007c94:	2203      	movs	r2, #3
 8007c96:	4650      	mov	r0, sl
 8007c98:	f7f8 faba 	bl	8000210 <memchr>
 8007c9c:	b138      	cbz	r0, 8007cae <_vfiprintf_r+0x17a>
 8007c9e:	9b04      	ldr	r3, [sp, #16]
 8007ca0:	eba0 000a 	sub.w	r0, r0, sl
 8007ca4:	2240      	movs	r2, #64	; 0x40
 8007ca6:	4082      	lsls	r2, r0
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	3401      	adds	r4, #1
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cb2:	4829      	ldr	r0, [pc, #164]	; (8007d58 <_vfiprintf_r+0x224>)
 8007cb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007cb8:	2206      	movs	r2, #6
 8007cba:	f7f8 faa9 	bl	8000210 <memchr>
 8007cbe:	2800      	cmp	r0, #0
 8007cc0:	d03f      	beq.n	8007d42 <_vfiprintf_r+0x20e>
 8007cc2:	4b26      	ldr	r3, [pc, #152]	; (8007d5c <_vfiprintf_r+0x228>)
 8007cc4:	bb1b      	cbnz	r3, 8007d0e <_vfiprintf_r+0x1da>
 8007cc6:	9b03      	ldr	r3, [sp, #12]
 8007cc8:	3307      	adds	r3, #7
 8007cca:	f023 0307 	bic.w	r3, r3, #7
 8007cce:	3308      	adds	r3, #8
 8007cd0:	9303      	str	r3, [sp, #12]
 8007cd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007cd4:	443b      	add	r3, r7
 8007cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8007cd8:	e768      	b.n	8007bac <_vfiprintf_r+0x78>
 8007cda:	fb0c 3202 	mla	r2, ip, r2, r3
 8007cde:	460c      	mov	r4, r1
 8007ce0:	2001      	movs	r0, #1
 8007ce2:	e7a6      	b.n	8007c32 <_vfiprintf_r+0xfe>
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	3401      	adds	r4, #1
 8007ce8:	9305      	str	r3, [sp, #20]
 8007cea:	4619      	mov	r1, r3
 8007cec:	f04f 0c0a 	mov.w	ip, #10
 8007cf0:	4620      	mov	r0, r4
 8007cf2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007cf6:	3a30      	subs	r2, #48	; 0x30
 8007cf8:	2a09      	cmp	r2, #9
 8007cfa:	d903      	bls.n	8007d04 <_vfiprintf_r+0x1d0>
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d0c6      	beq.n	8007c8e <_vfiprintf_r+0x15a>
 8007d00:	9105      	str	r1, [sp, #20]
 8007d02:	e7c4      	b.n	8007c8e <_vfiprintf_r+0x15a>
 8007d04:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d08:	4604      	mov	r4, r0
 8007d0a:	2301      	movs	r3, #1
 8007d0c:	e7f0      	b.n	8007cf0 <_vfiprintf_r+0x1bc>
 8007d0e:	ab03      	add	r3, sp, #12
 8007d10:	9300      	str	r3, [sp, #0]
 8007d12:	462a      	mov	r2, r5
 8007d14:	4b12      	ldr	r3, [pc, #72]	; (8007d60 <_vfiprintf_r+0x22c>)
 8007d16:	a904      	add	r1, sp, #16
 8007d18:	4630      	mov	r0, r6
 8007d1a:	f3af 8000 	nop.w
 8007d1e:	4607      	mov	r7, r0
 8007d20:	1c78      	adds	r0, r7, #1
 8007d22:	d1d6      	bne.n	8007cd2 <_vfiprintf_r+0x19e>
 8007d24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007d26:	07d9      	lsls	r1, r3, #31
 8007d28:	d405      	bmi.n	8007d36 <_vfiprintf_r+0x202>
 8007d2a:	89ab      	ldrh	r3, [r5, #12]
 8007d2c:	059a      	lsls	r2, r3, #22
 8007d2e:	d402      	bmi.n	8007d36 <_vfiprintf_r+0x202>
 8007d30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007d32:	f7ff fe87 	bl	8007a44 <__retarget_lock_release_recursive>
 8007d36:	89ab      	ldrh	r3, [r5, #12]
 8007d38:	065b      	lsls	r3, r3, #25
 8007d3a:	f53f af1d 	bmi.w	8007b78 <_vfiprintf_r+0x44>
 8007d3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007d40:	e71c      	b.n	8007b7c <_vfiprintf_r+0x48>
 8007d42:	ab03      	add	r3, sp, #12
 8007d44:	9300      	str	r3, [sp, #0]
 8007d46:	462a      	mov	r2, r5
 8007d48:	4b05      	ldr	r3, [pc, #20]	; (8007d60 <_vfiprintf_r+0x22c>)
 8007d4a:	a904      	add	r1, sp, #16
 8007d4c:	4630      	mov	r0, r6
 8007d4e:	f000 f879 	bl	8007e44 <_printf_i>
 8007d52:	e7e4      	b.n	8007d1e <_vfiprintf_r+0x1ea>
 8007d54:	08008458 	.word	0x08008458
 8007d58:	08008462 	.word	0x08008462
 8007d5c:	00000000 	.word	0x00000000
 8007d60:	08007b0f 	.word	0x08007b0f
 8007d64:	0800845e 	.word	0x0800845e

08007d68 <_printf_common>:
 8007d68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d6c:	4616      	mov	r6, r2
 8007d6e:	4699      	mov	r9, r3
 8007d70:	688a      	ldr	r2, [r1, #8]
 8007d72:	690b      	ldr	r3, [r1, #16]
 8007d74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	bfb8      	it	lt
 8007d7c:	4613      	movlt	r3, r2
 8007d7e:	6033      	str	r3, [r6, #0]
 8007d80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007d84:	4607      	mov	r7, r0
 8007d86:	460c      	mov	r4, r1
 8007d88:	b10a      	cbz	r2, 8007d8e <_printf_common+0x26>
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	6033      	str	r3, [r6, #0]
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	0699      	lsls	r1, r3, #26
 8007d92:	bf42      	ittt	mi
 8007d94:	6833      	ldrmi	r3, [r6, #0]
 8007d96:	3302      	addmi	r3, #2
 8007d98:	6033      	strmi	r3, [r6, #0]
 8007d9a:	6825      	ldr	r5, [r4, #0]
 8007d9c:	f015 0506 	ands.w	r5, r5, #6
 8007da0:	d106      	bne.n	8007db0 <_printf_common+0x48>
 8007da2:	f104 0a19 	add.w	sl, r4, #25
 8007da6:	68e3      	ldr	r3, [r4, #12]
 8007da8:	6832      	ldr	r2, [r6, #0]
 8007daa:	1a9b      	subs	r3, r3, r2
 8007dac:	42ab      	cmp	r3, r5
 8007dae:	dc26      	bgt.n	8007dfe <_printf_common+0x96>
 8007db0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007db4:	1e13      	subs	r3, r2, #0
 8007db6:	6822      	ldr	r2, [r4, #0]
 8007db8:	bf18      	it	ne
 8007dba:	2301      	movne	r3, #1
 8007dbc:	0692      	lsls	r2, r2, #26
 8007dbe:	d42b      	bmi.n	8007e18 <_printf_common+0xb0>
 8007dc0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007dc4:	4649      	mov	r1, r9
 8007dc6:	4638      	mov	r0, r7
 8007dc8:	47c0      	blx	r8
 8007dca:	3001      	adds	r0, #1
 8007dcc:	d01e      	beq.n	8007e0c <_printf_common+0xa4>
 8007dce:	6823      	ldr	r3, [r4, #0]
 8007dd0:	6922      	ldr	r2, [r4, #16]
 8007dd2:	f003 0306 	and.w	r3, r3, #6
 8007dd6:	2b04      	cmp	r3, #4
 8007dd8:	bf02      	ittt	eq
 8007dda:	68e5      	ldreq	r5, [r4, #12]
 8007ddc:	6833      	ldreq	r3, [r6, #0]
 8007dde:	1aed      	subeq	r5, r5, r3
 8007de0:	68a3      	ldr	r3, [r4, #8]
 8007de2:	bf0c      	ite	eq
 8007de4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007de8:	2500      	movne	r5, #0
 8007dea:	4293      	cmp	r3, r2
 8007dec:	bfc4      	itt	gt
 8007dee:	1a9b      	subgt	r3, r3, r2
 8007df0:	18ed      	addgt	r5, r5, r3
 8007df2:	2600      	movs	r6, #0
 8007df4:	341a      	adds	r4, #26
 8007df6:	42b5      	cmp	r5, r6
 8007df8:	d11a      	bne.n	8007e30 <_printf_common+0xc8>
 8007dfa:	2000      	movs	r0, #0
 8007dfc:	e008      	b.n	8007e10 <_printf_common+0xa8>
 8007dfe:	2301      	movs	r3, #1
 8007e00:	4652      	mov	r2, sl
 8007e02:	4649      	mov	r1, r9
 8007e04:	4638      	mov	r0, r7
 8007e06:	47c0      	blx	r8
 8007e08:	3001      	adds	r0, #1
 8007e0a:	d103      	bne.n	8007e14 <_printf_common+0xac>
 8007e0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007e10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e14:	3501      	adds	r5, #1
 8007e16:	e7c6      	b.n	8007da6 <_printf_common+0x3e>
 8007e18:	18e1      	adds	r1, r4, r3
 8007e1a:	1c5a      	adds	r2, r3, #1
 8007e1c:	2030      	movs	r0, #48	; 0x30
 8007e1e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007e22:	4422      	add	r2, r4
 8007e24:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007e28:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007e2c:	3302      	adds	r3, #2
 8007e2e:	e7c7      	b.n	8007dc0 <_printf_common+0x58>
 8007e30:	2301      	movs	r3, #1
 8007e32:	4622      	mov	r2, r4
 8007e34:	4649      	mov	r1, r9
 8007e36:	4638      	mov	r0, r7
 8007e38:	47c0      	blx	r8
 8007e3a:	3001      	adds	r0, #1
 8007e3c:	d0e6      	beq.n	8007e0c <_printf_common+0xa4>
 8007e3e:	3601      	adds	r6, #1
 8007e40:	e7d9      	b.n	8007df6 <_printf_common+0x8e>
	...

08007e44 <_printf_i>:
 8007e44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007e48:	7e0f      	ldrb	r7, [r1, #24]
 8007e4a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e4c:	2f78      	cmp	r7, #120	; 0x78
 8007e4e:	4691      	mov	r9, r2
 8007e50:	4680      	mov	r8, r0
 8007e52:	460c      	mov	r4, r1
 8007e54:	469a      	mov	sl, r3
 8007e56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007e5a:	d807      	bhi.n	8007e6c <_printf_i+0x28>
 8007e5c:	2f62      	cmp	r7, #98	; 0x62
 8007e5e:	d80a      	bhi.n	8007e76 <_printf_i+0x32>
 8007e60:	2f00      	cmp	r7, #0
 8007e62:	f000 80d4 	beq.w	800800e <_printf_i+0x1ca>
 8007e66:	2f58      	cmp	r7, #88	; 0x58
 8007e68:	f000 80c0 	beq.w	8007fec <_printf_i+0x1a8>
 8007e6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007e74:	e03a      	b.n	8007eec <_printf_i+0xa8>
 8007e76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007e7a:	2b15      	cmp	r3, #21
 8007e7c:	d8f6      	bhi.n	8007e6c <_printf_i+0x28>
 8007e7e:	a101      	add	r1, pc, #4	; (adr r1, 8007e84 <_printf_i+0x40>)
 8007e80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007e84:	08007edd 	.word	0x08007edd
 8007e88:	08007ef1 	.word	0x08007ef1
 8007e8c:	08007e6d 	.word	0x08007e6d
 8007e90:	08007e6d 	.word	0x08007e6d
 8007e94:	08007e6d 	.word	0x08007e6d
 8007e98:	08007e6d 	.word	0x08007e6d
 8007e9c:	08007ef1 	.word	0x08007ef1
 8007ea0:	08007e6d 	.word	0x08007e6d
 8007ea4:	08007e6d 	.word	0x08007e6d
 8007ea8:	08007e6d 	.word	0x08007e6d
 8007eac:	08007e6d 	.word	0x08007e6d
 8007eb0:	08007ff5 	.word	0x08007ff5
 8007eb4:	08007f1d 	.word	0x08007f1d
 8007eb8:	08007faf 	.word	0x08007faf
 8007ebc:	08007e6d 	.word	0x08007e6d
 8007ec0:	08007e6d 	.word	0x08007e6d
 8007ec4:	08008017 	.word	0x08008017
 8007ec8:	08007e6d 	.word	0x08007e6d
 8007ecc:	08007f1d 	.word	0x08007f1d
 8007ed0:	08007e6d 	.word	0x08007e6d
 8007ed4:	08007e6d 	.word	0x08007e6d
 8007ed8:	08007fb7 	.word	0x08007fb7
 8007edc:	682b      	ldr	r3, [r5, #0]
 8007ede:	1d1a      	adds	r2, r3, #4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	602a      	str	r2, [r5, #0]
 8007ee4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ee8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007eec:	2301      	movs	r3, #1
 8007eee:	e09f      	b.n	8008030 <_printf_i+0x1ec>
 8007ef0:	6820      	ldr	r0, [r4, #0]
 8007ef2:	682b      	ldr	r3, [r5, #0]
 8007ef4:	0607      	lsls	r7, r0, #24
 8007ef6:	f103 0104 	add.w	r1, r3, #4
 8007efa:	6029      	str	r1, [r5, #0]
 8007efc:	d501      	bpl.n	8007f02 <_printf_i+0xbe>
 8007efe:	681e      	ldr	r6, [r3, #0]
 8007f00:	e003      	b.n	8007f0a <_printf_i+0xc6>
 8007f02:	0646      	lsls	r6, r0, #25
 8007f04:	d5fb      	bpl.n	8007efe <_printf_i+0xba>
 8007f06:	f9b3 6000 	ldrsh.w	r6, [r3]
 8007f0a:	2e00      	cmp	r6, #0
 8007f0c:	da03      	bge.n	8007f16 <_printf_i+0xd2>
 8007f0e:	232d      	movs	r3, #45	; 0x2d
 8007f10:	4276      	negs	r6, r6
 8007f12:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007f16:	485a      	ldr	r0, [pc, #360]	; (8008080 <_printf_i+0x23c>)
 8007f18:	230a      	movs	r3, #10
 8007f1a:	e012      	b.n	8007f42 <_printf_i+0xfe>
 8007f1c:	682b      	ldr	r3, [r5, #0]
 8007f1e:	6820      	ldr	r0, [r4, #0]
 8007f20:	1d19      	adds	r1, r3, #4
 8007f22:	6029      	str	r1, [r5, #0]
 8007f24:	0605      	lsls	r5, r0, #24
 8007f26:	d501      	bpl.n	8007f2c <_printf_i+0xe8>
 8007f28:	681e      	ldr	r6, [r3, #0]
 8007f2a:	e002      	b.n	8007f32 <_printf_i+0xee>
 8007f2c:	0641      	lsls	r1, r0, #25
 8007f2e:	d5fb      	bpl.n	8007f28 <_printf_i+0xe4>
 8007f30:	881e      	ldrh	r6, [r3, #0]
 8007f32:	4853      	ldr	r0, [pc, #332]	; (8008080 <_printf_i+0x23c>)
 8007f34:	2f6f      	cmp	r7, #111	; 0x6f
 8007f36:	bf0c      	ite	eq
 8007f38:	2308      	moveq	r3, #8
 8007f3a:	230a      	movne	r3, #10
 8007f3c:	2100      	movs	r1, #0
 8007f3e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007f42:	6865      	ldr	r5, [r4, #4]
 8007f44:	60a5      	str	r5, [r4, #8]
 8007f46:	2d00      	cmp	r5, #0
 8007f48:	bfa2      	ittt	ge
 8007f4a:	6821      	ldrge	r1, [r4, #0]
 8007f4c:	f021 0104 	bicge.w	r1, r1, #4
 8007f50:	6021      	strge	r1, [r4, #0]
 8007f52:	b90e      	cbnz	r6, 8007f58 <_printf_i+0x114>
 8007f54:	2d00      	cmp	r5, #0
 8007f56:	d04b      	beq.n	8007ff0 <_printf_i+0x1ac>
 8007f58:	4615      	mov	r5, r2
 8007f5a:	fbb6 f1f3 	udiv	r1, r6, r3
 8007f5e:	fb03 6711 	mls	r7, r3, r1, r6
 8007f62:	5dc7      	ldrb	r7, [r0, r7]
 8007f64:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007f68:	4637      	mov	r7, r6
 8007f6a:	42bb      	cmp	r3, r7
 8007f6c:	460e      	mov	r6, r1
 8007f6e:	d9f4      	bls.n	8007f5a <_printf_i+0x116>
 8007f70:	2b08      	cmp	r3, #8
 8007f72:	d10b      	bne.n	8007f8c <_printf_i+0x148>
 8007f74:	6823      	ldr	r3, [r4, #0]
 8007f76:	07de      	lsls	r6, r3, #31
 8007f78:	d508      	bpl.n	8007f8c <_printf_i+0x148>
 8007f7a:	6923      	ldr	r3, [r4, #16]
 8007f7c:	6861      	ldr	r1, [r4, #4]
 8007f7e:	4299      	cmp	r1, r3
 8007f80:	bfde      	ittt	le
 8007f82:	2330      	movle	r3, #48	; 0x30
 8007f84:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007f88:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007f8c:	1b52      	subs	r2, r2, r5
 8007f8e:	6122      	str	r2, [r4, #16]
 8007f90:	f8cd a000 	str.w	sl, [sp]
 8007f94:	464b      	mov	r3, r9
 8007f96:	aa03      	add	r2, sp, #12
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4640      	mov	r0, r8
 8007f9c:	f7ff fee4 	bl	8007d68 <_printf_common>
 8007fa0:	3001      	adds	r0, #1
 8007fa2:	d14a      	bne.n	800803a <_printf_i+0x1f6>
 8007fa4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007fa8:	b004      	add	sp, #16
 8007faa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fae:	6823      	ldr	r3, [r4, #0]
 8007fb0:	f043 0320 	orr.w	r3, r3, #32
 8007fb4:	6023      	str	r3, [r4, #0]
 8007fb6:	4833      	ldr	r0, [pc, #204]	; (8008084 <_printf_i+0x240>)
 8007fb8:	2778      	movs	r7, #120	; 0x78
 8007fba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	6829      	ldr	r1, [r5, #0]
 8007fc2:	061f      	lsls	r7, r3, #24
 8007fc4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007fc8:	d402      	bmi.n	8007fd0 <_printf_i+0x18c>
 8007fca:	065f      	lsls	r7, r3, #25
 8007fcc:	bf48      	it	mi
 8007fce:	b2b6      	uxthmi	r6, r6
 8007fd0:	07df      	lsls	r7, r3, #31
 8007fd2:	bf48      	it	mi
 8007fd4:	f043 0320 	orrmi.w	r3, r3, #32
 8007fd8:	6029      	str	r1, [r5, #0]
 8007fda:	bf48      	it	mi
 8007fdc:	6023      	strmi	r3, [r4, #0]
 8007fde:	b91e      	cbnz	r6, 8007fe8 <_printf_i+0x1a4>
 8007fe0:	6823      	ldr	r3, [r4, #0]
 8007fe2:	f023 0320 	bic.w	r3, r3, #32
 8007fe6:	6023      	str	r3, [r4, #0]
 8007fe8:	2310      	movs	r3, #16
 8007fea:	e7a7      	b.n	8007f3c <_printf_i+0xf8>
 8007fec:	4824      	ldr	r0, [pc, #144]	; (8008080 <_printf_i+0x23c>)
 8007fee:	e7e4      	b.n	8007fba <_printf_i+0x176>
 8007ff0:	4615      	mov	r5, r2
 8007ff2:	e7bd      	b.n	8007f70 <_printf_i+0x12c>
 8007ff4:	682b      	ldr	r3, [r5, #0]
 8007ff6:	6826      	ldr	r6, [r4, #0]
 8007ff8:	6961      	ldr	r1, [r4, #20]
 8007ffa:	1d18      	adds	r0, r3, #4
 8007ffc:	6028      	str	r0, [r5, #0]
 8007ffe:	0635      	lsls	r5, r6, #24
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	d501      	bpl.n	8008008 <_printf_i+0x1c4>
 8008004:	6019      	str	r1, [r3, #0]
 8008006:	e002      	b.n	800800e <_printf_i+0x1ca>
 8008008:	0670      	lsls	r0, r6, #25
 800800a:	d5fb      	bpl.n	8008004 <_printf_i+0x1c0>
 800800c:	8019      	strh	r1, [r3, #0]
 800800e:	2300      	movs	r3, #0
 8008010:	6123      	str	r3, [r4, #16]
 8008012:	4615      	mov	r5, r2
 8008014:	e7bc      	b.n	8007f90 <_printf_i+0x14c>
 8008016:	682b      	ldr	r3, [r5, #0]
 8008018:	1d1a      	adds	r2, r3, #4
 800801a:	602a      	str	r2, [r5, #0]
 800801c:	681d      	ldr	r5, [r3, #0]
 800801e:	6862      	ldr	r2, [r4, #4]
 8008020:	2100      	movs	r1, #0
 8008022:	4628      	mov	r0, r5
 8008024:	f7f8 f8f4 	bl	8000210 <memchr>
 8008028:	b108      	cbz	r0, 800802e <_printf_i+0x1ea>
 800802a:	1b40      	subs	r0, r0, r5
 800802c:	6060      	str	r0, [r4, #4]
 800802e:	6863      	ldr	r3, [r4, #4]
 8008030:	6123      	str	r3, [r4, #16]
 8008032:	2300      	movs	r3, #0
 8008034:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008038:	e7aa      	b.n	8007f90 <_printf_i+0x14c>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	462a      	mov	r2, r5
 800803e:	4649      	mov	r1, r9
 8008040:	4640      	mov	r0, r8
 8008042:	47d0      	blx	sl
 8008044:	3001      	adds	r0, #1
 8008046:	d0ad      	beq.n	8007fa4 <_printf_i+0x160>
 8008048:	6823      	ldr	r3, [r4, #0]
 800804a:	079b      	lsls	r3, r3, #30
 800804c:	d413      	bmi.n	8008076 <_printf_i+0x232>
 800804e:	68e0      	ldr	r0, [r4, #12]
 8008050:	9b03      	ldr	r3, [sp, #12]
 8008052:	4298      	cmp	r0, r3
 8008054:	bfb8      	it	lt
 8008056:	4618      	movlt	r0, r3
 8008058:	e7a6      	b.n	8007fa8 <_printf_i+0x164>
 800805a:	2301      	movs	r3, #1
 800805c:	4632      	mov	r2, r6
 800805e:	4649      	mov	r1, r9
 8008060:	4640      	mov	r0, r8
 8008062:	47d0      	blx	sl
 8008064:	3001      	adds	r0, #1
 8008066:	d09d      	beq.n	8007fa4 <_printf_i+0x160>
 8008068:	3501      	adds	r5, #1
 800806a:	68e3      	ldr	r3, [r4, #12]
 800806c:	9903      	ldr	r1, [sp, #12]
 800806e:	1a5b      	subs	r3, r3, r1
 8008070:	42ab      	cmp	r3, r5
 8008072:	dcf2      	bgt.n	800805a <_printf_i+0x216>
 8008074:	e7eb      	b.n	800804e <_printf_i+0x20a>
 8008076:	2500      	movs	r5, #0
 8008078:	f104 0619 	add.w	r6, r4, #25
 800807c:	e7f5      	b.n	800806a <_printf_i+0x226>
 800807e:	bf00      	nop
 8008080:	08008469 	.word	0x08008469
 8008084:	0800847a 	.word	0x0800847a

08008088 <__sflush_r>:
 8008088:	898a      	ldrh	r2, [r1, #12]
 800808a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800808e:	4605      	mov	r5, r0
 8008090:	0710      	lsls	r0, r2, #28
 8008092:	460c      	mov	r4, r1
 8008094:	d458      	bmi.n	8008148 <__sflush_r+0xc0>
 8008096:	684b      	ldr	r3, [r1, #4]
 8008098:	2b00      	cmp	r3, #0
 800809a:	dc05      	bgt.n	80080a8 <__sflush_r+0x20>
 800809c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800809e:	2b00      	cmp	r3, #0
 80080a0:	dc02      	bgt.n	80080a8 <__sflush_r+0x20>
 80080a2:	2000      	movs	r0, #0
 80080a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080aa:	2e00      	cmp	r6, #0
 80080ac:	d0f9      	beq.n	80080a2 <__sflush_r+0x1a>
 80080ae:	2300      	movs	r3, #0
 80080b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80080b4:	682f      	ldr	r7, [r5, #0]
 80080b6:	6a21      	ldr	r1, [r4, #32]
 80080b8:	602b      	str	r3, [r5, #0]
 80080ba:	d032      	beq.n	8008122 <__sflush_r+0x9a>
 80080bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	075a      	lsls	r2, r3, #29
 80080c2:	d505      	bpl.n	80080d0 <__sflush_r+0x48>
 80080c4:	6863      	ldr	r3, [r4, #4]
 80080c6:	1ac0      	subs	r0, r0, r3
 80080c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80080ca:	b10b      	cbz	r3, 80080d0 <__sflush_r+0x48>
 80080cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80080ce:	1ac0      	subs	r0, r0, r3
 80080d0:	2300      	movs	r3, #0
 80080d2:	4602      	mov	r2, r0
 80080d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80080d6:	6a21      	ldr	r1, [r4, #32]
 80080d8:	4628      	mov	r0, r5
 80080da:	47b0      	blx	r6
 80080dc:	1c43      	adds	r3, r0, #1
 80080de:	89a3      	ldrh	r3, [r4, #12]
 80080e0:	d106      	bne.n	80080f0 <__sflush_r+0x68>
 80080e2:	6829      	ldr	r1, [r5, #0]
 80080e4:	291d      	cmp	r1, #29
 80080e6:	d82b      	bhi.n	8008140 <__sflush_r+0xb8>
 80080e8:	4a29      	ldr	r2, [pc, #164]	; (8008190 <__sflush_r+0x108>)
 80080ea:	410a      	asrs	r2, r1
 80080ec:	07d6      	lsls	r6, r2, #31
 80080ee:	d427      	bmi.n	8008140 <__sflush_r+0xb8>
 80080f0:	2200      	movs	r2, #0
 80080f2:	6062      	str	r2, [r4, #4]
 80080f4:	04d9      	lsls	r1, r3, #19
 80080f6:	6922      	ldr	r2, [r4, #16]
 80080f8:	6022      	str	r2, [r4, #0]
 80080fa:	d504      	bpl.n	8008106 <__sflush_r+0x7e>
 80080fc:	1c42      	adds	r2, r0, #1
 80080fe:	d101      	bne.n	8008104 <__sflush_r+0x7c>
 8008100:	682b      	ldr	r3, [r5, #0]
 8008102:	b903      	cbnz	r3, 8008106 <__sflush_r+0x7e>
 8008104:	6560      	str	r0, [r4, #84]	; 0x54
 8008106:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008108:	602f      	str	r7, [r5, #0]
 800810a:	2900      	cmp	r1, #0
 800810c:	d0c9      	beq.n	80080a2 <__sflush_r+0x1a>
 800810e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008112:	4299      	cmp	r1, r3
 8008114:	d002      	beq.n	800811c <__sflush_r+0x94>
 8008116:	4628      	mov	r0, r5
 8008118:	f7ff fc96 	bl	8007a48 <_free_r>
 800811c:	2000      	movs	r0, #0
 800811e:	6360      	str	r0, [r4, #52]	; 0x34
 8008120:	e7c0      	b.n	80080a4 <__sflush_r+0x1c>
 8008122:	2301      	movs	r3, #1
 8008124:	4628      	mov	r0, r5
 8008126:	47b0      	blx	r6
 8008128:	1c41      	adds	r1, r0, #1
 800812a:	d1c8      	bne.n	80080be <__sflush_r+0x36>
 800812c:	682b      	ldr	r3, [r5, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d0c5      	beq.n	80080be <__sflush_r+0x36>
 8008132:	2b1d      	cmp	r3, #29
 8008134:	d001      	beq.n	800813a <__sflush_r+0xb2>
 8008136:	2b16      	cmp	r3, #22
 8008138:	d101      	bne.n	800813e <__sflush_r+0xb6>
 800813a:	602f      	str	r7, [r5, #0]
 800813c:	e7b1      	b.n	80080a2 <__sflush_r+0x1a>
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	e7ad      	b.n	80080a4 <__sflush_r+0x1c>
 8008148:	690f      	ldr	r7, [r1, #16]
 800814a:	2f00      	cmp	r7, #0
 800814c:	d0a9      	beq.n	80080a2 <__sflush_r+0x1a>
 800814e:	0793      	lsls	r3, r2, #30
 8008150:	680e      	ldr	r6, [r1, #0]
 8008152:	bf08      	it	eq
 8008154:	694b      	ldreq	r3, [r1, #20]
 8008156:	600f      	str	r7, [r1, #0]
 8008158:	bf18      	it	ne
 800815a:	2300      	movne	r3, #0
 800815c:	eba6 0807 	sub.w	r8, r6, r7
 8008160:	608b      	str	r3, [r1, #8]
 8008162:	f1b8 0f00 	cmp.w	r8, #0
 8008166:	dd9c      	ble.n	80080a2 <__sflush_r+0x1a>
 8008168:	6a21      	ldr	r1, [r4, #32]
 800816a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800816c:	4643      	mov	r3, r8
 800816e:	463a      	mov	r2, r7
 8008170:	4628      	mov	r0, r5
 8008172:	47b0      	blx	r6
 8008174:	2800      	cmp	r0, #0
 8008176:	dc06      	bgt.n	8008186 <__sflush_r+0xfe>
 8008178:	89a3      	ldrh	r3, [r4, #12]
 800817a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800817e:	81a3      	strh	r3, [r4, #12]
 8008180:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008184:	e78e      	b.n	80080a4 <__sflush_r+0x1c>
 8008186:	4407      	add	r7, r0
 8008188:	eba8 0800 	sub.w	r8, r8, r0
 800818c:	e7e9      	b.n	8008162 <__sflush_r+0xda>
 800818e:	bf00      	nop
 8008190:	dfbffffe 	.word	0xdfbffffe

08008194 <_fflush_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	690b      	ldr	r3, [r1, #16]
 8008198:	4605      	mov	r5, r0
 800819a:	460c      	mov	r4, r1
 800819c:	b913      	cbnz	r3, 80081a4 <_fflush_r+0x10>
 800819e:	2500      	movs	r5, #0
 80081a0:	4628      	mov	r0, r5
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	b118      	cbz	r0, 80081ae <_fflush_r+0x1a>
 80081a6:	6a03      	ldr	r3, [r0, #32]
 80081a8:	b90b      	cbnz	r3, 80081ae <_fflush_r+0x1a>
 80081aa:	f7ff fb35 	bl	8007818 <__sinit>
 80081ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d0f3      	beq.n	800819e <_fflush_r+0xa>
 80081b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80081b8:	07d0      	lsls	r0, r2, #31
 80081ba:	d404      	bmi.n	80081c6 <_fflush_r+0x32>
 80081bc:	0599      	lsls	r1, r3, #22
 80081be:	d402      	bmi.n	80081c6 <_fflush_r+0x32>
 80081c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081c2:	f7ff fc3e 	bl	8007a42 <__retarget_lock_acquire_recursive>
 80081c6:	4628      	mov	r0, r5
 80081c8:	4621      	mov	r1, r4
 80081ca:	f7ff ff5d 	bl	8008088 <__sflush_r>
 80081ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80081d0:	07da      	lsls	r2, r3, #31
 80081d2:	4605      	mov	r5, r0
 80081d4:	d4e4      	bmi.n	80081a0 <_fflush_r+0xc>
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	059b      	lsls	r3, r3, #22
 80081da:	d4e1      	bmi.n	80081a0 <_fflush_r+0xc>
 80081dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80081de:	f7ff fc31 	bl	8007a44 <__retarget_lock_release_recursive>
 80081e2:	e7dd      	b.n	80081a0 <_fflush_r+0xc>

080081e4 <__swbuf_r>:
 80081e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80081e6:	460e      	mov	r6, r1
 80081e8:	4614      	mov	r4, r2
 80081ea:	4605      	mov	r5, r0
 80081ec:	b118      	cbz	r0, 80081f6 <__swbuf_r+0x12>
 80081ee:	6a03      	ldr	r3, [r0, #32]
 80081f0:	b90b      	cbnz	r3, 80081f6 <__swbuf_r+0x12>
 80081f2:	f7ff fb11 	bl	8007818 <__sinit>
 80081f6:	69a3      	ldr	r3, [r4, #24]
 80081f8:	60a3      	str	r3, [r4, #8]
 80081fa:	89a3      	ldrh	r3, [r4, #12]
 80081fc:	071a      	lsls	r2, r3, #28
 80081fe:	d525      	bpl.n	800824c <__swbuf_r+0x68>
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	b31b      	cbz	r3, 800824c <__swbuf_r+0x68>
 8008204:	6823      	ldr	r3, [r4, #0]
 8008206:	6922      	ldr	r2, [r4, #16]
 8008208:	1a98      	subs	r0, r3, r2
 800820a:	6963      	ldr	r3, [r4, #20]
 800820c:	b2f6      	uxtb	r6, r6
 800820e:	4283      	cmp	r3, r0
 8008210:	4637      	mov	r7, r6
 8008212:	dc04      	bgt.n	800821e <__swbuf_r+0x3a>
 8008214:	4621      	mov	r1, r4
 8008216:	4628      	mov	r0, r5
 8008218:	f7ff ffbc 	bl	8008194 <_fflush_r>
 800821c:	b9e0      	cbnz	r0, 8008258 <__swbuf_r+0x74>
 800821e:	68a3      	ldr	r3, [r4, #8]
 8008220:	3b01      	subs	r3, #1
 8008222:	60a3      	str	r3, [r4, #8]
 8008224:	6823      	ldr	r3, [r4, #0]
 8008226:	1c5a      	adds	r2, r3, #1
 8008228:	6022      	str	r2, [r4, #0]
 800822a:	701e      	strb	r6, [r3, #0]
 800822c:	6962      	ldr	r2, [r4, #20]
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	429a      	cmp	r2, r3
 8008232:	d004      	beq.n	800823e <__swbuf_r+0x5a>
 8008234:	89a3      	ldrh	r3, [r4, #12]
 8008236:	07db      	lsls	r3, r3, #31
 8008238:	d506      	bpl.n	8008248 <__swbuf_r+0x64>
 800823a:	2e0a      	cmp	r6, #10
 800823c:	d104      	bne.n	8008248 <__swbuf_r+0x64>
 800823e:	4621      	mov	r1, r4
 8008240:	4628      	mov	r0, r5
 8008242:	f7ff ffa7 	bl	8008194 <_fflush_r>
 8008246:	b938      	cbnz	r0, 8008258 <__swbuf_r+0x74>
 8008248:	4638      	mov	r0, r7
 800824a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800824c:	4621      	mov	r1, r4
 800824e:	4628      	mov	r0, r5
 8008250:	f000 f806 	bl	8008260 <__swsetup_r>
 8008254:	2800      	cmp	r0, #0
 8008256:	d0d5      	beq.n	8008204 <__swbuf_r+0x20>
 8008258:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800825c:	e7f4      	b.n	8008248 <__swbuf_r+0x64>
	...

08008260 <__swsetup_r>:
 8008260:	b538      	push	{r3, r4, r5, lr}
 8008262:	4b2a      	ldr	r3, [pc, #168]	; (800830c <__swsetup_r+0xac>)
 8008264:	4605      	mov	r5, r0
 8008266:	6818      	ldr	r0, [r3, #0]
 8008268:	460c      	mov	r4, r1
 800826a:	b118      	cbz	r0, 8008274 <__swsetup_r+0x14>
 800826c:	6a03      	ldr	r3, [r0, #32]
 800826e:	b90b      	cbnz	r3, 8008274 <__swsetup_r+0x14>
 8008270:	f7ff fad2 	bl	8007818 <__sinit>
 8008274:	89a3      	ldrh	r3, [r4, #12]
 8008276:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800827a:	0718      	lsls	r0, r3, #28
 800827c:	d422      	bmi.n	80082c4 <__swsetup_r+0x64>
 800827e:	06d9      	lsls	r1, r3, #27
 8008280:	d407      	bmi.n	8008292 <__swsetup_r+0x32>
 8008282:	2309      	movs	r3, #9
 8008284:	602b      	str	r3, [r5, #0]
 8008286:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800828a:	81a3      	strh	r3, [r4, #12]
 800828c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008290:	e034      	b.n	80082fc <__swsetup_r+0x9c>
 8008292:	0758      	lsls	r0, r3, #29
 8008294:	d512      	bpl.n	80082bc <__swsetup_r+0x5c>
 8008296:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008298:	b141      	cbz	r1, 80082ac <__swsetup_r+0x4c>
 800829a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800829e:	4299      	cmp	r1, r3
 80082a0:	d002      	beq.n	80082a8 <__swsetup_r+0x48>
 80082a2:	4628      	mov	r0, r5
 80082a4:	f7ff fbd0 	bl	8007a48 <_free_r>
 80082a8:	2300      	movs	r3, #0
 80082aa:	6363      	str	r3, [r4, #52]	; 0x34
 80082ac:	89a3      	ldrh	r3, [r4, #12]
 80082ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80082b2:	81a3      	strh	r3, [r4, #12]
 80082b4:	2300      	movs	r3, #0
 80082b6:	6063      	str	r3, [r4, #4]
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	6023      	str	r3, [r4, #0]
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f043 0308 	orr.w	r3, r3, #8
 80082c2:	81a3      	strh	r3, [r4, #12]
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	b94b      	cbnz	r3, 80082dc <__swsetup_r+0x7c>
 80082c8:	89a3      	ldrh	r3, [r4, #12]
 80082ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082d2:	d003      	beq.n	80082dc <__swsetup_r+0x7c>
 80082d4:	4621      	mov	r1, r4
 80082d6:	4628      	mov	r0, r5
 80082d8:	f000 f840 	bl	800835c <__smakebuf_r>
 80082dc:	89a0      	ldrh	r0, [r4, #12]
 80082de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082e2:	f010 0301 	ands.w	r3, r0, #1
 80082e6:	d00a      	beq.n	80082fe <__swsetup_r+0x9e>
 80082e8:	2300      	movs	r3, #0
 80082ea:	60a3      	str	r3, [r4, #8]
 80082ec:	6963      	ldr	r3, [r4, #20]
 80082ee:	425b      	negs	r3, r3
 80082f0:	61a3      	str	r3, [r4, #24]
 80082f2:	6923      	ldr	r3, [r4, #16]
 80082f4:	b943      	cbnz	r3, 8008308 <__swsetup_r+0xa8>
 80082f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082fa:	d1c4      	bne.n	8008286 <__swsetup_r+0x26>
 80082fc:	bd38      	pop	{r3, r4, r5, pc}
 80082fe:	0781      	lsls	r1, r0, #30
 8008300:	bf58      	it	pl
 8008302:	6963      	ldrpl	r3, [r4, #20]
 8008304:	60a3      	str	r3, [r4, #8]
 8008306:	e7f4      	b.n	80082f2 <__swsetup_r+0x92>
 8008308:	2000      	movs	r0, #0
 800830a:	e7f7      	b.n	80082fc <__swsetup_r+0x9c>
 800830c:	20000084 	.word	0x20000084

08008310 <__swhatbuf_r>:
 8008310:	b570      	push	{r4, r5, r6, lr}
 8008312:	460c      	mov	r4, r1
 8008314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008318:	2900      	cmp	r1, #0
 800831a:	b096      	sub	sp, #88	; 0x58
 800831c:	4615      	mov	r5, r2
 800831e:	461e      	mov	r6, r3
 8008320:	da0d      	bge.n	800833e <__swhatbuf_r+0x2e>
 8008322:	89a3      	ldrh	r3, [r4, #12]
 8008324:	f013 0f80 	tst.w	r3, #128	; 0x80
 8008328:	f04f 0100 	mov.w	r1, #0
 800832c:	bf0c      	ite	eq
 800832e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8008332:	2340      	movne	r3, #64	; 0x40
 8008334:	2000      	movs	r0, #0
 8008336:	6031      	str	r1, [r6, #0]
 8008338:	602b      	str	r3, [r5, #0]
 800833a:	b016      	add	sp, #88	; 0x58
 800833c:	bd70      	pop	{r4, r5, r6, pc}
 800833e:	466a      	mov	r2, sp
 8008340:	f000 f848 	bl	80083d4 <_fstat_r>
 8008344:	2800      	cmp	r0, #0
 8008346:	dbec      	blt.n	8008322 <__swhatbuf_r+0x12>
 8008348:	9901      	ldr	r1, [sp, #4]
 800834a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800834e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8008352:	4259      	negs	r1, r3
 8008354:	4159      	adcs	r1, r3
 8008356:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800835a:	e7eb      	b.n	8008334 <__swhatbuf_r+0x24>

0800835c <__smakebuf_r>:
 800835c:	898b      	ldrh	r3, [r1, #12]
 800835e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008360:	079d      	lsls	r5, r3, #30
 8008362:	4606      	mov	r6, r0
 8008364:	460c      	mov	r4, r1
 8008366:	d507      	bpl.n	8008378 <__smakebuf_r+0x1c>
 8008368:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800836c:	6023      	str	r3, [r4, #0]
 800836e:	6123      	str	r3, [r4, #16]
 8008370:	2301      	movs	r3, #1
 8008372:	6163      	str	r3, [r4, #20]
 8008374:	b002      	add	sp, #8
 8008376:	bd70      	pop	{r4, r5, r6, pc}
 8008378:	ab01      	add	r3, sp, #4
 800837a:	466a      	mov	r2, sp
 800837c:	f7ff ffc8 	bl	8008310 <__swhatbuf_r>
 8008380:	9900      	ldr	r1, [sp, #0]
 8008382:	4605      	mov	r5, r0
 8008384:	4630      	mov	r0, r6
 8008386:	f7ff f92f 	bl	80075e8 <_malloc_r>
 800838a:	b948      	cbnz	r0, 80083a0 <__smakebuf_r+0x44>
 800838c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008390:	059a      	lsls	r2, r3, #22
 8008392:	d4ef      	bmi.n	8008374 <__smakebuf_r+0x18>
 8008394:	f023 0303 	bic.w	r3, r3, #3
 8008398:	f043 0302 	orr.w	r3, r3, #2
 800839c:	81a3      	strh	r3, [r4, #12]
 800839e:	e7e3      	b.n	8008368 <__smakebuf_r+0xc>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	6020      	str	r0, [r4, #0]
 80083a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	9b00      	ldr	r3, [sp, #0]
 80083ac:	6163      	str	r3, [r4, #20]
 80083ae:	9b01      	ldr	r3, [sp, #4]
 80083b0:	6120      	str	r0, [r4, #16]
 80083b2:	b15b      	cbz	r3, 80083cc <__smakebuf_r+0x70>
 80083b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083b8:	4630      	mov	r0, r6
 80083ba:	f000 f81d 	bl	80083f8 <_isatty_r>
 80083be:	b128      	cbz	r0, 80083cc <__smakebuf_r+0x70>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	f023 0303 	bic.w	r3, r3, #3
 80083c6:	f043 0301 	orr.w	r3, r3, #1
 80083ca:	81a3      	strh	r3, [r4, #12]
 80083cc:	89a3      	ldrh	r3, [r4, #12]
 80083ce:	431d      	orrs	r5, r3
 80083d0:	81a5      	strh	r5, [r4, #12]
 80083d2:	e7cf      	b.n	8008374 <__smakebuf_r+0x18>

080083d4 <_fstat_r>:
 80083d4:	b538      	push	{r3, r4, r5, lr}
 80083d6:	4d07      	ldr	r5, [pc, #28]	; (80083f4 <_fstat_r+0x20>)
 80083d8:	2300      	movs	r3, #0
 80083da:	4604      	mov	r4, r0
 80083dc:	4608      	mov	r0, r1
 80083de:	4611      	mov	r1, r2
 80083e0:	602b      	str	r3, [r5, #0]
 80083e2:	f7f8 fe22 	bl	800102a <_fstat>
 80083e6:	1c43      	adds	r3, r0, #1
 80083e8:	d102      	bne.n	80083f0 <_fstat_r+0x1c>
 80083ea:	682b      	ldr	r3, [r5, #0]
 80083ec:	b103      	cbz	r3, 80083f0 <_fstat_r+0x1c>
 80083ee:	6023      	str	r3, [r4, #0]
 80083f0:	bd38      	pop	{r3, r4, r5, pc}
 80083f2:	bf00      	nop
 80083f4:	20000a50 	.word	0x20000a50

080083f8 <_isatty_r>:
 80083f8:	b538      	push	{r3, r4, r5, lr}
 80083fa:	4d06      	ldr	r5, [pc, #24]	; (8008414 <_isatty_r+0x1c>)
 80083fc:	2300      	movs	r3, #0
 80083fe:	4604      	mov	r4, r0
 8008400:	4608      	mov	r0, r1
 8008402:	602b      	str	r3, [r5, #0]
 8008404:	f7f8 fe21 	bl	800104a <_isatty>
 8008408:	1c43      	adds	r3, r0, #1
 800840a:	d102      	bne.n	8008412 <_isatty_r+0x1a>
 800840c:	682b      	ldr	r3, [r5, #0]
 800840e:	b103      	cbz	r3, 8008412 <_isatty_r+0x1a>
 8008410:	6023      	str	r3, [r4, #0]
 8008412:	bd38      	pop	{r3, r4, r5, pc}
 8008414:	20000a50 	.word	0x20000a50

08008418 <_init>:
 8008418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800841a:	bf00      	nop
 800841c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800841e:	bc08      	pop	{r3}
 8008420:	469e      	mov	lr, r3
 8008422:	4770      	bx	lr

08008424 <_fini>:
 8008424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008426:	bf00      	nop
 8008428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800842a:	bc08      	pop	{r3}
 800842c:	469e      	mov	lr, r3
 800842e:	4770      	bx	lr
