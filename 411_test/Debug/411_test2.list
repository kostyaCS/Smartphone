
411_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009180  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000834  08009318  08009318  00019318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b4c  08009b4c  0002013c  2**0
                  CONTENTS
  4 .ARM          00000008  08009b4c  08009b4c  00019b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b54  08009b54  0002013c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b54  08009b54  00019b54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009b58  08009b58  00019b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000013c  20000000  08009b5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d80  2000013c  08009c98  0002013c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000ebc  08009c98  00020ebc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002016c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017357  00000000  00000000  000201af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000433a  00000000  00000000  00037506  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001450  00000000  00000000  0003b840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000f60  00000000  00000000  0003cc90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a867  00000000  00000000  0003dbf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b71a  00000000  00000000  00058457  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008f238  00000000  00000000  00073b71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005358  00000000  00000000  00102dac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  00108104  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000013c 	.word	0x2000013c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009300 	.word	0x08009300

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000140 	.word	0x20000140
 80001d4:	08009300 	.word	0x08009300

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001ec:	f000 b970 	b.w	80004d0 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	460d      	mov	r5, r1
 8000210:	4604      	mov	r4, r0
 8000212:	460f      	mov	r7, r1
 8000214:	2b00      	cmp	r3, #0
 8000216:	d14a      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000218:	428a      	cmp	r2, r1
 800021a:	4694      	mov	ip, r2
 800021c:	d965      	bls.n	80002ea <__udivmoddi4+0xe2>
 800021e:	fab2 f382 	clz	r3, r2
 8000222:	b143      	cbz	r3, 8000236 <__udivmoddi4+0x2e>
 8000224:	fa02 fc03 	lsl.w	ip, r2, r3
 8000228:	f1c3 0220 	rsb	r2, r3, #32
 800022c:	409f      	lsls	r7, r3
 800022e:	fa20 f202 	lsr.w	r2, r0, r2
 8000232:	4317      	orrs	r7, r2
 8000234:	409c      	lsls	r4, r3
 8000236:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800023a:	fa1f f58c 	uxth.w	r5, ip
 800023e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000242:	0c22      	lsrs	r2, r4, #16
 8000244:	fb0e 7711 	mls	r7, lr, r1, r7
 8000248:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800024c:	fb01 f005 	mul.w	r0, r1, r5
 8000250:	4290      	cmp	r0, r2
 8000252:	d90a      	bls.n	800026a <__udivmoddi4+0x62>
 8000254:	eb1c 0202 	adds.w	r2, ip, r2
 8000258:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 800025c:	f080 811c 	bcs.w	8000498 <__udivmoddi4+0x290>
 8000260:	4290      	cmp	r0, r2
 8000262:	f240 8119 	bls.w	8000498 <__udivmoddi4+0x290>
 8000266:	3902      	subs	r1, #2
 8000268:	4462      	add	r2, ip
 800026a:	1a12      	subs	r2, r2, r0
 800026c:	b2a4      	uxth	r4, r4
 800026e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000272:	fb0e 2210 	mls	r2, lr, r0, r2
 8000276:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800027a:	fb00 f505 	mul.w	r5, r0, r5
 800027e:	42a5      	cmp	r5, r4
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x90>
 8000282:	eb1c 0404 	adds.w	r4, ip, r4
 8000286:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800028a:	f080 8107 	bcs.w	800049c <__udivmoddi4+0x294>
 800028e:	42a5      	cmp	r5, r4
 8000290:	f240 8104 	bls.w	800049c <__udivmoddi4+0x294>
 8000294:	4464      	add	r4, ip
 8000296:	3802      	subs	r0, #2
 8000298:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800029c:	1b64      	subs	r4, r4, r5
 800029e:	2100      	movs	r1, #0
 80002a0:	b11e      	cbz	r6, 80002aa <__udivmoddi4+0xa2>
 80002a2:	40dc      	lsrs	r4, r3
 80002a4:	2300      	movs	r3, #0
 80002a6:	e9c6 4300 	strd	r4, r3, [r6]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0xbc>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80ed 	beq.w	8000492 <__udivmoddi4+0x28a>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e9c6 0500 	strd	r0, r5, [r6]
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	d149      	bne.n	8000360 <__udivmoddi4+0x158>
 80002cc:	42ab      	cmp	r3, r5
 80002ce:	d302      	bcc.n	80002d6 <__udivmoddi4+0xce>
 80002d0:	4282      	cmp	r2, r0
 80002d2:	f200 80f8 	bhi.w	80004c6 <__udivmoddi4+0x2be>
 80002d6:	1a84      	subs	r4, r0, r2
 80002d8:	eb65 0203 	sbc.w	r2, r5, r3
 80002dc:	2001      	movs	r0, #1
 80002de:	4617      	mov	r7, r2
 80002e0:	2e00      	cmp	r6, #0
 80002e2:	d0e2      	beq.n	80002aa <__udivmoddi4+0xa2>
 80002e4:	e9c6 4700 	strd	r4, r7, [r6]
 80002e8:	e7df      	b.n	80002aa <__udivmoddi4+0xa2>
 80002ea:	b902      	cbnz	r2, 80002ee <__udivmoddi4+0xe6>
 80002ec:	deff      	udf	#255	; 0xff
 80002ee:	fab2 f382 	clz	r3, r2
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	f040 8090 	bne.w	8000418 <__udivmoddi4+0x210>
 80002f8:	1a8a      	subs	r2, r1, r2
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2101      	movs	r1, #1
 8000304:	fbb2 f5f7 	udiv	r5, r2, r7
 8000308:	fb07 2015 	mls	r0, r7, r5, r2
 800030c:	0c22      	lsrs	r2, r4, #16
 800030e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000312:	fb0e f005 	mul.w	r0, lr, r5
 8000316:	4290      	cmp	r0, r2
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x124>
 800031a:	eb1c 0202 	adds.w	r2, ip, r2
 800031e:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4290      	cmp	r0, r2
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2b8>
 800032a:	4645      	mov	r5, r8
 800032c:	1a12      	subs	r2, r2, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb2 f0f7 	udiv	r0, r2, r7
 8000334:	fb07 2210 	mls	r2, r7, r0, r2
 8000338:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x14e>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x14c>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2c2>
 8000354:	4610      	mov	r0, r2
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035e:	e79f      	b.n	80002a0 <__udivmoddi4+0x98>
 8000360:	f1c1 0720 	rsb	r7, r1, #32
 8000364:	408b      	lsls	r3, r1
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa05 f401 	lsl.w	r4, r5, r1
 8000372:	fa20 f307 	lsr.w	r3, r0, r7
 8000376:	40fd      	lsrs	r5, r7
 8000378:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037c:	4323      	orrs	r3, r4
 800037e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000382:	fa1f fe8c 	uxth.w	lr, ip
 8000386:	fb09 5518 	mls	r5, r9, r8, r5
 800038a:	0c1c      	lsrs	r4, r3, #16
 800038c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000390:	fb08 f50e 	mul.w	r5, r8, lr
 8000394:	42a5      	cmp	r5, r4
 8000396:	fa02 f201 	lsl.w	r2, r2, r1
 800039a:	fa00 f001 	lsl.w	r0, r0, r1
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1c 0404 	adds.w	r4, ip, r4
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2b4>
 80003ac:	42a5      	cmp	r5, r4
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2b4>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4464      	add	r4, ip
 80003b8:	1b64      	subs	r4, r4, r5
 80003ba:	b29d      	uxth	r5, r3
 80003bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c0:	fb09 4413 	mls	r4, r9, r3, r4
 80003c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1c 0404 	adds.w	r4, ip, r4
 80003d4:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2ac>
 80003da:	45a6      	cmp	lr, r4
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2ac>
 80003de:	3b02      	subs	r3, #2
 80003e0:	4464      	add	r4, ip
 80003e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e6:	fba3 9502 	umull	r9, r5, r3, r2
 80003ea:	eba4 040e 	sub.w	r4, r4, lr
 80003ee:	42ac      	cmp	r4, r5
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46ae      	mov	lr, r5
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x29c>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x298>
 80003f8:	b156      	cbz	r6, 8000410 <__udivmoddi4+0x208>
 80003fa:	ebb0 0208 	subs.w	r2, r0, r8
 80003fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000402:	fa04 f707 	lsl.w	r7, r4, r7
 8000406:	40ca      	lsrs	r2, r1
 8000408:	40cc      	lsrs	r4, r1
 800040a:	4317      	orrs	r7, r2
 800040c:	e9c6 7400 	strd	r7, r4, [r6]
 8000410:	4618      	mov	r0, r3
 8000412:	2100      	movs	r1, #0
 8000414:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000418:	f1c3 0120 	rsb	r1, r3, #32
 800041c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000420:	fa20 f201 	lsr.w	r2, r0, r1
 8000424:	fa25 f101 	lsr.w	r1, r5, r1
 8000428:	409d      	lsls	r5, r3
 800042a:	432a      	orrs	r2, r5
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb1 f0f7 	udiv	r0, r1, r7
 8000438:	fb07 1510 	mls	r5, r7, r0, r1
 800043c:	0c11      	lsrs	r1, r2, #16
 800043e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000442:	fb00 f50e 	mul.w	r5, r0, lr
 8000446:	428d      	cmp	r5, r1
 8000448:	fa04 f403 	lsl.w	r4, r4, r3
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x258>
 800044e:	eb1c 0101 	adds.w	r1, ip, r1
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 8000458:	428d      	cmp	r5, r1
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800045c:	3802      	subs	r0, #2
 800045e:	4461      	add	r1, ip
 8000460:	1b49      	subs	r1, r1, r5
 8000462:	b292      	uxth	r2, r2
 8000464:	fbb1 f5f7 	udiv	r5, r1, r7
 8000468:	fb07 1115 	mls	r1, r7, r5, r1
 800046c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000470:	fb05 f10e 	mul.w	r1, r5, lr
 8000474:	4291      	cmp	r1, r2
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x282>
 8000478:	eb1c 0202 	adds.w	r2, ip, r2
 800047c:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 8000482:	4291      	cmp	r1, r2
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000486:	3d02      	subs	r5, #2
 8000488:	4462      	add	r2, ip
 800048a:	1a52      	subs	r2, r2, r1
 800048c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0xfc>
 8000492:	4631      	mov	r1, r6
 8000494:	4630      	mov	r0, r6
 8000496:	e708      	b.n	80002aa <__udivmoddi4+0xa2>
 8000498:	4639      	mov	r1, r7
 800049a:	e6e6      	b.n	800026a <__udivmoddi4+0x62>
 800049c:	4610      	mov	r0, r2
 800049e:	e6fb      	b.n	8000298 <__udivmoddi4+0x90>
 80004a0:	4548      	cmp	r0, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ac:	3b01      	subs	r3, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004b0:	4645      	mov	r5, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x282>
 80004b4:	462b      	mov	r3, r5
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x258>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004c0:	3d02      	subs	r5, #2
 80004c2:	4462      	add	r2, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x124>
 80004c6:	4608      	mov	r0, r1
 80004c8:	e70a      	b.n	80002e0 <__udivmoddi4+0xd8>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x14e>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> SPI4_MOSI
*/
void MX_GPIO_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	b08c      	sub	sp, #48	; 0x30
 80004d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004da:	f107 031c 	add.w	r3, r7, #28
 80004de:	2200      	movs	r2, #0
 80004e0:	601a      	str	r2, [r3, #0]
 80004e2:	605a      	str	r2, [r3, #4]
 80004e4:	609a      	str	r2, [r3, #8]
 80004e6:	60da      	str	r2, [r3, #12]
 80004e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ea:	2300      	movs	r3, #0
 80004ec:	61bb      	str	r3, [r7, #24]
 80004ee:	4b90      	ldr	r3, [pc, #576]	; (8000730 <MX_GPIO_Init+0x25c>)
 80004f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f2:	4a8f      	ldr	r2, [pc, #572]	; (8000730 <MX_GPIO_Init+0x25c>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	6313      	str	r3, [r2, #48]	; 0x30
 80004fa:	4b8d      	ldr	r3, [pc, #564]	; (8000730 <MX_GPIO_Init+0x25c>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	61bb      	str	r3, [r7, #24]
 8000504:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	2300      	movs	r3, #0
 8000508:	617b      	str	r3, [r7, #20]
 800050a:	4b89      	ldr	r3, [pc, #548]	; (8000730 <MX_GPIO_Init+0x25c>)
 800050c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050e:	4a88      	ldr	r2, [pc, #544]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000510:	f043 0304 	orr.w	r3, r3, #4
 8000514:	6313      	str	r3, [r2, #48]	; 0x30
 8000516:	4b86      	ldr	r3, [pc, #536]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800051a:	f003 0304 	and.w	r3, r3, #4
 800051e:	617b      	str	r3, [r7, #20]
 8000520:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000522:	2300      	movs	r3, #0
 8000524:	613b      	str	r3, [r7, #16]
 8000526:	4b82      	ldr	r3, [pc, #520]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052a:	4a81      	ldr	r2, [pc, #516]	; (8000730 <MX_GPIO_Init+0x25c>)
 800052c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000530:	6313      	str	r3, [r2, #48]	; 0x30
 8000532:	4b7f      	ldr	r3, [pc, #508]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000536:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800053a:	613b      	str	r3, [r7, #16]
 800053c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800053e:	2300      	movs	r3, #0
 8000540:	60fb      	str	r3, [r7, #12]
 8000542:	4b7b      	ldr	r3, [pc, #492]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000546:	4a7a      	ldr	r2, [pc, #488]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	6313      	str	r3, [r2, #48]	; 0x30
 800054e:	4b78      	ldr	r3, [pc, #480]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000552:	f003 0301 	and.w	r3, r3, #1
 8000556:	60fb      	str	r3, [r7, #12]
 8000558:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800055a:	2300      	movs	r3, #0
 800055c:	60bb      	str	r3, [r7, #8]
 800055e:	4b74      	ldr	r3, [pc, #464]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000562:	4a73      	ldr	r2, [pc, #460]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6313      	str	r3, [r2, #48]	; 0x30
 800056a:	4b71      	ldr	r3, [pc, #452]	; (8000730 <MX_GPIO_Init+0x25c>)
 800056c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056e:	f003 0302 	and.w	r3, r3, #2
 8000572:	60bb      	str	r3, [r7, #8]
 8000574:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000576:	2300      	movs	r3, #0
 8000578:	607b      	str	r3, [r7, #4]
 800057a:	4b6d      	ldr	r3, [pc, #436]	; (8000730 <MX_GPIO_Init+0x25c>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a6c      	ldr	r2, [pc, #432]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000580:	f043 0308 	orr.w	r3, r3, #8
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b6a      	ldr	r3, [pc, #424]	; (8000730 <MX_GPIO_Init+0x25c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0308 	and.w	r3, r3, #8
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2108      	movs	r1, #8
 8000596:	4867      	ldr	r0, [pc, #412]	; (8000734 <MX_GPIO_Init+0x260>)
 8000598:	f002 f802 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800059c:	2201      	movs	r2, #1
 800059e:	2101      	movs	r1, #1
 80005a0:	4865      	ldr	r0, [pc, #404]	; (8000738 <MX_GPIO_Init+0x264>)
 80005a2:	f001 fffd 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 80005a6:	2200      	movs	r2, #0
 80005a8:	210c      	movs	r1, #12
 80005aa:	4864      	ldr	r0, [pc, #400]	; (800073c <MX_GPIO_Init+0x268>)
 80005ac:	f001 fff8 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 80005b0:	2200      	movs	r2, #0
 80005b2:	2130      	movs	r1, #48	; 0x30
 80005b4:	4860      	ldr	r0, [pc, #384]	; (8000738 <MX_GPIO_Init+0x264>)
 80005b6:	f001 fff3 	bl	80025a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 80005ba:	2200      	movs	r2, #0
 80005bc:	f240 11b1 	movw	r1, #433	; 0x1b1
 80005c0:	485f      	ldr	r0, [pc, #380]	; (8000740 <MX_GPIO_Init+0x26c>)
 80005c2:	f001 ffed 	bl	80025a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_8, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80005c6:	2200      	movs	r2, #0
 80005c8:	f24f 0110 	movw	r1, #61456	; 0xf010
 80005cc:	485d      	ldr	r0, [pc, #372]	; (8000744 <MX_GPIO_Init+0x270>)
 80005ce:	f001 ffe7 	bl	80025a0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 80005d2:	2304      	movs	r3, #4
 80005d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005d6:	2300      	movs	r3, #0
 80005d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 80005de:	f107 031c 	add.w	r3, r7, #28
 80005e2:	4619      	mov	r1, r3
 80005e4:	4853      	ldr	r0, [pc, #332]	; (8000734 <MX_GPIO_Init+0x260>)
 80005e6:	f001 fe3f 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80005ea:	2308      	movs	r3, #8
 80005ec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005ee:	2301      	movs	r3, #1
 80005f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005f6:	2300      	movs	r3, #0
 80005f8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80005fa:	f107 031c 	add.w	r3, r7, #28
 80005fe:	4619      	mov	r1, r3
 8000600:	484c      	ldr	r0, [pc, #304]	; (8000734 <MX_GPIO_Init+0x260>)
 8000602:	f001 fe31 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 8000606:	2330      	movs	r3, #48	; 0x30
 8000608:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800060a:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 800060e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000610:	2300      	movs	r3, #0
 8000612:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000614:	f107 031c 	add.w	r3, r7, #28
 8000618:	4619      	mov	r1, r3
 800061a:	4846      	ldr	r0, [pc, #280]	; (8000734 <MX_GPIO_Init+0x260>)
 800061c:	f001 fe24 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5;
 8000620:	2331      	movs	r3, #49	; 0x31
 8000622:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000624:	2301      	movs	r3, #1
 8000626:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000628:	2300      	movs	r3, #0
 800062a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800062c:	2300      	movs	r3, #0
 800062e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000630:	f107 031c 	add.w	r3, r7, #28
 8000634:	4619      	mov	r1, r3
 8000636:	4840      	ldr	r0, [pc, #256]	; (8000738 <MX_GPIO_Init+0x264>)
 8000638:	f001 fe16 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 800063c:	2302      	movs	r3, #2
 800063e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000640:	2302      	movs	r3, #2
 8000642:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000644:	2300      	movs	r3, #0
 8000646:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000648:	2303      	movs	r3, #3
 800064a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 800064c:	2305      	movs	r3, #5
 800064e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000650:	f107 031c 	add.w	r3, r7, #28
 8000654:	4619      	mov	r1, r3
 8000656:	4839      	ldr	r0, [pc, #228]	; (800073c <MX_GPIO_Init+0x268>)
 8000658:	f001 fe06 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800065c:	230c      	movs	r3, #12
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066c:	f107 031c 	add.w	r3, r7, #28
 8000670:	4619      	mov	r1, r3
 8000672:	4832      	ldr	r0, [pc, #200]	; (800073c <MX_GPIO_Init+0x268>)
 8000674:	f001 fdf8 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB7
                           PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7
 8000678:	f240 13b1 	movw	r3, #433	; 0x1b1
 800067c:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067e:	2301      	movs	r3, #1
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000686:	2300      	movs	r3, #0
 8000688:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	4619      	mov	r1, r3
 8000690:	482b      	ldr	r0, [pc, #172]	; (8000740 <MX_GPIO_Init+0x26c>)
 8000692:	f001 fde9 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000696:	f24f 0310 	movw	r3, #61456	; 0xf010
 800069a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069c:	2301      	movs	r3, #1
 800069e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a0:	2300      	movs	r3, #0
 80006a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a4:	2300      	movs	r3, #0
 80006a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006a8:	f107 031c 	add.w	r3, r7, #28
 80006ac:	4619      	mov	r1, r3
 80006ae:	4825      	ldr	r0, [pc, #148]	; (8000744 <MX_GPIO_Init+0x270>)
 80006b0:	f001 fdda 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80006b4:	230f      	movs	r3, #15
 80006b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006be:	2301      	movs	r3, #1
 80006c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006c2:	f107 031c 	add.w	r3, r7, #28
 80006c6:	4619      	mov	r1, r3
 80006c8:	481e      	ldr	r0, [pc, #120]	; (8000744 <MX_GPIO_Init+0x270>)
 80006ca:	f001 fdcd 	bl	8002268 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80006ce:	2320      	movs	r3, #32
 80006d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d2:	2300      	movs	r3, #0
 80006d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d6:	2300      	movs	r3, #0
 80006d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 031c 	add.w	r3, r7, #28
 80006de:	4619      	mov	r1, r3
 80006e0:	4818      	ldr	r0, [pc, #96]	; (8000744 <MX_GPIO_Init+0x270>)
 80006e2:	f001 fdc1 	bl	8002268 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	2006      	movs	r0, #6
 80006ec:	f001 fd85 	bl	80021fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006f0:	2006      	movs	r0, #6
 80006f2:	f001 fd9e 	bl	8002232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2007      	movs	r0, #7
 80006fc:	f001 fd7d 	bl	80021fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000700:	2007      	movs	r0, #7
 8000702:	f001 fd96 	bl	8002232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000706:	2200      	movs	r2, #0
 8000708:	2100      	movs	r1, #0
 800070a:	2008      	movs	r0, #8
 800070c:	f001 fd75 	bl	80021fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000710:	2008      	movs	r0, #8
 8000712:	f001 fd8e 	bl	8002232 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2009      	movs	r0, #9
 800071c:	f001 fd6d 	bl	80021fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000720:	2009      	movs	r0, #9
 8000722:	f001 fd86 	bl	8002232 <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3730      	adds	r7, #48	; 0x30
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40021000 	.word	0x40021000
 8000738:	40020800 	.word	0x40020800
 800073c:	40020000 	.word	0x40020000
 8000740:	40020400 	.word	0x40020400
 8000744:	40020c00 	.word	0x40020c00

08000748 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800074c:	4b12      	ldr	r3, [pc, #72]	; (8000798 <MX_I2C1_Init+0x50>)
 800074e:	4a13      	ldr	r2, [pc, #76]	; (800079c <MX_I2C1_Init+0x54>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000752:	4b11      	ldr	r3, [pc, #68]	; (8000798 <MX_I2C1_Init+0x50>)
 8000754:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_I2C1_Init+0x58>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000758:	4b0f      	ldr	r3, [pc, #60]	; (8000798 <MX_I2C1_Init+0x50>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800075e:	4b0e      	ldr	r3, [pc, #56]	; (8000798 <MX_I2C1_Init+0x50>)
 8000760:	2200      	movs	r2, #0
 8000762:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000764:	4b0c      	ldr	r3, [pc, #48]	; (8000798 <MX_I2C1_Init+0x50>)
 8000766:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800076a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800076c:	4b0a      	ldr	r3, [pc, #40]	; (8000798 <MX_I2C1_Init+0x50>)
 800076e:	2200      	movs	r2, #0
 8000770:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000772:	4b09      	ldr	r3, [pc, #36]	; (8000798 <MX_I2C1_Init+0x50>)
 8000774:	2200      	movs	r2, #0
 8000776:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000778:	4b07      	ldr	r3, [pc, #28]	; (8000798 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077e:	4b06      	ldr	r3, [pc, #24]	; (8000798 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000784:	4804      	ldr	r0, [pc, #16]	; (8000798 <MX_I2C1_Init+0x50>)
 8000786:	f001 ff49 	bl	800261c <HAL_I2C_Init>
 800078a:	4603      	mov	r3, r0
 800078c:	2b00      	cmp	r3, #0
 800078e:	d001      	beq.n	8000794 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000790:	f001 fa8a 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000794:	bf00      	nop
 8000796:	bd80      	pop	{r7, pc}
 8000798:	20000158 	.word	0x20000158
 800079c:	40005400 	.word	0x40005400
 80007a0:	000186a0 	.word	0x000186a0

080007a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08a      	sub	sp, #40	; 0x28
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ac:	f107 0314 	add.w	r3, r7, #20
 80007b0:	2200      	movs	r2, #0
 80007b2:	601a      	str	r2, [r3, #0]
 80007b4:	605a      	str	r2, [r3, #4]
 80007b6:	609a      	str	r2, [r3, #8]
 80007b8:	60da      	str	r2, [r3, #12]
 80007ba:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <HAL_I2C_MspInit+0x84>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d12c      	bne.n	8000820 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c6:	2300      	movs	r3, #0
 80007c8:	613b      	str	r3, [r7, #16]
 80007ca:	4b18      	ldr	r3, [pc, #96]	; (800082c <HAL_I2C_MspInit+0x88>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	4a17      	ldr	r2, [pc, #92]	; (800082c <HAL_I2C_MspInit+0x88>)
 80007d0:	f043 0302 	orr.w	r3, r3, #2
 80007d4:	6313      	str	r3, [r2, #48]	; 0x30
 80007d6:	4b15      	ldr	r3, [pc, #84]	; (800082c <HAL_I2C_MspInit+0x88>)
 80007d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007da:	f003 0302 	and.w	r3, r3, #2
 80007de:	613b      	str	r3, [r7, #16]
 80007e0:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80007e2:	f44f 7310 	mov.w	r3, #576	; 0x240
 80007e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80007e8:	2312      	movs	r3, #18
 80007ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f0:	2300      	movs	r3, #0
 80007f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80007f4:	2304      	movs	r3, #4
 80007f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f8:	f107 0314 	add.w	r3, r7, #20
 80007fc:	4619      	mov	r1, r3
 80007fe:	480c      	ldr	r0, [pc, #48]	; (8000830 <HAL_I2C_MspInit+0x8c>)
 8000800:	f001 fd32 	bl	8002268 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
 8000808:	4b08      	ldr	r3, [pc, #32]	; (800082c <HAL_I2C_MspInit+0x88>)
 800080a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080c:	4a07      	ldr	r2, [pc, #28]	; (800082c <HAL_I2C_MspInit+0x88>)
 800080e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000812:	6413      	str	r3, [r2, #64]	; 0x40
 8000814:	4b05      	ldr	r3, [pc, #20]	; (800082c <HAL_I2C_MspInit+0x88>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800081c:	60fb      	str	r3, [r7, #12]
 800081e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000820:	bf00      	nop
 8000822:	3728      	adds	r7, #40	; 0x28
 8000824:	46bd      	mov	sp, r7
 8000826:	bd80      	pop	{r7, pc}
 8000828:	40005400 	.word	0x40005400
 800082c:	40023800 	.word	0x40023800
 8000830:	40020400 	.word	0x40020400

08000834 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8000838:	4b12      	ldr	r3, [pc, #72]	; (8000884 <MX_I2S2_Init+0x50>)
 800083a:	4a13      	ldr	r2, [pc, #76]	; (8000888 <MX_I2S2_Init+0x54>)
 800083c:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800083e:	4b11      	ldr	r3, [pc, #68]	; (8000884 <MX_I2S2_Init+0x50>)
 8000840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000844:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8000846:	4b0f      	ldr	r3, [pc, #60]	; (8000884 <MX_I2S2_Init+0x50>)
 8000848:	2200      	movs	r2, #0
 800084a:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 800084c:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <MX_I2S2_Init+0x50>)
 800084e:	2200      	movs	r2, #0
 8000850:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8000852:	4b0c      	ldr	r3, [pc, #48]	; (8000884 <MX_I2S2_Init+0x50>)
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000858:	4b0a      	ldr	r3, [pc, #40]	; (8000884 <MX_I2S2_Init+0x50>)
 800085a:	4a0c      	ldr	r2, [pc, #48]	; (800088c <MX_I2S2_Init+0x58>)
 800085c:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <MX_I2S2_Init+0x50>)
 8000860:	2200      	movs	r2, #0
 8000862:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8000864:	4b07      	ldr	r3, [pc, #28]	; (8000884 <MX_I2S2_Init+0x50>)
 8000866:	2200      	movs	r2, #0
 8000868:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <MX_I2S2_Init+0x50>)
 800086c:	2201      	movs	r2, #1
 800086e:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_I2S2_Init+0x50>)
 8000872:	f002 f817 	bl	80028a4 <HAL_I2S_Init>
 8000876:	4603      	mov	r3, r0
 8000878:	2b00      	cmp	r3, #0
 800087a:	d001      	beq.n	8000880 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 800087c:	f001 fa14 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000880:	bf00      	nop
 8000882:	bd80      	pop	{r7, pc}
 8000884:	200001ac 	.word	0x200001ac
 8000888:	40003800 	.word	0x40003800
 800088c:	00017700 	.word	0x00017700

08000890 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000894:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <MX_I2S3_Init+0x54>)
 8000896:	4a14      	ldr	r2, [pc, #80]	; (80008e8 <MX_I2S3_Init+0x58>)
 8000898:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800089a:	4b12      	ldr	r3, [pc, #72]	; (80008e4 <MX_I2S3_Init+0x54>)
 800089c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a0:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80008a8:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008ae:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008b4:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <MX_I2S3_Init+0x5c>)
 80008ba:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008bc:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008be:	2200      	movs	r2, #0
 80008c0:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008c2:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008c8:	4b06      	ldr	r3, [pc, #24]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008ce:	4805      	ldr	r0, [pc, #20]	; (80008e4 <MX_I2S3_Init+0x54>)
 80008d0:	f001 ffe8 	bl	80028a4 <HAL_I2S_Init>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80008da:	f001 f9e5 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001f4 	.word	0x200001f4
 80008e8:	40003c00 	.word	0x40003c00
 80008ec:	00017700 	.word	0x00017700

080008f0 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b08e      	sub	sp, #56	; 0x38
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	2200      	movs	r2, #0
 80008fe:	601a      	str	r2, [r3, #0]
 8000900:	605a      	str	r2, [r3, #4]
 8000902:	609a      	str	r2, [r3, #8]
 8000904:	60da      	str	r2, [r3, #12]
 8000906:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	4a59      	ldr	r2, [pc, #356]	; (8000a74 <HAL_I2S_MspInit+0x184>)
 800090e:	4293      	cmp	r3, r2
 8000910:	d15b      	bne.n	80009ca <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
 8000916:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800091a:	4a57      	ldr	r2, [pc, #348]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 800091c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000920:	6413      	str	r3, [r2, #64]	; 0x40
 8000922:	4b55      	ldr	r3, [pc, #340]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000926:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800092a:	623b      	str	r3, [r7, #32]
 800092c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	61fb      	str	r3, [r7, #28]
 8000932:	4b51      	ldr	r3, [pc, #324]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a50      	ldr	r2, [pc, #320]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000938:	f043 0304 	orr.w	r3, r3, #4
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b4e      	ldr	r3, [pc, #312]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0304 	and.w	r3, r3, #4
 8000946:	61fb      	str	r3, [r7, #28]
 8000948:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	61bb      	str	r3, [r7, #24]
 800094e:	4b4a      	ldr	r3, [pc, #296]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a49      	ldr	r2, [pc, #292]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b47      	ldr	r3, [pc, #284]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	61bb      	str	r3, [r7, #24]
 8000964:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000966:	2304      	movs	r3, #4
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800096a:	2302      	movs	r3, #2
 800096c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000972:	2300      	movs	r3, #0
 8000974:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000976:	2306      	movs	r3, #6
 8000978:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4619      	mov	r1, r3
 8000980:	483e      	ldr	r0, [pc, #248]	; (8000a7c <HAL_I2S_MspInit+0x18c>)
 8000982:	f001 fc71 	bl	8002268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000986:	2308      	movs	r3, #8
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800098a:	2302      	movs	r3, #2
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000992:	2300      	movs	r3, #0
 8000994:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000996:	2305      	movs	r3, #5
 8000998:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800099a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800099e:	4619      	mov	r1, r3
 80009a0:	4836      	ldr	r0, [pc, #216]	; (8000a7c <HAL_I2S_MspInit+0x18c>)
 80009a2:	f001 fc61 	bl	8002268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 80009a6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ac:	2302      	movs	r3, #2
 80009ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b4:	2300      	movs	r3, #0
 80009b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80009b8:	2305      	movs	r3, #5
 80009ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009c0:	4619      	mov	r1, r3
 80009c2:	482f      	ldr	r0, [pc, #188]	; (8000a80 <HAL_I2S_MspInit+0x190>)
 80009c4:	f001 fc50 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80009c8:	e04f      	b.n	8000a6a <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4a2d      	ldr	r2, [pc, #180]	; (8000a84 <HAL_I2S_MspInit+0x194>)
 80009d0:	4293      	cmp	r3, r2
 80009d2:	d14a      	bne.n	8000a6a <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80009d4:	2300      	movs	r3, #0
 80009d6:	617b      	str	r3, [r7, #20]
 80009d8:	4b27      	ldr	r3, [pc, #156]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a26      	ldr	r2, [pc, #152]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 80009de:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b24      	ldr	r3, [pc, #144]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80009ec:	617b      	str	r3, [r7, #20]
 80009ee:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	2300      	movs	r3, #0
 80009f2:	613b      	str	r3, [r7, #16]
 80009f4:	4b20      	ldr	r3, [pc, #128]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 80009f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f8:	4a1f      	ldr	r2, [pc, #124]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 80009fa:	f043 0301 	orr.w	r3, r3, #1
 80009fe:	6313      	str	r3, [r2, #48]	; 0x30
 8000a00:	4b1d      	ldr	r3, [pc, #116]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000a02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a04:	f003 0301 	and.w	r3, r3, #1
 8000a08:	613b      	str	r3, [r7, #16]
 8000a0a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	60fb      	str	r3, [r7, #12]
 8000a10:	4b19      	ldr	r3, [pc, #100]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a14:	4a18      	ldr	r2, [pc, #96]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000a16:	f043 0304 	orr.w	r3, r3, #4
 8000a1a:	6313      	str	r3, [r2, #48]	; 0x30
 8000a1c:	4b16      	ldr	r3, [pc, #88]	; (8000a78 <HAL_I2S_MspInit+0x188>)
 8000a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a20:	f003 0304 	and.w	r3, r3, #4
 8000a24:	60fb      	str	r3, [r7, #12]
 8000a26:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000a28:	2310      	movs	r3, #16
 8000a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a2c:	2302      	movs	r3, #2
 8000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a30:	2300      	movs	r3, #0
 8000a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a34:	2300      	movs	r3, #0
 8000a36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a38:	2306      	movs	r3, #6
 8000a3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000a3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a40:	4619      	mov	r1, r3
 8000a42:	4811      	ldr	r0, [pc, #68]	; (8000a88 <HAL_I2S_MspInit+0x198>)
 8000a44:	f001 fc10 	bl	8002268 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000a48:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000a4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a4e:	2302      	movs	r3, #2
 8000a50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a52:	2300      	movs	r3, #0
 8000a54:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a56:	2300      	movs	r3, #0
 8000a58:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000a5a:	2306      	movs	r3, #6
 8000a5c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a62:	4619      	mov	r1, r3
 8000a64:	4805      	ldr	r0, [pc, #20]	; (8000a7c <HAL_I2S_MspInit+0x18c>)
 8000a66:	f001 fbff 	bl	8002268 <HAL_GPIO_Init>
}
 8000a6a:	bf00      	nop
 8000a6c:	3738      	adds	r7, #56	; 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40003800 	.word	0x40003800
 8000a78:	40023800 	.word	0x40023800
 8000a7c:	40020800 	.word	0x40020800
 8000a80:	40020400 	.word	0x40020400
 8000a84:	40003c00 	.word	0x40003c00
 8000a88:	40020000 	.word	0x40020000

08000a8c <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b082      	sub	sp, #8
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 fd7b 	bl	8001592 <LCD5110_refresh_ll>
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}

08000aa4 <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	68b9      	ldr	r1, [r7, #8]
 8000aba:	68f8      	ldr	r0, [r7, #12]
 8000abc:	f000 fa4e 	bl	8000f5c <LCD5110_wset_cursor>
}
 8000ac0:	bf00      	nop
 8000ac2:	3710      	adds	r7, #16
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}

08000ac8 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 fb04 	bl	80010e0 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000ad8:	687a      	ldr	r2, [r7, #4]
 8000ada:	2100      	movs	r1, #0
 8000adc:	2000      	movs	r0, #0
 8000ade:	f7ff ffe1 	bl	8000aa4 <LCD5110_set_cursor>
}
 8000ae2:	bf00      	nop
 8000ae4:	3708      	adds	r7, #8
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}

08000aea <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000aea:	b580      	push	{r7, lr}
 8000aec:	b084      	sub	sp, #16
 8000aee:	af00      	add	r7, sp, #0
 8000af0:	60f8      	str	r0, [r7, #12]
 8000af2:	60b9      	str	r1, [r7, #8]
 8000af4:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	68b9      	ldr	r1, [r7, #8]
 8000b00:	68f8      	ldr	r0, [r7, #12]
 8000b02:	f000 fa61 	bl	8000fc8 <LCD5110_wprint>
}
 8000b06:	bf00      	nop
 8000b08:	3710      	adds	r7, #16
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <LCD5110_max>:
extern inline void LCD5110_fill_scr(LCD5110_display* lcd_conf);
extern inline void LCD5110_fill_win(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
extern inline void LCD5110_endl(LCD5110_display* lcd_conf);
extern inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf);

static inline int LCD5110_max(int a, int b) {
 8000b0e:	b480      	push	{r7}
 8000b10:	b083      	sub	sp, #12
 8000b12:	af00      	add	r7, sp, #0
 8000b14:	6078      	str	r0, [r7, #4]
 8000b16:	6039      	str	r1, [r7, #0]
	return a > b ? a : b;
 8000b18:	683a      	ldr	r2, [r7, #0]
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	bfb8      	it	lt
 8000b20:	4613      	movlt	r3, r2
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	370c      	adds	r7, #12
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <LCD5110_min>:

static inline int LCD5110_min(int a, int b) {
 8000b2e:	b480      	push	{r7}
 8000b30:	b083      	sub	sp, #12
 8000b32:	af00      	add	r7, sp, #0
 8000b34:	6078      	str	r0, [r7, #4]
 8000b36:	6039      	str	r1, [r7, #0]
	return a < b ? a : b;
 8000b38:	683a      	ldr	r2, [r7, #0]
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4293      	cmp	r3, r2
 8000b3e:	bfa8      	it	ge
 8000b40:	4613      	movge	r3, r2
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	370c      	adds	r7, #12
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr

08000b4e <LCD5110_wline>:
}
#endif

void LCD5110_wline(int x1, int y1, int x2, int y2, int color,
					LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000b4e:	b580      	push	{r7, lr}
 8000b50:	b08e      	sub	sp, #56	; 0x38
 8000b52:	af00      	add	r7, sp, #0
 8000b54:	60f8      	str	r0, [r7, #12]
 8000b56:	60b9      	str	r1, [r7, #8]
 8000b58:	607a      	str	r2, [r7, #4]
 8000b5a:	603b      	str	r3, [r7, #0]
	x1 += win->frame.x0;
 8000b5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b62:	461a      	mov	r2, r3
 8000b64:	68fb      	ldr	r3, [r7, #12]
 8000b66:	4413      	add	r3, r2
 8000b68:	60fb      	str	r3, [r7, #12]
	y1 += win->frame.y0;
 8000b6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b6c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b70:	461a      	mov	r2, r3
 8000b72:	68bb      	ldr	r3, [r7, #8]
 8000b74:	4413      	add	r3, r2
 8000b76:	60bb      	str	r3, [r7, #8]
	x2 += win->frame.x0;
 8000b78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	4413      	add	r3, r2
 8000b84:	607b      	str	r3, [r7, #4]
	y2 += win->frame.y0;
 8000b86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000b88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	4413      	add	r3, r2
 8000b92:	603b      	str	r3, [r7, #0]

	int zn = x1 - x2;
 8000b94:	68fa      	ldr	r2, [r7, #12]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	//float k = (y1-y2)/zn;
	//float b = y1 - k*x1;
	int yb = LCD5110_min(y1, y2);
 8000b9c:	6839      	ldr	r1, [r7, #0]
 8000b9e:	68b8      	ldr	r0, [r7, #8]
 8000ba0:	f7ff ffc5 	bl	8000b2e <LCD5110_min>
 8000ba4:	62b8      	str	r0, [r7, #40]	; 0x28
	int ye = LCD5110_max(y1, y2);
 8000ba6:	6839      	ldr	r1, [r7, #0]
 8000ba8:	68b8      	ldr	r0, [r7, #8]
 8000baa:	f7ff ffb0 	bl	8000b0e <LCD5110_max>
 8000bae:	6278      	str	r0, [r7, #36]	; 0x24
	int xb = LCD5110_min(x1, x2);
 8000bb0:	6879      	ldr	r1, [r7, #4]
 8000bb2:	68f8      	ldr	r0, [r7, #12]
 8000bb4:	f7ff ffbb 	bl	8000b2e <LCD5110_min>
 8000bb8:	6238      	str	r0, [r7, #32]
	int xe = LCD5110_max(x1, x2);
 8000bba:	6879      	ldr	r1, [r7, #4]
 8000bbc:	68f8      	ldr	r0, [r7, #12]
 8000bbe:	f7ff ffa6 	bl	8000b0e <LCD5110_max>
 8000bc2:	61f8      	str	r0, [r7, #28]
	if ((ye - yb) < (xe - xb)) {
 8000bc4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000bc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bc8:	1ad2      	subs	r2, r2, r3
 8000bca:	69f9      	ldr	r1, [r7, #28]
 8000bcc:	6a3b      	ldr	r3, [r7, #32]
 8000bce:	1acb      	subs	r3, r1, r3
 8000bd0:	429a      	cmp	r2, r3
 8000bd2:	da42      	bge.n	8000c5a <LCD5110_wline+0x10c>
		for (int i = xb; i <= xe; ++i) {
 8000bd4:	6a3b      	ldr	r3, [r7, #32]
 8000bd6:	637b      	str	r3, [r7, #52]	; 0x34
 8000bd8:	e03a      	b.n	8000c50 <LCD5110_wline+0x102>
			int cury = (y1 - y2) * (i - x1) / zn + y1;
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	683b      	ldr	r3, [r7, #0]
 8000bde:	1ad3      	subs	r3, r2, r3
 8000be0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000be2:	68fa      	ldr	r2, [r7, #12]
 8000be4:	1a8a      	subs	r2, r1, r2
 8000be6:	fb03 f202 	mul.w	r2, r3, r2
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	fb92 f3f3 	sdiv	r3, r2, r3
 8000bf0:	68ba      	ldr	r2, [r7, #8]
 8000bf2:	4413      	add	r3, r2
 8000bf4:	617b      	str	r3, [r7, #20]
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000bf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000bf8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c00:	4293      	cmp	r3, r2
 8000c02:	db22      	blt.n	8000c4a <LCD5110_wline+0xfc>
 8000c04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c12:	4413      	add	r3, r2
 8000c14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c16:	429a      	cmp	r2, r3
 8000c18:	da17      	bge.n	8000c4a <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000c1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c1c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c20:	461a      	mov	r2, r3
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	4293      	cmp	r3, r2
 8000c26:	db10      	blt.n	8000c4a <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c2e:	461a      	mov	r2, r3
 8000c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000c36:	4413      	add	r3, r2
 8000c38:	697a      	ldr	r2, [r7, #20]
 8000c3a:	429a      	cmp	r2, r3
 8000c3c:	da05      	bge.n	8000c4a <LCD5110_wline+0xfc>
			{
				LCD5110_putpix(i, cury, color, &lcd_conf->hw_conf);
 8000c3e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000c40:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000c42:	6979      	ldr	r1, [r7, #20]
 8000c44:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000c46:	f000 fa66 	bl	8001116 <LCD5110_putpix>
		for (int i = xb; i <= xe; ++i) {
 8000c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4c:	3301      	adds	r3, #1
 8000c4e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c50:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	ddc0      	ble.n	8000bda <LCD5110_wline+0x8c>
			{
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
			}
		}
	}
}
 8000c58:	e041      	b.n	8000cde <LCD5110_wline+0x190>
		for (int i = yb; i <= ye; ++i) {
 8000c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c5c:	633b      	str	r3, [r7, #48]	; 0x30
 8000c5e:	e03a      	b.n	8000cd6 <LCD5110_wline+0x188>
			int curx = (i - y1) * zn / (y1 - y2) + x1;
 8000c60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000c68:	fb03 f202 	mul.w	r2, r3, r2
 8000c6c:	68b9      	ldr	r1, [r7, #8]
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	1acb      	subs	r3, r1, r3
 8000c72:	fb92 f3f3 	sdiv	r3, r2, r3
 8000c76:	68fa      	ldr	r2, [r7, #12]
 8000c78:	4413      	add	r3, r2
 8000c7a:	61bb      	str	r3, [r7, #24]
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000c7c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c82:	461a      	mov	r2, r3
 8000c84:	69bb      	ldr	r3, [r7, #24]
 8000c86:	4293      	cmp	r3, r2
 8000c88:	db22      	blt.n	8000cd0 <LCD5110_wline+0x182>
 8000c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c90:	461a      	mov	r2, r3
 8000c92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c94:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c98:	4413      	add	r3, r2
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	429a      	cmp	r2, r3
 8000c9e:	da17      	bge.n	8000cd0 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ca2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ca6:	461a      	mov	r2, r3
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000ca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000caa:	4293      	cmp	r3, r2
 8000cac:	db10      	blt.n	8000cd0 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb8:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cbc:	4413      	add	r3, r2
 8000cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	da05      	bge.n	8000cd0 <LCD5110_wline+0x182>
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
 8000cc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cc6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000cca:	69b8      	ldr	r0, [r7, #24]
 8000ccc:	f000 fa23 	bl	8001116 <LCD5110_putpix>
		for (int i = yb; i <= ye; ++i) {
 8000cd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	633b      	str	r3, [r7, #48]	; 0x30
 8000cd6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cda:	429a      	cmp	r2, r3
 8000cdc:	ddc0      	ble.n	8000c60 <LCD5110_wline+0x112>
}
 8000cde:	bf00      	nop
 8000ce0:	3738      	adds	r7, #56	; 0x38
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <LCD5110_wrect>:

void LCD5110_wrect(rect_t* rect, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000ce6:	b590      	push	{r4, r7, lr}
 8000ce8:	b089      	sub	sp, #36	; 0x24
 8000cea:	af04      	add	r7, sp, #16
 8000cec:	60f8      	str	r0, [r7, #12]
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	603b      	str	r3, [r7, #0]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d02:	4619      	mov	r1, r3
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d0a:	461a      	mov	r2, r3
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d12:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000d14:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000d1c:	461c      	mov	r4, r3
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	9302      	str	r3, [sp, #8]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	9301      	str	r3, [sp, #4]
 8000d26:	68bb      	ldr	r3, [r7, #8]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	4623      	mov	r3, r4
 8000d2c:	f7ff ff0f 	bl	8000b4e <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000d30:	68fb      	ldr	r3, [r7, #12]
 8000d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d36:	461c      	mov	r4, r3
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d3e:	461a      	mov	r2, r3
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d46:	4413      	add	r3, r2
 8000d48:	1e59      	subs	r1, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d50:	461a      	mov	r2, r3
 8000d52:	68fb      	ldr	r3, [r7, #12]
 8000d54:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d58:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000d5a:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d62:	4618      	mov	r0, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d6a:	4403      	add	r3, r0
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000d6c:	1e58      	subs	r0, r3, #1
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	9302      	str	r3, [sp, #8]
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	9301      	str	r3, [sp, #4]
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	9300      	str	r3, [sp, #0]
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	4620      	mov	r0, r4
 8000d7e:	f7ff fee6 	bl	8000b4e <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d88:	4618      	mov	r0, r3
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d90:	4619      	mov	r1, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	f9b3 3000 	ldrsh.w	r3, [r3]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000d98:	461c      	mov	r4, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000da0:	461a      	mov	r2, r3
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000da8:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000daa:	1e5a      	subs	r2, r3, #1
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	9302      	str	r3, [sp, #8]
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	9301      	str	r3, [sp, #4]
 8000db4:	68bb      	ldr	r3, [r7, #8]
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	4613      	mov	r3, r2
 8000dba:	4622      	mov	r2, r4
 8000dbc:	f7ff fec7 	bl	8000b4e <LCD5110_wline>
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000dc0:	68fb      	ldr	r3, [r7, #12]
 8000dc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc6:	461a      	mov	r2, r3
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dce:	4413      	add	r3, r2
 8000dd0:	1e58      	subs	r0, r3, #1
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dd8:	461c      	mov	r4, r3
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000de0:	461a      	mov	r2, r3
 8000de2:	68fb      	ldr	r3, [r7, #12]
 8000de4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000de8:	4413      	add	r3, r2
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000dea:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000df2:	4619      	mov	r1, r3
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dfa:	440b      	add	r3, r1
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000dfc:	1e59      	subs	r1, r3, #1
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	9302      	str	r3, [sp, #8]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	9301      	str	r3, [sp, #4]
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	9300      	str	r3, [sp, #0]
 8000e0a:	460b      	mov	r3, r1
 8000e0c:	4621      	mov	r1, r4
 8000e0e:	f7ff fe9e 	bl	8000b4e <LCD5110_wline>
}
 8000e12:	bf00      	nop
 8000e14:	3714      	adds	r7, #20
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd90      	pop	{r4, r7, pc}

08000e1a <LCD5110_rect>:

void LCD5110_rect(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	b084      	sub	sp, #16
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	60f8      	str	r0, [r7, #12]
 8000e22:	60b9      	str	r1, [r7, #8]
 8000e24:	607a      	str	r2, [r7, #4]
	LCD5110_wrect(rect, color, &lcd_conf->def_scr, lcd_conf);
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	68b9      	ldr	r1, [r7, #8]
 8000e30:	68f8      	ldr	r0, [r7, #12]
 8000e32:	f7ff ff58 	bl	8000ce6 <LCD5110_wrect>
}
 8000e36:	bf00      	nop
 8000e38:	3710      	adds	r7, #16
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <LCD5110_rect_fill>:
void LCD5110_win_draw_frame(int color, LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
	LCD5110_rect(&win->frame, color, lcd_conf);
}

void LCD5110_rect_fill(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b086      	sub	sp, #24
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	60f8      	str	r0, [r7, #12]
 8000e46:	60b9      	str	r1, [r7, #8]
 8000e48:	607a      	str	r2, [r7, #4]
	//! Slow!
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e50:	617b      	str	r3, [r7, #20]
 8000e52:	e01b      	b.n	8000e8c <LCD5110_rect_fill+0x4e>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e5a:	613b      	str	r3, [r7, #16]
 8000e5c:	e008      	b.n	8000e70 <LCD5110_rect_fill+0x32>
			LCD5110_putpix(i, j, color, &lcd_conf->hw_conf);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	68ba      	ldr	r2, [r7, #8]
 8000e62:	6939      	ldr	r1, [r7, #16]
 8000e64:	6978      	ldr	r0, [r7, #20]
 8000e66:	f000 f956 	bl	8001116 <LCD5110_putpix>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000e6a:	693b      	ldr	r3, [r7, #16]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	613b      	str	r3, [r7, #16]
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e76:	461a      	mov	r2, r3
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e7e:	4413      	add	r3, r2
 8000e80:	693a      	ldr	r2, [r7, #16]
 8000e82:	429a      	cmp	r2, r3
 8000e84:	dbeb      	blt.n	8000e5e <LCD5110_rect_fill+0x20>
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	617b      	str	r3, [r7, #20]
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e92:	461a      	mov	r2, r3
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	697a      	ldr	r2, [r7, #20]
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	dbd8      	blt.n	8000e54 <LCD5110_rect_fill+0x16>
}
 8000ea2:	bf00      	nop
 8000ea4:	bf00      	nop
 8000ea6:	3718      	adds	r7, #24
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	bd80      	pop	{r7, pc}

08000eac <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000eac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000eae:	b08b      	sub	sp, #44	; 0x2c
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	603b      	str	r3, [r7, #0]
 8000eb8:	4613      	mov	r3, r2
 8000eba:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ebe:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	db41      	blt.n	8000f4a <LCD5110_wputchar+0x9e>
 8000ec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	db3c      	blt.n	8000f4a <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000ed0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ed2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000ed6:	461a      	mov	r2, r3
 8000ed8:	2306      	movs	r3, #6
 8000eda:	4413      	add	r3, r2
 8000edc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ede:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d833      	bhi.n	8000f4e <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ee8:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000eec:	461a      	mov	r2, r3
 8000eee:	2308      	movs	r3, #8
 8000ef0:	4413      	add	r3, r2
 8000ef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ef4:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000ef8:	4293      	cmp	r3, r2
 8000efa:	d828      	bhi.n	8000f4e <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000efc:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <LCD5110_wputchar+0xac>)
 8000efe:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f06:	461a      	mov	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	18d0      	adds	r0, r2, r3
 8000f0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f12:	461a      	mov	r2, r3
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	18d1      	adds	r1, r2, r3
 8000f18:	79fb      	ldrb	r3, [r7, #7]
 8000f1a:	2206      	movs	r2, #6
 8000f1c:	fb02 f303 	mul.w	r3, r2, r3
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	441a      	add	r2, r3
 8000f24:	2306      	movs	r3, #6
 8000f26:	461e      	mov	r6, r3
 8000f28:	2308      	movs	r3, #8
 8000f2a:	461c      	mov	r4, r3
 8000f2c:	683b      	ldr	r3, [r7, #0]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	bf0c      	ite	eq
 8000f32:	2301      	moveq	r3, #1
 8000f34:	2300      	movne	r3, #0
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461d      	mov	r5, r3
 8000f3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3c:	9302      	str	r3, [sp, #8]
 8000f3e:	9501      	str	r5, [sp, #4]
 8000f40:	9400      	str	r4, [sp, #0]
 8000f42:	4633      	mov	r3, r6
 8000f44:	f000 f927 	bl	8001196 <LCD5110_drawBitmap>
 8000f48:	e002      	b.n	8000f50 <LCD5110_wputchar+0xa4>
		return;
 8000f4a:	bf00      	nop
 8000f4c:	e000      	b.n	8000f50 <LCD5110_wputchar+0xa4>
		return;
 8000f4e:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8000f50:	371c      	adds	r7, #28
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f56:	bf00      	nop
 8000f58:	08009420 	.word	0x08009420

08000f5c <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	60f8      	str	r0, [r7, #12]
 8000f64:	60b9      	str	r1, [r7, #8]
 8000f66:	607a      	str	r2, [r7, #4]
 8000f68:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	b21a      	sxth	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 8000f72:	68bb      	ldr	r3, [r7, #8]
 8000f74:	b21a      	sxth	r2, r3
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	815a      	strh	r2, [r3, #10]
}
 8000f7a:	bf00      	nop
 8000f7c:	3714      	adds	r7, #20
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f84:	4770      	bx	lr

08000f86 <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000f86:	b580      	push	{r7, lr}
 8000f88:	b082      	sub	sp, #8
 8000f8a:	af00      	add	r7, sp, #0
 8000f8c:	6078      	str	r0, [r7, #4]
 8000f8e:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f96:	b29a      	uxth	r2, r3
 8000f98:	2308      	movs	r3, #8
 8000f9a:	b29b      	uxth	r3, r3
 8000f9c:	4413      	add	r3, r2
 8000f9e:	b29b      	uxth	r3, r3
 8000fa0:	3301      	adds	r3, #1
 8000fa2:	b29b      	uxth	r3, r3
 8000fa4:	b21a      	sxth	r2, r3
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	2202      	movs	r2, #2
 8000fae:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	7b1b      	ldrb	r3, [r3, #12]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d002      	beq.n	8000fbe <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8000fb8:	6838      	ldr	r0, [r7, #0]
 8000fba:	f7ff fd67 	bl	8000a8c <LCD5110_refresh>
}
 8000fbe:	bf00      	nop
 8000fc0:	3708      	adds	r7, #8
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b086      	sub	sp, #24
 8000fcc:	af02      	add	r7, sp, #8
 8000fce:	60f8      	str	r0, [r7, #12]
 8000fd0:	60b9      	str	r1, [r7, #8]
 8000fd2:	607a      	str	r2, [r7, #4]
 8000fd4:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 8000fd6:	e053      	b.n	8001080 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b0a      	cmp	r3, #10
 8000fde:	d010      	beq.n	8001002 <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fee:	4619      	mov	r1, r3
 8000ff0:	68fb      	ldr	r3, [r7, #12]
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	9301      	str	r3, [sp, #4]
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	9300      	str	r3, [sp, #0]
 8000ffc:	68bb      	ldr	r3, [r7, #8]
 8000ffe:	f7ff ff55 	bl	8000eac <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8001008:	b29a      	uxth	r2, r3
 800100a:	2306      	movs	r3, #6
 800100c:	b29b      	uxth	r3, r3
 800100e:	4413      	add	r3, r2
 8001010:	b29b      	uxth	r3, r3
 8001012:	b21a      	sxth	r2, r3
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800101e:	461a      	mov	r2, r3
 8001020:	2306      	movs	r3, #6
 8001022:	4413      	add	r3, r2
 8001024:	687a      	ldr	r2, [r7, #4]
 8001026:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 800102a:	4293      	cmp	r3, r2
 800102c:	d904      	bls.n	8001038 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 800102e:	68fb      	ldr	r3, [r7, #12]
 8001030:	3301      	adds	r3, #1
 8001032:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 8001034:	2b0a      	cmp	r3, #10
 8001036:	d103      	bne.n	8001040 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b0a      	cmp	r3, #10
 800103e:	d111      	bne.n	8001064 <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 8001040:	6839      	ldr	r1, [r7, #0]
 8001042:	6878      	ldr	r0, [r7, #4]
 8001044:	f7ff ff9f 	bl	8000f86 <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3301      	adds	r3, #1
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	3301      	adds	r3, #1
 8001050:	4a10      	ldr	r2, [pc, #64]	; (8001094 <LCD5110_wprint+0xcc>)
 8001052:	4413      	add	r3, r2
 8001054:	781b      	ldrb	r3, [r3, #0]
 8001056:	f003 0308 	and.w	r3, r3, #8
 800105a:	2b00      	cmp	r3, #0
 800105c:	d002      	beq.n	8001064 <LCD5110_wprint+0x9c>
				++str;
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	3301      	adds	r3, #1
 8001062:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800106a:	461a      	mov	r2, r3
 800106c:	2308      	movs	r3, #8
 800106e:	4413      	add	r3, r2
 8001070:	687a      	ldr	r2, [r7, #4]
 8001072:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 8001076:	4293      	cmp	r3, r2
 8001078:	d807      	bhi.n	800108a <LCD5110_wprint+0xc2>
			break;
		str++;
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	3301      	adds	r3, #1
 800107e:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	781b      	ldrb	r3, [r3, #0]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d1a7      	bne.n	8000fd8 <LCD5110_wprint+0x10>

	}
}
 8001088:	e000      	b.n	800108c <LCD5110_wprint+0xc4>
			break;
 800108a:	bf00      	nop
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	08009a48 	.word	0x08009a48

08001098 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8001098:	b480      	push	{r7}
 800109a:	b087      	sub	sp, #28
 800109c:	af00      	add	r7, sp, #0
 800109e:	60f8      	str	r0, [r7, #12]
 80010a0:	60b9      	str	r1, [r7, #8]
 80010a2:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	10db      	asrs	r3, r3, #3
 80010a8:	2254      	movs	r2, #84	; 0x54
 80010aa:	fb03 f202 	mul.w	r2, r3, r2
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	4413      	add	r3, r2
 80010b2:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f003 0307 	and.w	r3, r3, #7
 80010ba:	2201      	movs	r2, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	753b      	strb	r3, [r7, #20]

	return res;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	461a      	mov	r2, r3
 80010c8:	f107 0310 	add.w	r3, r7, #16
 80010cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80010d0:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80010d4:	68f8      	ldr	r0, [r7, #12]
 80010d6:	371c      	adds	r7, #28
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr

080010e0 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 80010e0:	b480      	push	{r7}
 80010e2:	b085      	sub	sp, #20
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80010e8:	2300      	movs	r3, #0
 80010ea:	60fb      	str	r3, [r7, #12]
 80010ec:	e008      	b.n	8001100 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	4413      	add	r3, r2
 80010f4:	331c      	adds	r3, #28
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	3301      	adds	r3, #1
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 8001106:	dbf2      	blt.n	80010ee <LCD5110_clrscr+0xe>
	}
}
 8001108:	bf00      	nop
 800110a:	bf00      	nop
 800110c:	3714      	adds	r7, #20
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 8001116:	b580      	push	{r7, lr}
 8001118:	b086      	sub	sp, #24
 800111a:	af00      	add	r7, sp, #0
 800111c:	60f8      	str	r0, [r7, #12]
 800111e:	60b9      	str	r1, [r7, #8]
 8001120:	607a      	str	r2, [r7, #4]
 8001122:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2b00      	cmp	r3, #0
 8001128:	db31      	blt.n	800118e <LCD5110_putpix+0x78>
 800112a:	68bb      	ldr	r3, [r7, #8]
 800112c:	2b00      	cmp	r3, #0
 800112e:	db2e      	blt.n	800118e <LCD5110_putpix+0x78>
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	2b53      	cmp	r3, #83	; 0x53
 8001134:	dc2b      	bgt.n	800118e <LCD5110_putpix+0x78>
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	2b2f      	cmp	r3, #47	; 0x2f
 800113a:	dc28      	bgt.n	800118e <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 800113c:	f107 0310 	add.w	r3, r7, #16
 8001140:	68ba      	ldr	r2, [r7, #8]
 8001142:	68f9      	ldr	r1, [r7, #12]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ffa7 	bl	8001098 <xy_to_pix>

	if (color)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d00c      	beq.n	800116a <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4413      	add	r3, r2
 8001156:	7f19      	ldrb	r1, [r3, #28]
 8001158:	7d3a      	ldrb	r2, [r7, #20]
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	430a      	orrs	r2, r1
 800115e:	b2d1      	uxtb	r1, r2
 8001160:	683a      	ldr	r2, [r7, #0]
 8001162:	4413      	add	r3, r2
 8001164:	460a      	mov	r2, r1
 8001166:	771a      	strb	r2, [r3, #28]
 8001168:	e012      	b.n	8001190 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	683a      	ldr	r2, [r7, #0]
 800116e:	4413      	add	r3, r2
 8001170:	7f1b      	ldrb	r3, [r3, #28]
 8001172:	b25a      	sxtb	r2, r3
 8001174:	7d3b      	ldrb	r3, [r7, #20]
 8001176:	b25b      	sxtb	r3, r3
 8001178:	43db      	mvns	r3, r3
 800117a:	b25b      	sxtb	r3, r3
 800117c:	4013      	ands	r3, r2
 800117e:	b25a      	sxtb	r2, r3
 8001180:	693b      	ldr	r3, [r7, #16]
 8001182:	b2d1      	uxtb	r1, r2
 8001184:	683a      	ldr	r2, [r7, #0]
 8001186:	4413      	add	r3, r2
 8001188:	460a      	mov	r2, r1
 800118a:	771a      	strb	r2, [r3, #28]
 800118c:	e000      	b.n	8001190 <LCD5110_putpix+0x7a>
		return;
 800118e:	bf00      	nop
}
 8001190:	3718      	adds	r7, #24
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}

08001196 <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 8001196:	b580      	push	{r7, lr}
 8001198:	b088      	sub	sp, #32
 800119a:	af00      	add	r7, sp, #0
 800119c:	60f8      	str	r0, [r7, #12]
 800119e:	60b9      	str	r1, [r7, #8]
 80011a0:	607a      	str	r2, [r7, #4]
 80011a2:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 80011a4:	2300      	movs	r3, #0
 80011a6:	61fb      	str	r3, [r7, #28]
 80011a8:	e03d      	b.n	8001226 <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 80011aa:	2300      	movs	r3, #0
 80011ac:	61bb      	str	r3, [r7, #24]
 80011ae:	e033      	b.n	8001218 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	da00      	bge.n	80011b8 <LCD5110_drawBitmap+0x22>
 80011b6:	3307      	adds	r3, #7
 80011b8:	10db      	asrs	r3, r3, #3
 80011ba:	461a      	mov	r2, r3
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	fb03 f202 	mul.w	r2, r3, r2
 80011c2:	69fb      	ldr	r3, [r7, #28]
 80011c4:	4413      	add	r3, r2
 80011c6:	461a      	mov	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4413      	add	r3, r2
 80011cc:	781b      	ldrb	r3, [r3, #0]
 80011ce:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 80011d0:	69bb      	ldr	r3, [r7, #24]
 80011d2:	f003 0307 	and.w	r3, r3, #7
 80011d6:	2201      	movs	r2, #1
 80011d8:	fa02 f303 	lsl.w	r3, r2, r3
 80011dc:	b25a      	sxtb	r2, r3
 80011de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80011e2:	4013      	ands	r3, r2
 80011e4:	b25b      	sxtb	r3, r3
 80011e6:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 80011e8:	68fa      	ldr	r2, [r7, #12]
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	18d0      	adds	r0, r2, r3
 80011ee:	68ba      	ldr	r2, [r7, #8]
 80011f0:	69bb      	ldr	r3, [r7, #24]
 80011f2:	18d1      	adds	r1, r2, r3
 80011f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d007      	beq.n	800120a <LCD5110_drawBitmap+0x74>
 80011fa:	7dfb      	ldrb	r3, [r7, #23]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	bf0c      	ite	eq
 8001200:	2301      	moveq	r3, #1
 8001202:	2300      	movne	r3, #0
 8001204:	b2db      	uxtb	r3, r3
 8001206:	461a      	mov	r2, r3
 8001208:	e000      	b.n	800120c <LCD5110_drawBitmap+0x76>
 800120a:	7dfa      	ldrb	r2, [r7, #23]
 800120c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800120e:	f7ff ff82 	bl	8001116 <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	3301      	adds	r3, #1
 8001216:	61bb      	str	r3, [r7, #24]
 8001218:	69ba      	ldr	r2, [r7, #24]
 800121a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800121c:	429a      	cmp	r2, r3
 800121e:	dbc7      	blt.n	80011b0 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	3301      	adds	r3, #1
 8001224:	61fb      	str	r3, [r7, #28]
 8001226:	69fa      	ldr	r2, [r7, #28]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	429a      	cmp	r2, r3
 800122c:	dbbd      	blt.n	80011aa <LCD5110_drawBitmap+0x14>
		}
	}
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3720      	adds	r7, #32
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}

08001238 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b082      	sub	sp, #8
 800123c:	af00      	add	r7, sp, #0
 800123e:	4603      	mov	r3, r0
 8001240:	6039      	str	r1, [r7, #0]
 8001242:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	6818      	ldr	r0, [r3, #0]
 8001248:	1df9      	adds	r1, r7, #7
 800124a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800124e:	2201      	movs	r2, #1
 8001250:	f004 f88b 	bl	800536a <HAL_SPI_Transmit>
 8001254:	4603      	mov	r3, r0
}
 8001256:	4618      	mov	r0, r3
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b084      	sub	sp, #16
 8001262:	af00      	add	r7, sp, #0
 8001264:	60f8      	str	r0, [r7, #12]
 8001266:	460b      	mov	r3, r1
 8001268:	607a      	str	r2, [r7, #4]
 800126a:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6818      	ldr	r0, [r3, #0]
 8001270:	897a      	ldrh	r2, [r7, #10]
 8001272:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001276:	68f9      	ldr	r1, [r7, #12]
 8001278:	f004 f877 	bl	800536a <HAL_SPI_Transmit>
 800127c:	4603      	mov	r3, r0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 8001286:	b580      	push	{r7, lr}
 8001288:	b082      	sub	sp, #8
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6898      	ldr	r0, [r3, #8]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	889b      	ldrh	r3, [r3, #4]
 8001296:	2200      	movs	r2, #0
 8001298:	4619      	mov	r1, r3
 800129a:	f001 f981 	bl	80025a0 <HAL_GPIO_WritePin>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6998      	ldr	r0, [r3, #24]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	8a9b      	ldrh	r3, [r3, #20]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	f001 f971 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80012be:	bf00      	nop
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}

080012c6 <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 80012c6:	b580      	push	{r7, lr}
 80012c8:	b082      	sub	sp, #8
 80012ca:	af00      	add	r7, sp, #0
 80012cc:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6998      	ldr	r0, [r3, #24]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	8a9b      	ldrh	r3, [r3, #20]
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	f001 f961 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 80012e6:	b580      	push	{r7, lr}
 80012e8:	b082      	sub	sp, #8
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6918      	ldr	r0, [r3, #16]
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	899b      	ldrh	r3, [r3, #12]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4619      	mov	r1, r3
 80012fa:	f001 f951 	bl	80025a0 <HAL_GPIO_WritePin>
}
 80012fe:	bf00      	nop
 8001300:	3708      	adds	r7, #8
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6918      	ldr	r0, [r3, #16]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	899b      	ldrh	r3, [r3, #12]
 8001316:	2200      	movs	r2, #0
 8001318:	4619      	mov	r1, r3
 800131a:	f001 f941 	bl	80025a0 <HAL_GPIO_WritePin>
}
 800131e:	bf00      	nop
 8001320:	3708      	adds	r7, #8
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}

08001326 <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 8001326:	b580      	push	{r7, lr}
 8001328:	b082      	sub	sp, #8
 800132a:	af00      	add	r7, sp, #0
 800132c:	4603      	mov	r3, r0
 800132e:	6039      	str	r1, [r7, #0]
 8001330:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	f023 0320 	bic.w	r3, r3, #32
 8001338:	2b07      	cmp	r3, #7
 800133a:	dd01      	ble.n	8001340 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 800133c:	2301      	movs	r3, #1
 800133e:	e008      	b.n	8001352 <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 8001340:	79fb      	ldrb	r3, [r7, #7]
 8001342:	f043 0320 	orr.w	r3, r3, #32
 8001346:	b2db      	uxtb	r3, r3
 8001348:	6839      	ldr	r1, [r7, #0]
 800134a:	4618      	mov	r0, r3
 800134c:	f7ff ff74 	bl	8001238 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001350:	2300      	movs	r3, #0
}
 8001352:	4618      	mov	r0, r3
 8001354:	3708      	adds	r7, #8
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}

0800135a <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 800135a:	b580      	push	{r7, lr}
 800135c:	b082      	sub	sp, #8
 800135e:	af00      	add	r7, sp, #0
 8001360:	4603      	mov	r3, r0
 8001362:	6039      	str	r1, [r7, #0]
 8001364:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	f023 030d 	bic.w	r3, r3, #13
 800136c:	2b00      	cmp	r3, #0
 800136e:	d001      	beq.n	8001374 <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8001370:	2302      	movs	r3, #2
 8001372:	e005      	b.n	8001380 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	6839      	ldr	r1, [r7, #0]
 8001378:	4618      	mov	r0, r3
 800137a:	f7ff ff5d 	bl	8001238 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	4618      	mov	r0, r3
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}

08001388 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	4603      	mov	r3, r0
 8001390:	6039      	str	r1, [r7, #0]
 8001392:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 8001394:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001398:	2b00      	cmp	r3, #0
 800139a:	da01      	bge.n	80013a0 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 800139c:	2303      	movs	r3, #3
 800139e:	e008      	b.n	80013b2 <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 80013a0:	79fb      	ldrb	r3, [r7, #7]
 80013a2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	6839      	ldr	r1, [r7, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff ff44 	bl	8001238 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80013b0:	2300      	movs	r3, #0
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}

080013ba <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b082      	sub	sp, #8
 80013be:	af00      	add	r7, sp, #0
 80013c0:	4603      	mov	r3, r0
 80013c2:	6039      	str	r1, [r7, #0]
 80013c4:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 80013c6:	79fb      	ldrb	r3, [r7, #7]
 80013c8:	2b03      	cmp	r3, #3
 80013ca:	d901      	bls.n	80013d0 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 80013cc:	2304      	movs	r3, #4
 80013ce:	e008      	b.n	80013e2 <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 80013d0:	79fb      	ldrb	r3, [r7, #7]
 80013d2:	f043 0304 	orr.w	r3, r3, #4
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	6839      	ldr	r1, [r7, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff ff2c 	bl	8001238 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80013e0:	2300      	movs	r3, #0
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	4603      	mov	r3, r0
 80013f2:	6039      	str	r1, [r7, #0]
 80013f4:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 80013f6:	79fb      	ldrb	r3, [r7, #7]
 80013f8:	2b07      	cmp	r3, #7
 80013fa:	d901      	bls.n	8001400 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 80013fc:	2305      	movs	r3, #5
 80013fe:	e008      	b.n	8001412 <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 8001400:	79fb      	ldrb	r3, [r7, #7]
 8001402:	f043 0310 	orr.w	r3, r3, #16
 8001406:	b2db      	uxtb	r3, r3
 8001408:	6839      	ldr	r1, [r7, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f7ff ff14 	bl	8001238 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001410:	2300      	movs	r3, #0
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 800141a:	b580      	push	{r7, lr}
 800141c:	b082      	sub	sp, #8
 800141e:	af00      	add	r7, sp, #0
 8001420:	4603      	mov	r3, r0
 8001422:	6039      	str	r1, [r7, #0]
 8001424:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 8001426:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142a:	2b00      	cmp	r3, #0
 800142c:	db03      	blt.n	8001436 <LCD5110_set_X_base+0x1c>
 800142e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001432:	2b53      	cmp	r3, #83	; 0x53
 8001434:	dd01      	ble.n	800143a <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 8001436:	2307      	movs	r3, #7
 8001438:	e00a      	b.n	8001450 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 800143a:	88fb      	ldrh	r3, [r7, #6]
 800143c:	b25b      	sxtb	r3, r3
 800143e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001442:	b25b      	sxtb	r3, r3
 8001444:	b2db      	uxtb	r3, r3
 8001446:	6839      	ldr	r1, [r7, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f7ff fef5 	bl	8001238 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800144e:	2300      	movs	r3, #0
}
 8001450:	4618      	mov	r0, r3
 8001452:	3708      	adds	r7, #8
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}

08001458 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	6039      	str	r1, [r7, #0]
 8001462:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 8001464:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001468:	2b00      	cmp	r3, #0
 800146a:	db03      	blt.n	8001474 <LCD5110_set_Y_base+0x1c>
 800146c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001470:	2b05      	cmp	r3, #5
 8001472:	dd01      	ble.n	8001478 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 8001474:	2307      	movs	r3, #7
 8001476:	e00a      	b.n	800148e <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8001478:	88fb      	ldrh	r3, [r7, #6]
 800147a:	b25b      	sxtb	r3, r3
 800147c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001480:	b25b      	sxtb	r3, r3
 8001482:	b2db      	uxtb	r3, r3
 8001484:	6839      	ldr	r1, [r7, #0]
 8001486:	4618      	mov	r0, r3
 8001488:	f7ff fed6 	bl	8001238 <send_byte_to_LCD5110>
	return LCD5110_OK;
 800148c:	2300      	movs	r3, #0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}

08001496 <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 8001496:	b580      	push	{r7, lr}
 8001498:	b084      	sub	sp, #16
 800149a:	af00      	add	r7, sp, #0
 800149c:	4603      	mov	r3, r0
 800149e:	603a      	str	r2, [r7, #0]
 80014a0:	80fb      	strh	r3, [r7, #6]
 80014a2:	460b      	mov	r3, r1
 80014a4:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 80014a6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014aa:	6839      	ldr	r1, [r7, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff ffb4 	bl	800141a <LCD5110_set_X_base>
 80014b2:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <LCD5110_set_XY_base+0x28>
		return res;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	e00c      	b.n	80014d8 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 80014be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80014c2:	6839      	ldr	r1, [r7, #0]
 80014c4:	4618      	mov	r0, r3
 80014c6:	f7ff ffc7 	bl	8001458 <LCD5110_set_Y_base>
 80014ca:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <LCD5110_set_XY_base+0x40>
		return res;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	e000      	b.n	80014d8 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 80014d6:	2300      	movs	r3, #0
}
 80014d8:	4618      	mov	r0, r3
 80014da:	3710      	adds	r7, #16
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}

080014e0 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80014fa:	601a      	str	r2, [r3, #0]
}
 80014fc:	bf00      	nop
 80014fe:	370c      	adds	r7, #12
 8001500:	46bd      	mov	sp, r7
 8001502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001506:	4770      	bx	lr

08001508 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 8001508:	b580      	push	{r7, lr}
 800150a:	b084      	sub	sp, #16
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	4608      	mov	r0, r1
 8001512:	4611      	mov	r1, r2
 8001514:	461a      	mov	r2, r3
 8001516:	4603      	mov	r3, r0
 8001518:	70fb      	strb	r3, [r7, #3]
 800151a:	460b      	mov	r3, r1
 800151c:	70bb      	strb	r3, [r7, #2]
 800151e:	4613      	mov	r3, r2
 8001520:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffdc 	bl	80014e0 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 8001528:	6878      	ldr	r0, [r7, #4]
 800152a:	f7ff feac 	bl	8001286 <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 800152e:	6878      	ldr	r0, [r7, #4]
 8001530:	f7ff fee9 	bl	8001306 <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 8001534:	2364      	movs	r3, #100	; 0x64
 8001536:	60fb      	str	r3, [r7, #12]
	while (--i){}
 8001538:	bf00      	nop
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	3b01      	subs	r3, #1
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d1fa      	bne.n	800153a <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 8001544:	6878      	ldr	r0, [r7, #4]
 8001546:	f7ff fece 	bl	80012e6 <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 800154a:	6878      	ldr	r0, [r7, #4]
 800154c:	f7ff febb 	bl	80012c6 <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8001550:	6879      	ldr	r1, [r7, #4]
 8001552:	2001      	movs	r0, #1
 8001554:	f7ff fee7 	bl	8001326 <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8001558:	78bb      	ldrb	r3, [r7, #2]
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff13 	bl	8001388 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 8001562:	787b      	ldrb	r3, [r7, #1]
 8001564:	6879      	ldr	r1, [r7, #4]
 8001566:	4618      	mov	r0, r3
 8001568:	f7ff ff27 	bl	80013ba <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 800156c:	7e3b      	ldrb	r3, [r7, #24]
 800156e:	6879      	ldr	r1, [r7, #4]
 8001570:	4618      	mov	r0, r3
 8001572:	f7ff ff3a 	bl	80013ea <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 8001576:	6879      	ldr	r1, [r7, #4]
 8001578:	2000      	movs	r0, #0
 800157a:	f7ff fed4 	bl	8001326 <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 800157e:	78fb      	ldrb	r3, [r7, #3]
 8001580:	6879      	ldr	r1, [r7, #4]
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff fee9 	bl	800135a <LCD5110_set_mode_base>

	return LCD5110_OK;
 8001588:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}

08001592 <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 8001592:	b580      	push	{r7, lr}
 8001594:	b082      	sub	sp, #8
 8001596:	af00      	add	r7, sp, #0
 8001598:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 800159a:	6878      	ldr	r0, [r7, #4]
 800159c:	f7ff fe73 	bl	8001286 <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 80015a0:	6878      	ldr	r0, [r7, #4]
 80015a2:	f7ff fe90 	bl	80012c6 <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 80015a6:	687a      	ldr	r2, [r7, #4]
 80015a8:	2100      	movs	r1, #0
 80015aa:	2000      	movs	r0, #0
 80015ac:	f7ff ff73 	bl	8001496 <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 80015b0:	6878      	ldr	r0, [r7, #4]
 80015b2:	f7ff fe78 	bl	80012a6 <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	331c      	adds	r3, #28
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 80015c0:	4618      	mov	r0, r3
 80015c2:	f7ff fe4c 	bl	800125e <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
	...

080015d0 <keypad_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
LCD5110_display lcd1;
void keypad_init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b086      	sub	sp, #24
 80015d4:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 80015e4:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80015e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015ee:	2301      	movs	r3, #1
 80015f0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 80015f2:	4b21      	ldr	r3, [pc, #132]	; (8001678 <keypad_init+0xa8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	1d3a      	adds	r2, r7, #4
 80015f8:	4611      	mov	r1, r2
 80015fa:	4618      	mov	r0, r3
 80015fc:	f000 fe34 	bl	8002268 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 8001600:	4b1e      	ldr	r3, [pc, #120]	; (800167c <keypad_init+0xac>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	1d3a      	adds	r2, r7, #4
 8001606:	4611      	mov	r1, r2
 8001608:	4618      	mov	r0, r3
 800160a:	f000 fe2d 	bl	8002268 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <keypad_init+0xb0>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	1d3a      	adds	r2, r7, #4
 8001614:	4611      	mov	r1, r2
 8001616:	4618      	mov	r0, r3
 8001618:	f000 fe26 	bl	8002268 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 800161c:	4b19      	ldr	r3, [pc, #100]	; (8001684 <keypad_init+0xb4>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	1d3a      	adds	r2, r7, #4
 8001622:	4611      	mov	r1, r2
 8001624:	4618      	mov	r0, r3
 8001626:	f000 fe1f 	bl	8002268 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 800162a:	230f      	movs	r3, #15
 800162c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800162e:	2301      	movs	r3, #1
 8001630:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001632:	2300      	movs	r3, #0
 8001634:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 8001636:	4b14      	ldr	r3, [pc, #80]	; (8001688 <keypad_init+0xb8>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	1d3a      	adds	r2, r7, #4
 800163c:	4611      	mov	r1, r2
 800163e:	4618      	mov	r0, r3
 8001640:	f000 fe12 	bl	8002268 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 8001644:	4b11      	ldr	r3, [pc, #68]	; (800168c <keypad_init+0xbc>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	1d3a      	adds	r2, r7, #4
 800164a:	4611      	mov	r1, r2
 800164c:	4618      	mov	r0, r3
 800164e:	f000 fe0b 	bl	8002268 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 8001652:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <keypad_init+0xc0>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	1d3a      	adds	r2, r7, #4
 8001658:	4611      	mov	r1, r2
 800165a:	4618      	mov	r0, r3
 800165c:	f000 fe04 	bl	8002268 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8001660:	4b0c      	ldr	r3, [pc, #48]	; (8001694 <keypad_init+0xc4>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	1d3a      	adds	r2, r7, #4
 8001666:	4611      	mov	r1, r2
 8001668:	4618      	mov	r0, r3
 800166a:	f000 fdfd 	bl	8002268 <HAL_GPIO_Init>
}
 800166e:	bf00      	nop
 8001670:	3718      	adds	r7, #24
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
 8001676:	bf00      	nop
 8001678:	20000000 	.word	0x20000000
 800167c:	20000004 	.word	0x20000004
 8001680:	20000008 	.word	0x20000008
 8001684:	2000000c 	.word	0x2000000c
 8001688:	20000010 	.word	0x20000010
 800168c:	20000014 	.word	0x20000014
 8001690:	20000018 	.word	0x20000018
 8001694:	2000001c 	.word	0x2000001c

08001698 <keypad_scan>:

char keypad_scan(void)
{
 8001698:	b590      	push	{r4, r7, lr}
 800169a:	b087      	sub	sp, #28
 800169c:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'A'},
 800169e:	4b69      	ldr	r3, [pc, #420]	; (8001844 <keypad_scan+0x1ac>)
 80016a0:	1d3c      	adds	r4, r7, #4
 80016a2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80016a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'B'},
                     {'7', '8', '9', 'C'},
                     {'*', '0', '#', 'D'}};

  for(int i = 0; i < 4; i++)
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
 80016ac:	e0c1      	b.n	8001832 <keypad_scan+0x19a>
  {
    // Set current column as output and low
    switch(i)
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	2b03      	cmp	r3, #3
 80016b2:	d87f      	bhi.n	80017b4 <keypad_scan+0x11c>
 80016b4:	a201      	add	r2, pc, #4	; (adr r2, 80016bc <keypad_scan+0x24>)
 80016b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016ba:	bf00      	nop
 80016bc:	080016cd 	.word	0x080016cd
 80016c0:	08001707 	.word	0x08001707
 80016c4:	08001741 	.word	0x08001741
 80016c8:	0800177b 	.word	0x0800177b
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 80016cc:	4b5e      	ldr	r3, [pc, #376]	; (8001848 <keypad_scan+0x1b0>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	2200      	movs	r2, #0
 80016d2:	2101      	movs	r1, #1
 80016d4:	4618      	mov	r0, r3
 80016d6:	f000 ff63 	bl	80025a0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 80016da:	4b5c      	ldr	r3, [pc, #368]	; (800184c <keypad_scan+0x1b4>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	2201      	movs	r2, #1
 80016e0:	2102      	movs	r1, #2
 80016e2:	4618      	mov	r0, r3
 80016e4:	f000 ff5c 	bl	80025a0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80016e8:	4b59      	ldr	r3, [pc, #356]	; (8001850 <keypad_scan+0x1b8>)
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	2201      	movs	r2, #1
 80016ee:	2104      	movs	r1, #4
 80016f0:	4618      	mov	r0, r3
 80016f2:	f000 ff55 	bl	80025a0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80016f6:	4b57      	ldr	r3, [pc, #348]	; (8001854 <keypad_scan+0x1bc>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2201      	movs	r2, #1
 80016fc:	2108      	movs	r1, #8
 80016fe:	4618      	mov	r0, r3
 8001700:	f000 ff4e 	bl	80025a0 <HAL_GPIO_WritePin>
        break;
 8001704:	e056      	b.n	80017b4 <keypad_scan+0x11c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001706:	4b50      	ldr	r3, [pc, #320]	; (8001848 <keypad_scan+0x1b0>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2201      	movs	r2, #1
 800170c:	2101      	movs	r1, #1
 800170e:	4618      	mov	r0, r3
 8001710:	f000 ff46 	bl	80025a0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 8001714:	4b4d      	ldr	r3, [pc, #308]	; (800184c <keypad_scan+0x1b4>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2200      	movs	r2, #0
 800171a:	2102      	movs	r1, #2
 800171c:	4618      	mov	r0, r3
 800171e:	f000 ff3f 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8001722:	4b4b      	ldr	r3, [pc, #300]	; (8001850 <keypad_scan+0x1b8>)
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	2201      	movs	r2, #1
 8001728:	2104      	movs	r1, #4
 800172a:	4618      	mov	r0, r3
 800172c:	f000 ff38 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001730:	4b48      	ldr	r3, [pc, #288]	; (8001854 <keypad_scan+0x1bc>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	2201      	movs	r2, #1
 8001736:	2108      	movs	r1, #8
 8001738:	4618      	mov	r0, r3
 800173a:	f000 ff31 	bl	80025a0 <HAL_GPIO_WritePin>
    break;
 800173e:	e039      	b.n	80017b4 <keypad_scan+0x11c>

  case 2:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001740:	4b41      	ldr	r3, [pc, #260]	; (8001848 <keypad_scan+0x1b0>)
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	2201      	movs	r2, #1
 8001746:	2101      	movs	r1, #1
 8001748:	4618      	mov	r0, r3
 800174a:	f000 ff29 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 800174e:	4b3f      	ldr	r3, [pc, #252]	; (800184c <keypad_scan+0x1b4>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	2201      	movs	r2, #1
 8001754:	2102      	movs	r1, #2
 8001756:	4618      	mov	r0, r3
 8001758:	f000 ff22 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 800175c:	4b3c      	ldr	r3, [pc, #240]	; (8001850 <keypad_scan+0x1b8>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2200      	movs	r2, #0
 8001762:	2104      	movs	r1, #4
 8001764:	4618      	mov	r0, r3
 8001766:	f000 ff1b 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 800176a:	4b3a      	ldr	r3, [pc, #232]	; (8001854 <keypad_scan+0x1bc>)
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	2201      	movs	r2, #1
 8001770:	2108      	movs	r1, #8
 8001772:	4618      	mov	r0, r3
 8001774:	f000 ff14 	bl	80025a0 <HAL_GPIO_WritePin>
    break;
 8001778:	e01c      	b.n	80017b4 <keypad_scan+0x11c>

  case 3:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 800177a:	4b33      	ldr	r3, [pc, #204]	; (8001848 <keypad_scan+0x1b0>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2201      	movs	r2, #1
 8001780:	2101      	movs	r1, #1
 8001782:	4618      	mov	r0, r3
 8001784:	f000 ff0c 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001788:	4b30      	ldr	r3, [pc, #192]	; (800184c <keypad_scan+0x1b4>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	2201      	movs	r2, #1
 800178e:	2102      	movs	r1, #2
 8001790:	4618      	mov	r0, r3
 8001792:	f000 ff05 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 8001796:	4b2e      	ldr	r3, [pc, #184]	; (8001850 <keypad_scan+0x1b8>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	2201      	movs	r2, #1
 800179c:	2104      	movs	r1, #4
 800179e:	4618      	mov	r0, r3
 80017a0:	f000 fefe 	bl	80025a0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 80017a4:	4b2b      	ldr	r3, [pc, #172]	; (8001854 <keypad_scan+0x1bc>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2200      	movs	r2, #0
 80017aa:	2108      	movs	r1, #8
 80017ac:	4618      	mov	r0, r3
 80017ae:	f000 fef7 	bl	80025a0 <HAL_GPIO_WritePin>
    break;
 80017b2:	bf00      	nop
}
// Read current rows
if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <keypad_scan+0x1c0>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2110      	movs	r1, #16
 80017ba:	4618      	mov	r0, r3
 80017bc:	f000 fed8 	bl	8002570 <HAL_GPIO_ReadPin>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d104      	bne.n	80017d0 <keypad_scan+0x138>
  return keys[0][i];
 80017c6:	1d3a      	adds	r2, r7, #4
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	4413      	add	r3, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	e035      	b.n	800183c <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 80017d0:	4b22      	ldr	r3, [pc, #136]	; (800185c <keypad_scan+0x1c4>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	2120      	movs	r1, #32
 80017d6:	4618      	mov	r0, r3
 80017d8:	f000 feca 	bl	8002570 <HAL_GPIO_ReadPin>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d105      	bne.n	80017ee <keypad_scan+0x156>
  return keys[1][i];
 80017e2:	f107 0208 	add.w	r2, r7, #8
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	4413      	add	r3, r2
 80017ea:	781b      	ldrb	r3, [r3, #0]
 80017ec:	e026      	b.n	800183c <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80017ee:	4b1c      	ldr	r3, [pc, #112]	; (8001860 <keypad_scan+0x1c8>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	2180      	movs	r1, #128	; 0x80
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 febb 	bl	8002570 <HAL_GPIO_ReadPin>
 80017fa:	4603      	mov	r3, r0
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d105      	bne.n	800180c <keypad_scan+0x174>
  return keys[2][i];
 8001800:	f107 020c 	add.w	r2, r7, #12
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	4413      	add	r3, r2
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	e017      	b.n	800183c <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 800180c:	4b15      	ldr	r3, [pc, #84]	; (8001864 <keypad_scan+0x1cc>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001814:	4618      	mov	r0, r3
 8001816:	f000 feab 	bl	8002570 <HAL_GPIO_ReadPin>
 800181a:	4603      	mov	r3, r0
 800181c:	2b00      	cmp	r3, #0
 800181e:	d105      	bne.n	800182c <keypad_scan+0x194>
  return keys[3][i];
 8001820:	f107 0210 	add.w	r2, r7, #16
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	e007      	b.n	800183c <keypad_scan+0x1a4>
  for(int i = 0; i < 4; i++)
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	3301      	adds	r3, #1
 8001830:	617b      	str	r3, [r7, #20]
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	2b03      	cmp	r3, #3
 8001836:	f77f af3a 	ble.w	80016ae <keypad_scan+0x16>
}
return 0; // No key pressed
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	371c      	adds	r7, #28
 8001840:	46bd      	mov	sp, r7
 8001842:	bd90      	pop	{r4, r7, pc}
 8001844:	08009318 	.word	0x08009318
 8001848:	20000010 	.word	0x20000010
 800184c:	20000014 	.word	0x20000014
 8001850:	20000018 	.word	0x20000018
 8001854:	2000001c 	.word	0x2000001c
 8001858:	20000000 	.word	0x20000000
 800185c:	20000004 	.word	0x20000004
 8001860:	20000008 	.word	0x20000008
 8001864:	2000000c 	.word	0x2000000c

08001868 <init_screen.0>:
    	0x20, 0x00, 0x20, 0x20, 0x30, 0x38, 0x3e, 0x3f
    };

    bool is_call;

    void init_screen() {
 8001868:	b590      	push	{r4, r7, lr}
 800186a:	b083      	sub	sp, #12
 800186c:	af00      	add	r7, sp, #0
 800186e:	4664      	mov	r4, ip
 8001870:	f8c7 c004 	str.w	ip, [r7, #4]
    	keypad_init();
 8001874:	f7ff feac 	bl	80015d0 <keypad_init>
		LCD5110_clear_scr(&lcd1);
 8001878:	481d      	ldr	r0, [pc, #116]	; (80018f0 <init_screen.0+0x88>)
 800187a:	f7ff f925 	bl	8000ac8 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 800187e:	481c      	ldr	r0, [pc, #112]	; (80018f0 <init_screen.0+0x88>)
 8001880:	f7ff f904 	bl	8000a8c <LCD5110_refresh>
		LCD5110_rect(&rect, 1, &lcd1);
 8001884:	4623      	mov	r3, r4
 8001886:	4a1a      	ldr	r2, [pc, #104]	; (80018f0 <init_screen.0+0x88>)
 8001888:	2101      	movs	r1, #1
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fac5 	bl	8000e1a <LCD5110_rect>
		LCD5110_rect_fill(&rect, 1, &lcd1);
 8001890:	4623      	mov	r3, r4
 8001892:	4a17      	ldr	r2, [pc, #92]	; (80018f0 <init_screen.0+0x88>)
 8001894:	2101      	movs	r1, #1
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fad1 	bl	8000e3e <LCD5110_rect_fill>
		LCD5110_set_cursor(10, 15, &lcd1);
 800189c:	4a14      	ldr	r2, [pc, #80]	; (80018f0 <init_screen.0+0x88>)
 800189e:	210f      	movs	r1, #15
 80018a0:	200a      	movs	r0, #10
 80018a2:	f7ff f8ff 	bl	8000aa4 <LCD5110_set_cursor>

		LCD5110_print("A-call", 0, &lcd1);
 80018a6:	4a12      	ldr	r2, [pc, #72]	; (80018f0 <init_screen.0+0x88>)
 80018a8:	2100      	movs	r1, #0
 80018aa:	4812      	ldr	r0, [pc, #72]	; (80018f4 <init_screen.0+0x8c>)
 80018ac:	f7ff f91d 	bl	8000aea <LCD5110_print>

		LCD5110_set_cursor(10, 25, &lcd1);
 80018b0:	4a0f      	ldr	r2, [pc, #60]	; (80018f0 <init_screen.0+0x88>)
 80018b2:	2119      	movs	r1, #25
 80018b4:	200a      	movs	r0, #10
 80018b6:	f7ff f8f5 	bl	8000aa4 <LCD5110_set_cursor>

		LCD5110_print("D-delete", 0, &lcd1);
 80018ba:	4a0d      	ldr	r2, [pc, #52]	; (80018f0 <init_screen.0+0x88>)
 80018bc:	2100      	movs	r1, #0
 80018be:	480e      	ldr	r0, [pc, #56]	; (80018f8 <init_screen.0+0x90>)
 80018c0:	f7ff f913 	bl	8000aea <LCD5110_print>

		LCD5110_set_cursor(10, 35, &lcd1);
 80018c4:	4a0a      	ldr	r2, [pc, #40]	; (80018f0 <init_screen.0+0x88>)
 80018c6:	2123      	movs	r1, #35	; 0x23
 80018c8:	200a      	movs	r0, #10
 80018ca:	f7ff f8eb 	bl	8000aa4 <LCD5110_set_cursor>

		LCD5110_print("C-clear last", 0, &lcd1);
 80018ce:	4a08      	ldr	r2, [pc, #32]	; (80018f0 <init_screen.0+0x88>)
 80018d0:	2100      	movs	r1, #0
 80018d2:	480a      	ldr	r0, [pc, #40]	; (80018fc <init_screen.0+0x94>)
 80018d4:	f7ff f909 	bl	8000aea <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 80018d8:	4a05      	ldr	r2, [pc, #20]	; (80018f0 <init_screen.0+0x88>)
 80018da:	2100      	movs	r1, #0
 80018dc:	2000      	movs	r0, #0
 80018de:	f7ff f8e1 	bl	8000aa4 <LCD5110_set_cursor>
		is_call = false;
 80018e2:	2300      	movs	r3, #0
 80018e4:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    }
 80018e8:	bf00      	nop
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	2000023c 	.word	0x2000023c
 80018f4:	08009328 	.word	0x08009328
 80018f8:	08009330 	.word	0x08009330
 80018fc:	0800933c 	.word	0x0800933c

08001900 <main>:
{
 8001900:	b590      	push	{r4, r7, lr}
 8001902:	b0ab      	sub	sp, #172	; 0xac
 8001904:	af02      	add	r7, sp, #8
int main(void)
 8001906:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800190a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  HAL_Init();
 800190e:	f000 fb03 	bl	8001f18 <HAL_Init>
  SystemClock_Config();
 8001912:	f000 f941 	bl	8001b98 <SystemClock_Config>
  PeriphCommonClock_Config();
 8001916:	f000 f9a7 	bl	8001c68 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 800191a:	f7fe fddb 	bl	80004d4 <MX_GPIO_Init>
  MX_I2C1_Init();
 800191e:	f7fe ff13 	bl	8000748 <MX_I2C1_Init>
  MX_I2S2_Init();
 8001922:	f7fe ff87 	bl	8000834 <MX_I2S2_Init>
  MX_I2S3_Init();
 8001926:	f7fe ffb3 	bl	8000890 <MX_I2S3_Init>
  MX_SPI1_Init();
 800192a:	f000 f9c3 	bl	8001cb4 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 800192e:	f007 f871 	bl	8008a14 <MX_USB_DEVICE_Init>
  	lcd1.hw_conf.spi_handle = &hspi1;
 8001932:	4b7b      	ldr	r3, [pc, #492]	; (8001b20 <main+0x220>)
 8001934:	4a7b      	ldr	r2, [pc, #492]	; (8001b24 <main+0x224>)
 8001936:	601a      	str	r2, [r3, #0]
    lcd1.hw_conf.spi_cs_pin =  GPIO_PIN_2;
 8001938:	4b79      	ldr	r3, [pc, #484]	; (8001b20 <main+0x220>)
 800193a:	2204      	movs	r2, #4
 800193c:	809a      	strh	r2, [r3, #4]
    lcd1.hw_conf.spi_cs_port = GPIOA;
 800193e:	4b78      	ldr	r3, [pc, #480]	; (8001b20 <main+0x220>)
 8001940:	4a79      	ldr	r2, [pc, #484]	; (8001b28 <main+0x228>)
 8001942:	609a      	str	r2, [r3, #8]
    lcd1.hw_conf.rst_pin =  GPIO_PIN_0;
 8001944:	4b76      	ldr	r3, [pc, #472]	; (8001b20 <main+0x220>)
 8001946:	2201      	movs	r2, #1
 8001948:	819a      	strh	r2, [r3, #12]
    lcd1.hw_conf.rst_port = GPIOB;
 800194a:	4b75      	ldr	r3, [pc, #468]	; (8001b20 <main+0x220>)
 800194c:	4a77      	ldr	r2, [pc, #476]	; (8001b2c <main+0x22c>)
 800194e:	611a      	str	r2, [r3, #16]
    lcd1.hw_conf.dc_pin =  GPIO_PIN_3;
 8001950:	4b73      	ldr	r3, [pc, #460]	; (8001b20 <main+0x220>)
 8001952:	2208      	movs	r2, #8
 8001954:	829a      	strh	r2, [r3, #20]
    lcd1.hw_conf.dc_port = GPIOA;
 8001956:	4b72      	ldr	r3, [pc, #456]	; (8001b20 <main+0x220>)
 8001958:	4a73      	ldr	r2, [pc, #460]	; (8001b28 <main+0x228>)
 800195a:	619a      	str	r2, [r3, #24]
    lcd1.def_scr = lcd5110_def_scr;
 800195c:	4b70      	ldr	r3, [pc, #448]	; (8001b20 <main+0x220>)
 800195e:	4a74      	ldr	r2, [pc, #464]	; (8001b30 <main+0x230>)
 8001960:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001964:	4614      	mov	r4, r2
 8001966:	6820      	ldr	r0, [r4, #0]
 8001968:	6861      	ldr	r1, [r4, #4]
 800196a:	68a2      	ldr	r2, [r4, #8]
 800196c:	c307      	stmia	r3!, {r0, r1, r2}
 800196e:	89a2      	ldrh	r2, [r4, #12]
 8001970:	801a      	strh	r2, [r3, #0]
    LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8001972:	2303      	movs	r3, #3
 8001974:	9300      	str	r3, [sp, #0]
 8001976:	2302      	movs	r3, #2
 8001978:	2240      	movs	r2, #64	; 0x40
 800197a:	210c      	movs	r1, #12
 800197c:	4868      	ldr	r0, [pc, #416]	; (8001b20 <main+0x220>)
 800197e:	f7ff fdc3 	bl	8001508 <LCD5110_init>
    char buf[10] = {0}; // Initialized to all zeros
 8001982:	2300      	movs	r3, #0
 8001984:	607b      	str	r3, [r7, #4]
 8001986:	f107 0308 	add.w	r3, r7, #8
 800198a:	2200      	movs	r2, #0
 800198c:	601a      	str	r2, [r3, #0]
 800198e:	809a      	strh	r2, [r3, #4]
    int pos = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    char key_pressed = 0;
 8001996:	2300      	movs	r3, #0
 8001998:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b
    rect_t rect={0,0, 83, 10};
 800199c:	4a65      	ldr	r2, [pc, #404]	; (8001b34 <main+0x234>)
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80019a6:	e883 0003 	stmia.w	r3, {r0, r1}
    const unsigned char call_image[] = {
 80019aa:	4a63      	ldr	r2, [pc, #396]	; (8001b38 <main+0x238>)
 80019ac:	f107 0318 	add.w	r3, r7, #24
 80019b0:	4611      	mov	r1, r2
 80019b2:	2278      	movs	r2, #120	; 0x78
 80019b4:	4618      	mov	r0, r3
 80019b6:	f007 fc95 	bl	80092e4 <memcpy>
    	LCD5110_drawBitmap(25, 1, call_image, 30, 30, 0, &lcd1.hw_conf);
    	LCD5110_set_cursor(10, 40, &lcd1);
    	LCD5110_print("A-end call", 0, &lcd1);
    	is_call = true;
    }
    init_screen();
 80019ba:	f107 0310 	add.w	r3, r7, #16
 80019be:	469c      	mov	ip, r3
 80019c0:	f7ff ff52 	bl	8001868 <init_screen.0>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    key_pressed = keypad_scan();
 80019c4:	f7ff fe68 	bl	8001698 <keypad_scan>
 80019c8:	4603      	mov	r3, r0
 80019ca:	f887 309b 	strb.w	r3, [r7, #155]	; 0x9b

	    if(key_pressed != 0)
 80019ce:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	f000 8099 	beq.w	8001b0a <main+0x20a>
	    {

	    	if (key_pressed == 'A') {
 80019d8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 80019dc:	2b41      	cmp	r3, #65	; 0x41
 80019de:	d123      	bne.n	8001a28 <main+0x128>
	    		if (is_call) {
 80019e0:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d019      	beq.n	8001a1c <main+0x11c>
	    			buf[0] = '\0';
 80019e8:	2300      	movs	r3, #0
 80019ea:	713b      	strb	r3, [r7, #4]
					pos = 0;
 80019ec:	2300      	movs	r3, #0
 80019ee:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
					LCD5110_refresh(&lcd1);
 80019f2:	484b      	ldr	r0, [pc, #300]	; (8001b20 <main+0x220>)
 80019f4:	f7ff f84a 	bl	8000a8c <LCD5110_refresh>
					LCD5110_rect_fill(&rect, 1, &lcd1);
 80019f8:	f107 0310 	add.w	r3, r7, #16
 80019fc:	4a48      	ldr	r2, [pc, #288]	; (8001b20 <main+0x220>)
 80019fe:	2101      	movs	r1, #1
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fa1c 	bl	8000e3e <LCD5110_rect_fill>
					LCD5110_set_cursor(0, 0, &lcd1);
 8001a06:	4a46      	ldr	r2, [pc, #280]	; (8001b20 <main+0x220>)
 8001a08:	2100      	movs	r1, #0
 8001a0a:	2000      	movs	r0, #0
 8001a0c:	f7ff f84a 	bl	8000aa4 <LCD5110_set_cursor>
	    			init_screen();
 8001a10:	f107 0310 	add.w	r3, r7, #16
 8001a14:	469c      	mov	ip, r3
 8001a16:	f7ff ff27 	bl	8001868 <init_screen.0>
 8001a1a:	e076      	b.n	8001b0a <main+0x20a>
	    		}
	    		else {
	    			call_screen();
 8001a1c:	f107 0310 	add.w	r3, r7, #16
 8001a20:	469c      	mov	ip, r3
 8001a22:	f000 f88b 	bl	8001b3c <call_screen.1>
 8001a26:	e070      	b.n	8001b0a <main+0x20a>
	    		}
	    	}
	    	else if (key_pressed == 'D')
 8001a28:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a2c:	2b44      	cmp	r3, #68	; 0x44
 8001a2e:	d11a      	bne.n	8001a66 <main+0x166>
	        {
	            memset(buf, ' ', sizeof(buf) - 1);
 8001a30:	1d3b      	adds	r3, r7, #4
 8001a32:	2209      	movs	r2, #9
 8001a34:	2120      	movs	r1, #32
 8001a36:	4618      	mov	r0, r3
 8001a38:	f007 fc28 	bl	800928c <memset>
	            buf[0] = '\0';
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	713b      	strb	r3, [r7, #4]
	            pos = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	            LCD5110_refresh(&lcd1);
 8001a46:	4836      	ldr	r0, [pc, #216]	; (8001b20 <main+0x220>)
 8001a48:	f7ff f820 	bl	8000a8c <LCD5110_refresh>
	            LCD5110_rect_fill(&rect, 1, &lcd1);
 8001a4c:	f107 0310 	add.w	r3, r7, #16
 8001a50:	4a33      	ldr	r2, [pc, #204]	; (8001b20 <main+0x220>)
 8001a52:	2101      	movs	r1, #1
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7ff f9f2 	bl	8000e3e <LCD5110_rect_fill>
	            LCD5110_set_cursor(0, 0, &lcd1);
 8001a5a:	4a31      	ldr	r2, [pc, #196]	; (8001b20 <main+0x220>)
 8001a5c:	2100      	movs	r1, #0
 8001a5e:	2000      	movs	r0, #0
 8001a60:	f7ff f820 	bl	8000aa4 <LCD5110_set_cursor>
 8001a64:	e051      	b.n	8001b0a <main+0x20a>
	        }
	        else if (key_pressed == 'C' && pos > 0)
 8001a66:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001a6a:	2b43      	cmp	r3, #67	; 0x43
 8001a6c:	d124      	bne.n	8001ab8 <main+0x1b8>
 8001a6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	dd20      	ble.n	8001ab8 <main+0x1b8>
	                {
	        			pos--;
 8001a76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a7a:	3b01      	subs	r3, #1
 8001a7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
						buf[pos] = '\0'; // Null-terminate the string at the new position
 8001a80:	1d3a      	adds	r2, r7, #4
 8001a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001a86:	4413      	add	r3, r2
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]

						// Clear the LCD before setting the cursor and printing the new buffer
						LCD5110_refresh(&lcd1);
 8001a8c:	4824      	ldr	r0, [pc, #144]	; (8001b20 <main+0x220>)
 8001a8e:	f7fe fffd 	bl	8000a8c <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	4a22      	ldr	r2, [pc, #136]	; (8001b20 <main+0x220>)
 8001a98:	2101      	movs	r1, #1
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7ff f9cf 	bl	8000e3e <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 8001aa0:	4a1f      	ldr	r2, [pc, #124]	; (8001b20 <main+0x220>)
 8001aa2:	2100      	movs	r1, #0
 8001aa4:	2000      	movs	r0, #0
 8001aa6:	f7fe fffd 	bl	8000aa4 <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1); // Print the updated buffer
 8001aaa:	1d3b      	adds	r3, r7, #4
 8001aac:	4a1c      	ldr	r2, [pc, #112]	; (8001b20 <main+0x220>)
 8001aae:	2100      	movs	r1, #0
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff f81a 	bl	8000aea <LCD5110_print>
 8001ab6:	e028      	b.n	8001b0a <main+0x20a>
	                }
	        else if (key_pressed >= '0' && key_pressed <= '9' && pos < sizeof(buf))
 8001ab8:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001abc:	2b2f      	cmp	r3, #47	; 0x2f
 8001abe:	d924      	bls.n	8001b0a <main+0x20a>
 8001ac0:	f897 309b 	ldrb.w	r3, [r7, #155]	; 0x9b
 8001ac4:	2b39      	cmp	r3, #57	; 0x39
 8001ac6:	d820      	bhi.n	8001b0a <main+0x20a>
 8001ac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001acc:	2b09      	cmp	r3, #9
 8001ace:	d81c      	bhi.n	8001b0a <main+0x20a>
	        {
	            buf[pos] = key_pressed;
 8001ad0:	1d3a      	adds	r2, r7, #4
 8001ad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ad6:	4413      	add	r3, r2
 8001ad8:	f897 209b 	ldrb.w	r2, [r7, #155]	; 0x9b
 8001adc:	701a      	strb	r2, [r3, #0]
	            pos++;
 8001ade:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	            buf[pos] = '\0'; // Ensure null termination
 8001ae8:	1d3a      	adds	r2, r7, #4
 8001aea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8001aee:	4413      	add	r3, r2
 8001af0:	2200      	movs	r2, #0
 8001af2:	701a      	strb	r2, [r3, #0]

	            LCD5110_set_cursor(0, 0, &lcd1);
 8001af4:	4a0a      	ldr	r2, [pc, #40]	; (8001b20 <main+0x220>)
 8001af6:	2100      	movs	r1, #0
 8001af8:	2000      	movs	r0, #0
 8001afa:	f7fe ffd3 	bl	8000aa4 <LCD5110_set_cursor>
	            LCD5110_print(buf, 0, &lcd1);
 8001afe:	1d3b      	adds	r3, r7, #4
 8001b00:	4a07      	ldr	r2, [pc, #28]	; (8001b20 <main+0x220>)
 8001b02:	2100      	movs	r1, #0
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7fe fff0 	bl	8000aea <LCD5110_print>
	        }
	    }
	    LCD5110_refresh(&lcd1);
 8001b0a:	4805      	ldr	r0, [pc, #20]	; (8001b20 <main+0x220>)
 8001b0c:	f7fe ffbe 	bl	8000a8c <LCD5110_refresh>
	    HAL_Delay(1000);
 8001b10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001b14:	f000 fa72 	bl	8001ffc <HAL_Delay>
	    LCD5110_refresh(&lcd1);
 8001b18:	4801      	ldr	r0, [pc, #4]	; (8001b20 <main+0x220>)
 8001b1a:	f7fe ffb7 	bl	8000a8c <LCD5110_refresh>
	    key_pressed = keypad_scan();
 8001b1e:	e751      	b.n	80019c4 <main+0xc4>
 8001b20:	2000023c 	.word	0x2000023c
 8001b24:	20000460 	.word	0x20000460
 8001b28:	40020000 	.word	0x40020000
 8001b2c:	40020400 	.word	0x40020400
 8001b30:	08009a20 	.word	0x08009a20
 8001b34:	0800934c 	.word	0x0800934c
 8001b38:	08009354 	.word	0x08009354

08001b3c <call_screen.1>:
    void call_screen() {
 8001b3c:	b590      	push	{r4, r7, lr}
 8001b3e:	b087      	sub	sp, #28
 8001b40:	af04      	add	r7, sp, #16
 8001b42:	4664      	mov	r4, ip
 8001b44:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 8001b48:	4811      	ldr	r0, [pc, #68]	; (8001b90 <call_screen.1+0x54>)
 8001b4a:	f7fe ffbd 	bl	8000ac8 <LCD5110_clear_scr>
    	LCD5110_refresh(&lcd1);
 8001b4e:	4810      	ldr	r0, [pc, #64]	; (8001b90 <call_screen.1+0x54>)
 8001b50:	f7fe ff9c 	bl	8000a8c <LCD5110_refresh>
    	LCD5110_drawBitmap(25, 1, call_image, 30, 30, 0, &lcd1.hw_conf);
 8001b54:	f104 0208 	add.w	r2, r4, #8
 8001b58:	4b0d      	ldr	r3, [pc, #52]	; (8001b90 <call_screen.1+0x54>)
 8001b5a:	9302      	str	r3, [sp, #8]
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	9301      	str	r3, [sp, #4]
 8001b60:	231e      	movs	r3, #30
 8001b62:	9300      	str	r3, [sp, #0]
 8001b64:	231e      	movs	r3, #30
 8001b66:	2101      	movs	r1, #1
 8001b68:	2019      	movs	r0, #25
 8001b6a:	f7ff fb14 	bl	8001196 <LCD5110_drawBitmap>
    	LCD5110_set_cursor(10, 40, &lcd1);
 8001b6e:	4a08      	ldr	r2, [pc, #32]	; (8001b90 <call_screen.1+0x54>)
 8001b70:	2128      	movs	r1, #40	; 0x28
 8001b72:	200a      	movs	r0, #10
 8001b74:	f7fe ff96 	bl	8000aa4 <LCD5110_set_cursor>
    	LCD5110_print("A-end call", 0, &lcd1);
 8001b78:	4a05      	ldr	r2, [pc, #20]	; (8001b90 <call_screen.1+0x54>)
 8001b7a:	2100      	movs	r1, #0
 8001b7c:	4805      	ldr	r0, [pc, #20]	; (8001b94 <call_screen.1+0x58>)
 8001b7e:	f7fe ffb4 	bl	8000aea <LCD5110_print>
    	is_call = true;
 8001b82:	2301      	movs	r3, #1
 8001b84:	f884 3080 	strb.w	r3, [r4, #128]	; 0x80
    }
 8001b88:	bf00      	nop
 8001b8a:	370c      	adds	r7, #12
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd90      	pop	{r4, r7, pc}
 8001b90:	2000023c 	.word	0x2000023c
 8001b94:	080093cc 	.word	0x080093cc

08001b98 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b094      	sub	sp, #80	; 0x50
 8001b9c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b9e:	f107 0320 	add.w	r3, r7, #32
 8001ba2:	2230      	movs	r2, #48	; 0x30
 8001ba4:	2100      	movs	r1, #0
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f007 fb70 	bl	800928c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bac:	f107 030c 	add.w	r3, r7, #12
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	60bb      	str	r3, [r7, #8]
 8001bc0:	4b27      	ldr	r3, [pc, #156]	; (8001c60 <SystemClock_Config+0xc8>)
 8001bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc4:	4a26      	ldr	r2, [pc, #152]	; (8001c60 <SystemClock_Config+0xc8>)
 8001bc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bca:	6413      	str	r3, [r2, #64]	; 0x40
 8001bcc:	4b24      	ldr	r3, [pc, #144]	; (8001c60 <SystemClock_Config+0xc8>)
 8001bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bd0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bd4:	60bb      	str	r3, [r7, #8]
 8001bd6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bd8:	2300      	movs	r3, #0
 8001bda:	607b      	str	r3, [r7, #4]
 8001bdc:	4b21      	ldr	r3, [pc, #132]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a20      	ldr	r2, [pc, #128]	; (8001c64 <SystemClock_Config+0xcc>)
 8001be2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be6:	6013      	str	r3, [r2, #0]
 8001be8:	4b1e      	ldr	r3, [pc, #120]	; (8001c64 <SystemClock_Config+0xcc>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bf8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bfc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bfe:	2302      	movs	r3, #2
 8001c00:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c02:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001c08:	2304      	movs	r3, #4
 8001c0a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001c0c:	23a8      	movs	r3, #168	; 0xa8
 8001c0e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001c10:	2304      	movs	r3, #4
 8001c12:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001c14:	2307      	movs	r3, #7
 8001c16:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c18:	f107 0320 	add.w	r3, r7, #32
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f002 fd47 	bl	80046b0 <HAL_RCC_OscConfig>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d001      	beq.n	8001c2c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001c28:	f000 f83e 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c2c:	230f      	movs	r3, #15
 8001c2e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c30:	2302      	movs	r3, #2
 8001c32:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c34:	2300      	movs	r3, #0
 8001c36:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c3c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c42:	f107 030c 	add.w	r3, r7, #12
 8001c46:	2102      	movs	r1, #2
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f002 ffa9 	bl	8004ba0 <HAL_RCC_ClockConfig>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001c54:	f000 f828 	bl	8001ca8 <Error_Handler>
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3750      	adds	r7, #80	; 0x50
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40023800 	.word	0x40023800
 8001c64:	40007000 	.word	0x40007000

08001c68 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b086      	sub	sp, #24
 8001c6c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001c6e:	463b      	mov	r3, r7
 8001c70:	2200      	movs	r2, #0
 8001c72:	601a      	str	r2, [r3, #0]
 8001c74:	605a      	str	r2, [r3, #4]
 8001c76:	609a      	str	r2, [r3, #8]
 8001c78:	60da      	str	r2, [r3, #12]
 8001c7a:	611a      	str	r2, [r3, #16]
 8001c7c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8001c82:	23c8      	movs	r3, #200	; 0xc8
 8001c84:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8001c86:	2305      	movs	r3, #5
 8001c88:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001c8a:	2302      	movs	r3, #2
 8001c8c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c8e:	463b      	mov	r3, r7
 8001c90:	4618      	mov	r0, r3
 8001c92:	f003 f991 	bl	8004fb8 <HAL_RCCEx_PeriphCLKConfig>
 8001c96:	4603      	mov	r3, r0
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d001      	beq.n	8001ca0 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 8001c9c:	f000 f804 	bl	8001ca8 <Error_Handler>
  }
}
 8001ca0:	bf00      	nop
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Error_Handler+0x8>
	...

08001cb4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001cb8:	4b17      	ldr	r3, [pc, #92]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cba:	4a18      	ldr	r2, [pc, #96]	; (8001d1c <MX_SPI1_Init+0x68>)
 8001cbc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001cbe:	4b16      	ldr	r3, [pc, #88]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cc0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001cc6:	4b14      	ldr	r3, [pc, #80]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cc8:	2200      	movs	r2, #0
 8001cca:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001ccc:	4b12      	ldr	r3, [pc, #72]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd2:	4b11      	ldr	r3, [pc, #68]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd8:	4b0f      	ldr	r3, [pc, #60]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001cde:	4b0e      	ldr	r3, [pc, #56]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001ce0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ce4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001ce6:	4b0c      	ldr	r3, [pc, #48]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001ce8:	2210      	movs	r2, #16
 8001cea:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf2:	4b09      	ldr	r3, [pc, #36]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf8:	4b07      	ldr	r3, [pc, #28]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001d00:	220a      	movs	r2, #10
 8001d02:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001d04:	4804      	ldr	r0, [pc, #16]	; (8001d18 <MX_SPI1_Init+0x64>)
 8001d06:	f003 faa7 	bl	8005258 <HAL_SPI_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001d10:	f7ff ffca 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001d14:	bf00      	nop
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	20000460 	.word	0x20000460
 8001d1c:	40013000 	.word	0x40013000

08001d20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b08a      	sub	sp, #40	; 0x28
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d28:	f107 0314 	add.w	r3, r7, #20
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	601a      	str	r2, [r3, #0]
 8001d30:	605a      	str	r2, [r3, #4]
 8001d32:	609a      	str	r2, [r3, #8]
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a19      	ldr	r2, [pc, #100]	; (8001da4 <HAL_SPI_MspInit+0x84>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d12b      	bne.n	8001d9a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d42:	2300      	movs	r3, #0
 8001d44:	613b      	str	r3, [r7, #16]
 8001d46:	4b18      	ldr	r3, [pc, #96]	; (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4a:	4a17      	ldr	r2, [pc, #92]	; (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d4c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001d50:	6453      	str	r3, [r2, #68]	; 0x44
 8001d52:	4b15      	ldr	r3, [pc, #84]	; (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d5a:	613b      	str	r3, [r7, #16]
 8001d5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d5e:	2300      	movs	r3, #0
 8001d60:	60fb      	str	r3, [r7, #12]
 8001d62:	4b11      	ldr	r3, [pc, #68]	; (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	4a10      	ldr	r2, [pc, #64]	; (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d68:	f043 0301 	orr.w	r3, r3, #1
 8001d6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6e:	4b0e      	ldr	r3, [pc, #56]	; (8001da8 <HAL_SPI_MspInit+0x88>)
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	60fb      	str	r3, [r7, #12]
 8001d78:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001d7a:	23e0      	movs	r3, #224	; 0xe0
 8001d7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d7e:	2302      	movs	r3, #2
 8001d80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d82:	2300      	movs	r3, #0
 8001d84:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d86:	2303      	movs	r3, #3
 8001d88:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001d8a:	2305      	movs	r3, #5
 8001d8c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d8e:	f107 0314 	add.w	r3, r7, #20
 8001d92:	4619      	mov	r1, r3
 8001d94:	4805      	ldr	r0, [pc, #20]	; (8001dac <HAL_SPI_MspInit+0x8c>)
 8001d96:	f000 fa67 	bl	8002268 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	; 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40013000 	.word	0x40013000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b082      	sub	sp, #8
 8001db4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db6:	2300      	movs	r3, #0
 8001db8:	607b      	str	r3, [r7, #4]
 8001dba:	4b10      	ldr	r3, [pc, #64]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dbe:	4a0f      	ldr	r2, [pc, #60]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc6:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dce:	607b      	str	r3, [r7, #4]
 8001dd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	603b      	str	r3, [r7, #0]
 8001dd6:	4b09      	ldr	r3, [pc, #36]	; (8001dfc <HAL_MspInit+0x4c>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dda:	4a08      	ldr	r2, [pc, #32]	; (8001dfc <HAL_MspInit+0x4c>)
 8001ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001de0:	6413      	str	r3, [r2, #64]	; 0x40
 8001de2:	4b06      	ldr	r3, [pc, #24]	; (8001dfc <HAL_MspInit+0x4c>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dea:	603b      	str	r3, [r7, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001dee:	2007      	movs	r0, #7
 8001df0:	f000 f9f8 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001df4:	bf00      	nop
 8001df6:	3708      	adds	r7, #8
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40023800 	.word	0x40023800

08001e00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e04:	e7fe      	b.n	8001e04 <NMI_Handler+0x4>

08001e06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e06:	b480      	push	{r7}
 8001e08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e0a:	e7fe      	b.n	8001e0a <HardFault_Handler+0x4>

08001e0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e10:	e7fe      	b.n	8001e10 <MemManage_Handler+0x4>

08001e12 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e12:	b480      	push	{r7}
 8001e14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e16:	e7fe      	b.n	8001e16 <BusFault_Handler+0x4>

08001e18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e1c:	e7fe      	b.n	8001e1c <UsageFault_Handler+0x4>

08001e1e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e1e:	b480      	push	{r7}
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e30:	bf00      	nop
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e3e:	bf00      	nop
 8001e40:	46bd      	mov	sp, r7
 8001e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e46:	4770      	bx	lr

08001e48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e4c:	f000 f8b6 	bl	8001fbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e50:	bf00      	nop
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001e58:	2001      	movs	r0, #1
 8001e5a:	f000 fbbb 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8001e66:	2002      	movs	r0, #2
 8001e68:	f000 fbb4 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001e6c:	bf00      	nop
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8001e74:	2004      	movs	r0, #4
 8001e76:	f000 fbad 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8001e7a:	bf00      	nop
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8001e82:	2008      	movs	r0, #8
 8001e84:	f000 fba6 	bl	80025d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}

08001e8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <OTG_FS_IRQHandler+0x10>)
 8001e92:	f001 faf7 	bl	8003484 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	2000099c 	.word	0x2000099c

08001ea0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ea4:	4b06      	ldr	r3, [pc, #24]	; (8001ec0 <SystemInit+0x20>)
 8001ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eaa:	4a05      	ldr	r2, [pc, #20]	; (8001ec0 <SystemInit+0x20>)
 8001eac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001eb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001eb4:	bf00      	nop
 8001eb6:	46bd      	mov	sp, r7
 8001eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebc:	4770      	bx	lr
 8001ebe:	bf00      	nop
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ec4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001efc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ec8:	480d      	ldr	r0, [pc, #52]	; (8001f00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001eca:	490e      	ldr	r1, [pc, #56]	; (8001f04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001ecc:	4a0e      	ldr	r2, [pc, #56]	; (8001f08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ece:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ed0:	e002      	b.n	8001ed8 <LoopCopyDataInit>

08001ed2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ed2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ed4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ed6:	3304      	adds	r3, #4

08001ed8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ed8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001eda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001edc:	d3f9      	bcc.n	8001ed2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ede:	4a0b      	ldr	r2, [pc, #44]	; (8001f0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ee0:	4c0b      	ldr	r4, [pc, #44]	; (8001f10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ee2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ee4:	e001      	b.n	8001eea <LoopFillZerobss>

08001ee6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ee6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ee8:	3204      	adds	r2, #4

08001eea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eec:	d3fb      	bcc.n	8001ee6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eee:	f7ff ffd7 	bl	8001ea0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ef2:	f007 f9d3 	bl	800929c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ef6:	f7ff fd03 	bl	8001900 <main>
  bx  lr    
 8001efa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001efc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001f00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f04:	2000013c 	.word	0x2000013c
  ldr r2, =_sidata
 8001f08:	08009b5c 	.word	0x08009b5c
  ldr r2, =_sbss
 8001f0c:	2000013c 	.word	0x2000013c
  ldr r4, =_ebss
 8001f10:	20000ebc 	.word	0x20000ebc

08001f14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f14:	e7fe      	b.n	8001f14 <ADC_IRQHandler>
	...

08001f18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001f1c:	4b0e      	ldr	r3, [pc, #56]	; (8001f58 <HAL_Init+0x40>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a0d      	ldr	r2, [pc, #52]	; (8001f58 <HAL_Init+0x40>)
 8001f22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <HAL_Init+0x40>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <HAL_Init+0x40>)
 8001f2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f34:	4b08      	ldr	r3, [pc, #32]	; (8001f58 <HAL_Init+0x40>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a07      	ldr	r2, [pc, #28]	; (8001f58 <HAL_Init+0x40>)
 8001f3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f40:	2003      	movs	r0, #3
 8001f42:	f000 f94f 	bl	80021e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f46:	2000      	movs	r0, #0
 8001f48:	f000 f808 	bl	8001f5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f4c:	f7ff ff30 	bl	8001db0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40023c00 	.word	0x40023c00

08001f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f64:	4b12      	ldr	r3, [pc, #72]	; (8001fb0 <HAL_InitTick+0x54>)
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	4b12      	ldr	r3, [pc, #72]	; (8001fb4 <HAL_InitTick+0x58>)
 8001f6a:	781b      	ldrb	r3, [r3, #0]
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 f967 	bl	800224e <HAL_SYSTICK_Config>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
 8001f88:	e00e      	b.n	8001fa8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2b0f      	cmp	r3, #15
 8001f8e:	d80a      	bhi.n	8001fa6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f90:	2200      	movs	r2, #0
 8001f92:	6879      	ldr	r1, [r7, #4]
 8001f94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f98:	f000 f92f 	bl	80021fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <HAL_InitTick+0x5c>)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	e000      	b.n	8001fa8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	20000020 	.word	0x20000020
 8001fb4:	20000028 	.word	0x20000028
 8001fb8:	20000024 	.word	0x20000024

08001fbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fc0:	4b06      	ldr	r3, [pc, #24]	; (8001fdc <HAL_IncTick+0x20>)
 8001fc2:	781b      	ldrb	r3, [r3, #0]
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4413      	add	r3, r2
 8001fcc:	4a04      	ldr	r2, [pc, #16]	; (8001fe0 <HAL_IncTick+0x24>)
 8001fce:	6013      	str	r3, [r2, #0]
}
 8001fd0:	bf00      	nop
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000028 	.word	0x20000028
 8001fe0:	200004b8 	.word	0x200004b8

08001fe4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0
  return uwTick;
 8001fe8:	4b03      	ldr	r3, [pc, #12]	; (8001ff8 <HAL_GetTick+0x14>)
 8001fea:	681b      	ldr	r3, [r3, #0]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff4:	4770      	bx	lr
 8001ff6:	bf00      	nop
 8001ff8:	200004b8 	.word	0x200004b8

08001ffc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002004:	f7ff ffee 	bl	8001fe4 <HAL_GetTick>
 8002008:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002014:	d005      	beq.n	8002022 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002016:	4b0a      	ldr	r3, [pc, #40]	; (8002040 <HAL_Delay+0x44>)
 8002018:	781b      	ldrb	r3, [r3, #0]
 800201a:	461a      	mov	r2, r3
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	4413      	add	r3, r2
 8002020:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002022:	bf00      	nop
 8002024:	f7ff ffde 	bl	8001fe4 <HAL_GetTick>
 8002028:	4602      	mov	r2, r0
 800202a:	68bb      	ldr	r3, [r7, #8]
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	68fa      	ldr	r2, [r7, #12]
 8002030:	429a      	cmp	r2, r3
 8002032:	d8f7      	bhi.n	8002024 <HAL_Delay+0x28>
  {
  }
}
 8002034:	bf00      	nop
 8002036:	bf00      	nop
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20000028 	.word	0x20000028

08002044 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002044:	b480      	push	{r7}
 8002046:	b085      	sub	sp, #20
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002054:	4b0c      	ldr	r3, [pc, #48]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002056:	68db      	ldr	r3, [r3, #12]
 8002058:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800205a:	68ba      	ldr	r2, [r7, #8]
 800205c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002060:	4013      	ands	r3, r2
 8002062:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800206c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002070:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002074:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002076:	4a04      	ldr	r2, [pc, #16]	; (8002088 <__NVIC_SetPriorityGrouping+0x44>)
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	60d3      	str	r3, [r2, #12]
}
 800207c:	bf00      	nop
 800207e:	3714      	adds	r7, #20
 8002080:	46bd      	mov	sp, r7
 8002082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002086:	4770      	bx	lr
 8002088:	e000ed00 	.word	0xe000ed00

0800208c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800208c:	b480      	push	{r7}
 800208e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002090:	4b04      	ldr	r3, [pc, #16]	; (80020a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002092:	68db      	ldr	r3, [r3, #12]
 8002094:	0a1b      	lsrs	r3, r3, #8
 8002096:	f003 0307 	and.w	r3, r3, #7
}
 800209a:	4618      	mov	r0, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a2:	4770      	bx	lr
 80020a4:	e000ed00 	.word	0xe000ed00

080020a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a8:	b480      	push	{r7}
 80020aa:	b083      	sub	sp, #12
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	4603      	mov	r3, r0
 80020b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	db0b      	blt.n	80020d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020ba:	79fb      	ldrb	r3, [r7, #7]
 80020bc:	f003 021f 	and.w	r2, r3, #31
 80020c0:	4907      	ldr	r1, [pc, #28]	; (80020e0 <__NVIC_EnableIRQ+0x38>)
 80020c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c6:	095b      	lsrs	r3, r3, #5
 80020c8:	2001      	movs	r0, #1
 80020ca:	fa00 f202 	lsl.w	r2, r0, r2
 80020ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020d2:	bf00      	nop
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
 80020de:	bf00      	nop
 80020e0:	e000e100 	.word	0xe000e100

080020e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	4603      	mov	r3, r0
 80020ec:	6039      	str	r1, [r7, #0]
 80020ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	db0a      	blt.n	800210e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020f8:	683b      	ldr	r3, [r7, #0]
 80020fa:	b2da      	uxtb	r2, r3
 80020fc:	490c      	ldr	r1, [pc, #48]	; (8002130 <__NVIC_SetPriority+0x4c>)
 80020fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002102:	0112      	lsls	r2, r2, #4
 8002104:	b2d2      	uxtb	r2, r2
 8002106:	440b      	add	r3, r1
 8002108:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800210c:	e00a      	b.n	8002124 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	b2da      	uxtb	r2, r3
 8002112:	4908      	ldr	r1, [pc, #32]	; (8002134 <__NVIC_SetPriority+0x50>)
 8002114:	79fb      	ldrb	r3, [r7, #7]
 8002116:	f003 030f 	and.w	r3, r3, #15
 800211a:	3b04      	subs	r3, #4
 800211c:	0112      	lsls	r2, r2, #4
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	440b      	add	r3, r1
 8002122:	761a      	strb	r2, [r3, #24]
}
 8002124:	bf00      	nop
 8002126:	370c      	adds	r7, #12
 8002128:	46bd      	mov	sp, r7
 800212a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212e:	4770      	bx	lr
 8002130:	e000e100 	.word	0xe000e100
 8002134:	e000ed00 	.word	0xe000ed00

08002138 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002138:	b480      	push	{r7}
 800213a:	b089      	sub	sp, #36	; 0x24
 800213c:	af00      	add	r7, sp, #0
 800213e:	60f8      	str	r0, [r7, #12]
 8002140:	60b9      	str	r1, [r7, #8]
 8002142:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	f003 0307 	and.w	r3, r3, #7
 800214a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	f1c3 0307 	rsb	r3, r3, #7
 8002152:	2b04      	cmp	r3, #4
 8002154:	bf28      	it	cs
 8002156:	2304      	movcs	r3, #4
 8002158:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	3304      	adds	r3, #4
 800215e:	2b06      	cmp	r3, #6
 8002160:	d902      	bls.n	8002168 <NVIC_EncodePriority+0x30>
 8002162:	69fb      	ldr	r3, [r7, #28]
 8002164:	3b03      	subs	r3, #3
 8002166:	e000      	b.n	800216a <NVIC_EncodePriority+0x32>
 8002168:	2300      	movs	r3, #0
 800216a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800216c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002170:	69bb      	ldr	r3, [r7, #24]
 8002172:	fa02 f303 	lsl.w	r3, r2, r3
 8002176:	43da      	mvns	r2, r3
 8002178:	68bb      	ldr	r3, [r7, #8]
 800217a:	401a      	ands	r2, r3
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002180:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	fa01 f303 	lsl.w	r3, r1, r3
 800218a:	43d9      	mvns	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002190:	4313      	orrs	r3, r2
         );
}
 8002192:	4618      	mov	r0, r3
 8002194:	3724      	adds	r7, #36	; 0x24
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
	...

080021a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80021a0:	b580      	push	{r7, lr}
 80021a2:	b082      	sub	sp, #8
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	3b01      	subs	r3, #1
 80021ac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021b0:	d301      	bcc.n	80021b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80021b2:	2301      	movs	r3, #1
 80021b4:	e00f      	b.n	80021d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80021b6:	4a0a      	ldr	r2, [pc, #40]	; (80021e0 <SysTick_Config+0x40>)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	3b01      	subs	r3, #1
 80021bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80021be:	210f      	movs	r1, #15
 80021c0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80021c4:	f7ff ff8e 	bl	80020e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80021c8:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <SysTick_Config+0x40>)
 80021ca:	2200      	movs	r2, #0
 80021cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80021ce:	4b04      	ldr	r3, [pc, #16]	; (80021e0 <SysTick_Config+0x40>)
 80021d0:	2207      	movs	r2, #7
 80021d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	e000e010 	.word	0xe000e010

080021e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b082      	sub	sp, #8
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ff29 	bl	8002044 <__NVIC_SetPriorityGrouping>
}
 80021f2:	bf00      	nop
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021fa:	b580      	push	{r7, lr}
 80021fc:	b086      	sub	sp, #24
 80021fe:	af00      	add	r7, sp, #0
 8002200:	4603      	mov	r3, r0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002208:	2300      	movs	r3, #0
 800220a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800220c:	f7ff ff3e 	bl	800208c <__NVIC_GetPriorityGrouping>
 8002210:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002212:	687a      	ldr	r2, [r7, #4]
 8002214:	68b9      	ldr	r1, [r7, #8]
 8002216:	6978      	ldr	r0, [r7, #20]
 8002218:	f7ff ff8e 	bl	8002138 <NVIC_EncodePriority>
 800221c:	4602      	mov	r2, r0
 800221e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002222:	4611      	mov	r1, r2
 8002224:	4618      	mov	r0, r3
 8002226:	f7ff ff5d 	bl	80020e4 <__NVIC_SetPriority>
}
 800222a:	bf00      	nop
 800222c:	3718      	adds	r7, #24
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}

08002232 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b082      	sub	sp, #8
 8002236:	af00      	add	r7, sp, #0
 8002238:	4603      	mov	r3, r0
 800223a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800223c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff ff31 	bl	80020a8 <__NVIC_EnableIRQ>
}
 8002246:	bf00      	nop
 8002248:	3708      	adds	r7, #8
 800224a:	46bd      	mov	sp, r7
 800224c:	bd80      	pop	{r7, pc}

0800224e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800224e:	b580      	push	{r7, lr}
 8002250:	b082      	sub	sp, #8
 8002252:	af00      	add	r7, sp, #0
 8002254:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7ff ffa2 	bl	80021a0 <SysTick_Config>
 800225c:	4603      	mov	r3, r0
}
 800225e:	4618      	mov	r0, r3
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
	...

08002268 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002268:	b480      	push	{r7}
 800226a:	b089      	sub	sp, #36	; 0x24
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002272:	2300      	movs	r3, #0
 8002274:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002276:	2300      	movs	r3, #0
 8002278:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800227a:	2300      	movs	r3, #0
 800227c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800227e:	2300      	movs	r3, #0
 8002280:	61fb      	str	r3, [r7, #28]
 8002282:	e159      	b.n	8002538 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002284:	2201      	movs	r2, #1
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	4013      	ands	r3, r2
 8002296:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002298:	693a      	ldr	r2, [r7, #16]
 800229a:	697b      	ldr	r3, [r7, #20]
 800229c:	429a      	cmp	r2, r3
 800229e:	f040 8148 	bne.w	8002532 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022a2:	683b      	ldr	r3, [r7, #0]
 80022a4:	685b      	ldr	r3, [r3, #4]
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	2b01      	cmp	r3, #1
 80022ac:	d005      	beq.n	80022ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d130      	bne.n	800231c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	2203      	movs	r2, #3
 80022c6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ca:	43db      	mvns	r3, r3
 80022cc:	69ba      	ldr	r2, [r7, #24]
 80022ce:	4013      	ands	r3, r2
 80022d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	68da      	ldr	r2, [r3, #12]
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	005b      	lsls	r3, r3, #1
 80022da:	fa02 f303 	lsl.w	r3, r2, r3
 80022de:	69ba      	ldr	r2, [r7, #24]
 80022e0:	4313      	orrs	r3, r2
 80022e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80022f0:	2201      	movs	r2, #1
 80022f2:	69fb      	ldr	r3, [r7, #28]
 80022f4:	fa02 f303 	lsl.w	r3, r2, r3
 80022f8:	43db      	mvns	r3, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4013      	ands	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002300:	683b      	ldr	r3, [r7, #0]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	091b      	lsrs	r3, r3, #4
 8002306:	f003 0201 	and.w	r2, r3, #1
 800230a:	69fb      	ldr	r3, [r7, #28]
 800230c:	fa02 f303 	lsl.w	r3, r2, r3
 8002310:	69ba      	ldr	r2, [r7, #24]
 8002312:	4313      	orrs	r3, r2
 8002314:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 0303 	and.w	r3, r3, #3
 8002324:	2b03      	cmp	r3, #3
 8002326:	d017      	beq.n	8002358 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68db      	ldr	r3, [r3, #12]
 800232c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	2203      	movs	r2, #3
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	43db      	mvns	r3, r3
 800233a:	69ba      	ldr	r2, [r7, #24]
 800233c:	4013      	ands	r3, r2
 800233e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002340:	683b      	ldr	r3, [r7, #0]
 8002342:	689a      	ldr	r2, [r3, #8]
 8002344:	69fb      	ldr	r3, [r7, #28]
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	fa02 f303 	lsl.w	r3, r2, r3
 800234c:	69ba      	ldr	r2, [r7, #24]
 800234e:	4313      	orrs	r3, r2
 8002350:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f003 0303 	and.w	r3, r3, #3
 8002360:	2b02      	cmp	r3, #2
 8002362:	d123      	bne.n	80023ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	08da      	lsrs	r2, r3, #3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	3208      	adds	r2, #8
 800236c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002370:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	f003 0307 	and.w	r3, r3, #7
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	220f      	movs	r2, #15
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	691a      	ldr	r2, [r3, #16]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0307 	and.w	r3, r3, #7
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800239e:	69fb      	ldr	r3, [r7, #28]
 80023a0:	08da      	lsrs	r2, r3, #3
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	3208      	adds	r2, #8
 80023a6:	69b9      	ldr	r1, [r7, #24]
 80023a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	005b      	lsls	r3, r3, #1
 80023b6:	2203      	movs	r2, #3
 80023b8:	fa02 f303 	lsl.w	r3, r2, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f003 0203 	and.w	r2, r3, #3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	005b      	lsls	r3, r3, #1
 80023d0:	fa02 f303 	lsl.w	r3, r2, r3
 80023d4:	69ba      	ldr	r2, [r7, #24]
 80023d6:	4313      	orrs	r3, r2
 80023d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	69ba      	ldr	r2, [r7, #24]
 80023de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	f000 80a2 	beq.w	8002532 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023ee:	2300      	movs	r3, #0
 80023f0:	60fb      	str	r3, [r7, #12]
 80023f2:	4b57      	ldr	r3, [pc, #348]	; (8002550 <HAL_GPIO_Init+0x2e8>)
 80023f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f6:	4a56      	ldr	r2, [pc, #344]	; (8002550 <HAL_GPIO_Init+0x2e8>)
 80023f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023fc:	6453      	str	r3, [r2, #68]	; 0x44
 80023fe:	4b54      	ldr	r3, [pc, #336]	; (8002550 <HAL_GPIO_Init+0x2e8>)
 8002400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002402:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002406:	60fb      	str	r3, [r7, #12]
 8002408:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800240a:	4a52      	ldr	r2, [pc, #328]	; (8002554 <HAL_GPIO_Init+0x2ec>)
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	089b      	lsrs	r3, r3, #2
 8002410:	3302      	adds	r3, #2
 8002412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002416:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002418:	69fb      	ldr	r3, [r7, #28]
 800241a:	f003 0303 	and.w	r3, r3, #3
 800241e:	009b      	lsls	r3, r3, #2
 8002420:	220f      	movs	r2, #15
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	4a49      	ldr	r2, [pc, #292]	; (8002558 <HAL_GPIO_Init+0x2f0>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d019      	beq.n	800246a <HAL_GPIO_Init+0x202>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	4a48      	ldr	r2, [pc, #288]	; (800255c <HAL_GPIO_Init+0x2f4>)
 800243a:	4293      	cmp	r3, r2
 800243c:	d013      	beq.n	8002466 <HAL_GPIO_Init+0x1fe>
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	4a47      	ldr	r2, [pc, #284]	; (8002560 <HAL_GPIO_Init+0x2f8>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d00d      	beq.n	8002462 <HAL_GPIO_Init+0x1fa>
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4a46      	ldr	r2, [pc, #280]	; (8002564 <HAL_GPIO_Init+0x2fc>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d007      	beq.n	800245e <HAL_GPIO_Init+0x1f6>
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a45      	ldr	r2, [pc, #276]	; (8002568 <HAL_GPIO_Init+0x300>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d101      	bne.n	800245a <HAL_GPIO_Init+0x1f2>
 8002456:	2304      	movs	r3, #4
 8002458:	e008      	b.n	800246c <HAL_GPIO_Init+0x204>
 800245a:	2307      	movs	r3, #7
 800245c:	e006      	b.n	800246c <HAL_GPIO_Init+0x204>
 800245e:	2303      	movs	r3, #3
 8002460:	e004      	b.n	800246c <HAL_GPIO_Init+0x204>
 8002462:	2302      	movs	r3, #2
 8002464:	e002      	b.n	800246c <HAL_GPIO_Init+0x204>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_GPIO_Init+0x204>
 800246a:	2300      	movs	r3, #0
 800246c:	69fa      	ldr	r2, [r7, #28]
 800246e:	f002 0203 	and.w	r2, r2, #3
 8002472:	0092      	lsls	r2, r2, #2
 8002474:	4093      	lsls	r3, r2
 8002476:	69ba      	ldr	r2, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800247c:	4935      	ldr	r1, [pc, #212]	; (8002554 <HAL_GPIO_Init+0x2ec>)
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	089b      	lsrs	r3, r3, #2
 8002482:	3302      	adds	r3, #2
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800248a:	4b38      	ldr	r3, [pc, #224]	; (800256c <HAL_GPIO_Init+0x304>)
 800248c:	689b      	ldr	r3, [r3, #8]
 800248e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	43db      	mvns	r3, r3
 8002494:	69ba      	ldr	r2, [r7, #24]
 8002496:	4013      	ands	r3, r2
 8002498:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024a6:	69ba      	ldr	r2, [r7, #24]
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024ae:	4a2f      	ldr	r2, [pc, #188]	; (800256c <HAL_GPIO_Init+0x304>)
 80024b0:	69bb      	ldr	r3, [r7, #24]
 80024b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024b4:	4b2d      	ldr	r3, [pc, #180]	; (800256c <HAL_GPIO_Init+0x304>)
 80024b6:	68db      	ldr	r3, [r3, #12]
 80024b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	43db      	mvns	r3, r3
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4013      	ands	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80024c4:	683b      	ldr	r3, [r7, #0]
 80024c6:	685b      	ldr	r3, [r3, #4]
 80024c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d003      	beq.n	80024d8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80024d0:	69ba      	ldr	r2, [r7, #24]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80024d8:	4a24      	ldr	r2, [pc, #144]	; (800256c <HAL_GPIO_Init+0x304>)
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80024de:	4b23      	ldr	r3, [pc, #140]	; (800256c <HAL_GPIO_Init+0x304>)
 80024e0:	685b      	ldr	r3, [r3, #4]
 80024e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024e4:	693b      	ldr	r3, [r7, #16]
 80024e6:	43db      	mvns	r3, r3
 80024e8:	69ba      	ldr	r2, [r7, #24]
 80024ea:	4013      	ands	r3, r2
 80024ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80024ee:	683b      	ldr	r3, [r7, #0]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d003      	beq.n	8002502 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80024fa:	69ba      	ldr	r2, [r7, #24]
 80024fc:	693b      	ldr	r3, [r7, #16]
 80024fe:	4313      	orrs	r3, r2
 8002500:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002502:	4a1a      	ldr	r2, [pc, #104]	; (800256c <HAL_GPIO_Init+0x304>)
 8002504:	69bb      	ldr	r3, [r7, #24]
 8002506:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002508:	4b18      	ldr	r3, [pc, #96]	; (800256c <HAL_GPIO_Init+0x304>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	43db      	mvns	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	4013      	ands	r3, r2
 8002516:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002520:	2b00      	cmp	r3, #0
 8002522:	d003      	beq.n	800252c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4313      	orrs	r3, r2
 800252a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800252c:	4a0f      	ldr	r2, [pc, #60]	; (800256c <HAL_GPIO_Init+0x304>)
 800252e:	69bb      	ldr	r3, [r7, #24]
 8002530:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002532:	69fb      	ldr	r3, [r7, #28]
 8002534:	3301      	adds	r3, #1
 8002536:	61fb      	str	r3, [r7, #28]
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	2b0f      	cmp	r3, #15
 800253c:	f67f aea2 	bls.w	8002284 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002540:	bf00      	nop
 8002542:	bf00      	nop
 8002544:	3724      	adds	r7, #36	; 0x24
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	40023800 	.word	0x40023800
 8002554:	40013800 	.word	0x40013800
 8002558:	40020000 	.word	0x40020000
 800255c:	40020400 	.word	0x40020400
 8002560:	40020800 	.word	0x40020800
 8002564:	40020c00 	.word	0x40020c00
 8002568:	40021000 	.word	0x40021000
 800256c:	40013c00 	.word	0x40013c00

08002570 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
 8002578:	460b      	mov	r3, r1
 800257a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	691a      	ldr	r2, [r3, #16]
 8002580:	887b      	ldrh	r3, [r7, #2]
 8002582:	4013      	ands	r3, r2
 8002584:	2b00      	cmp	r3, #0
 8002586:	d002      	beq.n	800258e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
 800258c:	e001      	b.n	8002592 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800258e:	2300      	movs	r3, #0
 8002590:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002592:	7bfb      	ldrb	r3, [r7, #15]
}
 8002594:	4618      	mov	r0, r3
 8002596:	3714      	adds	r7, #20
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	460b      	mov	r3, r1
 80025aa:	807b      	strh	r3, [r7, #2]
 80025ac:	4613      	mov	r3, r2
 80025ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025b0:	787b      	ldrb	r3, [r7, #1]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d003      	beq.n	80025be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025b6:	887a      	ldrh	r2, [r7, #2]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025bc:	e003      	b.n	80025c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025be:	887b      	ldrh	r3, [r7, #2]
 80025c0:	041a      	lsls	r2, r3, #16
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	619a      	str	r2, [r3, #24]
}
 80025c6:	bf00      	nop
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr
	...

080025d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80025d4:	b580      	push	{r7, lr}
 80025d6:	b082      	sub	sp, #8
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80025de:	4b08      	ldr	r3, [pc, #32]	; (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025e0:	695a      	ldr	r2, [r3, #20]
 80025e2:	88fb      	ldrh	r3, [r7, #6]
 80025e4:	4013      	ands	r3, r2
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d006      	beq.n	80025f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80025ea:	4a05      	ldr	r2, [pc, #20]	; (8002600 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80025ec:	88fb      	ldrh	r3, [r7, #6]
 80025ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80025f0:	88fb      	ldrh	r3, [r7, #6]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f000 f806 	bl	8002604 <HAL_GPIO_EXTI_Callback>
  }
}
 80025f8:	bf00      	nop
 80025fa:	3708      	adds	r7, #8
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}
 8002600:	40013c00 	.word	0x40013c00

08002604 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002604:	b480      	push	{r7}
 8002606:	b083      	sub	sp, #12
 8002608:	af00      	add	r7, sp, #0
 800260a:	4603      	mov	r3, r0
 800260c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b084      	sub	sp, #16
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d101      	bne.n	800262e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800262a:	2301      	movs	r3, #1
 800262c:	e12b      	b.n	8002886 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	d106      	bne.n	8002648 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2200      	movs	r2, #0
 800263e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7fe f8ae 	bl	80007a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2224      	movs	r2, #36	; 0x24
 800264c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0201 	bic.w	r2, r2, #1
 800265e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	681a      	ldr	r2, [r3, #0]
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800266e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800267e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002680:	f002 fc86 	bl	8004f90 <HAL_RCC_GetPCLK1Freq>
 8002684:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	4a81      	ldr	r2, [pc, #516]	; (8002890 <HAL_I2C_Init+0x274>)
 800268c:	4293      	cmp	r3, r2
 800268e:	d807      	bhi.n	80026a0 <HAL_I2C_Init+0x84>
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	4a80      	ldr	r2, [pc, #512]	; (8002894 <HAL_I2C_Init+0x278>)
 8002694:	4293      	cmp	r3, r2
 8002696:	bf94      	ite	ls
 8002698:	2301      	movls	r3, #1
 800269a:	2300      	movhi	r3, #0
 800269c:	b2db      	uxtb	r3, r3
 800269e:	e006      	b.n	80026ae <HAL_I2C_Init+0x92>
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	4a7d      	ldr	r2, [pc, #500]	; (8002898 <HAL_I2C_Init+0x27c>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	bf94      	ite	ls
 80026a8:	2301      	movls	r3, #1
 80026aa:	2300      	movhi	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e0e7      	b.n	8002886 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4a78      	ldr	r2, [pc, #480]	; (800289c <HAL_I2C_Init+0x280>)
 80026ba:	fba2 2303 	umull	r2, r3, r2, r3
 80026be:	0c9b      	lsrs	r3, r3, #18
 80026c0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	68ba      	ldr	r2, [r7, #8]
 80026d2:	430a      	orrs	r2, r1
 80026d4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	4a6a      	ldr	r2, [pc, #424]	; (8002890 <HAL_I2C_Init+0x274>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d802      	bhi.n	80026f0 <HAL_I2C_Init+0xd4>
 80026ea:	68bb      	ldr	r3, [r7, #8]
 80026ec:	3301      	adds	r3, #1
 80026ee:	e009      	b.n	8002704 <HAL_I2C_Init+0xe8>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80026f6:	fb02 f303 	mul.w	r3, r2, r3
 80026fa:	4a69      	ldr	r2, [pc, #420]	; (80028a0 <HAL_I2C_Init+0x284>)
 80026fc:	fba2 2303 	umull	r2, r3, r2, r3
 8002700:	099b      	lsrs	r3, r3, #6
 8002702:	3301      	adds	r3, #1
 8002704:	687a      	ldr	r2, [r7, #4]
 8002706:	6812      	ldr	r2, [r2, #0]
 8002708:	430b      	orrs	r3, r1
 800270a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002716:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685b      	ldr	r3, [r3, #4]
 800271e:	495c      	ldr	r1, [pc, #368]	; (8002890 <HAL_I2C_Init+0x274>)
 8002720:	428b      	cmp	r3, r1
 8002722:	d819      	bhi.n	8002758 <HAL_I2C_Init+0x13c>
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	1e59      	subs	r1, r3, #1
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	005b      	lsls	r3, r3, #1
 800272e:	fbb1 f3f3 	udiv	r3, r1, r3
 8002732:	1c59      	adds	r1, r3, #1
 8002734:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002738:	400b      	ands	r3, r1
 800273a:	2b00      	cmp	r3, #0
 800273c:	d00a      	beq.n	8002754 <HAL_I2C_Init+0x138>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	1e59      	subs	r1, r3, #1
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	005b      	lsls	r3, r3, #1
 8002748:	fbb1 f3f3 	udiv	r3, r1, r3
 800274c:	3301      	adds	r3, #1
 800274e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002752:	e051      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002754:	2304      	movs	r3, #4
 8002756:	e04f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d111      	bne.n	8002784 <HAL_I2C_Init+0x168>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	1e58      	subs	r0, r3, #1
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6859      	ldr	r1, [r3, #4]
 8002768:	460b      	mov	r3, r1
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	440b      	add	r3, r1
 800276e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002772:	3301      	adds	r3, #1
 8002774:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002778:	2b00      	cmp	r3, #0
 800277a:	bf0c      	ite	eq
 800277c:	2301      	moveq	r3, #1
 800277e:	2300      	movne	r3, #0
 8002780:	b2db      	uxtb	r3, r3
 8002782:	e012      	b.n	80027aa <HAL_I2C_Init+0x18e>
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	1e58      	subs	r0, r3, #1
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6859      	ldr	r1, [r3, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	0099      	lsls	r1, r3, #2
 8002794:	440b      	add	r3, r1
 8002796:	fbb0 f3f3 	udiv	r3, r0, r3
 800279a:	3301      	adds	r3, #1
 800279c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	bf0c      	ite	eq
 80027a4:	2301      	moveq	r3, #1
 80027a6:	2300      	movne	r3, #0
 80027a8:	b2db      	uxtb	r3, r3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_I2C_Init+0x196>
 80027ae:	2301      	movs	r3, #1
 80027b0:	e022      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689b      	ldr	r3, [r3, #8]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d10e      	bne.n	80027d8 <HAL_I2C_Init+0x1bc>
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1e58      	subs	r0, r3, #1
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6859      	ldr	r1, [r3, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	005b      	lsls	r3, r3, #1
 80027c6:	440b      	add	r3, r1
 80027c8:	fbb0 f3f3 	udiv	r3, r0, r3
 80027cc:	3301      	adds	r3, #1
 80027ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027d2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80027d6:	e00f      	b.n	80027f8 <HAL_I2C_Init+0x1dc>
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1e58      	subs	r0, r3, #1
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6859      	ldr	r1, [r3, #4]
 80027e0:	460b      	mov	r3, r1
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	440b      	add	r3, r1
 80027e6:	0099      	lsls	r1, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80027ee:	3301      	adds	r3, #1
 80027f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	6809      	ldr	r1, [r1, #0]
 80027fc:	4313      	orrs	r3, r2
 80027fe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	69da      	ldr	r2, [r3, #28]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	6a1b      	ldr	r3, [r3, #32]
 8002812:	431a      	orrs	r2, r3
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	430a      	orrs	r2, r1
 800281a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002826:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	6911      	ldr	r1, [r2, #16]
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68d2      	ldr	r2, [r2, #12]
 8002832:	4311      	orrs	r1, r2
 8002834:	687a      	ldr	r2, [r7, #4]
 8002836:	6812      	ldr	r2, [r2, #0]
 8002838:	430b      	orrs	r3, r1
 800283a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	68db      	ldr	r3, [r3, #12]
 8002842:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695a      	ldr	r2, [r3, #20]
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	431a      	orrs	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	430a      	orrs	r2, r1
 8002856:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f042 0201 	orr.w	r2, r2, #1
 8002866:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	2200      	movs	r2, #0
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2220      	movs	r2, #32
 8002872:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	000186a0 	.word	0x000186a0
 8002894:	001e847f 	.word	0x001e847f
 8002898:	003d08ff 	.word	0x003d08ff
 800289c:	431bde83 	.word	0x431bde83
 80028a0:	10624dd3 	.word	0x10624dd3

080028a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b088      	sub	sp, #32
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e128      	b.n	8002b08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d109      	bne.n	80028d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a90      	ldr	r2, [pc, #576]	; (8002b10 <HAL_I2S_Init+0x26c>)
 80028ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f7fe f80d 	bl	80008f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2202      	movs	r2, #2
 80028da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	69db      	ldr	r3, [r3, #28]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	6812      	ldr	r2, [r2, #0]
 80028e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028ec:	f023 030f 	bic.w	r3, r3, #15
 80028f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2202      	movs	r2, #2
 80028f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d060      	beq.n	80029c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d102      	bne.n	8002910 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800290a:	2310      	movs	r3, #16
 800290c:	617b      	str	r3, [r7, #20]
 800290e:	e001      	b.n	8002914 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002910:	2320      	movs	r3, #32
 8002912:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	2b20      	cmp	r3, #32
 800291a:	d802      	bhi.n	8002922 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800291c:	697b      	ldr	r3, [r7, #20]
 800291e:	005b      	lsls	r3, r3, #1
 8002920:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002922:	2001      	movs	r0, #1
 8002924:	f002 fc38 	bl	8005198 <HAL_RCCEx_GetPeriphCLKFreq>
 8002928:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002932:	d125      	bne.n	8002980 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d010      	beq.n	800295e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	009b      	lsls	r3, r3, #2
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	fbb2 f2f3 	udiv	r2, r2, r3
 8002946:	4613      	mov	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	4413      	add	r3, r2
 800294c:	005b      	lsls	r3, r3, #1
 800294e:	461a      	mov	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	695b      	ldr	r3, [r3, #20]
 8002954:	fbb2 f3f3 	udiv	r3, r2, r3
 8002958:	3305      	adds	r3, #5
 800295a:	613b      	str	r3, [r7, #16]
 800295c:	e01f      	b.n	800299e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800295e:	697b      	ldr	r3, [r7, #20]
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	fbb2 f2f3 	udiv	r2, r2, r3
 8002968:	4613      	mov	r3, r2
 800296a:	009b      	lsls	r3, r3, #2
 800296c:	4413      	add	r3, r2
 800296e:	005b      	lsls	r3, r3, #1
 8002970:	461a      	mov	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695b      	ldr	r3, [r3, #20]
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	3305      	adds	r3, #5
 800297c:	613b      	str	r3, [r7, #16]
 800297e:	e00e      	b.n	800299e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	fbb2 f2f3 	udiv	r2, r2, r3
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	005b      	lsls	r3, r3, #1
 8002990:	461a      	mov	r2, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	695b      	ldr	r3, [r3, #20]
 8002996:	fbb2 f3f3 	udiv	r3, r2, r3
 800299a:	3305      	adds	r3, #5
 800299c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	4a5c      	ldr	r2, [pc, #368]	; (8002b14 <HAL_I2S_Init+0x270>)
 80029a2:	fba2 2303 	umull	r2, r3, r2, r3
 80029a6:	08db      	lsrs	r3, r3, #3
 80029a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	f003 0301 	and.w	r3, r3, #1
 80029b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80029b2:	693a      	ldr	r2, [r7, #16]
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	085b      	lsrs	r3, r3, #1
 80029ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	021b      	lsls	r3, r3, #8
 80029c0:	61bb      	str	r3, [r7, #24]
 80029c2:	e003      	b.n	80029cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80029c4:	2302      	movs	r3, #2
 80029c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80029c8:	2300      	movs	r3, #0
 80029ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80029cc:	69fb      	ldr	r3, [r7, #28]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d902      	bls.n	80029d8 <HAL_I2S_Init+0x134>
 80029d2:	69fb      	ldr	r3, [r7, #28]
 80029d4:	2bff      	cmp	r3, #255	; 0xff
 80029d6:	d907      	bls.n	80029e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029dc:	f043 0210 	orr.w	r2, r3, #16
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80029e4:	2301      	movs	r3, #1
 80029e6:	e08f      	b.n	8002b08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	691a      	ldr	r2, [r3, #16]
 80029ec:	69bb      	ldr	r3, [r7, #24]
 80029ee:	ea42 0103 	orr.w	r1, r2, r3
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	69fa      	ldr	r2, [r7, #28]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	69db      	ldr	r3, [r3, #28]
 8002a02:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a06:	f023 030f 	bic.w	r3, r3, #15
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6851      	ldr	r1, [r2, #4]
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	6892      	ldr	r2, [r2, #8]
 8002a12:	4311      	orrs	r1, r2
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	68d2      	ldr	r2, [r2, #12]
 8002a18:	4311      	orrs	r1, r2
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	6992      	ldr	r2, [r2, #24]
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	431a      	orrs	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a2a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d161      	bne.n	8002af8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	4a38      	ldr	r2, [pc, #224]	; (8002b18 <HAL_I2S_Init+0x274>)
 8002a38:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a37      	ldr	r2, [pc, #220]	; (8002b1c <HAL_I2S_Init+0x278>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d101      	bne.n	8002a48 <HAL_I2S_Init+0x1a4>
 8002a44:	4b36      	ldr	r3, [pc, #216]	; (8002b20 <HAL_I2S_Init+0x27c>)
 8002a46:	e001      	b.n	8002a4c <HAL_I2S_Init+0x1a8>
 8002a48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a4c:	69db      	ldr	r3, [r3, #28]
 8002a4e:	687a      	ldr	r2, [r7, #4]
 8002a50:	6812      	ldr	r2, [r2, #0]
 8002a52:	4932      	ldr	r1, [pc, #200]	; (8002b1c <HAL_I2S_Init+0x278>)
 8002a54:	428a      	cmp	r2, r1
 8002a56:	d101      	bne.n	8002a5c <HAL_I2S_Init+0x1b8>
 8002a58:	4a31      	ldr	r2, [pc, #196]	; (8002b20 <HAL_I2S_Init+0x27c>)
 8002a5a:	e001      	b.n	8002a60 <HAL_I2S_Init+0x1bc>
 8002a5c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002a60:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002a64:	f023 030f 	bic.w	r3, r3, #15
 8002a68:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a2b      	ldr	r2, [pc, #172]	; (8002b1c <HAL_I2S_Init+0x278>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_I2S_Init+0x1d4>
 8002a74:	4b2a      	ldr	r3, [pc, #168]	; (8002b20 <HAL_I2S_Init+0x27c>)
 8002a76:	e001      	b.n	8002a7c <HAL_I2S_Init+0x1d8>
 8002a78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a7c:	2202      	movs	r2, #2
 8002a7e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	4a25      	ldr	r2, [pc, #148]	; (8002b1c <HAL_I2S_Init+0x278>)
 8002a86:	4293      	cmp	r3, r2
 8002a88:	d101      	bne.n	8002a8e <HAL_I2S_Init+0x1ea>
 8002a8a:	4b25      	ldr	r3, [pc, #148]	; (8002b20 <HAL_I2S_Init+0x27c>)
 8002a8c:	e001      	b.n	8002a92 <HAL_I2S_Init+0x1ee>
 8002a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002a92:	69db      	ldr	r3, [r3, #28]
 8002a94:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002a9e:	d003      	beq.n	8002aa8 <HAL_I2S_Init+0x204>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8002aa8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002aac:	613b      	str	r3, [r7, #16]
 8002aae:	e001      	b.n	8002ab4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	689b      	ldr	r3, [r3, #8]
 8002abc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	68db      	ldr	r3, [r3, #12]
 8002ac6:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ac8:	4313      	orrs	r3, r2
 8002aca:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	699b      	ldr	r3, [r3, #24]
 8002ad0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	b29a      	uxth	r2, r3
 8002ad6:	897b      	ldrh	r3, [r7, #10]
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	b29b      	uxth	r3, r3
 8002adc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ae0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a0d      	ldr	r2, [pc, #52]	; (8002b1c <HAL_I2S_Init+0x278>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d101      	bne.n	8002af0 <HAL_I2S_Init+0x24c>
 8002aec:	4b0c      	ldr	r3, [pc, #48]	; (8002b20 <HAL_I2S_Init+0x27c>)
 8002aee:	e001      	b.n	8002af4 <HAL_I2S_Init+0x250>
 8002af0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002af4:	897a      	ldrh	r2, [r7, #10]
 8002af6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3720      	adds	r7, #32
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	08002c1b 	.word	0x08002c1b
 8002b14:	cccccccd 	.word	0xcccccccd
 8002b18:	08002d31 	.word	0x08002d31
 8002b1c:	40003800 	.word	0x40003800
 8002b20:	40003400 	.word	0x40003400

08002b24 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b40:	bf00      	nop
 8002b42:	370c      	adds	r7, #12
 8002b44:	46bd      	mov	sp, r7
 8002b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4a:	4770      	bx	lr

08002b4c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b54:	bf00      	nop
 8002b56:	370c      	adds	r7, #12
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr

08002b60 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	881a      	ldrh	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	1c9a      	adds	r2, r3, #2
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b82:	b29b      	uxth	r3, r3
 8002b84:	3b01      	subs	r3, #1
 8002b86:	b29a      	uxth	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b90:	b29b      	uxth	r3, r3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d10e      	bne.n	8002bb4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	685a      	ldr	r2, [r3, #4]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ba4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f7ff ffb8 	bl	8002b24 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002bb4:	bf00      	nop
 8002bb6:	3708      	adds	r7, #8
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}

08002bbc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	68da      	ldr	r2, [r3, #12]
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd6:	1c9a      	adds	r2, r3, #2
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002be0:	b29b      	uxth	r3, r3
 8002be2:	3b01      	subs	r3, #1
 8002be4:	b29a      	uxth	r2, r3
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002bee:	b29b      	uxth	r3, r3
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d10e      	bne.n	8002c12 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685a      	ldr	r2, [r3, #4]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c02:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2201      	movs	r2, #1
 8002c08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff ff93 	bl	8002b38 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c12:	bf00      	nop
 8002c14:	3708      	adds	r7, #8
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b086      	sub	sp, #24
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c30:	b2db      	uxtb	r3, r3
 8002c32:	2b04      	cmp	r3, #4
 8002c34:	d13a      	bne.n	8002cac <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002c36:	697b      	ldr	r3, [r7, #20]
 8002c38:	f003 0301 	and.w	r3, r3, #1
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d109      	bne.n	8002c54 <I2S_IRQHandler+0x3a>
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c4a:	2b40      	cmp	r3, #64	; 0x40
 8002c4c:	d102      	bne.n	8002c54 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7ff ffb4 	bl	8002bbc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b40      	cmp	r3, #64	; 0x40
 8002c5c:	d126      	bne.n	8002cac <I2S_IRQHandler+0x92>
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	685b      	ldr	r3, [r3, #4]
 8002c64:	f003 0320 	and.w	r3, r3, #32
 8002c68:	2b20      	cmp	r3, #32
 8002c6a:	d11f      	bne.n	8002cac <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	685a      	ldr	r2, [r3, #4]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002c7a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	613b      	str	r3, [r7, #16]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	68db      	ldr	r3, [r3, #12]
 8002c86:	613b      	str	r3, [r7, #16]
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	613b      	str	r3, [r7, #16]
 8002c90:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2201      	movs	r2, #1
 8002c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f043 0202 	orr.w	r2, r3, #2
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7ff ff50 	bl	8002b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b03      	cmp	r3, #3
 8002cb6:	d136      	bne.n	8002d26 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002cb8:	697b      	ldr	r3, [r7, #20]
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d109      	bne.n	8002cd6 <I2S_IRQHandler+0xbc>
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ccc:	2b80      	cmp	r3, #128	; 0x80
 8002cce:	d102      	bne.n	8002cd6 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002cd0:	6878      	ldr	r0, [r7, #4]
 8002cd2:	f7ff ff45 	bl	8002b60 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	f003 0308 	and.w	r3, r3, #8
 8002cdc:	2b08      	cmp	r3, #8
 8002cde:	d122      	bne.n	8002d26 <I2S_IRQHandler+0x10c>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	f003 0320 	and.w	r3, r3, #32
 8002cea:	2b20      	cmp	r3, #32
 8002cec:	d11b      	bne.n	8002d26 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	685a      	ldr	r2, [r3, #4]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002cfc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	60fb      	str	r3, [r7, #12]
 8002d0a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2201      	movs	r2, #1
 8002d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d18:	f043 0204 	orr.w	r2, r3, #4
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d20:	6878      	ldr	r0, [r7, #4]
 8002d22:	f7ff ff13 	bl	8002b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002d26:	bf00      	nop
 8002d28:	3718      	adds	r7, #24
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}
	...

08002d30 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b088      	sub	sp, #32
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a92      	ldr	r2, [pc, #584]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d101      	bne.n	8002d4e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002d4a:	4b92      	ldr	r3, [pc, #584]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d4c:	e001      	b.n	8002d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002d4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a8b      	ldr	r2, [pc, #556]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002d64:	4293      	cmp	r3, r2
 8002d66:	d101      	bne.n	8002d6c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002d68:	4b8a      	ldr	r3, [pc, #552]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002d6a:	e001      	b.n	8002d70 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002d6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002d70:	685b      	ldr	r3, [r3, #4]
 8002d72:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	685b      	ldr	r3, [r3, #4]
 8002d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d7c:	d004      	beq.n	8002d88 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f040 8099 	bne.w	8002eba <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	f003 0302 	and.w	r3, r3, #2
 8002d8e:	2b02      	cmp	r3, #2
 8002d90:	d107      	bne.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f000 f925 	bl	8002fec <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	f003 0301 	and.w	r3, r3, #1
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	d107      	bne.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002dac:	693b      	ldr	r3, [r7, #16]
 8002dae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d002      	beq.n	8002dbc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f000 f9c8 	bl	800314c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002dbc:	69bb      	ldr	r3, [r7, #24]
 8002dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc2:	2b40      	cmp	r3, #64	; 0x40
 8002dc4:	d13a      	bne.n	8002e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002dc6:	693b      	ldr	r3, [r7, #16]
 8002dc8:	f003 0320 	and.w	r3, r3, #32
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d035      	beq.n	8002e3c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4a6e      	ldr	r2, [pc, #440]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d101      	bne.n	8002dde <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002dda:	4b6e      	ldr	r3, [pc, #440]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002ddc:	e001      	b.n	8002de2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002dde:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4969      	ldr	r1, [pc, #420]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002dea:	428b      	cmp	r3, r1
 8002dec:	d101      	bne.n	8002df2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002dee:	4b69      	ldr	r3, [pc, #420]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002df0:	e001      	b.n	8002df6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002df2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002df6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002dfa:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685a      	ldr	r2, [r3, #4]
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e0a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002e0c:	2300      	movs	r3, #0
 8002e0e:	60fb      	str	r3, [r7, #12]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	68db      	ldr	r3, [r3, #12]
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	60fb      	str	r3, [r7, #12]
 8002e20:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2201      	movs	r2, #1
 8002e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	f043 0202 	orr.w	r2, r3, #2
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e36:	6878      	ldr	r0, [r7, #4]
 8002e38:	f7ff fe88 	bl	8002b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002e3c:	69fb      	ldr	r3, [r7, #28]
 8002e3e:	f003 0308 	and.w	r3, r3, #8
 8002e42:	2b08      	cmp	r3, #8
 8002e44:	f040 80c3 	bne.w	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f003 0320 	and.w	r3, r3, #32
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f000 80bd 	beq.w	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002e62:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a49      	ldr	r2, [pc, #292]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d101      	bne.n	8002e72 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002e6e:	4b49      	ldr	r3, [pc, #292]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e70:	e001      	b.n	8002e76 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002e72:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4944      	ldr	r1, [pc, #272]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002e7e:	428b      	cmp	r3, r1
 8002e80:	d101      	bne.n	8002e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002e82:	4b44      	ldr	r3, [pc, #272]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002e84:	e001      	b.n	8002e8a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002e86:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e8a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002e8e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002e90:	2300      	movs	r3, #0
 8002e92:	60bb      	str	r3, [r7, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	60bb      	str	r3, [r7, #8]
 8002e9c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eaa:	f043 0204 	orr.w	r2, r3, #4
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eb2:	6878      	ldr	r0, [r7, #4]
 8002eb4:	f7ff fe4a 	bl	8002b4c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eb8:	e089      	b.n	8002fce <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d107      	bne.n	8002ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002ec4:	693b      	ldr	r3, [r7, #16]
 8002ec6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d002      	beq.n	8002ed4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002ece:	6878      	ldr	r0, [r7, #4]
 8002ed0:	f000 f8be 	bl	8003050 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	f003 0301 	and.w	r3, r3, #1
 8002eda:	2b01      	cmp	r3, #1
 8002edc:	d107      	bne.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002ede:	697b      	ldr	r3, [r7, #20]
 8002ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002ee8:	6878      	ldr	r0, [r7, #4]
 8002eea:	f000 f8fd 	bl	80030e8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002eee:	69fb      	ldr	r3, [r7, #28]
 8002ef0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ef4:	2b40      	cmp	r3, #64	; 0x40
 8002ef6:	d12f      	bne.n	8002f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	f003 0320 	and.w	r3, r3, #32
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d02a      	beq.n	8002f58 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f10:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4a1e      	ldr	r2, [pc, #120]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f18:	4293      	cmp	r3, r2
 8002f1a:	d101      	bne.n	8002f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002f1c:	4b1d      	ldr	r3, [pc, #116]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f1e:	e001      	b.n	8002f24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002f20:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4919      	ldr	r1, [pc, #100]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f2c:	428b      	cmp	r3, r1
 8002f2e:	d101      	bne.n	8002f34 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002f30:	4b18      	ldr	r3, [pc, #96]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f32:	e001      	b.n	8002f38 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002f34:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f3c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f4a:	f043 0202 	orr.w	r2, r3, #2
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f7ff fdfa 	bl	8002b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002f58:	69bb      	ldr	r3, [r7, #24]
 8002f5a:	f003 0308 	and.w	r3, r3, #8
 8002f5e:	2b08      	cmp	r3, #8
 8002f60:	d136      	bne.n	8002fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	f003 0320 	and.w	r3, r3, #32
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d031      	beq.n	8002fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a07      	ldr	r2, [pc, #28]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8002f76:	4b07      	ldr	r3, [pc, #28]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f78:	e001      	b.n	8002f7e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8002f7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4902      	ldr	r1, [pc, #8]	; (8002f90 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002f86:	428b      	cmp	r3, r1
 8002f88:	d106      	bne.n	8002f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8002f8a:	4b02      	ldr	r3, [pc, #8]	; (8002f94 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002f8c:	e006      	b.n	8002f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8002f8e:	bf00      	nop
 8002f90:	40003800 	.word	0x40003800
 8002f94:	40003400 	.word	0x40003400
 8002f98:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002fa0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	685a      	ldr	r2, [r3, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fb0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fbe:	f043 0204 	orr.w	r2, r3, #4
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002fc6:	6878      	ldr	r0, [r7, #4]
 8002fc8:	f7ff fdc0 	bl	8002b4c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002fcc:	e000      	b.n	8002fd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fce:	bf00      	nop
}
 8002fd0:	bf00      	nop
 8002fd2:	3720      	adds	r7, #32
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}

08002fd8 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002fe0:	bf00      	nop
 8002fe2:	370c      	adds	r7, #12
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr

08002fec <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	b082      	sub	sp, #8
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	1c99      	adds	r1, r3, #2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6251      	str	r1, [r2, #36]	; 0x24
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800300a:	b29b      	uxth	r3, r3
 800300c:	3b01      	subs	r3, #1
 800300e:	b29a      	uxth	r2, r3
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003018:	b29b      	uxth	r3, r3
 800301a:	2b00      	cmp	r3, #0
 800301c:	d113      	bne.n	8003046 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800302c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003032:	b29b      	uxth	r3, r3
 8003034:	2b00      	cmp	r3, #0
 8003036:	d106      	bne.n	8003046 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f7ff ffc9 	bl	8002fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003046:	bf00      	nop
 8003048:	3708      	adds	r7, #8
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b082      	sub	sp, #8
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800305c:	1c99      	adds	r1, r3, #2
 800305e:	687a      	ldr	r2, [r7, #4]
 8003060:	6251      	str	r1, [r2, #36]	; 0x24
 8003062:	8819      	ldrh	r1, [r3, #0]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a1d      	ldr	r2, [pc, #116]	; (80030e0 <I2SEx_TxISR_I2SExt+0x90>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d101      	bne.n	8003072 <I2SEx_TxISR_I2SExt+0x22>
 800306e:	4b1d      	ldr	r3, [pc, #116]	; (80030e4 <I2SEx_TxISR_I2SExt+0x94>)
 8003070:	e001      	b.n	8003076 <I2SEx_TxISR_I2SExt+0x26>
 8003072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003076:	460a      	mov	r2, r1
 8003078:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307e:	b29b      	uxth	r3, r3
 8003080:	3b01      	subs	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d121      	bne.n	80030d6 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a12      	ldr	r2, [pc, #72]	; (80030e0 <I2SEx_TxISR_I2SExt+0x90>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <I2SEx_TxISR_I2SExt+0x50>
 800309c:	4b11      	ldr	r3, [pc, #68]	; (80030e4 <I2SEx_TxISR_I2SExt+0x94>)
 800309e:	e001      	b.n	80030a4 <I2SEx_TxISR_I2SExt+0x54>
 80030a0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030a4:	685a      	ldr	r2, [r3, #4]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	490d      	ldr	r1, [pc, #52]	; (80030e0 <I2SEx_TxISR_I2SExt+0x90>)
 80030ac:	428b      	cmp	r3, r1
 80030ae:	d101      	bne.n	80030b4 <I2SEx_TxISR_I2SExt+0x64>
 80030b0:	4b0c      	ldr	r3, [pc, #48]	; (80030e4 <I2SEx_TxISR_I2SExt+0x94>)
 80030b2:	e001      	b.n	80030b8 <I2SEx_TxISR_I2SExt+0x68>
 80030b4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80030b8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030bc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d106      	bne.n	80030d6 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff ff81 	bl	8002fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030d6:	bf00      	nop
 80030d8:	3708      	adds	r7, #8
 80030da:	46bd      	mov	sp, r7
 80030dc:	bd80      	pop	{r7, pc}
 80030de:	bf00      	nop
 80030e0:	40003800 	.word	0x40003800
 80030e4:	40003400 	.word	0x40003400

080030e8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	68d8      	ldr	r0, [r3, #12]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030fa:	1c99      	adds	r1, r3, #2
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003100:	b282      	uxth	r2, r0
 8003102:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003108:	b29b      	uxth	r3, r3
 800310a:	3b01      	subs	r3, #1
 800310c:	b29a      	uxth	r2, r3
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d113      	bne.n	8003144 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	685a      	ldr	r2, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800312a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003130:	b29b      	uxth	r3, r3
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2201      	movs	r2, #1
 800313a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800313e:	6878      	ldr	r0, [r7, #4]
 8003140:	f7ff ff4a 	bl	8002fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	4a20      	ldr	r2, [pc, #128]	; (80031dc <I2SEx_RxISR_I2SExt+0x90>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d101      	bne.n	8003162 <I2SEx_RxISR_I2SExt+0x16>
 800315e:	4b20      	ldr	r3, [pc, #128]	; (80031e0 <I2SEx_RxISR_I2SExt+0x94>)
 8003160:	e001      	b.n	8003166 <I2SEx_RxISR_I2SExt+0x1a>
 8003162:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003166:	68d8      	ldr	r0, [r3, #12]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800316c:	1c99      	adds	r1, r3, #2
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003172:	b282      	uxth	r2, r0
 8003174:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003188:	b29b      	uxth	r3, r3
 800318a:	2b00      	cmp	r3, #0
 800318c:	d121      	bne.n	80031d2 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a12      	ldr	r2, [pc, #72]	; (80031dc <I2SEx_RxISR_I2SExt+0x90>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d101      	bne.n	800319c <I2SEx_RxISR_I2SExt+0x50>
 8003198:	4b11      	ldr	r3, [pc, #68]	; (80031e0 <I2SEx_RxISR_I2SExt+0x94>)
 800319a:	e001      	b.n	80031a0 <I2SEx_RxISR_I2SExt+0x54>
 800319c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031a0:	685a      	ldr	r2, [r3, #4]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	490d      	ldr	r1, [pc, #52]	; (80031dc <I2SEx_RxISR_I2SExt+0x90>)
 80031a8:	428b      	cmp	r3, r1
 80031aa:	d101      	bne.n	80031b0 <I2SEx_RxISR_I2SExt+0x64>
 80031ac:	4b0c      	ldr	r3, [pc, #48]	; (80031e0 <I2SEx_RxISR_I2SExt+0x94>)
 80031ae:	e001      	b.n	80031b4 <I2SEx_RxISR_I2SExt+0x68>
 80031b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80031b4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031b8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031be:	b29b      	uxth	r3, r3
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d106      	bne.n	80031d2 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2201      	movs	r2, #1
 80031c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f7ff ff03 	bl	8002fd8 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031d2:	bf00      	nop
 80031d4:	3708      	adds	r7, #8
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40003800 	.word	0x40003800
 80031e0:	40003400 	.word	0x40003400

080031e4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80031e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e6:	b08f      	sub	sp, #60	; 0x3c
 80031e8:	af0a      	add	r7, sp, #40	; 0x28
 80031ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d101      	bne.n	80031f6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	e10f      	b.n	8003416 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003202:	b2db      	uxtb	r3, r3
 8003204:	2b00      	cmp	r3, #0
 8003206:	d106      	bne.n	8003216 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2200      	movs	r2, #0
 800320c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f005 fd35 	bl	8008c80 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2203      	movs	r2, #3
 800321a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800321e:	68bb      	ldr	r3, [r7, #8]
 8003220:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003222:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003226:	2b00      	cmp	r3, #0
 8003228:	d102      	bne.n	8003230 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f002 fbb4 	bl	80059a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	603b      	str	r3, [r7, #0]
 8003240:	687e      	ldr	r6, [r7, #4]
 8003242:	466d      	mov	r5, sp
 8003244:	f106 0410 	add.w	r4, r6, #16
 8003248:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800324c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800324e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003250:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003254:	e885 0003 	stmia.w	r5, {r0, r1}
 8003258:	1d33      	adds	r3, r6, #4
 800325a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325c:	6838      	ldr	r0, [r7, #0]
 800325e:	f002 fa8b 	bl	8005778 <USB_CoreInit>
 8003262:	4603      	mov	r3, r0
 8003264:	2b00      	cmp	r3, #0
 8003266:	d005      	beq.n	8003274 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003270:	2301      	movs	r3, #1
 8003272:	e0d0      	b.n	8003416 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	2100      	movs	r1, #0
 800327a:	4618      	mov	r0, r3
 800327c:	f002 fba2 	bl	80059c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003280:	2300      	movs	r3, #0
 8003282:	73fb      	strb	r3, [r7, #15]
 8003284:	e04a      	b.n	800331c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003286:	7bfa      	ldrb	r2, [r7, #15]
 8003288:	6879      	ldr	r1, [r7, #4]
 800328a:	4613      	mov	r3, r2
 800328c:	00db      	lsls	r3, r3, #3
 800328e:	4413      	add	r3, r2
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	440b      	add	r3, r1
 8003294:	333d      	adds	r3, #61	; 0x3d
 8003296:	2201      	movs	r2, #1
 8003298:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800329a:	7bfa      	ldrb	r2, [r7, #15]
 800329c:	6879      	ldr	r1, [r7, #4]
 800329e:	4613      	mov	r3, r2
 80032a0:	00db      	lsls	r3, r3, #3
 80032a2:	4413      	add	r3, r2
 80032a4:	009b      	lsls	r3, r3, #2
 80032a6:	440b      	add	r3, r1
 80032a8:	333c      	adds	r3, #60	; 0x3c
 80032aa:	7bfa      	ldrb	r2, [r7, #15]
 80032ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80032ae:	7bfa      	ldrb	r2, [r7, #15]
 80032b0:	7bfb      	ldrb	r3, [r7, #15]
 80032b2:	b298      	uxth	r0, r3
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	440b      	add	r3, r1
 80032c0:	3344      	adds	r3, #68	; 0x44
 80032c2:	4602      	mov	r2, r0
 80032c4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80032c6:	7bfa      	ldrb	r2, [r7, #15]
 80032c8:	6879      	ldr	r1, [r7, #4]
 80032ca:	4613      	mov	r3, r2
 80032cc:	00db      	lsls	r3, r3, #3
 80032ce:	4413      	add	r3, r2
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	440b      	add	r3, r1
 80032d4:	3340      	adds	r3, #64	; 0x40
 80032d6:	2200      	movs	r2, #0
 80032d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80032da:	7bfa      	ldrb	r2, [r7, #15]
 80032dc:	6879      	ldr	r1, [r7, #4]
 80032de:	4613      	mov	r3, r2
 80032e0:	00db      	lsls	r3, r3, #3
 80032e2:	4413      	add	r3, r2
 80032e4:	009b      	lsls	r3, r3, #2
 80032e6:	440b      	add	r3, r1
 80032e8:	3348      	adds	r3, #72	; 0x48
 80032ea:	2200      	movs	r2, #0
 80032ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80032ee:	7bfa      	ldrb	r2, [r7, #15]
 80032f0:	6879      	ldr	r1, [r7, #4]
 80032f2:	4613      	mov	r3, r2
 80032f4:	00db      	lsls	r3, r3, #3
 80032f6:	4413      	add	r3, r2
 80032f8:	009b      	lsls	r3, r3, #2
 80032fa:	440b      	add	r3, r1
 80032fc:	334c      	adds	r3, #76	; 0x4c
 80032fe:	2200      	movs	r2, #0
 8003300:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003302:	7bfa      	ldrb	r2, [r7, #15]
 8003304:	6879      	ldr	r1, [r7, #4]
 8003306:	4613      	mov	r3, r2
 8003308:	00db      	lsls	r3, r3, #3
 800330a:	4413      	add	r3, r2
 800330c:	009b      	lsls	r3, r3, #2
 800330e:	440b      	add	r3, r1
 8003310:	3354      	adds	r3, #84	; 0x54
 8003312:	2200      	movs	r2, #0
 8003314:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003316:	7bfb      	ldrb	r3, [r7, #15]
 8003318:	3301      	adds	r3, #1
 800331a:	73fb      	strb	r3, [r7, #15]
 800331c:	7bfa      	ldrb	r2, [r7, #15]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	429a      	cmp	r2, r3
 8003324:	d3af      	bcc.n	8003286 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
 800332a:	e044      	b.n	80033b6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800332c:	7bfa      	ldrb	r2, [r7, #15]
 800332e:	6879      	ldr	r1, [r7, #4]
 8003330:	4613      	mov	r3, r2
 8003332:	00db      	lsls	r3, r3, #3
 8003334:	4413      	add	r3, r2
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	440b      	add	r3, r1
 800333a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003342:	7bfa      	ldrb	r2, [r7, #15]
 8003344:	6879      	ldr	r1, [r7, #4]
 8003346:	4613      	mov	r3, r2
 8003348:	00db      	lsls	r3, r3, #3
 800334a:	4413      	add	r3, r2
 800334c:	009b      	lsls	r3, r3, #2
 800334e:	440b      	add	r3, r1
 8003350:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003354:	7bfa      	ldrb	r2, [r7, #15]
 8003356:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003358:	7bfa      	ldrb	r2, [r7, #15]
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800336a:	2200      	movs	r2, #0
 800336c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800336e:	7bfa      	ldrb	r2, [r7, #15]
 8003370:	6879      	ldr	r1, [r7, #4]
 8003372:	4613      	mov	r3, r2
 8003374:	00db      	lsls	r3, r3, #3
 8003376:	4413      	add	r3, r2
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	440b      	add	r3, r1
 800337c:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003380:	2200      	movs	r2, #0
 8003382:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003384:	7bfa      	ldrb	r2, [r7, #15]
 8003386:	6879      	ldr	r1, [r7, #4]
 8003388:	4613      	mov	r3, r2
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	4413      	add	r3, r2
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	440b      	add	r3, r1
 8003392:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800339a:	7bfa      	ldrb	r2, [r7, #15]
 800339c:	6879      	ldr	r1, [r7, #4]
 800339e:	4613      	mov	r3, r2
 80033a0:	00db      	lsls	r3, r3, #3
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80033ac:	2200      	movs	r2, #0
 80033ae:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80033b0:	7bfb      	ldrb	r3, [r7, #15]
 80033b2:	3301      	adds	r3, #1
 80033b4:	73fb      	strb	r3, [r7, #15]
 80033b6:	7bfa      	ldrb	r2, [r7, #15]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	429a      	cmp	r2, r3
 80033be:	d3b5      	bcc.n	800332c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	603b      	str	r3, [r7, #0]
 80033c6:	687e      	ldr	r6, [r7, #4]
 80033c8:	466d      	mov	r5, sp
 80033ca:	f106 0410 	add.w	r4, r6, #16
 80033ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80033d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80033d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80033da:	e885 0003 	stmia.w	r5, {r0, r1}
 80033de:	1d33      	adds	r3, r6, #4
 80033e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033e2:	6838      	ldr	r0, [r7, #0]
 80033e4:	f002 fb3a 	bl	8005a5c <USB_DevInit>
 80033e8:	4603      	mov	r3, r0
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2202      	movs	r2, #2
 80033f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80033f6:	2301      	movs	r3, #1
 80033f8:	e00d      	b.n	8003416 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2201      	movs	r2, #1
 8003406:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4618      	mov	r0, r3
 8003410:	f003 fc89 	bl	8006d26 <USB_DevDisconnect>

  return HAL_OK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800341e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800341e:	b580      	push	{r7, lr}
 8003420:	b084      	sub	sp, #16
 8003422:	af00      	add	r7, sp, #0
 8003424:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003432:	2b01      	cmp	r3, #1
 8003434:	d101      	bne.n	800343a <HAL_PCD_Start+0x1c>
 8003436:	2302      	movs	r3, #2
 8003438:	e020      	b.n	800347c <HAL_PCD_Start+0x5e>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2201      	movs	r2, #1
 800343e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003446:	2b01      	cmp	r3, #1
 8003448:	d109      	bne.n	800345e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800344e:	2b01      	cmp	r3, #1
 8003450:	d005      	beq.n	800345e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003456:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4618      	mov	r0, r3
 8003464:	f002 fa8c 	bl	8005980 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f003 fc39 	bl	8006ce4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	2200      	movs	r2, #0
 8003476:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3710      	adds	r7, #16
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b08d      	sub	sp, #52	; 0x34
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4618      	mov	r0, r3
 800349c:	f003 fcf7 	bl	8006e8e <USB_GetMode>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	f040 848a 	bne.w	8003dbc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4618      	mov	r0, r3
 80034ae:	f003 fc5b 	bl	8006d68 <USB_ReadInterrupts>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	f000 8480 	beq.w	8003dba <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80034c0:	689b      	ldr	r3, [r3, #8]
 80034c2:	0a1b      	lsrs	r3, r3, #8
 80034c4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 fc48 	bl	8006d68 <USB_ReadInterrupts>
 80034d8:	4603      	mov	r3, r0
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b02      	cmp	r3, #2
 80034e0:	d107      	bne.n	80034f2 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	695a      	ldr	r2, [r3, #20]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f002 0202 	and.w	r2, r2, #2
 80034f0:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	4618      	mov	r0, r3
 80034f8:	f003 fc36 	bl	8006d68 <USB_ReadInterrupts>
 80034fc:	4603      	mov	r3, r0
 80034fe:	f003 0310 	and.w	r3, r3, #16
 8003502:	2b10      	cmp	r3, #16
 8003504:	d161      	bne.n	80035ca <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	699a      	ldr	r2, [r3, #24]
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f022 0210 	bic.w	r2, r2, #16
 8003514:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8003516:	6a3b      	ldr	r3, [r7, #32]
 8003518:	6a1b      	ldr	r3, [r3, #32]
 800351a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	f003 020f 	and.w	r2, r3, #15
 8003522:	4613      	mov	r3, r2
 8003524:	00db      	lsls	r3, r3, #3
 8003526:	4413      	add	r3, r2
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	4413      	add	r3, r2
 8003532:	3304      	adds	r3, #4
 8003534:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8003536:	69bb      	ldr	r3, [r7, #24]
 8003538:	0c5b      	lsrs	r3, r3, #17
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	2b02      	cmp	r3, #2
 8003540:	d124      	bne.n	800358c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8003548:	4013      	ands	r3, r2
 800354a:	2b00      	cmp	r3, #0
 800354c:	d035      	beq.n	80035ba <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8003552:	69bb      	ldr	r3, [r7, #24]
 8003554:	091b      	lsrs	r3, r3, #4
 8003556:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8003558:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800355c:	b29b      	uxth	r3, r3
 800355e:	461a      	mov	r2, r3
 8003560:	6a38      	ldr	r0, [r7, #32]
 8003562:	f003 fa6d 	bl	8006a40 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	691a      	ldr	r2, [r3, #16]
 800356a:	69bb      	ldr	r3, [r7, #24]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003572:	441a      	add	r2, r3
 8003574:	697b      	ldr	r3, [r7, #20]
 8003576:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	6a1a      	ldr	r2, [r3, #32]
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	091b      	lsrs	r3, r3, #4
 8003580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003584:	441a      	add	r2, r3
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	621a      	str	r2, [r3, #32]
 800358a:	e016      	b.n	80035ba <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800358c:	69bb      	ldr	r3, [r7, #24]
 800358e:	0c5b      	lsrs	r3, r3, #17
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	2b06      	cmp	r3, #6
 8003596:	d110      	bne.n	80035ba <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800359e:	2208      	movs	r2, #8
 80035a0:	4619      	mov	r1, r3
 80035a2:	6a38      	ldr	r0, [r7, #32]
 80035a4:	f003 fa4c 	bl	8006a40 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	6a1a      	ldr	r2, [r3, #32]
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	091b      	lsrs	r3, r3, #4
 80035b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80035b4:	441a      	add	r2, r3
 80035b6:	697b      	ldr	r3, [r7, #20]
 80035b8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699a      	ldr	r2, [r3, #24]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f042 0210 	orr.w	r2, r2, #16
 80035c8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f003 fbca 	bl	8006d68 <USB_ReadInterrupts>
 80035d4:	4603      	mov	r3, r0
 80035d6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80035da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80035de:	f040 80a7 	bne.w	8003730 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80035e2:	2300      	movs	r3, #0
 80035e4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f003 fbcf 	bl	8006d8e <USB_ReadDevAllOutEpInterrupt>
 80035f0:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80035f2:	e099      	b.n	8003728 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80035f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	f000 808e 	beq.w	800371c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	4611      	mov	r1, r2
 800360a:	4618      	mov	r0, r3
 800360c:	f003 fbf3 	bl	8006df6 <USB_ReadDevOutEPInterrupt>
 8003610:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f003 0301 	and.w	r3, r3, #1
 8003618:	2b00      	cmp	r3, #0
 800361a:	d00c      	beq.n	8003636 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800361c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	461a      	mov	r2, r3
 800362a:	2301      	movs	r3, #1
 800362c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800362e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003630:	6878      	ldr	r0, [r7, #4]
 8003632:	f000 feab 	bl	800438c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f003 0308 	and.w	r3, r3, #8
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00c      	beq.n	800365a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8003640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003642:	015a      	lsls	r2, r3, #5
 8003644:	69fb      	ldr	r3, [r7, #28]
 8003646:	4413      	add	r3, r2
 8003648:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800364c:	461a      	mov	r2, r3
 800364e:	2308      	movs	r3, #8
 8003650:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8003652:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f000 ff81 	bl	800455c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	f003 0310 	and.w	r3, r3, #16
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8003664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003666:	015a      	lsls	r2, r3, #5
 8003668:	69fb      	ldr	r3, [r7, #28]
 800366a:	4413      	add	r3, r2
 800366c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003670:	461a      	mov	r2, r3
 8003672:	2310      	movs	r3, #16
 8003674:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	f003 0302 	and.w	r3, r3, #2
 800367c:	2b00      	cmp	r3, #0
 800367e:	d030      	beq.n	80036e2 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8003680:	6a3b      	ldr	r3, [r7, #32]
 8003682:	695b      	ldr	r3, [r3, #20]
 8003684:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003688:	2b80      	cmp	r3, #128	; 0x80
 800368a:	d109      	bne.n	80036a0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	69fa      	ldr	r2, [r7, #28]
 8003696:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800369a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800369e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80036a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80036a2:	4613      	mov	r3, r2
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4413      	add	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	4413      	add	r3, r2
 80036b2:	3304      	adds	r3, #4
 80036b4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80036b6:	697b      	ldr	r3, [r7, #20]
 80036b8:	78db      	ldrb	r3, [r3, #3]
 80036ba:	2b01      	cmp	r3, #1
 80036bc:	d108      	bne.n	80036d0 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	2200      	movs	r2, #0
 80036c2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80036c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	4619      	mov	r1, r3
 80036ca:	6878      	ldr	r0, [r7, #4]
 80036cc:	f005 fbe2 	bl	8008e94 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80036d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036dc:	461a      	mov	r2, r3
 80036de:	2302      	movs	r3, #2
 80036e0:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	f003 0320 	and.w	r3, r3, #32
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d008      	beq.n	80036fe <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80036ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ee:	015a      	lsls	r2, r3, #5
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	4413      	add	r3, r2
 80036f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036f8:	461a      	mov	r2, r3
 80036fa:	2320      	movs	r3, #32
 80036fc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003704:	2b00      	cmp	r3, #0
 8003706:	d009      	beq.n	800371c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003708:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370a:	015a      	lsls	r2, r3, #5
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	4413      	add	r3, r2
 8003710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003714:	461a      	mov	r2, r3
 8003716:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800371a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	3301      	adds	r3, #1
 8003720:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8003722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003724:	085b      	lsrs	r3, r3, #1
 8003726:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8003728:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800372a:	2b00      	cmp	r3, #0
 800372c:	f47f af62 	bne.w	80035f4 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4618      	mov	r0, r3
 8003736:	f003 fb17 	bl	8006d68 <USB_ReadInterrupts>
 800373a:	4603      	mov	r3, r0
 800373c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003740:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003744:	f040 80db 	bne.w	80038fe <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	4618      	mov	r0, r3
 800374e:	f003 fb38 	bl	8006dc2 <USB_ReadDevAllInEpInterrupt>
 8003752:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8003754:	2300      	movs	r3, #0
 8003756:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8003758:	e0cd      	b.n	80038f6 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800375a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800375c:	f003 0301 	and.w	r3, r3, #1
 8003760:	2b00      	cmp	r3, #0
 8003762:	f000 80c2 	beq.w	80038ea <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800376c:	b2d2      	uxtb	r2, r2
 800376e:	4611      	mov	r1, r2
 8003770:	4618      	mov	r0, r3
 8003772:	f003 fb5e 	bl	8006e32 <USB_ReadDevInEPInterrupt>
 8003776:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d057      	beq.n	8003832 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	2201      	movs	r2, #1
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003790:	69fb      	ldr	r3, [r7, #28]
 8003792:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	43db      	mvns	r3, r3
 800379c:	69f9      	ldr	r1, [r7, #28]
 800379e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037a2:	4013      	ands	r3, r2
 80037a4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80037a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037a8:	015a      	lsls	r2, r3, #5
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	4413      	add	r3, r2
 80037ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037b2:	461a      	mov	r2, r3
 80037b4:	2301      	movs	r3, #1
 80037b6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	691b      	ldr	r3, [r3, #16]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d132      	bne.n	8003826 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037c4:	4613      	mov	r3, r2
 80037c6:	00db      	lsls	r3, r3, #3
 80037c8:	4413      	add	r3, r2
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	440b      	add	r3, r1
 80037ce:	334c      	adds	r3, #76	; 0x4c
 80037d0:	6819      	ldr	r1, [r3, #0]
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037d6:	4613      	mov	r3, r2
 80037d8:	00db      	lsls	r3, r3, #3
 80037da:	4413      	add	r3, r2
 80037dc:	009b      	lsls	r3, r3, #2
 80037de:	4403      	add	r3, r0
 80037e0:	3348      	adds	r3, #72	; 0x48
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4419      	add	r1, r3
 80037e6:	6878      	ldr	r0, [r7, #4]
 80037e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037ea:	4613      	mov	r3, r2
 80037ec:	00db      	lsls	r3, r3, #3
 80037ee:	4413      	add	r3, r2
 80037f0:	009b      	lsls	r3, r3, #2
 80037f2:	4403      	add	r3, r0
 80037f4:	334c      	adds	r3, #76	; 0x4c
 80037f6:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80037f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d113      	bne.n	8003826 <HAL_PCD_IRQHandler+0x3a2>
 80037fe:	6879      	ldr	r1, [r7, #4]
 8003800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003802:	4613      	mov	r3, r2
 8003804:	00db      	lsls	r3, r3, #3
 8003806:	4413      	add	r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3354      	adds	r3, #84	; 0x54
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d108      	bne.n	8003826 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6818      	ldr	r0, [r3, #0]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800381e:	461a      	mov	r2, r3
 8003820:	2101      	movs	r1, #1
 8003822:	f003 fb65 	bl	8006ef0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8003826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003828:	b2db      	uxtb	r3, r3
 800382a:	4619      	mov	r1, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f005 fab6 	bl	8008d9e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	f003 0308 	and.w	r3, r3, #8
 8003838:	2b00      	cmp	r3, #0
 800383a:	d008      	beq.n	800384e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800383c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800383e:	015a      	lsls	r2, r3, #5
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	4413      	add	r3, r2
 8003844:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003848:	461a      	mov	r2, r3
 800384a:	2308      	movs	r3, #8
 800384c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800384e:	693b      	ldr	r3, [r7, #16]
 8003850:	f003 0310 	and.w	r3, r3, #16
 8003854:	2b00      	cmp	r3, #0
 8003856:	d008      	beq.n	800386a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8003858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800385a:	015a      	lsls	r2, r3, #5
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	4413      	add	r3, r2
 8003860:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003864:	461a      	mov	r2, r3
 8003866:	2310      	movs	r3, #16
 8003868:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800386a:	693b      	ldr	r3, [r7, #16]
 800386c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003870:	2b00      	cmp	r3, #0
 8003872:	d008      	beq.n	8003886 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	69fb      	ldr	r3, [r7, #28]
 800387a:	4413      	add	r3, r2
 800387c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003880:	461a      	mov	r2, r3
 8003882:	2340      	movs	r3, #64	; 0x40
 8003884:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003886:	693b      	ldr	r3, [r7, #16]
 8003888:	f003 0302 	and.w	r3, r3, #2
 800388c:	2b00      	cmp	r3, #0
 800388e:	d023      	beq.n	80038d8 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8003890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003892:	6a38      	ldr	r0, [r7, #32]
 8003894:	f002 fa46 	bl	8005d24 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	3338      	adds	r3, #56	; 0x38
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	3304      	adds	r3, #4
 80038aa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	78db      	ldrb	r3, [r3, #3]
 80038b0:	2b01      	cmp	r3, #1
 80038b2:	d108      	bne.n	80038c6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	2200      	movs	r2, #0
 80038b8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80038ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	4619      	mov	r1, r3
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	f005 faf9 	bl	8008eb8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80038c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d2:	461a      	mov	r2, r3
 80038d4:	2302      	movs	r3, #2
 80038d6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80038d8:	693b      	ldr	r3, [r7, #16]
 80038da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d003      	beq.n	80038ea <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80038e2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038e4:	6878      	ldr	r0, [r7, #4]
 80038e6:	f000 fcc3 	bl	8004270 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80038ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038ec:	3301      	adds	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80038f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80038f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	f47f af2e 	bne.w	800375a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	4618      	mov	r0, r3
 8003904:	f003 fa30 	bl	8006d68 <USB_ReadInterrupts>
 8003908:	4603      	mov	r3, r0
 800390a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800390e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003912:	d122      	bne.n	800395a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8003914:	69fb      	ldr	r3, [r7, #28]
 8003916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	69fa      	ldr	r2, [r7, #28]
 800391e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003922:	f023 0301 	bic.w	r3, r3, #1
 8003926:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800392e:	2b01      	cmp	r3, #1
 8003930:	d108      	bne.n	8003944 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800393a:	2100      	movs	r1, #0
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f000 feab 	bl	8004698 <HAL_PCDEx_LPM_Callback>
 8003942:	e002      	b.n	800394a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f005 fa97 	bl	8008e78 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8003958:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4618      	mov	r0, r3
 8003960:	f003 fa02 	bl	8006d68 <USB_ReadInterrupts>
 8003964:	4603      	mov	r3, r0
 8003966:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800396a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800396e:	d112      	bne.n	8003996 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8003970:	69fb      	ldr	r3, [r7, #28]
 8003972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d102      	bne.n	8003986 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f005 fa53 	bl	8008e2c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	695a      	ldr	r2, [r3, #20]
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003994:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f003 f9e4 	bl	8006d68 <USB_ReadInterrupts>
 80039a0:	4603      	mov	r3, r0
 80039a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80039a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80039aa:	f040 80b7 	bne.w	8003b1c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80039bc:	f023 0301 	bic.w	r3, r3, #1
 80039c0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	2110      	movs	r1, #16
 80039c8:	4618      	mov	r0, r3
 80039ca:	f002 f9ab 	bl	8005d24 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80039ce:	2300      	movs	r3, #0
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039d2:	e046      	b.n	8003a62 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80039d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039e0:	461a      	mov	r2, r3
 80039e2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80039e6:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80039e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80039ea:	015a      	lsls	r2, r3, #5
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	4413      	add	r3, r2
 80039f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80039f8:	0151      	lsls	r1, r2, #5
 80039fa:	69fa      	ldr	r2, [r7, #28]
 80039fc:	440a      	add	r2, r1
 80039fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a06:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a0a:	015a      	lsls	r2, r3, #5
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	4413      	add	r3, r2
 8003a10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a14:	461a      	mov	r2, r3
 8003a16:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a1a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1e:	015a      	lsls	r2, r3, #5
 8003a20:	69fb      	ldr	r3, [r7, #28]
 8003a22:	4413      	add	r3, r2
 8003a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a2c:	0151      	lsls	r1, r2, #5
 8003a2e:	69fa      	ldr	r2, [r7, #28]
 8003a30:	440a      	add	r2, r1
 8003a32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003a3a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	015a      	lsls	r2, r3, #5
 8003a40:	69fb      	ldr	r3, [r7, #28]
 8003a42:	4413      	add	r3, r2
 8003a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a4c:	0151      	lsls	r1, r2, #5
 8003a4e:	69fa      	ldr	r2, [r7, #28]
 8003a50:	440a      	add	r2, r1
 8003a52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003a56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003a5a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a5e:	3301      	adds	r3, #1
 8003a60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	685b      	ldr	r3, [r3, #4]
 8003a66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d3b3      	bcc.n	80039d4 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003a6c:	69fb      	ldr	r3, [r7, #28]
 8003a6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a72:	69db      	ldr	r3, [r3, #28]
 8003a74:	69fa      	ldr	r2, [r7, #28]
 8003a76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a7a:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003a7e:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d016      	beq.n	8003ab6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003a88:	69fb      	ldr	r3, [r7, #28]
 8003a8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a92:	69fa      	ldr	r2, [r7, #28]
 8003a94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a98:	f043 030b 	orr.w	r3, r3, #11
 8003a9c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003aa8:	69fa      	ldr	r2, [r7, #28]
 8003aaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aae:	f043 030b 	orr.w	r3, r3, #11
 8003ab2:	6453      	str	r3, [r2, #68]	; 0x44
 8003ab4:	e015      	b.n	8003ae2 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003ab6:	69fb      	ldr	r3, [r7, #28]
 8003ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003ac4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ac8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003acc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	69fa      	ldr	r2, [r7, #28]
 8003ad8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003adc:	f043 030b 	orr.w	r3, r3, #11
 8003ae0:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	69fa      	ldr	r2, [r7, #28]
 8003aec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003af0:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003af4:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003b06:	461a      	mov	r2, r3
 8003b08:	f003 f9f2 	bl	8006ef0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	695a      	ldr	r2, [r3, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003b1a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	4618      	mov	r0, r3
 8003b22:	f003 f921 	bl	8006d68 <USB_ReadInterrupts>
 8003b26:	4603      	mov	r3, r0
 8003b28:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b30:	d124      	bne.n	8003b7c <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 f9b7 	bl	8006eaa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4618      	mov	r0, r3
 8003b42:	f002 f96c 	bl	8005e1e <USB_GetDevSpeed>
 8003b46:	4603      	mov	r3, r0
 8003b48:	461a      	mov	r2, r3
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681c      	ldr	r4, [r3, #0]
 8003b52:	f001 fa11 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8003b56:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	461a      	mov	r2, r3
 8003b60:	4620      	mov	r0, r4
 8003b62:	f001 fe6b 	bl	800583c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f005 f941 	bl	8008dee <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	695a      	ldr	r2, [r3, #20]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8003b7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4618      	mov	r0, r3
 8003b82:	f003 f8f1 	bl	8006d68 <USB_ReadInterrupts>
 8003b86:	4603      	mov	r3, r0
 8003b88:	f003 0308 	and.w	r3, r3, #8
 8003b8c:	2b08      	cmp	r3, #8
 8003b8e:	d10a      	bne.n	8003ba6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003b90:	6878      	ldr	r0, [r7, #4]
 8003b92:	f005 f91e 	bl	8008dd2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	695a      	ldr	r2, [r3, #20]
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f002 0208 	and.w	r2, r2, #8
 8003ba4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f003 f8dc 	bl	8006d68 <USB_ReadInterrupts>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b80      	cmp	r3, #128	; 0x80
 8003bb8:	d122      	bne.n	8003c00 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003bba:	6a3b      	ldr	r3, [r7, #32]
 8003bbc:	699b      	ldr	r3, [r3, #24]
 8003bbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003bc2:	6a3b      	ldr	r3, [r7, #32]
 8003bc4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003bca:	e014      	b.n	8003bf6 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003bcc:	6879      	ldr	r1, [r7, #4]
 8003bce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bd0:	4613      	mov	r3, r2
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	4413      	add	r3, r2
 8003bd6:	009b      	lsls	r3, r3, #2
 8003bd8:	440b      	add	r3, r1
 8003bda:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003bde:	781b      	ldrb	r3, [r3, #0]
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d105      	bne.n	8003bf0 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	4619      	mov	r1, r3
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 fb0f 	bl	800420e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003bf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003bfc:	429a      	cmp	r2, r3
 8003bfe:	d3e5      	bcc.n	8003bcc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4618      	mov	r0, r3
 8003c06:	f003 f8af 	bl	8006d68 <USB_ReadInterrupts>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c10:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c14:	d13b      	bne.n	8003c8e <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c16:	2301      	movs	r3, #1
 8003c18:	627b      	str	r3, [r7, #36]	; 0x24
 8003c1a:	e02b      	b.n	8003c74 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1e:	015a      	lsls	r2, r3, #5
 8003c20:	69fb      	ldr	r3, [r7, #28]
 8003c22:	4413      	add	r3, r2
 8003c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c30:	4613      	mov	r3, r2
 8003c32:	00db      	lsls	r3, r3, #3
 8003c34:	4413      	add	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	440b      	add	r3, r1
 8003c3a:	3340      	adds	r3, #64	; 0x40
 8003c3c:	781b      	ldrb	r3, [r3, #0]
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d115      	bne.n	8003c6e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003c42:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	da12      	bge.n	8003c6e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8003c48:	6879      	ldr	r1, [r7, #4]
 8003c4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c4c:	4613      	mov	r3, r2
 8003c4e:	00db      	lsls	r3, r3, #3
 8003c50:	4413      	add	r3, r2
 8003c52:	009b      	lsls	r3, r3, #2
 8003c54:	440b      	add	r3, r1
 8003c56:	333f      	adds	r3, #63	; 0x3f
 8003c58:	2201      	movs	r2, #1
 8003c5a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c5e:	b2db      	uxtb	r3, r3
 8003c60:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	4619      	mov	r1, r3
 8003c68:	6878      	ldr	r0, [r7, #4]
 8003c6a:	f000 fad0 	bl	800420e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c70:	3301      	adds	r3, #1
 8003c72:	627b      	str	r3, [r7, #36]	; 0x24
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c7a:	429a      	cmp	r2, r3
 8003c7c:	d3ce      	bcc.n	8003c1c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	695a      	ldr	r2, [r3, #20]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003c8c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4618      	mov	r0, r3
 8003c94:	f003 f868 	bl	8006d68 <USB_ReadInterrupts>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c9e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003ca2:	d155      	bne.n	8003d50 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003ca4:	2301      	movs	r3, #1
 8003ca6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ca8:	e045      	b.n	8003d36 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cac:	015a      	lsls	r2, r3, #5
 8003cae:	69fb      	ldr	r3, [r7, #28]
 8003cb0:	4413      	add	r3, r2
 8003cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	00db      	lsls	r3, r3, #3
 8003cc2:	4413      	add	r3, r2
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	440b      	add	r3, r1
 8003cc8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b01      	cmp	r3, #1
 8003cd0:	d12e      	bne.n	8003d30 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003cd2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	da2b      	bge.n	8003d30 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003ce4:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d121      	bne.n	8003d30 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003cec:	6879      	ldr	r1, [r7, #4]
 8003cee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	00db      	lsls	r3, r3, #3
 8003cf4:	4413      	add	r3, r2
 8003cf6:	009b      	lsls	r3, r3, #2
 8003cf8:	440b      	add	r3, r1
 8003cfa:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003cfe:	2201      	movs	r2, #1
 8003d00:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003d0a:	6a3b      	ldr	r3, [r7, #32]
 8003d0c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003d0e:	6a3b      	ldr	r3, [r7, #32]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d10a      	bne.n	8003d30 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003d1a:	69fb      	ldr	r3, [r7, #28]
 8003d1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d20:	685b      	ldr	r3, [r3, #4]
 8003d22:	69fa      	ldr	r2, [r7, #28]
 8003d24:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003d28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003d2c:	6053      	str	r3, [r2, #4]
            break;
 8003d2e:	e007      	b.n	8003d40 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d32:	3301      	adds	r3, #1
 8003d34:	627b      	str	r3, [r7, #36]	; 0x24
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d3c:	429a      	cmp	r2, r3
 8003d3e:	d3b4      	bcc.n	8003caa <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695a      	ldr	r2, [r3, #20]
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003d4e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f003 f807 	bl	8006d68 <USB_ReadInterrupts>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d64:	d10a      	bne.n	8003d7c <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f005 f8b8 	bl	8008edc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695a      	ldr	r2, [r3, #20]
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003d7a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	4618      	mov	r0, r3
 8003d82:	f002 fff1 	bl	8006d68 <USB_ReadInterrupts>
 8003d86:	4603      	mov	r3, r0
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d115      	bne.n	8003dbc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003d98:	69bb      	ldr	r3, [r7, #24]
 8003d9a:	f003 0304 	and.w	r3, r3, #4
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f005 f8a8 	bl	8008ef8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	6859      	ldr	r1, [r3, #4]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	69ba      	ldr	r2, [r7, #24]
 8003db4:	430a      	orrs	r2, r1
 8003db6:	605a      	str	r2, [r3, #4]
 8003db8:	e000      	b.n	8003dbc <HAL_PCD_IRQHandler+0x938>
      return;
 8003dba:	bf00      	nop
    }
  }
}
 8003dbc:	3734      	adds	r7, #52	; 0x34
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	bd90      	pop	{r4, r7, pc}

08003dc2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003dc2:	b580      	push	{r7, lr}
 8003dc4:	b082      	sub	sp, #8
 8003dc6:	af00      	add	r7, sp, #0
 8003dc8:	6078      	str	r0, [r7, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d101      	bne.n	8003ddc <HAL_PCD_SetAddress+0x1a>
 8003dd8:	2302      	movs	r3, #2
 8003dda:	e013      	b.n	8003e04 <HAL_PCD_SetAddress+0x42>
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	78fa      	ldrb	r2, [r7, #3]
 8003de8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	78fa      	ldrb	r2, [r7, #3]
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f002 ff4f 	bl	8006c98 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003e02:	2300      	movs	r3, #0
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
 8003e14:	4608      	mov	r0, r1
 8003e16:	4611      	mov	r1, r2
 8003e18:	461a      	mov	r2, r3
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	70fb      	strb	r3, [r7, #3]
 8003e1e:	460b      	mov	r3, r1
 8003e20:	803b      	strh	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003e26:	2300      	movs	r3, #0
 8003e28:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003e2a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	da0f      	bge.n	8003e52 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003e32:	78fb      	ldrb	r3, [r7, #3]
 8003e34:	f003 020f 	and.w	r2, r3, #15
 8003e38:	4613      	mov	r3, r2
 8003e3a:	00db      	lsls	r3, r3, #3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	3338      	adds	r3, #56	; 0x38
 8003e42:	687a      	ldr	r2, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	3304      	adds	r3, #4
 8003e48:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	2201      	movs	r2, #1
 8003e4e:	705a      	strb	r2, [r3, #1]
 8003e50:	e00f      	b.n	8003e72 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003e52:	78fb      	ldrb	r3, [r7, #3]
 8003e54:	f003 020f 	and.w	r2, r3, #15
 8003e58:	4613      	mov	r3, r2
 8003e5a:	00db      	lsls	r3, r3, #3
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	4413      	add	r3, r2
 8003e68:	3304      	adds	r3, #4
 8003e6a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	2200      	movs	r2, #0
 8003e70:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003e72:	78fb      	ldrb	r3, [r7, #3]
 8003e74:	f003 030f 	and.w	r3, r3, #15
 8003e78:	b2da      	uxtb	r2, r3
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003e7e:	883a      	ldrh	r2, [r7, #0]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	78ba      	ldrb	r2, [r7, #2]
 8003e88:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	785b      	ldrb	r3, [r3, #1]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d004      	beq.n	8003e9c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003e9c:	78bb      	ldrb	r3, [r7, #2]
 8003e9e:	2b02      	cmp	r3, #2
 8003ea0:	d102      	bne.n	8003ea8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d101      	bne.n	8003eb6 <HAL_PCD_EP_Open+0xaa>
 8003eb2:	2302      	movs	r3, #2
 8003eb4:	e00e      	b.n	8003ed4 <HAL_PCD_EP_Open+0xc8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2201      	movs	r2, #1
 8003eba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	68f9      	ldr	r1, [r7, #12]
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f001 ffcf 	bl	8005e68 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003ed2:	7afb      	ldrb	r3, [r7, #11]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3710      	adds	r7, #16
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}

08003edc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
 8003ee4:	460b      	mov	r3, r1
 8003ee6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003ee8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	da0f      	bge.n	8003f10 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003ef0:	78fb      	ldrb	r3, [r7, #3]
 8003ef2:	f003 020f 	and.w	r2, r3, #15
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	00db      	lsls	r3, r3, #3
 8003efa:	4413      	add	r3, r2
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	3338      	adds	r3, #56	; 0x38
 8003f00:	687a      	ldr	r2, [r7, #4]
 8003f02:	4413      	add	r3, r2
 8003f04:	3304      	adds	r3, #4
 8003f06:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2201      	movs	r2, #1
 8003f0c:	705a      	strb	r2, [r3, #1]
 8003f0e:	e00f      	b.n	8003f30 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f10:	78fb      	ldrb	r3, [r7, #3]
 8003f12:	f003 020f 	and.w	r2, r3, #15
 8003f16:	4613      	mov	r3, r2
 8003f18:	00db      	lsls	r3, r3, #3
 8003f1a:	4413      	add	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	4413      	add	r3, r2
 8003f26:	3304      	adds	r3, #4
 8003f28:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003f30:	78fb      	ldrb	r3, [r7, #3]
 8003f32:	f003 030f 	and.w	r3, r3, #15
 8003f36:	b2da      	uxtb	r2, r3
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003f42:	2b01      	cmp	r3, #1
 8003f44:	d101      	bne.n	8003f4a <HAL_PCD_EP_Close+0x6e>
 8003f46:	2302      	movs	r3, #2
 8003f48:	e00e      	b.n	8003f68 <HAL_PCD_EP_Close+0x8c>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68f9      	ldr	r1, [r7, #12]
 8003f58:	4618      	mov	r0, r3
 8003f5a:	f002 f80d 	bl	8005f78 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2200      	movs	r2, #0
 8003f62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b086      	sub	sp, #24
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	607a      	str	r2, [r7, #4]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003f80:	7afb      	ldrb	r3, [r7, #11]
 8003f82:	f003 020f 	and.w	r2, r3, #15
 8003f86:	4613      	mov	r3, r2
 8003f88:	00db      	lsls	r3, r3, #3
 8003f8a:	4413      	add	r3, r2
 8003f8c:	009b      	lsls	r3, r3, #2
 8003f8e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003f92:	68fa      	ldr	r2, [r7, #12]
 8003f94:	4413      	add	r3, r2
 8003f96:	3304      	adds	r3, #4
 8003f98:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003f9a:	697b      	ldr	r3, [r7, #20]
 8003f9c:	687a      	ldr	r2, [r7, #4]
 8003f9e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	683a      	ldr	r2, [r7, #0]
 8003fa4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	2200      	movs	r2, #0
 8003fb0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003fb2:	7afb      	ldrb	r3, [r7, #11]
 8003fb4:	f003 030f 	and.w	r3, r3, #15
 8003fb8:	b2da      	uxtb	r2, r3
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d102      	bne.n	8003fcc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	697b      	ldr	r3, [r7, #20]
 8003fca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003fcc:	7afb      	ldrb	r3, [r7, #11]
 8003fce:	f003 030f 	and.w	r3, r3, #15
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d109      	bne.n	8003fea <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	6818      	ldr	r0, [r3, #0]
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	461a      	mov	r2, r3
 8003fe2:	6979      	ldr	r1, [r7, #20]
 8003fe4:	f002 faec 	bl	80065c0 <USB_EP0StartXfer>
 8003fe8:	e008      	b.n	8003ffc <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	6818      	ldr	r0, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	b2db      	uxtb	r3, r3
 8003ff4:	461a      	mov	r2, r3
 8003ff6:	6979      	ldr	r1, [r7, #20]
 8003ff8:	f002 f89a 	bl	8006130 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3718      	adds	r7, #24
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}

08004006 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004006:	b580      	push	{r7, lr}
 8004008:	b086      	sub	sp, #24
 800400a:	af00      	add	r7, sp, #0
 800400c:	60f8      	str	r0, [r7, #12]
 800400e:	607a      	str	r2, [r7, #4]
 8004010:	603b      	str	r3, [r7, #0]
 8004012:	460b      	mov	r3, r1
 8004014:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004016:	7afb      	ldrb	r3, [r7, #11]
 8004018:	f003 020f 	and.w	r2, r3, #15
 800401c:	4613      	mov	r3, r2
 800401e:	00db      	lsls	r3, r3, #3
 8004020:	4413      	add	r3, r2
 8004022:	009b      	lsls	r3, r3, #2
 8004024:	3338      	adds	r3, #56	; 0x38
 8004026:	68fa      	ldr	r2, [r7, #12]
 8004028:	4413      	add	r3, r2
 800402a:	3304      	adds	r3, #4
 800402c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800402e:	697b      	ldr	r3, [r7, #20]
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004034:	697b      	ldr	r3, [r7, #20]
 8004036:	683a      	ldr	r2, [r7, #0]
 8004038:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	2200      	movs	r2, #0
 800403e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	2201      	movs	r2, #1
 8004044:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004046:	7afb      	ldrb	r3, [r7, #11]
 8004048:	f003 030f 	and.w	r3, r3, #15
 800404c:	b2da      	uxtb	r2, r3
 800404e:	697b      	ldr	r3, [r7, #20]
 8004050:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	2b01      	cmp	r3, #1
 8004058:	d102      	bne.n	8004060 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004060:	7afb      	ldrb	r3, [r7, #11]
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	6818      	ldr	r0, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	461a      	mov	r2, r3
 8004076:	6979      	ldr	r1, [r7, #20]
 8004078:	f002 faa2 	bl	80065c0 <USB_EP0StartXfer>
 800407c:	e008      	b.n	8004090 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	b2db      	uxtb	r3, r3
 8004088:	461a      	mov	r2, r3
 800408a:	6979      	ldr	r1, [r7, #20]
 800408c:	f002 f850 	bl	8006130 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3718      	adds	r7, #24
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80040a6:	78fb      	ldrb	r3, [r7, #3]
 80040a8:	f003 020f 	and.w	r2, r3, #15
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	429a      	cmp	r2, r3
 80040b2:	d901      	bls.n	80040b8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e050      	b.n	800415a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80040b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	da0f      	bge.n	80040e0 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80040c0:	78fb      	ldrb	r3, [r7, #3]
 80040c2:	f003 020f 	and.w	r2, r3, #15
 80040c6:	4613      	mov	r3, r2
 80040c8:	00db      	lsls	r3, r3, #3
 80040ca:	4413      	add	r3, r2
 80040cc:	009b      	lsls	r3, r3, #2
 80040ce:	3338      	adds	r3, #56	; 0x38
 80040d0:	687a      	ldr	r2, [r7, #4]
 80040d2:	4413      	add	r3, r2
 80040d4:	3304      	adds	r3, #4
 80040d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	2201      	movs	r2, #1
 80040dc:	705a      	strb	r2, [r3, #1]
 80040de:	e00d      	b.n	80040fc <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80040e0:	78fa      	ldrb	r2, [r7, #3]
 80040e2:	4613      	mov	r3, r2
 80040e4:	00db      	lsls	r3, r3, #3
 80040e6:	4413      	add	r3, r2
 80040e8:	009b      	lsls	r3, r3, #2
 80040ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80040ee:	687a      	ldr	r2, [r7, #4]
 80040f0:	4413      	add	r3, r2
 80040f2:	3304      	adds	r3, #4
 80040f4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2200      	movs	r2, #0
 80040fa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	2201      	movs	r2, #1
 8004100:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004102:	78fb      	ldrb	r3, [r7, #3]
 8004104:	f003 030f 	and.w	r3, r3, #15
 8004108:	b2da      	uxtb	r2, r3
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004114:	2b01      	cmp	r3, #1
 8004116:	d101      	bne.n	800411c <HAL_PCD_EP_SetStall+0x82>
 8004118:	2302      	movs	r3, #2
 800411a:	e01e      	b.n	800415a <HAL_PCD_EP_SetStall+0xc0>
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	68f9      	ldr	r1, [r7, #12]
 800412a:	4618      	mov	r0, r3
 800412c:	f002 fce0 	bl	8006af0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004130:	78fb      	ldrb	r3, [r7, #3]
 8004132:	f003 030f 	and.w	r3, r3, #15
 8004136:	2b00      	cmp	r3, #0
 8004138:	d10a      	bne.n	8004150 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6818      	ldr	r0, [r3, #0]
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	691b      	ldr	r3, [r3, #16]
 8004142:	b2d9      	uxtb	r1, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800414a:	461a      	mov	r2, r3
 800414c:	f002 fed0 	bl	8006ef0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2200      	movs	r2, #0
 8004154:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004158:	2300      	movs	r3, #0
}
 800415a:	4618      	mov	r0, r3
 800415c:	3710      	adds	r7, #16
 800415e:	46bd      	mov	sp, r7
 8004160:	bd80      	pop	{r7, pc}

08004162 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004162:	b580      	push	{r7, lr}
 8004164:	b084      	sub	sp, #16
 8004166:	af00      	add	r7, sp, #0
 8004168:	6078      	str	r0, [r7, #4]
 800416a:	460b      	mov	r3, r1
 800416c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800416e:	78fb      	ldrb	r3, [r7, #3]
 8004170:	f003 020f 	and.w	r2, r3, #15
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	429a      	cmp	r2, r3
 800417a:	d901      	bls.n	8004180 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800417c:	2301      	movs	r3, #1
 800417e:	e042      	b.n	8004206 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004180:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004184:	2b00      	cmp	r3, #0
 8004186:	da0f      	bge.n	80041a8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004188:	78fb      	ldrb	r3, [r7, #3]
 800418a:	f003 020f 	and.w	r2, r3, #15
 800418e:	4613      	mov	r3, r2
 8004190:	00db      	lsls	r3, r3, #3
 8004192:	4413      	add	r3, r2
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	3338      	adds	r3, #56	; 0x38
 8004198:	687a      	ldr	r2, [r7, #4]
 800419a:	4413      	add	r3, r2
 800419c:	3304      	adds	r3, #4
 800419e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	2201      	movs	r2, #1
 80041a4:	705a      	strb	r2, [r3, #1]
 80041a6:	e00f      	b.n	80041c8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80041a8:	78fb      	ldrb	r3, [r7, #3]
 80041aa:	f003 020f 	and.w	r2, r3, #15
 80041ae:	4613      	mov	r3, r2
 80041b0:	00db      	lsls	r3, r3, #3
 80041b2:	4413      	add	r3, r2
 80041b4:	009b      	lsls	r3, r3, #2
 80041b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	4413      	add	r3, r2
 80041be:	3304      	adds	r3, #4
 80041c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	2200      	movs	r2, #0
 80041cc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80041ce:	78fb      	ldrb	r3, [r7, #3]
 80041d0:	f003 030f 	and.w	r3, r3, #15
 80041d4:	b2da      	uxtb	r2, r3
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80041e0:	2b01      	cmp	r3, #1
 80041e2:	d101      	bne.n	80041e8 <HAL_PCD_EP_ClrStall+0x86>
 80041e4:	2302      	movs	r3, #2
 80041e6:	e00e      	b.n	8004206 <HAL_PCD_EP_ClrStall+0xa4>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68f9      	ldr	r1, [r7, #12]
 80041f6:	4618      	mov	r0, r3
 80041f8:	f002 fce8 	bl	8006bcc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}

0800420e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800420e:	b580      	push	{r7, lr}
 8004210:	b084      	sub	sp, #16
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	460b      	mov	r3, r1
 8004218:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800421a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800421e:	2b00      	cmp	r3, #0
 8004220:	da0c      	bge.n	800423c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004222:	78fb      	ldrb	r3, [r7, #3]
 8004224:	f003 020f 	and.w	r2, r3, #15
 8004228:	4613      	mov	r3, r2
 800422a:	00db      	lsls	r3, r3, #3
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	3338      	adds	r3, #56	; 0x38
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	4413      	add	r3, r2
 8004236:	3304      	adds	r3, #4
 8004238:	60fb      	str	r3, [r7, #12]
 800423a:	e00c      	b.n	8004256 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800423c:	78fb      	ldrb	r3, [r7, #3]
 800423e:	f003 020f 	and.w	r2, r3, #15
 8004242:	4613      	mov	r3, r2
 8004244:	00db      	lsls	r3, r3, #3
 8004246:	4413      	add	r3, r2
 8004248:	009b      	lsls	r3, r3, #2
 800424a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	4413      	add	r3, r2
 8004252:	3304      	adds	r3, #4
 8004254:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68f9      	ldr	r1, [r7, #12]
 800425c:	4618      	mov	r0, r3
 800425e:	f002 fb07 	bl	8006870 <USB_EPStopXfer>
 8004262:	4603      	mov	r3, r0
 8004264:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004266:	7afb      	ldrb	r3, [r7, #11]
}
 8004268:	4618      	mov	r0, r3
 800426a:	3710      	adds	r7, #16
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b08a      	sub	sp, #40	; 0x28
 8004274:	af02      	add	r7, sp, #8
 8004276:	6078      	str	r0, [r7, #4]
 8004278:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004284:	683a      	ldr	r2, [r7, #0]
 8004286:	4613      	mov	r3, r2
 8004288:	00db      	lsls	r3, r3, #3
 800428a:	4413      	add	r3, r2
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	3338      	adds	r3, #56	; 0x38
 8004290:	687a      	ldr	r2, [r7, #4]
 8004292:	4413      	add	r3, r2
 8004294:	3304      	adds	r3, #4
 8004296:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6a1a      	ldr	r2, [r3, #32]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	699b      	ldr	r3, [r3, #24]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	d901      	bls.n	80042a8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e06c      	b.n	8004382 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	699a      	ldr	r2, [r3, #24]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1b      	ldr	r3, [r3, #32]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	68db      	ldr	r3, [r3, #12]
 80042b8:	69fa      	ldr	r2, [r7, #28]
 80042ba:	429a      	cmp	r2, r3
 80042bc:	d902      	bls.n	80042c4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	68db      	ldr	r3, [r3, #12]
 80042c2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80042c4:	69fb      	ldr	r3, [r7, #28]
 80042c6:	3303      	adds	r3, #3
 80042c8:	089b      	lsrs	r3, r3, #2
 80042ca:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80042cc:	e02b      	b.n	8004326 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	699a      	ldr	r2, [r3, #24]
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6a1b      	ldr	r3, [r3, #32]
 80042d6:	1ad3      	subs	r3, r2, r3
 80042d8:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	69fa      	ldr	r2, [r7, #28]
 80042e0:	429a      	cmp	r2, r3
 80042e2:	d902      	bls.n	80042ea <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	3303      	adds	r3, #3
 80042ee:	089b      	lsrs	r3, r3, #2
 80042f0:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	6919      	ldr	r1, [r3, #16]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8004302:	b2db      	uxtb	r3, r3
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	4603      	mov	r3, r0
 8004308:	6978      	ldr	r0, [r7, #20]
 800430a:	f002 fb5b 	bl	80069c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	691a      	ldr	r2, [r3, #16]
 8004312:	69fb      	ldr	r3, [r7, #28]
 8004314:	441a      	add	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	6a1a      	ldr	r2, [r3, #32]
 800431e:	69fb      	ldr	r3, [r7, #28]
 8004320:	441a      	add	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	015a      	lsls	r2, r3, #5
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	4413      	add	r3, r2
 800432e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004332:	699b      	ldr	r3, [r3, #24]
 8004334:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004336:	69ba      	ldr	r2, [r7, #24]
 8004338:	429a      	cmp	r2, r3
 800433a:	d809      	bhi.n	8004350 <PCD_WriteEmptyTxFifo+0xe0>
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	6a1a      	ldr	r2, [r3, #32]
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8004344:	429a      	cmp	r2, r3
 8004346:	d203      	bcs.n	8004350 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	699b      	ldr	r3, [r3, #24]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1be      	bne.n	80042ce <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	699a      	ldr	r2, [r3, #24]
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6a1b      	ldr	r3, [r3, #32]
 8004358:	429a      	cmp	r2, r3
 800435a:	d811      	bhi.n	8004380 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	f003 030f 	and.w	r3, r3, #15
 8004362:	2201      	movs	r2, #1
 8004364:	fa02 f303 	lsl.w	r3, r2, r3
 8004368:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	43db      	mvns	r3, r3
 8004376:	6939      	ldr	r1, [r7, #16]
 8004378:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800437c:	4013      	ands	r3, r2
 800437e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8004380:	2300      	movs	r3, #0
}
 8004382:	4618      	mov	r0, r3
 8004384:	3720      	adds	r7, #32
 8004386:	46bd      	mov	sp, r7
 8004388:	bd80      	pop	{r7, pc}
	...

0800438c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800438c:	b580      	push	{r7, lr}
 800438e:	b088      	sub	sp, #32
 8004390:	af00      	add	r7, sp, #0
 8004392:	6078      	str	r0, [r7, #4]
 8004394:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	333c      	adds	r3, #60	; 0x3c
 80043a4:	3304      	adds	r3, #4
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b01      	cmp	r3, #1
 80043c0:	d17b      	bne.n	80044ba <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80043c2:	693b      	ldr	r3, [r7, #16]
 80043c4:	f003 0308 	and.w	r3, r3, #8
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d015      	beq.n	80043f8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	4a61      	ldr	r2, [pc, #388]	; (8004554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	f240 80b9 	bls.w	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f000 80b3 	beq.w	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	015a      	lsls	r2, r3, #5
 80043e6:	69bb      	ldr	r3, [r7, #24]
 80043e8:	4413      	add	r3, r2
 80043ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043ee:	461a      	mov	r2, r3
 80043f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043f4:	6093      	str	r3, [r2, #8]
 80043f6:	e0a7      	b.n	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	015a      	lsls	r2, r3, #5
 8004406:	69bb      	ldr	r3, [r7, #24]
 8004408:	4413      	add	r3, r2
 800440a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800440e:	461a      	mov	r2, r3
 8004410:	2320      	movs	r3, #32
 8004412:	6093      	str	r3, [r2, #8]
 8004414:	e098      	b.n	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	f040 8093 	bne.w	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	4a4b      	ldr	r2, [pc, #300]	; (8004554 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d90f      	bls.n	800444a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00a      	beq.n	800444a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	015a      	lsls	r2, r3, #5
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	4413      	add	r3, r2
 800443c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004440:	461a      	mov	r2, r3
 8004442:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004446:	6093      	str	r3, [r2, #8]
 8004448:	e07e      	b.n	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	4413      	add	r3, r2
 800445c:	3304      	adds	r3, #4
 800445e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	0159      	lsls	r1, r3, #5
 8004468:	69bb      	ldr	r3, [r7, #24]
 800446a:	440b      	add	r3, r1
 800446c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004470:	691b      	ldr	r3, [r3, #16]
 8004472:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d114      	bne.n	80044ac <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d109      	bne.n	800449e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6818      	ldr	r0, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004494:	461a      	mov	r2, r3
 8004496:	2101      	movs	r1, #1
 8004498:	f002 fd2a 	bl	8006ef0 <USB_EP0_OutStart>
 800449c:	e006      	b.n	80044ac <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	691a      	ldr	r2, [r3, #16]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	441a      	add	r2, r3
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	4619      	mov	r1, r3
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f004 fc58 	bl	8008d68 <HAL_PCD_DataOutStageCallback>
 80044b8:	e046      	b.n	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80044ba:	697b      	ldr	r3, [r7, #20]
 80044bc:	4a26      	ldr	r2, [pc, #152]	; (8004558 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d124      	bne.n	800450c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80044c2:	693b      	ldr	r3, [r7, #16]
 80044c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d00a      	beq.n	80044e2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	015a      	lsls	r2, r3, #5
 80044d0:	69bb      	ldr	r3, [r7, #24]
 80044d2:	4413      	add	r3, r2
 80044d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044d8:	461a      	mov	r2, r3
 80044da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044de:	6093      	str	r3, [r2, #8]
 80044e0:	e032      	b.n	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	f003 0320 	and.w	r3, r3, #32
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d008      	beq.n	80044fe <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	015a      	lsls	r2, r3, #5
 80044f0:	69bb      	ldr	r3, [r7, #24]
 80044f2:	4413      	add	r3, r2
 80044f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044f8:	461a      	mov	r2, r3
 80044fa:	2320      	movs	r3, #32
 80044fc:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	b2db      	uxtb	r3, r3
 8004502:	4619      	mov	r1, r3
 8004504:	6878      	ldr	r0, [r7, #4]
 8004506:	f004 fc2f 	bl	8008d68 <HAL_PCD_DataOutStageCallback>
 800450a:	e01d      	b.n	8004548 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d114      	bne.n	800453c <PCD_EP_OutXfrComplete_int+0x1b0>
 8004512:	6879      	ldr	r1, [r7, #4]
 8004514:	683a      	ldr	r2, [r7, #0]
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	440b      	add	r3, r1
 8004520:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d108      	bne.n	800453c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6818      	ldr	r0, [r3, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004534:	461a      	mov	r2, r3
 8004536:	2100      	movs	r1, #0
 8004538:	f002 fcda 	bl	8006ef0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	b2db      	uxtb	r3, r3
 8004540:	4619      	mov	r1, r3
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f004 fc10 	bl	8008d68 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8004548:	2300      	movs	r3, #0
}
 800454a:	4618      	mov	r0, r3
 800454c:	3720      	adds	r7, #32
 800454e:	46bd      	mov	sp, r7
 8004550:	bd80      	pop	{r7, pc}
 8004552:	bf00      	nop
 8004554:	4f54300a 	.word	0x4f54300a
 8004558:	4f54310a 	.word	0x4f54310a

0800455c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b086      	sub	sp, #24
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
 8004564:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800456c:	697b      	ldr	r3, [r7, #20]
 800456e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	333c      	adds	r3, #60	; 0x3c
 8004574:	3304      	adds	r3, #4
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	015a      	lsls	r2, r3, #5
 800457e:	693b      	ldr	r3, [r7, #16]
 8004580:	4413      	add	r3, r2
 8004582:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	4a15      	ldr	r2, [pc, #84]	; (80045e4 <PCD_EP_OutSetupPacket_int+0x88>)
 800458e:	4293      	cmp	r3, r2
 8004590:	d90e      	bls.n	80045b0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004598:	2b00      	cmp	r3, #0
 800459a:	d009      	beq.n	80045b0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	015a      	lsls	r2, r3, #5
 80045a0:	693b      	ldr	r3, [r7, #16]
 80045a2:	4413      	add	r3, r2
 80045a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045a8:	461a      	mov	r2, r3
 80045aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045ae:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80045b0:	6878      	ldr	r0, [r7, #4]
 80045b2:	f004 fbc7 	bl	8008d44 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	4a0a      	ldr	r2, [pc, #40]	; (80045e4 <PCD_EP_OutSetupPacket_int+0x88>)
 80045ba:	4293      	cmp	r3, r2
 80045bc:	d90c      	bls.n	80045d8 <PCD_EP_OutSetupPacket_int+0x7c>
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	691b      	ldr	r3, [r3, #16]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d108      	bne.n	80045d8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6818      	ldr	r0, [r3, #0]
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80045d0:	461a      	mov	r2, r3
 80045d2:	2101      	movs	r1, #1
 80045d4:	f002 fc8c 	bl	8006ef0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	4f54300a 	.word	0x4f54300a

080045e8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b085      	sub	sp, #20
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	6078      	str	r0, [r7, #4]
 80045f0:	460b      	mov	r3, r1
 80045f2:	70fb      	strb	r3, [r7, #3]
 80045f4:	4613      	mov	r3, r2
 80045f6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8004600:	78fb      	ldrb	r3, [r7, #3]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d107      	bne.n	8004616 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004606:	883b      	ldrh	r3, [r7, #0]
 8004608:	0419      	lsls	r1, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	68ba      	ldr	r2, [r7, #8]
 8004610:	430a      	orrs	r2, r1
 8004612:	629a      	str	r2, [r3, #40]	; 0x28
 8004614:	e028      	b.n	8004668 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800461c:	0c1b      	lsrs	r3, r3, #16
 800461e:	68ba      	ldr	r2, [r7, #8]
 8004620:	4413      	add	r3, r2
 8004622:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004624:	2300      	movs	r3, #0
 8004626:	73fb      	strb	r3, [r7, #15]
 8004628:	e00d      	b.n	8004646 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	7bfb      	ldrb	r3, [r7, #15]
 8004630:	3340      	adds	r3, #64	; 0x40
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	685b      	ldr	r3, [r3, #4]
 8004638:	0c1b      	lsrs	r3, r3, #16
 800463a:	68ba      	ldr	r2, [r7, #8]
 800463c:	4413      	add	r3, r2
 800463e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8004640:	7bfb      	ldrb	r3, [r7, #15]
 8004642:	3301      	adds	r3, #1
 8004644:	73fb      	strb	r3, [r7, #15]
 8004646:	7bfa      	ldrb	r2, [r7, #15]
 8004648:	78fb      	ldrb	r3, [r7, #3]
 800464a:	3b01      	subs	r3, #1
 800464c:	429a      	cmp	r2, r3
 800464e:	d3ec      	bcc.n	800462a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8004650:	883b      	ldrh	r3, [r7, #0]
 8004652:	0418      	lsls	r0, r3, #16
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6819      	ldr	r1, [r3, #0]
 8004658:	78fb      	ldrb	r3, [r7, #3]
 800465a:	3b01      	subs	r3, #1
 800465c:	68ba      	ldr	r2, [r7, #8]
 800465e:	4302      	orrs	r2, r0
 8004660:	3340      	adds	r3, #64	; 0x40
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8004668:	2300      	movs	r3, #0
}
 800466a:	4618      	mov	r0, r3
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr

08004676 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004676:	b480      	push	{r7}
 8004678:	b083      	sub	sp, #12
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	887a      	ldrh	r2, [r7, #2]
 8004688:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
 80046a0:	460b      	mov	r3, r1
 80046a2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80046a4:	bf00      	nop
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80046b0:	b580      	push	{r7, lr}
 80046b2:	b086      	sub	sp, #24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d101      	bne.n	80046c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	e267      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f003 0301 	and.w	r3, r3, #1
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d075      	beq.n	80047ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046ce:	4b88      	ldr	r3, [pc, #544]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	f003 030c 	and.w	r3, r3, #12
 80046d6:	2b04      	cmp	r3, #4
 80046d8:	d00c      	beq.n	80046f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046da:	4b85      	ldr	r3, [pc, #532]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80046e2:	2b08      	cmp	r3, #8
 80046e4:	d112      	bne.n	800470c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80046e6:	4b82      	ldr	r3, [pc, #520]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80046ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80046f2:	d10b      	bne.n	800470c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80046f4:	4b7e      	ldr	r3, [pc, #504]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d05b      	beq.n	80047b8 <HAL_RCC_OscConfig+0x108>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d157      	bne.n	80047b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e242      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004714:	d106      	bne.n	8004724 <HAL_RCC_OscConfig+0x74>
 8004716:	4b76      	ldr	r3, [pc, #472]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a75      	ldr	r2, [pc, #468]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 800471c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004720:	6013      	str	r3, [r2, #0]
 8004722:	e01d      	b.n	8004760 <HAL_RCC_OscConfig+0xb0>
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	685b      	ldr	r3, [r3, #4]
 8004728:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800472c:	d10c      	bne.n	8004748 <HAL_RCC_OscConfig+0x98>
 800472e:	4b70      	ldr	r3, [pc, #448]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a6f      	ldr	r2, [pc, #444]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004734:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004738:	6013      	str	r3, [r2, #0]
 800473a:	4b6d      	ldr	r3, [pc, #436]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	4a6c      	ldr	r2, [pc, #432]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004740:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004744:	6013      	str	r3, [r2, #0]
 8004746:	e00b      	b.n	8004760 <HAL_RCC_OscConfig+0xb0>
 8004748:	4b69      	ldr	r3, [pc, #420]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a68      	ldr	r2, [pc, #416]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 800474e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004752:	6013      	str	r3, [r2, #0]
 8004754:	4b66      	ldr	r3, [pc, #408]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a65      	ldr	r2, [pc, #404]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 800475a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800475e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	685b      	ldr	r3, [r3, #4]
 8004764:	2b00      	cmp	r3, #0
 8004766:	d013      	beq.n	8004790 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004768:	f7fd fc3c 	bl	8001fe4 <HAL_GetTick>
 800476c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800476e:	e008      	b.n	8004782 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004770:	f7fd fc38 	bl	8001fe4 <HAL_GetTick>
 8004774:	4602      	mov	r2, r0
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	1ad3      	subs	r3, r2, r3
 800477a:	2b64      	cmp	r3, #100	; 0x64
 800477c:	d901      	bls.n	8004782 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800477e:	2303      	movs	r3, #3
 8004780:	e207      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004782:	4b5b      	ldr	r3, [pc, #364]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d0f0      	beq.n	8004770 <HAL_RCC_OscConfig+0xc0>
 800478e:	e014      	b.n	80047ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004790:	f7fd fc28 	bl	8001fe4 <HAL_GetTick>
 8004794:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004796:	e008      	b.n	80047aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004798:	f7fd fc24 	bl	8001fe4 <HAL_GetTick>
 800479c:	4602      	mov	r2, r0
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	1ad3      	subs	r3, r2, r3
 80047a2:	2b64      	cmp	r3, #100	; 0x64
 80047a4:	d901      	bls.n	80047aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80047a6:	2303      	movs	r3, #3
 80047a8:	e1f3      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80047aa:	4b51      	ldr	r3, [pc, #324]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1f0      	bne.n	8004798 <HAL_RCC_OscConfig+0xe8>
 80047b6:	e000      	b.n	80047ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80047b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f003 0302 	and.w	r3, r3, #2
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d063      	beq.n	800488e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047c6:	4b4a      	ldr	r3, [pc, #296]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80047c8:	689b      	ldr	r3, [r3, #8]
 80047ca:	f003 030c 	and.w	r3, r3, #12
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00b      	beq.n	80047ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047d2:	4b47      	ldr	r3, [pc, #284]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80047da:	2b08      	cmp	r3, #8
 80047dc:	d11c      	bne.n	8004818 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80047de:	4b44      	ldr	r3, [pc, #272]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d116      	bne.n	8004818 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80047ea:	4b41      	ldr	r3, [pc, #260]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0302 	and.w	r3, r3, #2
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d005      	beq.n	8004802 <HAL_RCC_OscConfig+0x152>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d001      	beq.n	8004802 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80047fe:	2301      	movs	r3, #1
 8004800:	e1c7      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004802:	4b3b      	ldr	r3, [pc, #236]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	691b      	ldr	r3, [r3, #16]
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4937      	ldr	r1, [pc, #220]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004812:	4313      	orrs	r3, r2
 8004814:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004816:	e03a      	b.n	800488e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d020      	beq.n	8004862 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004820:	4b34      	ldr	r3, [pc, #208]	; (80048f4 <HAL_RCC_OscConfig+0x244>)
 8004822:	2201      	movs	r2, #1
 8004824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004826:	f7fd fbdd 	bl	8001fe4 <HAL_GetTick>
 800482a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800482c:	e008      	b.n	8004840 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800482e:	f7fd fbd9 	bl	8001fe4 <HAL_GetTick>
 8004832:	4602      	mov	r2, r0
 8004834:	693b      	ldr	r3, [r7, #16]
 8004836:	1ad3      	subs	r3, r2, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d901      	bls.n	8004840 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800483c:	2303      	movs	r3, #3
 800483e:	e1a8      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004840:	4b2b      	ldr	r3, [pc, #172]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f003 0302 	and.w	r3, r3, #2
 8004848:	2b00      	cmp	r3, #0
 800484a:	d0f0      	beq.n	800482e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800484c:	4b28      	ldr	r3, [pc, #160]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	691b      	ldr	r3, [r3, #16]
 8004858:	00db      	lsls	r3, r3, #3
 800485a:	4925      	ldr	r1, [pc, #148]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 800485c:	4313      	orrs	r3, r2
 800485e:	600b      	str	r3, [r1, #0]
 8004860:	e015      	b.n	800488e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004862:	4b24      	ldr	r3, [pc, #144]	; (80048f4 <HAL_RCC_OscConfig+0x244>)
 8004864:	2200      	movs	r2, #0
 8004866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004868:	f7fd fbbc 	bl	8001fe4 <HAL_GetTick>
 800486c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800486e:	e008      	b.n	8004882 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004870:	f7fd fbb8 	bl	8001fe4 <HAL_GetTick>
 8004874:	4602      	mov	r2, r0
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	1ad3      	subs	r3, r2, r3
 800487a:	2b02      	cmp	r3, #2
 800487c:	d901      	bls.n	8004882 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800487e:	2303      	movs	r3, #3
 8004880:	e187      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004882:	4b1b      	ldr	r3, [pc, #108]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f003 0302 	and.w	r3, r3, #2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d1f0      	bne.n	8004870 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f003 0308 	and.w	r3, r3, #8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d036      	beq.n	8004908 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	695b      	ldr	r3, [r3, #20]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d016      	beq.n	80048d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80048a2:	4b15      	ldr	r3, [pc, #84]	; (80048f8 <HAL_RCC_OscConfig+0x248>)
 80048a4:	2201      	movs	r2, #1
 80048a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80048a8:	f7fd fb9c 	bl	8001fe4 <HAL_GetTick>
 80048ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048ae:	e008      	b.n	80048c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048b0:	f7fd fb98 	bl	8001fe4 <HAL_GetTick>
 80048b4:	4602      	mov	r2, r0
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	1ad3      	subs	r3, r2, r3
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e167      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80048c2:	4b0b      	ldr	r3, [pc, #44]	; (80048f0 <HAL_RCC_OscConfig+0x240>)
 80048c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d0f0      	beq.n	80048b0 <HAL_RCC_OscConfig+0x200>
 80048ce:	e01b      	b.n	8004908 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80048d0:	4b09      	ldr	r3, [pc, #36]	; (80048f8 <HAL_RCC_OscConfig+0x248>)
 80048d2:	2200      	movs	r2, #0
 80048d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048d6:	f7fd fb85 	bl	8001fe4 <HAL_GetTick>
 80048da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048dc:	e00e      	b.n	80048fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80048de:	f7fd fb81 	bl	8001fe4 <HAL_GetTick>
 80048e2:	4602      	mov	r2, r0
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	1ad3      	subs	r3, r2, r3
 80048e8:	2b02      	cmp	r3, #2
 80048ea:	d907      	bls.n	80048fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80048ec:	2303      	movs	r3, #3
 80048ee:	e150      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
 80048f0:	40023800 	.word	0x40023800
 80048f4:	42470000 	.word	0x42470000
 80048f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80048fc:	4b88      	ldr	r3, [pc, #544]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80048fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004900:	f003 0302 	and.w	r3, r3, #2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d1ea      	bne.n	80048de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f003 0304 	and.w	r3, r3, #4
 8004910:	2b00      	cmp	r3, #0
 8004912:	f000 8097 	beq.w	8004a44 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004916:	2300      	movs	r3, #0
 8004918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800491a:	4b81      	ldr	r3, [pc, #516]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10f      	bne.n	8004946 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004926:	2300      	movs	r3, #0
 8004928:	60bb      	str	r3, [r7, #8]
 800492a:	4b7d      	ldr	r3, [pc, #500]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	4a7c      	ldr	r2, [pc, #496]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004934:	6413      	str	r3, [r2, #64]	; 0x40
 8004936:	4b7a      	ldr	r3, [pc, #488]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800493e:	60bb      	str	r3, [r7, #8]
 8004940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004942:	2301      	movs	r3, #1
 8004944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004946:	4b77      	ldr	r3, [pc, #476]	; (8004b24 <HAL_RCC_OscConfig+0x474>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d118      	bne.n	8004984 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004952:	4b74      	ldr	r3, [pc, #464]	; (8004b24 <HAL_RCC_OscConfig+0x474>)
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	4a73      	ldr	r2, [pc, #460]	; (8004b24 <HAL_RCC_OscConfig+0x474>)
 8004958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800495c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800495e:	f7fd fb41 	bl	8001fe4 <HAL_GetTick>
 8004962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004964:	e008      	b.n	8004978 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004966:	f7fd fb3d 	bl	8001fe4 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	2b02      	cmp	r3, #2
 8004972:	d901      	bls.n	8004978 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004974:	2303      	movs	r3, #3
 8004976:	e10c      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004978:	4b6a      	ldr	r3, [pc, #424]	; (8004b24 <HAL_RCC_OscConfig+0x474>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d0f0      	beq.n	8004966 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	2b01      	cmp	r3, #1
 800498a:	d106      	bne.n	800499a <HAL_RCC_OscConfig+0x2ea>
 800498c:	4b64      	ldr	r3, [pc, #400]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 800498e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004990:	4a63      	ldr	r2, [pc, #396]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004992:	f043 0301 	orr.w	r3, r3, #1
 8004996:	6713      	str	r3, [r2, #112]	; 0x70
 8004998:	e01c      	b.n	80049d4 <HAL_RCC_OscConfig+0x324>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	689b      	ldr	r3, [r3, #8]
 800499e:	2b05      	cmp	r3, #5
 80049a0:	d10c      	bne.n	80049bc <HAL_RCC_OscConfig+0x30c>
 80049a2:	4b5f      	ldr	r3, [pc, #380]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a6:	4a5e      	ldr	r2, [pc, #376]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049a8:	f043 0304 	orr.w	r3, r3, #4
 80049ac:	6713      	str	r3, [r2, #112]	; 0x70
 80049ae:	4b5c      	ldr	r3, [pc, #368]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049b2:	4a5b      	ldr	r2, [pc, #364]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049b4:	f043 0301 	orr.w	r3, r3, #1
 80049b8:	6713      	str	r3, [r2, #112]	; 0x70
 80049ba:	e00b      	b.n	80049d4 <HAL_RCC_OscConfig+0x324>
 80049bc:	4b58      	ldr	r3, [pc, #352]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049c0:	4a57      	ldr	r2, [pc, #348]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	6713      	str	r3, [r2, #112]	; 0x70
 80049c8:	4b55      	ldr	r3, [pc, #340]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049cc:	4a54      	ldr	r2, [pc, #336]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049ce:	f023 0304 	bic.w	r3, r3, #4
 80049d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d015      	beq.n	8004a08 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049dc:	f7fd fb02 	bl	8001fe4 <HAL_GetTick>
 80049e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049e2:	e00a      	b.n	80049fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80049e4:	f7fd fafe 	bl	8001fe4 <HAL_GetTick>
 80049e8:	4602      	mov	r2, r0
 80049ea:	693b      	ldr	r3, [r7, #16]
 80049ec:	1ad3      	subs	r3, r2, r3
 80049ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e0cb      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049fa:	4b49      	ldr	r3, [pc, #292]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 80049fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d0ee      	beq.n	80049e4 <HAL_RCC_OscConfig+0x334>
 8004a06:	e014      	b.n	8004a32 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a08:	f7fd faec 	bl	8001fe4 <HAL_GetTick>
 8004a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a0e:	e00a      	b.n	8004a26 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a10:	f7fd fae8 	bl	8001fe4 <HAL_GetTick>
 8004a14:	4602      	mov	r2, r0
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	1ad3      	subs	r3, r2, r3
 8004a1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a1e:	4293      	cmp	r3, r2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e0b5      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004a26:	4b3e      	ldr	r3, [pc, #248]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1ee      	bne.n	8004a10 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004a32:	7dfb      	ldrb	r3, [r7, #23]
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	d105      	bne.n	8004a44 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004a38:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a3c:	4a38      	ldr	r2, [pc, #224]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004a3e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a42:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	f000 80a1 	beq.w	8004b90 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004a4e:	4b34      	ldr	r3, [pc, #208]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d05c      	beq.n	8004b14 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	699b      	ldr	r3, [r3, #24]
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d141      	bne.n	8004ae6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a62:	4b31      	ldr	r3, [pc, #196]	; (8004b28 <HAL_RCC_OscConfig+0x478>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a68:	f7fd fabc 	bl	8001fe4 <HAL_GetTick>
 8004a6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a6e:	e008      	b.n	8004a82 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004a70:	f7fd fab8 	bl	8001fe4 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	2b02      	cmp	r3, #2
 8004a7c:	d901      	bls.n	8004a82 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e087      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a82:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d1f0      	bne.n	8004a70 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69da      	ldr	r2, [r3, #28]
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	431a      	orrs	r2, r3
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9c:	019b      	lsls	r3, r3, #6
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aa4:	085b      	lsrs	r3, r3, #1
 8004aa6:	3b01      	subs	r3, #1
 8004aa8:	041b      	lsls	r3, r3, #16
 8004aaa:	431a      	orrs	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ab0:	061b      	lsls	r3, r3, #24
 8004ab2:	491b      	ldr	r1, [pc, #108]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004ab4:	4313      	orrs	r3, r2
 8004ab6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ab8:	4b1b      	ldr	r3, [pc, #108]	; (8004b28 <HAL_RCC_OscConfig+0x478>)
 8004aba:	2201      	movs	r2, #1
 8004abc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004abe:	f7fd fa91 	bl	8001fe4 <HAL_GetTick>
 8004ac2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ac4:	e008      	b.n	8004ad8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004ac6:	f7fd fa8d 	bl	8001fe4 <HAL_GetTick>
 8004aca:	4602      	mov	r2, r0
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	1ad3      	subs	r3, r2, r3
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d901      	bls.n	8004ad8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ad4:	2303      	movs	r3, #3
 8004ad6:	e05c      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ad8:	4b11      	ldr	r3, [pc, #68]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d0f0      	beq.n	8004ac6 <HAL_RCC_OscConfig+0x416>
 8004ae4:	e054      	b.n	8004b90 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ae6:	4b10      	ldr	r3, [pc, #64]	; (8004b28 <HAL_RCC_OscConfig+0x478>)
 8004ae8:	2200      	movs	r2, #0
 8004aea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004aec:	f7fd fa7a 	bl	8001fe4 <HAL_GetTick>
 8004af0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004af2:	e008      	b.n	8004b06 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004af4:	f7fd fa76 	bl	8001fe4 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	693b      	ldr	r3, [r7, #16]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	2b02      	cmp	r3, #2
 8004b00:	d901      	bls.n	8004b06 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004b02:	2303      	movs	r3, #3
 8004b04:	e045      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b06:	4b06      	ldr	r3, [pc, #24]	; (8004b20 <HAL_RCC_OscConfig+0x470>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d1f0      	bne.n	8004af4 <HAL_RCC_OscConfig+0x444>
 8004b12:	e03d      	b.n	8004b90 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	699b      	ldr	r3, [r3, #24]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d107      	bne.n	8004b2c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e038      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40007000 	.word	0x40007000
 8004b28:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004b2c:	4b1b      	ldr	r3, [pc, #108]	; (8004b9c <HAL_RCC_OscConfig+0x4ec>)
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	699b      	ldr	r3, [r3, #24]
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d028      	beq.n	8004b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004b44:	429a      	cmp	r2, r3
 8004b46:	d121      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004b52:	429a      	cmp	r2, r3
 8004b54:	d11a      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b56:	68fa      	ldr	r2, [r7, #12]
 8004b58:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b62:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d111      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b72:	085b      	lsrs	r3, r3, #1
 8004b74:	3b01      	subs	r3, #1
 8004b76:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004b78:	429a      	cmp	r2, r3
 8004b7a:	d107      	bne.n	8004b8c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b86:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004b88:	429a      	cmp	r2, r3
 8004b8a:	d001      	beq.n	8004b90 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	e000      	b.n	8004b92 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004b90:	2300      	movs	r3, #0
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3718      	adds	r7, #24
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	40023800 	.word	0x40023800

08004ba0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
 8004ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d101      	bne.n	8004bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e0cc      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bb4:	4b68      	ldr	r3, [pc, #416]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f003 0307 	and.w	r3, r3, #7
 8004bbc:	683a      	ldr	r2, [r7, #0]
 8004bbe:	429a      	cmp	r2, r3
 8004bc0:	d90c      	bls.n	8004bdc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004bc2:	4b65      	ldr	r3, [pc, #404]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bc4:	683a      	ldr	r2, [r7, #0]
 8004bc6:	b2d2      	uxtb	r2, r2
 8004bc8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004bca:	4b63      	ldr	r3, [pc, #396]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f003 0307 	and.w	r3, r3, #7
 8004bd2:	683a      	ldr	r2, [r7, #0]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d001      	beq.n	8004bdc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004bd8:	2301      	movs	r3, #1
 8004bda:	e0b8      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d020      	beq.n	8004c2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d005      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bf4:	4b59      	ldr	r3, [pc, #356]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bf6:	689b      	ldr	r3, [r3, #8]
 8004bf8:	4a58      	ldr	r2, [pc, #352]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004bfa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bfe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0308 	and.w	r3, r3, #8
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d005      	beq.n	8004c18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c0c:	4b53      	ldr	r3, [pc, #332]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	4a52      	ldr	r2, [pc, #328]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004c16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c18:	4b50      	ldr	r3, [pc, #320]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c1a:	689b      	ldr	r3, [r3, #8]
 8004c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	494d      	ldr	r1, [pc, #308]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f003 0301 	and.w	r3, r3, #1
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d044      	beq.n	8004cc0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	2b01      	cmp	r3, #1
 8004c3c:	d107      	bne.n	8004c4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c3e:	4b47      	ldr	r3, [pc, #284]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d119      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	e07f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	685b      	ldr	r3, [r3, #4]
 8004c52:	2b02      	cmp	r3, #2
 8004c54:	d003      	beq.n	8004c5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c5a:	2b03      	cmp	r3, #3
 8004c5c:	d107      	bne.n	8004c6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c5e:	4b3f      	ldr	r3, [pc, #252]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d109      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	e06f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6e:	4b3b      	ldr	r3, [pc, #236]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0302 	and.w	r3, r3, #2
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e067      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c7e:	4b37      	ldr	r3, [pc, #220]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	f023 0203 	bic.w	r2, r3, #3
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	685b      	ldr	r3, [r3, #4]
 8004c8a:	4934      	ldr	r1, [pc, #208]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004c90:	f7fd f9a8 	bl	8001fe4 <HAL_GetTick>
 8004c94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c96:	e00a      	b.n	8004cae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c98:	f7fd f9a4 	bl	8001fe4 <HAL_GetTick>
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	1ad3      	subs	r3, r2, r3
 8004ca2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d901      	bls.n	8004cae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e04f      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004cae:	4b2b      	ldr	r3, [pc, #172]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	f003 020c 	and.w	r2, r3, #12
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d1eb      	bne.n	8004c98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004cc0:	4b25      	ldr	r3, [pc, #148]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0307 	and.w	r3, r3, #7
 8004cc8:	683a      	ldr	r2, [r7, #0]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d20c      	bcs.n	8004ce8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004cce:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd0:	683a      	ldr	r2, [r7, #0]
 8004cd2:	b2d2      	uxtb	r2, r2
 8004cd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cd6:	4b20      	ldr	r3, [pc, #128]	; (8004d58 <HAL_RCC_ClockConfig+0x1b8>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	683a      	ldr	r2, [r7, #0]
 8004ce0:	429a      	cmp	r2, r3
 8004ce2:	d001      	beq.n	8004ce8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e032      	b.n	8004d4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0304 	and.w	r3, r3, #4
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d008      	beq.n	8004d06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cf4:	4b19      	ldr	r3, [pc, #100]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	68db      	ldr	r3, [r3, #12]
 8004d00:	4916      	ldr	r1, [pc, #88]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d02:	4313      	orrs	r3, r2
 8004d04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d009      	beq.n	8004d26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d14:	689b      	ldr	r3, [r3, #8]
 8004d16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	00db      	lsls	r3, r3, #3
 8004d20:	490e      	ldr	r1, [pc, #56]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d22:	4313      	orrs	r3, r2
 8004d24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004d26:	f000 f821 	bl	8004d6c <HAL_RCC_GetSysClockFreq>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	4b0b      	ldr	r3, [pc, #44]	; (8004d5c <HAL_RCC_ClockConfig+0x1bc>)
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	091b      	lsrs	r3, r3, #4
 8004d32:	f003 030f 	and.w	r3, r3, #15
 8004d36:	490a      	ldr	r1, [pc, #40]	; (8004d60 <HAL_RCC_ClockConfig+0x1c0>)
 8004d38:	5ccb      	ldrb	r3, [r1, r3]
 8004d3a:	fa22 f303 	lsr.w	r3, r2, r3
 8004d3e:	4a09      	ldr	r2, [pc, #36]	; (8004d64 <HAL_RCC_ClockConfig+0x1c4>)
 8004d40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_RCC_ClockConfig+0x1c8>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	4618      	mov	r0, r3
 8004d48:	f7fd f908 	bl	8001f5c <HAL_InitTick>

  return HAL_OK;
 8004d4c:	2300      	movs	r3, #0
}
 8004d4e:	4618      	mov	r0, r3
 8004d50:	3710      	adds	r7, #16
 8004d52:	46bd      	mov	sp, r7
 8004d54:	bd80      	pop	{r7, pc}
 8004d56:	bf00      	nop
 8004d58:	40023c00 	.word	0x40023c00
 8004d5c:	40023800 	.word	0x40023800
 8004d60:	08009a30 	.word	0x08009a30
 8004d64:	20000020 	.word	0x20000020
 8004d68:	20000024 	.word	0x20000024

08004d6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d70:	b094      	sub	sp, #80	; 0x50
 8004d72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004d74:	2300      	movs	r3, #0
 8004d76:	647b      	str	r3, [r7, #68]	; 0x44
 8004d78:	2300      	movs	r3, #0
 8004d7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004d80:	2300      	movs	r3, #0
 8004d82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d84:	4b79      	ldr	r3, [pc, #484]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	f003 030c 	and.w	r3, r3, #12
 8004d8c:	2b08      	cmp	r3, #8
 8004d8e:	d00d      	beq.n	8004dac <HAL_RCC_GetSysClockFreq+0x40>
 8004d90:	2b08      	cmp	r3, #8
 8004d92:	f200 80e1 	bhi.w	8004f58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_RCC_GetSysClockFreq+0x34>
 8004d9a:	2b04      	cmp	r3, #4
 8004d9c:	d003      	beq.n	8004da6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004d9e:	e0db      	b.n	8004f58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004da0:	4b73      	ldr	r3, [pc, #460]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004da2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004da4:	e0db      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004da6:	4b73      	ldr	r3, [pc, #460]	; (8004f74 <HAL_RCC_GetSysClockFreq+0x208>)
 8004da8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004daa:	e0d8      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004db4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004db6:	4b6d      	ldr	r3, [pc, #436]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d063      	beq.n	8004e8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	099b      	lsrs	r3, r3, #6
 8004dc8:	2200      	movs	r2, #0
 8004dca:	63bb      	str	r3, [r7, #56]	; 0x38
 8004dcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004dd4:	633b      	str	r3, [r7, #48]	; 0x30
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	637b      	str	r3, [r7, #52]	; 0x34
 8004dda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004dde:	4622      	mov	r2, r4
 8004de0:	462b      	mov	r3, r5
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f04f 0100 	mov.w	r1, #0
 8004dea:	0159      	lsls	r1, r3, #5
 8004dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004df0:	0150      	lsls	r0, r2, #5
 8004df2:	4602      	mov	r2, r0
 8004df4:	460b      	mov	r3, r1
 8004df6:	4621      	mov	r1, r4
 8004df8:	1a51      	subs	r1, r2, r1
 8004dfa:	6139      	str	r1, [r7, #16]
 8004dfc:	4629      	mov	r1, r5
 8004dfe:	eb63 0301 	sbc.w	r3, r3, r1
 8004e02:	617b      	str	r3, [r7, #20]
 8004e04:	f04f 0200 	mov.w	r2, #0
 8004e08:	f04f 0300 	mov.w	r3, #0
 8004e0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004e10:	4659      	mov	r1, fp
 8004e12:	018b      	lsls	r3, r1, #6
 8004e14:	4651      	mov	r1, sl
 8004e16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004e1a:	4651      	mov	r1, sl
 8004e1c:	018a      	lsls	r2, r1, #6
 8004e1e:	4651      	mov	r1, sl
 8004e20:	ebb2 0801 	subs.w	r8, r2, r1
 8004e24:	4659      	mov	r1, fp
 8004e26:	eb63 0901 	sbc.w	r9, r3, r1
 8004e2a:	f04f 0200 	mov.w	r2, #0
 8004e2e:	f04f 0300 	mov.w	r3, #0
 8004e32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e3e:	4690      	mov	r8, r2
 8004e40:	4699      	mov	r9, r3
 8004e42:	4623      	mov	r3, r4
 8004e44:	eb18 0303 	adds.w	r3, r8, r3
 8004e48:	60bb      	str	r3, [r7, #8]
 8004e4a:	462b      	mov	r3, r5
 8004e4c:	eb49 0303 	adc.w	r3, r9, r3
 8004e50:	60fb      	str	r3, [r7, #12]
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e5e:	4629      	mov	r1, r5
 8004e60:	024b      	lsls	r3, r1, #9
 8004e62:	4621      	mov	r1, r4
 8004e64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e68:	4621      	mov	r1, r4
 8004e6a:	024a      	lsls	r2, r1, #9
 8004e6c:	4610      	mov	r0, r2
 8004e6e:	4619      	mov	r1, r3
 8004e70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e72:	2200      	movs	r2, #0
 8004e74:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e7c:	f7fb f9ac 	bl	80001d8 <__aeabi_uldivmod>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4613      	mov	r3, r2
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e88:	e058      	b.n	8004f3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e8a:	4b38      	ldr	r3, [pc, #224]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	099b      	lsrs	r3, r3, #6
 8004e90:	2200      	movs	r2, #0
 8004e92:	4618      	mov	r0, r3
 8004e94:	4611      	mov	r1, r2
 8004e96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e9a:	623b      	str	r3, [r7, #32]
 8004e9c:	2300      	movs	r3, #0
 8004e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8004ea0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	f04f 0000 	mov.w	r0, #0
 8004eac:	f04f 0100 	mov.w	r1, #0
 8004eb0:	0159      	lsls	r1, r3, #5
 8004eb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004eb6:	0150      	lsls	r0, r2, #5
 8004eb8:	4602      	mov	r2, r0
 8004eba:	460b      	mov	r3, r1
 8004ebc:	4641      	mov	r1, r8
 8004ebe:	ebb2 0a01 	subs.w	sl, r2, r1
 8004ec2:	4649      	mov	r1, r9
 8004ec4:	eb63 0b01 	sbc.w	fp, r3, r1
 8004ec8:	f04f 0200 	mov.w	r2, #0
 8004ecc:	f04f 0300 	mov.w	r3, #0
 8004ed0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004ed4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004ed8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004edc:	ebb2 040a 	subs.w	r4, r2, sl
 8004ee0:	eb63 050b 	sbc.w	r5, r3, fp
 8004ee4:	f04f 0200 	mov.w	r2, #0
 8004ee8:	f04f 0300 	mov.w	r3, #0
 8004eec:	00eb      	lsls	r3, r5, #3
 8004eee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ef2:	00e2      	lsls	r2, r4, #3
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	461d      	mov	r5, r3
 8004ef8:	4643      	mov	r3, r8
 8004efa:	18e3      	adds	r3, r4, r3
 8004efc:	603b      	str	r3, [r7, #0]
 8004efe:	464b      	mov	r3, r9
 8004f00:	eb45 0303 	adc.w	r3, r5, r3
 8004f04:	607b      	str	r3, [r7, #4]
 8004f06:	f04f 0200 	mov.w	r2, #0
 8004f0a:	f04f 0300 	mov.w	r3, #0
 8004f0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004f12:	4629      	mov	r1, r5
 8004f14:	028b      	lsls	r3, r1, #10
 8004f16:	4621      	mov	r1, r4
 8004f18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004f1c:	4621      	mov	r1, r4
 8004f1e:	028a      	lsls	r2, r1, #10
 8004f20:	4610      	mov	r0, r2
 8004f22:	4619      	mov	r1, r3
 8004f24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004f26:	2200      	movs	r2, #0
 8004f28:	61bb      	str	r3, [r7, #24]
 8004f2a:	61fa      	str	r2, [r7, #28]
 8004f2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004f30:	f7fb f952 	bl	80001d8 <__aeabi_uldivmod>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	4613      	mov	r3, r2
 8004f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	0c1b      	lsrs	r3, r3, #16
 8004f42:	f003 0303 	and.w	r3, r3, #3
 8004f46:	3301      	adds	r3, #1
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004f4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f56:	e002      	b.n	8004f5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f58:	4b05      	ldr	r3, [pc, #20]	; (8004f70 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f60:	4618      	mov	r0, r3
 8004f62:	3750      	adds	r7, #80	; 0x50
 8004f64:	46bd      	mov	sp, r7
 8004f66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f6a:	bf00      	nop
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	00f42400 	.word	0x00f42400
 8004f74:	007a1200 	.word	0x007a1200

08004f78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f7c:	4b03      	ldr	r3, [pc, #12]	; (8004f8c <HAL_RCC_GetHCLKFreq+0x14>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	46bd      	mov	sp, r7
 8004f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f88:	4770      	bx	lr
 8004f8a:	bf00      	nop
 8004f8c:	20000020 	.word	0x20000020

08004f90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004f94:	f7ff fff0 	bl	8004f78 <HAL_RCC_GetHCLKFreq>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	4b05      	ldr	r3, [pc, #20]	; (8004fb0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	0a9b      	lsrs	r3, r3, #10
 8004fa0:	f003 0307 	and.w	r3, r3, #7
 8004fa4:	4903      	ldr	r1, [pc, #12]	; (8004fb4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004fa6:	5ccb      	ldrb	r3, [r1, r3]
 8004fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	bd80      	pop	{r7, pc}
 8004fb0:	40023800 	.word	0x40023800
 8004fb4:	08009a40 	.word	0x08009a40

08004fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004fb8:	b580      	push	{r7, lr}
 8004fba:	b086      	sub	sp, #24
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0301 	and.w	r3, r3, #1
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d105      	bne.n	8004fe0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d038      	beq.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004fe0:	4b68      	ldr	r3, [pc, #416]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004fe6:	f7fc fffd 	bl	8001fe4 <HAL_GetTick>
 8004fea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004fec:	e008      	b.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004fee:	f7fc fff9 	bl	8001fe4 <HAL_GetTick>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	1ad3      	subs	r3, r2, r3
 8004ff8:	2b02      	cmp	r3, #2
 8004ffa:	d901      	bls.n	8005000 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004ffc:	2303      	movs	r3, #3
 8004ffe:	e0bd      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005000:	4b61      	ldr	r3, [pc, #388]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005008:	2b00      	cmp	r3, #0
 800500a:	d1f0      	bne.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	685a      	ldr	r2, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	019b      	lsls	r3, r3, #6
 8005016:	431a      	orrs	r2, r3
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	071b      	lsls	r3, r3, #28
 800501e:	495a      	ldr	r1, [pc, #360]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005020:	4313      	orrs	r3, r2
 8005022:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005026:	4b57      	ldr	r3, [pc, #348]	; (8005184 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005028:	2201      	movs	r2, #1
 800502a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800502c:	f7fc ffda 	bl	8001fe4 <HAL_GetTick>
 8005030:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005032:	e008      	b.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005034:	f7fc ffd6 	bl	8001fe4 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e09a      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005046:	4b50      	ldr	r3, [pc, #320]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800504e:	2b00      	cmp	r3, #0
 8005050:	d0f0      	beq.n	8005034 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b00      	cmp	r3, #0
 800505c:	f000 8083 	beq.w	8005166 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005060:	2300      	movs	r3, #0
 8005062:	60fb      	str	r3, [r7, #12]
 8005064:	4b48      	ldr	r3, [pc, #288]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005068:	4a47      	ldr	r2, [pc, #284]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800506a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800506e:	6413      	str	r3, [r2, #64]	; 0x40
 8005070:	4b45      	ldr	r3, [pc, #276]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005074:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005078:	60fb      	str	r3, [r7, #12]
 800507a:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800507c:	4b43      	ldr	r3, [pc, #268]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	4a42      	ldr	r2, [pc, #264]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005082:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005086:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005088:	f7fc ffac 	bl	8001fe4 <HAL_GetTick>
 800508c:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800508e:	e008      	b.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005090:	f7fc ffa8 	bl	8001fe4 <HAL_GetTick>
 8005094:	4602      	mov	r2, r0
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	1ad3      	subs	r3, r2, r3
 800509a:	2b02      	cmp	r3, #2
 800509c:	d901      	bls.n	80050a2 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e06c      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80050a2:	4b3a      	ldr	r3, [pc, #232]	; (800518c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d0f0      	beq.n	8005090 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050ae:	4b36      	ldr	r3, [pc, #216]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050b6:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050b8:	693b      	ldr	r3, [r7, #16]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d02f      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x166>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	691b      	ldr	r3, [r3, #16]
 80050c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050c6:	693a      	ldr	r2, [r7, #16]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d028      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050cc:	4b2e      	ldr	r3, [pc, #184]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050d4:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050d6:	4b2e      	ldr	r3, [pc, #184]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050d8:	2201      	movs	r2, #1
 80050da:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050dc:	4b2c      	ldr	r3, [pc, #176]	; (8005190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80050e2:	4a29      	ldr	r2, [pc, #164]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e4:	693b      	ldr	r3, [r7, #16]
 80050e6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80050e8:	4b27      	ldr	r3, [pc, #156]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ec:	f003 0301 	and.w	r3, r3, #1
 80050f0:	2b01      	cmp	r3, #1
 80050f2:	d114      	bne.n	800511e <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80050f4:	f7fc ff76 	bl	8001fe4 <HAL_GetTick>
 80050f8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050fa:	e00a      	b.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80050fc:	f7fc ff72 	bl	8001fe4 <HAL_GetTick>
 8005100:	4602      	mov	r2, r0
 8005102:	697b      	ldr	r3, [r7, #20]
 8005104:	1ad3      	subs	r3, r2, r3
 8005106:	f241 3288 	movw	r2, #5000	; 0x1388
 800510a:	4293      	cmp	r3, r2
 800510c:	d901      	bls.n	8005112 <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800510e:	2303      	movs	r3, #3
 8005110:	e034      	b.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005112:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005116:	f003 0302 	and.w	r3, r3, #2
 800511a:	2b00      	cmp	r3, #0
 800511c:	d0ee      	beq.n	80050fc <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	691b      	ldr	r3, [r3, #16]
 8005122:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005126:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800512a:	d10d      	bne.n	8005148 <HAL_RCCEx_PeriphCLKConfig+0x190>
 800512c:	4b16      	ldr	r3, [pc, #88]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	691b      	ldr	r3, [r3, #16]
 8005138:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800513c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005140:	4911      	ldr	r1, [pc, #68]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005142:	4313      	orrs	r3, r2
 8005144:	608b      	str	r3, [r1, #8]
 8005146:	e005      	b.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005148:	4b0f      	ldr	r3, [pc, #60]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	4a0e      	ldr	r2, [pc, #56]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800514e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005152:	6093      	str	r3, [r2, #8]
 8005154:	4b0c      	ldr	r3, [pc, #48]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005156:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005160:	4909      	ldr	r1, [pc, #36]	; (8005188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0308 	and.w	r3, r3, #8
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	7d1a      	ldrb	r2, [r3, #20]
 8005176:	4b07      	ldr	r3, [pc, #28]	; (8005194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005178:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800517a:	2300      	movs	r3, #0
}
 800517c:	4618      	mov	r0, r3
 800517e:	3718      	adds	r7, #24
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}
 8005184:	42470068 	.word	0x42470068
 8005188:	40023800 	.word	0x40023800
 800518c:	40007000 	.word	0x40007000
 8005190:	42470e40 	.word	0x42470e40
 8005194:	424711e0 	.word	0x424711e0

08005198 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005198:	b480      	push	{r7}
 800519a:	b087      	sub	sp, #28
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80051a0:	2300      	movs	r3, #0
 80051a2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80051a4:	2300      	movs	r3, #0
 80051a6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80051a8:	2300      	movs	r3, #0
 80051aa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80051ac:	2300      	movs	r3, #0
 80051ae:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	2b01      	cmp	r3, #1
 80051b4:	d140      	bne.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80051b6:	4b24      	ldr	r3, [pc, #144]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80051be:	60fb      	str	r3, [r7, #12]
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d005      	beq.n	80051d2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d131      	bne.n	8005230 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80051cc:	4b1f      	ldr	r3, [pc, #124]	; (800524c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80051ce:	617b      	str	r3, [r7, #20]
          break;
 80051d0:	e031      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80051d2:	4b1d      	ldr	r3, [pc, #116]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80051de:	d109      	bne.n	80051f4 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051e0:	4b19      	ldr	r3, [pc, #100]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051ea:	4a19      	ldr	r2, [pc, #100]	; (8005250 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80051ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80051f0:	613b      	str	r3, [r7, #16]
 80051f2:	e008      	b.n	8005206 <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80051f4:	4b14      	ldr	r3, [pc, #80]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80051f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051fa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80051fe:	4a15      	ldr	r2, [pc, #84]	; (8005254 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005200:	fbb2 f3f3 	udiv	r3, r2, r3
 8005204:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005206:	4b10      	ldr	r3, [pc, #64]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005208:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800520c:	099b      	lsrs	r3, r3, #6
 800520e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005212:	693b      	ldr	r3, [r7, #16]
 8005214:	fb02 f303 	mul.w	r3, r2, r3
 8005218:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800521a:	4b0b      	ldr	r3, [pc, #44]	; (8005248 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800521c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005220:	0f1b      	lsrs	r3, r3, #28
 8005222:	f003 0307 	and.w	r3, r3, #7
 8005226:	68ba      	ldr	r2, [r7, #8]
 8005228:	fbb2 f3f3 	udiv	r3, r2, r3
 800522c:	617b      	str	r3, [r7, #20]
          break;
 800522e:	e002      	b.n	8005236 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005230:	2300      	movs	r3, #0
 8005232:	617b      	str	r3, [r7, #20]
          break;
 8005234:	bf00      	nop
        }
      }
      break;
 8005236:	bf00      	nop
    }
  }
  return frequency;
 8005238:	697b      	ldr	r3, [r7, #20]
}
 800523a:	4618      	mov	r0, r3
 800523c:	371c      	adds	r7, #28
 800523e:	46bd      	mov	sp, r7
 8005240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005244:	4770      	bx	lr
 8005246:	bf00      	nop
 8005248:	40023800 	.word	0x40023800
 800524c:	00bb8000 	.word	0x00bb8000
 8005250:	007a1200 	.word	0x007a1200
 8005254:	00f42400 	.word	0x00f42400

08005258 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b082      	sub	sp, #8
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d101      	bne.n	800526a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005266:	2301      	movs	r3, #1
 8005268:	e07b      	b.n	8005362 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800526e:	2b00      	cmp	r3, #0
 8005270:	d108      	bne.n	8005284 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	685b      	ldr	r3, [r3, #4]
 8005276:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800527a:	d009      	beq.n	8005290 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2200      	movs	r2, #0
 8005280:	61da      	str	r2, [r3, #28]
 8005282:	e005      	b.n	8005290 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2200      	movs	r2, #0
 8005288:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800529c:	b2db      	uxtb	r3, r3
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d106      	bne.n	80052b0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80052aa:	6878      	ldr	r0, [r7, #4]
 80052ac:	f7fc fd38 	bl	8001d20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052c6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	685b      	ldr	r3, [r3, #4]
 80052cc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80052d8:	431a      	orrs	r2, r3
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052e2:	431a      	orrs	r2, r3
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	431a      	orrs	r2, r3
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	695b      	ldr	r3, [r3, #20]
 80052f2:	f003 0301 	and.w	r3, r3, #1
 80052f6:	431a      	orrs	r2, r3
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	699b      	ldr	r3, [r3, #24]
 80052fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005300:	431a      	orrs	r2, r3
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	69db      	ldr	r3, [r3, #28]
 8005306:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800530a:	431a      	orrs	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	ea42 0103 	orr.w	r1, r2, r3
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	430a      	orrs	r2, r1
 8005326:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	699b      	ldr	r3, [r3, #24]
 800532c:	0c1b      	lsrs	r3, r3, #16
 800532e:	f003 0104 	and.w	r1, r3, #4
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005336:	f003 0210 	and.w	r2, r3, #16
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	430a      	orrs	r2, r1
 8005340:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	69da      	ldr	r2, [r3, #28]
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005350:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2201      	movs	r2, #1
 800535c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005360:	2300      	movs	r3, #0
}
 8005362:	4618      	mov	r0, r3
 8005364:	3708      	adds	r7, #8
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b088      	sub	sp, #32
 800536e:	af00      	add	r7, sp, #0
 8005370:	60f8      	str	r0, [r7, #12]
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	603b      	str	r3, [r7, #0]
 8005376:	4613      	mov	r3, r2
 8005378:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800537a:	2300      	movs	r3, #0
 800537c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005384:	2b01      	cmp	r3, #1
 8005386:	d101      	bne.n	800538c <HAL_SPI_Transmit+0x22>
 8005388:	2302      	movs	r3, #2
 800538a:	e126      	b.n	80055da <HAL_SPI_Transmit+0x270>
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2201      	movs	r2, #1
 8005390:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005394:	f7fc fe26 	bl	8001fe4 <HAL_GetTick>
 8005398:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80053a4:	b2db      	uxtb	r3, r3
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d002      	beq.n	80053b0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80053aa:	2302      	movs	r3, #2
 80053ac:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053ae:	e10b      	b.n	80055c8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d002      	beq.n	80053bc <HAL_SPI_Transmit+0x52>
 80053b6:	88fb      	ldrh	r3, [r7, #6]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d102      	bne.n	80053c2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	77fb      	strb	r3, [r7, #31]
    goto error;
 80053c0:	e102      	b.n	80055c8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2203      	movs	r2, #3
 80053c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	88fa      	ldrh	r2, [r7, #6]
 80053da:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	88fa      	ldrh	r2, [r7, #6]
 80053e0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	2200      	movs	r2, #0
 80053e6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2200      	movs	r2, #0
 80053ec:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	2200      	movs	r2, #0
 80053f2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2200      	movs	r2, #0
 80053fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005408:	d10f      	bne.n	800542a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681a      	ldr	r2, [r3, #0]
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005418:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	681a      	ldr	r2, [r3, #0]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005428:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b40      	cmp	r3, #64	; 0x40
 8005436:	d007      	beq.n	8005448 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	681a      	ldr	r2, [r3, #0]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005446:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	68db      	ldr	r3, [r3, #12]
 800544c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005450:	d14b      	bne.n	80054ea <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d002      	beq.n	8005460 <HAL_SPI_Transmit+0xf6>
 800545a:	8afb      	ldrh	r3, [r7, #22]
 800545c:	2b01      	cmp	r3, #1
 800545e:	d13e      	bne.n	80054de <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005464:	881a      	ldrh	r2, [r3, #0]
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005470:	1c9a      	adds	r2, r3, #2
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800547a:	b29b      	uxth	r3, r3
 800547c:	3b01      	subs	r3, #1
 800547e:	b29a      	uxth	r2, r3
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005484:	e02b      	b.n	80054de <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	689b      	ldr	r3, [r3, #8]
 800548c:	f003 0302 	and.w	r3, r3, #2
 8005490:	2b02      	cmp	r3, #2
 8005492:	d112      	bne.n	80054ba <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005498:	881a      	ldrh	r2, [r3, #0]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a4:	1c9a      	adds	r2, r3, #2
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054ae:	b29b      	uxth	r3, r3
 80054b0:	3b01      	subs	r3, #1
 80054b2:	b29a      	uxth	r2, r3
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	86da      	strh	r2, [r3, #54]	; 0x36
 80054b8:	e011      	b.n	80054de <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80054ba:	f7fc fd93 	bl	8001fe4 <HAL_GetTick>
 80054be:	4602      	mov	r2, r0
 80054c0:	69bb      	ldr	r3, [r7, #24]
 80054c2:	1ad3      	subs	r3, r2, r3
 80054c4:	683a      	ldr	r2, [r7, #0]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d803      	bhi.n	80054d2 <HAL_SPI_Transmit+0x168>
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054d0:	d102      	bne.n	80054d8 <HAL_SPI_Transmit+0x16e>
 80054d2:	683b      	ldr	r3, [r7, #0]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d102      	bne.n	80054de <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80054d8:	2303      	movs	r3, #3
 80054da:	77fb      	strb	r3, [r7, #31]
          goto error;
 80054dc:	e074      	b.n	80055c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80054e2:	b29b      	uxth	r3, r3
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d1ce      	bne.n	8005486 <HAL_SPI_Transmit+0x11c>
 80054e8:	e04c      	b.n	8005584 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d002      	beq.n	80054f8 <HAL_SPI_Transmit+0x18e>
 80054f2:	8afb      	ldrh	r3, [r7, #22]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d140      	bne.n	800557a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	330c      	adds	r3, #12
 8005502:	7812      	ldrb	r2, [r2, #0]
 8005504:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800550a:	1c5a      	adds	r2, r3, #1
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005514:	b29b      	uxth	r3, r3
 8005516:	3b01      	subs	r3, #1
 8005518:	b29a      	uxth	r2, r3
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800551e:	e02c      	b.n	800557a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 0302 	and.w	r3, r3, #2
 800552a:	2b02      	cmp	r3, #2
 800552c:	d113      	bne.n	8005556 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	330c      	adds	r3, #12
 8005538:	7812      	ldrb	r2, [r2, #0]
 800553a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005540:	1c5a      	adds	r2, r3, #1
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800554a:	b29b      	uxth	r3, r3
 800554c:	3b01      	subs	r3, #1
 800554e:	b29a      	uxth	r2, r3
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	86da      	strh	r2, [r3, #54]	; 0x36
 8005554:	e011      	b.n	800557a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005556:	f7fc fd45 	bl	8001fe4 <HAL_GetTick>
 800555a:	4602      	mov	r2, r0
 800555c:	69bb      	ldr	r3, [r7, #24]
 800555e:	1ad3      	subs	r3, r2, r3
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	429a      	cmp	r2, r3
 8005564:	d803      	bhi.n	800556e <HAL_SPI_Transmit+0x204>
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800556c:	d102      	bne.n	8005574 <HAL_SPI_Transmit+0x20a>
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	2b00      	cmp	r3, #0
 8005572:	d102      	bne.n	800557a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005574:	2303      	movs	r3, #3
 8005576:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005578:	e026      	b.n	80055c8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800557e:	b29b      	uxth	r3, r3
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1cd      	bne.n	8005520 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005584:	69ba      	ldr	r2, [r7, #24]
 8005586:	6839      	ldr	r1, [r7, #0]
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f8b3 	bl	80056f4 <SPI_EndRxTxTransaction>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d002      	beq.n	800559a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2220      	movs	r2, #32
 8005598:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80055a2:	2300      	movs	r3, #0
 80055a4:	613b      	str	r3, [r7, #16]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	68db      	ldr	r3, [r3, #12]
 80055ac:	613b      	str	r3, [r7, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	613b      	str	r3, [r7, #16]
 80055b6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d002      	beq.n	80055c6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	77fb      	strb	r3, [r7, #31]
 80055c4:	e000      	b.n	80055c8 <HAL_SPI_Transmit+0x25e>
  }

error:
 80055c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	2201      	movs	r2, #1
 80055cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	2200      	movs	r2, #0
 80055d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80055d8:	7ffb      	ldrb	r3, [r7, #31]
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3720      	adds	r7, #32
 80055de:	46bd      	mov	sp, r7
 80055e0:	bd80      	pop	{r7, pc}
	...

080055e4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b088      	sub	sp, #32
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80055f4:	f7fc fcf6 	bl	8001fe4 <HAL_GetTick>
 80055f8:	4602      	mov	r2, r0
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	1a9b      	subs	r3, r3, r2
 80055fe:	683a      	ldr	r2, [r7, #0]
 8005600:	4413      	add	r3, r2
 8005602:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005604:	f7fc fcee 	bl	8001fe4 <HAL_GetTick>
 8005608:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800560a:	4b39      	ldr	r3, [pc, #228]	; (80056f0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	015b      	lsls	r3, r3, #5
 8005610:	0d1b      	lsrs	r3, r3, #20
 8005612:	69fa      	ldr	r2, [r7, #28]
 8005614:	fb02 f303 	mul.w	r3, r2, r3
 8005618:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800561a:	e054      	b.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005622:	d050      	beq.n	80056c6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005624:	f7fc fcde 	bl	8001fe4 <HAL_GetTick>
 8005628:	4602      	mov	r2, r0
 800562a:	69bb      	ldr	r3, [r7, #24]
 800562c:	1ad3      	subs	r3, r2, r3
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	429a      	cmp	r2, r3
 8005632:	d902      	bls.n	800563a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005634:	69fb      	ldr	r3, [r7, #28]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d13d      	bne.n	80056b6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005648:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005652:	d111      	bne.n	8005678 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800565c:	d004      	beq.n	8005668 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	689b      	ldr	r3, [r3, #8]
 8005662:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005666:	d107      	bne.n	8005678 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005676:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800567c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005680:	d10f      	bne.n	80056a2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005690:	601a      	str	r2, [r3, #0]
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681a      	ldr	r2, [r3, #0]
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056a0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	2200      	movs	r2, #0
 80056ae:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80056b2:	2303      	movs	r3, #3
 80056b4:	e017      	b.n	80056e6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d101      	bne.n	80056c0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80056bc:	2300      	movs	r3, #0
 80056be:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	3b01      	subs	r3, #1
 80056c4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	689a      	ldr	r2, [r3, #8]
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	4013      	ands	r3, r2
 80056d0:	68ba      	ldr	r2, [r7, #8]
 80056d2:	429a      	cmp	r2, r3
 80056d4:	bf0c      	ite	eq
 80056d6:	2301      	moveq	r3, #1
 80056d8:	2300      	movne	r3, #0
 80056da:	b2db      	uxtb	r3, r3
 80056dc:	461a      	mov	r2, r3
 80056de:	79fb      	ldrb	r3, [r7, #7]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d19b      	bne.n	800561c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80056e4:	2300      	movs	r3, #0
}
 80056e6:	4618      	mov	r0, r3
 80056e8:	3720      	adds	r7, #32
 80056ea:	46bd      	mov	sp, r7
 80056ec:	bd80      	pop	{r7, pc}
 80056ee:	bf00      	nop
 80056f0:	20000020 	.word	0x20000020

080056f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80056f4:	b580      	push	{r7, lr}
 80056f6:	b088      	sub	sp, #32
 80056f8:	af02      	add	r7, sp, #8
 80056fa:	60f8      	str	r0, [r7, #12]
 80056fc:	60b9      	str	r1, [r7, #8]
 80056fe:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005700:	4b1b      	ldr	r3, [pc, #108]	; (8005770 <SPI_EndRxTxTransaction+0x7c>)
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	4a1b      	ldr	r2, [pc, #108]	; (8005774 <SPI_EndRxTxTransaction+0x80>)
 8005706:	fba2 2303 	umull	r2, r3, r2, r3
 800570a:	0d5b      	lsrs	r3, r3, #21
 800570c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005710:	fb02 f303 	mul.w	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800571e:	d112      	bne.n	8005746 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	9300      	str	r3, [sp, #0]
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	2200      	movs	r2, #0
 8005728:	2180      	movs	r1, #128	; 0x80
 800572a:	68f8      	ldr	r0, [r7, #12]
 800572c:	f7ff ff5a 	bl	80055e4 <SPI_WaitFlagStateUntilTimeout>
 8005730:	4603      	mov	r3, r0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d016      	beq.n	8005764 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800573a:	f043 0220 	orr.w	r2, r3, #32
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e00f      	b.n	8005766 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d00a      	beq.n	8005762 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	3b01      	subs	r3, #1
 8005750:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	689b      	ldr	r3, [r3, #8]
 8005758:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800575c:	2b80      	cmp	r3, #128	; 0x80
 800575e:	d0f2      	beq.n	8005746 <SPI_EndRxTxTransaction+0x52>
 8005760:	e000      	b.n	8005764 <SPI_EndRxTxTransaction+0x70>
        break;
 8005762:	bf00      	nop
  }

  return HAL_OK;
 8005764:	2300      	movs	r3, #0
}
 8005766:	4618      	mov	r0, r3
 8005768:	3718      	adds	r7, #24
 800576a:	46bd      	mov	sp, r7
 800576c:	bd80      	pop	{r7, pc}
 800576e:	bf00      	nop
 8005770:	20000020 	.word	0x20000020
 8005774:	165e9f81 	.word	0x165e9f81

08005778 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005778:	b084      	sub	sp, #16
 800577a:	b580      	push	{r7, lr}
 800577c:	b084      	sub	sp, #16
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
 8005782:	f107 001c 	add.w	r0, r7, #28
 8005786:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800578a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800578c:	2b01      	cmp	r3, #1
 800578e:	d122      	bne.n	80057d6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005794:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057a8:	687a      	ldr	r2, [r7, #4]
 80057aa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ba:	2b01      	cmp	r3, #1
 80057bc:	d105      	bne.n	80057ca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68db      	ldr	r3, [r3, #12]
 80057c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 fbee 	bl	8006fac <USB_CoreReset>
 80057d0:	4603      	mov	r3, r0
 80057d2:	73fb      	strb	r3, [r7, #15]
 80057d4:	e01a      	b.n	800580c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f001 fbe2 	bl	8006fac <USB_CoreReset>
 80057e8:	4603      	mov	r3, r0
 80057ea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80057ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d106      	bne.n	8005800 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	639a      	str	r2, [r3, #56]	; 0x38
 80057fe:	e005      	b.n	800580c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005804:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800580c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800580e:	2b01      	cmp	r3, #1
 8005810:	d10b      	bne.n	800582a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f043 0206 	orr.w	r2, r3, #6
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f043 0220 	orr.w	r2, r3, #32
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800582a:	7bfb      	ldrb	r3, [r7, #15]
}
 800582c:	4618      	mov	r0, r3
 800582e:	3710      	adds	r7, #16
 8005830:	46bd      	mov	sp, r7
 8005832:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005836:	b004      	add	sp, #16
 8005838:	4770      	bx	lr
	...

0800583c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800583c:	b480      	push	{r7}
 800583e:	b087      	sub	sp, #28
 8005840:	af00      	add	r7, sp, #0
 8005842:	60f8      	str	r0, [r7, #12]
 8005844:	60b9      	str	r1, [r7, #8]
 8005846:	4613      	mov	r3, r2
 8005848:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800584a:	79fb      	ldrb	r3, [r7, #7]
 800584c:	2b02      	cmp	r3, #2
 800584e:	d165      	bne.n	800591c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	4a41      	ldr	r2, [pc, #260]	; (8005958 <USB_SetTurnaroundTime+0x11c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d906      	bls.n	8005866 <USB_SetTurnaroundTime+0x2a>
 8005858:	68bb      	ldr	r3, [r7, #8]
 800585a:	4a40      	ldr	r2, [pc, #256]	; (800595c <USB_SetTurnaroundTime+0x120>)
 800585c:	4293      	cmp	r3, r2
 800585e:	d202      	bcs.n	8005866 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8005860:	230f      	movs	r3, #15
 8005862:	617b      	str	r3, [r7, #20]
 8005864:	e062      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8005866:	68bb      	ldr	r3, [r7, #8]
 8005868:	4a3c      	ldr	r2, [pc, #240]	; (800595c <USB_SetTurnaroundTime+0x120>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d306      	bcc.n	800587c <USB_SetTurnaroundTime+0x40>
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4a3b      	ldr	r2, [pc, #236]	; (8005960 <USB_SetTurnaroundTime+0x124>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d202      	bcs.n	800587c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8005876:	230e      	movs	r3, #14
 8005878:	617b      	str	r3, [r7, #20]
 800587a:	e057      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4a38      	ldr	r2, [pc, #224]	; (8005960 <USB_SetTurnaroundTime+0x124>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d306      	bcc.n	8005892 <USB_SetTurnaroundTime+0x56>
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	4a37      	ldr	r2, [pc, #220]	; (8005964 <USB_SetTurnaroundTime+0x128>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d202      	bcs.n	8005892 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800588c:	230d      	movs	r3, #13
 800588e:	617b      	str	r3, [r7, #20]
 8005890:	e04c      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8005892:	68bb      	ldr	r3, [r7, #8]
 8005894:	4a33      	ldr	r2, [pc, #204]	; (8005964 <USB_SetTurnaroundTime+0x128>)
 8005896:	4293      	cmp	r3, r2
 8005898:	d306      	bcc.n	80058a8 <USB_SetTurnaroundTime+0x6c>
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	4a32      	ldr	r2, [pc, #200]	; (8005968 <USB_SetTurnaroundTime+0x12c>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d802      	bhi.n	80058a8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058a2:	230c      	movs	r3, #12
 80058a4:	617b      	str	r3, [r7, #20]
 80058a6:	e041      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4a2f      	ldr	r2, [pc, #188]	; (8005968 <USB_SetTurnaroundTime+0x12c>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d906      	bls.n	80058be <USB_SetTurnaroundTime+0x82>
 80058b0:	68bb      	ldr	r3, [r7, #8]
 80058b2:	4a2e      	ldr	r2, [pc, #184]	; (800596c <USB_SetTurnaroundTime+0x130>)
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d802      	bhi.n	80058be <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058b8:	230b      	movs	r3, #11
 80058ba:	617b      	str	r3, [r7, #20]
 80058bc:	e036      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	4a2a      	ldr	r2, [pc, #168]	; (800596c <USB_SetTurnaroundTime+0x130>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d906      	bls.n	80058d4 <USB_SetTurnaroundTime+0x98>
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4a29      	ldr	r2, [pc, #164]	; (8005970 <USB_SetTurnaroundTime+0x134>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d802      	bhi.n	80058d4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80058ce:	230a      	movs	r3, #10
 80058d0:	617b      	str	r3, [r7, #20]
 80058d2:	e02b      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	4a26      	ldr	r2, [pc, #152]	; (8005970 <USB_SetTurnaroundTime+0x134>)
 80058d8:	4293      	cmp	r3, r2
 80058da:	d906      	bls.n	80058ea <USB_SetTurnaroundTime+0xae>
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4a25      	ldr	r2, [pc, #148]	; (8005974 <USB_SetTurnaroundTime+0x138>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d202      	bcs.n	80058ea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80058e4:	2309      	movs	r3, #9
 80058e6:	617b      	str	r3, [r7, #20]
 80058e8:	e020      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	4a21      	ldr	r2, [pc, #132]	; (8005974 <USB_SetTurnaroundTime+0x138>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d306      	bcc.n	8005900 <USB_SetTurnaroundTime+0xc4>
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	4a20      	ldr	r2, [pc, #128]	; (8005978 <USB_SetTurnaroundTime+0x13c>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d802      	bhi.n	8005900 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80058fa:	2308      	movs	r3, #8
 80058fc:	617b      	str	r3, [r7, #20]
 80058fe:	e015      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	4a1d      	ldr	r2, [pc, #116]	; (8005978 <USB_SetTurnaroundTime+0x13c>)
 8005904:	4293      	cmp	r3, r2
 8005906:	d906      	bls.n	8005916 <USB_SetTurnaroundTime+0xda>
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	4a1c      	ldr	r2, [pc, #112]	; (800597c <USB_SetTurnaroundTime+0x140>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d202      	bcs.n	8005916 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005910:	2307      	movs	r3, #7
 8005912:	617b      	str	r3, [r7, #20]
 8005914:	e00a      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8005916:	2306      	movs	r3, #6
 8005918:	617b      	str	r3, [r7, #20]
 800591a:	e007      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800591c:	79fb      	ldrb	r3, [r7, #7]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d102      	bne.n	8005928 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005922:	2309      	movs	r3, #9
 8005924:	617b      	str	r3, [r7, #20]
 8005926:	e001      	b.n	800592c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005928:	2309      	movs	r3, #9
 800592a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68db      	ldr	r3, [r3, #12]
 8005930:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	68da      	ldr	r2, [r3, #12]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	029b      	lsls	r3, r3, #10
 8005940:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005944:	431a      	orrs	r2, r3
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	371c      	adds	r7, #28
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr
 8005958:	00d8acbf 	.word	0x00d8acbf
 800595c:	00e4e1c0 	.word	0x00e4e1c0
 8005960:	00f42400 	.word	0x00f42400
 8005964:	01067380 	.word	0x01067380
 8005968:	011a499f 	.word	0x011a499f
 800596c:	01312cff 	.word	0x01312cff
 8005970:	014ca43f 	.word	0x014ca43f
 8005974:	016e3600 	.word	0x016e3600
 8005978:	01a6ab1f 	.word	0x01a6ab1f
 800597c:	01e84800 	.word	0x01e84800

08005980 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005980:	b480      	push	{r7}
 8005982:	b083      	sub	sp, #12
 8005984:	af00      	add	r7, sp, #0
 8005986:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005994:	2300      	movs	r3, #0
}
 8005996:	4618      	mov	r0, r3
 8005998:	370c      	adds	r7, #12
 800599a:	46bd      	mov	sp, r7
 800599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059a2:	b480      	push	{r7}
 80059a4:	b083      	sub	sp, #12
 80059a6:	af00      	add	r7, sp, #0
 80059a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	689b      	ldr	r3, [r3, #8]
 80059ae:	f023 0201 	bic.w	r2, r3, #1
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b084      	sub	sp, #16
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
 80059cc:	460b      	mov	r3, r1
 80059ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80059d0:	2300      	movs	r3, #0
 80059d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	68db      	ldr	r3, [r3, #12]
 80059d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	2b01      	cmp	r3, #1
 80059e4:	d115      	bne.n	8005a12 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80059f2:	2001      	movs	r0, #1
 80059f4:	f7fc fb02 	bl	8001ffc <HAL_Delay>
      ms++;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	3301      	adds	r3, #1
 80059fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f001 fa45 	bl	8006e8e <USB_GetMode>
 8005a04:	4603      	mov	r3, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	d01e      	beq.n	8005a48 <USB_SetCurrentMode+0x84>
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2b31      	cmp	r3, #49	; 0x31
 8005a0e:	d9f0      	bls.n	80059f2 <USB_SetCurrentMode+0x2e>
 8005a10:	e01a      	b.n	8005a48 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a12:	78fb      	ldrb	r3, [r7, #3]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d115      	bne.n	8005a44 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a24:	2001      	movs	r0, #1
 8005a26:	f7fc fae9 	bl	8001ffc <HAL_Delay>
      ms++;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	3301      	adds	r3, #1
 8005a2e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f001 fa2c 	bl	8006e8e <USB_GetMode>
 8005a36:	4603      	mov	r3, r0
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <USB_SetCurrentMode+0x84>
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	2b31      	cmp	r3, #49	; 0x31
 8005a40:	d9f0      	bls.n	8005a24 <USB_SetCurrentMode+0x60>
 8005a42:	e001      	b.n	8005a48 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e005      	b.n	8005a54 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2b32      	cmp	r3, #50	; 0x32
 8005a4c:	d101      	bne.n	8005a52 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e000      	b.n	8005a54 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a52:	2300      	movs	r3, #0
}
 8005a54:	4618      	mov	r0, r3
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}

08005a5c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005a5c:	b084      	sub	sp, #16
 8005a5e:	b580      	push	{r7, lr}
 8005a60:	b086      	sub	sp, #24
 8005a62:	af00      	add	r7, sp, #0
 8005a64:	6078      	str	r0, [r7, #4]
 8005a66:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005a6a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005a76:	2300      	movs	r3, #0
 8005a78:	613b      	str	r3, [r7, #16]
 8005a7a:	e009      	b.n	8005a90 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005a7c:	687a      	ldr	r2, [r7, #4]
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	3340      	adds	r3, #64	; 0x40
 8005a82:	009b      	lsls	r3, r3, #2
 8005a84:	4413      	add	r3, r2
 8005a86:	2200      	movs	r2, #0
 8005a88:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005a8a:	693b      	ldr	r3, [r7, #16]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	613b      	str	r3, [r7, #16]
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b0e      	cmp	r3, #14
 8005a94:	d9f2      	bls.n	8005a7c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005a96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d11c      	bne.n	8005ad6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aaa:	f043 0302 	orr.w	r3, r3, #2
 8005aae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005acc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	639a      	str	r2, [r3, #56]	; 0x38
 8005ad4:	e00b      	b.n	8005aee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ada:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005af4:	461a      	mov	r2, r3
 8005af6:	2300      	movs	r3, #0
 8005af8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b00:	4619      	mov	r1, r3
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b08:	461a      	mov	r2, r3
 8005b0a:	680b      	ldr	r3, [r1, #0]
 8005b0c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d10c      	bne.n	8005b2e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d104      	bne.n	8005b24 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b1a:	2100      	movs	r1, #0
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f000 f965 	bl	8005dec <USB_SetDevSpeed>
 8005b22:	e008      	b.n	8005b36 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b24:	2101      	movs	r1, #1
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f960 	bl	8005dec <USB_SetDevSpeed>
 8005b2c:	e003      	b.n	8005b36 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b2e:	2103      	movs	r1, #3
 8005b30:	6878      	ldr	r0, [r7, #4]
 8005b32:	f000 f95b 	bl	8005dec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b36:	2110      	movs	r1, #16
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 f8f3 	bl	8005d24 <USB_FlushTxFifo>
 8005b3e:	4603      	mov	r3, r0
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d001      	beq.n	8005b48 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005b44:	2301      	movs	r3, #1
 8005b46:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b48:	6878      	ldr	r0, [r7, #4]
 8005b4a:	f000 f91f 	bl	8005d8c <USB_FlushRxFifo>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b5e:	461a      	mov	r2, r3
 8005b60:	2300      	movs	r3, #0
 8005b62:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b6a:	461a      	mov	r2, r3
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b76:	461a      	mov	r2, r3
 8005b78:	2300      	movs	r3, #0
 8005b7a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	613b      	str	r3, [r7, #16]
 8005b80:	e043      	b.n	8005c0a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	015a      	lsls	r2, r3, #5
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b94:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b98:	d118      	bne.n	8005bcc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d10a      	bne.n	8005bb6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005ba0:	693b      	ldr	r3, [r7, #16]
 8005ba2:	015a      	lsls	r2, r3, #5
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	4413      	add	r3, r2
 8005ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bac:	461a      	mov	r2, r3
 8005bae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bb2:	6013      	str	r3, [r2, #0]
 8005bb4:	e013      	b.n	8005bde <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	015a      	lsls	r2, r3, #5
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	4413      	add	r3, r2
 8005bbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005bc8:	6013      	str	r3, [r2, #0]
 8005bca:	e008      	b.n	8005bde <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005bcc:	693b      	ldr	r3, [r7, #16]
 8005bce:	015a      	lsls	r2, r3, #5
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	4413      	add	r3, r2
 8005bd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2300      	movs	r3, #0
 8005bdc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	015a      	lsls	r2, r3, #5
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bea:	461a      	mov	r2, r3
 8005bec:	2300      	movs	r3, #0
 8005bee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	015a      	lsls	r2, r3, #5
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	4413      	add	r3, r2
 8005bf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bfc:	461a      	mov	r2, r3
 8005bfe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c02:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	3301      	adds	r3, #1
 8005c08:	613b      	str	r3, [r7, #16]
 8005c0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d3b7      	bcc.n	8005b82 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c12:	2300      	movs	r3, #0
 8005c14:	613b      	str	r3, [r7, #16]
 8005c16:	e043      	b.n	8005ca0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c18:	693b      	ldr	r3, [r7, #16]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c2e:	d118      	bne.n	8005c62 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c30:	693b      	ldr	r3, [r7, #16]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d10a      	bne.n	8005c4c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	015a      	lsls	r2, r3, #5
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	4413      	add	r3, r2
 8005c3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c42:	461a      	mov	r2, r3
 8005c44:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e013      	b.n	8005c74 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c4c:	693b      	ldr	r3, [r7, #16]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c58:	461a      	mov	r2, r3
 8005c5a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c5e:	6013      	str	r3, [r2, #0]
 8005c60:	e008      	b.n	8005c74 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005c62:	693b      	ldr	r3, [r7, #16]
 8005c64:	015a      	lsls	r2, r3, #5
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	4413      	add	r3, r2
 8005c6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c6e:	461a      	mov	r2, r3
 8005c70:	2300      	movs	r3, #0
 8005c72:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	015a      	lsls	r2, r3, #5
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	4413      	add	r3, r2
 8005c7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c80:	461a      	mov	r2, r3
 8005c82:	2300      	movs	r3, #0
 8005c84:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005c86:	693b      	ldr	r3, [r7, #16]
 8005c88:	015a      	lsls	r2, r3, #5
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	4413      	add	r3, r2
 8005c8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c92:	461a      	mov	r2, r3
 8005c94:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c98:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	3301      	adds	r3, #1
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ca2:	693a      	ldr	r2, [r7, #16]
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d3b7      	bcc.n	8005c18 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cae:	691b      	ldr	r3, [r3, #16]
 8005cb0:	68fa      	ldr	r2, [r7, #12]
 8005cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cb6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2200      	movs	r2, #0
 8005cc0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005cc8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d105      	bne.n	8005cdc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	699b      	ldr	r3, [r3, #24]
 8005cd4:	f043 0210 	orr.w	r2, r3, #16
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	699a      	ldr	r2, [r3, #24]
 8005ce0:	4b0f      	ldr	r3, [pc, #60]	; (8005d20 <USB_DevInit+0x2c4>)
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ce8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d005      	beq.n	8005cfa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
 8005cf2:	f043 0208 	orr.w	r2, r3, #8
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005cfc:	2b01      	cmp	r3, #1
 8005cfe:	d107      	bne.n	8005d10 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	699b      	ldr	r3, [r3, #24]
 8005d04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d08:	f043 0304 	orr.w	r3, r3, #4
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d12:	4618      	mov	r0, r3
 8005d14:	3718      	adds	r7, #24
 8005d16:	46bd      	mov	sp, r7
 8005d18:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d1c:	b004      	add	sp, #16
 8005d1e:	4770      	bx	lr
 8005d20:	803c3800 	.word	0x803c3800

08005d24 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b085      	sub	sp, #20
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
 8005d2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	3301      	adds	r3, #1
 8005d36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	4a13      	ldr	r2, [pc, #76]	; (8005d88 <USB_FlushTxFifo+0x64>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d901      	bls.n	8005d44 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d40:	2303      	movs	r3, #3
 8005d42:	e01b      	b.n	8005d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	daf2      	bge.n	8005d32 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	019b      	lsls	r3, r3, #6
 8005d54:	f043 0220 	orr.w	r2, r3, #32
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	3301      	adds	r3, #1
 8005d60:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	4a08      	ldr	r2, [pc, #32]	; (8005d88 <USB_FlushTxFifo+0x64>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d901      	bls.n	8005d6e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d6a:	2303      	movs	r3, #3
 8005d6c:	e006      	b.n	8005d7c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	f003 0320 	and.w	r3, r3, #32
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d0f0      	beq.n	8005d5c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3714      	adds	r7, #20
 8005d80:	46bd      	mov	sp, r7
 8005d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d86:	4770      	bx	lr
 8005d88:	00030d40 	.word	0x00030d40

08005d8c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b085      	sub	sp, #20
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d94:	2300      	movs	r3, #0
 8005d96:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	3301      	adds	r3, #1
 8005d9c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	4a11      	ldr	r2, [pc, #68]	; (8005de8 <USB_FlushRxFifo+0x5c>)
 8005da2:	4293      	cmp	r3, r2
 8005da4:	d901      	bls.n	8005daa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e018      	b.n	8005ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	691b      	ldr	r3, [r3, #16]
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	daf2      	bge.n	8005d98 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2210      	movs	r2, #16
 8005dba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a08      	ldr	r2, [pc, #32]	; (8005de8 <USB_FlushRxFifo+0x5c>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e006      	b.n	8005ddc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	f003 0310 	and.w	r3, r3, #16
 8005dd6:	2b10      	cmp	r3, #16
 8005dd8:	d0f0      	beq.n	8005dbc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dda:	2300      	movs	r3, #0
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3714      	adds	r7, #20
 8005de0:	46bd      	mov	sp, r7
 8005de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de6:	4770      	bx	lr
 8005de8:	00030d40 	.word	0x00030d40

08005dec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b085      	sub	sp, #20
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	460b      	mov	r3, r1
 8005df6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	78fb      	ldrb	r3, [r7, #3]
 8005e06:	68f9      	ldr	r1, [r7, #12]
 8005e08:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e0c:	4313      	orrs	r3, r2
 8005e0e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e10:	2300      	movs	r3, #0
}
 8005e12:	4618      	mov	r0, r3
 8005e14:	3714      	adds	r7, #20
 8005e16:	46bd      	mov	sp, r7
 8005e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1c:	4770      	bx	lr

08005e1e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e1e:	b480      	push	{r7}
 8005e20:	b087      	sub	sp, #28
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e2a:	693b      	ldr	r3, [r7, #16]
 8005e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	f003 0306 	and.w	r3, r3, #6
 8005e36:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d102      	bne.n	8005e44 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	75fb      	strb	r3, [r7, #23]
 8005e42:	e00a      	b.n	8005e5a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d002      	beq.n	8005e50 <USB_GetDevSpeed+0x32>
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2b06      	cmp	r3, #6
 8005e4e:	d102      	bne.n	8005e56 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e50:	2302      	movs	r3, #2
 8005e52:	75fb      	strb	r3, [r7, #23]
 8005e54:	e001      	b.n	8005e5a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e56:	230f      	movs	r3, #15
 8005e58:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	371c      	adds	r7, #28
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b085      	sub	sp, #20
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
 8005e70:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	781b      	ldrb	r3, [r3, #0]
 8005e7a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	785b      	ldrb	r3, [r3, #1]
 8005e80:	2b01      	cmp	r3, #1
 8005e82:	d13a      	bne.n	8005efa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e8a:	69da      	ldr	r2, [r3, #28]
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	781b      	ldrb	r3, [r3, #0]
 8005e90:	f003 030f 	and.w	r3, r3, #15
 8005e94:	2101      	movs	r1, #1
 8005e96:	fa01 f303 	lsl.w	r3, r1, r3
 8005e9a:	b29b      	uxth	r3, r3
 8005e9c:	68f9      	ldr	r1, [r7, #12]
 8005e9e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	015a      	lsls	r2, r3, #5
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	4413      	add	r3, r2
 8005eae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d155      	bne.n	8005f68 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ebc:	68bb      	ldr	r3, [r7, #8]
 8005ebe:	015a      	lsls	r2, r3, #5
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	4413      	add	r3, r2
 8005ec4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	791b      	ldrb	r3, [r3, #4]
 8005ed6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ed8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	059b      	lsls	r3, r3, #22
 8005ede:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005ee0:	4313      	orrs	r3, r2
 8005ee2:	68ba      	ldr	r2, [r7, #8]
 8005ee4:	0151      	lsls	r1, r2, #5
 8005ee6:	68fa      	ldr	r2, [r7, #12]
 8005ee8:	440a      	add	r2, r1
 8005eea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005ef2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ef6:	6013      	str	r3, [r2, #0]
 8005ef8:	e036      	b.n	8005f68 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f00:	69da      	ldr	r2, [r3, #28]
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	781b      	ldrb	r3, [r3, #0]
 8005f06:	f003 030f 	and.w	r3, r3, #15
 8005f0a:	2101      	movs	r1, #1
 8005f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8005f10:	041b      	lsls	r3, r3, #16
 8005f12:	68f9      	ldr	r1, [r7, #12]
 8005f14:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f18:	4313      	orrs	r3, r2
 8005f1a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	015a      	lsls	r2, r3, #5
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	4413      	add	r3, r2
 8005f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d11a      	bne.n	8005f68 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	015a      	lsls	r2, r3, #5
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	4413      	add	r3, r2
 8005f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	683b      	ldr	r3, [r7, #0]
 8005f42:	68db      	ldr	r3, [r3, #12]
 8005f44:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	791b      	ldrb	r3, [r3, #4]
 8005f4c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f4e:	430b      	orrs	r3, r1
 8005f50:	4313      	orrs	r3, r2
 8005f52:	68ba      	ldr	r2, [r7, #8]
 8005f54:	0151      	lsls	r1, r2, #5
 8005f56:	68fa      	ldr	r2, [r7, #12]
 8005f58:	440a      	add	r2, r1
 8005f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005f5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f66:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005f68:	2300      	movs	r3, #0
}
 8005f6a:	4618      	mov	r0, r3
 8005f6c:	3714      	adds	r7, #20
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f74:	4770      	bx	lr
	...

08005f78 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
 8005f80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	785b      	ldrb	r3, [r3, #1]
 8005f90:	2b01      	cmp	r3, #1
 8005f92:	d161      	bne.n	8006058 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	015a      	lsls	r2, r3, #5
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	4413      	add	r3, r2
 8005f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fa6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005faa:	d11f      	bne.n	8005fec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005fac:	68bb      	ldr	r3, [r7, #8]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	68ba      	ldr	r2, [r7, #8]
 8005fbc:	0151      	lsls	r1, r2, #5
 8005fbe:	68fa      	ldr	r2, [r7, #12]
 8005fc0:	440a      	add	r2, r1
 8005fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005fca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	015a      	lsls	r2, r3, #5
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68ba      	ldr	r2, [r7, #8]
 8005fdc:	0151      	lsls	r1, r2, #5
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	440a      	add	r2, r1
 8005fe2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005fe6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	781b      	ldrb	r3, [r3, #0]
 8005ff8:	f003 030f 	and.w	r3, r3, #15
 8005ffc:	2101      	movs	r1, #1
 8005ffe:	fa01 f303 	lsl.w	r3, r1, r3
 8006002:	b29b      	uxth	r3, r3
 8006004:	43db      	mvns	r3, r3
 8006006:	68f9      	ldr	r1, [r7, #12]
 8006008:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800600c:	4013      	ands	r3, r2
 800600e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006016:	69da      	ldr	r2, [r3, #28]
 8006018:	683b      	ldr	r3, [r7, #0]
 800601a:	781b      	ldrb	r3, [r3, #0]
 800601c:	f003 030f 	and.w	r3, r3, #15
 8006020:	2101      	movs	r1, #1
 8006022:	fa01 f303 	lsl.w	r3, r1, r3
 8006026:	b29b      	uxth	r3, r3
 8006028:	43db      	mvns	r3, r3
 800602a:	68f9      	ldr	r1, [r7, #12]
 800602c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006030:	4013      	ands	r3, r2
 8006032:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	015a      	lsls	r2, r3, #5
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	4413      	add	r3, r2
 800603c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006040:	681a      	ldr	r2, [r3, #0]
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	0159      	lsls	r1, r3, #5
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	440b      	add	r3, r1
 800604a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800604e:	4619      	mov	r1, r3
 8006050:	4b35      	ldr	r3, [pc, #212]	; (8006128 <USB_DeactivateEndpoint+0x1b0>)
 8006052:	4013      	ands	r3, r2
 8006054:	600b      	str	r3, [r1, #0]
 8006056:	e060      	b.n	800611a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006058:	68bb      	ldr	r3, [r7, #8]
 800605a:	015a      	lsls	r2, r3, #5
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	4413      	add	r3, r2
 8006060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800606a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800606e:	d11f      	bne.n	80060b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	015a      	lsls	r2, r3, #5
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	4413      	add	r3, r2
 8006078:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	68ba      	ldr	r2, [r7, #8]
 8006080:	0151      	lsls	r1, r2, #5
 8006082:	68fa      	ldr	r2, [r7, #12]
 8006084:	440a      	add	r2, r1
 8006086:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800608a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800608e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8006090:	68bb      	ldr	r3, [r7, #8]
 8006092:	015a      	lsls	r2, r3, #5
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	4413      	add	r3, r2
 8006098:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	68ba      	ldr	r2, [r7, #8]
 80060a0:	0151      	lsls	r1, r2, #5
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	440a      	add	r2, r1
 80060a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060b8:	683b      	ldr	r3, [r7, #0]
 80060ba:	781b      	ldrb	r3, [r3, #0]
 80060bc:	f003 030f 	and.w	r3, r3, #15
 80060c0:	2101      	movs	r1, #1
 80060c2:	fa01 f303 	lsl.w	r3, r1, r3
 80060c6:	041b      	lsls	r3, r3, #16
 80060c8:	43db      	mvns	r3, r3
 80060ca:	68f9      	ldr	r1, [r7, #12]
 80060cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060d0:	4013      	ands	r3, r2
 80060d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060da:	69da      	ldr	r2, [r3, #28]
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	781b      	ldrb	r3, [r3, #0]
 80060e0:	f003 030f 	and.w	r3, r3, #15
 80060e4:	2101      	movs	r1, #1
 80060e6:	fa01 f303 	lsl.w	r3, r1, r3
 80060ea:	041b      	lsls	r3, r3, #16
 80060ec:	43db      	mvns	r3, r3
 80060ee:	68f9      	ldr	r1, [r7, #12]
 80060f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80060f4:	4013      	ands	r3, r2
 80060f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80060f8:	68bb      	ldr	r3, [r7, #8]
 80060fa:	015a      	lsls	r2, r3, #5
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	4413      	add	r3, r2
 8006100:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006104:	681a      	ldr	r2, [r3, #0]
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	0159      	lsls	r1, r3, #5
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	440b      	add	r3, r1
 800610e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006112:	4619      	mov	r1, r3
 8006114:	4b05      	ldr	r3, [pc, #20]	; (800612c <USB_DeactivateEndpoint+0x1b4>)
 8006116:	4013      	ands	r3, r2
 8006118:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800611a:	2300      	movs	r3, #0
}
 800611c:	4618      	mov	r0, r3
 800611e:	3714      	adds	r7, #20
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr
 8006128:	ec337800 	.word	0xec337800
 800612c:	eff37800 	.word	0xeff37800

08006130 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b08a      	sub	sp, #40	; 0x28
 8006134:	af02      	add	r7, sp, #8
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	4613      	mov	r3, r2
 800613c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	781b      	ldrb	r3, [r3, #0]
 8006146:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	785b      	ldrb	r3, [r3, #1]
 800614c:	2b01      	cmp	r3, #1
 800614e:	f040 815c 	bne.w	800640a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	699b      	ldr	r3, [r3, #24]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d132      	bne.n	80061c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800615a:	69bb      	ldr	r3, [r7, #24]
 800615c:	015a      	lsls	r2, r3, #5
 800615e:	69fb      	ldr	r3, [r7, #28]
 8006160:	4413      	add	r3, r2
 8006162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006166:	691b      	ldr	r3, [r3, #16]
 8006168:	69ba      	ldr	r2, [r7, #24]
 800616a:	0151      	lsls	r1, r2, #5
 800616c:	69fa      	ldr	r2, [r7, #28]
 800616e:	440a      	add	r2, r1
 8006170:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006174:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006178:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800617c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	015a      	lsls	r2, r3, #5
 8006182:	69fb      	ldr	r3, [r7, #28]
 8006184:	4413      	add	r3, r2
 8006186:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	0151      	lsls	r1, r2, #5
 8006190:	69fa      	ldr	r2, [r7, #28]
 8006192:	440a      	add	r2, r1
 8006194:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006198:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800619c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	0cdb      	lsrs	r3, r3, #19
 80061ba:	04db      	lsls	r3, r3, #19
 80061bc:	6113      	str	r3, [r2, #16]
 80061be:	e074      	b.n	80062aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	015a      	lsls	r2, r3, #5
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	4413      	add	r3, r2
 80061c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061cc:	691b      	ldr	r3, [r3, #16]
 80061ce:	69ba      	ldr	r2, [r7, #24]
 80061d0:	0151      	lsls	r1, r2, #5
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	440a      	add	r2, r1
 80061d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061da:	0cdb      	lsrs	r3, r3, #19
 80061dc:	04db      	lsls	r3, r3, #19
 80061de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	015a      	lsls	r2, r3, #5
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	4413      	add	r3, r2
 80061e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	0151      	lsls	r1, r2, #5
 80061f2:	69fa      	ldr	r2, [r7, #28]
 80061f4:	440a      	add	r2, r1
 80061f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006202:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	6999      	ldr	r1, [r3, #24]
 8006216:	68bb      	ldr	r3, [r7, #8]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	440b      	add	r3, r1
 800621c:	1e59      	subs	r1, r3, #1
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	fbb1 f3f3 	udiv	r3, r1, r3
 8006226:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006228:	4b9d      	ldr	r3, [pc, #628]	; (80064a0 <USB_EPStartXfer+0x370>)
 800622a:	400b      	ands	r3, r1
 800622c:	69b9      	ldr	r1, [r7, #24]
 800622e:	0148      	lsls	r0, r1, #5
 8006230:	69f9      	ldr	r1, [r7, #28]
 8006232:	4401      	add	r1, r0
 8006234:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8006238:	4313      	orrs	r3, r2
 800623a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800623c:	69bb      	ldr	r3, [r7, #24]
 800623e:	015a      	lsls	r2, r3, #5
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	4413      	add	r3, r2
 8006244:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006248:	691a      	ldr	r2, [r3, #16]
 800624a:	68bb      	ldr	r3, [r7, #8]
 800624c:	699b      	ldr	r3, [r3, #24]
 800624e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006252:	69b9      	ldr	r1, [r7, #24]
 8006254:	0148      	lsls	r0, r1, #5
 8006256:	69f9      	ldr	r1, [r7, #28]
 8006258:	4401      	add	r1, r0
 800625a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800625e:	4313      	orrs	r3, r2
 8006260:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	791b      	ldrb	r3, [r3, #4]
 8006266:	2b01      	cmp	r3, #1
 8006268:	d11f      	bne.n	80062aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800626a:	69bb      	ldr	r3, [r7, #24]
 800626c:	015a      	lsls	r2, r3, #5
 800626e:	69fb      	ldr	r3, [r7, #28]
 8006270:	4413      	add	r3, r2
 8006272:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006276:	691b      	ldr	r3, [r3, #16]
 8006278:	69ba      	ldr	r2, [r7, #24]
 800627a:	0151      	lsls	r1, r2, #5
 800627c:	69fa      	ldr	r2, [r7, #28]
 800627e:	440a      	add	r2, r1
 8006280:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006284:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8006288:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800628a:	69bb      	ldr	r3, [r7, #24]
 800628c:	015a      	lsls	r2, r3, #5
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	4413      	add	r3, r2
 8006292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	0151      	lsls	r1, r2, #5
 800629c:	69fa      	ldr	r2, [r7, #28]
 800629e:	440a      	add	r2, r1
 80062a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062aa:	79fb      	ldrb	r3, [r7, #7]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d14b      	bne.n	8006348 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062b0:	68bb      	ldr	r3, [r7, #8]
 80062b2:	695b      	ldr	r3, [r3, #20]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d009      	beq.n	80062cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062b8:	69bb      	ldr	r3, [r7, #24]
 80062ba:	015a      	lsls	r2, r3, #5
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	4413      	add	r3, r2
 80062c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062c4:	461a      	mov	r2, r3
 80062c6:	68bb      	ldr	r3, [r7, #8]
 80062c8:	695b      	ldr	r3, [r3, #20]
 80062ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80062cc:	68bb      	ldr	r3, [r7, #8]
 80062ce:	791b      	ldrb	r3, [r3, #4]
 80062d0:	2b01      	cmp	r3, #1
 80062d2:	d128      	bne.n	8006326 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80062d4:	69fb      	ldr	r3, [r7, #28]
 80062d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d110      	bne.n	8006306 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	015a      	lsls	r2, r3, #5
 80062e8:	69fb      	ldr	r3, [r7, #28]
 80062ea:	4413      	add	r3, r2
 80062ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69ba      	ldr	r2, [r7, #24]
 80062f4:	0151      	lsls	r1, r2, #5
 80062f6:	69fa      	ldr	r2, [r7, #28]
 80062f8:	440a      	add	r2, r1
 80062fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	e00f      	b.n	8006326 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006306:	69bb      	ldr	r3, [r7, #24]
 8006308:	015a      	lsls	r2, r3, #5
 800630a:	69fb      	ldr	r3, [r7, #28]
 800630c:	4413      	add	r3, r2
 800630e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	0151      	lsls	r1, r2, #5
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	440a      	add	r2, r1
 800631c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006324:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	015a      	lsls	r2, r3, #5
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	4413      	add	r3, r2
 800632e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	69ba      	ldr	r2, [r7, #24]
 8006336:	0151      	lsls	r1, r2, #5
 8006338:	69fa      	ldr	r2, [r7, #28]
 800633a:	440a      	add	r2, r1
 800633c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006340:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006344:	6013      	str	r3, [r2, #0]
 8006346:	e133      	b.n	80065b0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006348:	69bb      	ldr	r3, [r7, #24]
 800634a:	015a      	lsls	r2, r3, #5
 800634c:	69fb      	ldr	r3, [r7, #28]
 800634e:	4413      	add	r3, r2
 8006350:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	69ba      	ldr	r2, [r7, #24]
 8006358:	0151      	lsls	r1, r2, #5
 800635a:	69fa      	ldr	r2, [r7, #28]
 800635c:	440a      	add	r2, r1
 800635e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006362:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006366:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006368:	68bb      	ldr	r3, [r7, #8]
 800636a:	791b      	ldrb	r3, [r3, #4]
 800636c:	2b01      	cmp	r3, #1
 800636e:	d015      	beq.n	800639c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8006370:	68bb      	ldr	r3, [r7, #8]
 8006372:	699b      	ldr	r3, [r3, #24]
 8006374:	2b00      	cmp	r3, #0
 8006376:	f000 811b 	beq.w	80065b0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006380:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006382:	68bb      	ldr	r3, [r7, #8]
 8006384:	781b      	ldrb	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	2101      	movs	r1, #1
 800638c:	fa01 f303 	lsl.w	r3, r1, r3
 8006390:	69f9      	ldr	r1, [r7, #28]
 8006392:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006396:	4313      	orrs	r3, r2
 8006398:	634b      	str	r3, [r1, #52]	; 0x34
 800639a:	e109      	b.n	80065b0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d110      	bne.n	80063ce <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063ac:	69bb      	ldr	r3, [r7, #24]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	69fb      	ldr	r3, [r7, #28]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	69ba      	ldr	r2, [r7, #24]
 80063bc:	0151      	lsls	r1, r2, #5
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	440a      	add	r2, r1
 80063c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063c6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80063ca:	6013      	str	r3, [r2, #0]
 80063cc:	e00f      	b.n	80063ee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80063ce:	69bb      	ldr	r3, [r7, #24]
 80063d0:	015a      	lsls	r2, r3, #5
 80063d2:	69fb      	ldr	r3, [r7, #28]
 80063d4:	4413      	add	r3, r2
 80063d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	69ba      	ldr	r2, [r7, #24]
 80063de:	0151      	lsls	r1, r2, #5
 80063e0:	69fa      	ldr	r2, [r7, #28]
 80063e2:	440a      	add	r2, r1
 80063e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80063ec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80063ee:	68bb      	ldr	r3, [r7, #8]
 80063f0:	6919      	ldr	r1, [r3, #16]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	781a      	ldrb	r2, [r3, #0]
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	699b      	ldr	r3, [r3, #24]
 80063fa:	b298      	uxth	r0, r3
 80063fc:	79fb      	ldrb	r3, [r7, #7]
 80063fe:	9300      	str	r3, [sp, #0]
 8006400:	4603      	mov	r3, r0
 8006402:	68f8      	ldr	r0, [r7, #12]
 8006404:	f000 fade 	bl	80069c4 <USB_WritePacket>
 8006408:	e0d2      	b.n	80065b0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800640a:	69bb      	ldr	r3, [r7, #24]
 800640c:	015a      	lsls	r2, r3, #5
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	4413      	add	r3, r2
 8006412:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006416:	691b      	ldr	r3, [r3, #16]
 8006418:	69ba      	ldr	r2, [r7, #24]
 800641a:	0151      	lsls	r1, r2, #5
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	440a      	add	r2, r1
 8006420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006424:	0cdb      	lsrs	r3, r3, #19
 8006426:	04db      	lsls	r3, r3, #19
 8006428:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800642a:	69bb      	ldr	r3, [r7, #24]
 800642c:	015a      	lsls	r2, r3, #5
 800642e:	69fb      	ldr	r3, [r7, #28]
 8006430:	4413      	add	r3, r2
 8006432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006436:	691b      	ldr	r3, [r3, #16]
 8006438:	69ba      	ldr	r2, [r7, #24]
 800643a:	0151      	lsls	r1, r2, #5
 800643c:	69fa      	ldr	r2, [r7, #28]
 800643e:	440a      	add	r2, r1
 8006440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006444:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006448:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800644c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	699b      	ldr	r3, [r3, #24]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d126      	bne.n	80064a4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	015a      	lsls	r2, r3, #5
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	4413      	add	r3, r2
 800645e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006462:	691a      	ldr	r2, [r3, #16]
 8006464:	68bb      	ldr	r3, [r7, #8]
 8006466:	68db      	ldr	r3, [r3, #12]
 8006468:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800646c:	69b9      	ldr	r1, [r7, #24]
 800646e:	0148      	lsls	r0, r1, #5
 8006470:	69f9      	ldr	r1, [r7, #28]
 8006472:	4401      	add	r1, r0
 8006474:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006478:	4313      	orrs	r3, r2
 800647a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800647c:	69bb      	ldr	r3, [r7, #24]
 800647e:	015a      	lsls	r2, r3, #5
 8006480:	69fb      	ldr	r3, [r7, #28]
 8006482:	4413      	add	r3, r2
 8006484:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006488:	691b      	ldr	r3, [r3, #16]
 800648a:	69ba      	ldr	r2, [r7, #24]
 800648c:	0151      	lsls	r1, r2, #5
 800648e:	69fa      	ldr	r2, [r7, #28]
 8006490:	440a      	add	r2, r1
 8006492:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006496:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800649a:	6113      	str	r3, [r2, #16]
 800649c:	e03a      	b.n	8006514 <USB_EPStartXfer+0x3e4>
 800649e:	bf00      	nop
 80064a0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064a4:	68bb      	ldr	r3, [r7, #8]
 80064a6:	699a      	ldr	r2, [r3, #24]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4413      	add	r3, r2
 80064ae:	1e5a      	subs	r2, r3, #1
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	68db      	ldr	r3, [r3, #12]
 80064b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	68db      	ldr	r3, [r3, #12]
 80064be:	8afa      	ldrh	r2, [r7, #22]
 80064c0:	fb03 f202 	mul.w	r2, r3, r2
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80064c8:	69bb      	ldr	r3, [r7, #24]
 80064ca:	015a      	lsls	r2, r3, #5
 80064cc:	69fb      	ldr	r3, [r7, #28]
 80064ce:	4413      	add	r3, r2
 80064d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064d4:	691a      	ldr	r2, [r3, #16]
 80064d6:	8afb      	ldrh	r3, [r7, #22]
 80064d8:	04d9      	lsls	r1, r3, #19
 80064da:	4b38      	ldr	r3, [pc, #224]	; (80065bc <USB_EPStartXfer+0x48c>)
 80064dc:	400b      	ands	r3, r1
 80064de:	69b9      	ldr	r1, [r7, #24]
 80064e0:	0148      	lsls	r0, r1, #5
 80064e2:	69f9      	ldr	r1, [r7, #28]
 80064e4:	4401      	add	r1, r0
 80064e6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064ea:	4313      	orrs	r3, r2
 80064ec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	015a      	lsls	r2, r3, #5
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064fa:	691a      	ldr	r2, [r3, #16]
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	69db      	ldr	r3, [r3, #28]
 8006500:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006504:	69b9      	ldr	r1, [r7, #24]
 8006506:	0148      	lsls	r0, r1, #5
 8006508:	69f9      	ldr	r1, [r7, #28]
 800650a:	4401      	add	r1, r0
 800650c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006510:	4313      	orrs	r3, r2
 8006512:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	2b01      	cmp	r3, #1
 8006518:	d10d      	bne.n	8006536 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d009      	beq.n	8006536 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006522:	68bb      	ldr	r3, [r7, #8]
 8006524:	6919      	ldr	r1, [r3, #16]
 8006526:	69bb      	ldr	r3, [r7, #24]
 8006528:	015a      	lsls	r2, r3, #5
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	4413      	add	r3, r2
 800652e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006532:	460a      	mov	r2, r1
 8006534:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8006536:	68bb      	ldr	r3, [r7, #8]
 8006538:	791b      	ldrb	r3, [r3, #4]
 800653a:	2b01      	cmp	r3, #1
 800653c:	d128      	bne.n	8006590 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800653e:	69fb      	ldr	r3, [r7, #28]
 8006540:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006544:	689b      	ldr	r3, [r3, #8]
 8006546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800654a:	2b00      	cmp	r3, #0
 800654c:	d110      	bne.n	8006570 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800654e:	69bb      	ldr	r3, [r7, #24]
 8006550:	015a      	lsls	r2, r3, #5
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	4413      	add	r3, r2
 8006556:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	69ba      	ldr	r2, [r7, #24]
 800655e:	0151      	lsls	r1, r2, #5
 8006560:	69fa      	ldr	r2, [r7, #28]
 8006562:	440a      	add	r2, r1
 8006564:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006568:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800656c:	6013      	str	r3, [r2, #0]
 800656e:	e00f      	b.n	8006590 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8006570:	69bb      	ldr	r3, [r7, #24]
 8006572:	015a      	lsls	r2, r3, #5
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	4413      	add	r3, r2
 8006578:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	0151      	lsls	r1, r2, #5
 8006582:	69fa      	ldr	r2, [r7, #28]
 8006584:	440a      	add	r2, r1
 8006586:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800658a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800658e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006590:	69bb      	ldr	r3, [r7, #24]
 8006592:	015a      	lsls	r2, r3, #5
 8006594:	69fb      	ldr	r3, [r7, #28]
 8006596:	4413      	add	r3, r2
 8006598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	69ba      	ldr	r2, [r7, #24]
 80065a0:	0151      	lsls	r1, r2, #5
 80065a2:	69fa      	ldr	r2, [r7, #28]
 80065a4:	440a      	add	r2, r1
 80065a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065aa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065ae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065b0:	2300      	movs	r3, #0
}
 80065b2:	4618      	mov	r0, r3
 80065b4:	3720      	adds	r7, #32
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	1ff80000 	.word	0x1ff80000

080065c0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80065c0:	b480      	push	{r7}
 80065c2:	b087      	sub	sp, #28
 80065c4:	af00      	add	r7, sp, #0
 80065c6:	60f8      	str	r0, [r7, #12]
 80065c8:	60b9      	str	r1, [r7, #8]
 80065ca:	4613      	mov	r3, r2
 80065cc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80065d2:	68bb      	ldr	r3, [r7, #8]
 80065d4:	781b      	ldrb	r3, [r3, #0]
 80065d6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80065d8:	68bb      	ldr	r3, [r7, #8]
 80065da:	785b      	ldrb	r3, [r3, #1]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	f040 80ce 	bne.w	800677e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d132      	bne.n	8006650 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	015a      	lsls	r2, r3, #5
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	4413      	add	r3, r2
 80065f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80065f6:	691b      	ldr	r3, [r3, #16]
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	0151      	lsls	r1, r2, #5
 80065fc:	697a      	ldr	r2, [r7, #20]
 80065fe:	440a      	add	r2, r1
 8006600:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006604:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006608:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800660c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	015a      	lsls	r2, r3, #5
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	4413      	add	r3, r2
 8006616:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800661a:	691b      	ldr	r3, [r3, #16]
 800661c:	693a      	ldr	r2, [r7, #16]
 800661e:	0151      	lsls	r1, r2, #5
 8006620:	697a      	ldr	r2, [r7, #20]
 8006622:	440a      	add	r2, r1
 8006624:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006628:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800662c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	440a      	add	r2, r1
 8006644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006648:	0cdb      	lsrs	r3, r3, #19
 800664a:	04db      	lsls	r3, r3, #19
 800664c:	6113      	str	r3, [r2, #16]
 800664e:	e04e      	b.n	80066ee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	015a      	lsls	r2, r3, #5
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	4413      	add	r3, r2
 8006658:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665c:	691b      	ldr	r3, [r3, #16]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	0151      	lsls	r1, r2, #5
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	440a      	add	r2, r1
 8006666:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800666a:	0cdb      	lsrs	r3, r3, #19
 800666c:	04db      	lsls	r3, r3, #19
 800666e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006670:	693b      	ldr	r3, [r7, #16]
 8006672:	015a      	lsls	r2, r3, #5
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	4413      	add	r3, r2
 8006678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667c:	691b      	ldr	r3, [r3, #16]
 800667e:	693a      	ldr	r2, [r7, #16]
 8006680:	0151      	lsls	r1, r2, #5
 8006682:	697a      	ldr	r2, [r7, #20]
 8006684:	440a      	add	r2, r1
 8006686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800668e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006692:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	699a      	ldr	r2, [r3, #24]
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	68db      	ldr	r3, [r3, #12]
 800669c:	429a      	cmp	r2, r3
 800669e:	d903      	bls.n	80066a8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	68da      	ldr	r2, [r3, #12]
 80066a4:	68bb      	ldr	r3, [r7, #8]
 80066a6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	015a      	lsls	r2, r3, #5
 80066ac:	697b      	ldr	r3, [r7, #20]
 80066ae:	4413      	add	r3, r2
 80066b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	693a      	ldr	r2, [r7, #16]
 80066b8:	0151      	lsls	r1, r2, #5
 80066ba:	697a      	ldr	r2, [r7, #20]
 80066bc:	440a      	add	r2, r1
 80066be:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066c2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80066c6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	015a      	lsls	r2, r3, #5
 80066cc:	697b      	ldr	r3, [r7, #20]
 80066ce:	4413      	add	r3, r2
 80066d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066d4:	691a      	ldr	r2, [r3, #16]
 80066d6:	68bb      	ldr	r3, [r7, #8]
 80066d8:	699b      	ldr	r3, [r3, #24]
 80066da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80066de:	6939      	ldr	r1, [r7, #16]
 80066e0:	0148      	lsls	r0, r1, #5
 80066e2:	6979      	ldr	r1, [r7, #20]
 80066e4:	4401      	add	r1, r0
 80066e6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80066ea:	4313      	orrs	r3, r2
 80066ec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80066ee:	79fb      	ldrb	r3, [r7, #7]
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d11e      	bne.n	8006732 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80066f4:	68bb      	ldr	r3, [r7, #8]
 80066f6:	695b      	ldr	r3, [r3, #20]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d009      	beq.n	8006710 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	4413      	add	r3, r2
 8006704:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006708:	461a      	mov	r2, r3
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	695b      	ldr	r3, [r3, #20]
 800670e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006710:	693b      	ldr	r3, [r7, #16]
 8006712:	015a      	lsls	r2, r3, #5
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	4413      	add	r3, r2
 8006718:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	693a      	ldr	r2, [r7, #16]
 8006720:	0151      	lsls	r1, r2, #5
 8006722:	697a      	ldr	r2, [r7, #20]
 8006724:	440a      	add	r2, r1
 8006726:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800672a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800672e:	6013      	str	r3, [r2, #0]
 8006730:	e097      	b.n	8006862 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	015a      	lsls	r2, r3, #5
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	4413      	add	r3, r2
 800673a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	693a      	ldr	r2, [r7, #16]
 8006742:	0151      	lsls	r1, r2, #5
 8006744:	697a      	ldr	r2, [r7, #20]
 8006746:	440a      	add	r2, r1
 8006748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800674c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006750:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	699b      	ldr	r3, [r3, #24]
 8006756:	2b00      	cmp	r3, #0
 8006758:	f000 8083 	beq.w	8006862 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006762:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f003 030f 	and.w	r3, r3, #15
 800676c:	2101      	movs	r1, #1
 800676e:	fa01 f303 	lsl.w	r3, r1, r3
 8006772:	6979      	ldr	r1, [r7, #20]
 8006774:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006778:	4313      	orrs	r3, r2
 800677a:	634b      	str	r3, [r1, #52]	; 0x34
 800677c:	e071      	b.n	8006862 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	015a      	lsls	r2, r3, #5
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	4413      	add	r3, r2
 8006786:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	693a      	ldr	r2, [r7, #16]
 800678e:	0151      	lsls	r1, r2, #5
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	440a      	add	r2, r1
 8006794:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006798:	0cdb      	lsrs	r3, r3, #19
 800679a:	04db      	lsls	r3, r3, #19
 800679c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800679e:	693b      	ldr	r3, [r7, #16]
 80067a0:	015a      	lsls	r2, r3, #5
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	4413      	add	r3, r2
 80067a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067aa:	691b      	ldr	r3, [r3, #16]
 80067ac:	693a      	ldr	r2, [r7, #16]
 80067ae:	0151      	lsls	r1, r2, #5
 80067b0:	697a      	ldr	r2, [r7, #20]
 80067b2:	440a      	add	r2, r1
 80067b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80067bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80067c0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80067c2:	68bb      	ldr	r3, [r7, #8]
 80067c4:	699b      	ldr	r3, [r3, #24]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d003      	beq.n	80067d2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80067ca:	68bb      	ldr	r3, [r7, #8]
 80067cc:	68da      	ldr	r2, [r3, #12]
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	68da      	ldr	r2, [r3, #12]
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	015a      	lsls	r2, r3, #5
 80067de:	697b      	ldr	r3, [r7, #20]
 80067e0:	4413      	add	r3, r2
 80067e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067e6:	691b      	ldr	r3, [r3, #16]
 80067e8:	693a      	ldr	r2, [r7, #16]
 80067ea:	0151      	lsls	r1, r2, #5
 80067ec:	697a      	ldr	r2, [r7, #20]
 80067ee:	440a      	add	r2, r1
 80067f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80067f8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80067fa:	693b      	ldr	r3, [r7, #16]
 80067fc:	015a      	lsls	r2, r3, #5
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	4413      	add	r3, r2
 8006802:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006806:	691a      	ldr	r2, [r3, #16]
 8006808:	68bb      	ldr	r3, [r7, #8]
 800680a:	69db      	ldr	r3, [r3, #28]
 800680c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006810:	6939      	ldr	r1, [r7, #16]
 8006812:	0148      	lsls	r0, r1, #5
 8006814:	6979      	ldr	r1, [r7, #20]
 8006816:	4401      	add	r1, r0
 8006818:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800681c:	4313      	orrs	r3, r2
 800681e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006820:	79fb      	ldrb	r3, [r7, #7]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d10d      	bne.n	8006842 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d009      	beq.n	8006842 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800682e:	68bb      	ldr	r3, [r7, #8]
 8006830:	6919      	ldr	r1, [r3, #16]
 8006832:	693b      	ldr	r3, [r7, #16]
 8006834:	015a      	lsls	r2, r3, #5
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	4413      	add	r3, r2
 800683a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800683e:	460a      	mov	r2, r1
 8006840:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006842:	693b      	ldr	r3, [r7, #16]
 8006844:	015a      	lsls	r2, r3, #5
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	4413      	add	r3, r2
 800684a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	693a      	ldr	r2, [r7, #16]
 8006852:	0151      	lsls	r1, r2, #5
 8006854:	697a      	ldr	r2, [r7, #20]
 8006856:	440a      	add	r2, r1
 8006858:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800685c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006860:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006862:	2300      	movs	r3, #0
}
 8006864:	4618      	mov	r0, r3
 8006866:	371c      	adds	r7, #28
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006870:	b480      	push	{r7}
 8006872:	b087      	sub	sp, #28
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800687a:	2300      	movs	r3, #0
 800687c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800687e:	2300      	movs	r3, #0
 8006880:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	785b      	ldrb	r3, [r3, #1]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d14a      	bne.n	8006924 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800688e:	683b      	ldr	r3, [r7, #0]
 8006890:	781b      	ldrb	r3, [r3, #0]
 8006892:	015a      	lsls	r2, r3, #5
 8006894:	693b      	ldr	r3, [r7, #16]
 8006896:	4413      	add	r3, r2
 8006898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068a6:	f040 8086 	bne.w	80069b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068aa:	683b      	ldr	r3, [r7, #0]
 80068ac:	781b      	ldrb	r3, [r3, #0]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	683a      	ldr	r2, [r7, #0]
 80068bc:	7812      	ldrb	r2, [r2, #0]
 80068be:	0151      	lsls	r1, r2, #5
 80068c0:	693a      	ldr	r2, [r7, #16]
 80068c2:	440a      	add	r2, r1
 80068c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068c8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80068cc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	781b      	ldrb	r3, [r3, #0]
 80068d2:	015a      	lsls	r2, r3, #5
 80068d4:	693b      	ldr	r3, [r7, #16]
 80068d6:	4413      	add	r3, r2
 80068d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	683a      	ldr	r2, [r7, #0]
 80068e0:	7812      	ldrb	r2, [r2, #0]
 80068e2:	0151      	lsls	r1, r2, #5
 80068e4:	693a      	ldr	r2, [r7, #16]
 80068e6:	440a      	add	r2, r1
 80068e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80068ec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068f0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	3301      	adds	r3, #1
 80068f6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80068fe:	4293      	cmp	r3, r2
 8006900:	d902      	bls.n	8006908 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	75fb      	strb	r3, [r7, #23]
          break;
 8006906:	e056      	b.n	80069b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	015a      	lsls	r2, r3, #5
 800690e:	693b      	ldr	r3, [r7, #16]
 8006910:	4413      	add	r3, r2
 8006912:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800691c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006920:	d0e7      	beq.n	80068f2 <USB_EPStopXfer+0x82>
 8006922:	e048      	b.n	80069b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	781b      	ldrb	r3, [r3, #0]
 8006928:	015a      	lsls	r2, r3, #5
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	4413      	add	r3, r2
 800692e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006938:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800693c:	d13b      	bne.n	80069b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	015a      	lsls	r2, r3, #5
 8006944:	693b      	ldr	r3, [r7, #16]
 8006946:	4413      	add	r3, r2
 8006948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	7812      	ldrb	r2, [r2, #0]
 8006952:	0151      	lsls	r1, r2, #5
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	440a      	add	r2, r1
 8006958:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800695c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006960:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	781b      	ldrb	r3, [r3, #0]
 8006966:	015a      	lsls	r2, r3, #5
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	4413      	add	r3, r2
 800696c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	683a      	ldr	r2, [r7, #0]
 8006974:	7812      	ldrb	r2, [r2, #0]
 8006976:	0151      	lsls	r1, r2, #5
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	440a      	add	r2, r1
 800697c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006984:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	3301      	adds	r3, #1
 800698a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006992:	4293      	cmp	r3, r2
 8006994:	d902      	bls.n	800699c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	75fb      	strb	r3, [r7, #23]
          break;
 800699a:	e00c      	b.n	80069b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	781b      	ldrb	r3, [r3, #0]
 80069a0:	015a      	lsls	r2, r3, #5
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	4413      	add	r3, r2
 80069a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069b4:	d0e7      	beq.n	8006986 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80069b8:	4618      	mov	r0, r3
 80069ba:	371c      	adds	r7, #28
 80069bc:	46bd      	mov	sp, r7
 80069be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c2:	4770      	bx	lr

080069c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80069c4:	b480      	push	{r7}
 80069c6:	b089      	sub	sp, #36	; 0x24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	60f8      	str	r0, [r7, #12]
 80069cc:	60b9      	str	r1, [r7, #8]
 80069ce:	4611      	mov	r1, r2
 80069d0:	461a      	mov	r2, r3
 80069d2:	460b      	mov	r3, r1
 80069d4:	71fb      	strb	r3, [r7, #7]
 80069d6:	4613      	mov	r3, r2
 80069d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80069e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d123      	bne.n	8006a32 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80069ea:	88bb      	ldrh	r3, [r7, #4]
 80069ec:	3303      	adds	r3, #3
 80069ee:	089b      	lsrs	r3, r3, #2
 80069f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80069f2:	2300      	movs	r3, #0
 80069f4:	61bb      	str	r3, [r7, #24]
 80069f6:	e018      	b.n	8006a2a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	031a      	lsls	r2, r3, #12
 80069fc:	697b      	ldr	r3, [r7, #20]
 80069fe:	4413      	add	r3, r2
 8006a00:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a04:	461a      	mov	r2, r3
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a0c:	69fb      	ldr	r3, [r7, #28]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a12:	69fb      	ldr	r3, [r7, #28]
 8006a14:	3301      	adds	r3, #1
 8006a16:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a18:	69fb      	ldr	r3, [r7, #28]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a1e:	69fb      	ldr	r3, [r7, #28]
 8006a20:	3301      	adds	r3, #1
 8006a22:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a24:	69bb      	ldr	r3, [r7, #24]
 8006a26:	3301      	adds	r3, #1
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	69ba      	ldr	r2, [r7, #24]
 8006a2c:	693b      	ldr	r3, [r7, #16]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d3e2      	bcc.n	80069f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3724      	adds	r7, #36	; 0x24
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a40:	b480      	push	{r7}
 8006a42:	b08b      	sub	sp, #44	; 0x2c
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a56:	88fb      	ldrh	r3, [r7, #6]
 8006a58:	089b      	lsrs	r3, r3, #2
 8006a5a:	b29b      	uxth	r3, r3
 8006a5c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a5e:	88fb      	ldrh	r3, [r7, #6]
 8006a60:	f003 0303 	and.w	r3, r3, #3
 8006a64:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a66:	2300      	movs	r3, #0
 8006a68:	623b      	str	r3, [r7, #32]
 8006a6a:	e014      	b.n	8006a96 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a6c:	69bb      	ldr	r3, [r7, #24]
 8006a6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a72:	681a      	ldr	r2, [r3, #0]
 8006a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a76:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a80:	3301      	adds	r3, #1
 8006a82:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	3301      	adds	r3, #1
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	3301      	adds	r3, #1
 8006a8e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	3301      	adds	r3, #1
 8006a94:	623b      	str	r3, [r7, #32]
 8006a96:	6a3a      	ldr	r2, [r7, #32]
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d3e6      	bcc.n	8006a6c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a9e:	8bfb      	ldrh	r3, [r7, #30]
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d01e      	beq.n	8006ae2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006aa8:	69bb      	ldr	r3, [r7, #24]
 8006aaa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006aae:	461a      	mov	r2, r3
 8006ab0:	f107 0310 	add.w	r3, r7, #16
 8006ab4:	6812      	ldr	r2, [r2, #0]
 8006ab6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	6a3b      	ldr	r3, [r7, #32]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	00db      	lsls	r3, r3, #3
 8006ac0:	fa22 f303 	lsr.w	r3, r2, r3
 8006ac4:	b2da      	uxtb	r2, r3
 8006ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac8:	701a      	strb	r2, [r3, #0]
      i++;
 8006aca:	6a3b      	ldr	r3, [r7, #32]
 8006acc:	3301      	adds	r3, #1
 8006ace:	623b      	str	r3, [r7, #32]
      pDest++;
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006ad6:	8bfb      	ldrh	r3, [r7, #30]
 8006ad8:	3b01      	subs	r3, #1
 8006ada:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006adc:	8bfb      	ldrh	r3, [r7, #30]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1ea      	bne.n	8006ab8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	372c      	adds	r7, #44	; 0x2c
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b085      	sub	sp, #20
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b04:	683b      	ldr	r3, [r7, #0]
 8006b06:	785b      	ldrb	r3, [r3, #1]
 8006b08:	2b01      	cmp	r3, #1
 8006b0a:	d12c      	bne.n	8006b66 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	015a      	lsls	r2, r3, #5
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	db12      	blt.n	8006b44 <USB_EPSetStall+0x54>
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d00f      	beq.n	8006b44 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	015a      	lsls	r2, r3, #5
 8006b28:	68fb      	ldr	r3, [r7, #12]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	68ba      	ldr	r2, [r7, #8]
 8006b34:	0151      	lsls	r1, r2, #5
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	440a      	add	r2, r1
 8006b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b3e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b42:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	015a      	lsls	r2, r3, #5
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	4413      	add	r3, r2
 8006b4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	0151      	lsls	r1, r2, #5
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	440a      	add	r2, r1
 8006b5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b5e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006b62:	6013      	str	r3, [r2, #0]
 8006b64:	e02b      	b.n	8006bbe <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	db12      	blt.n	8006b9e <USB_EPSetStall+0xae>
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d00f      	beq.n	8006b9e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	015a      	lsls	r2, r3, #5
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	4413      	add	r3, r2
 8006b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	0151      	lsls	r1, r2, #5
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	440a      	add	r2, r1
 8006b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006b98:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b9c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006b9e:	68bb      	ldr	r3, [r7, #8]
 8006ba0:	015a      	lsls	r2, r3, #5
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	4413      	add	r3, r2
 8006ba6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	68ba      	ldr	r2, [r7, #8]
 8006bae:	0151      	lsls	r1, r2, #5
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	440a      	add	r2, r1
 8006bb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bb8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006bbc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006bbe:	2300      	movs	r3, #0
}
 8006bc0:	4618      	mov	r0, r3
 8006bc2:	3714      	adds	r7, #20
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b085      	sub	sp, #20
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
 8006bd4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006bda:	683b      	ldr	r3, [r7, #0]
 8006bdc:	781b      	ldrb	r3, [r3, #0]
 8006bde:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	785b      	ldrb	r3, [r3, #1]
 8006be4:	2b01      	cmp	r3, #1
 8006be6:	d128      	bne.n	8006c3a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	015a      	lsls	r2, r3, #5
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	4413      	add	r3, r2
 8006bf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	68ba      	ldr	r2, [r7, #8]
 8006bf8:	0151      	lsls	r1, r2, #5
 8006bfa:	68fa      	ldr	r2, [r7, #12]
 8006bfc:	440a      	add	r2, r1
 8006bfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c06:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	791b      	ldrb	r3, [r3, #4]
 8006c0c:	2b03      	cmp	r3, #3
 8006c0e:	d003      	beq.n	8006c18 <USB_EPClearStall+0x4c>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	791b      	ldrb	r3, [r3, #4]
 8006c14:	2b02      	cmp	r3, #2
 8006c16:	d138      	bne.n	8006c8a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	015a      	lsls	r2, r3, #5
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	4413      	add	r3, r2
 8006c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	68ba      	ldr	r2, [r7, #8]
 8006c28:	0151      	lsls	r1, r2, #5
 8006c2a:	68fa      	ldr	r2, [r7, #12]
 8006c2c:	440a      	add	r2, r1
 8006c2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c36:	6013      	str	r3, [r2, #0]
 8006c38:	e027      	b.n	8006c8a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c54:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c58:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	791b      	ldrb	r3, [r3, #4]
 8006c5e:	2b03      	cmp	r3, #3
 8006c60:	d003      	beq.n	8006c6a <USB_EPClearStall+0x9e>
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	791b      	ldrb	r3, [r3, #4]
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d10f      	bne.n	8006c8a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	68ba      	ldr	r2, [r7, #8]
 8006c7a:	0151      	lsls	r1, r2, #5
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	440a      	add	r2, r1
 8006c80:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c88:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006c8a:	2300      	movs	r3, #0
}
 8006c8c:	4618      	mov	r0, r3
 8006c8e:	3714      	adds	r7, #20
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr

08006c98 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b085      	sub	sp, #20
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	460b      	mov	r3, r1
 8006ca2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cb6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cc2:	681a      	ldr	r2, [r3, #0]
 8006cc4:	78fb      	ldrb	r3, [r7, #3]
 8006cc6:	011b      	lsls	r3, r3, #4
 8006cc8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006ccc:	68f9      	ldr	r1, [r7, #12]
 8006cce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006cd2:	4313      	orrs	r3, r2
 8006cd4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006cd6:	2300      	movs	r3, #0
}
 8006cd8:	4618      	mov	r0, r3
 8006cda:	3714      	adds	r7, #20
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce2:	4770      	bx	lr

08006ce4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b085      	sub	sp, #20
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68fa      	ldr	r2, [r7, #12]
 8006cfa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006cfe:	f023 0303 	bic.w	r3, r3, #3
 8006d02:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	68fa      	ldr	r2, [r7, #12]
 8006d0e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d12:	f023 0302 	bic.w	r3, r3, #2
 8006d16:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d18:	2300      	movs	r3, #0
}
 8006d1a:	4618      	mov	r0, r3
 8006d1c:	3714      	adds	r7, #20
 8006d1e:	46bd      	mov	sp, r7
 8006d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d24:	4770      	bx	lr

08006d26 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d26:	b480      	push	{r7}
 8006d28:	b085      	sub	sp, #20
 8006d2a:	af00      	add	r7, sp, #0
 8006d2c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68fa      	ldr	r2, [r7, #12]
 8006d3c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d40:	f023 0303 	bic.w	r3, r3, #3
 8006d44:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	68fa      	ldr	r2, [r7, #12]
 8006d50:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d54:	f043 0302 	orr.w	r3, r3, #2
 8006d58:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d5a:	2300      	movs	r3, #0
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3714      	adds	r7, #20
 8006d60:	46bd      	mov	sp, r7
 8006d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d66:	4770      	bx	lr

08006d68 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b085      	sub	sp, #20
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	695b      	ldr	r3, [r3, #20]
 8006d74:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	699b      	ldr	r3, [r3, #24]
 8006d7a:	68fa      	ldr	r2, [r7, #12]
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006d80:	68fb      	ldr	r3, [r7, #12]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3714      	adds	r7, #20
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr

08006d8e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006d8e:	b480      	push	{r7}
 8006d90:	b085      	sub	sp, #20
 8006d92:	af00      	add	r7, sp, #0
 8006d94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006da0:	699b      	ldr	r3, [r3, #24]
 8006da2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	68ba      	ldr	r2, [r7, #8]
 8006dae:	4013      	ands	r3, r2
 8006db0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	0c1b      	lsrs	r3, r3, #16
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3714      	adds	r7, #20
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc0:	4770      	bx	lr

08006dc2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dc2:	b480      	push	{r7}
 8006dc4:	b085      	sub	sp, #20
 8006dc6:	af00      	add	r7, sp, #0
 8006dc8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dd4:	699b      	ldr	r3, [r3, #24]
 8006dd6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dde:	69db      	ldr	r3, [r3, #28]
 8006de0:	68ba      	ldr	r2, [r7, #8]
 8006de2:	4013      	ands	r3, r2
 8006de4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	b29b      	uxth	r3, r3
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3714      	adds	r7, #20
 8006dee:	46bd      	mov	sp, r7
 8006df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df4:	4770      	bx	lr

08006df6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006df6:	b480      	push	{r7}
 8006df8:	b085      	sub	sp, #20
 8006dfa:	af00      	add	r7, sp, #0
 8006dfc:	6078      	str	r0, [r7, #4]
 8006dfe:	460b      	mov	r3, r1
 8006e00:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e06:	78fb      	ldrb	r3, [r7, #3]
 8006e08:	015a      	lsls	r2, r3, #5
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	4413      	add	r3, r2
 8006e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e12:	689b      	ldr	r3, [r3, #8]
 8006e14:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e1c:	695b      	ldr	r3, [r3, #20]
 8006e1e:	68ba      	ldr	r2, [r7, #8]
 8006e20:	4013      	ands	r3, r2
 8006e22:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e24:	68bb      	ldr	r3, [r7, #8]
}
 8006e26:	4618      	mov	r0, r3
 8006e28:	3714      	adds	r7, #20
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e30:	4770      	bx	lr

08006e32 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e32:	b480      	push	{r7}
 8006e34:	b087      	sub	sp, #28
 8006e36:	af00      	add	r7, sp, #0
 8006e38:	6078      	str	r0, [r7, #4]
 8006e3a:	460b      	mov	r3, r1
 8006e3c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e42:	697b      	ldr	r3, [r7, #20]
 8006e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e54:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e56:	78fb      	ldrb	r3, [r7, #3]
 8006e58:	f003 030f 	and.w	r3, r3, #15
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	fa22 f303 	lsr.w	r3, r2, r3
 8006e62:	01db      	lsls	r3, r3, #7
 8006e64:	b2db      	uxtb	r3, r3
 8006e66:	693a      	ldr	r2, [r7, #16]
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006e6c:	78fb      	ldrb	r3, [r7, #3]
 8006e6e:	015a      	lsls	r2, r3, #5
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	4413      	add	r3, r2
 8006e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006e78:	689b      	ldr	r3, [r3, #8]
 8006e7a:	693a      	ldr	r2, [r7, #16]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e80:	68bb      	ldr	r3, [r7, #8]
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	371c      	adds	r7, #28
 8006e86:	46bd      	mov	sp, r7
 8006e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8c:	4770      	bx	lr

08006e8e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e8e:	b480      	push	{r7}
 8006e90:	b083      	sub	sp, #12
 8006e92:	af00      	add	r7, sp, #0
 8006e94:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	695b      	ldr	r3, [r3, #20]
 8006e9a:	f003 0301 	and.w	r3, r3, #1
}
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	370c      	adds	r7, #12
 8006ea2:	46bd      	mov	sp, r7
 8006ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea8:	4770      	bx	lr

08006eaa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006eaa:	b480      	push	{r7}
 8006eac:	b085      	sub	sp, #20
 8006eae:	af00      	add	r7, sp, #0
 8006eb0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ec4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006ec8:	f023 0307 	bic.w	r3, r3, #7
 8006ecc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ed4:	685b      	ldr	r3, [r3, #4]
 8006ed6:	68fa      	ldr	r2, [r7, #12]
 8006ed8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006edc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ee0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr

08006ef0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	b087      	sub	sp, #28
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	60f8      	str	r0, [r7, #12]
 8006ef8:	460b      	mov	r3, r1
 8006efa:	607a      	str	r2, [r7, #4]
 8006efc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	333c      	adds	r3, #60	; 0x3c
 8006f06:	3304      	adds	r3, #4
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f0c:	693b      	ldr	r3, [r7, #16]
 8006f0e:	4a26      	ldr	r2, [pc, #152]	; (8006fa8 <USB_EP0_OutStart+0xb8>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d90a      	bls.n	8006f2a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f14:	697b      	ldr	r3, [r7, #20]
 8006f16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f20:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f24:	d101      	bne.n	8006f2a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f26:	2300      	movs	r3, #0
 8006f28:	e037      	b.n	8006f9a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f2a:	697b      	ldr	r3, [r7, #20]
 8006f2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f30:	461a      	mov	r2, r3
 8006f32:	2300      	movs	r3, #0
 8006f34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f3c:	691b      	ldr	r3, [r3, #16]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	697a      	ldr	r2, [r7, #20]
 8006f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f58:	f043 0318 	orr.w	r3, r3, #24
 8006f5c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006f5e:	697b      	ldr	r3, [r7, #20]
 8006f60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f64:	691b      	ldr	r3, [r3, #16]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f6c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006f70:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006f72:	7afb      	ldrb	r3, [r7, #11]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d10f      	bne.n	8006f98 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006f78:	697b      	ldr	r3, [r7, #20]
 8006f7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f7e:	461a      	mov	r2, r3
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f92:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006f96:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006f98:	2300      	movs	r3, #0
}
 8006f9a:	4618      	mov	r0, r3
 8006f9c:	371c      	adds	r7, #28
 8006f9e:	46bd      	mov	sp, r7
 8006fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa4:	4770      	bx	lr
 8006fa6:	bf00      	nop
 8006fa8:	4f54300a 	.word	0x4f54300a

08006fac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006fac:	b480      	push	{r7}
 8006fae:	b085      	sub	sp, #20
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006fb4:	2300      	movs	r3, #0
 8006fb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	3301      	adds	r3, #1
 8006fbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	4a13      	ldr	r2, [pc, #76]	; (8007010 <USB_CoreReset+0x64>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d901      	bls.n	8006fca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e01b      	b.n	8007002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	691b      	ldr	r3, [r3, #16]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	daf2      	bge.n	8006fb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	691b      	ldr	r3, [r3, #16]
 8006fda:	f043 0201 	orr.w	r2, r3, #1
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a09      	ldr	r2, [pc, #36]	; (8007010 <USB_CoreReset+0x64>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d901      	bls.n	8006ff4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e006      	b.n	8007002 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	f003 0301 	and.w	r3, r3, #1
 8006ffc:	2b01      	cmp	r3, #1
 8006ffe:	d0f0      	beq.n	8006fe2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007000:	2300      	movs	r3, #0
}
 8007002:	4618      	mov	r0, r3
 8007004:	3714      	adds	r7, #20
 8007006:	46bd      	mov	sp, r7
 8007008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800700c:	4770      	bx	lr
 800700e:	bf00      	nop
 8007010:	00030d40 	.word	0x00030d40

08007014 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	460b      	mov	r3, r1
 800701e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007020:	2010      	movs	r0, #16
 8007022:	f002 f8ef 	bl	8009204 <USBD_static_malloc>
 8007026:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d109      	bne.n	8007042 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	32b0      	adds	r2, #176	; 0xb0
 8007038:	2100      	movs	r1, #0
 800703a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800703e:	2302      	movs	r3, #2
 8007040:	e048      	b.n	80070d4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	32b0      	adds	r2, #176	; 0xb0
 800704c:	68f9      	ldr	r1, [r7, #12]
 800704e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	32b0      	adds	r2, #176	; 0xb0
 800705c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	7c1b      	ldrb	r3, [r3, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d10d      	bne.n	800708a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800706e:	4b1b      	ldr	r3, [pc, #108]	; (80070dc <USBD_HID_Init+0xc8>)
 8007070:	781b      	ldrb	r3, [r3, #0]
 8007072:	f003 020f 	and.w	r2, r3, #15
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	4613      	mov	r3, r2
 800707a:	009b      	lsls	r3, r3, #2
 800707c:	4413      	add	r3, r2
 800707e:	009b      	lsls	r3, r3, #2
 8007080:	440b      	add	r3, r1
 8007082:	3326      	adds	r3, #38	; 0x26
 8007084:	2207      	movs	r2, #7
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	e00c      	b.n	80070a4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800708a:	4b14      	ldr	r3, [pc, #80]	; (80070dc <USBD_HID_Init+0xc8>)
 800708c:	781b      	ldrb	r3, [r3, #0]
 800708e:	f003 020f 	and.w	r2, r3, #15
 8007092:	6879      	ldr	r1, [r7, #4]
 8007094:	4613      	mov	r3, r2
 8007096:	009b      	lsls	r3, r3, #2
 8007098:	4413      	add	r3, r2
 800709a:	009b      	lsls	r3, r3, #2
 800709c:	440b      	add	r3, r1
 800709e:	3326      	adds	r3, #38	; 0x26
 80070a0:	220a      	movs	r2, #10
 80070a2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80070a4:	4b0d      	ldr	r3, [pc, #52]	; (80070dc <USBD_HID_Init+0xc8>)
 80070a6:	7819      	ldrb	r1, [r3, #0]
 80070a8:	2304      	movs	r3, #4
 80070aa:	2203      	movs	r2, #3
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f001 ff98 	bl	8008fe2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80070b2:	4b0a      	ldr	r3, [pc, #40]	; (80070dc <USBD_HID_Init+0xc8>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	f003 020f 	and.w	r2, r3, #15
 80070ba:	6879      	ldr	r1, [r7, #4]
 80070bc:	4613      	mov	r3, r2
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	4413      	add	r3, r2
 80070c2:	009b      	lsls	r3, r3, #2
 80070c4:	440b      	add	r3, r1
 80070c6:	3324      	adds	r3, #36	; 0x24
 80070c8:	2201      	movs	r2, #1
 80070ca:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	2200      	movs	r2, #0
 80070d0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}
 80070dc:	200000ea 	.word	0x200000ea

080070e0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80070ec:	4b1f      	ldr	r3, [pc, #124]	; (800716c <USBD_HID_DeInit+0x8c>)
 80070ee:	781b      	ldrb	r3, [r3, #0]
 80070f0:	4619      	mov	r1, r3
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f001 ff9b 	bl	800902e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80070f8:	4b1c      	ldr	r3, [pc, #112]	; (800716c <USBD_HID_DeInit+0x8c>)
 80070fa:	781b      	ldrb	r3, [r3, #0]
 80070fc:	f003 020f 	and.w	r2, r3, #15
 8007100:	6879      	ldr	r1, [r7, #4]
 8007102:	4613      	mov	r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	4413      	add	r3, r2
 8007108:	009b      	lsls	r3, r3, #2
 800710a:	440b      	add	r3, r1
 800710c:	3324      	adds	r3, #36	; 0x24
 800710e:	2200      	movs	r2, #0
 8007110:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8007112:	4b16      	ldr	r3, [pc, #88]	; (800716c <USBD_HID_DeInit+0x8c>)
 8007114:	781b      	ldrb	r3, [r3, #0]
 8007116:	f003 020f 	and.w	r2, r3, #15
 800711a:	6879      	ldr	r1, [r7, #4]
 800711c:	4613      	mov	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	4413      	add	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	440b      	add	r3, r1
 8007126:	3326      	adds	r3, #38	; 0x26
 8007128:	2200      	movs	r2, #0
 800712a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	32b0      	adds	r2, #176	; 0xb0
 8007136:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d011      	beq.n	8007162 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	32b0      	adds	r2, #176	; 0xb0
 8007148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800714c:	4618      	mov	r0, r3
 800714e:	f002 f867 	bl	8009220 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	32b0      	adds	r2, #176	; 0xb0
 800715c:	2100      	movs	r1, #0
 800715e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8007162:	2300      	movs	r3, #0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}
 800716c:	200000ea 	.word	0x200000ea

08007170 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	32b0      	adds	r2, #176	; 0xb0
 8007184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007188:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800718a:	2300      	movs	r3, #0
 800718c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800718e:	2300      	movs	r3, #0
 8007190:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2b00      	cmp	r3, #0
 8007196:	d101      	bne.n	800719c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8007198:	2303      	movs	r3, #3
 800719a:	e0e8      	b.n	800736e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	781b      	ldrb	r3, [r3, #0]
 80071a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d046      	beq.n	8007236 <USBD_HID_Setup+0xc6>
 80071a8:	2b20      	cmp	r3, #32
 80071aa:	f040 80d8 	bne.w	800735e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	785b      	ldrb	r3, [r3, #1]
 80071b2:	3b02      	subs	r3, #2
 80071b4:	2b09      	cmp	r3, #9
 80071b6:	d836      	bhi.n	8007226 <USBD_HID_Setup+0xb6>
 80071b8:	a201      	add	r2, pc, #4	; (adr r2, 80071c0 <USBD_HID_Setup+0x50>)
 80071ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80071be:	bf00      	nop
 80071c0:	08007217 	.word	0x08007217
 80071c4:	080071f7 	.word	0x080071f7
 80071c8:	08007227 	.word	0x08007227
 80071cc:	08007227 	.word	0x08007227
 80071d0:	08007227 	.word	0x08007227
 80071d4:	08007227 	.word	0x08007227
 80071d8:	08007227 	.word	0x08007227
 80071dc:	08007227 	.word	0x08007227
 80071e0:	08007205 	.word	0x08007205
 80071e4:	080071e9 	.word	0x080071e9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	885b      	ldrh	r3, [r3, #2]
 80071ec:	b2db      	uxtb	r3, r3
 80071ee:	461a      	mov	r2, r3
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	601a      	str	r2, [r3, #0]
          break;
 80071f4:	e01e      	b.n	8007234 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	4619      	mov	r1, r3
 80071fc:	6878      	ldr	r0, [r7, #4]
 80071fe:	f001 fba5 	bl	800894c <USBD_CtlSendData>
          break;
 8007202:	e017      	b.n	8007234 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007204:	683b      	ldr	r3, [r7, #0]
 8007206:	885b      	ldrh	r3, [r3, #2]
 8007208:	0a1b      	lsrs	r3, r3, #8
 800720a:	b29b      	uxth	r3, r3
 800720c:	b2db      	uxtb	r3, r3
 800720e:	461a      	mov	r2, r3
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	605a      	str	r2, [r3, #4]
          break;
 8007214:	e00e      	b.n	8007234 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	3304      	adds	r3, #4
 800721a:	2201      	movs	r2, #1
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f001 fb94 	bl	800894c <USBD_CtlSendData>
          break;
 8007224:	e006      	b.n	8007234 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8007226:	6839      	ldr	r1, [r7, #0]
 8007228:	6878      	ldr	r0, [r7, #4]
 800722a:	f001 fb1e 	bl	800886a <USBD_CtlError>
          ret = USBD_FAIL;
 800722e:	2303      	movs	r3, #3
 8007230:	75fb      	strb	r3, [r7, #23]
          break;
 8007232:	bf00      	nop
      }
      break;
 8007234:	e09a      	b.n	800736c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	785b      	ldrb	r3, [r3, #1]
 800723a:	2b0b      	cmp	r3, #11
 800723c:	f200 8086 	bhi.w	800734c <USBD_HID_Setup+0x1dc>
 8007240:	a201      	add	r2, pc, #4	; (adr r2, 8007248 <USBD_HID_Setup+0xd8>)
 8007242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007246:	bf00      	nop
 8007248:	08007279 	.word	0x08007279
 800724c:	0800735b 	.word	0x0800735b
 8007250:	0800734d 	.word	0x0800734d
 8007254:	0800734d 	.word	0x0800734d
 8007258:	0800734d 	.word	0x0800734d
 800725c:	0800734d 	.word	0x0800734d
 8007260:	080072a3 	.word	0x080072a3
 8007264:	0800734d 	.word	0x0800734d
 8007268:	0800734d 	.word	0x0800734d
 800726c:	0800734d 	.word	0x0800734d
 8007270:	080072fb 	.word	0x080072fb
 8007274:	08007325 	.word	0x08007325
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b03      	cmp	r3, #3
 8007282:	d107      	bne.n	8007294 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007284:	f107 030a 	add.w	r3, r7, #10
 8007288:	2202      	movs	r2, #2
 800728a:	4619      	mov	r1, r3
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f001 fb5d 	bl	800894c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007292:	e063      	b.n	800735c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007294:	6839      	ldr	r1, [r7, #0]
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f001 fae7 	bl	800886a <USBD_CtlError>
            ret = USBD_FAIL;
 800729c:	2303      	movs	r3, #3
 800729e:	75fb      	strb	r3, [r7, #23]
          break;
 80072a0:	e05c      	b.n	800735c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80072a2:	683b      	ldr	r3, [r7, #0]
 80072a4:	885b      	ldrh	r3, [r3, #2]
 80072a6:	0a1b      	lsrs	r3, r3, #8
 80072a8:	b29b      	uxth	r3, r3
 80072aa:	2b22      	cmp	r3, #34	; 0x22
 80072ac:	d108      	bne.n	80072c0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	88db      	ldrh	r3, [r3, #6]
 80072b2:	2b4a      	cmp	r3, #74	; 0x4a
 80072b4:	bf28      	it	cs
 80072b6:	234a      	movcs	r3, #74	; 0x4a
 80072b8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80072ba:	4b2f      	ldr	r3, [pc, #188]	; (8007378 <USBD_HID_Setup+0x208>)
 80072bc:	613b      	str	r3, [r7, #16]
 80072be:	e015      	b.n	80072ec <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80072c0:	683b      	ldr	r3, [r7, #0]
 80072c2:	885b      	ldrh	r3, [r3, #2]
 80072c4:	0a1b      	lsrs	r3, r3, #8
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	2b21      	cmp	r3, #33	; 0x21
 80072ca:	d108      	bne.n	80072de <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80072cc:	4b2b      	ldr	r3, [pc, #172]	; (800737c <USBD_HID_Setup+0x20c>)
 80072ce:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	88db      	ldrh	r3, [r3, #6]
 80072d4:	2b09      	cmp	r3, #9
 80072d6:	bf28      	it	cs
 80072d8:	2309      	movcs	r3, #9
 80072da:	82bb      	strh	r3, [r7, #20]
 80072dc:	e006      	b.n	80072ec <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80072de:	6839      	ldr	r1, [r7, #0]
 80072e0:	6878      	ldr	r0, [r7, #4]
 80072e2:	f001 fac2 	bl	800886a <USBD_CtlError>
            ret = USBD_FAIL;
 80072e6:	2303      	movs	r3, #3
 80072e8:	75fb      	strb	r3, [r7, #23]
            break;
 80072ea:	e037      	b.n	800735c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80072ec:	8abb      	ldrh	r3, [r7, #20]
 80072ee:	461a      	mov	r2, r3
 80072f0:	6939      	ldr	r1, [r7, #16]
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f001 fb2a 	bl	800894c <USBD_CtlSendData>
          break;
 80072f8:	e030      	b.n	800735c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007300:	b2db      	uxtb	r3, r3
 8007302:	2b03      	cmp	r3, #3
 8007304:	d107      	bne.n	8007316 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	3308      	adds	r3, #8
 800730a:	2201      	movs	r2, #1
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f001 fb1c 	bl	800894c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007314:	e022      	b.n	800735c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8007316:	6839      	ldr	r1, [r7, #0]
 8007318:	6878      	ldr	r0, [r7, #4]
 800731a:	f001 faa6 	bl	800886a <USBD_CtlError>
            ret = USBD_FAIL;
 800731e:	2303      	movs	r3, #3
 8007320:	75fb      	strb	r3, [r7, #23]
          break;
 8007322:	e01b      	b.n	800735c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800732a:	b2db      	uxtb	r3, r3
 800732c:	2b03      	cmp	r3, #3
 800732e:	d106      	bne.n	800733e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	885b      	ldrh	r3, [r3, #2]
 8007334:	b2db      	uxtb	r3, r3
 8007336:	461a      	mov	r2, r3
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800733c:	e00e      	b.n	800735c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800733e:	6839      	ldr	r1, [r7, #0]
 8007340:	6878      	ldr	r0, [r7, #4]
 8007342:	f001 fa92 	bl	800886a <USBD_CtlError>
            ret = USBD_FAIL;
 8007346:	2303      	movs	r3, #3
 8007348:	75fb      	strb	r3, [r7, #23]
          break;
 800734a:	e007      	b.n	800735c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800734c:	6839      	ldr	r1, [r7, #0]
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f001 fa8b 	bl	800886a <USBD_CtlError>
          ret = USBD_FAIL;
 8007354:	2303      	movs	r3, #3
 8007356:	75fb      	strb	r3, [r7, #23]
          break;
 8007358:	e000      	b.n	800735c <USBD_HID_Setup+0x1ec>
          break;
 800735a:	bf00      	nop
      }
      break;
 800735c:	e006      	b.n	800736c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800735e:	6839      	ldr	r1, [r7, #0]
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fa82 	bl	800886a <USBD_CtlError>
      ret = USBD_FAIL;
 8007366:	2303      	movs	r3, #3
 8007368:	75fb      	strb	r3, [r7, #23]
      break;
 800736a:	bf00      	nop
  }

  return (uint8_t)ret;
 800736c:	7dfb      	ldrb	r3, [r7, #23]
}
 800736e:	4618      	mov	r0, r3
 8007370:	3718      	adds	r7, #24
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200000a0 	.word	0x200000a0
 800737c:	20000088 	.word	0x20000088

08007380 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007380:	b580      	push	{r7, lr}
 8007382:	b084      	sub	sp, #16
 8007384:	af00      	add	r7, sp, #0
 8007386:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8007388:	2181      	movs	r1, #129	; 0x81
 800738a:	4809      	ldr	r0, [pc, #36]	; (80073b0 <USBD_HID_GetFSCfgDesc+0x30>)
 800738c:	f000 fc35 	bl	8007bfa <USBD_GetEpDesc>
 8007390:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d002      	beq.n	800739e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	220a      	movs	r2, #10
 800739c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2222      	movs	r2, #34	; 0x22
 80073a2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80073a4:	4b02      	ldr	r3, [pc, #8]	; (80073b0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80073a6:	4618      	mov	r0, r3
 80073a8:	3710      	adds	r7, #16
 80073aa:	46bd      	mov	sp, r7
 80073ac:	bd80      	pop	{r7, pc}
 80073ae:	bf00      	nop
 80073b0:	20000064 	.word	0x20000064

080073b4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b084      	sub	sp, #16
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80073bc:	2181      	movs	r1, #129	; 0x81
 80073be:	4809      	ldr	r0, [pc, #36]	; (80073e4 <USBD_HID_GetHSCfgDesc+0x30>)
 80073c0:	f000 fc1b 	bl	8007bfa <USBD_GetEpDesc>
 80073c4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d002      	beq.n	80073d2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	2207      	movs	r2, #7
 80073d0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2222      	movs	r2, #34	; 0x22
 80073d6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80073d8:	4b02      	ldr	r3, [pc, #8]	; (80073e4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3710      	adds	r7, #16
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}
 80073e2:	bf00      	nop
 80073e4:	20000064 	.word	0x20000064

080073e8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80073f0:	2181      	movs	r1, #129	; 0x81
 80073f2:	4809      	ldr	r0, [pc, #36]	; (8007418 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80073f4:	f000 fc01 	bl	8007bfa <USBD_GetEpDesc>
 80073f8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d002      	beq.n	8007406 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	220a      	movs	r2, #10
 8007404:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2222      	movs	r2, #34	; 0x22
 800740a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800740c:	4b02      	ldr	r3, [pc, #8]	; (8007418 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800740e:	4618      	mov	r0, r3
 8007410:	3710      	adds	r7, #16
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}
 8007416:	bf00      	nop
 8007418:	20000064 	.word	0x20000064

0800741c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	32b0      	adds	r2, #176	; 0xb0
 8007432:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007436:	2200      	movs	r2, #0
 8007438:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	370c      	adds	r7, #12
 8007440:	46bd      	mov	sp, r7
 8007442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007446:	4770      	bx	lr

08007448 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007448:	b480      	push	{r7}
 800744a:	b083      	sub	sp, #12
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	220a      	movs	r2, #10
 8007454:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8007456:	4b03      	ldr	r3, [pc, #12]	; (8007464 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007458:	4618      	mov	r0, r3
 800745a:	370c      	adds	r7, #12
 800745c:	46bd      	mov	sp, r7
 800745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007462:	4770      	bx	lr
 8007464:	20000094 	.word	0x20000094

08007468 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b086      	sub	sp, #24
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d101      	bne.n	8007480 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800747c:	2303      	movs	r3, #3
 800747e:	e01f      	b.n	80074c0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	2200      	movs	r2, #0
 8007484:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2200      	movs	r2, #0
 800748c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2200      	movs	r2, #0
 8007494:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d003      	beq.n	80074a6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	68ba      	ldr	r2, [r7, #8]
 80074a2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2201      	movs	r2, #1
 80074aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	79fa      	ldrb	r2, [r7, #7]
 80074b2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80074b4:	68f8      	ldr	r0, [r7, #12]
 80074b6:	f001 fd2d 	bl	8008f14 <USBD_LL_Init>
 80074ba:	4603      	mov	r3, r0
 80074bc:	75fb      	strb	r3, [r7, #23]

  return ret;
 80074be:	7dfb      	ldrb	r3, [r7, #23]
}
 80074c0:	4618      	mov	r0, r3
 80074c2:	3718      	adds	r7, #24
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b084      	sub	sp, #16
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
 80074d0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80074d2:	2300      	movs	r3, #0
 80074d4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d101      	bne.n	80074e0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80074dc:	2303      	movs	r3, #3
 80074de:	e025      	b.n	800752c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	683a      	ldr	r2, [r7, #0]
 80074e4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	32ae      	adds	r2, #174	; 0xae
 80074f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d00f      	beq.n	800751c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	32ae      	adds	r2, #174	; 0xae
 8007506:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f107 020e 	add.w	r2, r7, #14
 8007510:	4610      	mov	r0, r2
 8007512:	4798      	blx	r3
 8007514:	4602      	mov	r2, r0
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007522:	1c5a      	adds	r2, r3, #1
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800752a:	2300      	movs	r3, #0
}
 800752c:	4618      	mov	r0, r3
 800752e:	3710      	adds	r7, #16
 8007530:	46bd      	mov	sp, r7
 8007532:	bd80      	pop	{r7, pc}

08007534 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b082      	sub	sp, #8
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 fd35 	bl	8008fac <USBD_LL_Start>
 8007542:	4603      	mov	r3, r0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3708      	adds	r7, #8
 8007548:	46bd      	mov	sp, r7
 800754a:	bd80      	pop	{r7, pc}

0800754c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007554:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007556:	4618      	mov	r0, r3
 8007558:	370c      	adds	r7, #12
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr

08007562 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007562:	b580      	push	{r7, lr}
 8007564:	b084      	sub	sp, #16
 8007566:	af00      	add	r7, sp, #0
 8007568:	6078      	str	r0, [r7, #4]
 800756a:	460b      	mov	r3, r1
 800756c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800756e:	2300      	movs	r3, #0
 8007570:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007578:	2b00      	cmp	r3, #0
 800757a:	d009      	beq.n	8007590 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	78fa      	ldrb	r2, [r7, #3]
 8007586:	4611      	mov	r1, r2
 8007588:	6878      	ldr	r0, [r7, #4]
 800758a:	4798      	blx	r3
 800758c:	4603      	mov	r3, r0
 800758e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007590:	7bfb      	ldrb	r3, [r7, #15]
}
 8007592:	4618      	mov	r0, r3
 8007594:	3710      	adds	r7, #16
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}

0800759a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800759a:	b580      	push	{r7, lr}
 800759c:	b084      	sub	sp, #16
 800759e:	af00      	add	r7, sp, #0
 80075a0:	6078      	str	r0, [r7, #4]
 80075a2:	460b      	mov	r3, r1
 80075a4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	78fa      	ldrb	r2, [r7, #3]
 80075b4:	4611      	mov	r1, r2
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	4798      	blx	r3
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80075c0:	2303      	movs	r3, #3
 80075c2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075c6:	4618      	mov	r0, r3
 80075c8:	3710      	adds	r7, #16
 80075ca:	46bd      	mov	sp, r7
 80075cc:	bd80      	pop	{r7, pc}

080075ce <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80075ce:	b580      	push	{r7, lr}
 80075d0:	b084      	sub	sp, #16
 80075d2:	af00      	add	r7, sp, #0
 80075d4:	6078      	str	r0, [r7, #4]
 80075d6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80075de:	6839      	ldr	r1, [r7, #0]
 80075e0:	4618      	mov	r0, r3
 80075e2:	f001 f908 	bl	80087f6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	2201      	movs	r2, #1
 80075ea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80075f4:	461a      	mov	r2, r3
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007602:	f003 031f 	and.w	r3, r3, #31
 8007606:	2b02      	cmp	r3, #2
 8007608:	d01a      	beq.n	8007640 <USBD_LL_SetupStage+0x72>
 800760a:	2b02      	cmp	r3, #2
 800760c:	d822      	bhi.n	8007654 <USBD_LL_SetupStage+0x86>
 800760e:	2b00      	cmp	r3, #0
 8007610:	d002      	beq.n	8007618 <USBD_LL_SetupStage+0x4a>
 8007612:	2b01      	cmp	r3, #1
 8007614:	d00a      	beq.n	800762c <USBD_LL_SetupStage+0x5e>
 8007616:	e01d      	b.n	8007654 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f000 fb5f 	bl	8007ce4 <USBD_StdDevReq>
 8007626:	4603      	mov	r3, r0
 8007628:	73fb      	strb	r3, [r7, #15]
      break;
 800762a:	e020      	b.n	800766e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007632:	4619      	mov	r1, r3
 8007634:	6878      	ldr	r0, [r7, #4]
 8007636:	f000 fbc7 	bl	8007dc8 <USBD_StdItfReq>
 800763a:	4603      	mov	r3, r0
 800763c:	73fb      	strb	r3, [r7, #15]
      break;
 800763e:	e016      	b.n	800766e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007646:	4619      	mov	r1, r3
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fc29 	bl	8007ea0 <USBD_StdEPReq>
 800764e:	4603      	mov	r3, r0
 8007650:	73fb      	strb	r3, [r7, #15]
      break;
 8007652:	e00c      	b.n	800766e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800765a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800765e:	b2db      	uxtb	r3, r3
 8007660:	4619      	mov	r1, r3
 8007662:	6878      	ldr	r0, [r7, #4]
 8007664:	f001 fd02 	bl	800906c <USBD_LL_StallEP>
 8007668:	4603      	mov	r3, r0
 800766a:	73fb      	strb	r3, [r7, #15]
      break;
 800766c:	bf00      	nop
  }

  return ret;
 800766e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007670:	4618      	mov	r0, r3
 8007672:	3710      	adds	r7, #16
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}

08007678 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b086      	sub	sp, #24
 800767c:	af00      	add	r7, sp, #0
 800767e:	60f8      	str	r0, [r7, #12]
 8007680:	460b      	mov	r3, r1
 8007682:	607a      	str	r2, [r7, #4]
 8007684:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007686:	2300      	movs	r3, #0
 8007688:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800768a:	7afb      	ldrb	r3, [r7, #11]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d16e      	bne.n	800776e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007696:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800769e:	2b03      	cmp	r3, #3
 80076a0:	f040 8098 	bne.w	80077d4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80076a4:	693b      	ldr	r3, [r7, #16]
 80076a6:	689a      	ldr	r2, [r3, #8]
 80076a8:	693b      	ldr	r3, [r7, #16]
 80076aa:	68db      	ldr	r3, [r3, #12]
 80076ac:	429a      	cmp	r2, r3
 80076ae:	d913      	bls.n	80076d8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80076b0:	693b      	ldr	r3, [r7, #16]
 80076b2:	689a      	ldr	r2, [r3, #8]
 80076b4:	693b      	ldr	r3, [r7, #16]
 80076b6:	68db      	ldr	r3, [r3, #12]
 80076b8:	1ad2      	subs	r2, r2, r3
 80076ba:	693b      	ldr	r3, [r7, #16]
 80076bc:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80076be:	693b      	ldr	r3, [r7, #16]
 80076c0:	68da      	ldr	r2, [r3, #12]
 80076c2:	693b      	ldr	r3, [r7, #16]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	4293      	cmp	r3, r2
 80076c8:	bf28      	it	cs
 80076ca:	4613      	movcs	r3, r2
 80076cc:	461a      	mov	r2, r3
 80076ce:	6879      	ldr	r1, [r7, #4]
 80076d0:	68f8      	ldr	r0, [r7, #12]
 80076d2:	f001 f967 	bl	80089a4 <USBD_CtlContinueRx>
 80076d6:	e07d      	b.n	80077d4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80076de:	f003 031f 	and.w	r3, r3, #31
 80076e2:	2b02      	cmp	r3, #2
 80076e4:	d014      	beq.n	8007710 <USBD_LL_DataOutStage+0x98>
 80076e6:	2b02      	cmp	r3, #2
 80076e8:	d81d      	bhi.n	8007726 <USBD_LL_DataOutStage+0xae>
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d002      	beq.n	80076f4 <USBD_LL_DataOutStage+0x7c>
 80076ee:	2b01      	cmp	r3, #1
 80076f0:	d003      	beq.n	80076fa <USBD_LL_DataOutStage+0x82>
 80076f2:	e018      	b.n	8007726 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80076f4:	2300      	movs	r3, #0
 80076f6:	75bb      	strb	r3, [r7, #22]
            break;
 80076f8:	e018      	b.n	800772c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007700:	b2db      	uxtb	r3, r3
 8007702:	4619      	mov	r1, r3
 8007704:	68f8      	ldr	r0, [r7, #12]
 8007706:	f000 fa5e 	bl	8007bc6 <USBD_CoreFindIF>
 800770a:	4603      	mov	r3, r0
 800770c:	75bb      	strb	r3, [r7, #22]
            break;
 800770e:	e00d      	b.n	800772c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007716:	b2db      	uxtb	r3, r3
 8007718:	4619      	mov	r1, r3
 800771a:	68f8      	ldr	r0, [r7, #12]
 800771c:	f000 fa60 	bl	8007be0 <USBD_CoreFindEP>
 8007720:	4603      	mov	r3, r0
 8007722:	75bb      	strb	r3, [r7, #22]
            break;
 8007724:	e002      	b.n	800772c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007726:	2300      	movs	r3, #0
 8007728:	75bb      	strb	r3, [r7, #22]
            break;
 800772a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800772c:	7dbb      	ldrb	r3, [r7, #22]
 800772e:	2b00      	cmp	r3, #0
 8007730:	d119      	bne.n	8007766 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007738:	b2db      	uxtb	r3, r3
 800773a:	2b03      	cmp	r3, #3
 800773c:	d113      	bne.n	8007766 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800773e:	7dba      	ldrb	r2, [r7, #22]
 8007740:	68fb      	ldr	r3, [r7, #12]
 8007742:	32ae      	adds	r2, #174	; 0xae
 8007744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007748:	691b      	ldr	r3, [r3, #16]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00b      	beq.n	8007766 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800774e:	7dba      	ldrb	r2, [r7, #22]
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007756:	7dba      	ldrb	r2, [r7, #22]
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	32ae      	adds	r2, #174	; 0xae
 800775c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007760:	691b      	ldr	r3, [r3, #16]
 8007762:	68f8      	ldr	r0, [r7, #12]
 8007764:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f001 f92d 	bl	80089c6 <USBD_CtlSendStatus>
 800776c:	e032      	b.n	80077d4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800776e:	7afb      	ldrb	r3, [r7, #11]
 8007770:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007774:	b2db      	uxtb	r3, r3
 8007776:	4619      	mov	r1, r3
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f000 fa31 	bl	8007be0 <USBD_CoreFindEP>
 800777e:	4603      	mov	r3, r0
 8007780:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007782:	7dbb      	ldrb	r3, [r7, #22]
 8007784:	2bff      	cmp	r3, #255	; 0xff
 8007786:	d025      	beq.n	80077d4 <USBD_LL_DataOutStage+0x15c>
 8007788:	7dbb      	ldrb	r3, [r7, #22]
 800778a:	2b00      	cmp	r3, #0
 800778c:	d122      	bne.n	80077d4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007794:	b2db      	uxtb	r3, r3
 8007796:	2b03      	cmp	r3, #3
 8007798:	d117      	bne.n	80077ca <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800779a:	7dba      	ldrb	r2, [r7, #22]
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	32ae      	adds	r2, #174	; 0xae
 80077a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a4:	699b      	ldr	r3, [r3, #24]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00f      	beq.n	80077ca <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80077aa:	7dba      	ldrb	r2, [r7, #22]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80077b2:	7dba      	ldrb	r2, [r7, #22]
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	32ae      	adds	r2, #174	; 0xae
 80077b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077bc:	699b      	ldr	r3, [r3, #24]
 80077be:	7afa      	ldrb	r2, [r7, #11]
 80077c0:	4611      	mov	r1, r2
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	4798      	blx	r3
 80077c6:	4603      	mov	r3, r0
 80077c8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80077ca:	7dfb      	ldrb	r3, [r7, #23]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80077d0:	7dfb      	ldrb	r3, [r7, #23]
 80077d2:	e000      	b.n	80077d6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80077d4:	2300      	movs	r3, #0
}
 80077d6:	4618      	mov	r0, r3
 80077d8:	3718      	adds	r7, #24
 80077da:	46bd      	mov	sp, r7
 80077dc:	bd80      	pop	{r7, pc}

080077de <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80077de:	b580      	push	{r7, lr}
 80077e0:	b086      	sub	sp, #24
 80077e2:	af00      	add	r7, sp, #0
 80077e4:	60f8      	str	r0, [r7, #12]
 80077e6:	460b      	mov	r3, r1
 80077e8:	607a      	str	r2, [r7, #4]
 80077ea:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80077ec:	7afb      	ldrb	r3, [r7, #11]
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d16f      	bne.n	80078d2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	3314      	adds	r3, #20
 80077f6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d15a      	bne.n	80078b8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	689a      	ldr	r2, [r3, #8]
 8007806:	693b      	ldr	r3, [r7, #16]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	429a      	cmp	r2, r3
 800780c:	d914      	bls.n	8007838 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	689a      	ldr	r2, [r3, #8]
 8007812:	693b      	ldr	r3, [r7, #16]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	1ad2      	subs	r2, r2, r3
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800781c:	693b      	ldr	r3, [r7, #16]
 800781e:	689b      	ldr	r3, [r3, #8]
 8007820:	461a      	mov	r2, r3
 8007822:	6879      	ldr	r1, [r7, #4]
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f001 f8ac 	bl	8008982 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800782a:	2300      	movs	r3, #0
 800782c:	2200      	movs	r2, #0
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fcc5 	bl	80091c0 <USBD_LL_PrepareReceive>
 8007836:	e03f      	b.n	80078b8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007838:	693b      	ldr	r3, [r7, #16]
 800783a:	68da      	ldr	r2, [r3, #12]
 800783c:	693b      	ldr	r3, [r7, #16]
 800783e:	689b      	ldr	r3, [r3, #8]
 8007840:	429a      	cmp	r2, r3
 8007842:	d11c      	bne.n	800787e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	693b      	ldr	r3, [r7, #16]
 800784a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800784c:	429a      	cmp	r2, r3
 800784e:	d316      	bcc.n	800787e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800785a:	429a      	cmp	r2, r3
 800785c:	d20f      	bcs.n	800787e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800785e:	2200      	movs	r2, #0
 8007860:	2100      	movs	r1, #0
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f001 f88d 	bl	8008982 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	2200      	movs	r2, #0
 800786c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007870:	2300      	movs	r3, #0
 8007872:	2200      	movs	r2, #0
 8007874:	2100      	movs	r1, #0
 8007876:	68f8      	ldr	r0, [r7, #12]
 8007878:	f001 fca2 	bl	80091c0 <USBD_LL_PrepareReceive>
 800787c:	e01c      	b.n	80078b8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b03      	cmp	r3, #3
 8007888:	d10f      	bne.n	80078aa <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d009      	beq.n	80078aa <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80078a4:	68db      	ldr	r3, [r3, #12]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80078aa:	2180      	movs	r1, #128	; 0x80
 80078ac:	68f8      	ldr	r0, [r7, #12]
 80078ae:	f001 fbdd 	bl	800906c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f001 f89a 	bl	80089ec <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d03a      	beq.n	8007938 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f7ff fe42 	bl	800754c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	2200      	movs	r2, #0
 80078cc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80078d0:	e032      	b.n	8007938 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80078d2:	7afb      	ldrb	r3, [r7, #11]
 80078d4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80078d8:	b2db      	uxtb	r3, r3
 80078da:	4619      	mov	r1, r3
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f97f 	bl	8007be0 <USBD_CoreFindEP>
 80078e2:	4603      	mov	r3, r0
 80078e4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80078e6:	7dfb      	ldrb	r3, [r7, #23]
 80078e8:	2bff      	cmp	r3, #255	; 0xff
 80078ea:	d025      	beq.n	8007938 <USBD_LL_DataInStage+0x15a>
 80078ec:	7dfb      	ldrb	r3, [r7, #23]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d122      	bne.n	8007938 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078f8:	b2db      	uxtb	r3, r3
 80078fa:	2b03      	cmp	r3, #3
 80078fc:	d11c      	bne.n	8007938 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80078fe:	7dfa      	ldrb	r2, [r7, #23]
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	32ae      	adds	r2, #174	; 0xae
 8007904:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007908:	695b      	ldr	r3, [r3, #20]
 800790a:	2b00      	cmp	r3, #0
 800790c:	d014      	beq.n	8007938 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800790e:	7dfa      	ldrb	r2, [r7, #23]
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007916:	7dfa      	ldrb	r2, [r7, #23]
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	32ae      	adds	r2, #174	; 0xae
 800791c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007920:	695b      	ldr	r3, [r3, #20]
 8007922:	7afa      	ldrb	r2, [r7, #11]
 8007924:	4611      	mov	r1, r2
 8007926:	68f8      	ldr	r0, [r7, #12]
 8007928:	4798      	blx	r3
 800792a:	4603      	mov	r3, r0
 800792c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800792e:	7dbb      	ldrb	r3, [r7, #22]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d001      	beq.n	8007938 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007934:	7dbb      	ldrb	r3, [r7, #22]
 8007936:	e000      	b.n	800793a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	3718      	adds	r7, #24
 800793e:	46bd      	mov	sp, r7
 8007940:	bd80      	pop	{r7, pc}

08007942 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007942:	b580      	push	{r7, lr}
 8007944:	b084      	sub	sp, #16
 8007946:	af00      	add	r7, sp, #0
 8007948:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800794a:	2300      	movs	r3, #0
 800794c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2201      	movs	r2, #1
 8007952:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	2200      	movs	r2, #0
 800795a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2200      	movs	r2, #0
 8007968:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800797a:	2b00      	cmp	r3, #0
 800797c:	d014      	beq.n	80079a8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00e      	beq.n	80079a8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	687a      	ldr	r2, [r7, #4]
 8007994:	6852      	ldr	r2, [r2, #4]
 8007996:	b2d2      	uxtb	r2, r2
 8007998:	4611      	mov	r1, r2
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	4798      	blx	r3
 800799e:	4603      	mov	r3, r0
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d001      	beq.n	80079a8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80079a4:	2303      	movs	r3, #3
 80079a6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079a8:	2340      	movs	r3, #64	; 0x40
 80079aa:	2200      	movs	r2, #0
 80079ac:	2100      	movs	r1, #0
 80079ae:	6878      	ldr	r0, [r7, #4]
 80079b0:	f001 fb17 	bl	8008fe2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2240      	movs	r2, #64	; 0x40
 80079c0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079c4:	2340      	movs	r3, #64	; 0x40
 80079c6:	2200      	movs	r2, #0
 80079c8:	2180      	movs	r1, #128	; 0x80
 80079ca:	6878      	ldr	r0, [r7, #4]
 80079cc:	f001 fb09 	bl	8008fe2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2240      	movs	r2, #64	; 0x40
 80079da:	621a      	str	r2, [r3, #32]

  return ret;
 80079dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80079de:	4618      	mov	r0, r3
 80079e0:	3710      	adds	r7, #16
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80079e6:	b480      	push	{r7}
 80079e8:	b083      	sub	sp, #12
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	6078      	str	r0, [r7, #4]
 80079ee:	460b      	mov	r3, r1
 80079f0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	78fa      	ldrb	r2, [r7, #3]
 80079f6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80079f8:	2300      	movs	r3, #0
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	370c      	adds	r7, #12
 80079fe:	46bd      	mov	sp, r7
 8007a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a04:	4770      	bx	lr

08007a06 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a06:	b480      	push	{r7}
 8007a08:	b083      	sub	sp, #12
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a14:	b2da      	uxtb	r2, r3
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2204      	movs	r2, #4
 8007a20:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a24:	2300      	movs	r3, #0
}
 8007a26:	4618      	mov	r0, r3
 8007a28:	370c      	adds	r7, #12
 8007a2a:	46bd      	mov	sp, r7
 8007a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a30:	4770      	bx	lr

08007a32 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a32:	b480      	push	{r7}
 8007a34:	b083      	sub	sp, #12
 8007a36:	af00      	add	r7, sp, #0
 8007a38:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a40:	b2db      	uxtb	r3, r3
 8007a42:	2b04      	cmp	r3, #4
 8007a44:	d106      	bne.n	8007a54 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007a4c:	b2da      	uxtb	r2, r3
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr

08007a62 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	b082      	sub	sp, #8
 8007a66:	af00      	add	r7, sp, #0
 8007a68:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a70:	b2db      	uxtb	r3, r3
 8007a72:	2b03      	cmp	r3, #3
 8007a74:	d110      	bne.n	8007a98 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d00b      	beq.n	8007a98 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a86:	69db      	ldr	r3, [r3, #28]
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d005      	beq.n	8007a98 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a92:	69db      	ldr	r3, [r3, #28]
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8007a98:	2300      	movs	r3, #0
}
 8007a9a:	4618      	mov	r0, r3
 8007a9c:	3708      	adds	r7, #8
 8007a9e:	46bd      	mov	sp, r7
 8007aa0:	bd80      	pop	{r7, pc}

08007aa2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8007aa2:	b580      	push	{r7, lr}
 8007aa4:	b082      	sub	sp, #8
 8007aa6:	af00      	add	r7, sp, #0
 8007aa8:	6078      	str	r0, [r7, #4]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	32ae      	adds	r2, #174	; 0xae
 8007ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d101      	bne.n	8007ac4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8007ac0:	2303      	movs	r3, #3
 8007ac2:	e01c      	b.n	8007afe <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007aca:	b2db      	uxtb	r3, r3
 8007acc:	2b03      	cmp	r3, #3
 8007ace:	d115      	bne.n	8007afc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	32ae      	adds	r2, #174	; 0xae
 8007ada:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ade:	6a1b      	ldr	r3, [r3, #32]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00b      	beq.n	8007afc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	32ae      	adds	r2, #174	; 0xae
 8007aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007af2:	6a1b      	ldr	r3, [r3, #32]
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	4611      	mov	r1, r2
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007afc:	2300      	movs	r3, #0
}
 8007afe:	4618      	mov	r0, r3
 8007b00:	3708      	adds	r7, #8
 8007b02:	46bd      	mov	sp, r7
 8007b04:	bd80      	pop	{r7, pc}

08007b06 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8007b06:	b580      	push	{r7, lr}
 8007b08:	b082      	sub	sp, #8
 8007b0a:	af00      	add	r7, sp, #0
 8007b0c:	6078      	str	r0, [r7, #4]
 8007b0e:	460b      	mov	r3, r1
 8007b10:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	32ae      	adds	r2, #174	; 0xae
 8007b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d101      	bne.n	8007b28 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8007b24:	2303      	movs	r3, #3
 8007b26:	e01c      	b.n	8007b62 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007b2e:	b2db      	uxtb	r3, r3
 8007b30:	2b03      	cmp	r3, #3
 8007b32:	d115      	bne.n	8007b60 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	32ae      	adds	r2, #174	; 0xae
 8007b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d00b      	beq.n	8007b60 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	32ae      	adds	r2, #174	; 0xae
 8007b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	78fa      	ldrb	r2, [r7, #3]
 8007b5a:	4611      	mov	r1, r2
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007b60:	2300      	movs	r3, #0
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3708      	adds	r7, #8
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007b6a:	b480      	push	{r7}
 8007b6c:	b083      	sub	sp, #12
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007b72:	2300      	movs	r3, #0
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8007b88:	2300      	movs	r3, #0
 8007b8a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d00e      	beq.n	8007bbc <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007ba4:	685b      	ldr	r3, [r3, #4]
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	6852      	ldr	r2, [r2, #4]
 8007baa:	b2d2      	uxtb	r2, r2
 8007bac:	4611      	mov	r1, r2
 8007bae:	6878      	ldr	r0, [r7, #4]
 8007bb0:	4798      	blx	r3
 8007bb2:	4603      	mov	r3, r0
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d001      	beq.n	8007bbc <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8007bb8:	2303      	movs	r3, #3
 8007bba:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007bbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bbe:	4618      	mov	r0, r3
 8007bc0:	3710      	adds	r7, #16
 8007bc2:	46bd      	mov	sp, r7
 8007bc4:	bd80      	pop	{r7, pc}

08007bc6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007bc6:	b480      	push	{r7}
 8007bc8:	b083      	sub	sp, #12
 8007bca:	af00      	add	r7, sp, #0
 8007bcc:	6078      	str	r0, [r7, #4]
 8007bce:	460b      	mov	r3, r1
 8007bd0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bd2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	370c      	adds	r7, #12
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007be0:	b480      	push	{r7}
 8007be2:	b083      	sub	sp, #12
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007bec:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007bee:	4618      	mov	r0, r3
 8007bf0:	370c      	adds	r7, #12
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr

08007bfa <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007bfa:	b580      	push	{r7, lr}
 8007bfc:	b086      	sub	sp, #24
 8007bfe:	af00      	add	r7, sp, #0
 8007c00:	6078      	str	r0, [r7, #4]
 8007c02:	460b      	mov	r3, r1
 8007c04:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	885b      	ldrh	r3, [r3, #2]
 8007c16:	b29a      	uxth	r2, r3
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	781b      	ldrb	r3, [r3, #0]
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	429a      	cmp	r2, r3
 8007c20:	d920      	bls.n	8007c64 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	781b      	ldrb	r3, [r3, #0]
 8007c26:	b29b      	uxth	r3, r3
 8007c28:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8007c2a:	e013      	b.n	8007c54 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007c2c:	f107 030a 	add.w	r3, r7, #10
 8007c30:	4619      	mov	r1, r3
 8007c32:	6978      	ldr	r0, [r7, #20]
 8007c34:	f000 f81b 	bl	8007c6e <USBD_GetNextDesc>
 8007c38:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8007c3a:	697b      	ldr	r3, [r7, #20]
 8007c3c:	785b      	ldrb	r3, [r3, #1]
 8007c3e:	2b05      	cmp	r3, #5
 8007c40:	d108      	bne.n	8007c54 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8007c46:	693b      	ldr	r3, [r7, #16]
 8007c48:	789b      	ldrb	r3, [r3, #2]
 8007c4a:	78fa      	ldrb	r2, [r7, #3]
 8007c4c:	429a      	cmp	r2, r3
 8007c4e:	d008      	beq.n	8007c62 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007c50:	2300      	movs	r3, #0
 8007c52:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	885b      	ldrh	r3, [r3, #2]
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	897b      	ldrh	r3, [r7, #10]
 8007c5c:	429a      	cmp	r2, r3
 8007c5e:	d8e5      	bhi.n	8007c2c <USBD_GetEpDesc+0x32>
 8007c60:	e000      	b.n	8007c64 <USBD_GetEpDesc+0x6a>
          break;
 8007c62:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007c64:	693b      	ldr	r3, [r7, #16]
}
 8007c66:	4618      	mov	r0, r3
 8007c68:	3718      	adds	r7, #24
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007c6e:	b480      	push	{r7}
 8007c70:	b085      	sub	sp, #20
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
 8007c76:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	881a      	ldrh	r2, [r3, #0]
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	781b      	ldrb	r3, [r3, #0]
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	4413      	add	r3, r2
 8007c88:	b29a      	uxth	r2, r3
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	781b      	ldrb	r3, [r3, #0]
 8007c92:	461a      	mov	r2, r3
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4413      	add	r3, r2
 8007c98:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3714      	adds	r7, #20
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ca6:	4770      	bx	lr

08007ca8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8007ca8:	b480      	push	{r7}
 8007caa:	b087      	sub	sp, #28
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	781b      	ldrb	r3, [r3, #0]
 8007cb8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8007cc0:	697b      	ldr	r3, [r7, #20]
 8007cc2:	781b      	ldrb	r3, [r3, #0]
 8007cc4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8007cc6:	8a3b      	ldrh	r3, [r7, #16]
 8007cc8:	021b      	lsls	r3, r3, #8
 8007cca:	b21a      	sxth	r2, r3
 8007ccc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8007cd0:	4313      	orrs	r3, r2
 8007cd2:	b21b      	sxth	r3, r3
 8007cd4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8007cd6:	89fb      	ldrh	r3, [r7, #14]
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	371c      	adds	r7, #28
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr

08007ce4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ce4:	b580      	push	{r7, lr}
 8007ce6:	b084      	sub	sp, #16
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	6078      	str	r0, [r7, #4]
 8007cec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007cee:	2300      	movs	r3, #0
 8007cf0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007cf2:	683b      	ldr	r3, [r7, #0]
 8007cf4:	781b      	ldrb	r3, [r3, #0]
 8007cf6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007cfa:	2b40      	cmp	r3, #64	; 0x40
 8007cfc:	d005      	beq.n	8007d0a <USBD_StdDevReq+0x26>
 8007cfe:	2b40      	cmp	r3, #64	; 0x40
 8007d00:	d857      	bhi.n	8007db2 <USBD_StdDevReq+0xce>
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00f      	beq.n	8007d26 <USBD_StdDevReq+0x42>
 8007d06:	2b20      	cmp	r3, #32
 8007d08:	d153      	bne.n	8007db2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	32ae      	adds	r2, #174	; 0xae
 8007d14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	6839      	ldr	r1, [r7, #0]
 8007d1c:	6878      	ldr	r0, [r7, #4]
 8007d1e:	4798      	blx	r3
 8007d20:	4603      	mov	r3, r0
 8007d22:	73fb      	strb	r3, [r7, #15]
      break;
 8007d24:	e04a      	b.n	8007dbc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	785b      	ldrb	r3, [r3, #1]
 8007d2a:	2b09      	cmp	r3, #9
 8007d2c:	d83b      	bhi.n	8007da6 <USBD_StdDevReq+0xc2>
 8007d2e:	a201      	add	r2, pc, #4	; (adr r2, 8007d34 <USBD_StdDevReq+0x50>)
 8007d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d34:	08007d89 	.word	0x08007d89
 8007d38:	08007d9d 	.word	0x08007d9d
 8007d3c:	08007da7 	.word	0x08007da7
 8007d40:	08007d93 	.word	0x08007d93
 8007d44:	08007da7 	.word	0x08007da7
 8007d48:	08007d67 	.word	0x08007d67
 8007d4c:	08007d5d 	.word	0x08007d5d
 8007d50:	08007da7 	.word	0x08007da7
 8007d54:	08007d7f 	.word	0x08007d7f
 8007d58:	08007d71 	.word	0x08007d71
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007d5c:	6839      	ldr	r1, [r7, #0]
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa3c 	bl	80081dc <USBD_GetDescriptor>
          break;
 8007d64:	e024      	b.n	8007db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007d66:	6839      	ldr	r1, [r7, #0]
 8007d68:	6878      	ldr	r0, [r7, #4]
 8007d6a:	f000 fba1 	bl	80084b0 <USBD_SetAddress>
          break;
 8007d6e:	e01f      	b.n	8007db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007d70:	6839      	ldr	r1, [r7, #0]
 8007d72:	6878      	ldr	r0, [r7, #4]
 8007d74:	f000 fbe0 	bl	8008538 <USBD_SetConfig>
 8007d78:	4603      	mov	r3, r0
 8007d7a:	73fb      	strb	r3, [r7, #15]
          break;
 8007d7c:	e018      	b.n	8007db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007d7e:	6839      	ldr	r1, [r7, #0]
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fc83 	bl	800868c <USBD_GetConfig>
          break;
 8007d86:	e013      	b.n	8007db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007d88:	6839      	ldr	r1, [r7, #0]
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f000 fcb4 	bl	80086f8 <USBD_GetStatus>
          break;
 8007d90:	e00e      	b.n	8007db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007d92:	6839      	ldr	r1, [r7, #0]
 8007d94:	6878      	ldr	r0, [r7, #4]
 8007d96:	f000 fce3 	bl	8008760 <USBD_SetFeature>
          break;
 8007d9a:	e009      	b.n	8007db0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007d9c:	6839      	ldr	r1, [r7, #0]
 8007d9e:	6878      	ldr	r0, [r7, #4]
 8007da0:	f000 fd07 	bl	80087b2 <USBD_ClrFeature>
          break;
 8007da4:	e004      	b.n	8007db0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8007da6:	6839      	ldr	r1, [r7, #0]
 8007da8:	6878      	ldr	r0, [r7, #4]
 8007daa:	f000 fd5e 	bl	800886a <USBD_CtlError>
          break;
 8007dae:	bf00      	nop
      }
      break;
 8007db0:	e004      	b.n	8007dbc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8007db2:	6839      	ldr	r1, [r7, #0]
 8007db4:	6878      	ldr	r0, [r7, #4]
 8007db6:	f000 fd58 	bl	800886a <USBD_CtlError>
      break;
 8007dba:	bf00      	nop
  }

  return ret;
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	3710      	adds	r7, #16
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	bf00      	nop

08007dc8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007dc8:	b580      	push	{r7, lr}
 8007dca:	b084      	sub	sp, #16
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007dd6:	683b      	ldr	r3, [r7, #0]
 8007dd8:	781b      	ldrb	r3, [r3, #0]
 8007dda:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007dde:	2b40      	cmp	r3, #64	; 0x40
 8007de0:	d005      	beq.n	8007dee <USBD_StdItfReq+0x26>
 8007de2:	2b40      	cmp	r3, #64	; 0x40
 8007de4:	d852      	bhi.n	8007e8c <USBD_StdItfReq+0xc4>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d001      	beq.n	8007dee <USBD_StdItfReq+0x26>
 8007dea:	2b20      	cmp	r3, #32
 8007dec:	d14e      	bne.n	8007e8c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007df4:	b2db      	uxtb	r3, r3
 8007df6:	3b01      	subs	r3, #1
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d840      	bhi.n	8007e7e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	889b      	ldrh	r3, [r3, #4]
 8007e00:	b2db      	uxtb	r3, r3
 8007e02:	2b01      	cmp	r3, #1
 8007e04:	d836      	bhi.n	8007e74 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	889b      	ldrh	r3, [r3, #4]
 8007e0a:	b2db      	uxtb	r3, r3
 8007e0c:	4619      	mov	r1, r3
 8007e0e:	6878      	ldr	r0, [r7, #4]
 8007e10:	f7ff fed9 	bl	8007bc6 <USBD_CoreFindIF>
 8007e14:	4603      	mov	r3, r0
 8007e16:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e18:	7bbb      	ldrb	r3, [r7, #14]
 8007e1a:	2bff      	cmp	r3, #255	; 0xff
 8007e1c:	d01d      	beq.n	8007e5a <USBD_StdItfReq+0x92>
 8007e1e:	7bbb      	ldrb	r3, [r7, #14]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d11a      	bne.n	8007e5a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007e24:	7bba      	ldrb	r2, [r7, #14]
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	32ae      	adds	r2, #174	; 0xae
 8007e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e2e:	689b      	ldr	r3, [r3, #8]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d00f      	beq.n	8007e54 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007e34:	7bba      	ldrb	r2, [r7, #14]
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007e3c:	7bba      	ldrb	r2, [r7, #14]
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	32ae      	adds	r2, #174	; 0xae
 8007e42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	6839      	ldr	r1, [r7, #0]
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	4798      	blx	r3
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e52:	e004      	b.n	8007e5e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007e54:	2303      	movs	r3, #3
 8007e56:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007e58:	e001      	b.n	8007e5e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8007e5a:	2303      	movs	r3, #3
 8007e5c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007e5e:	683b      	ldr	r3, [r7, #0]
 8007e60:	88db      	ldrh	r3, [r3, #6]
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d110      	bne.n	8007e88 <USBD_StdItfReq+0xc0>
 8007e66:	7bfb      	ldrb	r3, [r7, #15]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d10d      	bne.n	8007e88 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 fdaa 	bl	80089c6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007e72:	e009      	b.n	8007e88 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007e74:	6839      	ldr	r1, [r7, #0]
 8007e76:	6878      	ldr	r0, [r7, #4]
 8007e78:	f000 fcf7 	bl	800886a <USBD_CtlError>
          break;
 8007e7c:	e004      	b.n	8007e88 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8007e7e:	6839      	ldr	r1, [r7, #0]
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fcf2 	bl	800886a <USBD_CtlError>
          break;
 8007e86:	e000      	b.n	8007e8a <USBD_StdItfReq+0xc2>
          break;
 8007e88:	bf00      	nop
      }
      break;
 8007e8a:	e004      	b.n	8007e96 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8007e8c:	6839      	ldr	r1, [r7, #0]
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 fceb 	bl	800886a <USBD_CtlError>
      break;
 8007e94:	bf00      	nop
  }

  return ret;
 8007e96:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3710      	adds	r7, #16
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	bd80      	pop	{r7, pc}

08007ea0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b084      	sub	sp, #16
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8007eae:	683b      	ldr	r3, [r7, #0]
 8007eb0:	889b      	ldrh	r3, [r3, #4]
 8007eb2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	781b      	ldrb	r3, [r3, #0]
 8007eb8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007ebc:	2b40      	cmp	r3, #64	; 0x40
 8007ebe:	d007      	beq.n	8007ed0 <USBD_StdEPReq+0x30>
 8007ec0:	2b40      	cmp	r3, #64	; 0x40
 8007ec2:	f200 817f 	bhi.w	80081c4 <USBD_StdEPReq+0x324>
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d02a      	beq.n	8007f20 <USBD_StdEPReq+0x80>
 8007eca:	2b20      	cmp	r3, #32
 8007ecc:	f040 817a 	bne.w	80081c4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8007ed0:	7bbb      	ldrb	r3, [r7, #14]
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	6878      	ldr	r0, [r7, #4]
 8007ed6:	f7ff fe83 	bl	8007be0 <USBD_CoreFindEP>
 8007eda:	4603      	mov	r3, r0
 8007edc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007ede:	7b7b      	ldrb	r3, [r7, #13]
 8007ee0:	2bff      	cmp	r3, #255	; 0xff
 8007ee2:	f000 8174 	beq.w	80081ce <USBD_StdEPReq+0x32e>
 8007ee6:	7b7b      	ldrb	r3, [r7, #13]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	f040 8170 	bne.w	80081ce <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007eee:	7b7a      	ldrb	r2, [r7, #13]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007ef6:	7b7a      	ldrb	r2, [r7, #13]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	32ae      	adds	r2, #174	; 0xae
 8007efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f000 8163 	beq.w	80081ce <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007f08:	7b7a      	ldrb	r2, [r7, #13]
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	32ae      	adds	r2, #174	; 0xae
 8007f0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f12:	689b      	ldr	r3, [r3, #8]
 8007f14:	6839      	ldr	r1, [r7, #0]
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	4798      	blx	r3
 8007f1a:	4603      	mov	r3, r0
 8007f1c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007f1e:	e156      	b.n	80081ce <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	785b      	ldrb	r3, [r3, #1]
 8007f24:	2b03      	cmp	r3, #3
 8007f26:	d008      	beq.n	8007f3a <USBD_StdEPReq+0x9a>
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	f300 8145 	bgt.w	80081b8 <USBD_StdEPReq+0x318>
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	f000 809b 	beq.w	800806a <USBD_StdEPReq+0x1ca>
 8007f34:	2b01      	cmp	r3, #1
 8007f36:	d03c      	beq.n	8007fb2 <USBD_StdEPReq+0x112>
 8007f38:	e13e      	b.n	80081b8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007f40:	b2db      	uxtb	r3, r3
 8007f42:	2b02      	cmp	r3, #2
 8007f44:	d002      	beq.n	8007f4c <USBD_StdEPReq+0xac>
 8007f46:	2b03      	cmp	r3, #3
 8007f48:	d016      	beq.n	8007f78 <USBD_StdEPReq+0xd8>
 8007f4a:	e02c      	b.n	8007fa6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007f4c:	7bbb      	ldrb	r3, [r7, #14]
 8007f4e:	2b00      	cmp	r3, #0
 8007f50:	d00d      	beq.n	8007f6e <USBD_StdEPReq+0xce>
 8007f52:	7bbb      	ldrb	r3, [r7, #14]
 8007f54:	2b80      	cmp	r3, #128	; 0x80
 8007f56:	d00a      	beq.n	8007f6e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f58:	7bbb      	ldrb	r3, [r7, #14]
 8007f5a:	4619      	mov	r1, r3
 8007f5c:	6878      	ldr	r0, [r7, #4]
 8007f5e:	f001 f885 	bl	800906c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007f62:	2180      	movs	r1, #128	; 0x80
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f001 f881 	bl	800906c <USBD_LL_StallEP>
 8007f6a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007f6c:	e020      	b.n	8007fb0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007f6e:	6839      	ldr	r1, [r7, #0]
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	f000 fc7a 	bl	800886a <USBD_CtlError>
              break;
 8007f76:	e01b      	b.n	8007fb0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007f78:	683b      	ldr	r3, [r7, #0]
 8007f7a:	885b      	ldrh	r3, [r3, #2]
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d10e      	bne.n	8007f9e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007f80:	7bbb      	ldrb	r3, [r7, #14]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d00b      	beq.n	8007f9e <USBD_StdEPReq+0xfe>
 8007f86:	7bbb      	ldrb	r3, [r7, #14]
 8007f88:	2b80      	cmp	r3, #128	; 0x80
 8007f8a:	d008      	beq.n	8007f9e <USBD_StdEPReq+0xfe>
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	88db      	ldrh	r3, [r3, #6]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d104      	bne.n	8007f9e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8007f94:	7bbb      	ldrb	r3, [r7, #14]
 8007f96:	4619      	mov	r1, r3
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f001 f867 	bl	800906c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 fd11 	bl	80089c6 <USBD_CtlSendStatus>

              break;
 8007fa4:	e004      	b.n	8007fb0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007fa6:	6839      	ldr	r1, [r7, #0]
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	f000 fc5e 	bl	800886a <USBD_CtlError>
              break;
 8007fae:	bf00      	nop
          }
          break;
 8007fb0:	e107      	b.n	80081c2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb8:	b2db      	uxtb	r3, r3
 8007fba:	2b02      	cmp	r3, #2
 8007fbc:	d002      	beq.n	8007fc4 <USBD_StdEPReq+0x124>
 8007fbe:	2b03      	cmp	r3, #3
 8007fc0:	d016      	beq.n	8007ff0 <USBD_StdEPReq+0x150>
 8007fc2:	e04b      	b.n	800805c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007fc4:	7bbb      	ldrb	r3, [r7, #14]
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d00d      	beq.n	8007fe6 <USBD_StdEPReq+0x146>
 8007fca:	7bbb      	ldrb	r3, [r7, #14]
 8007fcc:	2b80      	cmp	r3, #128	; 0x80
 8007fce:	d00a      	beq.n	8007fe6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007fd0:	7bbb      	ldrb	r3, [r7, #14]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f001 f849 	bl	800906c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007fda:	2180      	movs	r1, #128	; 0x80
 8007fdc:	6878      	ldr	r0, [r7, #4]
 8007fde:	f001 f845 	bl	800906c <USBD_LL_StallEP>
 8007fe2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007fe4:	e040      	b.n	8008068 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007fe6:	6839      	ldr	r1, [r7, #0]
 8007fe8:	6878      	ldr	r0, [r7, #4]
 8007fea:	f000 fc3e 	bl	800886a <USBD_CtlError>
              break;
 8007fee:	e03b      	b.n	8008068 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	885b      	ldrh	r3, [r3, #2]
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d136      	bne.n	8008066 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007ff8:	7bbb      	ldrb	r3, [r7, #14]
 8007ffa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d004      	beq.n	800800c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	4619      	mov	r1, r3
 8008006:	6878      	ldr	r0, [r7, #4]
 8008008:	f001 f84f 	bl	80090aa <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f000 fcda 	bl	80089c6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8008012:	7bbb      	ldrb	r3, [r7, #14]
 8008014:	4619      	mov	r1, r3
 8008016:	6878      	ldr	r0, [r7, #4]
 8008018:	f7ff fde2 	bl	8007be0 <USBD_CoreFindEP>
 800801c:	4603      	mov	r3, r0
 800801e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008020:	7b7b      	ldrb	r3, [r7, #13]
 8008022:	2bff      	cmp	r3, #255	; 0xff
 8008024:	d01f      	beq.n	8008066 <USBD_StdEPReq+0x1c6>
 8008026:	7b7b      	ldrb	r3, [r7, #13]
 8008028:	2b00      	cmp	r3, #0
 800802a:	d11c      	bne.n	8008066 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800802c:	7b7a      	ldrb	r2, [r7, #13]
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8008034:	7b7a      	ldrb	r2, [r7, #13]
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	32ae      	adds	r2, #174	; 0xae
 800803a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800803e:	689b      	ldr	r3, [r3, #8]
 8008040:	2b00      	cmp	r3, #0
 8008042:	d010      	beq.n	8008066 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8008044:	7b7a      	ldrb	r2, [r7, #13]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	32ae      	adds	r2, #174	; 0xae
 800804a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	6839      	ldr	r1, [r7, #0]
 8008052:	6878      	ldr	r0, [r7, #4]
 8008054:	4798      	blx	r3
 8008056:	4603      	mov	r3, r0
 8008058:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800805a:	e004      	b.n	8008066 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800805c:	6839      	ldr	r1, [r7, #0]
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 fc03 	bl	800886a <USBD_CtlError>
              break;
 8008064:	e000      	b.n	8008068 <USBD_StdEPReq+0x1c8>
              break;
 8008066:	bf00      	nop
          }
          break;
 8008068:	e0ab      	b.n	80081c2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b02      	cmp	r3, #2
 8008074:	d002      	beq.n	800807c <USBD_StdEPReq+0x1dc>
 8008076:	2b03      	cmp	r3, #3
 8008078:	d032      	beq.n	80080e0 <USBD_StdEPReq+0x240>
 800807a:	e097      	b.n	80081ac <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800807c:	7bbb      	ldrb	r3, [r7, #14]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d007      	beq.n	8008092 <USBD_StdEPReq+0x1f2>
 8008082:	7bbb      	ldrb	r3, [r7, #14]
 8008084:	2b80      	cmp	r3, #128	; 0x80
 8008086:	d004      	beq.n	8008092 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008088:	6839      	ldr	r1, [r7, #0]
 800808a:	6878      	ldr	r0, [r7, #4]
 800808c:	f000 fbed 	bl	800886a <USBD_CtlError>
                break;
 8008090:	e091      	b.n	80081b6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008092:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008096:	2b00      	cmp	r3, #0
 8008098:	da0b      	bge.n	80080b2 <USBD_StdEPReq+0x212>
 800809a:	7bbb      	ldrb	r3, [r7, #14]
 800809c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80080a0:	4613      	mov	r3, r2
 80080a2:	009b      	lsls	r3, r3, #2
 80080a4:	4413      	add	r3, r2
 80080a6:	009b      	lsls	r3, r3, #2
 80080a8:	3310      	adds	r3, #16
 80080aa:	687a      	ldr	r2, [r7, #4]
 80080ac:	4413      	add	r3, r2
 80080ae:	3304      	adds	r3, #4
 80080b0:	e00b      	b.n	80080ca <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80080b2:	7bbb      	ldrb	r3, [r7, #14]
 80080b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80080b8:	4613      	mov	r3, r2
 80080ba:	009b      	lsls	r3, r3, #2
 80080bc:	4413      	add	r3, r2
 80080be:	009b      	lsls	r3, r3, #2
 80080c0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80080c4:	687a      	ldr	r2, [r7, #4]
 80080c6:	4413      	add	r3, r2
 80080c8:	3304      	adds	r3, #4
 80080ca:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	2200      	movs	r2, #0
 80080d0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	2202      	movs	r2, #2
 80080d6:	4619      	mov	r1, r3
 80080d8:	6878      	ldr	r0, [r7, #4]
 80080da:	f000 fc37 	bl	800894c <USBD_CtlSendData>
              break;
 80080de:	e06a      	b.n	80081b6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80080e0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	da11      	bge.n	800810c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80080e8:	7bbb      	ldrb	r3, [r7, #14]
 80080ea:	f003 020f 	and.w	r2, r3, #15
 80080ee:	6879      	ldr	r1, [r7, #4]
 80080f0:	4613      	mov	r3, r2
 80080f2:	009b      	lsls	r3, r3, #2
 80080f4:	4413      	add	r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	440b      	add	r3, r1
 80080fa:	3324      	adds	r3, #36	; 0x24
 80080fc:	881b      	ldrh	r3, [r3, #0]
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d117      	bne.n	8008132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008102:	6839      	ldr	r1, [r7, #0]
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fbb0 	bl	800886a <USBD_CtlError>
                  break;
 800810a:	e054      	b.n	80081b6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800810c:	7bbb      	ldrb	r3, [r7, #14]
 800810e:	f003 020f 	and.w	r2, r3, #15
 8008112:	6879      	ldr	r1, [r7, #4]
 8008114:	4613      	mov	r3, r2
 8008116:	009b      	lsls	r3, r3, #2
 8008118:	4413      	add	r3, r2
 800811a:	009b      	lsls	r3, r3, #2
 800811c:	440b      	add	r3, r1
 800811e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008122:	881b      	ldrh	r3, [r3, #0]
 8008124:	2b00      	cmp	r3, #0
 8008126:	d104      	bne.n	8008132 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8008128:	6839      	ldr	r1, [r7, #0]
 800812a:	6878      	ldr	r0, [r7, #4]
 800812c:	f000 fb9d 	bl	800886a <USBD_CtlError>
                  break;
 8008130:	e041      	b.n	80081b6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008132:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008136:	2b00      	cmp	r3, #0
 8008138:	da0b      	bge.n	8008152 <USBD_StdEPReq+0x2b2>
 800813a:	7bbb      	ldrb	r3, [r7, #14]
 800813c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008140:	4613      	mov	r3, r2
 8008142:	009b      	lsls	r3, r3, #2
 8008144:	4413      	add	r3, r2
 8008146:	009b      	lsls	r3, r3, #2
 8008148:	3310      	adds	r3, #16
 800814a:	687a      	ldr	r2, [r7, #4]
 800814c:	4413      	add	r3, r2
 800814e:	3304      	adds	r3, #4
 8008150:	e00b      	b.n	800816a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008152:	7bbb      	ldrb	r3, [r7, #14]
 8008154:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008158:	4613      	mov	r3, r2
 800815a:	009b      	lsls	r3, r3, #2
 800815c:	4413      	add	r3, r2
 800815e:	009b      	lsls	r3, r3, #2
 8008160:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008164:	687a      	ldr	r2, [r7, #4]
 8008166:	4413      	add	r3, r2
 8008168:	3304      	adds	r3, #4
 800816a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800816c:	7bbb      	ldrb	r3, [r7, #14]
 800816e:	2b00      	cmp	r3, #0
 8008170:	d002      	beq.n	8008178 <USBD_StdEPReq+0x2d8>
 8008172:	7bbb      	ldrb	r3, [r7, #14]
 8008174:	2b80      	cmp	r3, #128	; 0x80
 8008176:	d103      	bne.n	8008180 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008178:	68bb      	ldr	r3, [r7, #8]
 800817a:	2200      	movs	r2, #0
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	e00e      	b.n	800819e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008180:	7bbb      	ldrb	r3, [r7, #14]
 8008182:	4619      	mov	r1, r3
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 ffaf 	bl	80090e8 <USBD_LL_IsStallEP>
 800818a:	4603      	mov	r3, r0
 800818c:	2b00      	cmp	r3, #0
 800818e:	d003      	beq.n	8008198 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8008190:	68bb      	ldr	r3, [r7, #8]
 8008192:	2201      	movs	r2, #1
 8008194:	601a      	str	r2, [r3, #0]
 8008196:	e002      	b.n	800819e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008198:	68bb      	ldr	r3, [r7, #8]
 800819a:	2200      	movs	r2, #0
 800819c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800819e:	68bb      	ldr	r3, [r7, #8]
 80081a0:	2202      	movs	r2, #2
 80081a2:	4619      	mov	r1, r3
 80081a4:	6878      	ldr	r0, [r7, #4]
 80081a6:	f000 fbd1 	bl	800894c <USBD_CtlSendData>
              break;
 80081aa:	e004      	b.n	80081b6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80081ac:	6839      	ldr	r1, [r7, #0]
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	f000 fb5b 	bl	800886a <USBD_CtlError>
              break;
 80081b4:	bf00      	nop
          }
          break;
 80081b6:	e004      	b.n	80081c2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80081b8:	6839      	ldr	r1, [r7, #0]
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fb55 	bl	800886a <USBD_CtlError>
          break;
 80081c0:	bf00      	nop
      }
      break;
 80081c2:	e005      	b.n	80081d0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80081c4:	6839      	ldr	r1, [r7, #0]
 80081c6:	6878      	ldr	r0, [r7, #4]
 80081c8:	f000 fb4f 	bl	800886a <USBD_CtlError>
      break;
 80081cc:	e000      	b.n	80081d0 <USBD_StdEPReq+0x330>
      break;
 80081ce:	bf00      	nop
  }

  return ret;
 80081d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
	...

080081dc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80081e6:	2300      	movs	r3, #0
 80081e8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80081ee:	2300      	movs	r3, #0
 80081f0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	885b      	ldrh	r3, [r3, #2]
 80081f6:	0a1b      	lsrs	r3, r3, #8
 80081f8:	b29b      	uxth	r3, r3
 80081fa:	3b01      	subs	r3, #1
 80081fc:	2b06      	cmp	r3, #6
 80081fe:	f200 8128 	bhi.w	8008452 <USBD_GetDescriptor+0x276>
 8008202:	a201      	add	r2, pc, #4	; (adr r2, 8008208 <USBD_GetDescriptor+0x2c>)
 8008204:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008208:	08008225 	.word	0x08008225
 800820c:	0800823d 	.word	0x0800823d
 8008210:	0800827d 	.word	0x0800827d
 8008214:	08008453 	.word	0x08008453
 8008218:	08008453 	.word	0x08008453
 800821c:	080083f3 	.word	0x080083f3
 8008220:	0800841f 	.word	0x0800841f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	687a      	ldr	r2, [r7, #4]
 800822e:	7c12      	ldrb	r2, [r2, #16]
 8008230:	f107 0108 	add.w	r1, r7, #8
 8008234:	4610      	mov	r0, r2
 8008236:	4798      	blx	r3
 8008238:	60f8      	str	r0, [r7, #12]
      break;
 800823a:	e112      	b.n	8008462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	7c1b      	ldrb	r3, [r3, #16]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10d      	bne.n	8008260 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800824a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800824c:	f107 0208 	add.w	r2, r7, #8
 8008250:	4610      	mov	r0, r2
 8008252:	4798      	blx	r3
 8008254:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008256:	68fb      	ldr	r3, [r7, #12]
 8008258:	3301      	adds	r3, #1
 800825a:	2202      	movs	r2, #2
 800825c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800825e:	e100      	b.n	8008462 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008266:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008268:	f107 0208 	add.w	r2, r7, #8
 800826c:	4610      	mov	r0, r2
 800826e:	4798      	blx	r3
 8008270:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3301      	adds	r3, #1
 8008276:	2202      	movs	r2, #2
 8008278:	701a      	strb	r2, [r3, #0]
      break;
 800827a:	e0f2      	b.n	8008462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800827c:	683b      	ldr	r3, [r7, #0]
 800827e:	885b      	ldrh	r3, [r3, #2]
 8008280:	b2db      	uxtb	r3, r3
 8008282:	2b05      	cmp	r3, #5
 8008284:	f200 80ac 	bhi.w	80083e0 <USBD_GetDescriptor+0x204>
 8008288:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <USBD_GetDescriptor+0xb4>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082a9 	.word	0x080082a9
 8008294:	080082dd 	.word	0x080082dd
 8008298:	08008311 	.word	0x08008311
 800829c:	08008345 	.word	0x08008345
 80082a0:	08008379 	.word	0x08008379
 80082a4:	080083ad 	.word	0x080083ad
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d00b      	beq.n	80082cc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ba:	685b      	ldr	r3, [r3, #4]
 80082bc:	687a      	ldr	r2, [r7, #4]
 80082be:	7c12      	ldrb	r2, [r2, #16]
 80082c0:	f107 0108 	add.w	r1, r7, #8
 80082c4:	4610      	mov	r0, r2
 80082c6:	4798      	blx	r3
 80082c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082ca:	e091      	b.n	80083f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80082cc:	6839      	ldr	r1, [r7, #0]
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f000 facb 	bl	800886a <USBD_CtlError>
            err++;
 80082d4:	7afb      	ldrb	r3, [r7, #11]
 80082d6:	3301      	adds	r3, #1
 80082d8:	72fb      	strb	r3, [r7, #11]
          break;
 80082da:	e089      	b.n	80083f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082e2:	689b      	ldr	r3, [r3, #8]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d00b      	beq.n	8008300 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80082ee:	689b      	ldr	r3, [r3, #8]
 80082f0:	687a      	ldr	r2, [r7, #4]
 80082f2:	7c12      	ldrb	r2, [r2, #16]
 80082f4:	f107 0108 	add.w	r1, r7, #8
 80082f8:	4610      	mov	r0, r2
 80082fa:	4798      	blx	r3
 80082fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80082fe:	e077      	b.n	80083f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008300:	6839      	ldr	r1, [r7, #0]
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 fab1 	bl	800886a <USBD_CtlError>
            err++;
 8008308:	7afb      	ldrb	r3, [r7, #11]
 800830a:	3301      	adds	r3, #1
 800830c:	72fb      	strb	r3, [r7, #11]
          break;
 800830e:	e06f      	b.n	80083f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d00b      	beq.n	8008334 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008322:	68db      	ldr	r3, [r3, #12]
 8008324:	687a      	ldr	r2, [r7, #4]
 8008326:	7c12      	ldrb	r2, [r2, #16]
 8008328:	f107 0108 	add.w	r1, r7, #8
 800832c:	4610      	mov	r0, r2
 800832e:	4798      	blx	r3
 8008330:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008332:	e05d      	b.n	80083f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008334:	6839      	ldr	r1, [r7, #0]
 8008336:	6878      	ldr	r0, [r7, #4]
 8008338:	f000 fa97 	bl	800886a <USBD_CtlError>
            err++;
 800833c:	7afb      	ldrb	r3, [r7, #11]
 800833e:	3301      	adds	r3, #1
 8008340:	72fb      	strb	r3, [r7, #11]
          break;
 8008342:	e055      	b.n	80083f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800834a:	691b      	ldr	r3, [r3, #16]
 800834c:	2b00      	cmp	r3, #0
 800834e:	d00b      	beq.n	8008368 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008356:	691b      	ldr	r3, [r3, #16]
 8008358:	687a      	ldr	r2, [r7, #4]
 800835a:	7c12      	ldrb	r2, [r2, #16]
 800835c:	f107 0108 	add.w	r1, r7, #8
 8008360:	4610      	mov	r0, r2
 8008362:	4798      	blx	r3
 8008364:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008366:	e043      	b.n	80083f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008368:	6839      	ldr	r1, [r7, #0]
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f000 fa7d 	bl	800886a <USBD_CtlError>
            err++;
 8008370:	7afb      	ldrb	r3, [r7, #11]
 8008372:	3301      	adds	r3, #1
 8008374:	72fb      	strb	r3, [r7, #11]
          break;
 8008376:	e03b      	b.n	80083f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800837e:	695b      	ldr	r3, [r3, #20]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d00b      	beq.n	800839c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800838a:	695b      	ldr	r3, [r3, #20]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	7c12      	ldrb	r2, [r2, #16]
 8008390:	f107 0108 	add.w	r1, r7, #8
 8008394:	4610      	mov	r0, r2
 8008396:	4798      	blx	r3
 8008398:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800839a:	e029      	b.n	80083f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800839c:	6839      	ldr	r1, [r7, #0]
 800839e:	6878      	ldr	r0, [r7, #4]
 80083a0:	f000 fa63 	bl	800886a <USBD_CtlError>
            err++;
 80083a4:	7afb      	ldrb	r3, [r7, #11]
 80083a6:	3301      	adds	r3, #1
 80083a8:	72fb      	strb	r3, [r7, #11]
          break;
 80083aa:	e021      	b.n	80083f0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d00b      	beq.n	80083d0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80083be:	699b      	ldr	r3, [r3, #24]
 80083c0:	687a      	ldr	r2, [r7, #4]
 80083c2:	7c12      	ldrb	r2, [r2, #16]
 80083c4:	f107 0108 	add.w	r1, r7, #8
 80083c8:	4610      	mov	r0, r2
 80083ca:	4798      	blx	r3
 80083cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80083ce:	e00f      	b.n	80083f0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80083d0:	6839      	ldr	r1, [r7, #0]
 80083d2:	6878      	ldr	r0, [r7, #4]
 80083d4:	f000 fa49 	bl	800886a <USBD_CtlError>
            err++;
 80083d8:	7afb      	ldrb	r3, [r7, #11]
 80083da:	3301      	adds	r3, #1
 80083dc:	72fb      	strb	r3, [r7, #11]
          break;
 80083de:	e007      	b.n	80083f0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80083e0:	6839      	ldr	r1, [r7, #0]
 80083e2:	6878      	ldr	r0, [r7, #4]
 80083e4:	f000 fa41 	bl	800886a <USBD_CtlError>
          err++;
 80083e8:	7afb      	ldrb	r3, [r7, #11]
 80083ea:	3301      	adds	r3, #1
 80083ec:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80083ee:	bf00      	nop
      }
      break;
 80083f0:	e037      	b.n	8008462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	7c1b      	ldrb	r3, [r3, #16]
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d109      	bne.n	800840e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008402:	f107 0208 	add.w	r2, r7, #8
 8008406:	4610      	mov	r0, r2
 8008408:	4798      	blx	r3
 800840a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800840c:	e029      	b.n	8008462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800840e:	6839      	ldr	r1, [r7, #0]
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f000 fa2a 	bl	800886a <USBD_CtlError>
        err++;
 8008416:	7afb      	ldrb	r3, [r7, #11]
 8008418:	3301      	adds	r3, #1
 800841a:	72fb      	strb	r3, [r7, #11]
      break;
 800841c:	e021      	b.n	8008462 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	7c1b      	ldrb	r3, [r3, #16]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d10d      	bne.n	8008442 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	f107 0208 	add.w	r2, r7, #8
 8008432:	4610      	mov	r0, r2
 8008434:	4798      	blx	r3
 8008436:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	3301      	adds	r3, #1
 800843c:	2207      	movs	r2, #7
 800843e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008440:	e00f      	b.n	8008462 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008442:	6839      	ldr	r1, [r7, #0]
 8008444:	6878      	ldr	r0, [r7, #4]
 8008446:	f000 fa10 	bl	800886a <USBD_CtlError>
        err++;
 800844a:	7afb      	ldrb	r3, [r7, #11]
 800844c:	3301      	adds	r3, #1
 800844e:	72fb      	strb	r3, [r7, #11]
      break;
 8008450:	e007      	b.n	8008462 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008452:	6839      	ldr	r1, [r7, #0]
 8008454:	6878      	ldr	r0, [r7, #4]
 8008456:	f000 fa08 	bl	800886a <USBD_CtlError>
      err++;
 800845a:	7afb      	ldrb	r3, [r7, #11]
 800845c:	3301      	adds	r3, #1
 800845e:	72fb      	strb	r3, [r7, #11]
      break;
 8008460:	bf00      	nop
  }

  if (err != 0U)
 8008462:	7afb      	ldrb	r3, [r7, #11]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d11e      	bne.n	80084a6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	88db      	ldrh	r3, [r3, #6]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d016      	beq.n	800849e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008470:	893b      	ldrh	r3, [r7, #8]
 8008472:	2b00      	cmp	r3, #0
 8008474:	d00e      	beq.n	8008494 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008476:	683b      	ldr	r3, [r7, #0]
 8008478:	88da      	ldrh	r2, [r3, #6]
 800847a:	893b      	ldrh	r3, [r7, #8]
 800847c:	4293      	cmp	r3, r2
 800847e:	bf28      	it	cs
 8008480:	4613      	movcs	r3, r2
 8008482:	b29b      	uxth	r3, r3
 8008484:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008486:	893b      	ldrh	r3, [r7, #8]
 8008488:	461a      	mov	r2, r3
 800848a:	68f9      	ldr	r1, [r7, #12]
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f000 fa5d 	bl	800894c <USBD_CtlSendData>
 8008492:	e009      	b.n	80084a8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008494:	6839      	ldr	r1, [r7, #0]
 8008496:	6878      	ldr	r0, [r7, #4]
 8008498:	f000 f9e7 	bl	800886a <USBD_CtlError>
 800849c:	e004      	b.n	80084a8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 fa91 	bl	80089c6 <USBD_CtlSendStatus>
 80084a4:	e000      	b.n	80084a8 <USBD_GetDescriptor+0x2cc>
    return;
 80084a6:	bf00      	nop
  }
}
 80084a8:	3710      	adds	r7, #16
 80084aa:	46bd      	mov	sp, r7
 80084ac:	bd80      	pop	{r7, pc}
 80084ae:	bf00      	nop

080084b0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b084      	sub	sp, #16
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80084ba:	683b      	ldr	r3, [r7, #0]
 80084bc:	889b      	ldrh	r3, [r3, #4]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d131      	bne.n	8008526 <USBD_SetAddress+0x76>
 80084c2:	683b      	ldr	r3, [r7, #0]
 80084c4:	88db      	ldrh	r3, [r3, #6]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d12d      	bne.n	8008526 <USBD_SetAddress+0x76>
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	885b      	ldrh	r3, [r3, #2]
 80084ce:	2b7f      	cmp	r3, #127	; 0x7f
 80084d0:	d829      	bhi.n	8008526 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	885b      	ldrh	r3, [r3, #2]
 80084d6:	b2db      	uxtb	r3, r3
 80084d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084dc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084e4:	b2db      	uxtb	r3, r3
 80084e6:	2b03      	cmp	r3, #3
 80084e8:	d104      	bne.n	80084f4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80084ea:	6839      	ldr	r1, [r7, #0]
 80084ec:	6878      	ldr	r0, [r7, #4]
 80084ee:	f000 f9bc 	bl	800886a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80084f2:	e01d      	b.n	8008530 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	7bfa      	ldrb	r2, [r7, #15]
 80084f8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80084fc:	7bfb      	ldrb	r3, [r7, #15]
 80084fe:	4619      	mov	r1, r3
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f000 fe1d 	bl	8009140 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008506:	6878      	ldr	r0, [r7, #4]
 8008508:	f000 fa5d 	bl	80089c6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800850c:	7bfb      	ldrb	r3, [r7, #15]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d004      	beq.n	800851c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2202      	movs	r2, #2
 8008516:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800851a:	e009      	b.n	8008530 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2201      	movs	r2, #1
 8008520:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008524:	e004      	b.n	8008530 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008526:	6839      	ldr	r1, [r7, #0]
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f000 f99e 	bl	800886a <USBD_CtlError>
  }
}
 800852e:	bf00      	nop
 8008530:	bf00      	nop
 8008532:	3710      	adds	r7, #16
 8008534:	46bd      	mov	sp, r7
 8008536:	bd80      	pop	{r7, pc}

08008538 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008546:	683b      	ldr	r3, [r7, #0]
 8008548:	885b      	ldrh	r3, [r3, #2]
 800854a:	b2da      	uxtb	r2, r3
 800854c:	4b4e      	ldr	r3, [pc, #312]	; (8008688 <USBD_SetConfig+0x150>)
 800854e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008550:	4b4d      	ldr	r3, [pc, #308]	; (8008688 <USBD_SetConfig+0x150>)
 8008552:	781b      	ldrb	r3, [r3, #0]
 8008554:	2b01      	cmp	r3, #1
 8008556:	d905      	bls.n	8008564 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008558:	6839      	ldr	r1, [r7, #0]
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f000 f985 	bl	800886a <USBD_CtlError>
    return USBD_FAIL;
 8008560:	2303      	movs	r3, #3
 8008562:	e08c      	b.n	800867e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800856a:	b2db      	uxtb	r3, r3
 800856c:	2b02      	cmp	r3, #2
 800856e:	d002      	beq.n	8008576 <USBD_SetConfig+0x3e>
 8008570:	2b03      	cmp	r3, #3
 8008572:	d029      	beq.n	80085c8 <USBD_SetConfig+0x90>
 8008574:	e075      	b.n	8008662 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008576:	4b44      	ldr	r3, [pc, #272]	; (8008688 <USBD_SetConfig+0x150>)
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d020      	beq.n	80085c0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800857e:	4b42      	ldr	r3, [pc, #264]	; (8008688 <USBD_SetConfig+0x150>)
 8008580:	781b      	ldrb	r3, [r3, #0]
 8008582:	461a      	mov	r2, r3
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008588:	4b3f      	ldr	r3, [pc, #252]	; (8008688 <USBD_SetConfig+0x150>)
 800858a:	781b      	ldrb	r3, [r3, #0]
 800858c:	4619      	mov	r1, r3
 800858e:	6878      	ldr	r0, [r7, #4]
 8008590:	f7fe ffe7 	bl	8007562 <USBD_SetClassConfig>
 8008594:	4603      	mov	r3, r0
 8008596:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008598:	7bfb      	ldrb	r3, [r7, #15]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d008      	beq.n	80085b0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800859e:	6839      	ldr	r1, [r7, #0]
 80085a0:	6878      	ldr	r0, [r7, #4]
 80085a2:	f000 f962 	bl	800886a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	2202      	movs	r2, #2
 80085aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085ae:	e065      	b.n	800867c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80085b0:	6878      	ldr	r0, [r7, #4]
 80085b2:	f000 fa08 	bl	80089c6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	2203      	movs	r2, #3
 80085ba:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80085be:	e05d      	b.n	800867c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80085c0:	6878      	ldr	r0, [r7, #4]
 80085c2:	f000 fa00 	bl	80089c6 <USBD_CtlSendStatus>
      break;
 80085c6:	e059      	b.n	800867c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80085c8:	4b2f      	ldr	r3, [pc, #188]	; (8008688 <USBD_SetConfig+0x150>)
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d112      	bne.n	80085f6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	2202      	movs	r2, #2
 80085d4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80085d8:	4b2b      	ldr	r3, [pc, #172]	; (8008688 <USBD_SetConfig+0x150>)
 80085da:	781b      	ldrb	r3, [r3, #0]
 80085dc:	461a      	mov	r2, r3
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80085e2:	4b29      	ldr	r3, [pc, #164]	; (8008688 <USBD_SetConfig+0x150>)
 80085e4:	781b      	ldrb	r3, [r3, #0]
 80085e6:	4619      	mov	r1, r3
 80085e8:	6878      	ldr	r0, [r7, #4]
 80085ea:	f7fe ffd6 	bl	800759a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	f000 f9e9 	bl	80089c6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80085f4:	e042      	b.n	800867c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80085f6:	4b24      	ldr	r3, [pc, #144]	; (8008688 <USBD_SetConfig+0x150>)
 80085f8:	781b      	ldrb	r3, [r3, #0]
 80085fa:	461a      	mov	r2, r3
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	685b      	ldr	r3, [r3, #4]
 8008600:	429a      	cmp	r2, r3
 8008602:	d02a      	beq.n	800865a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	b2db      	uxtb	r3, r3
 800860a:	4619      	mov	r1, r3
 800860c:	6878      	ldr	r0, [r7, #4]
 800860e:	f7fe ffc4 	bl	800759a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008612:	4b1d      	ldr	r3, [pc, #116]	; (8008688 <USBD_SetConfig+0x150>)
 8008614:	781b      	ldrb	r3, [r3, #0]
 8008616:	461a      	mov	r2, r3
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800861c:	4b1a      	ldr	r3, [pc, #104]	; (8008688 <USBD_SetConfig+0x150>)
 800861e:	781b      	ldrb	r3, [r3, #0]
 8008620:	4619      	mov	r1, r3
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f7fe ff9d 	bl	8007562 <USBD_SetClassConfig>
 8008628:	4603      	mov	r3, r0
 800862a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800862c:	7bfb      	ldrb	r3, [r7, #15]
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00f      	beq.n	8008652 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008632:	6839      	ldr	r1, [r7, #0]
 8008634:	6878      	ldr	r0, [r7, #4]
 8008636:	f000 f918 	bl	800886a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	b2db      	uxtb	r3, r3
 8008640:	4619      	mov	r1, r3
 8008642:	6878      	ldr	r0, [r7, #4]
 8008644:	f7fe ffa9 	bl	800759a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2202      	movs	r2, #2
 800864c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008650:	e014      	b.n	800867c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008652:	6878      	ldr	r0, [r7, #4]
 8008654:	f000 f9b7 	bl	80089c6 <USBD_CtlSendStatus>
      break;
 8008658:	e010      	b.n	800867c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 f9b3 	bl	80089c6 <USBD_CtlSendStatus>
      break;
 8008660:	e00c      	b.n	800867c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008662:	6839      	ldr	r1, [r7, #0]
 8008664:	6878      	ldr	r0, [r7, #4]
 8008666:	f000 f900 	bl	800886a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800866a:	4b07      	ldr	r3, [pc, #28]	; (8008688 <USBD_SetConfig+0x150>)
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	4619      	mov	r1, r3
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f7fe ff92 	bl	800759a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008676:	2303      	movs	r3, #3
 8008678:	73fb      	strb	r3, [r7, #15]
      break;
 800867a:	bf00      	nop
  }

  return ret;
 800867c:	7bfb      	ldrb	r3, [r7, #15]
}
 800867e:	4618      	mov	r0, r3
 8008680:	3710      	adds	r7, #16
 8008682:	46bd      	mov	sp, r7
 8008684:	bd80      	pop	{r7, pc}
 8008686:	bf00      	nop
 8008688:	200004bc 	.word	0x200004bc

0800868c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
 8008692:	6078      	str	r0, [r7, #4]
 8008694:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008696:	683b      	ldr	r3, [r7, #0]
 8008698:	88db      	ldrh	r3, [r3, #6]
 800869a:	2b01      	cmp	r3, #1
 800869c:	d004      	beq.n	80086a8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 f8e2 	bl	800886a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80086a6:	e023      	b.n	80086f0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	2b02      	cmp	r3, #2
 80086b2:	dc02      	bgt.n	80086ba <USBD_GetConfig+0x2e>
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	dc03      	bgt.n	80086c0 <USBD_GetConfig+0x34>
 80086b8:	e015      	b.n	80086e6 <USBD_GetConfig+0x5a>
 80086ba:	2b03      	cmp	r3, #3
 80086bc:	d00b      	beq.n	80086d6 <USBD_GetConfig+0x4a>
 80086be:	e012      	b.n	80086e6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2200      	movs	r2, #0
 80086c4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3308      	adds	r3, #8
 80086ca:	2201      	movs	r2, #1
 80086cc:	4619      	mov	r1, r3
 80086ce:	6878      	ldr	r0, [r7, #4]
 80086d0:	f000 f93c 	bl	800894c <USBD_CtlSendData>
        break;
 80086d4:	e00c      	b.n	80086f0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	3304      	adds	r3, #4
 80086da:	2201      	movs	r2, #1
 80086dc:	4619      	mov	r1, r3
 80086de:	6878      	ldr	r0, [r7, #4]
 80086e0:	f000 f934 	bl	800894c <USBD_CtlSendData>
        break;
 80086e4:	e004      	b.n	80086f0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80086e6:	6839      	ldr	r1, [r7, #0]
 80086e8:	6878      	ldr	r0, [r7, #4]
 80086ea:	f000 f8be 	bl	800886a <USBD_CtlError>
        break;
 80086ee:	bf00      	nop
}
 80086f0:	bf00      	nop
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}

080086f8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
 8008700:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008708:	b2db      	uxtb	r3, r3
 800870a:	3b01      	subs	r3, #1
 800870c:	2b02      	cmp	r3, #2
 800870e:	d81e      	bhi.n	800874e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	88db      	ldrh	r3, [r3, #6]
 8008714:	2b02      	cmp	r3, #2
 8008716:	d004      	beq.n	8008722 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008718:	6839      	ldr	r1, [r7, #0]
 800871a:	6878      	ldr	r0, [r7, #4]
 800871c:	f000 f8a5 	bl	800886a <USBD_CtlError>
        break;
 8008720:	e01a      	b.n	8008758 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	2201      	movs	r2, #1
 8008726:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800872e:	2b00      	cmp	r3, #0
 8008730:	d005      	beq.n	800873e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	68db      	ldr	r3, [r3, #12]
 8008736:	f043 0202 	orr.w	r2, r3, #2
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	330c      	adds	r3, #12
 8008742:	2202      	movs	r2, #2
 8008744:	4619      	mov	r1, r3
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 f900 	bl	800894c <USBD_CtlSendData>
      break;
 800874c:	e004      	b.n	8008758 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800874e:	6839      	ldr	r1, [r7, #0]
 8008750:	6878      	ldr	r0, [r7, #4]
 8008752:	f000 f88a 	bl	800886a <USBD_CtlError>
      break;
 8008756:	bf00      	nop
  }
}
 8008758:	bf00      	nop
 800875a:	3708      	adds	r7, #8
 800875c:	46bd      	mov	sp, r7
 800875e:	bd80      	pop	{r7, pc}

08008760 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008760:	b580      	push	{r7, lr}
 8008762:	b082      	sub	sp, #8
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
 8008768:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	885b      	ldrh	r3, [r3, #2]
 800876e:	2b01      	cmp	r3, #1
 8008770:	d107      	bne.n	8008782 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2201      	movs	r2, #1
 8008776:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	f000 f923 	bl	80089c6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008780:	e013      	b.n	80087aa <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008782:	683b      	ldr	r3, [r7, #0]
 8008784:	885b      	ldrh	r3, [r3, #2]
 8008786:	2b02      	cmp	r3, #2
 8008788:	d10b      	bne.n	80087a2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	889b      	ldrh	r3, [r3, #4]
 800878e:	0a1b      	lsrs	r3, r3, #8
 8008790:	b29b      	uxth	r3, r3
 8008792:	b2da      	uxtb	r2, r3
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f913 	bl	80089c6 <USBD_CtlSendStatus>
}
 80087a0:	e003      	b.n	80087aa <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80087a2:	6839      	ldr	r1, [r7, #0]
 80087a4:	6878      	ldr	r0, [r7, #4]
 80087a6:	f000 f860 	bl	800886a <USBD_CtlError>
}
 80087aa:	bf00      	nop
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}

080087b2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087b2:	b580      	push	{r7, lr}
 80087b4:	b082      	sub	sp, #8
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
 80087ba:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80087c2:	b2db      	uxtb	r3, r3
 80087c4:	3b01      	subs	r3, #1
 80087c6:	2b02      	cmp	r3, #2
 80087c8:	d80b      	bhi.n	80087e2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80087ca:	683b      	ldr	r3, [r7, #0]
 80087cc:	885b      	ldrh	r3, [r3, #2]
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d10c      	bne.n	80087ec <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f000 f8f3 	bl	80089c6 <USBD_CtlSendStatus>
      }
      break;
 80087e0:	e004      	b.n	80087ec <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80087e2:	6839      	ldr	r1, [r7, #0]
 80087e4:	6878      	ldr	r0, [r7, #4]
 80087e6:	f000 f840 	bl	800886a <USBD_CtlError>
      break;
 80087ea:	e000      	b.n	80087ee <USBD_ClrFeature+0x3c>
      break;
 80087ec:	bf00      	nop
  }
}
 80087ee:	bf00      	nop
 80087f0:	3708      	adds	r7, #8
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	781a      	ldrb	r2, [r3, #0]
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	3301      	adds	r3, #1
 8008810:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	781a      	ldrb	r2, [r3, #0]
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	3301      	adds	r3, #1
 800881e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008820:	68f8      	ldr	r0, [r7, #12]
 8008822:	f7ff fa41 	bl	8007ca8 <SWAPBYTE>
 8008826:	4603      	mov	r3, r0
 8008828:	461a      	mov	r2, r3
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	3301      	adds	r3, #1
 8008832:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	3301      	adds	r3, #1
 8008838:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800883a:	68f8      	ldr	r0, [r7, #12]
 800883c:	f7ff fa34 	bl	8007ca8 <SWAPBYTE>
 8008840:	4603      	mov	r3, r0
 8008842:	461a      	mov	r2, r3
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008848:	68fb      	ldr	r3, [r7, #12]
 800884a:	3301      	adds	r3, #1
 800884c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	3301      	adds	r3, #1
 8008852:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008854:	68f8      	ldr	r0, [r7, #12]
 8008856:	f7ff fa27 	bl	8007ca8 <SWAPBYTE>
 800885a:	4603      	mov	r3, r0
 800885c:	461a      	mov	r2, r3
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	80da      	strh	r2, [r3, #6]
}
 8008862:	bf00      	nop
 8008864:	3710      	adds	r7, #16
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}

0800886a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800886a:	b580      	push	{r7, lr}
 800886c:	b082      	sub	sp, #8
 800886e:	af00      	add	r7, sp, #0
 8008870:	6078      	str	r0, [r7, #4]
 8008872:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008874:	2180      	movs	r1, #128	; 0x80
 8008876:	6878      	ldr	r0, [r7, #4]
 8008878:	f000 fbf8 	bl	800906c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800887c:	2100      	movs	r1, #0
 800887e:	6878      	ldr	r0, [r7, #4]
 8008880:	f000 fbf4 	bl	800906c <USBD_LL_StallEP>
}
 8008884:	bf00      	nop
 8008886:	3708      	adds	r7, #8
 8008888:	46bd      	mov	sp, r7
 800888a:	bd80      	pop	{r7, pc}

0800888c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b086      	sub	sp, #24
 8008890:	af00      	add	r7, sp, #0
 8008892:	60f8      	str	r0, [r7, #12]
 8008894:	60b9      	str	r1, [r7, #8]
 8008896:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008898:	2300      	movs	r3, #0
 800889a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d036      	beq.n	8008910 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80088a6:	6938      	ldr	r0, [r7, #16]
 80088a8:	f000 f836 	bl	8008918 <USBD_GetLen>
 80088ac:	4603      	mov	r3, r0
 80088ae:	3301      	adds	r3, #1
 80088b0:	b29b      	uxth	r3, r3
 80088b2:	005b      	lsls	r3, r3, #1
 80088b4:	b29a      	uxth	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80088ba:	7dfb      	ldrb	r3, [r7, #23]
 80088bc:	68ba      	ldr	r2, [r7, #8]
 80088be:	4413      	add	r3, r2
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7812      	ldrb	r2, [r2, #0]
 80088c4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088c6:	7dfb      	ldrb	r3, [r7, #23]
 80088c8:	3301      	adds	r3, #1
 80088ca:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80088cc:	7dfb      	ldrb	r3, [r7, #23]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4413      	add	r3, r2
 80088d2:	2203      	movs	r2, #3
 80088d4:	701a      	strb	r2, [r3, #0]
  idx++;
 80088d6:	7dfb      	ldrb	r3, [r7, #23]
 80088d8:	3301      	adds	r3, #1
 80088da:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80088dc:	e013      	b.n	8008906 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80088de:	7dfb      	ldrb	r3, [r7, #23]
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	4413      	add	r3, r2
 80088e4:	693a      	ldr	r2, [r7, #16]
 80088e6:	7812      	ldrb	r2, [r2, #0]
 80088e8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80088ea:	693b      	ldr	r3, [r7, #16]
 80088ec:	3301      	adds	r3, #1
 80088ee:	613b      	str	r3, [r7, #16]
    idx++;
 80088f0:	7dfb      	ldrb	r3, [r7, #23]
 80088f2:	3301      	adds	r3, #1
 80088f4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80088f6:	7dfb      	ldrb	r3, [r7, #23]
 80088f8:	68ba      	ldr	r2, [r7, #8]
 80088fa:	4413      	add	r3, r2
 80088fc:	2200      	movs	r2, #0
 80088fe:	701a      	strb	r2, [r3, #0]
    idx++;
 8008900:	7dfb      	ldrb	r3, [r7, #23]
 8008902:	3301      	adds	r3, #1
 8008904:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	781b      	ldrb	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d1e7      	bne.n	80088de <USBD_GetString+0x52>
 800890e:	e000      	b.n	8008912 <USBD_GetString+0x86>
    return;
 8008910:	bf00      	nop
  }
}
 8008912:	3718      	adds	r7, #24
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}

08008918 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008920:	2300      	movs	r3, #0
 8008922:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008928:	e005      	b.n	8008936 <USBD_GetLen+0x1e>
  {
    len++;
 800892a:	7bfb      	ldrb	r3, [r7, #15]
 800892c:	3301      	adds	r3, #1
 800892e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3301      	adds	r3, #1
 8008934:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008936:	68bb      	ldr	r3, [r7, #8]
 8008938:	781b      	ldrb	r3, [r3, #0]
 800893a:	2b00      	cmp	r3, #0
 800893c:	d1f5      	bne.n	800892a <USBD_GetLen+0x12>
  }

  return len;
 800893e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3714      	adds	r7, #20
 8008944:	46bd      	mov	sp, r7
 8008946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800894a:	4770      	bx	lr

0800894c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800894c:	b580      	push	{r7, lr}
 800894e:	b084      	sub	sp, #16
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2202      	movs	r2, #2
 800895c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	687a      	ldr	r2, [r7, #4]
 800896a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	2100      	movs	r1, #0
 8008972:	68f8      	ldr	r0, [r7, #12]
 8008974:	f000 fc03 	bl	800917e <USBD_LL_Transmit>

  return USBD_OK;
 8008978:	2300      	movs	r3, #0
}
 800897a:	4618      	mov	r0, r3
 800897c:	3710      	adds	r7, #16
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008982:	b580      	push	{r7, lr}
 8008984:	b084      	sub	sp, #16
 8008986:	af00      	add	r7, sp, #0
 8008988:	60f8      	str	r0, [r7, #12]
 800898a:	60b9      	str	r1, [r7, #8]
 800898c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	68ba      	ldr	r2, [r7, #8]
 8008992:	2100      	movs	r1, #0
 8008994:	68f8      	ldr	r0, [r7, #12]
 8008996:	f000 fbf2 	bl	800917e <USBD_LL_Transmit>

  return USBD_OK;
 800899a:	2300      	movs	r3, #0
}
 800899c:	4618      	mov	r0, r3
 800899e:	3710      	adds	r7, #16
 80089a0:	46bd      	mov	sp, r7
 80089a2:	bd80      	pop	{r7, pc}

080089a4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	60f8      	str	r0, [r7, #12]
 80089ac:	60b9      	str	r1, [r7, #8]
 80089ae:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	68ba      	ldr	r2, [r7, #8]
 80089b4:	2100      	movs	r1, #0
 80089b6:	68f8      	ldr	r0, [r7, #12]
 80089b8:	f000 fc02 	bl	80091c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80089bc:	2300      	movs	r3, #0
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3710      	adds	r7, #16
 80089c2:	46bd      	mov	sp, r7
 80089c4:	bd80      	pop	{r7, pc}

080089c6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80089c6:	b580      	push	{r7, lr}
 80089c8:	b082      	sub	sp, #8
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2204      	movs	r2, #4
 80089d2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80089d6:	2300      	movs	r3, #0
 80089d8:	2200      	movs	r2, #0
 80089da:	2100      	movs	r1, #0
 80089dc:	6878      	ldr	r0, [r7, #4]
 80089de:	f000 fbce 	bl	800917e <USBD_LL_Transmit>

  return USBD_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2205      	movs	r2, #5
 80089f8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089fc:	2300      	movs	r3, #0
 80089fe:	2200      	movs	r2, #0
 8008a00:	2100      	movs	r1, #0
 8008a02:	6878      	ldr	r0, [r7, #4]
 8008a04:	f000 fbdc 	bl	80091c0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008a08:	2300      	movs	r3, #0
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008a14:	b580      	push	{r7, lr}
 8008a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008a18:	2200      	movs	r2, #0
 8008a1a:	490e      	ldr	r1, [pc, #56]	; (8008a54 <MX_USB_DEVICE_Init+0x40>)
 8008a1c:	480e      	ldr	r0, [pc, #56]	; (8008a58 <MX_USB_DEVICE_Init+0x44>)
 8008a1e:	f7fe fd23 	bl	8007468 <USBD_Init>
 8008a22:	4603      	mov	r3, r0
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d001      	beq.n	8008a2c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008a28:	f7f9 f93e 	bl	8001ca8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8008a2c:	490b      	ldr	r1, [pc, #44]	; (8008a5c <MX_USB_DEVICE_Init+0x48>)
 8008a2e:	480a      	ldr	r0, [pc, #40]	; (8008a58 <MX_USB_DEVICE_Init+0x44>)
 8008a30:	f7fe fd4a 	bl	80074c8 <USBD_RegisterClass>
 8008a34:	4603      	mov	r3, r0
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d001      	beq.n	8008a3e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008a3a:	f7f9 f935 	bl	8001ca8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8008a3e:	4806      	ldr	r0, [pc, #24]	; (8008a58 <MX_USB_DEVICE_Init+0x44>)
 8008a40:	f7fe fd78 	bl	8007534 <USBD_Start>
 8008a44:	4603      	mov	r3, r0
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d001      	beq.n	8008a4e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8008a4a:	f7f9 f92d 	bl	8001ca8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8008a4e:	bf00      	nop
 8008a50:	bd80      	pop	{r7, pc}
 8008a52:	bf00      	nop
 8008a54:	200000ec 	.word	0x200000ec
 8008a58:	200004c0 	.word	0x200004c0
 8008a5c:	2000002c 	.word	0x2000002c

08008a60 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b083      	sub	sp, #12
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	4603      	mov	r3, r0
 8008a68:	6039      	str	r1, [r7, #0]
 8008a6a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8008a6c:	683b      	ldr	r3, [r7, #0]
 8008a6e:	2212      	movs	r2, #18
 8008a70:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008a72:	4b03      	ldr	r3, [pc, #12]	; (8008a80 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008a74:	4618      	mov	r0, r3
 8008a76:	370c      	adds	r7, #12
 8008a78:	46bd      	mov	sp, r7
 8008a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7e:	4770      	bx	lr
 8008a80:	20000108 	.word	0x20000108

08008a84 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008a84:	b480      	push	{r7}
 8008a86:	b083      	sub	sp, #12
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	4603      	mov	r3, r0
 8008a8c:	6039      	str	r1, [r7, #0]
 8008a8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008a90:	683b      	ldr	r3, [r7, #0]
 8008a92:	2204      	movs	r2, #4
 8008a94:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008a96:	4b03      	ldr	r3, [pc, #12]	; (8008aa4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008a98:	4618      	mov	r0, r3
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr
 8008aa4:	2000011c 	.word	0x2000011c

08008aa8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	4603      	mov	r3, r0
 8008ab0:	6039      	str	r1, [r7, #0]
 8008ab2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008ab4:	79fb      	ldrb	r3, [r7, #7]
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d105      	bne.n	8008ac6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008aba:	683a      	ldr	r2, [r7, #0]
 8008abc:	4907      	ldr	r1, [pc, #28]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
 8008abe:	4808      	ldr	r0, [pc, #32]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008ac0:	f7ff fee4 	bl	800888c <USBD_GetString>
 8008ac4:	e004      	b.n	8008ad0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008ac6:	683a      	ldr	r2, [r7, #0]
 8008ac8:	4904      	ldr	r1, [pc, #16]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
 8008aca:	4805      	ldr	r0, [pc, #20]	; (8008ae0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008acc:	f7ff fede 	bl	800888c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008ad0:	4b02      	ldr	r3, [pc, #8]	; (8008adc <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3708      	adds	r7, #8
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	2000079c 	.word	0x2000079c
 8008ae0:	080093d8 	.word	0x080093d8

08008ae4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b082      	sub	sp, #8
 8008ae8:	af00      	add	r7, sp, #0
 8008aea:	4603      	mov	r3, r0
 8008aec:	6039      	str	r1, [r7, #0]
 8008aee:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8008af0:	683a      	ldr	r2, [r7, #0]
 8008af2:	4904      	ldr	r1, [pc, #16]	; (8008b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008af4:	4804      	ldr	r0, [pc, #16]	; (8008b08 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008af6:	f7ff fec9 	bl	800888c <USBD_GetString>
  return USBD_StrDesc;
 8008afa:	4b02      	ldr	r3, [pc, #8]	; (8008b04 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3708      	adds	r7, #8
 8008b00:	46bd      	mov	sp, r7
 8008b02:	bd80      	pop	{r7, pc}
 8008b04:	2000079c 	.word	0x2000079c
 8008b08:	080093f0 	.word	0x080093f0

08008b0c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b0c:	b580      	push	{r7, lr}
 8008b0e:	b082      	sub	sp, #8
 8008b10:	af00      	add	r7, sp, #0
 8008b12:	4603      	mov	r3, r0
 8008b14:	6039      	str	r1, [r7, #0]
 8008b16:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8008b18:	683b      	ldr	r3, [r7, #0]
 8008b1a:	221a      	movs	r2, #26
 8008b1c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8008b1e:	f000 f843 	bl	8008ba8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8008b22:	4b02      	ldr	r3, [pc, #8]	; (8008b2c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3708      	adds	r7, #8
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20000120 	.word	0x20000120

08008b30 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	4603      	mov	r3, r0
 8008b38:	6039      	str	r1, [r7, #0]
 8008b3a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008b3c:	79fb      	ldrb	r3, [r7, #7]
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d105      	bne.n	8008b4e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b42:	683a      	ldr	r2, [r7, #0]
 8008b44:	4907      	ldr	r1, [pc, #28]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b46:	4808      	ldr	r0, [pc, #32]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b48:	f7ff fea0 	bl	800888c <USBD_GetString>
 8008b4c:	e004      	b.n	8008b58 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008b4e:	683a      	ldr	r2, [r7, #0]
 8008b50:	4904      	ldr	r1, [pc, #16]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008b52:	4805      	ldr	r0, [pc, #20]	; (8008b68 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008b54:	f7ff fe9a 	bl	800888c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b58:	4b02      	ldr	r3, [pc, #8]	; (8008b64 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	3708      	adds	r7, #8
 8008b5e:	46bd      	mov	sp, r7
 8008b60:	bd80      	pop	{r7, pc}
 8008b62:	bf00      	nop
 8008b64:	2000079c 	.word	0x2000079c
 8008b68:	08009404 	.word	0x08009404

08008b6c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d105      	bne.n	8008b8a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b7e:	683a      	ldr	r2, [r7, #0]
 8008b80:	4907      	ldr	r1, [pc, #28]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b82:	4808      	ldr	r0, [pc, #32]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b84:	f7ff fe82 	bl	800888c <USBD_GetString>
 8008b88:	e004      	b.n	8008b94 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008b8a:	683a      	ldr	r2, [r7, #0]
 8008b8c:	4904      	ldr	r1, [pc, #16]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008b8e:	4805      	ldr	r0, [pc, #20]	; (8008ba4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008b90:	f7ff fe7c 	bl	800888c <USBD_GetString>
  }
  return USBD_StrDesc;
 8008b94:	4b02      	ldr	r3, [pc, #8]	; (8008ba0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008b96:	4618      	mov	r0, r3
 8008b98:	3708      	adds	r7, #8
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	bd80      	pop	{r7, pc}
 8008b9e:	bf00      	nop
 8008ba0:	2000079c 	.word	0x2000079c
 8008ba4:	08009410 	.word	0x08009410

08008ba8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	b084      	sub	sp, #16
 8008bac:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008bae:	4b0f      	ldr	r3, [pc, #60]	; (8008bec <Get_SerialNum+0x44>)
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008bb4:	4b0e      	ldr	r3, [pc, #56]	; (8008bf0 <Get_SerialNum+0x48>)
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008bba:	4b0e      	ldr	r3, [pc, #56]	; (8008bf4 <Get_SerialNum+0x4c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008bc0:	68fa      	ldr	r2, [r7, #12]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	4413      	add	r3, r2
 8008bc6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d009      	beq.n	8008be2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008bce:	2208      	movs	r2, #8
 8008bd0:	4909      	ldr	r1, [pc, #36]	; (8008bf8 <Get_SerialNum+0x50>)
 8008bd2:	68f8      	ldr	r0, [r7, #12]
 8008bd4:	f000 f814 	bl	8008c00 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008bd8:	2204      	movs	r2, #4
 8008bda:	4908      	ldr	r1, [pc, #32]	; (8008bfc <Get_SerialNum+0x54>)
 8008bdc:	68b8      	ldr	r0, [r7, #8]
 8008bde:	f000 f80f 	bl	8008c00 <IntToUnicode>
  }
}
 8008be2:	bf00      	nop
 8008be4:	3710      	adds	r7, #16
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	1fff7a10 	.word	0x1fff7a10
 8008bf0:	1fff7a14 	.word	0x1fff7a14
 8008bf4:	1fff7a18 	.word	0x1fff7a18
 8008bf8:	20000122 	.word	0x20000122
 8008bfc:	20000132 	.word	0x20000132

08008c00 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b087      	sub	sp, #28
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	60f8      	str	r0, [r7, #12]
 8008c08:	60b9      	str	r1, [r7, #8]
 8008c0a:	4613      	mov	r3, r2
 8008c0c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008c0e:	2300      	movs	r3, #0
 8008c10:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008c12:	2300      	movs	r3, #0
 8008c14:	75fb      	strb	r3, [r7, #23]
 8008c16:	e027      	b.n	8008c68 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	0f1b      	lsrs	r3, r3, #28
 8008c1c:	2b09      	cmp	r3, #9
 8008c1e:	d80b      	bhi.n	8008c38 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	0f1b      	lsrs	r3, r3, #28
 8008c24:	b2da      	uxtb	r2, r3
 8008c26:	7dfb      	ldrb	r3, [r7, #23]
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	68bb      	ldr	r3, [r7, #8]
 8008c2e:	440b      	add	r3, r1
 8008c30:	3230      	adds	r2, #48	; 0x30
 8008c32:	b2d2      	uxtb	r2, r2
 8008c34:	701a      	strb	r2, [r3, #0]
 8008c36:	e00a      	b.n	8008c4e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008c38:	68fb      	ldr	r3, [r7, #12]
 8008c3a:	0f1b      	lsrs	r3, r3, #28
 8008c3c:	b2da      	uxtb	r2, r3
 8008c3e:	7dfb      	ldrb	r3, [r7, #23]
 8008c40:	005b      	lsls	r3, r3, #1
 8008c42:	4619      	mov	r1, r3
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	440b      	add	r3, r1
 8008c48:	3237      	adds	r2, #55	; 0x37
 8008c4a:	b2d2      	uxtb	r2, r2
 8008c4c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	011b      	lsls	r3, r3, #4
 8008c52:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	005b      	lsls	r3, r3, #1
 8008c58:	3301      	adds	r3, #1
 8008c5a:	68ba      	ldr	r2, [r7, #8]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	2200      	movs	r2, #0
 8008c60:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008c62:	7dfb      	ldrb	r3, [r7, #23]
 8008c64:	3301      	adds	r3, #1
 8008c66:	75fb      	strb	r3, [r7, #23]
 8008c68:	7dfa      	ldrb	r2, [r7, #23]
 8008c6a:	79fb      	ldrb	r3, [r7, #7]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d3d3      	bcc.n	8008c18 <IntToUnicode+0x18>
  }
}
 8008c70:	bf00      	nop
 8008c72:	bf00      	nop
 8008c74:	371c      	adds	r7, #28
 8008c76:	46bd      	mov	sp, r7
 8008c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c7c:	4770      	bx	lr
	...

08008c80 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008c80:	b580      	push	{r7, lr}
 8008c82:	b08a      	sub	sp, #40	; 0x28
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008c88:	f107 0314 	add.w	r3, r7, #20
 8008c8c:	2200      	movs	r2, #0
 8008c8e:	601a      	str	r2, [r3, #0]
 8008c90:	605a      	str	r2, [r3, #4]
 8008c92:	609a      	str	r2, [r3, #8]
 8008c94:	60da      	str	r2, [r3, #12]
 8008c96:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008ca0:	d147      	bne.n	8008d32 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	613b      	str	r3, [r7, #16]
 8008ca6:	4b25      	ldr	r3, [pc, #148]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008caa:	4a24      	ldr	r2, [pc, #144]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008cac:	f043 0301 	orr.w	r3, r3, #1
 8008cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8008cb2:	4b22      	ldr	r3, [pc, #136]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb6:	f003 0301 	and.w	r3, r3, #1
 8008cba:	613b      	str	r3, [r7, #16]
 8008cbc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008cbe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008cc8:	2300      	movs	r3, #0
 8008cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008ccc:	f107 0314 	add.w	r3, r7, #20
 8008cd0:	4619      	mov	r1, r3
 8008cd2:	481b      	ldr	r0, [pc, #108]	; (8008d40 <HAL_PCD_MspInit+0xc0>)
 8008cd4:	f7f9 fac8 	bl	8002268 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008cd8:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008cdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008cde:	2302      	movs	r3, #2
 8008ce0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008cea:	230a      	movs	r3, #10
 8008cec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008cee:	f107 0314 	add.w	r3, r7, #20
 8008cf2:	4619      	mov	r1, r3
 8008cf4:	4812      	ldr	r0, [pc, #72]	; (8008d40 <HAL_PCD_MspInit+0xc0>)
 8008cf6:	f7f9 fab7 	bl	8002268 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008cfa:	4b10      	ldr	r3, [pc, #64]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008cfc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008cfe:	4a0f      	ldr	r2, [pc, #60]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d04:	6353      	str	r3, [r2, #52]	; 0x34
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
 8008d0a:	4b0c      	ldr	r3, [pc, #48]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d0e:	4a0b      	ldr	r2, [pc, #44]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008d14:	6453      	str	r3, [r2, #68]	; 0x44
 8008d16:	4b09      	ldr	r3, [pc, #36]	; (8008d3c <HAL_PCD_MspInit+0xbc>)
 8008d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8008d22:	2200      	movs	r2, #0
 8008d24:	2100      	movs	r1, #0
 8008d26:	2043      	movs	r0, #67	; 0x43
 8008d28:	f7f9 fa67 	bl	80021fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008d2c:	2043      	movs	r0, #67	; 0x43
 8008d2e:	f7f9 fa80 	bl	8002232 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8008d32:	bf00      	nop
 8008d34:	3728      	adds	r7, #40	; 0x28
 8008d36:	46bd      	mov	sp, r7
 8008d38:	bd80      	pop	{r7, pc}
 8008d3a:	bf00      	nop
 8008d3c:	40023800 	.word	0x40023800
 8008d40:	40020000 	.word	0x40020000

08008d44 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d44:	b580      	push	{r7, lr}
 8008d46:	b082      	sub	sp, #8
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008d58:	4619      	mov	r1, r3
 8008d5a:	4610      	mov	r0, r2
 8008d5c:	f7fe fc37 	bl	80075ce <USBD_LL_SetupStage>
}
 8008d60:	bf00      	nop
 8008d62:	3708      	adds	r7, #8
 8008d64:	46bd      	mov	sp, r7
 8008d66:	bd80      	pop	{r7, pc}

08008d68 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d68:	b580      	push	{r7, lr}
 8008d6a:	b082      	sub	sp, #8
 8008d6c:	af00      	add	r7, sp, #0
 8008d6e:	6078      	str	r0, [r7, #4]
 8008d70:	460b      	mov	r3, r1
 8008d72:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008d7a:	78fa      	ldrb	r2, [r7, #3]
 8008d7c:	6879      	ldr	r1, [r7, #4]
 8008d7e:	4613      	mov	r3, r2
 8008d80:	00db      	lsls	r3, r3, #3
 8008d82:	4413      	add	r3, r2
 8008d84:	009b      	lsls	r3, r3, #2
 8008d86:	440b      	add	r3, r1
 8008d88:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008d8c:	681a      	ldr	r2, [r3, #0]
 8008d8e:	78fb      	ldrb	r3, [r7, #3]
 8008d90:	4619      	mov	r1, r3
 8008d92:	f7fe fc71 	bl	8007678 <USBD_LL_DataOutStage>
}
 8008d96:	bf00      	nop
 8008d98:	3708      	adds	r7, #8
 8008d9a:	46bd      	mov	sp, r7
 8008d9c:	bd80      	pop	{r7, pc}

08008d9e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008d9e:	b580      	push	{r7, lr}
 8008da0:	b082      	sub	sp, #8
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	6078      	str	r0, [r7, #4]
 8008da6:	460b      	mov	r3, r1
 8008da8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008db0:	78fa      	ldrb	r2, [r7, #3]
 8008db2:	6879      	ldr	r1, [r7, #4]
 8008db4:	4613      	mov	r3, r2
 8008db6:	00db      	lsls	r3, r3, #3
 8008db8:	4413      	add	r3, r2
 8008dba:	009b      	lsls	r3, r3, #2
 8008dbc:	440b      	add	r3, r1
 8008dbe:	334c      	adds	r3, #76	; 0x4c
 8008dc0:	681a      	ldr	r2, [r3, #0]
 8008dc2:	78fb      	ldrb	r3, [r7, #3]
 8008dc4:	4619      	mov	r1, r3
 8008dc6:	f7fe fd0a 	bl	80077de <USBD_LL_DataInStage>
}
 8008dca:	bf00      	nop
 8008dcc:	3708      	adds	r7, #8
 8008dce:	46bd      	mov	sp, r7
 8008dd0:	bd80      	pop	{r7, pc}

08008dd2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dd2:	b580      	push	{r7, lr}
 8008dd4:	b082      	sub	sp, #8
 8008dd6:	af00      	add	r7, sp, #0
 8008dd8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7fe fe3e 	bl	8007a62 <USBD_LL_SOF>
}
 8008de6:	bf00      	nop
 8008de8:	3708      	adds	r7, #8
 8008dea:	46bd      	mov	sp, r7
 8008dec:	bd80      	pop	{r7, pc}

08008dee <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008dee:	b580      	push	{r7, lr}
 8008df0:	b084      	sub	sp, #16
 8008df2:	af00      	add	r7, sp, #0
 8008df4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008df6:	2301      	movs	r3, #1
 8008df8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	68db      	ldr	r3, [r3, #12]
 8008dfe:	2b02      	cmp	r3, #2
 8008e00:	d001      	beq.n	8008e06 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008e02:	f7f8 ff51 	bl	8001ca8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e0c:	7bfa      	ldrb	r2, [r7, #15]
 8008e0e:	4611      	mov	r1, r2
 8008e10:	4618      	mov	r0, r3
 8008e12:	f7fe fde8 	bl	80079e6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e1c:	4618      	mov	r0, r3
 8008e1e:	f7fe fd90 	bl	8007942 <USBD_LL_Reset>
}
 8008e22:	bf00      	nop
 8008e24:	3710      	adds	r7, #16
 8008e26:	46bd      	mov	sp, r7
 8008e28:	bd80      	pop	{r7, pc}
	...

08008e2c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	b082      	sub	sp, #8
 8008e30:	af00      	add	r7, sp, #0
 8008e32:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e3a:	4618      	mov	r0, r3
 8008e3c:	f7fe fde3 	bl	8007a06 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	687a      	ldr	r2, [r7, #4]
 8008e4c:	6812      	ldr	r2, [r2, #0]
 8008e4e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008e52:	f043 0301 	orr.w	r3, r3, #1
 8008e56:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6a1b      	ldr	r3, [r3, #32]
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d005      	beq.n	8008e6c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008e60:	4b04      	ldr	r3, [pc, #16]	; (8008e74 <HAL_PCD_SuspendCallback+0x48>)
 8008e62:	691b      	ldr	r3, [r3, #16]
 8008e64:	4a03      	ldr	r2, [pc, #12]	; (8008e74 <HAL_PCD_SuspendCallback+0x48>)
 8008e66:	f043 0306 	orr.w	r3, r3, #6
 8008e6a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008e6c:	bf00      	nop
 8008e6e:	3708      	adds	r7, #8
 8008e70:	46bd      	mov	sp, r7
 8008e72:	bd80      	pop	{r7, pc}
 8008e74:	e000ed00 	.word	0xe000ed00

08008e78 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008e86:	4618      	mov	r0, r3
 8008e88:	f7fe fdd3 	bl	8007a32 <USBD_LL_Resume>
}
 8008e8c:	bf00      	nop
 8008e8e:	3708      	adds	r7, #8
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b082      	sub	sp, #8
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008ea6:	78fa      	ldrb	r2, [r7, #3]
 8008ea8:	4611      	mov	r1, r2
 8008eaa:	4618      	mov	r0, r3
 8008eac:	f7fe fe2b 	bl	8007b06 <USBD_LL_IsoOUTIncomplete>
}
 8008eb0:	bf00      	nop
 8008eb2:	3708      	adds	r7, #8
 8008eb4:	46bd      	mov	sp, r7
 8008eb6:	bd80      	pop	{r7, pc}

08008eb8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008eb8:	b580      	push	{r7, lr}
 8008eba:	b082      	sub	sp, #8
 8008ebc:	af00      	add	r7, sp, #0
 8008ebe:	6078      	str	r0, [r7, #4]
 8008ec0:	460b      	mov	r3, r1
 8008ec2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	4611      	mov	r1, r2
 8008ece:	4618      	mov	r0, r3
 8008ed0:	f7fe fde7 	bl	8007aa2 <USBD_LL_IsoINIncomplete>
}
 8008ed4:	bf00      	nop
 8008ed6:	3708      	adds	r7, #8
 8008ed8:	46bd      	mov	sp, r7
 8008eda:	bd80      	pop	{r7, pc}

08008edc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008edc:	b580      	push	{r7, lr}
 8008ede:	b082      	sub	sp, #8
 8008ee0:	af00      	add	r7, sp, #0
 8008ee2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008eea:	4618      	mov	r0, r3
 8008eec:	f7fe fe3d 	bl	8007b6a <USBD_LL_DevConnected>
}
 8008ef0:	bf00      	nop
 8008ef2:	3708      	adds	r7, #8
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}

08008ef8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008ef8:	b580      	push	{r7, lr}
 8008efa:	b082      	sub	sp, #8
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008f06:	4618      	mov	r0, r3
 8008f08:	f7fe fe3a 	bl	8007b80 <USBD_LL_DevDisconnected>
}
 8008f0c:	bf00      	nop
 8008f0e:	3708      	adds	r7, #8
 8008f10:	46bd      	mov	sp, r7
 8008f12:	bd80      	pop	{r7, pc}

08008f14 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008f14:	b580      	push	{r7, lr}
 8008f16:	b082      	sub	sp, #8
 8008f18:	af00      	add	r7, sp, #0
 8008f1a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	781b      	ldrb	r3, [r3, #0]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d13c      	bne.n	8008f9e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008f24:	4a20      	ldr	r2, [pc, #128]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a1e      	ldr	r2, [pc, #120]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f30:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008f34:	4b1c      	ldr	r3, [pc, #112]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f36:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008f3a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008f3c:	4b1a      	ldr	r3, [pc, #104]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f3e:	2204      	movs	r2, #4
 8008f40:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8008f42:	4b19      	ldr	r3, [pc, #100]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f44:	2202      	movs	r2, #2
 8008f46:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008f48:	4b17      	ldr	r3, [pc, #92]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f4a:	2200      	movs	r2, #0
 8008f4c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8008f4e:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f50:	2202      	movs	r2, #2
 8008f52:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008f54:	4b14      	ldr	r3, [pc, #80]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f56:	2200      	movs	r2, #0
 8008f58:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008f60:	4b11      	ldr	r3, [pc, #68]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f62:	2200      	movs	r2, #0
 8008f64:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008f66:	4b10      	ldr	r3, [pc, #64]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f68:	2201      	movs	r2, #1
 8008f6a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008f6c:	4b0e      	ldr	r3, [pc, #56]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f6e:	2200      	movs	r2, #0
 8008f70:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008f72:	480d      	ldr	r0, [pc, #52]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f74:	f7fa f936 	bl	80031e4 <HAL_PCD_Init>
 8008f78:	4603      	mov	r3, r0
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d001      	beq.n	8008f82 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008f7e:	f7f8 fe93 	bl	8001ca8 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008f82:	2180      	movs	r1, #128	; 0x80
 8008f84:	4808      	ldr	r0, [pc, #32]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f86:	f7fb fb76 	bl	8004676 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008f8a:	2240      	movs	r2, #64	; 0x40
 8008f8c:	2100      	movs	r1, #0
 8008f8e:	4806      	ldr	r0, [pc, #24]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f90:	f7fb fb2a 	bl	80045e8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008f94:	2280      	movs	r2, #128	; 0x80
 8008f96:	2101      	movs	r1, #1
 8008f98:	4803      	ldr	r0, [pc, #12]	; (8008fa8 <USBD_LL_Init+0x94>)
 8008f9a:	f7fb fb25 	bl	80045e8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008f9e:	2300      	movs	r3, #0
}
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	3708      	adds	r7, #8
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	bd80      	pop	{r7, pc}
 8008fa8:	2000099c 	.word	0x2000099c

08008fac <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008fb8:	2300      	movs	r3, #0
 8008fba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	f7fa fa2b 	bl	800341e <HAL_PCD_Start>
 8008fc8:	4603      	mov	r3, r0
 8008fca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008fcc:	7bfb      	ldrb	r3, [r7, #15]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f000 f930 	bl	8009234 <USBD_Get_USB_Status>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008fd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008fda:	4618      	mov	r0, r3
 8008fdc:	3710      	adds	r7, #16
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	bd80      	pop	{r7, pc}

08008fe2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008fe2:	b580      	push	{r7, lr}
 8008fe4:	b084      	sub	sp, #16
 8008fe6:	af00      	add	r7, sp, #0
 8008fe8:	6078      	str	r0, [r7, #4]
 8008fea:	4608      	mov	r0, r1
 8008fec:	4611      	mov	r1, r2
 8008fee:	461a      	mov	r2, r3
 8008ff0:	4603      	mov	r3, r0
 8008ff2:	70fb      	strb	r3, [r7, #3]
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	70bb      	strb	r3, [r7, #2]
 8008ff8:	4613      	mov	r3, r2
 8008ffa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009000:	2300      	movs	r3, #0
 8009002:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800900a:	78bb      	ldrb	r3, [r7, #2]
 800900c:	883a      	ldrh	r2, [r7, #0]
 800900e:	78f9      	ldrb	r1, [r7, #3]
 8009010:	f7fa fefc 	bl	8003e0c <HAL_PCD_EP_Open>
 8009014:	4603      	mov	r3, r0
 8009016:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009018:	7bfb      	ldrb	r3, [r7, #15]
 800901a:	4618      	mov	r0, r3
 800901c:	f000 f90a 	bl	8009234 <USBD_Get_USB_Status>
 8009020:	4603      	mov	r3, r0
 8009022:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009024:	7bbb      	ldrb	r3, [r7, #14]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800902e:	b580      	push	{r7, lr}
 8009030:	b084      	sub	sp, #16
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
 8009036:	460b      	mov	r3, r1
 8009038:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800903a:	2300      	movs	r3, #0
 800903c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800903e:	2300      	movs	r3, #0
 8009040:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	4611      	mov	r1, r2
 800904c:	4618      	mov	r0, r3
 800904e:	f7fa ff45 	bl	8003edc <HAL_PCD_EP_Close>
 8009052:	4603      	mov	r3, r0
 8009054:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009056:	7bfb      	ldrb	r3, [r7, #15]
 8009058:	4618      	mov	r0, r3
 800905a:	f000 f8eb 	bl	8009234 <USBD_Get_USB_Status>
 800905e:	4603      	mov	r3, r0
 8009060:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009062:	7bbb      	ldrb	r3, [r7, #14]
}
 8009064:	4618      	mov	r0, r3
 8009066:	3710      	adds	r7, #16
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800906c:	b580      	push	{r7, lr}
 800906e:	b084      	sub	sp, #16
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
 8009074:	460b      	mov	r3, r1
 8009076:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009078:	2300      	movs	r3, #0
 800907a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800907c:	2300      	movs	r3, #0
 800907e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009086:	78fa      	ldrb	r2, [r7, #3]
 8009088:	4611      	mov	r1, r2
 800908a:	4618      	mov	r0, r3
 800908c:	f7fb f805 	bl	800409a <HAL_PCD_EP_SetStall>
 8009090:	4603      	mov	r3, r0
 8009092:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009094:	7bfb      	ldrb	r3, [r7, #15]
 8009096:	4618      	mov	r0, r3
 8009098:	f000 f8cc 	bl	8009234 <USBD_Get_USB_Status>
 800909c:	4603      	mov	r3, r0
 800909e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	3710      	adds	r7, #16
 80090a6:	46bd      	mov	sp, r7
 80090a8:	bd80      	pop	{r7, pc}

080090aa <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090aa:	b580      	push	{r7, lr}
 80090ac:	b084      	sub	sp, #16
 80090ae:	af00      	add	r7, sp, #0
 80090b0:	6078      	str	r0, [r7, #4]
 80090b2:	460b      	mov	r3, r1
 80090b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80090b6:	2300      	movs	r3, #0
 80090b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80090ba:	2300      	movs	r3, #0
 80090bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090c4:	78fa      	ldrb	r2, [r7, #3]
 80090c6:	4611      	mov	r1, r2
 80090c8:	4618      	mov	r0, r3
 80090ca:	f7fb f84a 	bl	8004162 <HAL_PCD_EP_ClrStall>
 80090ce:	4603      	mov	r3, r0
 80090d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80090d2:	7bfb      	ldrb	r3, [r7, #15]
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f8ad 	bl	8009234 <USBD_Get_USB_Status>
 80090da:	4603      	mov	r3, r0
 80090dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80090de:	7bbb      	ldrb	r3, [r7, #14]
}
 80090e0:	4618      	mov	r0, r3
 80090e2:	3710      	adds	r7, #16
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}

080090e8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80090e8:	b480      	push	{r7}
 80090ea:	b085      	sub	sp, #20
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
 80090f0:	460b      	mov	r3, r1
 80090f2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80090fa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80090fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009100:	2b00      	cmp	r3, #0
 8009102:	da0b      	bge.n	800911c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8009104:	78fb      	ldrb	r3, [r7, #3]
 8009106:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800910a:	68f9      	ldr	r1, [r7, #12]
 800910c:	4613      	mov	r3, r2
 800910e:	00db      	lsls	r3, r3, #3
 8009110:	4413      	add	r3, r2
 8009112:	009b      	lsls	r3, r3, #2
 8009114:	440b      	add	r3, r1
 8009116:	333e      	adds	r3, #62	; 0x3e
 8009118:	781b      	ldrb	r3, [r3, #0]
 800911a:	e00b      	b.n	8009134 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800911c:	78fb      	ldrb	r3, [r7, #3]
 800911e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009122:	68f9      	ldr	r1, [r7, #12]
 8009124:	4613      	mov	r3, r2
 8009126:	00db      	lsls	r3, r3, #3
 8009128:	4413      	add	r3, r2
 800912a:	009b      	lsls	r3, r3, #2
 800912c:	440b      	add	r3, r1
 800912e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8009132:	781b      	ldrb	r3, [r3, #0]
  }
}
 8009134:	4618      	mov	r0, r3
 8009136:	3714      	adds	r7, #20
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	460b      	mov	r3, r1
 800914a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800914c:	2300      	movs	r3, #0
 800914e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009150:	2300      	movs	r3, #0
 8009152:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800915a:	78fa      	ldrb	r2, [r7, #3]
 800915c:	4611      	mov	r1, r2
 800915e:	4618      	mov	r0, r3
 8009160:	f7fa fe2f 	bl	8003dc2 <HAL_PCD_SetAddress>
 8009164:	4603      	mov	r3, r0
 8009166:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	4618      	mov	r0, r3
 800916c:	f000 f862 	bl	8009234 <USBD_Get_USB_Status>
 8009170:	4603      	mov	r3, r0
 8009172:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009174:	7bbb      	ldrb	r3, [r7, #14]
}
 8009176:	4618      	mov	r0, r3
 8009178:	3710      	adds	r7, #16
 800917a:	46bd      	mov	sp, r7
 800917c:	bd80      	pop	{r7, pc}

0800917e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800917e:	b580      	push	{r7, lr}
 8009180:	b086      	sub	sp, #24
 8009182:	af00      	add	r7, sp, #0
 8009184:	60f8      	str	r0, [r7, #12]
 8009186:	607a      	str	r2, [r7, #4]
 8009188:	603b      	str	r3, [r7, #0]
 800918a:	460b      	mov	r3, r1
 800918c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800918e:	2300      	movs	r3, #0
 8009190:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009192:	2300      	movs	r3, #0
 8009194:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800919c:	7af9      	ldrb	r1, [r7, #11]
 800919e:	683b      	ldr	r3, [r7, #0]
 80091a0:	687a      	ldr	r2, [r7, #4]
 80091a2:	f7fa ff30 	bl	8004006 <HAL_PCD_EP_Transmit>
 80091a6:	4603      	mov	r3, r0
 80091a8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091aa:	7dfb      	ldrb	r3, [r7, #23]
 80091ac:	4618      	mov	r0, r3
 80091ae:	f000 f841 	bl	8009234 <USBD_Get_USB_Status>
 80091b2:	4603      	mov	r3, r0
 80091b4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091b6:	7dbb      	ldrb	r3, [r7, #22]
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3718      	adds	r7, #24
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b086      	sub	sp, #24
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	607a      	str	r2, [r7, #4]
 80091ca:	603b      	str	r3, [r7, #0]
 80091cc:	460b      	mov	r3, r1
 80091ce:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80091d0:	2300      	movs	r3, #0
 80091d2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80091d4:	2300      	movs	r3, #0
 80091d6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80091d8:	68fb      	ldr	r3, [r7, #12]
 80091da:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80091de:	7af9      	ldrb	r1, [r7, #11]
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	687a      	ldr	r2, [r7, #4]
 80091e4:	f7fa fec4 	bl	8003f70 <HAL_PCD_EP_Receive>
 80091e8:	4603      	mov	r3, r0
 80091ea:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80091ec:	7dfb      	ldrb	r3, [r7, #23]
 80091ee:	4618      	mov	r0, r3
 80091f0:	f000 f820 	bl	8009234 <USBD_Get_USB_Status>
 80091f4:	4603      	mov	r3, r0
 80091f6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80091f8:	7dbb      	ldrb	r3, [r7, #22]
}
 80091fa:	4618      	mov	r0, r3
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
	...

08009204 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8009204:	b480      	push	{r7}
 8009206:	b083      	sub	sp, #12
 8009208:	af00      	add	r7, sp, #0
 800920a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800920c:	4b03      	ldr	r3, [pc, #12]	; (800921c <USBD_static_malloc+0x18>)
}
 800920e:	4618      	mov	r0, r3
 8009210:	370c      	adds	r7, #12
 8009212:	46bd      	mov	sp, r7
 8009214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009218:	4770      	bx	lr
 800921a:	bf00      	nop
 800921c:	20000ea8 	.word	0x20000ea8

08009220 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009220:	b480      	push	{r7}
 8009222:	b083      	sub	sp, #12
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]

}
 8009228:	bf00      	nop
 800922a:	370c      	adds	r7, #12
 800922c:	46bd      	mov	sp, r7
 800922e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009232:	4770      	bx	lr

08009234 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009234:	b480      	push	{r7}
 8009236:	b085      	sub	sp, #20
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800923e:	2300      	movs	r3, #0
 8009240:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009242:	79fb      	ldrb	r3, [r7, #7]
 8009244:	2b03      	cmp	r3, #3
 8009246:	d817      	bhi.n	8009278 <USBD_Get_USB_Status+0x44>
 8009248:	a201      	add	r2, pc, #4	; (adr r2, 8009250 <USBD_Get_USB_Status+0x1c>)
 800924a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800924e:	bf00      	nop
 8009250:	08009261 	.word	0x08009261
 8009254:	08009267 	.word	0x08009267
 8009258:	0800926d 	.word	0x0800926d
 800925c:	08009273 	.word	0x08009273
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009260:	2300      	movs	r3, #0
 8009262:	73fb      	strb	r3, [r7, #15]
    break;
 8009264:	e00b      	b.n	800927e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009266:	2303      	movs	r3, #3
 8009268:	73fb      	strb	r3, [r7, #15]
    break;
 800926a:	e008      	b.n	800927e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800926c:	2301      	movs	r3, #1
 800926e:	73fb      	strb	r3, [r7, #15]
    break;
 8009270:	e005      	b.n	800927e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009272:	2303      	movs	r3, #3
 8009274:	73fb      	strb	r3, [r7, #15]
    break;
 8009276:	e002      	b.n	800927e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009278:	2303      	movs	r3, #3
 800927a:	73fb      	strb	r3, [r7, #15]
    break;
 800927c:	bf00      	nop
  }
  return usb_status;
 800927e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009280:	4618      	mov	r0, r3
 8009282:	3714      	adds	r7, #20
 8009284:	46bd      	mov	sp, r7
 8009286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800928a:	4770      	bx	lr

0800928c <memset>:
 800928c:	4402      	add	r2, r0
 800928e:	4603      	mov	r3, r0
 8009290:	4293      	cmp	r3, r2
 8009292:	d100      	bne.n	8009296 <memset+0xa>
 8009294:	4770      	bx	lr
 8009296:	f803 1b01 	strb.w	r1, [r3], #1
 800929a:	e7f9      	b.n	8009290 <memset+0x4>

0800929c <__libc_init_array>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	4d0d      	ldr	r5, [pc, #52]	; (80092d4 <__libc_init_array+0x38>)
 80092a0:	4c0d      	ldr	r4, [pc, #52]	; (80092d8 <__libc_init_array+0x3c>)
 80092a2:	1b64      	subs	r4, r4, r5
 80092a4:	10a4      	asrs	r4, r4, #2
 80092a6:	2600      	movs	r6, #0
 80092a8:	42a6      	cmp	r6, r4
 80092aa:	d109      	bne.n	80092c0 <__libc_init_array+0x24>
 80092ac:	4d0b      	ldr	r5, [pc, #44]	; (80092dc <__libc_init_array+0x40>)
 80092ae:	4c0c      	ldr	r4, [pc, #48]	; (80092e0 <__libc_init_array+0x44>)
 80092b0:	f000 f826 	bl	8009300 <_init>
 80092b4:	1b64      	subs	r4, r4, r5
 80092b6:	10a4      	asrs	r4, r4, #2
 80092b8:	2600      	movs	r6, #0
 80092ba:	42a6      	cmp	r6, r4
 80092bc:	d105      	bne.n	80092ca <__libc_init_array+0x2e>
 80092be:	bd70      	pop	{r4, r5, r6, pc}
 80092c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80092c4:	4798      	blx	r3
 80092c6:	3601      	adds	r6, #1
 80092c8:	e7ee      	b.n	80092a8 <__libc_init_array+0xc>
 80092ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80092ce:	4798      	blx	r3
 80092d0:	3601      	adds	r6, #1
 80092d2:	e7f2      	b.n	80092ba <__libc_init_array+0x1e>
 80092d4:	08009b54 	.word	0x08009b54
 80092d8:	08009b54 	.word	0x08009b54
 80092dc:	08009b54 	.word	0x08009b54
 80092e0:	08009b58 	.word	0x08009b58

080092e4 <memcpy>:
 80092e4:	440a      	add	r2, r1
 80092e6:	4291      	cmp	r1, r2
 80092e8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80092ec:	d100      	bne.n	80092f0 <memcpy+0xc>
 80092ee:	4770      	bx	lr
 80092f0:	b510      	push	{r4, lr}
 80092f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80092f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80092fa:	4291      	cmp	r1, r2
 80092fc:	d1f9      	bne.n	80092f2 <memcpy+0xe>
 80092fe:	bd10      	pop	{r4, pc}

08009300 <_init>:
 8009300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009302:	bf00      	nop
 8009304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009306:	bc08      	pop	{r3}
 8009308:	469e      	mov	lr, r3
 800930a:	4770      	bx	lr

0800930c <_fini>:
 800930c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800930e:	bf00      	nop
 8009310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009312:	bc08      	pop	{r3}
 8009314:	469e      	mov	lr, r3
 8009316:	4770      	bx	lr
