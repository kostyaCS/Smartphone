
411_test2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b0d8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000009f8  0800b278  0800b278  0001b278  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bc70  0800bc70  0002018c  2**0
                  CONTENTS
  4 .ARM          00000008  0800bc70  0800bc70  0001bc70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bc78  0800bc78  0002018c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bc78  0800bc78  0001bc78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800bc7c  0800bc7c  0001bc7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000018c  20000000  0800bc80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000f10  2000018c  0800be0c  0002018c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000109c  0800be0c  0002109c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002018c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000201bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b429  00000000  00000000  000201ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004945  00000000  00000000  0003b628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000016b8  00000000  00000000  0003ff70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000115c  00000000  00000000  00041628  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001b3c1  00000000  00000000  00042784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f4f2  00000000  00000000  0005db45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00091e65  00000000  00000000  0007d037  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000632c  00000000  00000000  0010ee9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  001151c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000018c 	.word	0x2000018c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b260 	.word	0x0800b260

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000190 	.word	0x20000190
 80001dc:	0800b260 	.word	0x0800b260

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA1   ------> SPI4_MOSI
*/
void MX_GPIO_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b08c      	sub	sp, #48	; 0x30
 8000590:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000592:	f107 031c 	add.w	r3, r7, #28
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80005a2:	2300      	movs	r3, #0
 80005a4:	61bb      	str	r3, [r7, #24]
 80005a6:	4b90      	ldr	r3, [pc, #576]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005aa:	4a8f      	ldr	r2, [pc, #572]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005ac:	f043 0310 	orr.w	r3, r3, #16
 80005b0:	6313      	str	r3, [r2, #48]	; 0x30
 80005b2:	4b8d      	ldr	r3, [pc, #564]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	f003 0310 	and.w	r3, r3, #16
 80005ba:	61bb      	str	r3, [r7, #24]
 80005bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	617b      	str	r3, [r7, #20]
 80005c2:	4b89      	ldr	r3, [pc, #548]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a88      	ldr	r2, [pc, #544]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005c8:	f043 0304 	orr.w	r3, r3, #4
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b86      	ldr	r3, [pc, #536]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f003 0304 	and.w	r3, r3, #4
 80005d6:	617b      	str	r3, [r7, #20]
 80005d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005da:	2300      	movs	r3, #0
 80005dc:	613b      	str	r3, [r7, #16]
 80005de:	4b82      	ldr	r3, [pc, #520]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e2:	4a81      	ldr	r2, [pc, #516]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005e8:	6313      	str	r3, [r2, #48]	; 0x30
 80005ea:	4b7f      	ldr	r3, [pc, #508]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b7b      	ldr	r3, [pc, #492]	; (80007e8 <MX_GPIO_Init+0x25c>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a7a      	ldr	r2, [pc, #488]	; (80007e8 <MX_GPIO_Init+0x25c>)
 8000600:	f043 0301 	orr.w	r3, r3, #1
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b78      	ldr	r3, [pc, #480]	; (80007e8 <MX_GPIO_Init+0x25c>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0301 	and.w	r3, r3, #1
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b74      	ldr	r3, [pc, #464]	; (80007e8 <MX_GPIO_Init+0x25c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a73      	ldr	r2, [pc, #460]	; (80007e8 <MX_GPIO_Init+0x25c>)
 800061c:	f043 0302 	orr.w	r3, r3, #2
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b71      	ldr	r3, [pc, #452]	; (80007e8 <MX_GPIO_Init+0x25c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b6d      	ldr	r3, [pc, #436]	; (80007e8 <MX_GPIO_Init+0x25c>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a6c      	ldr	r2, [pc, #432]	; (80007e8 <MX_GPIO_Init+0x25c>)
 8000638:	f043 0308 	orr.w	r3, r3, #8
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b6a      	ldr	r3, [pc, #424]	; (80007e8 <MX_GPIO_Init+0x25c>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0308 	and.w	r3, r3, #8
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 800064a:	2200      	movs	r2, #0
 800064c:	2108      	movs	r1, #8
 800064e:	4867      	ldr	r0, [pc, #412]	; (80007ec <MX_GPIO_Init+0x260>)
 8000650:	f002 fe46 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000654:	2201      	movs	r2, #1
 8000656:	2101      	movs	r1, #1
 8000658:	4865      	ldr	r0, [pc, #404]	; (80007f0 <MX_GPIO_Init+0x264>)
 800065a:	f002 fe41 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 800065e:	2200      	movs	r2, #0
 8000660:	210c      	movs	r1, #12
 8000662:	4864      	ldr	r0, [pc, #400]	; (80007f4 <MX_GPIO_Init+0x268>)
 8000664:	f002 fe3c 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	2130      	movs	r1, #48	; 0x30
 800066c:	4860      	ldr	r0, [pc, #384]	; (80007f0 <MX_GPIO_Init+0x264>)
 800066e:	f002 fe37 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f240 1131 	movw	r1, #305	; 0x131
 8000678:	485f      	ldr	r0, [pc, #380]	; (80007f8 <MX_GPIO_Init+0x26c>)
 800067a:	f002 fe31 	bl	80032e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800067e:	2200      	movs	r2, #0
 8000680:	f24f 0150 	movw	r1, #61520	; 0xf050
 8000684:	485d      	ldr	r0, [pc, #372]	; (80007fc <MX_GPIO_Init+0x270>)
 8000686:	f002 fe2b 	bl	80032e0 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = DATA_Ready_Pin;
 800068a:	2304      	movs	r3, #4
 800068c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800068e:	2300      	movs	r3, #0
 8000690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000692:	2300      	movs	r3, #0
 8000694:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(DATA_Ready_GPIO_Port, &GPIO_InitStruct);
 8000696:	f107 031c 	add.w	r3, r7, #28
 800069a:	4619      	mov	r1, r3
 800069c:	4853      	ldr	r0, [pc, #332]	; (80007ec <MX_GPIO_Init+0x260>)
 800069e:	f002 fc83 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 80006a2:	2308      	movs	r3, #8
 80006a4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006ae:	2300      	movs	r3, #0
 80006b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	4619      	mov	r1, r3
 80006b8:	484c      	ldr	r0, [pc, #304]	; (80007ec <MX_GPIO_Init+0x260>)
 80006ba:	f002 fc75 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = INT1_Pin|INT2_Pin;
 80006be:	2330      	movs	r3, #48	; 0x30
 80006c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80006c2:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80006c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c8:	2300      	movs	r3, #0
 80006ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006cc:	f107 031c 	add.w	r3, r7, #28
 80006d0:	4619      	mov	r1, r3
 80006d2:	4846      	ldr	r0, [pc, #280]	; (80007ec <MX_GPIO_Init+0x260>)
 80006d4:	f002 fc68 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PC4 PC5 */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|GPIO_PIN_4|GPIO_PIN_5;
 80006d8:	2331      	movs	r3, #49	; 0x31
 80006da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006dc:	2301      	movs	r3, #1
 80006de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e0:	2300      	movs	r3, #0
 80006e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e4:	2300      	movs	r3, #0
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e8:	f107 031c 	add.w	r3, r7, #28
 80006ec:	4619      	mov	r1, r3
 80006ee:	4840      	ldr	r0, [pc, #256]	; (80007f0 <MX_GPIO_Init+0x264>)
 80006f0:	f002 fc5a 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f8:	2302      	movs	r3, #2
 80006fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fc:	2300      	movs	r3, #0
 80006fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000700:	2303      	movs	r3, #3
 8000702:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8000704:	2305      	movs	r3, #5
 8000706:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4619      	mov	r1, r3
 800070e:	4839      	ldr	r0, [pc, #228]	; (80007f4 <MX_GPIO_Init+0x268>)
 8000710:	f002 fc4a 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000714:	230c      	movs	r3, #12
 8000716:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	2301      	movs	r3, #1
 800071a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071c:	2300      	movs	r3, #0
 800071e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000720:	2300      	movs	r3, #0
 8000722:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000724:	f107 031c 	add.w	r3, r7, #28
 8000728:	4619      	mov	r1, r3
 800072a:	4832      	ldr	r0, [pc, #200]	; (80007f4 <MX_GPIO_Init+0x268>)
 800072c:	f002 fc3c 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB4 PB5 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_8;
 8000730:	f240 1331 	movw	r3, #305	; 0x131
 8000734:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000736:	2301      	movs	r3, #1
 8000738:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073a:	2300      	movs	r3, #0
 800073c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073e:	2300      	movs	r3, #0
 8000740:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000742:	f107 031c 	add.w	r3, r7, #28
 8000746:	4619      	mov	r1, r3
 8000748:	482b      	ldr	r0, [pc, #172]	; (80007f8 <MX_GPIO_Init+0x26c>)
 800074a:	f002 fc2d 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin PDPin
                           PDPin PD6 */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800074e:	f24f 0350 	movw	r3, #61520	; 0xf050
 8000752:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin|GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000760:	f107 031c 	add.w	r3, r7, #28
 8000764:	4619      	mov	r1, r3
 8000766:	4825      	ldr	r0, [pc, #148]	; (80007fc <MX_GPIO_Init+0x270>)
 8000768:	f002 fc1e 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800076c:	230f      	movs	r3, #15
 800076e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000770:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000774:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000776:	2301      	movs	r3, #1
 8000778:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800077a:	f107 031c 	add.w	r3, r7, #28
 800077e:	4619      	mov	r1, r3
 8000780:	481e      	ldr	r0, [pc, #120]	; (80007fc <MX_GPIO_Init+0x270>)
 8000782:	f002 fc11 	bl	8002fa8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000786:	2320      	movs	r3, #32
 8000788:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800078a:	2300      	movs	r3, #0
 800078c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	4619      	mov	r1, r3
 8000798:	4818      	ldr	r0, [pc, #96]	; (80007fc <MX_GPIO_Init+0x270>)
 800079a:	f002 fc05 	bl	8002fa8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800079e:	2200      	movs	r2, #0
 80007a0:	2100      	movs	r1, #0
 80007a2:	2006      	movs	r0, #6
 80007a4:	f002 fbc9 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80007a8:	2006      	movs	r0, #6
 80007aa:	f002 fbe2 	bl	8002f72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2100      	movs	r1, #0
 80007b2:	2007      	movs	r0, #7
 80007b4:	f002 fbc1 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80007b8:	2007      	movs	r0, #7
 80007ba:	f002 fbda 	bl	8002f72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	2008      	movs	r0, #8
 80007c4:	f002 fbb9 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80007c8:	2008      	movs	r0, #8
 80007ca:	f002 fbd2 	bl	8002f72 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	2009      	movs	r0, #9
 80007d4:	f002 fbb1 	bl	8002f3a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80007d8:	2009      	movs	r0, #9
 80007da:	f002 fbca 	bl	8002f72 <HAL_NVIC_EnableIRQ>

}
 80007de:	bf00      	nop
 80007e0:	3730      	adds	r7, #48	; 0x30
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40021000 	.word	0x40021000
 80007f0:	40020800 	.word	0x40020800
 80007f4:	40020000 	.word	0x40020000
 80007f8:	40020400 	.word	0x40020400
 80007fc:	40020c00 	.word	0x40020c00

08000800 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000804:	4b12      	ldr	r3, [pc, #72]	; (8000850 <MX_I2C1_Init+0x50>)
 8000806:	4a13      	ldr	r2, [pc, #76]	; (8000854 <MX_I2C1_Init+0x54>)
 8000808:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800080a:	4b11      	ldr	r3, [pc, #68]	; (8000850 <MX_I2C1_Init+0x50>)
 800080c:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_I2C1_Init+0x58>)
 800080e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000810:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <MX_I2C1_Init+0x50>)
 8000812:	2200      	movs	r2, #0
 8000814:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000816:	4b0e      	ldr	r3, [pc, #56]	; (8000850 <MX_I2C1_Init+0x50>)
 8000818:	2200      	movs	r2, #0
 800081a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <MX_I2C1_Init+0x50>)
 800081e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000822:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000824:	4b0a      	ldr	r3, [pc, #40]	; (8000850 <MX_I2C1_Init+0x50>)
 8000826:	2200      	movs	r2, #0
 8000828:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <MX_I2C1_Init+0x50>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000830:	4b07      	ldr	r3, [pc, #28]	; (8000850 <MX_I2C1_Init+0x50>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000836:	4b06      	ldr	r3, [pc, #24]	; (8000850 <MX_I2C1_Init+0x50>)
 8000838:	2200      	movs	r2, #0
 800083a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800083c:	4804      	ldr	r0, [pc, #16]	; (8000850 <MX_I2C1_Init+0x50>)
 800083e:	f002 fd8d 	bl	800335c <HAL_I2C_Init>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000848:	f002 f806 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200001a8 	.word	0x200001a8
 8000854:	40005400 	.word	0x40005400
 8000858:	000186a0 	.word	0x000186a0

0800085c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	; 0x28
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000864:	f107 0314 	add.w	r3, r7, #20
 8000868:	2200      	movs	r2, #0
 800086a:	601a      	str	r2, [r3, #0]
 800086c:	605a      	str	r2, [r3, #4]
 800086e:	609a      	str	r2, [r3, #8]
 8000870:	60da      	str	r2, [r3, #12]
 8000872:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a19      	ldr	r2, [pc, #100]	; (80008e0 <HAL_I2C_MspInit+0x84>)
 800087a:	4293      	cmp	r3, r2
 800087c:	d12c      	bne.n	80008d8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	613b      	str	r3, [r7, #16]
 8000882:	4b18      	ldr	r3, [pc, #96]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a17      	ldr	r2, [pc, #92]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000888:	f043 0302 	orr.w	r3, r3, #2
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0302 	and.w	r3, r3, #2
 8000896:	613b      	str	r3, [r7, #16]
 8000898:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800089a:	f44f 7310 	mov.w	r3, #576	; 0x240
 800089e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008a0:	2312      	movs	r3, #18
 80008a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80008a4:	2301      	movs	r3, #1
 80008a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a8:	2300      	movs	r3, #0
 80008aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80008ac:	2304      	movs	r3, #4
 80008ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	4619      	mov	r1, r3
 80008b6:	480c      	ldr	r0, [pc, #48]	; (80008e8 <HAL_I2C_MspInit+0x8c>)
 80008b8:	f002 fb76 	bl	8002fa8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	4b08      	ldr	r3, [pc, #32]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c4:	4a07      	ldr	r2, [pc, #28]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008ca:	6413      	str	r3, [r2, #64]	; 0x40
 80008cc:	4b05      	ldr	r3, [pc, #20]	; (80008e4 <HAL_I2C_MspInit+0x88>)
 80008ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80008d8:	bf00      	nop
 80008da:	3728      	adds	r7, #40	; 0x28
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	40005400 	.word	0x40005400
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40020400 	.word	0x40020400

080008ec <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
I2S_HandleTypeDef hi2s3;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 80008f0:	4b12      	ldr	r3, [pc, #72]	; (800093c <MX_I2S2_Init+0x50>)
 80008f2:	4a13      	ldr	r2, [pc, #76]	; (8000940 <MX_I2S2_Init+0x54>)
 80008f4:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 80008f6:	4b11      	ldr	r3, [pc, #68]	; (800093c <MX_I2S2_Init+0x50>)
 80008f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008fc:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 80008fe:	4b0f      	ldr	r3, [pc, #60]	; (800093c <MX_I2S2_Init+0x50>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000904:	4b0d      	ldr	r3, [pc, #52]	; (800093c <MX_I2S2_Init+0x50>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800090a:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MX_I2S2_Init+0x50>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000910:	4b0a      	ldr	r3, [pc, #40]	; (800093c <MX_I2S2_Init+0x50>)
 8000912:	4a0c      	ldr	r2, [pc, #48]	; (8000944 <MX_I2S2_Init+0x58>)
 8000914:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8000916:	4b09      	ldr	r3, [pc, #36]	; (800093c <MX_I2S2_Init+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800091c:	4b07      	ldr	r3, [pc, #28]	; (800093c <MX_I2S2_Init+0x50>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_ENABLE;
 8000922:	4b06      	ldr	r3, [pc, #24]	; (800093c <MX_I2S2_Init+0x50>)
 8000924:	2201      	movs	r2, #1
 8000926:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8000928:	4804      	ldr	r0, [pc, #16]	; (800093c <MX_I2S2_Init+0x50>)
 800092a:	f002 fe5b 	bl	80035e4 <HAL_I2S_Init>
 800092e:	4603      	mov	r3, r0
 8000930:	2b00      	cmp	r3, #0
 8000932:	d001      	beq.n	8000938 <MX_I2S2_Init+0x4c>
  {
    Error_Handler();
 8000934:	f001 ff90 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8000938:	bf00      	nop
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001fc 	.word	0x200001fc
 8000940:	40003800 	.word	0x40003800
 8000944:	00017700 	.word	0x00017700

08000948 <MX_I2S3_Init>:
/* I2S3 init function */
void MX_I2S3_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 800094c:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_I2S3_Init+0x54>)
 800094e:	4a14      	ldr	r2, [pc, #80]	; (80009a0 <MX_I2S3_Init+0x58>)
 8000950:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000952:	4b12      	ldr	r3, [pc, #72]	; (800099c <MX_I2S3_Init+0x54>)
 8000954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000958:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800095a:	4b10      	ldr	r3, [pc, #64]	; (800099c <MX_I2S3_Init+0x54>)
 800095c:	2200      	movs	r2, #0
 800095e:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000960:	4b0e      	ldr	r3, [pc, #56]	; (800099c <MX_I2S3_Init+0x54>)
 8000962:	2200      	movs	r2, #0
 8000964:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000966:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_I2S3_Init+0x54>)
 8000968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800096c:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800096e:	4b0b      	ldr	r3, [pc, #44]	; (800099c <MX_I2S3_Init+0x54>)
 8000970:	4a0c      	ldr	r2, [pc, #48]	; (80009a4 <MX_I2S3_Init+0x5c>)
 8000972:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000974:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_I2S3_Init+0x54>)
 8000976:	2200      	movs	r2, #0
 8000978:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800097a:	4b08      	ldr	r3, [pc, #32]	; (800099c <MX_I2S3_Init+0x54>)
 800097c:	2200      	movs	r2, #0
 800097e:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000980:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_I2S3_Init+0x54>)
 8000982:	2200      	movs	r2, #0
 8000984:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000986:	4805      	ldr	r0, [pc, #20]	; (800099c <MX_I2S3_Init+0x54>)
 8000988:	f002 fe2c 	bl	80035e4 <HAL_I2S_Init>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000992:	f001 ff61 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}
 800099a:	bf00      	nop
 800099c:	20000244 	.word	0x20000244
 80009a0:	40003c00 	.word	0x40003c00
 80009a4:	00017700 	.word	0x00017700

080009a8 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	; 0x38
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]
  if(i2sHandle->Instance==SPI2)
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a59      	ldr	r2, [pc, #356]	; (8000b2c <HAL_I2S_MspInit+0x184>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d15b      	bne.n	8000a82 <HAL_I2S_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80009ca:	2300      	movs	r3, #0
 80009cc:	623b      	str	r3, [r7, #32]
 80009ce:	4b58      	ldr	r3, [pc, #352]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 80009d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009d2:	4a57      	ldr	r2, [pc, #348]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 80009d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009d8:	6413      	str	r3, [r2, #64]	; 0x40
 80009da:	4b55      	ldr	r3, [pc, #340]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 80009dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e2:	623b      	str	r3, [r7, #32]
 80009e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	2300      	movs	r3, #0
 80009e8:	61fb      	str	r3, [r7, #28]
 80009ea:	4b51      	ldr	r3, [pc, #324]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ee:	4a50      	ldr	r2, [pc, #320]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6313      	str	r3, [r2, #48]	; 0x30
 80009f6:	4b4e      	ldr	r3, [pc, #312]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 80009f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	61fb      	str	r3, [r7, #28]
 8000a00:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a02:	2300      	movs	r3, #0
 8000a04:	61bb      	str	r3, [r7, #24]
 8000a06:	4b4a      	ldr	r3, [pc, #296]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a0a:	4a49      	ldr	r2, [pc, #292]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	6313      	str	r3, [r2, #48]	; 0x30
 8000a12:	4b47      	ldr	r3, [pc, #284]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	61bb      	str	r3, [r7, #24]
 8000a1c:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> I2S2_ext_SD
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a1e:	2304      	movs	r3, #4
 8000a20:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a22:	2302      	movs	r3, #2
 8000a24:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_I2S2ext;
 8000a2e:	2306      	movs	r3, #6
 8000a30:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	483e      	ldr	r0, [pc, #248]	; (8000b34 <HAL_I2S_MspInit+0x18c>)
 8000a3a:	f002 fab5 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000a3e:	2308      	movs	r3, #8
 8000a40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a42:	2302      	movs	r3, #2
 8000a44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a4e:	2305      	movs	r3, #5
 8000a50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000a52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a56:	4619      	mov	r1, r3
 8000a58:	4836      	ldr	r0, [pc, #216]	; (8000b34 <HAL_I2S_MspInit+0x18c>)
 8000a5a:	f002 faa5 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = CLK_IN_Pin|GPIO_PIN_12;
 8000a5e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000a70:	2305      	movs	r3, #5
 8000a72:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	482f      	ldr	r0, [pc, #188]	; (8000b38 <HAL_I2S_MspInit+0x190>)
 8000a7c:	f002 fa94 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000a80:	e04f      	b.n	8000b22 <HAL_I2S_MspInit+0x17a>
  else if(i2sHandle->Instance==SPI3)
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4a2d      	ldr	r2, [pc, #180]	; (8000b3c <HAL_I2S_MspInit+0x194>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d14a      	bne.n	8000b22 <HAL_I2S_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	617b      	str	r3, [r7, #20]
 8000a90:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a94:	4a26      	ldr	r2, [pc, #152]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000a9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000a9c:	4b24      	ldr	r3, [pc, #144]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000a9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	4b20      	ldr	r3, [pc, #128]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab0:	4a1f      	ldr	r2, [pc, #124]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000ab2:	f043 0301 	orr.w	r3, r3, #1
 8000ab6:	6313      	str	r3, [r2, #48]	; 0x30
 8000ab8:	4b1d      	ldr	r3, [pc, #116]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	f003 0301 	and.w	r3, r3, #1
 8000ac0:	613b      	str	r3, [r7, #16]
 8000ac2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	4b19      	ldr	r3, [pc, #100]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000acc:	4a18      	ldr	r2, [pc, #96]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000ace:	f043 0304 	orr.w	r3, r3, #4
 8000ad2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ad4:	4b16      	ldr	r3, [pc, #88]	; (8000b30 <HAL_I2S_MspInit+0x188>)
 8000ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad8:	f003 0304 	and.w	r3, r3, #4
 8000adc:	60fb      	str	r3, [r7, #12]
 8000ade:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000ae0:	2310      	movs	r3, #16
 8000ae2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae8:	2300      	movs	r3, #0
 8000aea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aec:	2300      	movs	r3, #0
 8000aee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000af0:	2306      	movs	r3, #6
 8000af2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4811      	ldr	r0, [pc, #68]	; (8000b40 <HAL_I2S_MspInit+0x198>)
 8000afc:	f002 fa54 	bl	8002fa8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000b00:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000b04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b06:	2302      	movs	r3, #2
 8000b08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b0e:	2300      	movs	r3, #0
 8000b10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000b12:	2306      	movs	r3, #6
 8000b14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b1a:	4619      	mov	r1, r3
 8000b1c:	4805      	ldr	r0, [pc, #20]	; (8000b34 <HAL_I2S_MspInit+0x18c>)
 8000b1e:	f002 fa43 	bl	8002fa8 <HAL_GPIO_Init>
}
 8000b22:	bf00      	nop
 8000b24:	3738      	adds	r7, #56	; 0x38
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40003800 	.word	0x40003800
 8000b30:	40023800 	.word	0x40023800
 8000b34:	40020800 	.word	0x40020800
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40003c00 	.word	0x40003c00
 8000b40:	40020000 	.word	0x40020000

08000b44 <LCD5110_refresh>:
	LCD5110_canvas_t def_scr;
} LCD5110_display;


inline void LCD5110_refresh(LCD5110_display* lcd_conf)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
	LCD5110_refresh_ll(&lcd_conf->hw_conf);
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 fd7b 	bl	800164a <LCD5110_refresh_ll>
}
 8000b54:	bf00      	nop
 8000b56:	3708      	adds	r7, #8
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}

08000b5c <LCD5110_set_cursor>:
void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);

// Regarding inline -- C also lcd5110.c.
inline void LCD5110_set_cursor(int x, int y, LCD5110_display* lcd_conf)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b084      	sub	sp, #16
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	60f8      	str	r0, [r7, #12]
 8000b64:	60b9      	str	r1, [r7, #8]
 8000b66:	607a      	str	r2, [r7, #4]
	LCD5110_wset_cursor(x, y, &lcd_conf->def_scr, lcd_conf);
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	68b9      	ldr	r1, [r7, #8]
 8000b72:	68f8      	ldr	r0, [r7, #12]
 8000b74:	f000 fa4e 	bl	8001014 <LCD5110_wset_cursor>
}
 8000b78:	bf00      	nop
 8000b7a:	3710      	adds	r7, #16
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <LCD5110_clear_scr>:
inline point_t LCD5110_get_cursor(LCD5110_display* lcd_conf)
{
	return LCD5110_wget_cursor(&lcd_conf->def_scr, lcd_conf);
}

inline void LCD5110_clear_scr(LCD5110_display* lcd_conf){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
	LCD5110_clrscr(&lcd_conf->hw_conf);
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f000 fb04 	bl	8001198 <LCD5110_clrscr>
	LCD5110_set_cursor(0, 0, lcd_conf);
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	2100      	movs	r1, #0
 8000b94:	2000      	movs	r0, #0
 8000b96:	f7ff ffe1 	bl	8000b5c <LCD5110_set_cursor>
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}

08000ba2 <LCD5110_print>:

void LCD5110_wprint(const char* str, int color,
						LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
int LCD5110_wprintf( LCD5110_display* lcd_conf, int color, LCD5110_canvas_t* win, char *fmt, ...);

inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf){
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b084      	sub	sp, #16
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	60f8      	str	r0, [r7, #12]
 8000baa:	60b9      	str	r1, [r7, #8]
 8000bac:	607a      	str	r2, [r7, #4]
	LCD5110_wprint(str, color, &lcd_conf->def_scr, lcd_conf);
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	68b9      	ldr	r1, [r7, #8]
 8000bb8:	68f8      	ldr	r0, [r7, #12]
 8000bba:	f000 fa61 	bl	8001080 <LCD5110_wprint>
}
 8000bbe:	bf00      	nop
 8000bc0:	3710      	adds	r7, #16
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <LCD5110_max>:
extern inline void LCD5110_fill_scr(LCD5110_display* lcd_conf);
extern inline void LCD5110_fill_win(LCD5110_canvas_t* win, LCD5110_display* lcd_conf);
extern inline void LCD5110_endl(LCD5110_display* lcd_conf);
extern inline void LCD5110_print(const char* str, int color, LCD5110_display* lcd_conf);

static inline int LCD5110_max(int a, int b) {
 8000bc6:	b480      	push	{r7}
 8000bc8:	b083      	sub	sp, #12
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
 8000bce:	6039      	str	r1, [r7, #0]
	return a > b ? a : b;
 8000bd0:	683a      	ldr	r2, [r7, #0]
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	bfb8      	it	lt
 8000bd8:	4613      	movlt	r3, r2
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	370c      	adds	r7, #12
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr

08000be6 <LCD5110_min>:

static inline int LCD5110_min(int a, int b) {
 8000be6:	b480      	push	{r7}
 8000be8:	b083      	sub	sp, #12
 8000bea:	af00      	add	r7, sp, #0
 8000bec:	6078      	str	r0, [r7, #4]
 8000bee:	6039      	str	r1, [r7, #0]
	return a < b ? a : b;
 8000bf0:	683a      	ldr	r2, [r7, #0]
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4293      	cmp	r3, r2
 8000bf6:	bfa8      	it	ge
 8000bf8:	4613      	movge	r3, r2
}
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr

08000c06 <LCD5110_wline>:
}
#endif

void LCD5110_wline(int x1, int y1, int x2, int y2, int color,
					LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8000c06:	b580      	push	{r7, lr}
 8000c08:	b08e      	sub	sp, #56	; 0x38
 8000c0a:	af00      	add	r7, sp, #0
 8000c0c:	60f8      	str	r0, [r7, #12]
 8000c0e:	60b9      	str	r1, [r7, #8]
 8000c10:	607a      	str	r2, [r7, #4]
 8000c12:	603b      	str	r3, [r7, #0]
	x1 += win->frame.x0;
 8000c14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c1a:	461a      	mov	r2, r3
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4413      	add	r3, r2
 8000c20:	60fb      	str	r3, [r7, #12]
	y1 += win->frame.y0;
 8000c22:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c24:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	68bb      	ldr	r3, [r7, #8]
 8000c2c:	4413      	add	r3, r2
 8000c2e:	60bb      	str	r3, [r7, #8]
	x2 += win->frame.x0;
 8000c30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c36:	461a      	mov	r2, r3
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	607b      	str	r3, [r7, #4]
	y2 += win->frame.y0;
 8000c3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c40:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000c44:	461a      	mov	r2, r3
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	4413      	add	r3, r2
 8000c4a:	603b      	str	r3, [r7, #0]

	int zn = x1 - x2;
 8000c4c:	68fa      	ldr	r2, [r7, #12]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	1ad3      	subs	r3, r2, r3
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
	//float k = (y1-y2)/zn;
	//float b = y1 - k*x1;
	int yb = LCD5110_min(y1, y2);
 8000c54:	6839      	ldr	r1, [r7, #0]
 8000c56:	68b8      	ldr	r0, [r7, #8]
 8000c58:	f7ff ffc5 	bl	8000be6 <LCD5110_min>
 8000c5c:	62b8      	str	r0, [r7, #40]	; 0x28
	int ye = LCD5110_max(y1, y2);
 8000c5e:	6839      	ldr	r1, [r7, #0]
 8000c60:	68b8      	ldr	r0, [r7, #8]
 8000c62:	f7ff ffb0 	bl	8000bc6 <LCD5110_max>
 8000c66:	6278      	str	r0, [r7, #36]	; 0x24
	int xb = LCD5110_min(x1, x2);
 8000c68:	6879      	ldr	r1, [r7, #4]
 8000c6a:	68f8      	ldr	r0, [r7, #12]
 8000c6c:	f7ff ffbb 	bl	8000be6 <LCD5110_min>
 8000c70:	6238      	str	r0, [r7, #32]
	int xe = LCD5110_max(x1, x2);
 8000c72:	6879      	ldr	r1, [r7, #4]
 8000c74:	68f8      	ldr	r0, [r7, #12]
 8000c76:	f7ff ffa6 	bl	8000bc6 <LCD5110_max>
 8000c7a:	61f8      	str	r0, [r7, #28]
	if ((ye - yb) < (xe - xb)) {
 8000c7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c80:	1ad2      	subs	r2, r2, r3
 8000c82:	69f9      	ldr	r1, [r7, #28]
 8000c84:	6a3b      	ldr	r3, [r7, #32]
 8000c86:	1acb      	subs	r3, r1, r3
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	da42      	bge.n	8000d12 <LCD5110_wline+0x10c>
		for (int i = xb; i <= xe; ++i) {
 8000c8c:	6a3b      	ldr	r3, [r7, #32]
 8000c8e:	637b      	str	r3, [r7, #52]	; 0x34
 8000c90:	e03a      	b.n	8000d08 <LCD5110_wline+0x102>
			int cury = (y1 - y2) * (i - x1) / zn + y1;
 8000c92:	68ba      	ldr	r2, [r7, #8]
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	1ad3      	subs	r3, r2, r3
 8000c98:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8000c9a:	68fa      	ldr	r2, [r7, #12]
 8000c9c:	1a8a      	subs	r2, r1, r2
 8000c9e:	fb03 f202 	mul.w	r2, r3, r2
 8000ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca4:	fb92 f3f3 	sdiv	r3, r2, r3
 8000ca8:	68ba      	ldr	r2, [r7, #8]
 8000caa:	4413      	add	r3, r2
 8000cac:	617b      	str	r3, [r7, #20]
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000cae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	db22      	blt.n	8000d02 <LCD5110_wline+0xfc>
 8000cbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000cc2:	461a      	mov	r2, r3
 8000cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000cca:	4413      	add	r3, r2
 8000ccc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000cce:	429a      	cmp	r2, r3
 8000cd0:	da17      	bge.n	8000d02 <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000cd8:	461a      	mov	r2, r3
			if( i    >= win->frame.x0 && i    < win->frame.x0 + win->frame.width &&
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	4293      	cmp	r3, r2
 8000cde:	db10      	blt.n	8000d02 <LCD5110_wline+0xfc>
				cury >= win->frame.y0 && cury < win->frame.y0 + win->frame.height )
 8000ce0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000ce2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000ce6:	461a      	mov	r2, r3
 8000ce8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cea:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000cee:	4413      	add	r3, r2
 8000cf0:	697a      	ldr	r2, [r7, #20]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	da05      	bge.n	8000d02 <LCD5110_wline+0xfc>
			{
				LCD5110_putpix(i, cury, color, &lcd_conf->hw_conf);
 8000cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000cf8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000cfa:	6979      	ldr	r1, [r7, #20]
 8000cfc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8000cfe:	f000 fa66 	bl	80011ce <LCD5110_putpix>
		for (int i = xb; i <= xe; ++i) {
 8000d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d04:	3301      	adds	r3, #1
 8000d06:	637b      	str	r3, [r7, #52]	; 0x34
 8000d08:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	429a      	cmp	r2, r3
 8000d0e:	ddc0      	ble.n	8000c92 <LCD5110_wline+0x8c>
			{
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
			}
		}
	}
}
 8000d10:	e041      	b.n	8000d96 <LCD5110_wline+0x190>
		for (int i = yb; i <= ye; ++i) {
 8000d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d14:	633b      	str	r3, [r7, #48]	; 0x30
 8000d16:	e03a      	b.n	8000d8e <LCD5110_wline+0x188>
			int curx = (i - y1) * zn / (y1 - y2) + x1;
 8000d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d1a:	68bb      	ldr	r3, [r7, #8]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000d20:	fb03 f202 	mul.w	r2, r3, r2
 8000d24:	68b9      	ldr	r1, [r7, #8]
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	1acb      	subs	r3, r1, r3
 8000d2a:	fb92 f3f3 	sdiv	r3, r2, r3
 8000d2e:	68fa      	ldr	r2, [r7, #12]
 8000d30:	4413      	add	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000d34:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d36:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	69bb      	ldr	r3, [r7, #24]
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	db22      	blt.n	8000d88 <LCD5110_wline+0x182>
 8000d42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000d48:	461a      	mov	r2, r3
 8000d4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d4c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000d50:	4413      	add	r3, r2
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	429a      	cmp	r2, r3
 8000d56:	da17      	bge.n	8000d88 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d5a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d5e:	461a      	mov	r2, r3
			if( curx >= win->frame.x0 && curx < win->frame.x0 + win->frame.width &&
 8000d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d62:	4293      	cmp	r3, r2
 8000d64:	db10      	blt.n	8000d88 <LCD5110_wline+0x182>
				i    >= win->frame.y0 && i    < win->frame.y0 + win->frame.height )
 8000d66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d68:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d70:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000d74:	4413      	add	r3, r2
 8000d76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	da05      	bge.n	8000d88 <LCD5110_wline+0x182>
				LCD5110_putpix(curx, i, color, &lcd_conf->hw_conf);
 8000d7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000d7e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000d80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000d82:	69b8      	ldr	r0, [r7, #24]
 8000d84:	f000 fa23 	bl	80011ce <LCD5110_putpix>
		for (int i = yb; i <= ye; ++i) {
 8000d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d8a:	3301      	adds	r3, #1
 8000d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8000d8e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d92:	429a      	cmp	r2, r3
 8000d94:	ddc0      	ble.n	8000d18 <LCD5110_wline+0x112>
}
 8000d96:	bf00      	nop
 8000d98:	3738      	adds	r7, #56	; 0x38
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}

08000d9e <LCD5110_wrect>:

void LCD5110_wrect(rect_t* rect, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000d9e:	b590      	push	{r4, r7, lr}
 8000da0:	b089      	sub	sp, #36	; 0x24
 8000da2:	af04      	add	r7, sp, #16
 8000da4:	60f8      	str	r0, [r7, #12]
 8000da6:	60b9      	str	r1, [r7, #8]
 8000da8:	607a      	str	r2, [r7, #4]
 8000daa:	603b      	str	r3, [r7, #0]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000db2:	4618      	mov	r0, r3
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000dba:	4619      	mov	r1, r3
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dca:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000dcc:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0, 				 color, win, lcd_conf);
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000dd4:	461c      	mov	r4, r3
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	9302      	str	r3, [sp, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	9301      	str	r3, [sp, #4]
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	9300      	str	r3, [sp, #0]
 8000de2:	4623      	mov	r3, r4
 8000de4:	f7ff ff0f 	bl	8000c06 <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000dee:	461c      	mov	r4, r3
 8000df0:	68fb      	ldr	r3, [r7, #12]
 8000df2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000df6:	461a      	mov	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000dfe:	4413      	add	r3, r2
 8000e00:	1e59      	subs	r1, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e02:	68fb      	ldr	r3, [r7, #12]
 8000e04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	68fb      	ldr	r3, [r7, #12]
 8000e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e10:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e12:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e22:	4403      	add	r3, r0
	LCD5110_wline(rect->x0, 			  rect->y0 + rect->height-1,
 8000e24:	1e58      	subs	r0, r3, #1
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	9302      	str	r3, [sp, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	9301      	str	r3, [sp, #4]
 8000e2e:	68bb      	ldr	r3, [r7, #8]
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	4603      	mov	r3, r0
 8000e34:	4620      	mov	r0, r4
 8000e36:	f7ff fee6 	bl	8000c06 <LCD5110_wline>
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e40:	4618      	mov	r0, r3
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e48:	4619      	mov	r1, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	f9b3 3000 	ldrsh.w	r3, [r3]
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e50:	461c      	mov	r4, r3
				  rect->x0,  			  rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e58:	461a      	mov	r2, r3
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000e60:	4413      	add	r3, r2
	LCD5110_wline(rect->x0, 			  rect->y0,
 8000e62:	1e5a      	subs	r2, r3, #1
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	9302      	str	r3, [sp, #8]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	9301      	str	r3, [sp, #4]
 8000e6c:	68bb      	ldr	r3, [r7, #8]
 8000e6e:	9300      	str	r3, [sp, #0]
 8000e70:	4613      	mov	r3, r2
 8000e72:	4622      	mov	r2, r4
 8000e74:	f7ff fec7 	bl	8000c06 <LCD5110_wline>
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e86:	4413      	add	r3, r2
 8000e88:	1e58      	subs	r0, r3, #1
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000e90:	461c      	mov	r4, r3
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000e98:	461a      	mov	r2, r3
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000ea0:	4413      	add	r3, r2
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000ea2:	1e5a      	subs	r2, r3, #1
				  rect->x0+rect->width-1, rect->y0 + rect->height-1, color, win, lcd_conf);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000eaa:	4619      	mov	r1, r3
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000eb2:	440b      	add	r3, r1
	LCD5110_wline(rect->x0+rect->width-1, rect->y0,
 8000eb4:	1e59      	subs	r1, r3, #1
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	9302      	str	r3, [sp, #8]
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	9301      	str	r3, [sp, #4]
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	9300      	str	r3, [sp, #0]
 8000ec2:	460b      	mov	r3, r1
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	f7ff fe9e 	bl	8000c06 <LCD5110_wline>
}
 8000eca:	bf00      	nop
 8000ecc:	3714      	adds	r7, #20
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd90      	pop	{r4, r7, pc}

08000ed2 <LCD5110_rect>:

void LCD5110_rect(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b084      	sub	sp, #16
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	60f8      	str	r0, [r7, #12]
 8000eda:	60b9      	str	r1, [r7, #8]
 8000edc:	607a      	str	r2, [r7, #4]
	LCD5110_wrect(rect, color, &lcd_conf->def_scr, lcd_conf);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	f503 7205 	add.w	r2, r3, #532	; 0x214
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	68b9      	ldr	r1, [r7, #8]
 8000ee8:	68f8      	ldr	r0, [r7, #12]
 8000eea:	f7ff ff58 	bl	8000d9e <LCD5110_wrect>
}
 8000eee:	bf00      	nop
 8000ef0:	3710      	adds	r7, #16
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <LCD5110_rect_fill>:
void LCD5110_win_draw_frame(int color, LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
	LCD5110_rect(&win->frame, color, lcd_conf);
}

void LCD5110_rect_fill(rect_t* rect, int color,
		LCD5110_display* lcd_conf) {
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b086      	sub	sp, #24
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	60f8      	str	r0, [r7, #12]
 8000efe:	60b9      	str	r1, [r7, #8]
 8000f00:	607a      	str	r2, [r7, #4]
	//! Slow!
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f08:	617b      	str	r3, [r7, #20]
 8000f0a:	e01b      	b.n	8000f44 <LCD5110_rect_fill+0x4e>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f12:	613b      	str	r3, [r7, #16]
 8000f14:	e008      	b.n	8000f28 <LCD5110_rect_fill+0x32>
			LCD5110_putpix(i, j, color, &lcd_conf->hw_conf);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68ba      	ldr	r2, [r7, #8]
 8000f1a:	6939      	ldr	r1, [r7, #16]
 8000f1c:	6978      	ldr	r0, [r7, #20]
 8000f1e:	f000 f956 	bl	80011ce <LCD5110_putpix>
		for (int j = rect->y0; j < rect->y0+rect->height; ++j)
 8000f22:	693b      	ldr	r3, [r7, #16]
 8000f24:	3301      	adds	r3, #1
 8000f26:	613b      	str	r3, [r7, #16]
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000f2e:	461a      	mov	r2, r3
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8000f36:	4413      	add	r3, r2
 8000f38:	693a      	ldr	r2, [r7, #16]
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	dbeb      	blt.n	8000f16 <LCD5110_rect_fill+0x20>
	for (int i = rect->x0; i < rect->x0+rect->width; ++i)
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	3301      	adds	r3, #1
 8000f42:	617b      	str	r3, [r7, #20]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000f4a:	461a      	mov	r2, r3
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f52:	4413      	add	r3, r2
 8000f54:	697a      	ldr	r2, [r7, #20]
 8000f56:	429a      	cmp	r2, r3
 8000f58:	dbd8      	blt.n	8000f0c <LCD5110_rect_fill+0x16>
}
 8000f5a:	bf00      	nop
 8000f5c:	bf00      	nop
 8000f5e:	3718      	adds	r7, #24
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}

08000f64 <LCD5110_wputchar>:
	LCD5110_drawBitmap(px, py, fontpointer + ch * base_font_width,
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}

void LCD5110_wputchar(int px, int py, char ch, int color,
		LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 8000f64:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f66:	b08b      	sub	sp, #44	; 0x2c
 8000f68:	af04      	add	r7, sp, #16
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	603b      	str	r3, [r7, #0]
 8000f70:	4613      	mov	r3, r2
 8000f72:	71fb      	strb	r3, [r7, #7]
	if (win->cursor.y < 0 || win->cursor.x < 0)
 8000f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f76:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	db41      	blt.n	8001002 <LCD5110_wputchar+0x9e>
 8000f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	db3c      	blt.n	8001002 <LCD5110_wputchar+0x9e>
		return;
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f8a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8000f8e:	461a      	mov	r2, r3
 8000f90:	2306      	movs	r3, #6
 8000f92:	4413      	add	r3, r2
 8000f94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000f96:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d833      	bhi.n	8001006 <LCD5110_wputchar+0xa2>
		 win->cursor.y + base_font_height > win->frame.height )
 8000f9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fa0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	2308      	movs	r3, #8
 8000fa8:	4413      	add	r3, r2
 8000faa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000fac:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
	if ( win->cursor.x + base_font_width > win->frame.width ||
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d828      	bhi.n	8001006 <LCD5110_wputchar+0xa2>
		return;
//! TODO: Print part of char
	const unsigned char *fontpointer = base_font;
 8000fb4:	4b16      	ldr	r3, [pc, #88]	; (8001010 <LCD5110_wputchar+0xac>)
 8000fb6:	617b      	str	r3, [r7, #20]
	LCD5110_drawBitmap(px + win->frame.x0, py + win->frame.y0, fontpointer + ch * base_font_width,
 8000fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000fbe:	461a      	mov	r2, r3
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	18d0      	adds	r0, r2, r3
 8000fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000fc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000fca:	461a      	mov	r2, r3
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	18d1      	adds	r1, r2, r3
 8000fd0:	79fb      	ldrb	r3, [r7, #7]
 8000fd2:	2206      	movs	r2, #6
 8000fd4:	fb02 f303 	mul.w	r3, r2, r3
 8000fd8:	697a      	ldr	r2, [r7, #20]
 8000fda:	441a      	add	r2, r3
 8000fdc:	2306      	movs	r3, #6
 8000fde:	461e      	mov	r6, r3
 8000fe0:	2308      	movs	r3, #8
 8000fe2:	461c      	mov	r4, r3
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	bf0c      	ite	eq
 8000fea:	2301      	moveq	r3, #1
 8000fec:	2300      	movne	r3, #0
 8000fee:	b2db      	uxtb	r3, r3
 8000ff0:	461d      	mov	r5, r3
 8000ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	9501      	str	r5, [sp, #4]
 8000ff8:	9400      	str	r4, [sp, #0]
 8000ffa:	4633      	mov	r3, r6
 8000ffc:	f000 f927 	bl	800124e <LCD5110_drawBitmap>
 8001000:	e002      	b.n	8001008 <LCD5110_wputchar+0xa4>
		return;
 8001002:	bf00      	nop
 8001004:	e000      	b.n	8001008 <LCD5110_wputchar+0xa4>
		return;
 8001006:	bf00      	nop
						base_font_width, base_font_height, !color, &lcd_conf->hw_conf);
}
 8001008:	371c      	adds	r7, #28
 800100a:	46bd      	mov	sp, r7
 800100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100e:	bf00      	nop
 8001010:	0800b514 	.word	0x0800b514

08001014 <LCD5110_wset_cursor>:
	LCD5110_wclear_str(x, y, len, color, &lcd_conf->def_scr, lcd_conf);
}


void LCD5110_wset_cursor(int x, int y, LCD5110_canvas_t* win, LCD5110_display* lcd_conf)
{
 8001014:	b480      	push	{r7}
 8001016:	b085      	sub	sp, #20
 8001018:	af00      	add	r7, sp, #0
 800101a:	60f8      	str	r0, [r7, #12]
 800101c:	60b9      	str	r1, [r7, #8]
 800101e:	607a      	str	r2, [r7, #4]
 8001020:	603b      	str	r3, [r7, #0]
	win->cursor.x = x;
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	b21a      	sxth	r2, r3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	811a      	strh	r2, [r3, #8]
	win->cursor.y = y;
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	815a      	strh	r2, [r3, #10]
}
 8001032:	bf00      	nop
 8001034:	3714      	adds	r7, #20
 8001036:	46bd      	mov	sp, r7
 8001038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103c:	4770      	bx	lr

0800103e <LCD5110_wendl>:

point_t LCD5110_wget_cursor(LCD5110_canvas_t* win, LCD5110_display* lcd_conf){
	return win->cursor;
}

void LCD5110_wendl(LCD5110_canvas_t* win, LCD5110_display* lcd_conf) {
 800103e:	b580      	push	{r7, lr}
 8001040:	b082      	sub	sp, #8
 8001042:	af00      	add	r7, sp, #0
 8001044:	6078      	str	r0, [r7, #4]
 8001046:	6039      	str	r1, [r7, #0]
	win->cursor.y += base_font_height + 1;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800104e:	b29a      	uxth	r2, r3
 8001050:	2308      	movs	r3, #8
 8001052:	b29b      	uxth	r3, r3
 8001054:	4413      	add	r3, r2
 8001056:	b29b      	uxth	r3, r3
 8001058:	3301      	adds	r3, #1
 800105a:	b29b      	uxth	r3, r3
 800105c:	b21a      	sxth	r2, r3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	815a      	strh	r2, [r3, #10]
	win->cursor.x = 2;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2202      	movs	r2, #2
 8001066:	811a      	strh	r2, [r3, #8]
	if (win->refresh_on_endl)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	7b1b      	ldrb	r3, [r3, #12]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d002      	beq.n	8001076 <LCD5110_wendl+0x38>
		LCD5110_refresh(lcd_conf);
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff fd67 	bl	8000b44 <LCD5110_refresh>
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <LCD5110_wprint>:



void LCD5110_wprint(const char* str, int color, LCD5110_canvas_t* win,
		LCD5110_display* lcd_conf) {
 8001080:	b580      	push	{r7, lr}
 8001082:	b086      	sub	sp, #24
 8001084:	af02      	add	r7, sp, #8
 8001086:	60f8      	str	r0, [r7, #12]
 8001088:	60b9      	str	r1, [r7, #8]
 800108a:	607a      	str	r2, [r7, #4]
 800108c:	603b      	str	r3, [r7, #0]
	while (*str != 0) {
 800108e:	e053      	b.n	8001138 <LCD5110_wprint+0xb8>
		if (*str != '\n') {
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	2b0a      	cmp	r3, #10
 8001096:	d010      	beq.n	80010ba <LCD5110_wprint+0x3a>
			LCD5110_wputchar(win->cursor.x, win->cursor.y, *str, color, win, lcd_conf);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800109e:	4618      	mov	r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80010a6:	4619      	mov	r1, r3
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	781a      	ldrb	r2, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	9301      	str	r3, [sp, #4]
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	9300      	str	r3, [sp, #0]
 80010b4:	68bb      	ldr	r3, [r7, #8]
 80010b6:	f7ff ff55 	bl	8000f64 <LCD5110_wputchar>
		}
		win->cursor.x += base_font_width;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010c0:	b29a      	uxth	r2, r3
 80010c2:	2306      	movs	r3, #6
 80010c4:	b29b      	uxth	r3, r3
 80010c6:	4413      	add	r3, r2
 80010c8:	b29b      	uxth	r3, r3
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	811a      	strh	r2, [r3, #8]

		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80010d6:	461a      	mov	r2, r3
 80010d8:	2306      	movs	r3, #6
 80010da:	4413      	add	r3, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 80010e2:	4293      	cmp	r3, r2
 80010e4:	d904      	bls.n	80010f0 <LCD5110_wprint+0x70>
				*(str + 1) != '\n') || *str == '\n')
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	3301      	adds	r3, #1
 80010ea:	781b      	ldrb	r3, [r3, #0]
		if (((win->cursor.x + base_font_width > win->frame.width ) &&
 80010ec:	2b0a      	cmp	r3, #10
 80010ee:	d103      	bne.n	80010f8 <LCD5110_wprint+0x78>
				*(str + 1) != '\n') || *str == '\n')
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d111      	bne.n	800111c <LCD5110_wprint+0x9c>
		{
			LCD5110_wendl(win, lcd_conf);
 80010f8:	6839      	ldr	r1, [r7, #0]
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff9f 	bl	800103e <LCD5110_wendl>
			if( isspace(*(str + 1)) )
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	3301      	adds	r3, #1
 8001104:	781b      	ldrb	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	4a10      	ldr	r2, [pc, #64]	; (800114c <LCD5110_wprint+0xcc>)
 800110a:	4413      	add	r3, r2
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	f003 0308 	and.w	r3, r3, #8
 8001112:	2b00      	cmp	r3, #0
 8001114:	d002      	beq.n	800111c <LCD5110_wprint+0x9c>
				++str;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	3301      	adds	r3, #1
 800111a:	60fb      	str	r3, [r7, #12]
		}
		if (win->cursor.y + base_font_height > win->frame.height)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8001122:	461a      	mov	r2, r3
 8001124:	2308      	movs	r3, #8
 8001126:	4413      	add	r3, r2
 8001128:	687a      	ldr	r2, [r7, #4]
 800112a:	f9b2 2006 	ldrsh.w	r2, [r2, #6]
 800112e:	4293      	cmp	r3, r2
 8001130:	d807      	bhi.n	8001142 <LCD5110_wprint+0xc2>
			break;
		str++;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3301      	adds	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
	while (*str != 0) {
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	781b      	ldrb	r3, [r3, #0]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d1a7      	bne.n	8001090 <LCD5110_wprint+0x10>

	}
}
 8001140:	e000      	b.n	8001144 <LCD5110_wprint+0xc4>
			break;
 8001142:	bf00      	nop
}
 8001144:	bf00      	nop
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	0800bb3c 	.word	0x0800bb3c

08001150 <xy_to_pix>:
	unsigned int adr;
	unsigned char mask;
} pix_coord;

static inline pix_coord xy_to_pix(int x, int y)
{
 8001150:	b480      	push	{r7}
 8001152:	b087      	sub	sp, #28
 8001154:	af00      	add	r7, sp, #0
 8001156:	60f8      	str	r0, [r7, #12]
 8001158:	60b9      	str	r1, [r7, #8]
 800115a:	607a      	str	r2, [r7, #4]
	pix_coord res;
	res.adr = (y >> 3) * LCD_WIDTH + x;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	10db      	asrs	r3, r3, #3
 8001160:	2254      	movs	r2, #84	; 0x54
 8001162:	fb03 f202 	mul.w	r2, r3, r2
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	4413      	add	r3, r2
 800116a:	613b      	str	r3, [r7, #16]
	res.mask = (1 << (y & 0x07));
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	2201      	movs	r2, #1
 8001174:	fa02 f303 	lsl.w	r3, r2, r3
 8001178:	b2db      	uxtb	r3, r3
 800117a:	753b      	strb	r3, [r7, #20]

	return res;
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	461a      	mov	r2, r3
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001188:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800118c:	68f8      	ldr	r0, [r7, #12]
 800118e:	371c      	adds	r7, #28
 8001190:	46bd      	mov	sp, r7
 8001192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001196:	4770      	bx	lr

08001198 <LCD5110_clrscr>:

void LCD5110_clrscr(LCD5110_conf* lcd_conf) {
 8001198:	b480      	push	{r7}
 800119a:	b085      	sub	sp, #20
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80011a0:	2300      	movs	r3, #0
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	e008      	b.n	80011b8 <LCD5110_clrscr+0x20>
		lcd_conf->video_buffer[i] = 0;
 80011a6:	687a      	ldr	r2, [r7, #4]
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	4413      	add	r3, r2
 80011ac:	331c      	adds	r3, #28
 80011ae:	2200      	movs	r2, #0
 80011b0:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
 80011b2:	68fb      	ldr	r3, [r7, #12]
 80011b4:	3301      	adds	r3, #1
 80011b6:	60fb      	str	r3, [r7, #12]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f5b3 7ffc 	cmp.w	r3, #504	; 0x1f8
 80011be:	dbf2      	blt.n	80011a6 <LCD5110_clrscr+0xe>
	}
}
 80011c0:	bf00      	nop
 80011c2:	bf00      	nop
 80011c4:	3714      	adds	r7, #20
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LCD5110_putpix>:
	for (int i = 0; i < LCD5110_BUFFER_SIZE; ++i) {
		lcd_conf->video_buffer[i] = 0xFF;
	}
}

void LCD5110_putpix(int x, int y, int color, LCD5110_conf* lcd_conf) {
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b086      	sub	sp, #24
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
 80011da:	603b      	str	r3, [r7, #0]
	if ( (x < 0) || (y < 0) || (x > LCD_WIDTH-1) || (y > LCD_HEIGHT-1))
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	db31      	blt.n	8001246 <LCD5110_putpix+0x78>
 80011e2:	68bb      	ldr	r3, [r7, #8]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	db2e      	blt.n	8001246 <LCD5110_putpix+0x78>
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	2b53      	cmp	r3, #83	; 0x53
 80011ec:	dc2b      	bgt.n	8001246 <LCD5110_putpix+0x78>
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	2b2f      	cmp	r3, #47	; 0x2f
 80011f2:	dc28      	bgt.n	8001246 <LCD5110_putpix+0x78>
		return;
	pix_coord  c = xy_to_pix(x, y);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	68ba      	ldr	r2, [r7, #8]
 80011fa:	68f9      	ldr	r1, [r7, #12]
 80011fc:	4618      	mov	r0, r3
 80011fe:	f7ff ffa7 	bl	8001150 <xy_to_pix>

	if (color)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d00c      	beq.n	8001222 <LCD5110_putpix+0x54>
		lcd_conf->video_buffer[c.adr] |= c.mask;
 8001208:	693b      	ldr	r3, [r7, #16]
 800120a:	683a      	ldr	r2, [r7, #0]
 800120c:	4413      	add	r3, r2
 800120e:	7f19      	ldrb	r1, [r3, #28]
 8001210:	7d3a      	ldrb	r2, [r7, #20]
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	430a      	orrs	r2, r1
 8001216:	b2d1      	uxtb	r1, r2
 8001218:	683a      	ldr	r2, [r7, #0]
 800121a:	4413      	add	r3, r2
 800121c:	460a      	mov	r2, r1
 800121e:	771a      	strb	r2, [r3, #28]
 8001220:	e012      	b.n	8001248 <LCD5110_putpix+0x7a>
	else
		lcd_conf->video_buffer[c.adr] &= ~c.mask;
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	7f1b      	ldrb	r3, [r3, #28]
 800122a:	b25a      	sxtb	r2, r3
 800122c:	7d3b      	ldrb	r3, [r7, #20]
 800122e:	b25b      	sxtb	r3, r3
 8001230:	43db      	mvns	r3, r3
 8001232:	b25b      	sxtb	r3, r3
 8001234:	4013      	ands	r3, r2
 8001236:	b25a      	sxtb	r2, r3
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	b2d1      	uxtb	r1, r2
 800123c:	683a      	ldr	r2, [r7, #0]
 800123e:	4413      	add	r3, r2
 8001240:	460a      	mov	r2, r1
 8001242:	771a      	strb	r2, [r3, #28]
 8001244:	e000      	b.n	8001248 <LCD5110_putpix+0x7a>
		return;
 8001246:	bf00      	nop
}
 8001248:	3718      	adds	r7, #24
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}

0800124e <LCD5110_drawBitmap>:
}

//! TODO: optimize! Slow!
//! TODO: add different bitmap modes -- OR/AND/XOR
void LCD5110_drawBitmap(int x, int y, const unsigned char* bitmap, int cols, int rows, int invert, LCD5110_conf* lcd_conf)
{
 800124e:	b580      	push	{r7, lr}
 8001250:	b088      	sub	sp, #32
 8001252:	af00      	add	r7, sp, #0
 8001254:	60f8      	str	r0, [r7, #12]
 8001256:	60b9      	str	r1, [r7, #8]
 8001258:	607a      	str	r2, [r7, #4]
 800125a:	603b      	str	r3, [r7, #0]
	for(int cx=0; cx<cols; cx++)
 800125c:	2300      	movs	r3, #0
 800125e:	61fb      	str	r3, [r7, #28]
 8001260:	e03d      	b.n	80012de <LCD5110_drawBitmap+0x90>
	{
		for (int cy=0; cy<rows; cy++)
 8001262:	2300      	movs	r3, #0
 8001264:	61bb      	str	r3, [r7, #24]
 8001266:	e033      	b.n	80012d0 <LCD5110_drawBitmap+0x82>
		{
			unsigned char temp = bitmap[(cy/8)*cols + cx];
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	2b00      	cmp	r3, #0
 800126c:	da00      	bge.n	8001270 <LCD5110_drawBitmap+0x22>
 800126e:	3307      	adds	r3, #7
 8001270:	10db      	asrs	r3, r3, #3
 8001272:	461a      	mov	r2, r3
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	fb03 f202 	mul.w	r2, r3, r2
 800127a:	69fb      	ldr	r3, [r7, #28]
 800127c:	4413      	add	r3, r2
 800127e:	461a      	mov	r2, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	4413      	add	r3, r2
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	75fb      	strb	r3, [r7, #23]
			temp &= 1<<(cy%8);
 8001288:	69bb      	ldr	r3, [r7, #24]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	2201      	movs	r2, #1
 8001290:	fa02 f303 	lsl.w	r3, r2, r3
 8001294:	b25a      	sxtb	r2, r3
 8001296:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800129a:	4013      	ands	r3, r2
 800129c:	b25b      	sxtb	r3, r3
 800129e:	75fb      	strb	r3, [r7, #23]
			LCD5110_putpix(x+cx, y+cy,  invert ? !temp : temp, lcd_conf);
 80012a0:	68fa      	ldr	r2, [r7, #12]
 80012a2:	69fb      	ldr	r3, [r7, #28]
 80012a4:	18d0      	adds	r0, r2, r3
 80012a6:	68ba      	ldr	r2, [r7, #8]
 80012a8:	69bb      	ldr	r3, [r7, #24]
 80012aa:	18d1      	adds	r1, r2, r3
 80012ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d007      	beq.n	80012c2 <LCD5110_drawBitmap+0x74>
 80012b2:	7dfb      	ldrb	r3, [r7, #23]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	bf0c      	ite	eq
 80012b8:	2301      	moveq	r3, #1
 80012ba:	2300      	movne	r3, #0
 80012bc:	b2db      	uxtb	r3, r3
 80012be:	461a      	mov	r2, r3
 80012c0:	e000      	b.n	80012c4 <LCD5110_drawBitmap+0x76>
 80012c2:	7dfa      	ldrb	r2, [r7, #23]
 80012c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80012c6:	f7ff ff82 	bl	80011ce <LCD5110_putpix>
		for (int cy=0; cy<rows; cy++)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	3301      	adds	r3, #1
 80012ce:	61bb      	str	r3, [r7, #24]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80012d4:	429a      	cmp	r2, r3
 80012d6:	dbc7      	blt.n	8001268 <LCD5110_drawBitmap+0x1a>
	for(int cx=0; cx<cols; cx++)
 80012d8:	69fb      	ldr	r3, [r7, #28]
 80012da:	3301      	adds	r3, #1
 80012dc:	61fb      	str	r3, [r7, #28]
 80012de:	69fa      	ldr	r2, [r7, #28]
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	429a      	cmp	r2, r3
 80012e4:	dbbd      	blt.n	8001262 <LCD5110_drawBitmap+0x14>
		}
	}
}
 80012e6:	bf00      	nop
 80012e8:	bf00      	nop
 80012ea:	3720      	adds	r7, #32
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <send_byte_to_LCD5110>:
#include <stdio.h>

#define SUPPRESS_WARNING(x) (void)x

static inline HAL_StatusTypeDef send_byte_to_LCD5110(uint8_t dat, LCD5110_conf* lcd_conf)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	6039      	str	r1, [r7, #0]
 80012fa:	71fb      	strb	r3, [r7, #7]
	//! HAL_SPI_Transmit takes care about waiting transmission to finish.
	//! Details: https://habrahabr.ru/post/276605/ -- do not turn command mode off
	//! before transmission finished. (Check BSY flag before DC_on/off, if directly
	//! manipulating SPIx_DR.
	return HAL_SPI_Transmit(lcd_conf->spi_handle, &dat, 1, 1000);
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	6818      	ldr	r0, [r3, #0]
 8001300:	1df9      	adds	r1, r7, #7
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	2201      	movs	r2, #1
 8001308:	f004 fee3 	bl	80060d2 <HAL_SPI_Transmit>
 800130c:	4603      	mov	r3, r0
}
 800130e:	4618      	mov	r0, r3
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <send_data_to_LCD5110>:

static inline HAL_StatusTypeDef send_data_to_LCD5110(uint8_t data[], uint16_t size, LCD5110_conf* lcd_conf)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b084      	sub	sp, #16
 800131a:	af00      	add	r7, sp, #0
 800131c:	60f8      	str	r0, [r7, #12]
 800131e:	460b      	mov	r3, r1
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	817b      	strh	r3, [r7, #10]
	return HAL_SPI_Transmit(lcd_conf->spi_handle, data, size, 1000);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6818      	ldr	r0, [r3, #0]
 8001328:	897a      	ldrh	r2, [r7, #10]
 800132a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800132e:	68f9      	ldr	r1, [r7, #12]
 8001330:	f004 fecf 	bl	80060d2 <HAL_SPI_Transmit>
 8001334:	4603      	mov	r3, r0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <LCD5110_CE_off>:

static inline void LCD5110_CE_on(LCD5110_conf* lcd_conf) {
	SUPPRESS_WARNING(LCD5110_CE_on);
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_SET);
}
static inline void LCD5110_CE_off(LCD5110_conf* lcd_conf) {
 800133e:	b580      	push	{r7, lr}
 8001340:	b082      	sub	sp, #8
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->spi_cs_port, lcd_conf->spi_cs_pin, GPIO_PIN_RESET);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6898      	ldr	r0, [r3, #8]
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	889b      	ldrh	r3, [r3, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	4619      	mov	r1, r3
 8001352:	f001 ffc5 	bl	80032e0 <HAL_GPIO_WritePin>
}
 8001356:	bf00      	nop
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}

0800135e <LCD5110_DC_on>:
//! Data mode on
static inline void LCD5110_DC_on(LCD5110_conf* lcd_conf) {
 800135e:	b580      	push	{r7, lr}
 8001360:	b082      	sub	sp, #8
 8001362:	af00      	add	r7, sp, #0
 8001364:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_SET);
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	6998      	ldr	r0, [r3, #24]
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	8a9b      	ldrh	r3, [r3, #20]
 800136e:	2201      	movs	r2, #1
 8001370:	4619      	mov	r1, r3
 8001372:	f001 ffb5 	bl	80032e0 <HAL_GPIO_WritePin>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}

0800137e <LCD5110_DC_off>:
//! Commands mode on
static inline void LCD5110_DC_off(LCD5110_conf* lcd_conf) {
 800137e:	b580      	push	{r7, lr}
 8001380:	b082      	sub	sp, #8
 8001382:	af00      	add	r7, sp, #0
 8001384:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->dc_port, lcd_conf->dc_pin, GPIO_PIN_RESET);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6998      	ldr	r0, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	8a9b      	ldrh	r3, [r3, #20]
 800138e:	2200      	movs	r2, #0
 8001390:	4619      	mov	r1, r3
 8001392:	f001 ffa5 	bl	80032e0 <HAL_GPIO_WritePin>
}
 8001396:	bf00      	nop
 8001398:	3708      	adds	r7, #8
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <LCD5110_RST_on>:
static inline void LCD5110_RST_on(LCD5110_conf* lcd_conf) {
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_SET);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6918      	ldr	r0, [r3, #16]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	899b      	ldrh	r3, [r3, #12]
 80013ae:	2201      	movs	r2, #1
 80013b0:	4619      	mov	r1, r3
 80013b2:	f001 ff95 	bl	80032e0 <HAL_GPIO_WritePin>
}
 80013b6:	bf00      	nop
 80013b8:	3708      	adds	r7, #8
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}

080013be <LCD5110_RST_off>:
static inline void LCD5110_RST_off(LCD5110_conf* lcd_conf) {
 80013be:	b580      	push	{r7, lr}
 80013c0:	b082      	sub	sp, #8
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(lcd_conf->rst_port, lcd_conf->rst_pin, GPIO_PIN_RESET);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6918      	ldr	r0, [r3, #16]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	899b      	ldrh	r3, [r3, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	4619      	mov	r1, r3
 80013d2:	f001 ff85 	bl	80032e0 <HAL_GPIO_WritePin>
}
 80013d6:	bf00      	nop
 80013d8:	3708      	adds	r7, #8
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}

080013de <LCD5110_set_function>:

#define FN_SET_MASK (1<<5)

//! Code: 0010 0PVH, accepts both 00100PVH and 0PVH, but no other.
static int LCD5110_set_function(uint8_t fn_byte, LCD5110_conf* lcd_conf)
{
 80013de:	b580      	push	{r7, lr}
 80013e0:	b082      	sub	sp, #8
 80013e2:	af00      	add	r7, sp, #0
 80013e4:	4603      	mov	r3, r0
 80013e6:	6039      	str	r1, [r7, #0]
 80013e8:	71fb      	strb	r3, [r7, #7]
	if ( (fn_byte & ~FN_SET_MASK) > 7) //0b111
 80013ea:	79fb      	ldrb	r3, [r7, #7]
 80013ec:	f023 0320 	bic.w	r3, r3, #32
 80013f0:	2b07      	cmp	r3, #7
 80013f2:	dd01      	ble.n	80013f8 <LCD5110_set_function+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_opcode;
 80013f4:	2301      	movs	r3, #1
 80013f6:	e008      	b.n	800140a <LCD5110_set_function+0x2c>
	}
	//printf("Seq: %i, dbg: %i \n", fn_byte | FN_SET_MASK, fn_byte );
	send_byte_to_LCD5110(fn_byte | FN_SET_MASK, lcd_conf);
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f043 0320 	orr.w	r3, r3, #32
 80013fe:	b2db      	uxtb	r3, r3
 8001400:	6839      	ldr	r1, [r7, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff ff74 	bl	80012f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}

08001412 <LCD5110_set_mode_base>:

//! H==0
static int LCD5110_set_mode_base(LCD5110_modes mode_byte, LCD5110_conf* lcd_conf)
{
 8001412:	b580      	push	{r7, lr}
 8001414:	b082      	sub	sp, #8
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	6039      	str	r1, [r7, #0]
 800141c:	71fb      	strb	r3, [r7, #7]
	if ( (mode_byte & (~LCD5110_INVERTED_MODE) ) != 0) //0b10x0y -- only possible values
 800141e:	79fb      	ldrb	r3, [r7, #7]
 8001420:	f023 030d 	bic.w	r3, r3, #13
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <LCD5110_set_mode_base+0x1a>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_dmode;
 8001428:	2302      	movs	r3, #2
 800142a:	e005      	b.n	8001438 <LCD5110_set_mode_base+0x26>
	}
	//printf("Seq: %i\n", mode_byte);
	send_byte_to_LCD5110(mode_byte, lcd_conf);
 800142c:	79fb      	ldrb	r3, [r7, #7]
 800142e:	6839      	ldr	r1, [r7, #0]
 8001430:	4618      	mov	r0, r3
 8001432:	f7ff ff5d 	bl	80012f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <LCD5110_set_voltage_ext>:

#define LCD5110_VOLTAGE_MASK (1<<7)

//! H==1
static int LCD5110_set_voltage_ext(uint8_t voltage, LCD5110_conf* lcd_conf)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	6039      	str	r1, [r7, #0]
 800144a:	71fb      	strb	r3, [r7, #7]
	if ( voltage > 127)
 800144c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001450:	2b00      	cmp	r3, #0
 8001452:	da01      	bge.n	8001458 <LCD5110_set_voltage_ext+0x18>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_voltage;
 8001454:	2303      	movs	r3, #3
 8001456:	e008      	b.n	800146a <LCD5110_set_voltage_ext+0x2a>
	}
	//printf("Seq: %i\n", voltage | LCD5110_VOLTAGE_MASK);
	send_byte_to_LCD5110(voltage | LCD5110_VOLTAGE_MASK, lcd_conf);
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800145e:	b2db      	uxtb	r3, r3
 8001460:	6839      	ldr	r1, [r7, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f7ff ff44 	bl	80012f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001468:	2300      	movs	r3, #0
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <LCD5110_set_temp_coef_ext>:

#define LCD5110_TEMP_COEFF_MASK (1<<2)
//! H==1
static int LCD5110_set_temp_coef_ext(uint8_t TC, LCD5110_conf* lcd_conf)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	4603      	mov	r3, r0
 800147a:	6039      	str	r1, [r7, #0]
 800147c:	71fb      	strb	r3, [r7, #7]
	if ( TC > 3)
 800147e:	79fb      	ldrb	r3, [r7, #7]
 8001480:	2b03      	cmp	r3, #3
 8001482:	d901      	bls.n	8001488 <LCD5110_set_temp_coef_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_TC;
 8001484:	2304      	movs	r3, #4
 8001486:	e008      	b.n	800149a <LCD5110_set_temp_coef_ext+0x28>
	}
	//printf("Seq: %i\n", TC | LCD5110_TEMP_COEFF_MASK);
	send_byte_to_LCD5110(TC | LCD5110_TEMP_COEFF_MASK, lcd_conf);
 8001488:	79fb      	ldrb	r3, [r7, #7]
 800148a:	f043 0304 	orr.w	r3, r3, #4
 800148e:	b2db      	uxtb	r3, r3
 8001490:	6839      	ldr	r1, [r7, #0]
 8001492:	4618      	mov	r0, r3
 8001494:	f7ff ff2c 	bl	80012f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001498:	2300      	movs	r3, #0
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}

080014a2 <LCD5110_set_bias_ext>:
}

#define LCD5110_BIAS_MASK (1<<4)
//! H==1
static int LCD5110_set_bias_ext(uint8_t bias, LCD5110_conf* lcd_conf)
{
 80014a2:	b580      	push	{r7, lr}
 80014a4:	b082      	sub	sp, #8
 80014a6:	af00      	add	r7, sp, #0
 80014a8:	4603      	mov	r3, r0
 80014aa:	6039      	str	r1, [r7, #0]
 80014ac:	71fb      	strb	r3, [r7, #7]
	if ( bias > 7)
 80014ae:	79fb      	ldrb	r3, [r7, #7]
 80014b0:	2b07      	cmp	r3, #7
 80014b2:	d901      	bls.n	80014b8 <LCD5110_set_bias_ext+0x16>
	{
		//printf("Seq: err\n");
		return LCD5110_bad_bias;
 80014b4:	2305      	movs	r3, #5
 80014b6:	e008      	b.n	80014ca <LCD5110_set_bias_ext+0x28>
	}
	//printf("Seq: %i\n", bias | LCD5110_BIAS_MASK);
	send_byte_to_LCD5110(bias | LCD5110_BIAS_MASK, lcd_conf);
 80014b8:	79fb      	ldrb	r3, [r7, #7]
 80014ba:	f043 0310 	orr.w	r3, r3, #16
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	6839      	ldr	r1, [r7, #0]
 80014c2:	4618      	mov	r0, r3
 80014c4:	f7ff ff14 	bl	80012f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3708      	adds	r7, #8
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}

080014d2 <LCD5110_set_X_base>:
#define LCD5110_SET_Y_BIT 6
#define LCD5110_SET_Y_BIT_MASK (1<<LCD5110_SET_Y_BIT)


static inline int LCD5110_set_X_base(int16_t x, LCD5110_conf* lcd_conf)
{
 80014d2:	b580      	push	{r7, lr}
 80014d4:	b082      	sub	sp, #8
 80014d6:	af00      	add	r7, sp, #0
 80014d8:	4603      	mov	r3, r0
 80014da:	6039      	str	r1, [r7, #0]
 80014dc:	80fb      	strh	r3, [r7, #6]
	if(x<0 || x>LCD_WIDTH-1)
 80014de:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	db03      	blt.n	80014ee <LCD5110_set_X_base+0x1c>
 80014e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014ea:	2b53      	cmp	r3, #83	; 0x53
 80014ec:	dd01      	ble.n	80014f2 <LCD5110_set_X_base+0x20>
		return LCD5110_bad_coordinate;
 80014ee:	2307      	movs	r3, #7
 80014f0:	e00a      	b.n	8001508 <LCD5110_set_X_base+0x36>
	send_byte_to_LCD5110(x | LCD5110_SET_X_BIT_MASK, lcd_conf);
 80014f2:	88fb      	ldrh	r3, [r7, #6]
 80014f4:	b25b      	sxtb	r3, r3
 80014f6:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80014fa:	b25b      	sxtb	r3, r3
 80014fc:	b2db      	uxtb	r3, r3
 80014fe:	6839      	ldr	r1, [r7, #0]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff fef5 	bl	80012f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001506:	2300      	movs	r3, #0
}
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <LCD5110_set_Y_base>:

//! Byte addresable!
static inline int LCD5110_set_Y_base(int16_t y, LCD5110_conf* lcd_conf)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	4603      	mov	r3, r0
 8001518:	6039      	str	r1, [r7, #0]
 800151a:	80fb      	strh	r3, [r7, #6]
	if(y<0 || y>LCD_HEIGHT/8-1) // Byte addressable!
 800151c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001520:	2b00      	cmp	r3, #0
 8001522:	db03      	blt.n	800152c <LCD5110_set_Y_base+0x1c>
 8001524:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001528:	2b05      	cmp	r3, #5
 800152a:	dd01      	ble.n	8001530 <LCD5110_set_Y_base+0x20>
		return LCD5110_bad_coordinate;
 800152c:	2307      	movs	r3, #7
 800152e:	e00a      	b.n	8001546 <LCD5110_set_Y_base+0x36>
	send_byte_to_LCD5110(y | LCD5110_SET_Y_BIT_MASK, lcd_conf);
 8001530:	88fb      	ldrh	r3, [r7, #6]
 8001532:	b25b      	sxtb	r3, r3
 8001534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001538:	b25b      	sxtb	r3, r3
 800153a:	b2db      	uxtb	r3, r3
 800153c:	6839      	ldr	r1, [r7, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fed6 	bl	80012f0 <send_byte_to_LCD5110>
	return LCD5110_OK;
 8001544:	2300      	movs	r3, #0
}
 8001546:	4618      	mov	r0, r3
 8001548:	3708      	adds	r7, #8
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <LCD5110_set_XY_base>:

static inline int LCD5110_set_XY_base(int16_t x, int16_t y, LCD5110_conf* lcd_conf)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b084      	sub	sp, #16
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	603a      	str	r2, [r7, #0]
 8001558:	80fb      	strh	r3, [r7, #6]
 800155a:	460b      	mov	r3, r1
 800155c:	80bb      	strh	r3, [r7, #4]
	int res;
	res = LCD5110_set_X_base(x, lcd_conf);
 800155e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001562:	6839      	ldr	r1, [r7, #0]
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ffb4 	bl	80014d2 <LCD5110_set_X_base>
 800156a:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <LCD5110_set_XY_base+0x28>
		return res;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	e00c      	b.n	8001590 <LCD5110_set_XY_base+0x42>
	res = LCD5110_set_Y_base(y, lcd_conf);
 8001576:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800157a:	6839      	ldr	r1, [r7, #0]
 800157c:	4618      	mov	r0, r3
 800157e:	f7ff ffc7 	bl	8001510 <LCD5110_set_Y_base>
 8001582:	60f8      	str	r0, [r7, #12]
	if( res != LCD5110_OK)
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <LCD5110_set_XY_base+0x40>
		return res;
 800158a:	68fb      	ldr	r3, [r7, #12]
 800158c:	e000      	b.n	8001590 <LCD5110_set_XY_base+0x42>

	return LCD5110_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <SPI_enable>:


static inline void SPI_enable(LCD5110_conf* lcd_conf)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	__HAL_SPI_ENABLE( (lcd_conf->spi_handle) );
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80015b2:	601a      	str	r2, [r3, #0]
}
 80015b4:	bf00      	nop
 80015b6:	370c      	adds	r7, #12
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr

080015c0 <LCD5110_init>:
int LCD5110_init(LCD5110_conf* 		lcd_conf,
				 LCD5110_modes 		dmode,
				 uint8_t 	  	    voltage,
				 uint8_t		    temp_coeff,
				 uint8_t		    bias
){
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	4608      	mov	r0, r1
 80015ca:	4611      	mov	r1, r2
 80015cc:	461a      	mov	r2, r3
 80015ce:	4603      	mov	r3, r0
 80015d0:	70fb      	strb	r3, [r7, #3]
 80015d2:	460b      	mov	r3, r1
 80015d4:	70bb      	strb	r3, [r7, #2]
 80015d6:	4613      	mov	r3, r2
 80015d8:	707b      	strb	r3, [r7, #1]
	SPI_enable(lcd_conf);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffdc 	bl	8001598 <SPI_enable>
	LCD5110_CE_off(lcd_conf);
 80015e0:	6878      	ldr	r0, [r7, #4]
 80015e2:	f7ff feac 	bl	800133e <LCD5110_CE_off>

	//LCD5110_VCC_on();
	LCD5110_RST_off(lcd_conf); // Minimum 100 ns, maximum not limited (tbl. 12 AC CHARACTERISTICS, pic. 16)
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff fee9 	bl	80013be <LCD5110_RST_off>
	volatile int i = 100; // HAL_Delay() too slow, do not want to depend on some delay_us here.
 80015ec:	2364      	movs	r3, #100	; 0x64
 80015ee:	60fb      	str	r3, [r7, #12]
	while (--i){}
 80015f0:	bf00      	nop
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	3b01      	subs	r3, #1
 80015f6:	60fb      	str	r3, [r7, #12]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d1fa      	bne.n	80015f2 <LCD5110_init+0x32>
	LCD5110_RST_on(lcd_conf);
 80015fc:	6878      	ldr	r0, [r7, #4]
 80015fe:	f7ff fece 	bl	800139e <LCD5110_RST_on>

	LCD5110_DC_off(lcd_conf); // Commands mode on
 8001602:	6878      	ldr	r0, [r7, #4]
 8001604:	f7ff febb 	bl	800137e <LCD5110_DC_off>
	//! Extended commands (bit H==1), horizontal addressing
	LCD5110_set_function(LCD5110_FN_SET_H_MASK, lcd_conf);
 8001608:	6879      	ldr	r1, [r7, #4]
 800160a:	2001      	movs	r0, #1
 800160c:	f7ff fee7 	bl	80013de <LCD5110_set_function>
	//! Set display voltage
	LCD5110_set_voltage_ext(voltage, lcd_conf);
 8001610:	78bb      	ldrb	r3, [r7, #2]
 8001612:	6879      	ldr	r1, [r7, #4]
 8001614:	4618      	mov	r0, r3
 8001616:	f7ff ff13 	bl	8001440 <LCD5110_set_voltage_ext>
	//! Set temperature coefficient
	LCD5110_set_temp_coef_ext(temp_coeff, lcd_conf);
 800161a:	787b      	ldrb	r3, [r7, #1]
 800161c:	6879      	ldr	r1, [r7, #4]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff27 	bl	8001472 <LCD5110_set_temp_coef_ext>
	//! Set bias
	LCD5110_set_bias_ext(bias, lcd_conf);
 8001624:	7e3b      	ldrb	r3, [r7, #24]
 8001626:	6879      	ldr	r1, [r7, #4]
 8001628:	4618      	mov	r0, r3
 800162a:	f7ff ff3a 	bl	80014a2 <LCD5110_set_bias_ext>


	//! Basic commands (bit H==0), horizontal addressing
	LCD5110_set_function(0, lcd_conf);
 800162e:	6879      	ldr	r1, [r7, #4]
 8001630:	2000      	movs	r0, #0
 8001632:	f7ff fed4 	bl	80013de <LCD5110_set_function>
	//! Set display mode
	LCD5110_set_mode_base(dmode, lcd_conf);
 8001636:	78fb      	ldrb	r3, [r7, #3]
 8001638:	6879      	ldr	r1, [r7, #4]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff fee9 	bl	8001412 <LCD5110_set_mode_base>

	return LCD5110_OK;
 8001640:	2300      	movs	r3, #0
	//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 8001642:	4618      	mov	r0, r3
 8001644:	3710      	adds	r7, #16
 8001646:	46bd      	mov	sp, r7
 8001648:	bd80      	pop	{r7, pc}

0800164a <LCD5110_refresh_ll>:

//
void LCD5110_refresh_ll(LCD5110_conf* lcd_conf)
{
 800164a:	b580      	push	{r7, lr}
 800164c:	b082      	sub	sp, #8
 800164e:	af00      	add	r7, sp, #0
 8001650:	6078      	str	r0, [r7, #4]
	LCD5110_CE_off(lcd_conf);
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff fe73 	bl	800133e <LCD5110_CE_off>
	LCD5110_DC_off(lcd_conf);
 8001658:	6878      	ldr	r0, [r7, #4]
 800165a:	f7ff fe90 	bl	800137e <LCD5110_DC_off>
	LCD5110_set_XY_base(0, 0, lcd_conf);
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	2100      	movs	r1, #0
 8001662:	2000      	movs	r0, #0
 8001664:	f7ff ff73 	bl	800154e <LCD5110_set_XY_base>
	LCD5110_DC_on(lcd_conf);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f7ff fe78 	bl	800135e <LCD5110_DC_on>

	send_data_to_LCD5110(lcd_conf->video_buffer, LCD_HEIGHT*LCD_WIDTH/8, lcd_conf);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	331c      	adds	r3, #28
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	f44f 71fc 	mov.w	r1, #504	; 0x1f8
 8001678:	4618      	mov	r0, r3
 800167a:	f7ff fe4c 	bl	8001316 <send_data_to_LCD5110>
//!TODO: Check for transmission end and turn CE off (set it to HIGH).
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
	...

08001688 <keypad_init>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
LCD5110_display lcd1;
void keypad_init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b086      	sub	sp, #24
 800168c:	af00      	add	r7, sp, #0
  // Configure GPIO pins for keypad matrix
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168e:	1d3b      	adds	r3, r7, #4
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  GPIO_InitStruct.Pin = ROW_1_Pin | ROW_2_Pin | ROW_3_Pin | ROW_4_Pin;
 800169c:	f44f 73b8 	mov.w	r3, #368	; 0x170
 80016a0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016a2:	2300      	movs	r3, #0
 80016a4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a6:	2301      	movs	r3, #1
 80016a8:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(ROW_1_Port, &GPIO_InitStruct);
 80016aa:	4b21      	ldr	r3, [pc, #132]	; (8001730 <keypad_init+0xa8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	1d3a      	adds	r2, r7, #4
 80016b0:	4611      	mov	r1, r2
 80016b2:	4618      	mov	r0, r3
 80016b4:	f001 fc78 	bl	8002fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_2_Port, &GPIO_InitStruct);
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <keypad_init+0xac>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	1d3a      	adds	r2, r7, #4
 80016be:	4611      	mov	r1, r2
 80016c0:	4618      	mov	r0, r3
 80016c2:	f001 fc71 	bl	8002fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_3_Port, &GPIO_InitStruct);
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <keypad_init+0xb0>)
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	1d3a      	adds	r2, r7, #4
 80016cc:	4611      	mov	r1, r2
 80016ce:	4618      	mov	r0, r3
 80016d0:	f001 fc6a 	bl	8002fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(ROW_4_Port, &GPIO_InitStruct);
 80016d4:	4b19      	ldr	r3, [pc, #100]	; (800173c <keypad_init+0xb4>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	1d3a      	adds	r2, r7, #4
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f001 fc63 	bl	8002fa8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = COL_1_Pin | COL_2_Pin | COL_3_Pin | COL_4_Pin;
 80016e2:	230f      	movs	r3, #15
 80016e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016e6:	2301      	movs	r3, #1
 80016e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(COL_1_Port, &GPIO_InitStruct);
 80016ee:	4b14      	ldr	r3, [pc, #80]	; (8001740 <keypad_init+0xb8>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1d3a      	adds	r2, r7, #4
 80016f4:	4611      	mov	r1, r2
 80016f6:	4618      	mov	r0, r3
 80016f8:	f001 fc56 	bl	8002fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_2_Port, &GPIO_InitStruct);
 80016fc:	4b11      	ldr	r3, [pc, #68]	; (8001744 <keypad_init+0xbc>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	1d3a      	adds	r2, r7, #4
 8001702:	4611      	mov	r1, r2
 8001704:	4618      	mov	r0, r3
 8001706:	f001 fc4f 	bl	8002fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_3_Port, &GPIO_InitStruct);
 800170a:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <keypad_init+0xc0>)
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	1d3a      	adds	r2, r7, #4
 8001710:	4611      	mov	r1, r2
 8001712:	4618      	mov	r0, r3
 8001714:	f001 fc48 	bl	8002fa8 <HAL_GPIO_Init>
  HAL_GPIO_Init(COL_4_Port, &GPIO_InitStruct);
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <keypad_init+0xc4>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	1d3a      	adds	r2, r7, #4
 800171e:	4611      	mov	r1, r2
 8001720:	4618      	mov	r0, r3
 8001722:	f001 fc41 	bl	8002fa8 <HAL_GPIO_Init>
}
 8001726:	bf00      	nop
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	20000000 	.word	0x20000000
 8001734:	20000004 	.word	0x20000004
 8001738:	20000008 	.word	0x20000008
 800173c:	2000000c 	.word	0x2000000c
 8001740:	20000010 	.word	0x20000010
 8001744:	20000014 	.word	0x20000014
 8001748:	20000018 	.word	0x20000018
 800174c:	2000001c 	.word	0x2000001c

08001750 <keypad_scan>:

char keypad_scan(void)
{
 8001750:	b590      	push	{r4, r7, lr}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
  char keys[4][4] = {{'1', '2', '3', 'A'},
 8001756:	4b69      	ldr	r3, [pc, #420]	; (80018fc <keypad_scan+0x1ac>)
 8001758:	1d3c      	adds	r4, r7, #4
 800175a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800175c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
                     {'4', '5', '6', 'B'},
                     {'7', '8', '9', 'C'},
                     {'*', '0', '#', 'D'}};

  for(int i = 0; i < 4; i++)
 8001760:	2300      	movs	r3, #0
 8001762:	617b      	str	r3, [r7, #20]
 8001764:	e0c1      	b.n	80018ea <keypad_scan+0x19a>
  {
    // Set current column as output and low
    switch(i)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	2b03      	cmp	r3, #3
 800176a:	d87f      	bhi.n	800186c <keypad_scan+0x11c>
 800176c:	a201      	add	r2, pc, #4	; (adr r2, 8001774 <keypad_scan+0x24>)
 800176e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001772:	bf00      	nop
 8001774:	08001785 	.word	0x08001785
 8001778:	080017bf 	.word	0x080017bf
 800177c:	080017f9 	.word	0x080017f9
 8001780:	08001833 	.word	0x08001833
    {
      case 0:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_RESET);
 8001784:	4b5e      	ldr	r3, [pc, #376]	; (8001900 <keypad_scan+0x1b0>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2200      	movs	r2, #0
 800178a:	2101      	movs	r1, #1
 800178c:	4618      	mov	r0, r3
 800178e:	f001 fda7 	bl	80032e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001792:	4b5c      	ldr	r3, [pc, #368]	; (8001904 <keypad_scan+0x1b4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	2201      	movs	r2, #1
 8001798:	2102      	movs	r1, #2
 800179a:	4618      	mov	r0, r3
 800179c:	f001 fda0 	bl	80032e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80017a0:	4b59      	ldr	r3, [pc, #356]	; (8001908 <keypad_scan+0x1b8>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2201      	movs	r2, #1
 80017a6:	2104      	movs	r1, #4
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fd99 	bl	80032e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80017ae:	4b57      	ldr	r3, [pc, #348]	; (800190c <keypad_scan+0x1bc>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	2201      	movs	r2, #1
 80017b4:	2108      	movs	r1, #8
 80017b6:	4618      	mov	r0, r3
 80017b8:	f001 fd92 	bl	80032e0 <HAL_GPIO_WritePin>
        break;
 80017bc:	e056      	b.n	800186c <keypad_scan+0x11c>

      case 1:
        HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80017be:	4b50      	ldr	r3, [pc, #320]	; (8001900 <keypad_scan+0x1b0>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	2201      	movs	r2, #1
 80017c4:	2101      	movs	r1, #1
 80017c6:	4618      	mov	r0, r3
 80017c8:	f001 fd8a 	bl	80032e0 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_RESET);
 80017cc:	4b4d      	ldr	r3, [pc, #308]	; (8001904 <keypad_scan+0x1b4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	2200      	movs	r2, #0
 80017d2:	2102      	movs	r1, #2
 80017d4:	4618      	mov	r0, r3
 80017d6:	f001 fd83 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 80017da:	4b4b      	ldr	r3, [pc, #300]	; (8001908 <keypad_scan+0x1b8>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	2201      	movs	r2, #1
 80017e0:	2104      	movs	r1, #4
 80017e2:	4618      	mov	r0, r3
 80017e4:	f001 fd7c 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 80017e8:	4b48      	ldr	r3, [pc, #288]	; (800190c <keypad_scan+0x1bc>)
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	2201      	movs	r2, #1
 80017ee:	2108      	movs	r1, #8
 80017f0:	4618      	mov	r0, r3
 80017f2:	f001 fd75 	bl	80032e0 <HAL_GPIO_WritePin>
    break;
 80017f6:	e039      	b.n	800186c <keypad_scan+0x11c>

  case 2:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 80017f8:	4b41      	ldr	r3, [pc, #260]	; (8001900 <keypad_scan+0x1b0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2201      	movs	r2, #1
 80017fe:	2101      	movs	r1, #1
 8001800:	4618      	mov	r0, r3
 8001802:	f001 fd6d 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001806:	4b3f      	ldr	r3, [pc, #252]	; (8001904 <keypad_scan+0x1b4>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	2201      	movs	r2, #1
 800180c:	2102      	movs	r1, #2
 800180e:	4618      	mov	r0, r3
 8001810:	f001 fd66 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_RESET);
 8001814:	4b3c      	ldr	r3, [pc, #240]	; (8001908 <keypad_scan+0x1b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	2200      	movs	r2, #0
 800181a:	2104      	movs	r1, #4
 800181c:	4618      	mov	r0, r3
 800181e:	f001 fd5f 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_SET);
 8001822:	4b3a      	ldr	r3, [pc, #232]	; (800190c <keypad_scan+0x1bc>)
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	2201      	movs	r2, #1
 8001828:	2108      	movs	r1, #8
 800182a:	4618      	mov	r0, r3
 800182c:	f001 fd58 	bl	80032e0 <HAL_GPIO_WritePin>
    break;
 8001830:	e01c      	b.n	800186c <keypad_scan+0x11c>

  case 3:
    HAL_GPIO_WritePin(COL_1_Port, COL_1_Pin, GPIO_PIN_SET);
 8001832:	4b33      	ldr	r3, [pc, #204]	; (8001900 <keypad_scan+0x1b0>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2201      	movs	r2, #1
 8001838:	2101      	movs	r1, #1
 800183a:	4618      	mov	r0, r3
 800183c:	f001 fd50 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_2_Port, COL_2_Pin, GPIO_PIN_SET);
 8001840:	4b30      	ldr	r3, [pc, #192]	; (8001904 <keypad_scan+0x1b4>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	2201      	movs	r2, #1
 8001846:	2102      	movs	r1, #2
 8001848:	4618      	mov	r0, r3
 800184a:	f001 fd49 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_3_Port, COL_3_Pin, GPIO_PIN_SET);
 800184e:	4b2e      	ldr	r3, [pc, #184]	; (8001908 <keypad_scan+0x1b8>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2201      	movs	r2, #1
 8001854:	2104      	movs	r1, #4
 8001856:	4618      	mov	r0, r3
 8001858:	f001 fd42 	bl	80032e0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(COL_4_Port, COL_4_Pin, GPIO_PIN_RESET);
 800185c:	4b2b      	ldr	r3, [pc, #172]	; (800190c <keypad_scan+0x1bc>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2200      	movs	r2, #0
 8001862:	2108      	movs	r1, #8
 8001864:	4618      	mov	r0, r3
 8001866:	f001 fd3b 	bl	80032e0 <HAL_GPIO_WritePin>
    break;
 800186a:	bf00      	nop
}
// Read current rows
if(HAL_GPIO_ReadPin(ROW_1_Port, ROW_1_Pin) == GPIO_PIN_RESET)
 800186c:	4b28      	ldr	r3, [pc, #160]	; (8001910 <keypad_scan+0x1c0>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	2110      	movs	r1, #16
 8001872:	4618      	mov	r0, r3
 8001874:	f001 fd1c 	bl	80032b0 <HAL_GPIO_ReadPin>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d104      	bne.n	8001888 <keypad_scan+0x138>
  return keys[0][i];
 800187e:	1d3a      	adds	r2, r7, #4
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4413      	add	r3, r2
 8001884:	781b      	ldrb	r3, [r3, #0]
 8001886:	e035      	b.n	80018f4 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_2_Port, ROW_2_Pin) == GPIO_PIN_RESET)
 8001888:	4b22      	ldr	r3, [pc, #136]	; (8001914 <keypad_scan+0x1c4>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	2120      	movs	r1, #32
 800188e:	4618      	mov	r0, r3
 8001890:	f001 fd0e 	bl	80032b0 <HAL_GPIO_ReadPin>
 8001894:	4603      	mov	r3, r0
 8001896:	2b00      	cmp	r3, #0
 8001898:	d105      	bne.n	80018a6 <keypad_scan+0x156>
  return keys[1][i];
 800189a:	f107 0208 	add.w	r2, r7, #8
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	4413      	add	r3, r2
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	e026      	b.n	80018f4 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_3_Port, ROW_3_Pin) == GPIO_PIN_RESET)
 80018a6:	4b1c      	ldr	r3, [pc, #112]	; (8001918 <keypad_scan+0x1c8>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	2140      	movs	r1, #64	; 0x40
 80018ac:	4618      	mov	r0, r3
 80018ae:	f001 fcff 	bl	80032b0 <HAL_GPIO_ReadPin>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d105      	bne.n	80018c4 <keypad_scan+0x174>
  return keys[2][i];
 80018b8:	f107 020c 	add.w	r2, r7, #12
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	4413      	add	r3, r2
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	e017      	b.n	80018f4 <keypad_scan+0x1a4>
if(HAL_GPIO_ReadPin(ROW_4_Port, ROW_4_Pin) == GPIO_PIN_RESET)
 80018c4:	4b15      	ldr	r3, [pc, #84]	; (800191c <keypad_scan+0x1cc>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018cc:	4618      	mov	r0, r3
 80018ce:	f001 fcef 	bl	80032b0 <HAL_GPIO_ReadPin>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d105      	bne.n	80018e4 <keypad_scan+0x194>
  return keys[3][i];
 80018d8:	f107 0210 	add.w	r2, r7, #16
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	4413      	add	r3, r2
 80018e0:	781b      	ldrb	r3, [r3, #0]
 80018e2:	e007      	b.n	80018f4 <keypad_scan+0x1a4>
  for(int i = 0; i < 4; i++)
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	3301      	adds	r3, #1
 80018e8:	617b      	str	r3, [r7, #20]
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	2b03      	cmp	r3, #3
 80018ee:	f77f af3a 	ble.w	8001766 <keypad_scan+0x16>
}
return 0; // No key pressed
 80018f2:	2300      	movs	r3, #0
}
 80018f4:	4618      	mov	r0, r3
 80018f6:	371c      	adds	r7, #28
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd90      	pop	{r4, r7, pc}
 80018fc:	0800b278 	.word	0x0800b278
 8001900:	20000010 	.word	0x20000010
 8001904:	20000014 	.word	0x20000014
 8001908:	20000018 	.word	0x20000018
 800190c:	2000001c 	.word	0x2000001c
 8001910:	20000000 	.word	0x20000000
 8001914:	20000004 	.word	0x20000004
 8001918:	20000008 	.word	0x20000008
 800191c:	2000000c 	.word	0x2000000c

08001920 <init_screen.3>:
    char message[32] = {0};
    int message_pos = 0;

    keypad_init();

    void init_screen() {
 8001920:	b590      	push	{r4, r7, lr}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4664      	mov	r4, ip
 8001928:	f8c7 c004 	str.w	ip, [r7, #4]
		LCD5110_clear_scr(&lcd1);
 800192c:	4818      	ldr	r0, [pc, #96]	; (8001990 <init_screen.3+0x70>)
 800192e:	f7ff f927 	bl	8000b80 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 8001932:	4817      	ldr	r0, [pc, #92]	; (8001990 <init_screen.3+0x70>)
 8001934:	f7ff f906 	bl	8000b44 <LCD5110_refresh>
		LCD5110_rect(&rect, 1, &lcd1);
 8001938:	4623      	mov	r3, r4
 800193a:	4a15      	ldr	r2, [pc, #84]	; (8001990 <init_screen.3+0x70>)
 800193c:	2101      	movs	r1, #1
 800193e:	4618      	mov	r0, r3
 8001940:	f7ff fac7 	bl	8000ed2 <LCD5110_rect>
		LCD5110_rect_fill(&rect, 1, &lcd1);
 8001944:	4623      	mov	r3, r4
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <init_screen.3+0x70>)
 8001948:	2101      	movs	r1, #1
 800194a:	4618      	mov	r0, r3
 800194c:	f7ff fad3 	bl	8000ef6 <LCD5110_rect_fill>
		LCD5110_set_cursor(10, 15, &lcd1);
 8001950:	4a0f      	ldr	r2, [pc, #60]	; (8001990 <init_screen.3+0x70>)
 8001952:	210f      	movs	r1, #15
 8001954:	200a      	movs	r0, #10
 8001956:	f7ff f901 	bl	8000b5c <LCD5110_set_cursor>

		LCD5110_print("A-call", 0, &lcd1);
 800195a:	4a0d      	ldr	r2, [pc, #52]	; (8001990 <init_screen.3+0x70>)
 800195c:	2100      	movs	r1, #0
 800195e:	480d      	ldr	r0, [pc, #52]	; (8001994 <init_screen.3+0x74>)
 8001960:	f7ff f91f 	bl	8000ba2 <LCD5110_print>

		LCD5110_set_cursor(10, 35, &lcd1);
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <init_screen.3+0x70>)
 8001966:	2123      	movs	r1, #35	; 0x23
 8001968:	200a      	movs	r0, #10
 800196a:	f7ff f8f7 	bl	8000b5c <LCD5110_set_cursor>

		LCD5110_print("B-back", 0, &lcd1);
 800196e:	4a08      	ldr	r2, [pc, #32]	; (8001990 <init_screen.3+0x70>)
 8001970:	2100      	movs	r1, #0
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <init_screen.3+0x78>)
 8001974:	f7ff f915 	bl	8000ba2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 8001978:	4a05      	ldr	r2, [pc, #20]	; (8001990 <init_screen.3+0x70>)
 800197a:	2100      	movs	r1, #0
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff f8ed 	bl	8000b5c <LCD5110_set_cursor>
		is_call = false;
 8001982:	2300      	movs	r3, #0
 8001984:	f884 3165 	strb.w	r3, [r4, #357]	; 0x165
    }
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bd90      	pop	{r4, r7, pc}
 8001990:	2000028c 	.word	0x2000028c
 8001994:	0800b288 	.word	0x0800b288
 8001998:	0800b290 	.word	0x0800b290

0800199c <main>:
{
 800199c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800199e:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 80019a2:	af02      	add	r7, sp, #8
int main(void)
 80019a4:	f507 7232 	add.w	r2, r7, #712	; 0x2c8
 80019a8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80019ac:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 80019b0:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
  HAL_Init();
 80019b4:	f001 f950 	bl	8002c58 <HAL_Init>
  SystemClock_Config();
 80019b8:	f000 fec6 	bl	8002748 <SystemClock_Config>
  PeriphCommonClock_Config();
 80019bc:	f000 ff2c 	bl	8002818 <PeriphCommonClock_Config>
  MX_GPIO_Init();
 80019c0:	f7fe fde4 	bl	800058c <MX_GPIO_Init>
  MX_I2C1_Init();
 80019c4:	f7fe ff1c 	bl	8000800 <MX_I2C1_Init>
  MX_I2S2_Init();
 80019c8:	f7fe ff90 	bl	80008ec <MX_I2S2_Init>
  MX_I2S3_Init();
 80019cc:	f7fe ffbc 	bl	8000948 <MX_I2S3_Init>
  MX_SPI1_Init();
 80019d0:	f000 ff48 	bl	8002864 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80019d4:	f008 fb36 	bl	800a044 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 80019d8:	f001 f882 	bl	8002ae0 <MX_USART1_UART_Init>
  	lcd1.hw_conf.spi_handle = &hspi1;
 80019dc:	4bc0      	ldr	r3, [pc, #768]	; (8001ce0 <main+0x344>)
 80019de:	4ac1      	ldr	r2, [pc, #772]	; (8001ce4 <main+0x348>)
 80019e0:	601a      	str	r2, [r3, #0]
    lcd1.hw_conf.spi_cs_pin =  GPIO_PIN_2;
 80019e2:	4bbf      	ldr	r3, [pc, #764]	; (8001ce0 <main+0x344>)
 80019e4:	2204      	movs	r2, #4
 80019e6:	809a      	strh	r2, [r3, #4]
    lcd1.hw_conf.spi_cs_port = GPIOA;
 80019e8:	4bbd      	ldr	r3, [pc, #756]	; (8001ce0 <main+0x344>)
 80019ea:	4abf      	ldr	r2, [pc, #764]	; (8001ce8 <main+0x34c>)
 80019ec:	609a      	str	r2, [r3, #8]
    lcd1.hw_conf.rst_pin =  GPIO_PIN_0;
 80019ee:	4bbc      	ldr	r3, [pc, #752]	; (8001ce0 <main+0x344>)
 80019f0:	2201      	movs	r2, #1
 80019f2:	819a      	strh	r2, [r3, #12]
    lcd1.hw_conf.rst_port = GPIOB;
 80019f4:	4bba      	ldr	r3, [pc, #744]	; (8001ce0 <main+0x344>)
 80019f6:	4abd      	ldr	r2, [pc, #756]	; (8001cec <main+0x350>)
 80019f8:	611a      	str	r2, [r3, #16]
    lcd1.hw_conf.dc_pin =  GPIO_PIN_3;
 80019fa:	4bb9      	ldr	r3, [pc, #740]	; (8001ce0 <main+0x344>)
 80019fc:	2208      	movs	r2, #8
 80019fe:	829a      	strh	r2, [r3, #20]
    lcd1.hw_conf.dc_port = GPIOA;
 8001a00:	4bb7      	ldr	r3, [pc, #732]	; (8001ce0 <main+0x344>)
 8001a02:	4ab9      	ldr	r2, [pc, #740]	; (8001ce8 <main+0x34c>)
 8001a04:	619a      	str	r2, [r3, #24]
    lcd1.def_scr = lcd5110_def_scr;
 8001a06:	4bb6      	ldr	r3, [pc, #728]	; (8001ce0 <main+0x344>)
 8001a08:	4ab9      	ldr	r2, [pc, #740]	; (8001cf0 <main+0x354>)
 8001a0a:	f503 7305 	add.w	r3, r3, #532	; 0x214
 8001a0e:	4614      	mov	r4, r2
 8001a10:	6820      	ldr	r0, [r4, #0]
 8001a12:	6861      	ldr	r1, [r4, #4]
 8001a14:	68a2      	ldr	r2, [r4, #8]
 8001a16:	c307      	stmia	r3!, {r0, r1, r2}
 8001a18:	89a2      	ldrh	r2, [r4, #12]
 8001a1a:	801a      	strh	r2, [r3, #0]
    LCD5110_init(&lcd1.hw_conf, LCD5110_NORMAL_MODE, 0x40, 2, 3);
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	9300      	str	r3, [sp, #0]
 8001a20:	2302      	movs	r3, #2
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	210c      	movs	r1, #12
 8001a26:	48ae      	ldr	r0, [pc, #696]	; (8001ce0 <main+0x344>)
 8001a28:	f7ff fdca 	bl	80015c0 <LCD5110_init>
			      sprintf(ATcommand,"AT\r\n");
 8001a2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a30:	49b0      	ldr	r1, [pc, #704]	; (8001cf4 <main+0x358>)
 8001a32:	4618      	mov	r0, r3
 8001a34:	f008 ff42 	bl	800a8bc <siprintf>
			      HAL_UART_Transmit(&huart1,(uint8_t *)ATcommand,strlen(ATcommand),100);
 8001a38:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7fe fbcf 	bl	80001e0 <strlen>
 8001a42:	4603      	mov	r3, r0
 8001a44:	b29a      	uxth	r2, r3
 8001a46:	f107 01b8 	add.w	r1, r7, #184	; 0xb8
 8001a4a:	2364      	movs	r3, #100	; 0x64
 8001a4c:	48aa      	ldr	r0, [pc, #680]	; (8001cf8 <main+0x35c>)
 8001a4e:	f004 fd94 	bl	800657a <HAL_UART_Transmit>
			      HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8001a52:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001a56:	230a      	movs	r3, #10
 8001a58:	220a      	movs	r2, #10
 8001a5a:	48a7      	ldr	r0, [pc, #668]	; (8001cf8 <main+0x35c>)
 8001a5c:	f004 fe1f 	bl	800669e <HAL_UART_Receive>
			      if(strstr((char *)res,"OK"))
 8001a60:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001a64:	49a5      	ldr	r1, [pc, #660]	; (8001cfc <main+0x360>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f008 ff57 	bl	800a91a <strstr>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d006      	beq.n	8001a80 <main+0xe4>
			          HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 8001a72:	2201      	movs	r2, #1
 8001a74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a78:	48a1      	ldr	r0, [pc, #644]	; (8001d00 <main+0x364>)
 8001a7a:	f001 fc31 	bl	80032e0 <HAL_GPIO_WritePin>
 8001a7e:	e005      	b.n	8001a8c <main+0xf0>
			        HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);    // red
 8001a80:	2201      	movs	r2, #1
 8001a82:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a86:	489e      	ldr	r0, [pc, #632]	; (8001d00 <main+0x364>)
 8001a88:	f001 fc2a 	bl	80032e0 <HAL_GPIO_WritePin>
    char buf[10] = {0};
 8001a8c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001a90:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	3304      	adds	r3, #4
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	809a      	strh	r2, [r3, #4]
    int pos = 0;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
    char key_pressed = 0;
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297
    rect_t rect={0,0, 83, 10};
 8001aac:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001ab0:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ab4:	4a93      	ldr	r2, [pc, #588]	; (8001d04 <main+0x368>)
 8001ab6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001aba:	e883 0003 	stmia.w	r3, {r0, r1}
    const unsigned char call_image[] = {
 8001abe:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001ac2:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001ac6:	4a90      	ldr	r2, [pc, #576]	; (8001d08 <main+0x36c>)
 8001ac8:	33ed      	adds	r3, #237	; 0xed
 8001aca:	4611      	mov	r1, r2
 8001acc:	2278      	movs	r2, #120	; 0x78
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f008 ff6e 	bl	800a9b0 <memcpy>
    const unsigned char main_screen_image[] = {
 8001ad4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001ad8:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001adc:	4a8b      	ldr	r2, [pc, #556]	; (8001d0c <main+0x370>)
 8001ade:	f103 04b4 	add.w	r4, r3, #180	; 0xb4
 8001ae2:	4615      	mov	r5, r2
 8001ae4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001ae6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001ae8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001aec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001af0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001af4:	c403      	stmia	r4!, {r0, r1}
 8001af6:	7022      	strb	r2, [r4, #0]
    const unsigned char main_screen_snake[] = {
 8001af8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001afc:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b00:	4a83      	ldr	r2, [pc, #524]	; (8001d10 <main+0x374>)
 8001b02:	4614      	mov	r4, r2
 8001b04:	f103 0c7b 	add.w	ip, r3, #123	; 0x7b
 8001b08:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b0c:	4665      	mov	r5, ip
 8001b0e:	4626      	mov	r6, r4
 8001b10:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b12:	6028      	str	r0, [r5, #0]
 8001b14:	6069      	str	r1, [r5, #4]
 8001b16:	60aa      	str	r2, [r5, #8]
 8001b18:	60eb      	str	r3, [r5, #12]
 8001b1a:	3410      	adds	r4, #16
 8001b1c:	f10c 0c10 	add.w	ip, ip, #16
 8001b20:	4574      	cmp	r4, lr
 8001b22:	d1f3      	bne.n	8001b0c <main+0x170>
 8001b24:	4662      	mov	r2, ip
 8001b26:	4623      	mov	r3, r4
 8001b28:	cb03      	ldmia	r3!, {r0, r1}
 8001b2a:	6010      	str	r0, [r2, #0]
 8001b2c:	6051      	str	r1, [r2, #4]
 8001b2e:	781b      	ldrb	r3, [r3, #0]
 8001b30:	7213      	strb	r3, [r2, #8]
    const unsigned char main_message[] = {
 8001b32:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b36:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b3a:	4a76      	ldr	r2, [pc, #472]	; (8001d14 <main+0x378>)
 8001b3c:	4614      	mov	r4, r2
 8001b3e:	f103 0c09 	add.w	ip, r3, #9
 8001b42:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b46:	4665      	mov	r5, ip
 8001b48:	4626      	mov	r6, r4
 8001b4a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b4c:	6028      	str	r0, [r5, #0]
 8001b4e:	6069      	str	r1, [r5, #4]
 8001b50:	60aa      	str	r2, [r5, #8]
 8001b52:	60eb      	str	r3, [r5, #12]
 8001b54:	3410      	adds	r4, #16
 8001b56:	f10c 0c10 	add.w	ip, ip, #16
 8001b5a:	4574      	cmp	r4, lr
 8001b5c:	d1f3      	bne.n	8001b46 <main+0x1aa>
 8001b5e:	4662      	mov	r2, ip
 8001b60:	4623      	mov	r3, r4
 8001b62:	cb03      	ldmia	r3!, {r0, r1}
 8001b64:	6010      	str	r0, [r2, #0]
 8001b66:	6051      	str	r1, [r2, #4]
 8001b68:	781b      	ldrb	r3, [r3, #0]
 8001b6a:	7213      	strb	r3, [r2, #8]
    const unsigned char write_message[] = {
 8001b6c:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001b70:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001b74:	4a68      	ldr	r2, [pc, #416]	; (8001d18 <main+0x37c>)
 8001b76:	4614      	mov	r4, r2
 8001b78:	f103 0c42 	add.w	ip, r3, #66	; 0x42
 8001b7c:	f104 0e30 	add.w	lr, r4, #48	; 0x30
 8001b80:	4665      	mov	r5, ip
 8001b82:	4626      	mov	r6, r4
 8001b84:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
 8001b86:	6028      	str	r0, [r5, #0]
 8001b88:	6069      	str	r1, [r5, #4]
 8001b8a:	60aa      	str	r2, [r5, #8]
 8001b8c:	60eb      	str	r3, [r5, #12]
 8001b8e:	3410      	adds	r4, #16
 8001b90:	f10c 0c10 	add.w	ip, ip, #16
 8001b94:	4574      	cmp	r4, lr
 8001b96:	d1f3      	bne.n	8001b80 <main+0x1e4>
 8001b98:	4662      	mov	r2, ip
 8001b9a:	4623      	mov	r3, r4
 8001b9c:	cb03      	ldmia	r3!, {r0, r1}
 8001b9e:	6010      	str	r0, [r2, #0]
 8001ba0:	6051      	str	r1, [r2, #4]
 8001ba2:	781b      	ldrb	r3, [r3, #0]
 8001ba4:	7213      	strb	r3, [r2, #8]
    const char MESSAGE_MODE[] = "AT+CMGF=1\r\n";
 8001ba6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001baa:	f5a3 7307 	sub.w	r3, r3, #540	; 0x21c
 8001bae:	4a5b      	ldr	r2, [pc, #364]	; (8001d1c <main+0x380>)
 8001bb0:	ca07      	ldmia	r2, {r0, r1, r2}
 8001bb2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    const char MSG_NUMBER_INIT[] = "AT+CMGS=\"+38";
 8001bb6:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001bba:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8001bbe:	4a58      	ldr	r2, [pc, #352]	; (8001d20 <main+0x384>)
 8001bc0:	461c      	mov	r4, r3
 8001bc2:	4613      	mov	r3, r2
 8001bc4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001bc6:	c407      	stmia	r4!, {r0, r1, r2}
 8001bc8:	7023      	strb	r3, [r4, #0]
    char* letters_for_keys[] = {
 8001bca:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001bce:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001bd2:	4a54      	ldr	r2, [pc, #336]	; (8001d24 <main+0x388>)
 8001bd4:	461c      	mov	r4, r3
 8001bd6:	4615      	mov	r5, r2
 8001bd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bda:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001bdc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001bde:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	6023      	str	r3, [r4, #0]
    int letters[] = {0,0,0,0,0,0,0,0,0};
 8001be4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001be8:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001bec:	4618      	mov	r0, r3
 8001bee:	2324      	movs	r3, #36	; 0x24
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	f008 fea7 	bl	800a946 <memset>
    char message[32] = {0};
 8001bf8:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001bfc:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001c00:	2200      	movs	r2, #0
 8001c02:	601a      	str	r2, [r3, #0]
 8001c04:	3304      	adds	r3, #4
 8001c06:	2200      	movs	r2, #0
 8001c08:	601a      	str	r2, [r3, #0]
 8001c0a:	605a      	str	r2, [r3, #4]
 8001c0c:	609a      	str	r2, [r3, #8]
 8001c0e:	60da      	str	r2, [r3, #12]
 8001c10:	611a      	str	r2, [r3, #16]
 8001c12:	615a      	str	r2, [r3, #20]
 8001c14:	619a      	str	r2, [r3, #24]
    int message_pos = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
    keypad_init();
 8001c1c:	f7ff fd34 	bl	8001688 <keypad_init>
        	LCD5110_set_cursor(5, 40, &lcd1);
        	LCD5110_print("A-send", 0, &lcd1);
        	is_message = true;
        }

    bool cursor_on_phone = true;
 8001c20:	2301      	movs	r3, #1
 8001c22:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
    bool screen_main = false;
 8001c26:	2300      	movs	r3, #0
 8001c28:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
    bool cursor_on_message = false;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
    bool screen_message = false;
 8001c32:	2300      	movs	r3, #0
 8001c34:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
    bool type_message_screen = false;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
    bool screen_begin = true;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
    bool want_to_send_digits = true;
 8001c44:	2301      	movs	r3, #1
 8001c46:	f887 32a1 	strb.w	r3, [r7, #673]	; 0x2a1

    main_screen(cursor_on_phone - 1);
 8001c4a:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	b2db      	uxtb	r3, r3
 8001c52:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001c56:	4694      	mov	ip, r2
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f000 fc63 	bl	8002524 <main_screen.2>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
	    key_pressed = keypad_scan();
 8001c5e:	f7ff fd77 	bl	8001750 <keypad_scan>
 8001c62:	4603      	mov	r3, r0
 8001c64:	f887 3297 	strb.w	r3, [r7, #663]	; 0x297

	    if(key_pressed != 0)
 8001c68:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	f000 841d 	beq.w	80024ac <main+0xb10>
	    {
	    	if (type_message_screen) {
 8001c72:	f897 32a3 	ldrb.w	r3, [r7, #675]	; 0x2a3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 81ab 	beq.w	8001fd2 <main+0x636>
	    		if (!want_to_send_digits) {
 8001c7c:	f897 32a1 	ldrb.w	r3, [r7, #673]	; 0x2a1
 8001c80:	f083 0301 	eor.w	r3, r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 8114 	beq.w	8001eb4 <main+0x518>
	    			    			if (key_pressed >= '0' && key_pressed <= '9') {
 8001c8c:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001c90:	2b2f      	cmp	r3, #47	; 0x2f
 8001c92:	d918      	bls.n	8001cc6 <main+0x32a>
 8001c94:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001c98:	2b39      	cmp	r3, #57	; 0x39
 8001c9a:	d814      	bhi.n	8001cc6 <main+0x32a>
	    			    				int num = key_pressed - '0';
 8001c9c:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001ca0:	3b30      	subs	r3, #48	; 0x30
 8001ca2:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	    			    				letters[num - 1]++;
 8001ca6:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 8001caa:	3b01      	subs	r3, #1
 8001cac:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8001cb0:	f5a2 721d 	sub.w	r2, r2, #628	; 0x274
 8001cb4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cb8:	1c51      	adds	r1, r2, #1
 8001cba:	f507 722c 	add.w	r2, r7, #688	; 0x2b0
 8001cbe:	f5a2 721d 	sub.w	r2, r2, #628	; 0x274
 8001cc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	    			    			}
	    			    			if (key_pressed == 'C') {
 8001cc6:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001cca:	2b43      	cmp	r3, #67	; 0x43
 8001ccc:	f040 808f 	bne.w	8001dee <main+0x452>

	    			    				int maxindex = 0;
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	    			    				for (int i = 0; i < 9; i++) {
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8001cdc:	e03f      	b.n	8001d5e <main+0x3c2>
 8001cde:	bf00      	nop
 8001ce0:	2000028c 	.word	0x2000028c
 8001ce4:	200004b0 	.word	0x200004b0
 8001ce8:	40020000 	.word	0x40020000
 8001cec:	40020400 	.word	0x40020400
 8001cf0:	0800bb14 	.word	0x0800bb14
 8001cf4:	0800b298 	.word	0x0800b298
 8001cf8:	2000050c 	.word	0x2000050c
 8001cfc:	0800b2a0 	.word	0x0800b2a0
 8001d00:	40020c00 	.word	0x40020c00
 8001d04:	0800b2ac 	.word	0x0800b2ac
 8001d08:	0800b2b4 	.word	0x0800b2b4
 8001d0c:	0800b32c 	.word	0x0800b32c
 8001d10:	0800b368 	.word	0x0800b368
 8001d14:	0800b3a4 	.word	0x0800b3a4
 8001d18:	0800b3e0 	.word	0x0800b3e0
 8001d1c:	0800b41c 	.word	0x0800b41c
 8001d20:	0800b428 	.word	0x0800b428
 8001d24:	0800b45c 	.word	0x0800b45c
	    			    				        if (letters[i] > letters[maxindex]) {
 8001d28:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001d2c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001d30:	f8d7 2298 	ldr.w	r2, [r7, #664]	; 0x298
 8001d34:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8001d38:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001d3c:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001d40:	f8d7 129c 	ldr.w	r1, [r7, #668]	; 0x29c
 8001d44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	dd03      	ble.n	8001d54 <main+0x3b8>
	    			    				        	maxindex = i;
 8001d4c:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d50:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	    			    				for (int i = 0; i < 9; i++) {
 8001d54:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d58:	3301      	adds	r3, #1
 8001d5a:	f8c7 3298 	str.w	r3, [r7, #664]	; 0x298
 8001d5e:	f8d7 3298 	ldr.w	r3, [r7, #664]	; 0x298
 8001d62:	2b08      	cmp	r3, #8
 8001d64:	dde0      	ble.n	8001d28 <main+0x38c>
	    			    				        }
	    			    				    }
	    			    				char *message_t = letters_for_keys[maxindex];
 8001d66:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001d6a:	f5a3 7314 	sub.w	r3, r3, #592	; 0x250
 8001d6e:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d76:	f8c7 3288 	str.w	r3, [r7, #648]	; 0x288
	    			    				message[message_pos] = message_t[letters[maxindex] - 1];
 8001d7a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001d7e:	f5a3 731d 	sub.w	r3, r3, #628	; 0x274
 8001d82:	f8d7 229c 	ldr.w	r2, [r7, #668]	; 0x29c
 8001d86:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	f8d7 2288 	ldr.w	r2, [r7, #648]	; 0x288
 8001d90:	4413      	add	r3, r2
 8001d92:	7819      	ldrb	r1, [r3, #0]
 8001d94:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001d98:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8001d9c:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001da0:	4413      	add	r3, r2
 8001da2:	460a      	mov	r2, r1
 8001da4:	701a      	strb	r2, [r3, #0]
										message_pos++;
 8001da6:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001daa:	3301      	adds	r3, #1
 8001dac:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
										message[message_pos] = '\0';
 8001db0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001db4:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8001db8:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001dbc:	4413      	add	r3, r2
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	701a      	strb	r2, [r3, #0]
	    			    				LCD5110_set_cursor(0, 0, &lcd1);
 8001dc2:	4ac3      	ldr	r2, [pc, #780]	; (80020d0 <main+0x734>)
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	2000      	movs	r0, #0
 8001dc8:	f7fe fec8 	bl	8000b5c <LCD5110_set_cursor>
										LCD5110_print(message, 0, &lcd1);
 8001dcc:	f107 031c 	add.w	r3, r7, #28
 8001dd0:	4abf      	ldr	r2, [pc, #764]	; (80020d0 <main+0x734>)
 8001dd2:	2100      	movs	r1, #0
 8001dd4:	4618      	mov	r0, r3
 8001dd6:	f7fe fee4 	bl	8000ba2 <LCD5110_print>
										LCD5110_refresh(&lcd1);
 8001dda:	48bd      	ldr	r0, [pc, #756]	; (80020d0 <main+0x734>)
 8001ddc:	f7fe feb2 	bl	8000b44 <LCD5110_refresh>
										memset(letters, 0, sizeof(letters));
 8001de0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001de4:	2224      	movs	r2, #36	; 0x24
 8001de6:	2100      	movs	r1, #0
 8001de8:	4618      	mov	r0, r3
 8001dea:	f008 fdac 	bl	800a946 <memset>
	    			    			}
	    			    			if (key_pressed == 'A') {
 8001dee:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001df2:	2b41      	cmp	r3, #65	; 0x41
 8001df4:	f040 835a 	bne.w	80024ac <main+0xb10>
										strcat(message, "\r\n\x1A");
 8001df8:	f107 031c 	add.w	r3, r7, #28
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7fe f9ef 	bl	80001e0 <strlen>
 8001e02:	4603      	mov	r3, r0
 8001e04:	461a      	mov	r2, r3
 8001e06:	f107 031c 	add.w	r3, r7, #28
 8001e0a:	4413      	add	r3, r2
 8001e0c:	4ab1      	ldr	r2, [pc, #708]	; (80020d4 <main+0x738>)
 8001e0e:	6810      	ldr	r0, [r2, #0]
 8001e10:	6018      	str	r0, [r3, #0]
										HAL_UART_Transmit(&huart1,(uint8_t *)message,strlen(message),100);
 8001e12:	f107 031c 	add.w	r3, r7, #28
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7fe f9e2 	bl	80001e0 <strlen>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	f107 011c 	add.w	r1, r7, #28
 8001e24:	2364      	movs	r3, #100	; 0x64
 8001e26:	48ac      	ldr	r0, [pc, #688]	; (80020d8 <main+0x73c>)
 8001e28:	f004 fba7 	bl	800657a <HAL_UART_Transmit>
										HAL_Delay(5000);
 8001e2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e30:	f000 ff84 	bl	8002d3c <HAL_Delay>
										HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8001e34:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001e38:	230a      	movs	r3, #10
 8001e3a:	220a      	movs	r2, #10
 8001e3c:	48a6      	ldr	r0, [pc, #664]	; (80020d8 <main+0x73c>)
 8001e3e:	f004 fc2e 	bl	800669e <HAL_UART_Receive>
										LCD5110_refresh(&lcd1);
 8001e42:	48a3      	ldr	r0, [pc, #652]	; (80020d0 <main+0x734>)
 8001e44:	f7fe fe7e 	bl	8000b44 <LCD5110_refresh>
										HAL_Delay(5000);
 8001e48:	f241 3088 	movw	r0, #5000	; 0x1388
 8001e4c:	f000 ff76 	bl	8002d3c <HAL_Delay>
										message[0] = '\0';
 8001e50:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001e54:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
										message_pos = 0;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
										LCD5110_refresh(&lcd1);
 8001e62:	489b      	ldr	r0, [pc, #620]	; (80020d0 <main+0x734>)
 8001e64:	f7fe fe6e 	bl	8000b44 <LCD5110_refresh>
										type_message_screen = false;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
										screen_begin = true;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
										want_to_send_digits = true;
 8001e74:	2301      	movs	r3, #1
 8001e76:	f887 32a1 	strb.w	r3, [r7, #673]	; 0x2a1
										buf[0] = '\0';
 8001e7a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001e7e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
										message[0] = '\0';
 8001e86:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001e8a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001e8e:	2200      	movs	r2, #0
 8001e90:	701a      	strb	r2, [r3, #0]
										message_pos = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
										pos = 0;
 8001e98:	2300      	movs	r3, #0
 8001e9a:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
										main_screen(cursor_on_phone - 1);
 8001e9e:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	b2db      	uxtb	r3, r3
 8001ea6:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001eaa:	4694      	mov	ip, r2
 8001eac:	4618      	mov	r0, r3
 8001eae:	f000 fb39 	bl	8002524 <main_screen.2>
 8001eb2:	e2fb      	b.n	80024ac <main+0xb10>
									}

	    			    		}
	    		else {
	    			if (key_pressed == 'C') { // changing mode to letters
 8001eb4:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001eb8:	2b43      	cmp	r3, #67	; 0x43
 8001eba:	d103      	bne.n	8001ec4 <main+0x528>
	    				    			want_to_send_digits = false;
 8001ebc:	2300      	movs	r3, #0
 8001ebe:	f887 32a1 	strb.w	r3, [r7, #673]	; 0x2a1
 8001ec2:	e02f      	b.n	8001f24 <main+0x588>
	    				    		}

	    				    		else if (key_pressed >= '0' && key_pressed <= '9' && message_pos < sizeof(message))
 8001ec4:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001ec8:	2b2f      	cmp	r3, #47	; 0x2f
 8001eca:	d92b      	bls.n	8001f24 <main+0x588>
 8001ecc:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001ed0:	2b39      	cmp	r3, #57	; 0x39
 8001ed2:	d827      	bhi.n	8001f24 <main+0x588>
 8001ed4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001ed8:	2b1f      	cmp	r3, #31
 8001eda:	d823      	bhi.n	8001f24 <main+0x588>
	    								{
	    				    				message[message_pos] = key_pressed;
 8001edc:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001ee0:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8001ee4:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001ee8:	4413      	add	r3, r2
 8001eea:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 8001eee:	701a      	strb	r2, [r3, #0]
	    				    				message_pos++;
 8001ef0:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
	    									message[message_pos] = '\0';
 8001efa:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001efe:	f5a3 7225 	sub.w	r2, r3, #660	; 0x294
 8001f02:	f8d7 32a8 	ldr.w	r3, [r7, #680]	; 0x2a8
 8001f06:	4413      	add	r3, r2
 8001f08:	2200      	movs	r2, #0
 8001f0a:	701a      	strb	r2, [r3, #0]

	    									LCD5110_set_cursor(0, 0, &lcd1);
 8001f0c:	4a70      	ldr	r2, [pc, #448]	; (80020d0 <main+0x734>)
 8001f0e:	2100      	movs	r1, #0
 8001f10:	2000      	movs	r0, #0
 8001f12:	f7fe fe23 	bl	8000b5c <LCD5110_set_cursor>
	    									LCD5110_print(message, 0, &lcd1);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4a6d      	ldr	r2, [pc, #436]	; (80020d0 <main+0x734>)
 8001f1c:	2100      	movs	r1, #0
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe fe3f 	bl	8000ba2 <LCD5110_print>
	    								}
	    				    		if (key_pressed == 'A') {
 8001f24:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001f28:	2b41      	cmp	r3, #65	; 0x41
 8001f2a:	f040 82bf 	bne.w	80024ac <main+0xb10>


	    				    			strcat(message, "\r\n\x1A");
 8001f2e:	f107 031c 	add.w	r3, r7, #28
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe f954 	bl	80001e0 <strlen>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	f107 031c 	add.w	r3, r7, #28
 8001f40:	4413      	add	r3, r2
 8001f42:	4a64      	ldr	r2, [pc, #400]	; (80020d4 <main+0x738>)
 8001f44:	6810      	ldr	r0, [r2, #0]
 8001f46:	6018      	str	r0, [r3, #0]

	    								HAL_UART_Transmit(&huart1,(uint8_t *)message,strlen(message),100);
 8001f48:	f107 031c 	add.w	r3, r7, #28
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f7fe f947 	bl	80001e0 <strlen>
 8001f52:	4603      	mov	r3, r0
 8001f54:	b29a      	uxth	r2, r3
 8001f56:	f107 011c 	add.w	r1, r7, #28
 8001f5a:	2364      	movs	r3, #100	; 0x64
 8001f5c:	485e      	ldr	r0, [pc, #376]	; (80020d8 <main+0x73c>)
 8001f5e:	f004 fb0c 	bl	800657a <HAL_UART_Transmit>
	    								HAL_Delay(5000);
 8001f62:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f66:	f000 fee9 	bl	8002d3c <HAL_Delay>
	    							    HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8001f6a:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 8001f6e:	230a      	movs	r3, #10
 8001f70:	220a      	movs	r2, #10
 8001f72:	4859      	ldr	r0, [pc, #356]	; (80020d8 <main+0x73c>)
 8001f74:	f004 fb93 	bl	800669e <HAL_UART_Receive>
	    							    LCD5110_refresh(&lcd1);
 8001f78:	4855      	ldr	r0, [pc, #340]	; (80020d0 <main+0x734>)
 8001f7a:	f7fe fde3 	bl	8000b44 <LCD5110_refresh>
	    							    HAL_Delay(5000);
 8001f7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8001f82:	f000 fedb 	bl	8002d3c <HAL_Delay>
	    							    message[0] = '\0';
 8001f86:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001f8a:	f5a3 7325 	sub.w	r3, r3, #660	; 0x294
 8001f8e:	2200      	movs	r2, #0
 8001f90:	701a      	strb	r2, [r3, #0]
	    							    message_pos = 0;
 8001f92:	2300      	movs	r3, #0
 8001f94:	f8c7 32a8 	str.w	r3, [r7, #680]	; 0x2a8
	    								LCD5110_refresh(&lcd1);
 8001f98:	484d      	ldr	r0, [pc, #308]	; (80020d0 <main+0x734>)
 8001f9a:	f7fe fdd3 	bl	8000b44 <LCD5110_refresh>
	    								type_message_screen = false;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
	    				    			screen_begin = true;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
	    				    			buf[0] = '\0';
 8001faa:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8001fae:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
	    				    			pos = 0;
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
	    				    			main_screen(cursor_on_phone - 1);
 8001fbc:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8001fc0:	3b01      	subs	r3, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8001fc8:	4694      	mov	ip, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f000 faaa 	bl	8002524 <main_screen.2>
 8001fd0:	e26c      	b.n	80024ac <main+0xb10>
	    				    		}
	    				    	}
	    		}
	    	else if (screen_message) {
 8001fd2:	f897 32a4 	ldrb.w	r3, [r7, #676]	; 0x2a4
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8114 	beq.w	8002204 <main+0x868>
	    		if (key_pressed == 'B') {
 8001fdc:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8001fe0:	2b42      	cmp	r3, #66	; 0x42
 8001fe2:	d122      	bne.n	800202a <main+0x68e>
	    			screen_message = false;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
	    			type_message_screen = false;
 8001fea:	2300      	movs	r3, #0
 8001fec:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
	    			screen_begin = true;
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
	    			memset(buf, ' ', sizeof(buf) - 1);
 8001ff6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001ffa:	2209      	movs	r2, #9
 8001ffc:	2120      	movs	r1, #32
 8001ffe:	4618      	mov	r0, r3
 8002000:	f008 fca1 	bl	800a946 <memset>
					buf[0] = '\0';
 8002004:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002008:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800200c:	2200      	movs	r2, #0
 800200e:	701a      	strb	r2, [r3, #0]
					pos = 0;
 8002010:	2300      	movs	r3, #0
 8002012:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
					main_screen(cursor_on_phone - 1);
 8002016:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800201a:	3b01      	subs	r3, #1
 800201c:	b2db      	uxtb	r3, r3
 800201e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002022:	4694      	mov	ip, r2
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fa7d 	bl	8002524 <main_screen.2>
	    		}
	    		if (key_pressed >= '0' && key_pressed <= '9' && pos < sizeof(buf))
 800202a:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 800202e:	2b2f      	cmp	r3, #47	; 0x2f
 8002030:	d92b      	bls.n	800208a <main+0x6ee>
 8002032:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002036:	2b39      	cmp	r3, #57	; 0x39
 8002038:	d827      	bhi.n	800208a <main+0x6ee>
 800203a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800203e:	2b09      	cmp	r3, #9
 8002040:	d823      	bhi.n	800208a <main+0x6ee>
					{
						buf[pos] = key_pressed;
 8002042:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002046:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800204a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800204e:	4413      	add	r3, r2
 8002050:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 8002054:	701a      	strb	r2, [r3, #0]
						pos++;
 8002056:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800205a:	3301      	adds	r3, #1
 800205c:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						buf[pos] = '\0';
 8002060:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002064:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 8002068:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800206c:	4413      	add	r3, r2
 800206e:	2200      	movs	r2, #0
 8002070:	701a      	strb	r2, [r3, #0]

						LCD5110_set_cursor(0, 0, &lcd1);
 8002072:	4a17      	ldr	r2, [pc, #92]	; (80020d0 <main+0x734>)
 8002074:	2100      	movs	r1, #0
 8002076:	2000      	movs	r0, #0
 8002078:	f7fe fd70 	bl	8000b5c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 800207c:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <main+0x734>)
 8002082:	2100      	movs	r1, #0
 8002084:	4618      	mov	r0, r3
 8002086:	f7fe fd8c 	bl	8000ba2 <LCD5110_print>
					}
	    		if (key_pressed == 'A') {
 800208a:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 800208e:	2b41      	cmp	r3, #65	; 0x41
 8002090:	d165      	bne.n	800215e <main+0x7c2>
					  HAL_UART_Transmit(&huart1,(uint8_t *)MESSAGE_MODE,strlen(MESSAGE_MODE),100);
 8002092:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8002096:	2364      	movs	r3, #100	; 0x64
 8002098:	220b      	movs	r2, #11
 800209a:	480f      	ldr	r0, [pc, #60]	; (80020d8 <main+0x73c>)
 800209c:	f004 fa6d 	bl	800657a <HAL_UART_Transmit>
					  HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 80020a0:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 80020a4:	230a      	movs	r3, #10
 80020a6:	220a      	movs	r2, #10
 80020a8:	480b      	ldr	r0, [pc, #44]	; (80020d8 <main+0x73c>)
 80020aa:	f004 faf8 	bl	800669e <HAL_UART_Receive>
					  if(strstr((char *)res,"OK")){
 80020ae:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80020b2:	490a      	ldr	r1, [pc, #40]	; (80020dc <main+0x740>)
 80020b4:	4618      	mov	r0, r3
 80020b6:	f008 fc30 	bl	800a91a <strstr>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d011      	beq.n	80020e4 <main+0x748>
						  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);   // green
 80020c0:	2201      	movs	r2, #1
 80020c2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80020c6:	4806      	ldr	r0, [pc, #24]	; (80020e0 <main+0x744>)
 80020c8:	f001 f90a 	bl	80032e0 <HAL_GPIO_WritePin>
 80020cc:	e010      	b.n	80020f0 <main+0x754>
 80020ce:	bf00      	nop
 80020d0:	2000028c 	.word	0x2000028c
 80020d4:	0800b2a4 	.word	0x0800b2a4
 80020d8:	2000050c 	.word	0x2000050c
 80020dc:	0800b2a0 	.word	0x0800b2a0
 80020e0:	40020c00 	.word	0x40020c00
					  }
					  else{
						HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET);
 80020e4:	2201      	movs	r2, #1
 80020e6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80020ea:	48d2      	ldr	r0, [pc, #840]	; (8002434 <main+0xa98>)
 80020ec:	f001 f8f8 	bl	80032e0 <HAL_GPIO_WritePin>
					  }

					  char current_number[25];
					  strcpy(current_number, MSG_NUMBER_INIT);
 80020f0:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80020f4:	463b      	mov	r3, r7
 80020f6:	4611      	mov	r1, r2
 80020f8:	4618      	mov	r0, r3
 80020fa:	f008 fc67 	bl	800a9cc <strcpy>
					  strcat(current_number, buf);
 80020fe:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8002102:	463b      	mov	r3, r7
 8002104:	4611      	mov	r1, r2
 8002106:	4618      	mov	r0, r3
 8002108:	f008 fbf8 	bl	800a8fc <strcat>
					  strcat(current_number, "\"\r\n");
 800210c:	463b      	mov	r3, r7
 800210e:	4618      	mov	r0, r3
 8002110:	f7fe f866 	bl	80001e0 <strlen>
 8002114:	4603      	mov	r3, r0
 8002116:	461a      	mov	r2, r3
 8002118:	463b      	mov	r3, r7
 800211a:	4413      	add	r3, r2
 800211c:	4ac6      	ldr	r2, [pc, #792]	; (8002438 <main+0xa9c>)
 800211e:	6810      	ldr	r0, [r2, #0]
 8002120:	6018      	str	r0, [r3, #0]
					  HAL_UART_Transmit(&huart1,(uint8_t *)current_number,strlen(current_number),100);
 8002122:	463b      	mov	r3, r7
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f85b 	bl	80001e0 <strlen>
 800212a:	4603      	mov	r3, r0
 800212c:	b29a      	uxth	r2, r3
 800212e:	4639      	mov	r1, r7
 8002130:	2364      	movs	r3, #100	; 0x64
 8002132:	48c2      	ldr	r0, [pc, #776]	; (800243c <main+0xaa0>)
 8002134:	f004 fa21 	bl	800657a <HAL_UART_Transmit>
					  HAL_UART_Receive (&huart1, (uint8_t *)res, 10, 10);
 8002138:	f107 01ac 	add.w	r1, r7, #172	; 0xac
 800213c:	230a      	movs	r3, #10
 800213e:	220a      	movs	r2, #10
 8002140:	48be      	ldr	r0, [pc, #760]	; (800243c <main+0xaa0>)
 8002142:	f004 faac 	bl	800669e <HAL_UART_Receive>

	    			screen_message = false;
 8002146:	2300      	movs	r3, #0
 8002148:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
	    			type_message_screen = true;
 800214c:	2301      	movs	r3, #1
 800214e:	f887 32a3 	strb.w	r3, [r7, #675]	; 0x2a3
	    			type_message_scren();
 8002152:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002156:	469c      	mov	ip, r3
 8002158:	f000 facc 	bl	80026f4 <type_message_scren.0>
 800215c:	e1a6      	b.n	80024ac <main+0xb10>
	    			}
	    		else if (key_pressed == 'D')
 800215e:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002162:	2b44      	cmp	r3, #68	; 0x44
 8002164:	d11f      	bne.n	80021a6 <main+0x80a>
					{
						memset(buf, ' ', sizeof(buf) - 1);
 8002166:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800216a:	2209      	movs	r2, #9
 800216c:	2120      	movs	r1, #32
 800216e:	4618      	mov	r0, r3
 8002170:	f008 fbe9 	bl	800a946 <memset>
						buf[0] = '\0';
 8002174:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002178:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 800217c:	2200      	movs	r2, #0
 800217e:	701a      	strb	r2, [r3, #0]
						pos = 0;
 8002180:	2300      	movs	r3, #0
 8002182:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						LCD5110_refresh(&lcd1);
 8002186:	48ae      	ldr	r0, [pc, #696]	; (8002440 <main+0xaa4>)
 8002188:	f7fe fcdc 	bl	8000b44 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 800218c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002190:	4aab      	ldr	r2, [pc, #684]	; (8002440 <main+0xaa4>)
 8002192:	2101      	movs	r1, #1
 8002194:	4618      	mov	r0, r3
 8002196:	f7fe feae 	bl	8000ef6 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 800219a:	4aa9      	ldr	r2, [pc, #676]	; (8002440 <main+0xaa4>)
 800219c:	2100      	movs	r1, #0
 800219e:	2000      	movs	r0, #0
 80021a0:	f7fe fcdc 	bl	8000b5c <LCD5110_set_cursor>
 80021a4:	e182      	b.n	80024ac <main+0xb10>
					}
	    		else if (key_pressed == 'C' && pos > 0)
 80021a6:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 80021aa:	2b43      	cmp	r3, #67	; 0x43
 80021ac:	f040 817e 	bne.w	80024ac <main+0xb10>
 80021b0:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f340 8179 	ble.w	80024ac <main+0xb10>
					{
						pos--;
 80021ba:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80021be:	3b01      	subs	r3, #1
 80021c0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						buf[pos] = '\0';
 80021c4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80021c8:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80021cc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80021d0:	4413      	add	r3, r2
 80021d2:	2200      	movs	r2, #0
 80021d4:	701a      	strb	r2, [r3, #0]

						LCD5110_refresh(&lcd1);
 80021d6:	489a      	ldr	r0, [pc, #616]	; (8002440 <main+0xaa4>)
 80021d8:	f7fe fcb4 	bl	8000b44 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 80021dc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80021e0:	4a97      	ldr	r2, [pc, #604]	; (8002440 <main+0xaa4>)
 80021e2:	2101      	movs	r1, #1
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe fe86 	bl	8000ef6 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 80021ea:	4a95      	ldr	r2, [pc, #596]	; (8002440 <main+0xaa4>)
 80021ec:	2100      	movs	r1, #0
 80021ee:	2000      	movs	r0, #0
 80021f0:	f7fe fcb4 	bl	8000b5c <LCD5110_set_cursor>
						LCD5110_print(buf, 0, &lcd1);
 80021f4:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80021f8:	4a91      	ldr	r2, [pc, #580]	; (8002440 <main+0xaa4>)
 80021fa:	2100      	movs	r1, #0
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe fcd0 	bl	8000ba2 <LCD5110_print>
 8002202:	e153      	b.n	80024ac <main+0xb10>
					}
	    	}
	    	else if (screen_begin) {
 8002204:	f897 32a2 	ldrb.w	r3, [r7, #674]	; 0x2a2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d05d      	beq.n	80022c8 <main+0x92c>
	    		if (key_pressed == '1' || key_pressed == '2' || key_pressed == '3' || key_pressed == '4') {
 800220c:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002210:	2b31      	cmp	r3, #49	; 0x31
 8002212:	d00b      	beq.n	800222c <main+0x890>
 8002214:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002218:	2b32      	cmp	r3, #50	; 0x32
 800221a:	d007      	beq.n	800222c <main+0x890>
 800221c:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002220:	2b33      	cmp	r3, #51	; 0x33
 8002222:	d003      	beq.n	800222c <main+0x890>
 8002224:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002228:	2b34      	cmp	r3, #52	; 0x34
 800222a:	d124      	bne.n	8002276 <main+0x8da>
	    			int num = key_pressed - '0';
 800222c:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002230:	3b30      	subs	r3, #48	; 0x30
 8002232:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	    			if (num == 3) {
 8002236:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800223a:	2b03      	cmp	r3, #3
 800223c:	d106      	bne.n	800224c <main+0x8b0>
	    				cursor_on_message = true;
 800223e:	2301      	movs	r3, #1
 8002240:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
	    				cursor_on_phone = false;
 8002244:	2300      	movs	r3, #0
 8002246:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
 800224a:	e009      	b.n	8002260 <main+0x8c4>
	    			} else if (num == 1) {
 800224c:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002250:	2b01      	cmp	r3, #1
 8002252:	d105      	bne.n	8002260 <main+0x8c4>
	    				cursor_on_message = false;
 8002254:	2300      	movs	r3, #0
 8002256:	f887 32a5 	strb.w	r3, [r7, #677]	; 0x2a5
	    				cursor_on_phone = true;
 800225a:	2301      	movs	r3, #1
 800225c:	f887 32a7 	strb.w	r3, [r7, #679]	; 0x2a7
	    			}
	    			main_screen(num - 1);
 8002260:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8002264:	b2db      	uxtb	r3, r3
 8002266:	3b01      	subs	r3, #1
 8002268:	b2db      	uxtb	r3, r3
 800226a:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 800226e:	4694      	mov	ip, r2
 8002270:	4618      	mov	r0, r3
 8002272:	f000 f957 	bl	8002524 <main_screen.2>
	    		}
				if (key_pressed == '*' && cursor_on_phone) {
 8002276:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 800227a:	2b2a      	cmp	r3, #42	; 0x2a
 800227c:	d10e      	bne.n	800229c <main+0x900>
 800227e:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 8002282:	2b00      	cmp	r3, #0
 8002284:	d00a      	beq.n	800229c <main+0x900>
						screen_main = true;
 8002286:	2301      	movs	r3, #1
 8002288:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
						screen_begin = false;
 800228c:	2300      	movs	r3, #0
 800228e:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
						init_screen();
 8002292:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002296:	469c      	mov	ip, r3
 8002298:	f7ff fb42 	bl	8001920 <init_screen.3>
					}
				if (key_pressed == '*' && cursor_on_message) {
 800229c:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 80022a0:	2b2a      	cmp	r3, #42	; 0x2a
 80022a2:	f040 8103 	bne.w	80024ac <main+0xb10>
 80022a6:	f897 32a5 	ldrb.w	r3, [r7, #677]	; 0x2a5
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	f000 80fe 	beq.w	80024ac <main+0xb10>
					screen_message = true;
 80022b0:	2301      	movs	r3, #1
 80022b2:	f887 32a4 	strb.w	r3, [r7, #676]	; 0x2a4
					screen_begin = false;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
					screen_for_message_sending();
 80022bc:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80022c0:	469c      	mov	ip, r3
 80022c2:	f000 f9d9 	bl	8002678 <screen_for_message_sending.1>
 80022c6:	e0f1      	b.n	80024ac <main+0xb10>
				}
	    	}
	    	else if (screen_main){
 80022c8:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	f000 80ed 	beq.w	80024ac <main+0xb10>
	    		if (key_pressed == 'B') {
 80022d2:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 80022d6:	2b42      	cmp	r3, #66	; 0x42
 80022d8:	d11f      	bne.n	800231a <main+0x97e>
						screen_main = false;
 80022da:	2300      	movs	r3, #0
 80022dc:	f887 32a6 	strb.w	r3, [r7, #678]	; 0x2a6
						screen_begin = true;
 80022e0:	2301      	movs	r3, #1
 80022e2:	f887 32a2 	strb.w	r3, [r7, #674]	; 0x2a2
						memset(buf, ' ', sizeof(buf) - 1);
 80022e6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80022ea:	2209      	movs	r2, #9
 80022ec:	2120      	movs	r1, #32
 80022ee:	4618      	mov	r0, r3
 80022f0:	f008 fb29 	bl	800a946 <memset>
						buf[0] = '\0';
 80022f4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80022f8:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
						pos = 0;
 8002300:	2300      	movs	r3, #0
 8002302:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						main_screen(cursor_on_phone - 1);
 8002306:	f897 32a7 	ldrb.w	r3, [r7, #679]	; 0x2a7
 800230a:	3b01      	subs	r3, #1
 800230c:	b2db      	uxtb	r3, r3
 800230e:	f507 728e 	add.w	r2, r7, #284	; 0x11c
 8002312:	4694      	mov	ip, r2
 8002314:	4618      	mov	r0, r3
 8002316:	f000 f905 	bl	8002524 <main_screen.2>
				}
				if (key_pressed == 'A' && screen_main) {
 800231a:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 800231e:	2b41      	cmp	r3, #65	; 0x41
 8002320:	d12f      	bne.n	8002382 <main+0x9e6>
 8002322:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 8002326:	2b00      	cmp	r3, #0
 8002328:	d02b      	beq.n	8002382 <main+0x9e6>
					if (is_call) {
 800232a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800232e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002332:	f893 3165 	ldrb.w	r3, [r3, #357]	; 0x165
 8002336:	2b00      	cmp	r3, #0
 8002338:	d01d      	beq.n	8002376 <main+0x9da>
						buf[0] = '\0';
 800233a:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 800233e:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 8002342:	2200      	movs	r2, #0
 8002344:	701a      	strb	r2, [r3, #0]
						pos = 0;
 8002346:	2300      	movs	r3, #0
 8002348:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
						LCD5110_refresh(&lcd1);
 800234c:	483c      	ldr	r0, [pc, #240]	; (8002440 <main+0xaa4>)
 800234e:	f7fe fbf9 	bl	8000b44 <LCD5110_refresh>
						LCD5110_rect_fill(&rect, 1, &lcd1);
 8002352:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002356:	4a3a      	ldr	r2, [pc, #232]	; (8002440 <main+0xaa4>)
 8002358:	2101      	movs	r1, #1
 800235a:	4618      	mov	r0, r3
 800235c:	f7fe fdcb 	bl	8000ef6 <LCD5110_rect_fill>
						LCD5110_set_cursor(0, 0, &lcd1);
 8002360:	4a37      	ldr	r2, [pc, #220]	; (8002440 <main+0xaa4>)
 8002362:	2100      	movs	r1, #0
 8002364:	2000      	movs	r0, #0
 8002366:	f7fe fbf9 	bl	8000b5c <LCD5110_set_cursor>
						init_screen();
 800236a:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800236e:	469c      	mov	ip, r3
 8002370:	f7ff fad6 	bl	8001920 <init_screen.3>
					if (is_call) {
 8002374:	e09a      	b.n	80024ac <main+0xb10>
					}
					else {
						call_screen();
 8002376:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 800237a:	469c      	mov	ip, r3
 800237c:	f000 f8a4 	bl	80024c8 <call_screen.4>
					if (is_call) {
 8002380:	e094      	b.n	80024ac <main+0xb10>
					}
				}
				else if (key_pressed == 'D' && screen_main)
 8002382:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002386:	2b44      	cmp	r3, #68	; 0x44
 8002388:	d123      	bne.n	80023d2 <main+0xa36>
 800238a:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01f      	beq.n	80023d2 <main+0xa36>
				{
					memset(buf, ' ', sizeof(buf) - 1);
 8002392:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002396:	2209      	movs	r2, #9
 8002398:	2120      	movs	r1, #32
 800239a:	4618      	mov	r0, r3
 800239c:	f008 fad3 	bl	800a946 <memset>
					buf[0] = '\0';
 80023a0:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80023a4:	f5a3 7304 	sub.w	r3, r3, #528	; 0x210
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
					pos = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
					LCD5110_refresh(&lcd1);
 80023b2:	4823      	ldr	r0, [pc, #140]	; (8002440 <main+0xaa4>)
 80023b4:	f7fe fbc6 	bl	8000b44 <LCD5110_refresh>
					LCD5110_rect_fill(&rect, 1, &lcd1);
 80023b8:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 80023bc:	4a20      	ldr	r2, [pc, #128]	; (8002440 <main+0xaa4>)
 80023be:	2101      	movs	r1, #1
 80023c0:	4618      	mov	r0, r3
 80023c2:	f7fe fd98 	bl	8000ef6 <LCD5110_rect_fill>
					LCD5110_set_cursor(0, 0, &lcd1);
 80023c6:	4a1e      	ldr	r2, [pc, #120]	; (8002440 <main+0xaa4>)
 80023c8:	2100      	movs	r1, #0
 80023ca:	2000      	movs	r0, #0
 80023cc:	f7fe fbc6 	bl	8000b5c <LCD5110_set_cursor>
 80023d0:	e06c      	b.n	80024ac <main+0xb10>
				}
				else if (key_pressed == 'C' && pos > 0 && screen_main)
 80023d2:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 80023d6:	2b43      	cmp	r3, #67	; 0x43
 80023d8:	d134      	bne.n	8002444 <main+0xaa8>
 80023da:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80023de:	2b00      	cmp	r3, #0
 80023e0:	dd30      	ble.n	8002444 <main+0xaa8>
 80023e2:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d02c      	beq.n	8002444 <main+0xaa8>
						{
							pos--;
 80023ea:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 80023ee:	3b01      	subs	r3, #1
 80023f0:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
							buf[pos] = '\0';
 80023f4:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 80023f8:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 80023fc:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002400:	4413      	add	r3, r2
 8002402:	2200      	movs	r2, #0
 8002404:	701a      	strb	r2, [r3, #0]

							LCD5110_refresh(&lcd1);
 8002406:	480e      	ldr	r0, [pc, #56]	; (8002440 <main+0xaa4>)
 8002408:	f7fe fb9c 	bl	8000b44 <LCD5110_refresh>
							LCD5110_rect_fill(&rect, 1, &lcd1);
 800240c:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8002410:	4a0b      	ldr	r2, [pc, #44]	; (8002440 <main+0xaa4>)
 8002412:	2101      	movs	r1, #1
 8002414:	4618      	mov	r0, r3
 8002416:	f7fe fd6e 	bl	8000ef6 <LCD5110_rect_fill>
							LCD5110_set_cursor(0, 0, &lcd1);
 800241a:	4a09      	ldr	r2, [pc, #36]	; (8002440 <main+0xaa4>)
 800241c:	2100      	movs	r1, #0
 800241e:	2000      	movs	r0, #0
 8002420:	f7fe fb9c 	bl	8000b5c <LCD5110_set_cursor>
							LCD5110_print(buf, 0, &lcd1);
 8002424:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002428:	4a05      	ldr	r2, [pc, #20]	; (8002440 <main+0xaa4>)
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe fbb8 	bl	8000ba2 <LCD5110_print>
 8002432:	e03b      	b.n	80024ac <main+0xb10>
 8002434:	40020c00 	.word	0x40020c00
 8002438:	0800b2a8 	.word	0x0800b2a8
 800243c:	2000050c 	.word	0x2000050c
 8002440:	2000028c 	.word	0x2000028c
						}
				else if (key_pressed >= '0' && key_pressed <= '9' && pos < sizeof(buf) && screen_main)
 8002444:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002448:	2b2f      	cmp	r3, #47	; 0x2f
 800244a:	d92f      	bls.n	80024ac <main+0xb10>
 800244c:	f897 3297 	ldrb.w	r3, [r7, #663]	; 0x297
 8002450:	2b39      	cmp	r3, #57	; 0x39
 8002452:	d82b      	bhi.n	80024ac <main+0xb10>
 8002454:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002458:	2b09      	cmp	r3, #9
 800245a:	d827      	bhi.n	80024ac <main+0xb10>
 800245c:	f897 32a6 	ldrb.w	r3, [r7, #678]	; 0x2a6
 8002460:	2b00      	cmp	r3, #0
 8002462:	d023      	beq.n	80024ac <main+0xb10>
				{
					buf[pos] = key_pressed;
 8002464:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002468:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800246c:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 8002470:	4413      	add	r3, r2
 8002472:	f897 2297 	ldrb.w	r2, [r7, #663]	; 0x297
 8002476:	701a      	strb	r2, [r3, #0]
					pos++;
 8002478:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800247c:	3301      	adds	r3, #1
 800247e:	f8c7 32ac 	str.w	r3, [r7, #684]	; 0x2ac
					buf[pos] = '\0';
 8002482:	f507 732c 	add.w	r3, r7, #688	; 0x2b0
 8002486:	f5a3 7204 	sub.w	r2, r3, #528	; 0x210
 800248a:	f8d7 32ac 	ldr.w	r3, [r7, #684]	; 0x2ac
 800248e:	4413      	add	r3, r2
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]

					LCD5110_set_cursor(0, 0, &lcd1);
 8002494:	4a0b      	ldr	r2, [pc, #44]	; (80024c4 <main+0xb28>)
 8002496:	2100      	movs	r1, #0
 8002498:	2000      	movs	r0, #0
 800249a:	f7fe fb5f 	bl	8000b5c <LCD5110_set_cursor>
					LCD5110_print(buf, 0, &lcd1);
 800249e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024a2:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <main+0xb28>)
 80024a4:	2100      	movs	r1, #0
 80024a6:	4618      	mov	r0, r3
 80024a8:	f7fe fb7b 	bl	8000ba2 <LCD5110_print>
				}
	    	}

	    }
	    LCD5110_refresh(&lcd1);
 80024ac:	4805      	ldr	r0, [pc, #20]	; (80024c4 <main+0xb28>)
 80024ae:	f7fe fb49 	bl	8000b44 <LCD5110_refresh>
	    HAL_Delay(1000);
 80024b2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80024b6:	f000 fc41 	bl	8002d3c <HAL_Delay>
	    LCD5110_refresh(&lcd1);
 80024ba:	4802      	ldr	r0, [pc, #8]	; (80024c4 <main+0xb28>)
 80024bc:	f7fe fb42 	bl	8000b44 <LCD5110_refresh>
	    key_pressed = keypad_scan();
 80024c0:	f7ff bbcd 	b.w	8001c5e <main+0x2c2>
 80024c4:	2000028c 	.word	0x2000028c

080024c8 <call_screen.4>:
    void call_screen() {
 80024c8:	b590      	push	{r4, r7, lr}
 80024ca:	b087      	sub	sp, #28
 80024cc:	af04      	add	r7, sp, #16
 80024ce:	4664      	mov	r4, ip
 80024d0:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 80024d4:	4811      	ldr	r0, [pc, #68]	; (800251c <call_screen.4+0x54>)
 80024d6:	f7fe fb53 	bl	8000b80 <LCD5110_clear_scr>
    	LCD5110_refresh(&lcd1);
 80024da:	4810      	ldr	r0, [pc, #64]	; (800251c <call_screen.4+0x54>)
 80024dc:	f7fe fb32 	bl	8000b44 <LCD5110_refresh>
    	LCD5110_drawBitmap(25, 1, call_image, 30, 30, 0, &lcd1.hw_conf);
 80024e0:	f104 02ed 	add.w	r2, r4, #237	; 0xed
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <call_screen.4+0x54>)
 80024e6:	9302      	str	r3, [sp, #8]
 80024e8:	2300      	movs	r3, #0
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	231e      	movs	r3, #30
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	231e      	movs	r3, #30
 80024f2:	2101      	movs	r1, #1
 80024f4:	2019      	movs	r0, #25
 80024f6:	f7fe feaa 	bl	800124e <LCD5110_drawBitmap>
    	LCD5110_set_cursor(10, 40, &lcd1);
 80024fa:	4a08      	ldr	r2, [pc, #32]	; (800251c <call_screen.4+0x54>)
 80024fc:	2128      	movs	r1, #40	; 0x28
 80024fe:	200a      	movs	r0, #10
 8002500:	f7fe fb2c 	bl	8000b5c <LCD5110_set_cursor>
    	LCD5110_print("A-end call", 0, &lcd1);
 8002504:	4a05      	ldr	r2, [pc, #20]	; (800251c <call_screen.4+0x54>)
 8002506:	2100      	movs	r1, #0
 8002508:	4805      	ldr	r0, [pc, #20]	; (8002520 <call_screen.4+0x58>)
 800250a:	f7fe fb4a 	bl	8000ba2 <LCD5110_print>
    	is_call = true;
 800250e:	2301      	movs	r3, #1
 8002510:	f884 3165 	strb.w	r3, [r4, #357]	; 0x165
    }
 8002514:	bf00      	nop
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}
 800251c:	2000028c 	.word	0x2000028c
 8002520:	0800b480 	.word	0x0800b480

08002524 <main_screen.2>:
    void main_screen(Screen type_screen) {
 8002524:	b590      	push	{r4, r7, lr}
 8002526:	b08f      	sub	sp, #60	; 0x3c
 8002528:	af04      	add	r7, sp, #16
 800252a:	4603      	mov	r3, r0
 800252c:	71fb      	strb	r3, [r7, #7]
 800252e:	4664      	mov	r4, ip
 8002530:	f8c7 c000 	str.w	ip, [r7]
    	LCD5110_clear_scr(&lcd1);
 8002534:	484b      	ldr	r0, [pc, #300]	; (8002664 <main_screen.2+0x140>)
 8002536:	f7fe fb23 	bl	8000b80 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 800253a:	484a      	ldr	r0, [pc, #296]	; (8002664 <main_screen.2+0x140>)
 800253c:	f7fe fb02 	bl	8000b44 <LCD5110_refresh>
		LCD5110_drawBitmap(8, 3, main_screen_image, 19, 19, 0, &lcd1.hw_conf);
 8002540:	f104 02b4 	add.w	r2, r4, #180	; 0xb4
 8002544:	4b47      	ldr	r3, [pc, #284]	; (8002664 <main_screen.2+0x140>)
 8002546:	9302      	str	r3, [sp, #8]
 8002548:	2300      	movs	r3, #0
 800254a:	9301      	str	r3, [sp, #4]
 800254c:	2313      	movs	r3, #19
 800254e:	9300      	str	r3, [sp, #0]
 8002550:	2313      	movs	r3, #19
 8002552:	2103      	movs	r1, #3
 8002554:	2008      	movs	r0, #8
 8002556:	f7fe fe7a 	bl	800124e <LCD5110_drawBitmap>
		rect_t rectbox_phone={6, 1, 23, 23};
 800255a:	4a43      	ldr	r2, [pc, #268]	; (8002668 <main_screen.2+0x144>)
 800255c:	f107 0320 	add.w	r3, r7, #32
 8002560:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002564:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_snake={49,1, 23, 23};
 8002568:	4a40      	ldr	r2, [pc, #256]	; (800266c <main_screen.2+0x148>)
 800256a:	f107 0318 	add.w	r3, r7, #24
 800256e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002572:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_message={6,23, 23, 23};
 8002576:	4a3e      	ldr	r2, [pc, #248]	; (8002670 <main_screen.2+0x14c>)
 8002578:	f107 0310 	add.w	r3, r7, #16
 800257c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002580:	e883 0003 	stmia.w	r3, {r0, r1}
		rect_t rectbox_message_history = {48, 23, 23, 23};
 8002584:	4a3b      	ldr	r2, [pc, #236]	; (8002674 <main_screen.2+0x150>)
 8002586:	f107 0308 	add.w	r3, r7, #8
 800258a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800258e:	e883 0003 	stmia.w	r3, {r0, r1}
		if (type_screen==0) {
 8002592:	79fb      	ldrb	r3, [r7, #7]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d107      	bne.n	80025a8 <main_screen.2+0x84>
			LCD5110_rect(&rectbox_phone, 1, &lcd1);
 8002598:	f107 0320 	add.w	r3, r7, #32
 800259c:	4a31      	ldr	r2, [pc, #196]	; (8002664 <main_screen.2+0x140>)
 800259e:	2101      	movs	r1, #1
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7fe fc96 	bl	8000ed2 <LCD5110_rect>
 80025a6:	e01c      	b.n	80025e2 <main_screen.2+0xbe>
		else if (type_screen==1) {
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d107      	bne.n	80025be <main_screen.2+0x9a>
			LCD5110_rect(&rectbox_snake, 1, &lcd1);
 80025ae:	f107 0318 	add.w	r3, r7, #24
 80025b2:	4a2c      	ldr	r2, [pc, #176]	; (8002664 <main_screen.2+0x140>)
 80025b4:	2101      	movs	r1, #1
 80025b6:	4618      	mov	r0, r3
 80025b8:	f7fe fc8b 	bl	8000ed2 <LCD5110_rect>
 80025bc:	e011      	b.n	80025e2 <main_screen.2+0xbe>
		else if (type_screen == 2) {
 80025be:	79fb      	ldrb	r3, [r7, #7]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d107      	bne.n	80025d4 <main_screen.2+0xb0>
			LCD5110_rect(&rectbox_message, 1, &lcd1);
 80025c4:	f107 0310 	add.w	r3, r7, #16
 80025c8:	4a26      	ldr	r2, [pc, #152]	; (8002664 <main_screen.2+0x140>)
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f7fe fc80 	bl	8000ed2 <LCD5110_rect>
 80025d2:	e006      	b.n	80025e2 <main_screen.2+0xbe>
			LCD5110_rect(&rectbox_message_history, 1, &lcd1);
 80025d4:	f107 0308 	add.w	r3, r7, #8
 80025d8:	4a22      	ldr	r2, [pc, #136]	; (8002664 <main_screen.2+0x140>)
 80025da:	2101      	movs	r1, #1
 80025dc:	4618      	mov	r0, r3
 80025de:	f7fe fc78 	bl	8000ed2 <LCD5110_rect>
		LCD5110_refresh(&lcd1);
 80025e2:	4820      	ldr	r0, [pc, #128]	; (8002664 <main_screen.2+0x140>)
 80025e4:	f7fe faae 	bl	8000b44 <LCD5110_refresh>
		LCD5110_set_cursor(50, 10, &lcd1);
 80025e8:	4a1e      	ldr	r2, [pc, #120]	; (8002664 <main_screen.2+0x140>)
 80025ea:	210a      	movs	r1, #10
 80025ec:	2032      	movs	r0, #50	; 0x32
 80025ee:	f7fe fab5 	bl	8000b5c <LCD5110_set_cursor>
		LCD5110_drawBitmap(50, 3, main_screen_snake, 19, 19, 0, &lcd1.hw_conf);
 80025f2:	f104 027b 	add.w	r2, r4, #123	; 0x7b
 80025f6:	4b1b      	ldr	r3, [pc, #108]	; (8002664 <main_screen.2+0x140>)
 80025f8:	9302      	str	r3, [sp, #8]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	2313      	movs	r3, #19
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	2313      	movs	r3, #19
 8002604:	2103      	movs	r1, #3
 8002606:	2032      	movs	r0, #50	; 0x32
 8002608:	f7fe fe21 	bl	800124e <LCD5110_drawBitmap>
		LCD5110_refresh(&lcd1);
 800260c:	4815      	ldr	r0, [pc, #84]	; (8002664 <main_screen.2+0x140>)
 800260e:	f7fe fa99 	bl	8000b44 <LCD5110_refresh>
		LCD5110_set_cursor(8, 28, &lcd1);
 8002612:	4a14      	ldr	r2, [pc, #80]	; (8002664 <main_screen.2+0x140>)
 8002614:	211c      	movs	r1, #28
 8002616:	2008      	movs	r0, #8
 8002618:	f7fe faa0 	bl	8000b5c <LCD5110_set_cursor>
		LCD5110_drawBitmap(8, 25, write_message, 19, 19, 0, &lcd1.hw_conf);
 800261c:	f104 0242 	add.w	r2, r4, #66	; 0x42
 8002620:	4b10      	ldr	r3, [pc, #64]	; (8002664 <main_screen.2+0x140>)
 8002622:	9302      	str	r3, [sp, #8]
 8002624:	2300      	movs	r3, #0
 8002626:	9301      	str	r3, [sp, #4]
 8002628:	2313      	movs	r3, #19
 800262a:	9300      	str	r3, [sp, #0]
 800262c:	2313      	movs	r3, #19
 800262e:	2119      	movs	r1, #25
 8002630:	2008      	movs	r0, #8
 8002632:	f7fe fe0c 	bl	800124e <LCD5110_drawBitmap>
		LCD5110_set_cursor(50, 28, &lcd1);
 8002636:	4a0b      	ldr	r2, [pc, #44]	; (8002664 <main_screen.2+0x140>)
 8002638:	211c      	movs	r1, #28
 800263a:	2032      	movs	r0, #50	; 0x32
 800263c:	f7fe fa8e 	bl	8000b5c <LCD5110_set_cursor>
		LCD5110_drawBitmap(50, 25, main_message, 19, 19, 0, &lcd1.hw_conf);
 8002640:	f104 0209 	add.w	r2, r4, #9
 8002644:	4b07      	ldr	r3, [pc, #28]	; (8002664 <main_screen.2+0x140>)
 8002646:	9302      	str	r3, [sp, #8]
 8002648:	2300      	movs	r3, #0
 800264a:	9301      	str	r3, [sp, #4]
 800264c:	2313      	movs	r3, #19
 800264e:	9300      	str	r3, [sp, #0]
 8002650:	2313      	movs	r3, #19
 8002652:	2119      	movs	r1, #25
 8002654:	2032      	movs	r0, #50	; 0x32
 8002656:	f7fe fdfa 	bl	800124e <LCD5110_drawBitmap>
    }
 800265a:	bf00      	nop
 800265c:	372c      	adds	r7, #44	; 0x2c
 800265e:	46bd      	mov	sp, r7
 8002660:	bd90      	pop	{r4, r7, pc}
 8002662:	bf00      	nop
 8002664:	2000028c 	.word	0x2000028c
 8002668:	0800b48c 	.word	0x0800b48c
 800266c:	0800b494 	.word	0x0800b494
 8002670:	0800b49c 	.word	0x0800b49c
 8002674:	0800b4a4 	.word	0x0800b4a4

08002678 <screen_for_message_sending.1>:
    void screen_for_message_sending() {
 8002678:	b590      	push	{r4, r7, lr}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	4664      	mov	r4, ip
 8002680:	f8c7 c004 	str.w	ip, [r7, #4]
    	LCD5110_clear_scr(&lcd1);
 8002684:	4818      	ldr	r0, [pc, #96]	; (80026e8 <screen_for_message_sending.1+0x70>)
 8002686:	f7fe fa7b 	bl	8000b80 <LCD5110_clear_scr>
		LCD5110_refresh(&lcd1);
 800268a:	4817      	ldr	r0, [pc, #92]	; (80026e8 <screen_for_message_sending.1+0x70>)
 800268c:	f7fe fa5a 	bl	8000b44 <LCD5110_refresh>
		LCD5110_rect(&rect, 1, &lcd1);
 8002690:	4623      	mov	r3, r4
 8002692:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <screen_for_message_sending.1+0x70>)
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f7fe fc1b 	bl	8000ed2 <LCD5110_rect>
		LCD5110_rect_fill(&rect, 1, &lcd1);
 800269c:	4623      	mov	r3, r4
 800269e:	4a12      	ldr	r2, [pc, #72]	; (80026e8 <screen_for_message_sending.1+0x70>)
 80026a0:	2101      	movs	r1, #1
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fc27 	bl	8000ef6 <LCD5110_rect_fill>
		LCD5110_set_cursor(10, 15, &lcd1);
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <screen_for_message_sending.1+0x70>)
 80026aa:	210f      	movs	r1, #15
 80026ac:	200a      	movs	r0, #10
 80026ae:	f7fe fa55 	bl	8000b5c <LCD5110_set_cursor>
		LCD5110_print("A-go to message", 0, &lcd1);
 80026b2:	4a0d      	ldr	r2, [pc, #52]	; (80026e8 <screen_for_message_sending.1+0x70>)
 80026b4:	2100      	movs	r1, #0
 80026b6:	480d      	ldr	r0, [pc, #52]	; (80026ec <screen_for_message_sending.1+0x74>)
 80026b8:	f7fe fa73 	bl	8000ba2 <LCD5110_print>
		LCD5110_set_cursor(10, 35, &lcd1);
 80026bc:	4a0a      	ldr	r2, [pc, #40]	; (80026e8 <screen_for_message_sending.1+0x70>)
 80026be:	2123      	movs	r1, #35	; 0x23
 80026c0:	200a      	movs	r0, #10
 80026c2:	f7fe fa4b 	bl	8000b5c <LCD5110_set_cursor>
		LCD5110_print("B-back", 0, &lcd1);
 80026c6:	4a08      	ldr	r2, [pc, #32]	; (80026e8 <screen_for_message_sending.1+0x70>)
 80026c8:	2100      	movs	r1, #0
 80026ca:	4809      	ldr	r0, [pc, #36]	; (80026f0 <screen_for_message_sending.1+0x78>)
 80026cc:	f7fe fa69 	bl	8000ba2 <LCD5110_print>
		LCD5110_set_cursor(0, 0, &lcd1);
 80026d0:	4a05      	ldr	r2, [pc, #20]	; (80026e8 <screen_for_message_sending.1+0x70>)
 80026d2:	2100      	movs	r1, #0
 80026d4:	2000      	movs	r0, #0
 80026d6:	f7fe fa41 	bl	8000b5c <LCD5110_set_cursor>
		is_message = false;
 80026da:	2300      	movs	r3, #0
 80026dc:	7223      	strb	r3, [r4, #8]
    }
 80026de:	bf00      	nop
 80026e0:	370c      	adds	r7, #12
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd90      	pop	{r4, r7, pc}
 80026e6:	bf00      	nop
 80026e8:	2000028c 	.word	0x2000028c
 80026ec:	0800b4ac 	.word	0x0800b4ac
 80026f0:	0800b290 	.word	0x0800b290

080026f4 <type_message_scren.0>:
    void type_message_scren() {
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b085      	sub	sp, #20
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	4664      	mov	r4, ip
 80026fc:	f8c7 c004 	str.w	ip, [r7, #4]
        	LCD5110_clear_scr(&lcd1);
 8002700:	480e      	ldr	r0, [pc, #56]	; (800273c <type_message_scren.0+0x48>)
 8002702:	f7fe fa3d 	bl	8000b80 <LCD5110_clear_scr>
        	LCD5110_refresh(&lcd1);
 8002706:	480d      	ldr	r0, [pc, #52]	; (800273c <type_message_scren.0+0x48>)
 8002708:	f7fe fa1c 	bl	8000b44 <LCD5110_refresh>
        	rect_t rectbox_phone={1, 1, 60, 30};
 800270c:	4a0c      	ldr	r2, [pc, #48]	; (8002740 <type_message_scren.0+0x4c>)
 800270e:	f107 0308 	add.w	r3, r7, #8
 8002712:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002716:	e883 0003 	stmia.w	r3, {r0, r1}
        	LCD5110_set_cursor(5, 40, &lcd1);
 800271a:	4a08      	ldr	r2, [pc, #32]	; (800273c <type_message_scren.0+0x48>)
 800271c:	2128      	movs	r1, #40	; 0x28
 800271e:	2005      	movs	r0, #5
 8002720:	f7fe fa1c 	bl	8000b5c <LCD5110_set_cursor>
        	LCD5110_print("A-send", 0, &lcd1);
 8002724:	4a05      	ldr	r2, [pc, #20]	; (800273c <type_message_scren.0+0x48>)
 8002726:	2100      	movs	r1, #0
 8002728:	4806      	ldr	r0, [pc, #24]	; (8002744 <type_message_scren.0+0x50>)
 800272a:	f7fe fa3a 	bl	8000ba2 <LCD5110_print>
        	is_message = true;
 800272e:	2301      	movs	r3, #1
 8002730:	7223      	strb	r3, [r4, #8]
        }
 8002732:	bf00      	nop
 8002734:	3714      	adds	r7, #20
 8002736:	46bd      	mov	sp, r7
 8002738:	bd90      	pop	{r4, r7, pc}
 800273a:	bf00      	nop
 800273c:	2000028c 	.word	0x2000028c
 8002740:	0800b4c4 	.word	0x0800b4c4
 8002744:	0800b4bc 	.word	0x0800b4bc

08002748 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b094      	sub	sp, #80	; 0x50
 800274c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800274e:	f107 0320 	add.w	r3, r7, #32
 8002752:	2230      	movs	r2, #48	; 0x30
 8002754:	2100      	movs	r1, #0
 8002756:	4618      	mov	r0, r3
 8002758:	f008 f8f5 	bl	800a946 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800275c:	f107 030c 	add.w	r3, r7, #12
 8002760:	2200      	movs	r2, #0
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	609a      	str	r2, [r3, #8]
 8002768:	60da      	str	r2, [r3, #12]
 800276a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800276c:	2300      	movs	r3, #0
 800276e:	60bb      	str	r3, [r7, #8]
 8002770:	4b27      	ldr	r3, [pc, #156]	; (8002810 <SystemClock_Config+0xc8>)
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	4a26      	ldr	r2, [pc, #152]	; (8002810 <SystemClock_Config+0xc8>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800277a:	6413      	str	r3, [r2, #64]	; 0x40
 800277c:	4b24      	ldr	r3, [pc, #144]	; (8002810 <SystemClock_Config+0xc8>)
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002788:	2300      	movs	r3, #0
 800278a:	607b      	str	r3, [r7, #4]
 800278c:	4b21      	ldr	r3, [pc, #132]	; (8002814 <SystemClock_Config+0xcc>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4a20      	ldr	r2, [pc, #128]	; (8002814 <SystemClock_Config+0xcc>)
 8002792:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002796:	6013      	str	r3, [r2, #0]
 8002798:	4b1e      	ldr	r3, [pc, #120]	; (8002814 <SystemClock_Config+0xcc>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80027a0:	607b      	str	r3, [r7, #4]
 80027a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80027a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ae:	2302      	movs	r3, #2
 80027b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80027b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80027b8:	2304      	movs	r3, #4
 80027ba:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80027bc:	23a8      	movs	r3, #168	; 0xa8
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80027c0:	2304      	movs	r3, #4
 80027c2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80027c4:	2307      	movs	r3, #7
 80027c6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027c8:	f107 0320 	add.w	r3, r7, #32
 80027cc:	4618      	mov	r0, r3
 80027ce:	f002 fe0f 	bl	80053f0 <HAL_RCC_OscConfig>
 80027d2:	4603      	mov	r3, r0
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d001      	beq.n	80027dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80027d8:	f000 f83e 	bl	8002858 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80027dc:	230f      	movs	r3, #15
 80027de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80027e0:	2302      	movs	r3, #2
 80027e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80027e4:	2300      	movs	r3, #0
 80027e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80027e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80027ee:	2300      	movs	r3, #0
 80027f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80027f2:	f107 030c 	add.w	r3, r7, #12
 80027f6:	2102      	movs	r1, #2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f003 f871 	bl	80058e0 <HAL_RCC_ClockConfig>
 80027fe:	4603      	mov	r3, r0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d001      	beq.n	8002808 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8002804:	f000 f828 	bl	8002858 <Error_Handler>
  }
}
 8002808:	bf00      	nop
 800280a:	3750      	adds	r7, #80	; 0x50
 800280c:	46bd      	mov	sp, r7
 800280e:	bd80      	pop	{r7, pc}
 8002810:	40023800 	.word	0x40023800
 8002814:	40007000 	.word	0x40007000

08002818 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b086      	sub	sp, #24
 800281c:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800281e:	463b      	mov	r3, r7
 8002820:	2200      	movs	r2, #0
 8002822:	601a      	str	r2, [r3, #0]
 8002824:	605a      	str	r2, [r3, #4]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	611a      	str	r2, [r3, #16]
 800282c:	615a      	str	r2, [r3, #20]

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800282e:	2301      	movs	r3, #1
 8002830:	603b      	str	r3, [r7, #0]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 200;
 8002832:	23c8      	movs	r3, #200	; 0xc8
 8002834:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLLI2S.PLLI2SM = 5;
 8002836:	2305      	movs	r3, #5
 8002838:	607b      	str	r3, [r7, #4]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 800283a:	2302      	movs	r3, #2
 800283c:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800283e:	463b      	mov	r3, r7
 8002840:	4618      	mov	r0, r3
 8002842:	f003 fa6d 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8002846:	4603      	mov	r3, r0
 8002848:	2b00      	cmp	r3, #0
 800284a:	d001      	beq.n	8002850 <PeriphCommonClock_Config+0x38>
  {
    Error_Handler();
 800284c:	f000 f804 	bl	8002858 <Error_Handler>
  }
}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800285c:	b672      	cpsid	i
}
 800285e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002860:	e7fe      	b.n	8002860 <Error_Handler+0x8>
	...

08002864 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8002868:	4b17      	ldr	r3, [pc, #92]	; (80028c8 <MX_SPI1_Init+0x64>)
 800286a:	4a18      	ldr	r2, [pc, #96]	; (80028cc <MX_SPI1_Init+0x68>)
 800286c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800286e:	4b16      	ldr	r3, [pc, #88]	; (80028c8 <MX_SPI1_Init+0x64>)
 8002870:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002874:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002876:	4b14      	ldr	r3, [pc, #80]	; (80028c8 <MX_SPI1_Init+0x64>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800287c:	4b12      	ldr	r3, [pc, #72]	; (80028c8 <MX_SPI1_Init+0x64>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002882:	4b11      	ldr	r3, [pc, #68]	; (80028c8 <MX_SPI1_Init+0x64>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002888:	4b0f      	ldr	r3, [pc, #60]	; (80028c8 <MX_SPI1_Init+0x64>)
 800288a:	2200      	movs	r2, #0
 800288c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800288e:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <MX_SPI1_Init+0x64>)
 8002890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002894:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <MX_SPI1_Init+0x64>)
 8002898:	2210      	movs	r2, #16
 800289a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800289c:	4b0a      	ldr	r3, [pc, #40]	; (80028c8 <MX_SPI1_Init+0x64>)
 800289e:	2200      	movs	r2, #0
 80028a0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80028a2:	4b09      	ldr	r3, [pc, #36]	; (80028c8 <MX_SPI1_Init+0x64>)
 80028a4:	2200      	movs	r2, #0
 80028a6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80028a8:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <MX_SPI1_Init+0x64>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80028ae:	4b06      	ldr	r3, [pc, #24]	; (80028c8 <MX_SPI1_Init+0x64>)
 80028b0:	220a      	movs	r2, #10
 80028b2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80028b4:	4804      	ldr	r0, [pc, #16]	; (80028c8 <MX_SPI1_Init+0x64>)
 80028b6:	f003 fb83 	bl	8005fc0 <HAL_SPI_Init>
 80028ba:	4603      	mov	r3, r0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d001      	beq.n	80028c4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80028c0:	f7ff ffca 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	200004b0 	.word	0x200004b0
 80028cc:	40013000 	.word	0x40013000

080028d0 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b08a      	sub	sp, #40	; 0x28
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028d8:	f107 0314 	add.w	r3, r7, #20
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	605a      	str	r2, [r3, #4]
 80028e2:	609a      	str	r2, [r3, #8]
 80028e4:	60da      	str	r2, [r3, #12]
 80028e6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a19      	ldr	r2, [pc, #100]	; (8002954 <HAL_SPI_MspInit+0x84>)
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d12b      	bne.n	800294a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	613b      	str	r3, [r7, #16]
 80028f6:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_SPI_MspInit+0x88>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028fa:	4a17      	ldr	r2, [pc, #92]	; (8002958 <HAL_SPI_MspInit+0x88>)
 80028fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002900:	6453      	str	r3, [r2, #68]	; 0x44
 8002902:	4b15      	ldr	r3, [pc, #84]	; (8002958 <HAL_SPI_MspInit+0x88>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002906:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800290a:	613b      	str	r3, [r7, #16]
 800290c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	60fb      	str	r3, [r7, #12]
 8002912:	4b11      	ldr	r3, [pc, #68]	; (8002958 <HAL_SPI_MspInit+0x88>)
 8002914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002916:	4a10      	ldr	r2, [pc, #64]	; (8002958 <HAL_SPI_MspInit+0x88>)
 8002918:	f043 0301 	orr.w	r3, r3, #1
 800291c:	6313      	str	r3, [r2, #48]	; 0x30
 800291e:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <HAL_SPI_MspInit+0x88>)
 8002920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	60fb      	str	r3, [r7, #12]
 8002928:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 800292a:	23e0      	movs	r3, #224	; 0xe0
 800292c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292e:	2302      	movs	r3, #2
 8002930:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002932:	2300      	movs	r3, #0
 8002934:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002936:	2303      	movs	r3, #3
 8002938:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800293a:	2305      	movs	r3, #5
 800293c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293e:	f107 0314 	add.w	r3, r7, #20
 8002942:	4619      	mov	r1, r3
 8002944:	4805      	ldr	r0, [pc, #20]	; (800295c <HAL_SPI_MspInit+0x8c>)
 8002946:	f000 fb2f 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 800294a:	bf00      	nop
 800294c:	3728      	adds	r7, #40	; 0x28
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}
 8002952:	bf00      	nop
 8002954:	40013000 	.word	0x40013000
 8002958:	40023800 	.word	0x40023800
 800295c:	40020000 	.word	0x40020000

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	607b      	str	r3, [r7, #4]
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_MspInit+0x4c>)
 800296c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800296e:	4a0f      	ldr	r2, [pc, #60]	; (80029ac <HAL_MspInit+0x4c>)
 8002970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002974:	6453      	str	r3, [r2, #68]	; 0x44
 8002976:	4b0d      	ldr	r3, [pc, #52]	; (80029ac <HAL_MspInit+0x4c>)
 8002978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800297a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800297e:	607b      	str	r3, [r7, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002982:	2300      	movs	r3, #0
 8002984:	603b      	str	r3, [r7, #0]
 8002986:	4b09      	ldr	r3, [pc, #36]	; (80029ac <HAL_MspInit+0x4c>)
 8002988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298a:	4a08      	ldr	r2, [pc, #32]	; (80029ac <HAL_MspInit+0x4c>)
 800298c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002990:	6413      	str	r3, [r2, #64]	; 0x40
 8002992:	4b06      	ldr	r3, [pc, #24]	; (80029ac <HAL_MspInit+0x4c>)
 8002994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800299a:	603b      	str	r3, [r7, #0]
 800299c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800299e:	2007      	movs	r0, #7
 80029a0:	f000 fac0 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029a4:	bf00      	nop
 80029a6:	3708      	adds	r7, #8
 80029a8:	46bd      	mov	sp, r7
 80029aa:	bd80      	pop	{r7, pc}
 80029ac:	40023800 	.word	0x40023800

080029b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029b4:	e7fe      	b.n	80029b4 <NMI_Handler+0x4>

080029b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029b6:	b480      	push	{r7}
 80029b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ba:	e7fe      	b.n	80029ba <HardFault_Handler+0x4>

080029bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c0:	e7fe      	b.n	80029c0 <MemManage_Handler+0x4>

080029c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c2:	b480      	push	{r7}
 80029c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029c6:	e7fe      	b.n	80029c6 <BusFault_Handler+0x4>

080029c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029cc:	e7fe      	b.n	80029cc <UsageFault_Handler+0x4>

080029ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029ce:	b480      	push	{r7}
 80029d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr

080029dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e0:	bf00      	nop
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ea:	b480      	push	{r7}
 80029ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029ee:	bf00      	nop
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr

080029f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80029fc:	f000 f97e 	bl	8002cfc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002a08:	2001      	movs	r0, #1
 8002a0a:	f000 fc83 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8002a16:	2002      	movs	r0, #2
 8002a18:	f000 fc7c 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8002a1c:	bf00      	nop
 8002a1e:	bd80      	pop	{r7, pc}

08002a20 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8002a24:	2004      	movs	r0, #4
 8002a26:	f000 fc75 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}

08002a2e <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8002a2e:	b580      	push	{r7, lr}
 8002a30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8002a32:	2008      	movs	r0, #8
 8002a34:	f000 fc6e 	bl	8003314 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8002a38:	bf00      	nop
 8002a3a:	bd80      	pop	{r7, pc}

08002a3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8002a40:	4802      	ldr	r0, [pc, #8]	; (8002a4c <OTG_FS_IRQHandler+0x10>)
 8002a42:	f001 fbbf 	bl	80041c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8002a46:	bf00      	nop
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	20000a34 	.word	0x20000a34

08002a50 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002a58:	4a14      	ldr	r2, [pc, #80]	; (8002aac <_sbrk+0x5c>)
 8002a5a:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <_sbrk+0x60>)
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002a64:	4b13      	ldr	r3, [pc, #76]	; (8002ab4 <_sbrk+0x64>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d102      	bne.n	8002a72 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002a6c:	4b11      	ldr	r3, [pc, #68]	; (8002ab4 <_sbrk+0x64>)
 8002a6e:	4a12      	ldr	r2, [pc, #72]	; (8002ab8 <_sbrk+0x68>)
 8002a70:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002a72:	4b10      	ldr	r3, [pc, #64]	; (8002ab4 <_sbrk+0x64>)
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4413      	add	r3, r2
 8002a7a:	693a      	ldr	r2, [r7, #16]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d207      	bcs.n	8002a90 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002a80:	f007 ff6a 	bl	800a958 <__errno>
 8002a84:	4603      	mov	r3, r0
 8002a86:	220c      	movs	r2, #12
 8002a88:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a8a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a8e:	e009      	b.n	8002aa4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a90:	4b08      	ldr	r3, [pc, #32]	; (8002ab4 <_sbrk+0x64>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a96:	4b07      	ldr	r3, [pc, #28]	; (8002ab4 <_sbrk+0x64>)
 8002a98:	681a      	ldr	r2, [r3, #0]
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	4a05      	ldr	r2, [pc, #20]	; (8002ab4 <_sbrk+0x64>)
 8002aa0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
}
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	3718      	adds	r7, #24
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	20020000 	.word	0x20020000
 8002ab0:	00000400 	.word	0x00000400
 8002ab4:	20000508 	.word	0x20000508
 8002ab8:	200010a0 	.word	0x200010a0

08002abc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ac0:	4b06      	ldr	r3, [pc, #24]	; (8002adc <SystemInit+0x20>)
 8002ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ac6:	4a05      	ldr	r2, [pc, #20]	; (8002adc <SystemInit+0x20>)
 8002ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ad0:	bf00      	nop
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002ae4:	4b11      	ldr	r3, [pc, #68]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002ae6:	4a12      	ldr	r2, [pc, #72]	; (8002b30 <MX_USART1_UART_Init+0x50>)
 8002ae8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002aea:	4b10      	ldr	r3, [pc, #64]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002aec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002af0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002af2:	4b0e      	ldr	r3, [pc, #56]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002af4:	2200      	movs	r2, #0
 8002af6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002af8:	4b0c      	ldr	r3, [pc, #48]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002afe:	4b0b      	ldr	r3, [pc, #44]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002b04:	4b09      	ldr	r3, [pc, #36]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b06:	220c      	movs	r2, #12
 8002b08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002b0a:	4b08      	ldr	r3, [pc, #32]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002b10:	4b06      	ldr	r3, [pc, #24]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002b16:	4805      	ldr	r0, [pc, #20]	; (8002b2c <MX_USART1_UART_Init+0x4c>)
 8002b18:	f003 fce2 	bl	80064e0 <HAL_UART_Init>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d001      	beq.n	8002b26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002b22:	f7ff fe99 	bl	8002858 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	2000050c 	.word	0x2000050c
 8002b30:	40011000 	.word	0x40011000

08002b34 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b08a      	sub	sp, #40	; 0x28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b3c:	f107 0314 	add.w	r3, r7, #20
 8002b40:	2200      	movs	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
 8002b44:	605a      	str	r2, [r3, #4]
 8002b46:	609a      	str	r2, [r3, #8]
 8002b48:	60da      	str	r2, [r3, #12]
 8002b4a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	4a28      	ldr	r2, [pc, #160]	; (8002bf4 <HAL_UART_MspInit+0xc0>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d14a      	bne.n	8002bec <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b56:	2300      	movs	r3, #0
 8002b58:	613b      	str	r3, [r7, #16]
 8002b5a:	4b27      	ldr	r3, [pc, #156]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5e:	4a26      	ldr	r2, [pc, #152]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b60:	f043 0310 	orr.w	r3, r3, #16
 8002b64:	6453      	str	r3, [r2, #68]	; 0x44
 8002b66:	4b24      	ldr	r3, [pc, #144]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	613b      	str	r3, [r7, #16]
 8002b70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b72:	2300      	movs	r3, #0
 8002b74:	60fb      	str	r3, [r7, #12]
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a1f      	ldr	r2, [pc, #124]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b7c:	f043 0301 	orr.w	r3, r3, #1
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b1d      	ldr	r3, [pc, #116]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0301 	and.w	r3, r3, #1
 8002b8a:	60fb      	str	r3, [r7, #12]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	4b19      	ldr	r3, [pc, #100]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b96:	4a18      	ldr	r2, [pc, #96]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002b98:	f043 0302 	orr.w	r3, r3, #2
 8002b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9e:	4b16      	ldr	r3, [pc, #88]	; (8002bf8 <HAL_UART_MspInit+0xc4>)
 8002ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba2:	f003 0302 	and.w	r3, r3, #2
 8002ba6:	60bb      	str	r3, [r7, #8]
 8002ba8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002baa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bbc:	2307      	movs	r3, #7
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	480d      	ldr	r0, [pc, #52]	; (8002bfc <HAL_UART_MspInit+0xc8>)
 8002bc8:	f000 f9ee 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bcc:	2380      	movs	r3, #128	; 0x80
 8002bce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002bdc:	2307      	movs	r3, #7
 8002bde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002be0:	f107 0314 	add.w	r3, r7, #20
 8002be4:	4619      	mov	r1, r3
 8002be6:	4806      	ldr	r0, [pc, #24]	; (8002c00 <HAL_UART_MspInit+0xcc>)
 8002be8:	f000 f9de 	bl	8002fa8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	; 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40020000 	.word	0x40020000
 8002c00:	40020400 	.word	0x40020400

08002c04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002c3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c08:	480d      	ldr	r0, [pc, #52]	; (8002c40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002c0a:	490e      	ldr	r1, [pc, #56]	; (8002c44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002c0c:	4a0e      	ldr	r2, [pc, #56]	; (8002c48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c10:	e002      	b.n	8002c18 <LoopCopyDataInit>

08002c12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c16:	3304      	adds	r3, #4

08002c18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c1c:	d3f9      	bcc.n	8002c12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c1e:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002c20:	4c0b      	ldr	r4, [pc, #44]	; (8002c50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002c22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c24:	e001      	b.n	8002c2a <LoopFillZerobss>

08002c26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c28:	3204      	adds	r2, #4

08002c2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c2c:	d3fb      	bcc.n	8002c26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002c2e:	f7ff ff45 	bl	8002abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002c32:	f007 fe97 	bl	800a964 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c36:	f7fe feb1 	bl	800199c <main>
  bx  lr    
 8002c3a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002c3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c44:	2000018c 	.word	0x2000018c
  ldr r2, =_sidata
 8002c48:	0800bc80 	.word	0x0800bc80
  ldr r2, =_sbss
 8002c4c:	2000018c 	.word	0x2000018c
  ldr r4, =_ebss
 8002c50:	2000109c 	.word	0x2000109c

08002c54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c54:	e7fe      	b.n	8002c54 <ADC_IRQHandler>
	...

08002c58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c5c:	4b0e      	ldr	r3, [pc, #56]	; (8002c98 <HAL_Init+0x40>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a0d      	ldr	r2, [pc, #52]	; (8002c98 <HAL_Init+0x40>)
 8002c62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c68:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <HAL_Init+0x40>)
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	4a0a      	ldr	r2, [pc, #40]	; (8002c98 <HAL_Init+0x40>)
 8002c6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002c72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c74:	4b08      	ldr	r3, [pc, #32]	; (8002c98 <HAL_Init+0x40>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a07      	ldr	r2, [pc, #28]	; (8002c98 <HAL_Init+0x40>)
 8002c7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c80:	2003      	movs	r0, #3
 8002c82:	f000 f94f 	bl	8002f24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c86:	2000      	movs	r0, #0
 8002c88:	f000 f808 	bl	8002c9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002c8c:	f7ff fe68 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	40023c00 	.word	0x40023c00

08002c9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b082      	sub	sp, #8
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ca4:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_InitTick+0x54>)
 8002ca6:	681a      	ldr	r2, [r3, #0]
 8002ca8:	4b12      	ldr	r3, [pc, #72]	; (8002cf4 <HAL_InitTick+0x58>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	4619      	mov	r1, r3
 8002cae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002cb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 f967 	bl	8002f8e <HAL_SYSTICK_Config>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d001      	beq.n	8002cca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cc6:	2301      	movs	r3, #1
 8002cc8:	e00e      	b.n	8002ce8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2b0f      	cmp	r3, #15
 8002cce:	d80a      	bhi.n	8002ce6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	6879      	ldr	r1, [r7, #4]
 8002cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cd8:	f000 f92f 	bl	8002f3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cdc:	4a06      	ldr	r2, [pc, #24]	; (8002cf8 <HAL_InitTick+0x5c>)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	e000      	b.n	8002ce8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
}
 8002ce8:	4618      	mov	r0, r3
 8002cea:	3708      	adds	r7, #8
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	20000020 	.word	0x20000020
 8002cf4:	20000028 	.word	0x20000028
 8002cf8:	20000024 	.word	0x20000024

08002cfc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d00:	4b06      	ldr	r3, [pc, #24]	; (8002d1c <HAL_IncTick+0x20>)
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	4b06      	ldr	r3, [pc, #24]	; (8002d20 <HAL_IncTick+0x24>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	4a04      	ldr	r2, [pc, #16]	; (8002d20 <HAL_IncTick+0x24>)
 8002d0e:	6013      	str	r3, [r2, #0]
}
 8002d10:	bf00      	nop
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr
 8002d1a:	bf00      	nop
 8002d1c:	20000028 	.word	0x20000028
 8002d20:	20000550 	.word	0x20000550

08002d24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return uwTick;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_GetTick+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000550 	.word	0x20000550

08002d3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d44:	f7ff ffee 	bl	8002d24 <HAL_GetTick>
 8002d48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002d54:	d005      	beq.n	8002d62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d56:	4b0a      	ldr	r3, [pc, #40]	; (8002d80 <HAL_Delay+0x44>)
 8002d58:	781b      	ldrb	r3, [r3, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	4413      	add	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d62:	bf00      	nop
 8002d64:	f7ff ffde 	bl	8002d24 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d8f7      	bhi.n	8002d64 <HAL_Delay+0x28>
  {
  }
}
 8002d74:	bf00      	nop
 8002d76:	bf00      	nop
 8002d78:	3710      	adds	r7, #16
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	20000028 	.word	0x20000028

08002d84 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d84:	b480      	push	{r7}
 8002d86:	b085      	sub	sp, #20
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f003 0307 	and.w	r3, r3, #7
 8002d92:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d94:	4b0c      	ldr	r3, [pc, #48]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d9a:	68ba      	ldr	r2, [r7, #8]
 8002d9c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002da0:	4013      	ands	r3, r2
 8002da2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002db0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002db4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db6:	4a04      	ldr	r2, [pc, #16]	; (8002dc8 <__NVIC_SetPriorityGrouping+0x44>)
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	60d3      	str	r3, [r2, #12]
}
 8002dbc:	bf00      	nop
 8002dbe:	3714      	adds	r7, #20
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr
 8002dc8:	e000ed00 	.word	0xe000ed00

08002dcc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dd0:	4b04      	ldr	r3, [pc, #16]	; (8002de4 <__NVIC_GetPriorityGrouping+0x18>)
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	0a1b      	lsrs	r3, r3, #8
 8002dd6:	f003 0307 	and.w	r3, r3, #7
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000ed00 	.word	0xe000ed00

08002de8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	db0b      	blt.n	8002e12 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dfa:	79fb      	ldrb	r3, [r7, #7]
 8002dfc:	f003 021f 	and.w	r2, r3, #31
 8002e00:	4907      	ldr	r1, [pc, #28]	; (8002e20 <__NVIC_EnableIRQ+0x38>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	095b      	lsrs	r3, r3, #5
 8002e08:	2001      	movs	r0, #1
 8002e0a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000e100 	.word	0xe000e100

08002e24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4603      	mov	r3, r0
 8002e2c:	6039      	str	r1, [r7, #0]
 8002e2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	db0a      	blt.n	8002e4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	490c      	ldr	r1, [pc, #48]	; (8002e70 <__NVIC_SetPriority+0x4c>)
 8002e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e42:	0112      	lsls	r2, r2, #4
 8002e44:	b2d2      	uxtb	r2, r2
 8002e46:	440b      	add	r3, r1
 8002e48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e4c:	e00a      	b.n	8002e64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	b2da      	uxtb	r2, r3
 8002e52:	4908      	ldr	r1, [pc, #32]	; (8002e74 <__NVIC_SetPriority+0x50>)
 8002e54:	79fb      	ldrb	r3, [r7, #7]
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	3b04      	subs	r3, #4
 8002e5c:	0112      	lsls	r2, r2, #4
 8002e5e:	b2d2      	uxtb	r2, r2
 8002e60:	440b      	add	r3, r1
 8002e62:	761a      	strb	r2, [r3, #24]
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000e100 	.word	0xe000e100
 8002e74:	e000ed00 	.word	0xe000ed00

08002e78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b089      	sub	sp, #36	; 0x24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	60f8      	str	r0, [r7, #12]
 8002e80:	60b9      	str	r1, [r7, #8]
 8002e82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f003 0307 	and.w	r3, r3, #7
 8002e8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	f1c3 0307 	rsb	r3, r3, #7
 8002e92:	2b04      	cmp	r3, #4
 8002e94:	bf28      	it	cs
 8002e96:	2304      	movcs	r3, #4
 8002e98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3304      	adds	r3, #4
 8002e9e:	2b06      	cmp	r3, #6
 8002ea0:	d902      	bls.n	8002ea8 <NVIC_EncodePriority+0x30>
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3b03      	subs	r3, #3
 8002ea6:	e000      	b.n	8002eaa <NVIC_EncodePriority+0x32>
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002eb0:	69bb      	ldr	r3, [r7, #24]
 8002eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb6:	43da      	mvns	r2, r3
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	401a      	ands	r2, r3
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ec0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8002eca:	43d9      	mvns	r1, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	4313      	orrs	r3, r2
         );
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3724      	adds	r7, #36	; 0x24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
	...

08002ee0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	3b01      	subs	r3, #1
 8002eec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002ef0:	d301      	bcc.n	8002ef6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e00f      	b.n	8002f16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ef6:	4a0a      	ldr	r2, [pc, #40]	; (8002f20 <SysTick_Config+0x40>)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	3b01      	subs	r3, #1
 8002efc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002efe:	210f      	movs	r1, #15
 8002f00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002f04:	f7ff ff8e 	bl	8002e24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <SysTick_Config+0x40>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f0e:	4b04      	ldr	r3, [pc, #16]	; (8002f20 <SysTick_Config+0x40>)
 8002f10:	2207      	movs	r2, #7
 8002f12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f14:	2300      	movs	r3, #0
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3708      	adds	r7, #8
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}
 8002f1e:	bf00      	nop
 8002f20:	e000e010 	.word	0xe000e010

08002f24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f24:	b580      	push	{r7, lr}
 8002f26:	b082      	sub	sp, #8
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f7ff ff29 	bl	8002d84 <__NVIC_SetPriorityGrouping>
}
 8002f32:	bf00      	nop
 8002f34:	3708      	adds	r7, #8
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}

08002f3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f3a:	b580      	push	{r7, lr}
 8002f3c:	b086      	sub	sp, #24
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	4603      	mov	r3, r0
 8002f42:	60b9      	str	r1, [r7, #8]
 8002f44:	607a      	str	r2, [r7, #4]
 8002f46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f4c:	f7ff ff3e 	bl	8002dcc <__NVIC_GetPriorityGrouping>
 8002f50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f52:	687a      	ldr	r2, [r7, #4]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	6978      	ldr	r0, [r7, #20]
 8002f58:	f7ff ff8e 	bl	8002e78 <NVIC_EncodePriority>
 8002f5c:	4602      	mov	r2, r0
 8002f5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f62:	4611      	mov	r1, r2
 8002f64:	4618      	mov	r0, r3
 8002f66:	f7ff ff5d 	bl	8002e24 <__NVIC_SetPriority>
}
 8002f6a:	bf00      	nop
 8002f6c:	3718      	adds	r7, #24
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}

08002f72 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f72:	b580      	push	{r7, lr}
 8002f74:	b082      	sub	sp, #8
 8002f76:	af00      	add	r7, sp, #0
 8002f78:	4603      	mov	r3, r0
 8002f7a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7ff ff31 	bl	8002de8 <__NVIC_EnableIRQ>
}
 8002f86:	bf00      	nop
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f8e:	b580      	push	{r7, lr}
 8002f90:	b082      	sub	sp, #8
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff ffa2 	bl	8002ee0 <SysTick_Config>
 8002f9c:	4603      	mov	r3, r0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3708      	adds	r7, #8
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}
	...

08002fa8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	b089      	sub	sp, #36	; 0x24
 8002fac:	af00      	add	r7, sp, #0
 8002fae:	6078      	str	r0, [r7, #4]
 8002fb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	61fb      	str	r3, [r7, #28]
 8002fc2:	e159      	b.n	8003278 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	697a      	ldr	r2, [r7, #20]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002fd8:	693a      	ldr	r2, [r7, #16]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8148 	bne.w	8003272 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f003 0303 	and.w	r3, r3, #3
 8002fea:	2b01      	cmp	r3, #1
 8002fec:	d005      	beq.n	8002ffa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d130      	bne.n	800305c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	005b      	lsls	r3, r3, #1
 8003004:	2203      	movs	r2, #3
 8003006:	fa02 f303 	lsl.w	r3, r2, r3
 800300a:	43db      	mvns	r3, r3
 800300c:	69ba      	ldr	r2, [r7, #24]
 800300e:	4013      	ands	r3, r2
 8003010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	68da      	ldr	r2, [r3, #12]
 8003016:	69fb      	ldr	r3, [r7, #28]
 8003018:	005b      	lsls	r3, r3, #1
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	69ba      	ldr	r2, [r7, #24]
 8003020:	4313      	orrs	r3, r2
 8003022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	685b      	ldr	r3, [r3, #4]
 800302e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003030:	2201      	movs	r2, #1
 8003032:	69fb      	ldr	r3, [r7, #28]
 8003034:	fa02 f303 	lsl.w	r3, r2, r3
 8003038:	43db      	mvns	r3, r3
 800303a:	69ba      	ldr	r2, [r7, #24]
 800303c:	4013      	ands	r3, r2
 800303e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	091b      	lsrs	r3, r3, #4
 8003046:	f003 0201 	and.w	r2, r3, #1
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f003 0303 	and.w	r3, r3, #3
 8003064:	2b03      	cmp	r3, #3
 8003066:	d017      	beq.n	8003098 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	68db      	ldr	r3, [r3, #12]
 800306c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	2203      	movs	r2, #3
 8003074:	fa02 f303 	lsl.w	r3, r2, r3
 8003078:	43db      	mvns	r3, r3
 800307a:	69ba      	ldr	r2, [r7, #24]
 800307c:	4013      	ands	r3, r2
 800307e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	005b      	lsls	r3, r3, #1
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	4313      	orrs	r3, r2
 8003090:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	69ba      	ldr	r2, [r7, #24]
 8003096:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 0303 	and.w	r3, r3, #3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d123      	bne.n	80030ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	08da      	lsrs	r2, r3, #3
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	3208      	adds	r2, #8
 80030ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	220f      	movs	r2, #15
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	43db      	mvns	r3, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4013      	ands	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	fa02 f303 	lsl.w	r3, r2, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80030de:	69fb      	ldr	r3, [r7, #28]
 80030e0:	08da      	lsrs	r2, r3, #3
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	3208      	adds	r2, #8
 80030e6:	69b9      	ldr	r1, [r7, #24]
 80030e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80030f2:	69fb      	ldr	r3, [r7, #28]
 80030f4:	005b      	lsls	r3, r3, #1
 80030f6:	2203      	movs	r2, #3
 80030f8:	fa02 f303 	lsl.w	r3, r2, r3
 80030fc:	43db      	mvns	r3, r3
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	4013      	ands	r3, r2
 8003102:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f003 0203 	and.w	r2, r3, #3
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	005b      	lsls	r3, r3, #1
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	4313      	orrs	r3, r2
 8003118:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	69ba      	ldr	r2, [r7, #24]
 800311e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	685b      	ldr	r3, [r3, #4]
 8003124:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003128:	2b00      	cmp	r3, #0
 800312a:	f000 80a2 	beq.w	8003272 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	4b57      	ldr	r3, [pc, #348]	; (8003290 <HAL_GPIO_Init+0x2e8>)
 8003134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003136:	4a56      	ldr	r2, [pc, #344]	; (8003290 <HAL_GPIO_Init+0x2e8>)
 8003138:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800313c:	6453      	str	r3, [r2, #68]	; 0x44
 800313e:	4b54      	ldr	r3, [pc, #336]	; (8003290 <HAL_GPIO_Init+0x2e8>)
 8003140:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003142:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003146:	60fb      	str	r3, [r7, #12]
 8003148:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800314a:	4a52      	ldr	r2, [pc, #328]	; (8003294 <HAL_GPIO_Init+0x2ec>)
 800314c:	69fb      	ldr	r3, [r7, #28]
 800314e:	089b      	lsrs	r3, r3, #2
 8003150:	3302      	adds	r3, #2
 8003152:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003156:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	f003 0303 	and.w	r3, r3, #3
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	220f      	movs	r2, #15
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43db      	mvns	r3, r3
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	4013      	ands	r3, r2
 800316c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	4a49      	ldr	r2, [pc, #292]	; (8003298 <HAL_GPIO_Init+0x2f0>)
 8003172:	4293      	cmp	r3, r2
 8003174:	d019      	beq.n	80031aa <HAL_GPIO_Init+0x202>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	4a48      	ldr	r2, [pc, #288]	; (800329c <HAL_GPIO_Init+0x2f4>)
 800317a:	4293      	cmp	r3, r2
 800317c:	d013      	beq.n	80031a6 <HAL_GPIO_Init+0x1fe>
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	4a47      	ldr	r2, [pc, #284]	; (80032a0 <HAL_GPIO_Init+0x2f8>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d00d      	beq.n	80031a2 <HAL_GPIO_Init+0x1fa>
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	4a46      	ldr	r2, [pc, #280]	; (80032a4 <HAL_GPIO_Init+0x2fc>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d007      	beq.n	800319e <HAL_GPIO_Init+0x1f6>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	4a45      	ldr	r2, [pc, #276]	; (80032a8 <HAL_GPIO_Init+0x300>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d101      	bne.n	800319a <HAL_GPIO_Init+0x1f2>
 8003196:	2304      	movs	r3, #4
 8003198:	e008      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319a:	2307      	movs	r3, #7
 800319c:	e006      	b.n	80031ac <HAL_GPIO_Init+0x204>
 800319e:	2303      	movs	r3, #3
 80031a0:	e004      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a2:	2302      	movs	r3, #2
 80031a4:	e002      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <HAL_GPIO_Init+0x204>
 80031aa:	2300      	movs	r3, #0
 80031ac:	69fa      	ldr	r2, [r7, #28]
 80031ae:	f002 0203 	and.w	r2, r2, #3
 80031b2:	0092      	lsls	r2, r2, #2
 80031b4:	4093      	lsls	r3, r2
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80031bc:	4935      	ldr	r1, [pc, #212]	; (8003294 <HAL_GPIO_Init+0x2ec>)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	089b      	lsrs	r3, r3, #2
 80031c2:	3302      	adds	r3, #2
 80031c4:	69ba      	ldr	r2, [r7, #24]
 80031c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031ca:	4b38      	ldr	r3, [pc, #224]	; (80032ac <HAL_GPIO_Init+0x304>)
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031d0:	693b      	ldr	r3, [r7, #16]
 80031d2:	43db      	mvns	r3, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4013      	ands	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d003      	beq.n	80031ee <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80031e6:	69ba      	ldr	r2, [r7, #24]
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031ee:	4a2f      	ldr	r2, [pc, #188]	; (80032ac <HAL_GPIO_Init+0x304>)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031f4:	4b2d      	ldr	r3, [pc, #180]	; (80032ac <HAL_GPIO_Init+0x304>)
 80031f6:	68db      	ldr	r3, [r3, #12]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	43db      	mvns	r3, r3
 80031fe:	69ba      	ldr	r2, [r7, #24]
 8003200:	4013      	ands	r3, r2
 8003202:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d003      	beq.n	8003218 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003210:	69ba      	ldr	r2, [r7, #24]
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4313      	orrs	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003218:	4a24      	ldr	r2, [pc, #144]	; (80032ac <HAL_GPIO_Init+0x304>)
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800321e:	4b23      	ldr	r3, [pc, #140]	; (80032ac <HAL_GPIO_Init+0x304>)
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	43db      	mvns	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4013      	ands	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003236:	2b00      	cmp	r3, #0
 8003238:	d003      	beq.n	8003242 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800323a:	69ba      	ldr	r2, [r7, #24]
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4313      	orrs	r3, r2
 8003240:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003242:	4a1a      	ldr	r2, [pc, #104]	; (80032ac <HAL_GPIO_Init+0x304>)
 8003244:	69bb      	ldr	r3, [r7, #24]
 8003246:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003248:	4b18      	ldr	r3, [pc, #96]	; (80032ac <HAL_GPIO_Init+0x304>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	43db      	mvns	r3, r3
 8003252:	69ba      	ldr	r2, [r7, #24]
 8003254:	4013      	ands	r3, r2
 8003256:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4313      	orrs	r3, r2
 800326a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800326c:	4a0f      	ldr	r2, [pc, #60]	; (80032ac <HAL_GPIO_Init+0x304>)
 800326e:	69bb      	ldr	r3, [r7, #24]
 8003270:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	3301      	adds	r3, #1
 8003276:	61fb      	str	r3, [r7, #28]
 8003278:	69fb      	ldr	r3, [r7, #28]
 800327a:	2b0f      	cmp	r3, #15
 800327c:	f67f aea2 	bls.w	8002fc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003280:	bf00      	nop
 8003282:	bf00      	nop
 8003284:	3724      	adds	r7, #36	; 0x24
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr
 800328e:	bf00      	nop
 8003290:	40023800 	.word	0x40023800
 8003294:	40013800 	.word	0x40013800
 8003298:	40020000 	.word	0x40020000
 800329c:	40020400 	.word	0x40020400
 80032a0:	40020800 	.word	0x40020800
 80032a4:	40020c00 	.word	0x40020c00
 80032a8:	40021000 	.word	0x40021000
 80032ac:	40013c00 	.word	0x40013c00

080032b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	460b      	mov	r3, r1
 80032ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	691a      	ldr	r2, [r3, #16]
 80032c0:	887b      	ldrh	r3, [r7, #2]
 80032c2:	4013      	ands	r3, r2
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d002      	beq.n	80032ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
 80032cc:	e001      	b.n	80032d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ce:	2300      	movs	r3, #0
 80032d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b083      	sub	sp, #12
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	460b      	mov	r3, r1
 80032ea:	807b      	strh	r3, [r7, #2]
 80032ec:	4613      	mov	r3, r2
 80032ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80032f0:	787b      	ldrb	r3, [r7, #1]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d003      	beq.n	80032fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032f6:	887a      	ldrh	r2, [r7, #2]
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80032fc:	e003      	b.n	8003306 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80032fe:	887b      	ldrh	r3, [r7, #2]
 8003300:	041a      	lsls	r2, r3, #16
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	619a      	str	r2, [r3, #24]
}
 8003306:	bf00      	nop
 8003308:	370c      	adds	r7, #12
 800330a:	46bd      	mov	sp, r7
 800330c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003310:	4770      	bx	lr
	...

08003314 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b082      	sub	sp, #8
 8003318:	af00      	add	r7, sp, #0
 800331a:	4603      	mov	r3, r0
 800331c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003320:	695a      	ldr	r2, [r3, #20]
 8003322:	88fb      	ldrh	r3, [r7, #6]
 8003324:	4013      	ands	r3, r2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d006      	beq.n	8003338 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800332a:	4a05      	ldr	r2, [pc, #20]	; (8003340 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800332c:	88fb      	ldrh	r3, [r7, #6]
 800332e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003330:	88fb      	ldrh	r3, [r7, #6]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 f806 	bl	8003344 <HAL_GPIO_EXTI_Callback>
  }
}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	40013c00 	.word	0x40013c00

08003344 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	4603      	mov	r3, r0
 800334c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800334e:	bf00      	nop
 8003350:	370c      	adds	r7, #12
 8003352:	46bd      	mov	sp, r7
 8003354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003358:	4770      	bx	lr
	...

0800335c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b084      	sub	sp, #16
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d101      	bne.n	800336e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e12b      	b.n	80035c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003374:	b2db      	uxtb	r3, r3
 8003376:	2b00      	cmp	r3, #0
 8003378:	d106      	bne.n	8003388 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f7fd fa6a 	bl	800085c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2224      	movs	r2, #36	; 0x24
 800338c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	681a      	ldr	r2, [r3, #0]
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f022 0201 	bic.w	r2, r2, #1
 800339e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	681a      	ldr	r2, [r3, #0]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033c0:	f002 fc86 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 80033c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	4a81      	ldr	r2, [pc, #516]	; (80035d0 <HAL_I2C_Init+0x274>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d807      	bhi.n	80033e0 <HAL_I2C_Init+0x84>
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	4a80      	ldr	r2, [pc, #512]	; (80035d4 <HAL_I2C_Init+0x278>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	bf94      	ite	ls
 80033d8:	2301      	movls	r3, #1
 80033da:	2300      	movhi	r3, #0
 80033dc:	b2db      	uxtb	r3, r3
 80033de:	e006      	b.n	80033ee <HAL_I2C_Init+0x92>
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	4a7d      	ldr	r2, [pc, #500]	; (80035d8 <HAL_I2C_Init+0x27c>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	bf94      	ite	ls
 80033e8:	2301      	movls	r3, #1
 80033ea:	2300      	movhi	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033f2:	2301      	movs	r3, #1
 80033f4:	e0e7      	b.n	80035c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a78      	ldr	r2, [pc, #480]	; (80035dc <HAL_I2C_Init+0x280>)
 80033fa:	fba2 2303 	umull	r2, r3, r2, r3
 80033fe:	0c9b      	lsrs	r3, r3, #18
 8003400:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	6a1b      	ldr	r3, [r3, #32]
 800341c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	4a6a      	ldr	r2, [pc, #424]	; (80035d0 <HAL_I2C_Init+0x274>)
 8003426:	4293      	cmp	r3, r2
 8003428:	d802      	bhi.n	8003430 <HAL_I2C_Init+0xd4>
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	3301      	adds	r3, #1
 800342e:	e009      	b.n	8003444 <HAL_I2C_Init+0xe8>
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003436:	fb02 f303 	mul.w	r3, r2, r3
 800343a:	4a69      	ldr	r2, [pc, #420]	; (80035e0 <HAL_I2C_Init+0x284>)
 800343c:	fba2 2303 	umull	r2, r3, r2, r3
 8003440:	099b      	lsrs	r3, r3, #6
 8003442:	3301      	adds	r3, #1
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	6812      	ldr	r2, [r2, #0]
 8003448:	430b      	orrs	r3, r1
 800344a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003456:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	495c      	ldr	r1, [pc, #368]	; (80035d0 <HAL_I2C_Init+0x274>)
 8003460:	428b      	cmp	r3, r1
 8003462:	d819      	bhi.n	8003498 <HAL_I2C_Init+0x13c>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1e59      	subs	r1, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	685b      	ldr	r3, [r3, #4]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003478:	400b      	ands	r3, r1
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_I2C_Init+0x138>
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	1e59      	subs	r1, r3, #1
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	005b      	lsls	r3, r3, #1
 8003488:	fbb1 f3f3 	udiv	r3, r1, r3
 800348c:	3301      	adds	r3, #1
 800348e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003492:	e051      	b.n	8003538 <HAL_I2C_Init+0x1dc>
 8003494:	2304      	movs	r3, #4
 8003496:	e04f      	b.n	8003538 <HAL_I2C_Init+0x1dc>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d111      	bne.n	80034c4 <HAL_I2C_Init+0x168>
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	1e58      	subs	r0, r3, #1
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6859      	ldr	r1, [r3, #4]
 80034a8:	460b      	mov	r3, r1
 80034aa:	005b      	lsls	r3, r3, #1
 80034ac:	440b      	add	r3, r1
 80034ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80034b2:	3301      	adds	r3, #1
 80034b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	e012      	b.n	80034ea <HAL_I2C_Init+0x18e>
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	1e58      	subs	r0, r3, #1
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6859      	ldr	r1, [r3, #4]
 80034cc:	460b      	mov	r3, r1
 80034ce:	009b      	lsls	r3, r3, #2
 80034d0:	440b      	add	r3, r1
 80034d2:	0099      	lsls	r1, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80034da:	3301      	adds	r3, #1
 80034dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	bf0c      	ite	eq
 80034e4:	2301      	moveq	r3, #1
 80034e6:	2300      	movne	r3, #0
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d001      	beq.n	80034f2 <HAL_I2C_Init+0x196>
 80034ee:	2301      	movs	r3, #1
 80034f0:	e022      	b.n	8003538 <HAL_I2C_Init+0x1dc>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d10e      	bne.n	8003518 <HAL_I2C_Init+0x1bc>
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	1e58      	subs	r0, r3, #1
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6859      	ldr	r1, [r3, #4]
 8003502:	460b      	mov	r3, r1
 8003504:	005b      	lsls	r3, r3, #1
 8003506:	440b      	add	r3, r1
 8003508:	fbb0 f3f3 	udiv	r3, r0, r3
 800350c:	3301      	adds	r3, #1
 800350e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003512:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003516:	e00f      	b.n	8003538 <HAL_I2C_Init+0x1dc>
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1e58      	subs	r0, r3, #1
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6859      	ldr	r1, [r3, #4]
 8003520:	460b      	mov	r3, r1
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	440b      	add	r3, r1
 8003526:	0099      	lsls	r1, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	fbb0 f3f3 	udiv	r3, r0, r3
 800352e:	3301      	adds	r3, #1
 8003530:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	6809      	ldr	r1, [r1, #0]
 800353c:	4313      	orrs	r3, r2
 800353e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69da      	ldr	r2, [r3, #28]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6a1b      	ldr	r3, [r3, #32]
 8003552:	431a      	orrs	r2, r3
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	430a      	orrs	r2, r1
 800355a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003566:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	6911      	ldr	r1, [r2, #16]
 800356e:	687a      	ldr	r2, [r7, #4]
 8003570:	68d2      	ldr	r2, [r2, #12]
 8003572:	4311      	orrs	r1, r2
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	6812      	ldr	r2, [r2, #0]
 8003578:	430b      	orrs	r3, r1
 800357a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	695a      	ldr	r2, [r3, #20]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	699b      	ldr	r3, [r3, #24]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	430a      	orrs	r2, r1
 8003596:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f042 0201 	orr.w	r2, r2, #1
 80035a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2220      	movs	r2, #32
 80035b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	000186a0 	.word	0x000186a0
 80035d4:	001e847f 	.word	0x001e847f
 80035d8:	003d08ff 	.word	0x003d08ff
 80035dc:	431bde83 	.word	0x431bde83
 80035e0:	10624dd3 	.word	0x10624dd3

080035e4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b088      	sub	sp, #32
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d101      	bne.n	80035f6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80035f2:	2301      	movs	r3, #1
 80035f4:	e128      	b.n	8003848 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2200      	movs	r2, #0
 8003606:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a90      	ldr	r2, [pc, #576]	; (8003850 <HAL_I2S_Init+0x26c>)
 800360e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f7fd f9c9 	bl	80009a8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2202      	movs	r2, #2
 800361a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	69db      	ldr	r3, [r3, #28]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	6812      	ldr	r2, [r2, #0]
 8003628:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 800362c:	f023 030f 	bic.w	r3, r3, #15
 8003630:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	2202      	movs	r2, #2
 8003638:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	695b      	ldr	r3, [r3, #20]
 800363e:	2b02      	cmp	r3, #2
 8003640:	d060      	beq.n	8003704 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d102      	bne.n	8003650 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800364a:	2310      	movs	r3, #16
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	e001      	b.n	8003654 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003650:	2320      	movs	r3, #32
 8003652:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	689b      	ldr	r3, [r3, #8]
 8003658:	2b20      	cmp	r3, #32
 800365a:	d802      	bhi.n	8003662 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8003662:	2001      	movs	r0, #1
 8003664:	f002 fc4c 	bl	8005f00 <HAL_RCCEx_GetPeriphCLKFreq>
 8003668:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003672:	d125      	bne.n	80036c0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d010      	beq.n	800369e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800367c:	697b      	ldr	r3, [r7, #20]
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	68fa      	ldr	r2, [r7, #12]
 8003682:	fbb2 f2f3 	udiv	r2, r2, r3
 8003686:	4613      	mov	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	4413      	add	r3, r2
 800368c:	005b      	lsls	r3, r3, #1
 800368e:	461a      	mov	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	695b      	ldr	r3, [r3, #20]
 8003694:	fbb2 f3f3 	udiv	r3, r2, r3
 8003698:	3305      	adds	r3, #5
 800369a:	613b      	str	r3, [r7, #16]
 800369c:	e01f      	b.n	80036de <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	00db      	lsls	r3, r3, #3
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036a8:	4613      	mov	r3, r2
 80036aa:	009b      	lsls	r3, r3, #2
 80036ac:	4413      	add	r3, r2
 80036ae:	005b      	lsls	r3, r3, #1
 80036b0:	461a      	mov	r2, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036ba:	3305      	adds	r3, #5
 80036bc:	613b      	str	r3, [r7, #16]
 80036be:	e00e      	b.n	80036de <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80036c0:	68fa      	ldr	r2, [r7, #12]
 80036c2:	697b      	ldr	r3, [r7, #20]
 80036c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80036c8:	4613      	mov	r3, r2
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	4413      	add	r3, r2
 80036ce:	005b      	lsls	r3, r3, #1
 80036d0:	461a      	mov	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	695b      	ldr	r3, [r3, #20]
 80036d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80036da:	3305      	adds	r3, #5
 80036dc:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	4a5c      	ldr	r2, [pc, #368]	; (8003854 <HAL_I2S_Init+0x270>)
 80036e2:	fba2 2303 	umull	r2, r3, r2, r3
 80036e6:	08db      	lsrs	r3, r3, #3
 80036e8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	f003 0301 	and.w	r3, r3, #1
 80036f0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80036f2:	693a      	ldr	r2, [r7, #16]
 80036f4:	69bb      	ldr	r3, [r7, #24]
 80036f6:	1ad3      	subs	r3, r2, r3
 80036f8:	085b      	lsrs	r3, r3, #1
 80036fa:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80036fc:	69bb      	ldr	r3, [r7, #24]
 80036fe:	021b      	lsls	r3, r3, #8
 8003700:	61bb      	str	r3, [r7, #24]
 8003702:	e003      	b.n	800370c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8003704:	2302      	movs	r3, #2
 8003706:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8003708:	2300      	movs	r3, #0
 800370a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800370c:	69fb      	ldr	r3, [r7, #28]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d902      	bls.n	8003718 <HAL_I2S_Init+0x134>
 8003712:	69fb      	ldr	r3, [r7, #28]
 8003714:	2bff      	cmp	r3, #255	; 0xff
 8003716:	d907      	bls.n	8003728 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800371c:	f043 0210 	orr.w	r2, r3, #16
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e08f      	b.n	8003848 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691a      	ldr	r2, [r3, #16]
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	ea42 0103 	orr.w	r1, r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69fa      	ldr	r2, [r7, #28]
 8003738:	430a      	orrs	r2, r1
 800373a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003746:	f023 030f 	bic.w	r3, r3, #15
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	6851      	ldr	r1, [r2, #4]
 800374e:	687a      	ldr	r2, [r7, #4]
 8003750:	6892      	ldr	r2, [r2, #8]
 8003752:	4311      	orrs	r1, r2
 8003754:	687a      	ldr	r2, [r7, #4]
 8003756:	68d2      	ldr	r2, [r2, #12]
 8003758:	4311      	orrs	r1, r2
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	6992      	ldr	r2, [r2, #24]
 800375e:	430a      	orrs	r2, r1
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800376a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6a1b      	ldr	r3, [r3, #32]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d161      	bne.n	8003838 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a38      	ldr	r2, [pc, #224]	; (8003858 <HAL_I2S_Init+0x274>)
 8003778:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a37      	ldr	r2, [pc, #220]	; (800385c <HAL_I2S_Init+0x278>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d101      	bne.n	8003788 <HAL_I2S_Init+0x1a4>
 8003784:	4b36      	ldr	r3, [pc, #216]	; (8003860 <HAL_I2S_Init+0x27c>)
 8003786:	e001      	b.n	800378c <HAL_I2S_Init+0x1a8>
 8003788:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800378c:	69db      	ldr	r3, [r3, #28]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	6812      	ldr	r2, [r2, #0]
 8003792:	4932      	ldr	r1, [pc, #200]	; (800385c <HAL_I2S_Init+0x278>)
 8003794:	428a      	cmp	r2, r1
 8003796:	d101      	bne.n	800379c <HAL_I2S_Init+0x1b8>
 8003798:	4a31      	ldr	r2, [pc, #196]	; (8003860 <HAL_I2S_Init+0x27c>)
 800379a:	e001      	b.n	80037a0 <HAL_I2S_Init+0x1bc>
 800379c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 80037a0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80037a4:	f023 030f 	bic.w	r3, r3, #15
 80037a8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a2b      	ldr	r2, [pc, #172]	; (800385c <HAL_I2S_Init+0x278>)
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d101      	bne.n	80037b8 <HAL_I2S_Init+0x1d4>
 80037b4:	4b2a      	ldr	r3, [pc, #168]	; (8003860 <HAL_I2S_Init+0x27c>)
 80037b6:	e001      	b.n	80037bc <HAL_I2S_Init+0x1d8>
 80037b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037bc:	2202      	movs	r2, #2
 80037be:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4a25      	ldr	r2, [pc, #148]	; (800385c <HAL_I2S_Init+0x278>)
 80037c6:	4293      	cmp	r3, r2
 80037c8:	d101      	bne.n	80037ce <HAL_I2S_Init+0x1ea>
 80037ca:	4b25      	ldr	r3, [pc, #148]	; (8003860 <HAL_I2S_Init+0x27c>)
 80037cc:	e001      	b.n	80037d2 <HAL_I2S_Init+0x1ee>
 80037ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80037de:	d003      	beq.n	80037e8 <HAL_I2S_Init+0x204>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d103      	bne.n	80037f0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80037e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037ec:	613b      	str	r3, [r7, #16]
 80037ee:	e001      	b.n	80037f4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80037f0:	2300      	movs	r3, #0
 80037f2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80037fe:	4313      	orrs	r3, r2
 8003800:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003808:	4313      	orrs	r3, r2
 800380a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	699b      	ldr	r3, [r3, #24]
 8003810:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003812:	4313      	orrs	r3, r2
 8003814:	b29a      	uxth	r2, r3
 8003816:	897b      	ldrh	r3, [r7, #10]
 8003818:	4313      	orrs	r3, r2
 800381a:	b29b      	uxth	r3, r3
 800381c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003820:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a0d      	ldr	r2, [pc, #52]	; (800385c <HAL_I2S_Init+0x278>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d101      	bne.n	8003830 <HAL_I2S_Init+0x24c>
 800382c:	4b0c      	ldr	r3, [pc, #48]	; (8003860 <HAL_I2S_Init+0x27c>)
 800382e:	e001      	b.n	8003834 <HAL_I2S_Init+0x250>
 8003830:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003834:	897a      	ldrh	r2, [r7, #10]
 8003836:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2201      	movs	r2, #1
 8003842:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3720      	adds	r7, #32
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	0800395b 	.word	0x0800395b
 8003854:	cccccccd 	.word	0xcccccccd
 8003858:	08003a71 	.word	0x08003a71
 800385c:	40003800 	.word	0x40003800
 8003860:	40003400 	.word	0x40003400

08003864 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800386c:	bf00      	nop
 800386e:	370c      	adds	r7, #12
 8003870:	46bd      	mov	sp, r7
 8003872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003876:	4770      	bx	lr

08003878 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388a:	4770      	bx	lr

0800388c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800388c:	b480      	push	{r7}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003894:	bf00      	nop
 8003896:	370c      	adds	r7, #12
 8003898:	46bd      	mov	sp, r7
 800389a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389e:	4770      	bx	lr

080038a0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ac:	881a      	ldrh	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038b8:	1c9a      	adds	r2, r3, #2
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038c2:	b29b      	uxth	r3, r3
 80038c4:	3b01      	subs	r3, #1
 80038c6:	b29a      	uxth	r2, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d0:	b29b      	uxth	r3, r3
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d10e      	bne.n	80038f4 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	685a      	ldr	r2, [r3, #4]
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038e4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	2201      	movs	r2, #1
 80038ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7ff ffb8 	bl	8003864 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80038f4:	bf00      	nop
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b082      	sub	sp, #8
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68da      	ldr	r2, [r3, #12]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800390e:	b292      	uxth	r2, r2
 8003910:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003916:	1c9a      	adds	r2, r3, #2
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b29a      	uxth	r2, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800392e:	b29b      	uxth	r3, r3
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10e      	bne.n	8003952 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	685a      	ldr	r2, [r3, #4]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003942:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800394c:	6878      	ldr	r0, [r7, #4]
 800394e:	f7ff ff93 	bl	8003878 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b086      	sub	sp, #24
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b04      	cmp	r3, #4
 8003974:	d13a      	bne.n	80039ec <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	f003 0301 	and.w	r3, r3, #1
 800397c:	2b01      	cmp	r3, #1
 800397e:	d109      	bne.n	8003994 <I2S_IRQHandler+0x3a>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398a:	2b40      	cmp	r3, #64	; 0x40
 800398c:	d102      	bne.n	8003994 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800398e:	6878      	ldr	r0, [r7, #4]
 8003990:	f7ff ffb4 	bl	80038fc <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399a:	2b40      	cmp	r3, #64	; 0x40
 800399c:	d126      	bne.n	80039ec <I2S_IRQHandler+0x92>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	d11f      	bne.n	80039ec <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	685a      	ldr	r2, [r3, #4]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039ba:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039bc:	2300      	movs	r3, #0
 80039be:	613b      	str	r3, [r7, #16]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68db      	ldr	r3, [r3, #12]
 80039c6:	613b      	str	r3, [r7, #16]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	689b      	ldr	r3, [r3, #8]
 80039ce:	613b      	str	r3, [r7, #16]
 80039d0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2201      	movs	r2, #1
 80039d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	f043 0202 	orr.w	r2, r3, #2
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80039e6:	6878      	ldr	r0, [r7, #4]
 80039e8:	f7ff ff50 	bl	800388c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b03      	cmp	r3, #3
 80039f6:	d136      	bne.n	8003a66 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	f003 0302 	and.w	r3, r3, #2
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d109      	bne.n	8003a16 <I2S_IRQHandler+0xbc>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0c:	2b80      	cmp	r3, #128	; 0x80
 8003a0e:	d102      	bne.n	8003a16 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff ff45 	bl	80038a0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f003 0308 	and.w	r3, r3, #8
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d122      	bne.n	8003a66 <I2S_IRQHandler+0x10c>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b20      	cmp	r3, #32
 8003a2c:	d11b      	bne.n	8003a66 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a3c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	60fb      	str	r3, [r7, #12]
 8003a4a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a58:	f043 0204 	orr.w	r2, r3, #4
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a60:	6878      	ldr	r0, [r7, #4]
 8003a62:	f7ff ff13 	bl	800388c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003a66:	bf00      	nop
 8003a68:	3718      	adds	r7, #24
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd80      	pop	{r7, pc}
	...

08003a70 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a92      	ldr	r2, [pc, #584]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d101      	bne.n	8003a8e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003a8a:	4b92      	ldr	r3, [pc, #584]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a8c:	e001      	b.n	8003a92 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003a8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a92:	689b      	ldr	r3, [r3, #8]
 8003a94:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a8b      	ldr	r2, [pc, #556]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d101      	bne.n	8003aac <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003aa8:	4b8a      	ldr	r3, [pc, #552]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003aaa:	e001      	b.n	8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003aac:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abc:	d004      	beq.n	8003ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	685b      	ldr	r3, [r3, #4]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	f040 8099 	bne.w	8003bfa <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	f003 0302 	and.w	r3, r3, #2
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d107      	bne.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003ad2:	697b      	ldr	r3, [r7, #20]
 8003ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d002      	beq.n	8003ae2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003adc:	6878      	ldr	r0, [r7, #4]
 8003ade:	f000 f925 	bl	8003d2c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	f003 0301 	and.w	r3, r3, #1
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d107      	bne.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d002      	beq.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f000 f9c8 	bl	8003e8c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b02:	2b40      	cmp	r3, #64	; 0x40
 8003b04:	d13a      	bne.n	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003b06:	693b      	ldr	r3, [r7, #16]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d035      	beq.n	8003b7c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a6e      	ldr	r2, [pc, #440]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d101      	bne.n	8003b1e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003b1a:	4b6e      	ldr	r3, [pc, #440]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b1c:	e001      	b.n	8003b22 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003b1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4969      	ldr	r1, [pc, #420]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b2a:	428b      	cmp	r3, r1
 8003b2c:	d101      	bne.n	8003b32 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003b2e:	4b69      	ldr	r3, [pc, #420]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b30:	e001      	b.n	8003b36 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003b32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b36:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b3a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685a      	ldr	r2, [r3, #4]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b4a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	68db      	ldr	r3, [r3, #12]
 8003b56:	60fb      	str	r3, [r7, #12]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	60fb      	str	r3, [r7, #12]
 8003b60:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2201      	movs	r2, #1
 8003b66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b6e:	f043 0202 	orr.w	r2, r3, #2
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f7ff fe88 	bl	800388c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	f003 0308 	and.w	r3, r3, #8
 8003b82:	2b08      	cmp	r3, #8
 8003b84:	f040 80c3 	bne.w	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	f003 0320 	and.w	r3, r3, #32
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	f000 80bd 	beq.w	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	685a      	ldr	r2, [r3, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ba2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a49      	ldr	r2, [pc, #292]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d101      	bne.n	8003bb2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003bae:	4b49      	ldr	r3, [pc, #292]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bb0:	e001      	b.n	8003bb6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003bb2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bb6:	685a      	ldr	r2, [r3, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4944      	ldr	r1, [pc, #272]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003bbe:	428b      	cmp	r3, r1
 8003bc0:	d101      	bne.n	8003bc6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003bc2:	4b44      	ldr	r3, [pc, #272]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003bc4:	e001      	b.n	8003bca <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003bc6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003bca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003bce:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	60bb      	str	r3, [r7, #8]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	60bb      	str	r3, [r7, #8]
 8003bdc:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2201      	movs	r2, #1
 8003be2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bea:	f043 0204 	orr.w	r2, r3, #4
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe4a 	bl	800388c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003bf8:	e089      	b.n	8003d0e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003bfa:	69bb      	ldr	r3, [r7, #24]
 8003bfc:	f003 0302 	and.w	r3, r3, #2
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d107      	bne.n	8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f8be 	bl	8003d90 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003c14:	69fb      	ldr	r3, [r7, #28]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b01      	cmp	r3, #1
 8003c1c:	d107      	bne.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d002      	beq.n	8003c2e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 f8fd 	bl	8003e28 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c34:	2b40      	cmp	r3, #64	; 0x40
 8003c36:	d12f      	bne.n	8003c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	f003 0320 	and.w	r3, r3, #32
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d02a      	beq.n	8003c98 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	685a      	ldr	r2, [r3, #4]
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c50:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a1e      	ldr	r2, [pc, #120]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c58:	4293      	cmp	r3, r2
 8003c5a:	d101      	bne.n	8003c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c5e:	e001      	b.n	8003c64 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003c60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c64:	685a      	ldr	r2, [r3, #4]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4919      	ldr	r1, [pc, #100]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003c6c:	428b      	cmp	r3, r1
 8003c6e:	d101      	bne.n	8003c74 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003c70:	4b18      	ldr	r3, [pc, #96]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003c72:	e001      	b.n	8003c78 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003c74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2201      	movs	r2, #1
 8003c82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c8a:	f043 0202 	orr.w	r2, r3, #2
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7ff fdfa 	bl	800388c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003c98:	69bb      	ldr	r3, [r7, #24]
 8003c9a:	f003 0308 	and.w	r3, r3, #8
 8003c9e:	2b08      	cmp	r3, #8
 8003ca0:	d136      	bne.n	8003d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003ca2:	693b      	ldr	r3, [r7, #16]
 8003ca4:	f003 0320 	and.w	r3, r3, #32
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d031      	beq.n	8003d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a07      	ldr	r2, [pc, #28]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d101      	bne.n	8003cba <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003cb6:	4b07      	ldr	r3, [pc, #28]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003cb8:	e001      	b.n	8003cbe <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003cba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cbe:	685a      	ldr	r2, [r3, #4]
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4902      	ldr	r1, [pc, #8]	; (8003cd0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003cc6:	428b      	cmp	r3, r1
 8003cc8:	d106      	bne.n	8003cd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003cca:	4b02      	ldr	r3, [pc, #8]	; (8003cd4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003ccc:	e006      	b.n	8003cdc <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003cce:	bf00      	nop
 8003cd0:	40003800 	.word	0x40003800
 8003cd4:	40003400 	.word	0x40003400
 8003cd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003cdc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003ce0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003cf0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f043 0204 	orr.w	r2, r3, #4
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d06:	6878      	ldr	r0, [r7, #4]
 8003d08:	f7ff fdc0 	bl	800388c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d0c:	e000      	b.n	8003d10 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003d0e:	bf00      	nop
}
 8003d10:	bf00      	nop
 8003d12:	3720      	adds	r7, #32
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b082      	sub	sp, #8
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d38:	1c99      	adds	r1, r3, #2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6251      	str	r1, [r2, #36]	; 0x24
 8003d3e:	881a      	ldrh	r2, [r3, #0]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d4a:	b29b      	uxth	r3, r3
 8003d4c:	3b01      	subs	r3, #1
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d58:	b29b      	uxth	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d113      	bne.n	8003d86 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685a      	ldr	r2, [r3, #4]
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d6c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d106      	bne.n	8003d86 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f7ff ffc9 	bl	8003d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d86:	bf00      	nop
 8003d88:	3708      	adds	r7, #8
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
	...

08003d90 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b082      	sub	sp, #8
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d9c:	1c99      	adds	r1, r3, #2
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	6251      	str	r1, [r2, #36]	; 0x24
 8003da2:	8819      	ldrh	r1, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a1d      	ldr	r2, [pc, #116]	; (8003e20 <I2SEx_TxISR_I2SExt+0x90>)
 8003daa:	4293      	cmp	r3, r2
 8003dac:	d101      	bne.n	8003db2 <I2SEx_TxISR_I2SExt+0x22>
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <I2SEx_TxISR_I2SExt+0x94>)
 8003db0:	e001      	b.n	8003db6 <I2SEx_TxISR_I2SExt+0x26>
 8003db2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003db6:	460a      	mov	r2, r1
 8003db8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dbe:	b29b      	uxth	r3, r3
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	b29a      	uxth	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003dcc:	b29b      	uxth	r3, r3
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d121      	bne.n	8003e16 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a12      	ldr	r2, [pc, #72]	; (8003e20 <I2SEx_TxISR_I2SExt+0x90>)
 8003dd8:	4293      	cmp	r3, r2
 8003dda:	d101      	bne.n	8003de0 <I2SEx_TxISR_I2SExt+0x50>
 8003ddc:	4b11      	ldr	r3, [pc, #68]	; (8003e24 <I2SEx_TxISR_I2SExt+0x94>)
 8003dde:	e001      	b.n	8003de4 <I2SEx_TxISR_I2SExt+0x54>
 8003de0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	490d      	ldr	r1, [pc, #52]	; (8003e20 <I2SEx_TxISR_I2SExt+0x90>)
 8003dec:	428b      	cmp	r3, r1
 8003dee:	d101      	bne.n	8003df4 <I2SEx_TxISR_I2SExt+0x64>
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <I2SEx_TxISR_I2SExt+0x94>)
 8003df2:	e001      	b.n	8003df8 <I2SEx_TxISR_I2SExt+0x68>
 8003df4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003df8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003dfc:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d106      	bne.n	8003e16 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2201      	movs	r2, #1
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f7ff ff81 	bl	8003d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e16:	bf00      	nop
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40003800 	.word	0x40003800
 8003e24:	40003400 	.word	0x40003400

08003e28 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	b082      	sub	sp, #8
 8003e2c:	af00      	add	r7, sp, #0
 8003e2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	68d8      	ldr	r0, [r3, #12]
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e3a:	1c99      	adds	r1, r3, #2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003e40:	b282      	uxth	r2, r0
 8003e42:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	3b01      	subs	r3, #1
 8003e4c:	b29a      	uxth	r2, r3
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d113      	bne.n	8003e84 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e6a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e70:	b29b      	uxth	r3, r3
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d106      	bne.n	8003e84 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003e7e:	6878      	ldr	r0, [r7, #4]
 8003e80:	f7ff ff4a 	bl	8003d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003e84:	bf00      	nop
 8003e86:	3708      	adds	r7, #8
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}

08003e8c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b082      	sub	sp, #8
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a20      	ldr	r2, [pc, #128]	; (8003f1c <I2SEx_RxISR_I2SExt+0x90>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d101      	bne.n	8003ea2 <I2SEx_RxISR_I2SExt+0x16>
 8003e9e:	4b20      	ldr	r3, [pc, #128]	; (8003f20 <I2SEx_RxISR_I2SExt+0x94>)
 8003ea0:	e001      	b.n	8003ea6 <I2SEx_RxISR_I2SExt+0x1a>
 8003ea2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ea6:	68d8      	ldr	r0, [r3, #12]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eac:	1c99      	adds	r1, r3, #2
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003eb2:	b282      	uxth	r2, r0
 8003eb4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003eba:	b29b      	uxth	r3, r3
 8003ebc:	3b01      	subs	r3, #1
 8003ebe:	b29a      	uxth	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ec8:	b29b      	uxth	r3, r3
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	d121      	bne.n	8003f12 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a12      	ldr	r2, [pc, #72]	; (8003f1c <I2SEx_RxISR_I2SExt+0x90>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d101      	bne.n	8003edc <I2SEx_RxISR_I2SExt+0x50>
 8003ed8:	4b11      	ldr	r3, [pc, #68]	; (8003f20 <I2SEx_RxISR_I2SExt+0x94>)
 8003eda:	e001      	b.n	8003ee0 <I2SEx_RxISR_I2SExt+0x54>
 8003edc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	490d      	ldr	r1, [pc, #52]	; (8003f1c <I2SEx_RxISR_I2SExt+0x90>)
 8003ee8:	428b      	cmp	r3, r1
 8003eea:	d101      	bne.n	8003ef0 <I2SEx_RxISR_I2SExt+0x64>
 8003eec:	4b0c      	ldr	r3, [pc, #48]	; (8003f20 <I2SEx_RxISR_I2SExt+0x94>)
 8003eee:	e001      	b.n	8003ef4 <I2SEx_RxISR_I2SExt+0x68>
 8003ef0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003ef4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29b      	uxth	r3, r3
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d106      	bne.n	8003f12 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f7ff ff03 	bl	8003d18 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003f12:	bf00      	nop
 8003f14:	3708      	adds	r7, #8
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}
 8003f1a:	bf00      	nop
 8003f1c:	40003800 	.word	0x40003800
 8003f20:	40003400 	.word	0x40003400

08003f24 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003f26:	b08f      	sub	sp, #60	; 0x3c
 8003f28:	af0a      	add	r7, sp, #40	; 0x28
 8003f2a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e10f      	b.n	8004156 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003f42:	b2db      	uxtb	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d106      	bne.n	8003f56 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003f50:	6878      	ldr	r0, [r7, #4]
 8003f52:	f006 f9ad 	bl	800a2b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2203      	movs	r2, #3
 8003f5a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d102      	bne.n	8003f70 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4618      	mov	r0, r3
 8003f76:	f003 f82c 	bl	8006fd2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	603b      	str	r3, [r7, #0]
 8003f80:	687e      	ldr	r6, [r7, #4]
 8003f82:	466d      	mov	r5, sp
 8003f84:	f106 0410 	add.w	r4, r6, #16
 8003f88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f90:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f94:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f98:	1d33      	adds	r3, r6, #4
 8003f9a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f9c:	6838      	ldr	r0, [r7, #0]
 8003f9e:	f002 ff03 	bl	8006da8 <USB_CoreInit>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d005      	beq.n	8003fb4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2202      	movs	r2, #2
 8003fac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	e0d0      	b.n	8004156 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2100      	movs	r1, #0
 8003fba:	4618      	mov	r0, r3
 8003fbc:	f003 f81a 	bl	8006ff4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	73fb      	strb	r3, [r7, #15]
 8003fc4:	e04a      	b.n	800405c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003fc6:	7bfa      	ldrb	r2, [r7, #15]
 8003fc8:	6879      	ldr	r1, [r7, #4]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	00db      	lsls	r3, r3, #3
 8003fce:	4413      	add	r3, r2
 8003fd0:	009b      	lsls	r3, r3, #2
 8003fd2:	440b      	add	r3, r1
 8003fd4:	333d      	adds	r3, #61	; 0x3d
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003fda:	7bfa      	ldrb	r2, [r7, #15]
 8003fdc:	6879      	ldr	r1, [r7, #4]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	00db      	lsls	r3, r3, #3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	009b      	lsls	r3, r3, #2
 8003fe6:	440b      	add	r3, r1
 8003fe8:	333c      	adds	r3, #60	; 0x3c
 8003fea:	7bfa      	ldrb	r2, [r7, #15]
 8003fec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003fee:	7bfa      	ldrb	r2, [r7, #15]
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
 8003ff2:	b298      	uxth	r0, r3
 8003ff4:	6879      	ldr	r1, [r7, #4]
 8003ff6:	4613      	mov	r3, r2
 8003ff8:	00db      	lsls	r3, r3, #3
 8003ffa:	4413      	add	r3, r2
 8003ffc:	009b      	lsls	r3, r3, #2
 8003ffe:	440b      	add	r3, r1
 8004000:	3344      	adds	r3, #68	; 0x44
 8004002:	4602      	mov	r2, r0
 8004004:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004006:	7bfa      	ldrb	r2, [r7, #15]
 8004008:	6879      	ldr	r1, [r7, #4]
 800400a:	4613      	mov	r3, r2
 800400c:	00db      	lsls	r3, r3, #3
 800400e:	4413      	add	r3, r2
 8004010:	009b      	lsls	r3, r3, #2
 8004012:	440b      	add	r3, r1
 8004014:	3340      	adds	r3, #64	; 0x40
 8004016:	2200      	movs	r2, #0
 8004018:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800401a:	7bfa      	ldrb	r2, [r7, #15]
 800401c:	6879      	ldr	r1, [r7, #4]
 800401e:	4613      	mov	r3, r2
 8004020:	00db      	lsls	r3, r3, #3
 8004022:	4413      	add	r3, r2
 8004024:	009b      	lsls	r3, r3, #2
 8004026:	440b      	add	r3, r1
 8004028:	3348      	adds	r3, #72	; 0x48
 800402a:	2200      	movs	r2, #0
 800402c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800402e:	7bfa      	ldrb	r2, [r7, #15]
 8004030:	6879      	ldr	r1, [r7, #4]
 8004032:	4613      	mov	r3, r2
 8004034:	00db      	lsls	r3, r3, #3
 8004036:	4413      	add	r3, r2
 8004038:	009b      	lsls	r3, r3, #2
 800403a:	440b      	add	r3, r1
 800403c:	334c      	adds	r3, #76	; 0x4c
 800403e:	2200      	movs	r2, #0
 8004040:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004042:	7bfa      	ldrb	r2, [r7, #15]
 8004044:	6879      	ldr	r1, [r7, #4]
 8004046:	4613      	mov	r3, r2
 8004048:	00db      	lsls	r3, r3, #3
 800404a:	4413      	add	r3, r2
 800404c:	009b      	lsls	r3, r3, #2
 800404e:	440b      	add	r3, r1
 8004050:	3354      	adds	r3, #84	; 0x54
 8004052:	2200      	movs	r2, #0
 8004054:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004056:	7bfb      	ldrb	r3, [r7, #15]
 8004058:	3301      	adds	r3, #1
 800405a:	73fb      	strb	r3, [r7, #15]
 800405c:	7bfa      	ldrb	r2, [r7, #15]
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d3af      	bcc.n	8003fc6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004066:	2300      	movs	r3, #0
 8004068:	73fb      	strb	r3, [r7, #15]
 800406a:	e044      	b.n	80040f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800406c:	7bfa      	ldrb	r2, [r7, #15]
 800406e:	6879      	ldr	r1, [r7, #4]
 8004070:	4613      	mov	r3, r2
 8004072:	00db      	lsls	r3, r3, #3
 8004074:	4413      	add	r3, r2
 8004076:	009b      	lsls	r3, r3, #2
 8004078:	440b      	add	r3, r1
 800407a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800407e:	2200      	movs	r2, #0
 8004080:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004082:	7bfa      	ldrb	r2, [r7, #15]
 8004084:	6879      	ldr	r1, [r7, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	00db      	lsls	r3, r3, #3
 800408a:	4413      	add	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	440b      	add	r3, r1
 8004090:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004094:	7bfa      	ldrb	r2, [r7, #15]
 8004096:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004098:	7bfa      	ldrb	r2, [r7, #15]
 800409a:	6879      	ldr	r1, [r7, #4]
 800409c:	4613      	mov	r3, r2
 800409e:	00db      	lsls	r3, r3, #3
 80040a0:	4413      	add	r3, r2
 80040a2:	009b      	lsls	r3, r3, #2
 80040a4:	440b      	add	r3, r1
 80040a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80040aa:	2200      	movs	r2, #0
 80040ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80040ae:	7bfa      	ldrb	r2, [r7, #15]
 80040b0:	6879      	ldr	r1, [r7, #4]
 80040b2:	4613      	mov	r3, r2
 80040b4:	00db      	lsls	r3, r3, #3
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80040c0:	2200      	movs	r2, #0
 80040c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80040c4:	7bfa      	ldrb	r2, [r7, #15]
 80040c6:	6879      	ldr	r1, [r7, #4]
 80040c8:	4613      	mov	r3, r2
 80040ca:	00db      	lsls	r3, r3, #3
 80040cc:	4413      	add	r3, r2
 80040ce:	009b      	lsls	r3, r3, #2
 80040d0:	440b      	add	r3, r1
 80040d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80040d6:	2200      	movs	r2, #0
 80040d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80040da:	7bfa      	ldrb	r2, [r7, #15]
 80040dc:	6879      	ldr	r1, [r7, #4]
 80040de:	4613      	mov	r3, r2
 80040e0:	00db      	lsls	r3, r3, #3
 80040e2:	4413      	add	r3, r2
 80040e4:	009b      	lsls	r3, r3, #2
 80040e6:	440b      	add	r3, r1
 80040e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80040ec:	2200      	movs	r2, #0
 80040ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80040f0:	7bfb      	ldrb	r3, [r7, #15]
 80040f2:	3301      	adds	r3, #1
 80040f4:	73fb      	strb	r3, [r7, #15]
 80040f6:	7bfa      	ldrb	r2, [r7, #15]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d3b5      	bcc.n	800406c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	603b      	str	r3, [r7, #0]
 8004106:	687e      	ldr	r6, [r7, #4]
 8004108:	466d      	mov	r5, sp
 800410a:	f106 0410 	add.w	r4, r6, #16
 800410e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004110:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004112:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004114:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004116:	e894 0003 	ldmia.w	r4, {r0, r1}
 800411a:	e885 0003 	stmia.w	r5, {r0, r1}
 800411e:	1d33      	adds	r3, r6, #4
 8004120:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004122:	6838      	ldr	r0, [r7, #0]
 8004124:	f002 ffb2 	bl	800708c <USB_DevInit>
 8004128:	4603      	mov	r3, r0
 800412a:	2b00      	cmp	r3, #0
 800412c:	d005      	beq.n	800413a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2202      	movs	r2, #2
 8004132:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004136:	2301      	movs	r3, #1
 8004138:	e00d      	b.n	8004156 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2200      	movs	r2, #0
 800413e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	4618      	mov	r0, r3
 8004150:	f004 f901 	bl	8008356 <USB_DevDisconnect>

  return HAL_OK;
 8004154:	2300      	movs	r3, #0
}
 8004156:	4618      	mov	r0, r3
 8004158:	3714      	adds	r7, #20
 800415a:	46bd      	mov	sp, r7
 800415c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800415e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800415e:	b580      	push	{r7, lr}
 8004160:	b084      	sub	sp, #16
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_PCD_Start+0x1c>
 8004176:	2302      	movs	r3, #2
 8004178:	e020      	b.n	80041bc <HAL_PCD_Start+0x5e>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	2b01      	cmp	r3, #1
 8004188:	d109      	bne.n	800419e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800418e:	2b01      	cmp	r3, #1
 8004190:	d005      	beq.n	800419e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004196:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	4618      	mov	r0, r3
 80041a4:	f002 ff04 	bl	8006fb0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4618      	mov	r0, r3
 80041ae:	f004 f8b1 	bl	8008314 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80041ba:	2300      	movs	r3, #0
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80041c4:	b590      	push	{r4, r7, lr}
 80041c6:	b08d      	sub	sp, #52	; 0x34
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041d2:	6a3b      	ldr	r3, [r7, #32]
 80041d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4618      	mov	r0, r3
 80041dc:	f004 f96f 	bl	80084be <USB_GetMode>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	f040 848a 	bne.w	8004afc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	4618      	mov	r0, r3
 80041ee:	f004 f8d3 	bl	8008398 <USB_ReadInterrupts>
 80041f2:	4603      	mov	r3, r0
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	f000 8480 	beq.w	8004afa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80041fa:	69fb      	ldr	r3, [r7, #28]
 80041fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	0a1b      	lsrs	r3, r3, #8
 8004204:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	4618      	mov	r0, r3
 8004214:	f004 f8c0 	bl	8008398 <USB_ReadInterrupts>
 8004218:	4603      	mov	r3, r0
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b02      	cmp	r3, #2
 8004220:	d107      	bne.n	8004232 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	695a      	ldr	r2, [r3, #20]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f002 0202 	and.w	r2, r2, #2
 8004230:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4618      	mov	r0, r3
 8004238:	f004 f8ae 	bl	8008398 <USB_ReadInterrupts>
 800423c:	4603      	mov	r3, r0
 800423e:	f003 0310 	and.w	r3, r3, #16
 8004242:	2b10      	cmp	r3, #16
 8004244:	d161      	bne.n	800430a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	699a      	ldr	r2, [r3, #24]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f022 0210 	bic.w	r2, r2, #16
 8004254:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004256:	6a3b      	ldr	r3, [r7, #32]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800425c:	69bb      	ldr	r3, [r7, #24]
 800425e:	f003 020f 	and.w	r2, r3, #15
 8004262:	4613      	mov	r3, r2
 8004264:	00db      	lsls	r3, r3, #3
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	4413      	add	r3, r2
 8004272:	3304      	adds	r3, #4
 8004274:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	0c5b      	lsrs	r3, r3, #17
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	2b02      	cmp	r3, #2
 8004280:	d124      	bne.n	80042cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8004288:	4013      	ands	r3, r2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d035      	beq.n	80042fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	091b      	lsrs	r3, r3, #4
 8004296:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004298:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800429c:	b29b      	uxth	r3, r3
 800429e:	461a      	mov	r2, r3
 80042a0:	6a38      	ldr	r0, [r7, #32]
 80042a2:	f003 fee5 	bl	8008070 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	691a      	ldr	r2, [r3, #16]
 80042aa:	69bb      	ldr	r3, [r7, #24]
 80042ac:	091b      	lsrs	r3, r3, #4
 80042ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042b2:	441a      	add	r2, r3
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	6a1a      	ldr	r2, [r3, #32]
 80042bc:	69bb      	ldr	r3, [r7, #24]
 80042be:	091b      	lsrs	r3, r3, #4
 80042c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042c4:	441a      	add	r2, r3
 80042c6:	697b      	ldr	r3, [r7, #20]
 80042c8:	621a      	str	r2, [r3, #32]
 80042ca:	e016      	b.n	80042fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80042cc:	69bb      	ldr	r3, [r7, #24]
 80042ce:	0c5b      	lsrs	r3, r3, #17
 80042d0:	f003 030f 	and.w	r3, r3, #15
 80042d4:	2b06      	cmp	r3, #6
 80042d6:	d110      	bne.n	80042fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80042de:	2208      	movs	r2, #8
 80042e0:	4619      	mov	r1, r3
 80042e2:	6a38      	ldr	r0, [r7, #32]
 80042e4:	f003 fec4 	bl	8008070 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	6a1a      	ldr	r2, [r3, #32]
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	091b      	lsrs	r3, r3, #4
 80042f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80042f4:	441a      	add	r2, r3
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0210 	orr.w	r2, r2, #16
 8004308:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4618      	mov	r0, r3
 8004310:	f004 f842 	bl	8008398 <USB_ReadInterrupts>
 8004314:	4603      	mov	r3, r0
 8004316:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800431a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800431e:	f040 80a7 	bne.w	8004470 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004322:	2300      	movs	r3, #0
 8004324:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f004 f847 	bl	80083be <USB_ReadDevAllOutEpInterrupt>
 8004330:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8004332:	e099      	b.n	8004468 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004334:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	f000 808e 	beq.w	800445c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004346:	b2d2      	uxtb	r2, r2
 8004348:	4611      	mov	r1, r2
 800434a:	4618      	mov	r0, r3
 800434c:	f004 f86b 	bl	8008426 <USB_ReadDevOutEPInterrupt>
 8004350:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	f003 0301 	and.w	r3, r3, #1
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00c      	beq.n	8004376 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69fb      	ldr	r3, [r7, #28]
 8004362:	4413      	add	r3, r2
 8004364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004368:	461a      	mov	r2, r3
 800436a:	2301      	movs	r3, #1
 800436c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800436e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004370:	6878      	ldr	r0, [r7, #4]
 8004372:	f000 feab 	bl	80050cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004376:	693b      	ldr	r3, [r7, #16]
 8004378:	f003 0308 	and.w	r3, r3, #8
 800437c:	2b00      	cmp	r3, #0
 800437e:	d00c      	beq.n	800439a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004382:	015a      	lsls	r2, r3, #5
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	4413      	add	r3, r2
 8004388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800438c:	461a      	mov	r2, r3
 800438e:	2308      	movs	r3, #8
 8004390:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004394:	6878      	ldr	r0, [r7, #4]
 8004396:	f000 ff81 	bl	800529c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800439a:	693b      	ldr	r3, [r7, #16]
 800439c:	f003 0310 	and.w	r3, r3, #16
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d008      	beq.n	80043b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80043a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	69fb      	ldr	r3, [r7, #28]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80043b0:	461a      	mov	r2, r3
 80043b2:	2310      	movs	r3, #16
 80043b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f003 0302 	and.w	r3, r3, #2
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d030      	beq.n	8004422 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80043c0:	6a3b      	ldr	r3, [r7, #32]
 80043c2:	695b      	ldr	r3, [r3, #20]
 80043c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043c8:	2b80      	cmp	r3, #128	; 0x80
 80043ca:	d109      	bne.n	80043e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	69fa      	ldr	r2, [r7, #28]
 80043d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80043e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043e2:	4613      	mov	r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	4413      	add	r3, r2
 80043e8:	009b      	lsls	r3, r3, #2
 80043ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	4413      	add	r3, r2
 80043f2:	3304      	adds	r3, #4
 80043f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	78db      	ldrb	r3, [r3, #3]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d108      	bne.n	8004410 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2200      	movs	r2, #0
 8004402:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f006 f85a 	bl	800a4c4 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004412:	015a      	lsls	r2, r3, #5
 8004414:	69fb      	ldr	r3, [r7, #28]
 8004416:	4413      	add	r3, r2
 8004418:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800441c:	461a      	mov	r2, r3
 800441e:	2302      	movs	r3, #2
 8004420:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	f003 0320 	and.w	r3, r3, #32
 8004428:	2b00      	cmp	r3, #0
 800442a:	d008      	beq.n	800443e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800442c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800442e:	015a      	lsls	r2, r3, #5
 8004430:	69fb      	ldr	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004438:	461a      	mov	r2, r3
 800443a:	2320      	movs	r3, #32
 800443c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800443e:	693b      	ldr	r3, [r7, #16]
 8004440:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800444a:	015a      	lsls	r2, r3, #5
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	4413      	add	r3, r2
 8004450:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004454:	461a      	mov	r2, r3
 8004456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800445a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800445c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800445e:	3301      	adds	r3, #1
 8004460:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004462:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004464:	085b      	lsrs	r3, r3, #1
 8004466:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446a:	2b00      	cmp	r3, #0
 800446c:	f47f af62 	bne.w	8004334 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4618      	mov	r0, r3
 8004476:	f003 ff8f 	bl	8008398 <USB_ReadInterrupts>
 800447a:	4603      	mov	r3, r0
 800447c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004480:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004484:	f040 80db 	bne.w	800463e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	4618      	mov	r0, r3
 800448e:	f003 ffb0 	bl	80083f2 <USB_ReadDevAllInEpInterrupt>
 8004492:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8004494:	2300      	movs	r3, #0
 8004496:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8004498:	e0cd      	b.n	8004636 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800449a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 80c2 	beq.w	800462a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044ac:	b2d2      	uxtb	r2, r2
 80044ae:	4611      	mov	r1, r2
 80044b0:	4618      	mov	r0, r3
 80044b2:	f003 ffd6 	bl	8008462 <USB_ReadDevInEPInterrupt>
 80044b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	f003 0301 	and.w	r3, r3, #1
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d057      	beq.n	8004572 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80044c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c4:	f003 030f 	and.w	r3, r3, #15
 80044c8:	2201      	movs	r2, #1
 80044ca:	fa02 f303 	lsl.w	r3, r2, r3
 80044ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	43db      	mvns	r3, r3
 80044dc:	69f9      	ldr	r1, [r7, #28]
 80044de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e2:	4013      	ands	r3, r2
 80044e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80044e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e8:	015a      	lsls	r2, r3, #5
 80044ea:	69fb      	ldr	r3, [r7, #28]
 80044ec:	4413      	add	r3, r2
 80044ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044f2:	461a      	mov	r2, r3
 80044f4:	2301      	movs	r3, #1
 80044f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d132      	bne.n	8004566 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004500:	6879      	ldr	r1, [r7, #4]
 8004502:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004504:	4613      	mov	r3, r2
 8004506:	00db      	lsls	r3, r3, #3
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	440b      	add	r3, r1
 800450e:	334c      	adds	r3, #76	; 0x4c
 8004510:	6819      	ldr	r1, [r3, #0]
 8004512:	6878      	ldr	r0, [r7, #4]
 8004514:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004516:	4613      	mov	r3, r2
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4413      	add	r3, r2
 800451c:	009b      	lsls	r3, r3, #2
 800451e:	4403      	add	r3, r0
 8004520:	3348      	adds	r3, #72	; 0x48
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	4419      	add	r1, r3
 8004526:	6878      	ldr	r0, [r7, #4]
 8004528:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800452a:	4613      	mov	r3, r2
 800452c:	00db      	lsls	r3, r3, #3
 800452e:	4413      	add	r3, r2
 8004530:	009b      	lsls	r3, r3, #2
 8004532:	4403      	add	r3, r0
 8004534:	334c      	adds	r3, #76	; 0x4c
 8004536:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800453a:	2b00      	cmp	r3, #0
 800453c:	d113      	bne.n	8004566 <HAL_PCD_IRQHandler+0x3a2>
 800453e:	6879      	ldr	r1, [r7, #4]
 8004540:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004542:	4613      	mov	r3, r2
 8004544:	00db      	lsls	r3, r3, #3
 8004546:	4413      	add	r3, r2
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	440b      	add	r3, r1
 800454c:	3354      	adds	r3, #84	; 0x54
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d108      	bne.n	8004566 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6818      	ldr	r0, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800455e:	461a      	mov	r2, r3
 8004560:	2101      	movs	r1, #1
 8004562:	f003 ffdd 	bl	8008520 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004568:	b2db      	uxtb	r3, r3
 800456a:	4619      	mov	r1, r3
 800456c:	6878      	ldr	r0, [r7, #4]
 800456e:	f005 ff2e 	bl	800a3ce <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d008      	beq.n	800458e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800457c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457e:	015a      	lsls	r2, r3, #5
 8004580:	69fb      	ldr	r3, [r7, #28]
 8004582:	4413      	add	r3, r2
 8004584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004588:	461a      	mov	r2, r3
 800458a:	2308      	movs	r3, #8
 800458c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	2b00      	cmp	r3, #0
 8004596:	d008      	beq.n	80045aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800459a:	015a      	lsls	r2, r3, #5
 800459c:	69fb      	ldr	r3, [r7, #28]
 800459e:	4413      	add	r3, r2
 80045a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045a4:	461a      	mov	r2, r3
 80045a6:	2310      	movs	r3, #16
 80045a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d008      	beq.n	80045c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80045b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b6:	015a      	lsls	r2, r3, #5
 80045b8:	69fb      	ldr	r3, [r7, #28]
 80045ba:	4413      	add	r3, r2
 80045bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045c0:	461a      	mov	r2, r3
 80045c2:	2340      	movs	r3, #64	; 0x40
 80045c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f003 0302 	and.w	r3, r3, #2
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d023      	beq.n	8004618 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80045d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80045d2:	6a38      	ldr	r0, [r7, #32]
 80045d4:	f002 febe 	bl	8007354 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80045d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80045da:	4613      	mov	r3, r2
 80045dc:	00db      	lsls	r3, r3, #3
 80045de:	4413      	add	r3, r2
 80045e0:	009b      	lsls	r3, r3, #2
 80045e2:	3338      	adds	r3, #56	; 0x38
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	4413      	add	r3, r2
 80045e8:	3304      	adds	r3, #4
 80045ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	78db      	ldrb	r3, [r3, #3]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d108      	bne.n	8004606 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	2200      	movs	r2, #0
 80045f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80045fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	4619      	mov	r1, r3
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f005 ff71 	bl	800a4e8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8004606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004608:	015a      	lsls	r2, r3, #5
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	4413      	add	r3, r2
 800460e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004612:	461a      	mov	r2, r3
 8004614:	2302      	movs	r3, #2
 8004616:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8004618:	693b      	ldr	r3, [r7, #16]
 800461a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800461e:	2b00      	cmp	r3, #0
 8004620:	d003      	beq.n	800462a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8004622:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004624:	6878      	ldr	r0, [r7, #4]
 8004626:	f000 fcc3 	bl	8004fb0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800462a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800462c:	3301      	adds	r3, #1
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8004630:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004632:	085b      	lsrs	r3, r3, #1
 8004634:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8004636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004638:	2b00      	cmp	r3, #0
 800463a:	f47f af2e 	bne.w	800449a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f003 fea8 	bl	8008398 <USB_ReadInterrupts>
 8004648:	4603      	mov	r3, r0
 800464a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800464e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004652:	d122      	bne.n	800469a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8004654:	69fb      	ldr	r3, [r7, #28]
 8004656:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	69fa      	ldr	r2, [r7, #28]
 800465e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004662:	f023 0301 	bic.w	r3, r3, #1
 8004666:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800466e:	2b01      	cmp	r3, #1
 8004670:	d108      	bne.n	8004684 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800467a:	2100      	movs	r1, #0
 800467c:	6878      	ldr	r0, [r7, #4]
 800467e:	f000 feab 	bl	80053d8 <HAL_PCDEx_LPM_Callback>
 8004682:	e002      	b.n	800468a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f005 ff0f 	bl	800a4a8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	695a      	ldr	r2, [r3, #20]
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8004698:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	4618      	mov	r0, r3
 80046a0:	f003 fe7a 	bl	8008398 <USB_ReadInterrupts>
 80046a4:	4603      	mov	r3, r0
 80046a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046ae:	d112      	bne.n	80046d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80046b0:	69fb      	ldr	r3, [r7, #28]
 80046b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	f003 0301 	and.w	r3, r3, #1
 80046bc:	2b01      	cmp	r3, #1
 80046be:	d102      	bne.n	80046c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f005 fecb 	bl	800a45c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	695a      	ldr	r2, [r3, #20]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80046d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4618      	mov	r0, r3
 80046dc:	f003 fe5c 	bl	8008398 <USB_ReadInterrupts>
 80046e0:	4603      	mov	r3, r0
 80046e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ea:	f040 80b7 	bne.w	800485c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80046ee:	69fb      	ldr	r3, [r7, #28]
 80046f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	69fa      	ldr	r2, [r7, #28]
 80046f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fc:	f023 0301 	bic.w	r3, r3, #1
 8004700:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	2110      	movs	r1, #16
 8004708:	4618      	mov	r0, r3
 800470a:	f002 fe23 	bl	8007354 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800470e:	2300      	movs	r3, #0
 8004710:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004712:	e046      	b.n	80047a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8004714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	69fb      	ldr	r3, [r7, #28]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004720:	461a      	mov	r2, r3
 8004722:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004726:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	69fa      	ldr	r2, [r7, #28]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004742:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004746:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8004748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004754:	461a      	mov	r2, r3
 8004756:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800475a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800475c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800475e:	015a      	lsls	r2, r3, #5
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	4413      	add	r3, r2
 8004764:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800476c:	0151      	lsls	r1, r2, #5
 800476e:	69fa      	ldr	r2, [r7, #28]
 8004770:	440a      	add	r2, r1
 8004772:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004776:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800477a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800477c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800477e:	015a      	lsls	r2, r3, #5
 8004780:	69fb      	ldr	r3, [r7, #28]
 8004782:	4413      	add	r3, r2
 8004784:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800478c:	0151      	lsls	r1, r2, #5
 800478e:	69fa      	ldr	r2, [r7, #28]
 8004790:	440a      	add	r2, r1
 8004792:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004796:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800479a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	3301      	adds	r3, #1
 80047a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d3b3      	bcc.n	8004714 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047b2:	69db      	ldr	r3, [r3, #28]
 80047b4:	69fa      	ldr	r2, [r7, #28]
 80047b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80047be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d016      	beq.n	80047f6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80047d2:	69fa      	ldr	r2, [r7, #28]
 80047d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047d8:	f043 030b 	orr.w	r3, r3, #11
 80047dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80047ee:	f043 030b 	orr.w	r3, r3, #11
 80047f2:	6453      	str	r3, [r2, #68]	; 0x44
 80047f4:	e015      	b.n	8004822 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047fc:	695b      	ldr	r3, [r3, #20]
 80047fe:	69fa      	ldr	r2, [r7, #28]
 8004800:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004804:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004808:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800480c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800480e:	69fb      	ldr	r3, [r7, #28]
 8004810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800481c:	f043 030b 	orr.w	r3, r3, #11
 8004820:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	69fa      	ldr	r2, [r7, #28]
 800482c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004830:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004834:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6818      	ldr	r0, [r3, #0]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	691b      	ldr	r3, [r3, #16]
 800483e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8004846:	461a      	mov	r2, r3
 8004848:	f003 fe6a 	bl	8008520 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	695a      	ldr	r2, [r3, #20]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800485a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4618      	mov	r0, r3
 8004862:	f003 fd99 	bl	8008398 <USB_ReadInterrupts>
 8004866:	4603      	mov	r3, r0
 8004868:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800486c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004870:	d124      	bne.n	80048bc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	4618      	mov	r0, r3
 8004878:	f003 fe2f 	bl	80084da <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	4618      	mov	r0, r3
 8004882:	f002 fde4 	bl	800744e <USB_GetDevSpeed>
 8004886:	4603      	mov	r3, r0
 8004888:	461a      	mov	r2, r3
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681c      	ldr	r4, [r3, #0]
 8004892:	f001 fa11 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8004896:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800489c:	b2db      	uxtb	r3, r3
 800489e:	461a      	mov	r2, r3
 80048a0:	4620      	mov	r0, r4
 80048a2:	f002 fae3 	bl	8006e6c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f005 fdb9 	bl	800a41e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	695a      	ldr	r2, [r3, #20]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80048ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	4618      	mov	r0, r3
 80048c2:	f003 fd69 	bl	8008398 <USB_ReadInterrupts>
 80048c6:	4603      	mov	r3, r0
 80048c8:	f003 0308 	and.w	r3, r3, #8
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d10a      	bne.n	80048e6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80048d0:	6878      	ldr	r0, [r7, #4]
 80048d2:	f005 fd96 	bl	800a402 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	695a      	ldr	r2, [r3, #20]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f002 0208 	and.w	r2, r2, #8
 80048e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4618      	mov	r0, r3
 80048ec:	f003 fd54 	bl	8008398 <USB_ReadInterrupts>
 80048f0:	4603      	mov	r3, r0
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b80      	cmp	r3, #128	; 0x80
 80048f8:	d122      	bne.n	8004940 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80048fa:	6a3b      	ldr	r3, [r7, #32]
 80048fc:	699b      	ldr	r3, [r3, #24]
 80048fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004902:	6a3b      	ldr	r3, [r7, #32]
 8004904:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004906:	2301      	movs	r3, #1
 8004908:	627b      	str	r3, [r7, #36]	; 0x24
 800490a:	e014      	b.n	8004936 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004910:	4613      	mov	r3, r2
 8004912:	00db      	lsls	r3, r3, #3
 8004914:	4413      	add	r3, r2
 8004916:	009b      	lsls	r3, r3, #2
 8004918:	440b      	add	r3, r1
 800491a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	2b01      	cmp	r3, #1
 8004922:	d105      	bne.n	8004930 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8004924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004926:	b2db      	uxtb	r3, r3
 8004928:	4619      	mov	r1, r3
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 fb0f 	bl	8004f4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004932:	3301      	adds	r3, #1
 8004934:	627b      	str	r3, [r7, #36]	; 0x24
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800493c:	429a      	cmp	r2, r3
 800493e:	d3e5      	bcc.n	800490c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4618      	mov	r0, r3
 8004946:	f003 fd27 	bl	8008398 <USB_ReadInterrupts>
 800494a:	4603      	mov	r3, r0
 800494c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004950:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004954:	d13b      	bne.n	80049ce <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004956:	2301      	movs	r3, #1
 8004958:	627b      	str	r3, [r7, #36]	; 0x24
 800495a:	e02b      	b.n	80049b4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800495c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800495e:	015a      	lsls	r2, r3, #5
 8004960:	69fb      	ldr	r3, [r7, #28]
 8004962:	4413      	add	r3, r2
 8004964:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004970:	4613      	mov	r3, r2
 8004972:	00db      	lsls	r3, r3, #3
 8004974:	4413      	add	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	440b      	add	r3, r1
 800497a:	3340      	adds	r3, #64	; 0x40
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d115      	bne.n	80049ae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8004982:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8004984:	2b00      	cmp	r3, #0
 8004986:	da12      	bge.n	80049ae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8004988:	6879      	ldr	r1, [r7, #4]
 800498a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800498c:	4613      	mov	r3, r2
 800498e:	00db      	lsls	r3, r3, #3
 8004990:	4413      	add	r3, r2
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	440b      	add	r3, r1
 8004996:	333f      	adds	r3, #63	; 0x3f
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800499c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499e:	b2db      	uxtb	r3, r3
 80049a0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80049a4:	b2db      	uxtb	r3, r3
 80049a6:	4619      	mov	r1, r3
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 fad0 	bl	8004f4e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b0:	3301      	adds	r3, #1
 80049b2:	627b      	str	r3, [r7, #36]	; 0x24
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3ce      	bcc.n	800495c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	695a      	ldr	r2, [r3, #20]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80049cc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f003 fce0 	bl	8008398 <USB_ReadInterrupts>
 80049d8:	4603      	mov	r3, r0
 80049da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049de:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e2:	d155      	bne.n	8004a90 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80049e4:	2301      	movs	r3, #1
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
 80049e8:	e045      	b.n	8004a76 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	015a      	lsls	r2, r3, #5
 80049ee:	69fb      	ldr	r3, [r7, #28]
 80049f0:	4413      	add	r3, r2
 80049f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80049fa:	6879      	ldr	r1, [r7, #4]
 80049fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049fe:	4613      	mov	r3, r2
 8004a00:	00db      	lsls	r3, r3, #3
 8004a02:	4413      	add	r3, r2
 8004a04:	009b      	lsls	r3, r3, #2
 8004a06:	440b      	add	r3, r1
 8004a08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d12e      	bne.n	8004a70 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	da2b      	bge.n	8004a70 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8004a24:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8004a28:	429a      	cmp	r2, r3
 8004a2a:	d121      	bne.n	8004a70 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a30:	4613      	mov	r3, r2
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	4413      	add	r3, r2
 8004a36:	009b      	lsls	r3, r3, #2
 8004a38:	440b      	add	r3, r1
 8004a3a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8004a3e:	2201      	movs	r2, #1
 8004a40:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	699b      	ldr	r3, [r3, #24]
 8004a46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004a4a:	6a3b      	ldr	r3, [r7, #32]
 8004a4c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8004a4e:	6a3b      	ldr	r3, [r7, #32]
 8004a50:	695b      	ldr	r3, [r3, #20]
 8004a52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d10a      	bne.n	8004a70 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a60:	685b      	ldr	r3, [r3, #4]
 8004a62:	69fa      	ldr	r2, [r7, #28]
 8004a64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a6c:	6053      	str	r3, [r2, #4]
            break;
 8004a6e:	e007      	b.n	8004a80 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8004a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a72:	3301      	adds	r3, #1
 8004a74:	627b      	str	r3, [r7, #36]	; 0x24
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d3b4      	bcc.n	80049ea <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695a      	ldr	r2, [r3, #20]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8004a8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	4618      	mov	r0, r3
 8004a96:	f003 fc7f 	bl	8008398 <USB_ReadInterrupts>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004aa4:	d10a      	bne.n	8004abc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f005 fd30 	bl	800a50c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695a      	ldr	r2, [r3, #20]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8004aba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	f003 fc69 	bl	8008398 <USB_ReadInterrupts>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	f003 0304 	and.w	r3, r3, #4
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d115      	bne.n	8004afc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8004ad8:	69bb      	ldr	r3, [r7, #24]
 8004ada:	f003 0304 	and.w	r3, r3, #4
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d002      	beq.n	8004ae8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f005 fd20 	bl	800a528 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6859      	ldr	r1, [r3, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	69ba      	ldr	r2, [r7, #24]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	605a      	str	r2, [r3, #4]
 8004af8:	e000      	b.n	8004afc <HAL_PCD_IRQHandler+0x938>
      return;
 8004afa:	bf00      	nop
    }
  }
}
 8004afc:	3734      	adds	r7, #52	; 0x34
 8004afe:	46bd      	mov	sp, r7
 8004b00:	bd90      	pop	{r4, r7, pc}

08004b02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8004b02:	b580      	push	{r7, lr}
 8004b04:	b082      	sub	sp, #8
 8004b06:	af00      	add	r7, sp, #0
 8004b08:	6078      	str	r0, [r7, #4]
 8004b0a:	460b      	mov	r3, r1
 8004b0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004b14:	2b01      	cmp	r3, #1
 8004b16:	d101      	bne.n	8004b1c <HAL_PCD_SetAddress+0x1a>
 8004b18:	2302      	movs	r3, #2
 8004b1a:	e013      	b.n	8004b44 <HAL_PCD_SetAddress+0x42>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2201      	movs	r2, #1
 8004b20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	78fa      	ldrb	r2, [r7, #3]
 8004b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	78fa      	ldrb	r2, [r7, #3]
 8004b32:	4611      	mov	r1, r2
 8004b34:	4618      	mov	r0, r3
 8004b36:	f003 fbc7 	bl	80082c8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004b42:	2300      	movs	r3, #0
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	3708      	adds	r7, #8
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	bd80      	pop	{r7, pc}

08004b4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	4608      	mov	r0, r1
 8004b56:	4611      	mov	r1, r2
 8004b58:	461a      	mov	r2, r3
 8004b5a:	4603      	mov	r3, r0
 8004b5c:	70fb      	strb	r3, [r7, #3]
 8004b5e:	460b      	mov	r3, r1
 8004b60:	803b      	strh	r3, [r7, #0]
 8004b62:	4613      	mov	r3, r2
 8004b64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8004b66:	2300      	movs	r3, #0
 8004b68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004b6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	da0f      	bge.n	8004b92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004b72:	78fb      	ldrb	r3, [r7, #3]
 8004b74:	f003 020f 	and.w	r2, r3, #15
 8004b78:	4613      	mov	r3, r2
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	3338      	adds	r3, #56	; 0x38
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	4413      	add	r3, r2
 8004b86:	3304      	adds	r3, #4
 8004b88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2201      	movs	r2, #1
 8004b8e:	705a      	strb	r2, [r3, #1]
 8004b90:	e00f      	b.n	8004bb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004b92:	78fb      	ldrb	r3, [r7, #3]
 8004b94:	f003 020f 	and.w	r2, r3, #15
 8004b98:	4613      	mov	r3, r2
 8004b9a:	00db      	lsls	r3, r3, #3
 8004b9c:	4413      	add	r3, r2
 8004b9e:	009b      	lsls	r3, r3, #2
 8004ba0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004ba4:	687a      	ldr	r2, [r7, #4]
 8004ba6:	4413      	add	r3, r2
 8004ba8:	3304      	adds	r3, #4
 8004baa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2200      	movs	r2, #0
 8004bb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8004bb2:	78fb      	ldrb	r3, [r7, #3]
 8004bb4:	f003 030f 	and.w	r3, r3, #15
 8004bb8:	b2da      	uxtb	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8004bbe:	883a      	ldrh	r2, [r7, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	78ba      	ldrb	r2, [r7, #2]
 8004bc8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	785b      	ldrb	r3, [r3, #1]
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d004      	beq.n	8004bdc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	781b      	ldrb	r3, [r3, #0]
 8004bd6:	b29a      	uxth	r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8004bdc:	78bb      	ldrb	r3, [r7, #2]
 8004bde:	2b02      	cmp	r3, #2
 8004be0:	d102      	bne.n	8004be8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	2200      	movs	r2, #0
 8004be6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004bee:	2b01      	cmp	r3, #1
 8004bf0:	d101      	bne.n	8004bf6 <HAL_PCD_EP_Open+0xaa>
 8004bf2:	2302      	movs	r3, #2
 8004bf4:	e00e      	b.n	8004c14 <HAL_PCD_EP_Open+0xc8>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68f9      	ldr	r1, [r7, #12]
 8004c04:	4618      	mov	r0, r3
 8004c06:	f002 fc47 	bl	8007498 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8004c12:	7afb      	ldrb	r3, [r7, #11]
}
 8004c14:	4618      	mov	r0, r3
 8004c16:	3710      	adds	r7, #16
 8004c18:	46bd      	mov	sp, r7
 8004c1a:	bd80      	pop	{r7, pc}

08004c1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004c1c:	b580      	push	{r7, lr}
 8004c1e:	b084      	sub	sp, #16
 8004c20:	af00      	add	r7, sp, #0
 8004c22:	6078      	str	r0, [r7, #4]
 8004c24:	460b      	mov	r3, r1
 8004c26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8004c28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	da0f      	bge.n	8004c50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004c30:	78fb      	ldrb	r3, [r7, #3]
 8004c32:	f003 020f 	and.w	r2, r3, #15
 8004c36:	4613      	mov	r3, r2
 8004c38:	00db      	lsls	r3, r3, #3
 8004c3a:	4413      	add	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	3338      	adds	r3, #56	; 0x38
 8004c40:	687a      	ldr	r2, [r7, #4]
 8004c42:	4413      	add	r3, r2
 8004c44:	3304      	adds	r3, #4
 8004c46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	705a      	strb	r2, [r3, #1]
 8004c4e:	e00f      	b.n	8004c70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004c50:	78fb      	ldrb	r3, [r7, #3]
 8004c52:	f003 020f 	and.w	r2, r3, #15
 8004c56:	4613      	mov	r3, r2
 8004c58:	00db      	lsls	r3, r3, #3
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	4413      	add	r3, r2
 8004c66:	3304      	adds	r3, #4
 8004c68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8004c70:	78fb      	ldrb	r3, [r7, #3]
 8004c72:	f003 030f 	and.w	r3, r3, #15
 8004c76:	b2da      	uxtb	r2, r3
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004c82:	2b01      	cmp	r3, #1
 8004c84:	d101      	bne.n	8004c8a <HAL_PCD_EP_Close+0x6e>
 8004c86:	2302      	movs	r3, #2
 8004c88:	e00e      	b.n	8004ca8 <HAL_PCD_EP_Close+0x8c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2201      	movs	r2, #1
 8004c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68f9      	ldr	r1, [r7, #12]
 8004c98:	4618      	mov	r0, r3
 8004c9a:	f002 fc85 	bl	80075a8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8004ca6:	2300      	movs	r3, #0
}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3710      	adds	r7, #16
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b086      	sub	sp, #24
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	607a      	str	r2, [r7, #4]
 8004cba:	603b      	str	r3, [r7, #0]
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004cc0:	7afb      	ldrb	r3, [r7, #11]
 8004cc2:	f003 020f 	and.w	r2, r3, #15
 8004cc6:	4613      	mov	r3, r2
 8004cc8:	00db      	lsls	r3, r3, #3
 8004cca:	4413      	add	r3, r2
 8004ccc:	009b      	lsls	r3, r3, #2
 8004cce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	4413      	add	r3, r2
 8004cd6:	3304      	adds	r3, #4
 8004cd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004ce0:	697b      	ldr	r3, [r7, #20]
 8004ce2:	683a      	ldr	r2, [r7, #0]
 8004ce4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004ce6:	697b      	ldr	r3, [r7, #20]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004cf2:	7afb      	ldrb	r3, [r7, #11]
 8004cf4:	f003 030f 	and.w	r3, r3, #15
 8004cf8:	b2da      	uxtb	r2, r3
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	691b      	ldr	r3, [r3, #16]
 8004d02:	2b01      	cmp	r3, #1
 8004d04:	d102      	bne.n	8004d0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004d0c:	7afb      	ldrb	r3, [r7, #11]
 8004d0e:	f003 030f 	and.w	r3, r3, #15
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d109      	bne.n	8004d2a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6818      	ldr	r0, [r3, #0]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	b2db      	uxtb	r3, r3
 8004d20:	461a      	mov	r2, r3
 8004d22:	6979      	ldr	r1, [r7, #20]
 8004d24:	f002 ff64 	bl	8007bf0 <USB_EP0StartXfer>
 8004d28:	e008      	b.n	8004d3c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	6818      	ldr	r0, [r3, #0]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	691b      	ldr	r3, [r3, #16]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	f002 fd12 	bl	8007760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3718      	adds	r7, #24
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}

08004d46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8004d46:	b580      	push	{r7, lr}
 8004d48:	b086      	sub	sp, #24
 8004d4a:	af00      	add	r7, sp, #0
 8004d4c:	60f8      	str	r0, [r7, #12]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
 8004d52:	460b      	mov	r3, r1
 8004d54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004d56:	7afb      	ldrb	r3, [r7, #11]
 8004d58:	f003 020f 	and.w	r2, r3, #15
 8004d5c:	4613      	mov	r3, r2
 8004d5e:	00db      	lsls	r3, r3, #3
 8004d60:	4413      	add	r3, r2
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	3338      	adds	r3, #56	; 0x38
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	4413      	add	r3, r2
 8004d6a:	3304      	adds	r3, #4
 8004d6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8004d6e:	697b      	ldr	r3, [r7, #20]
 8004d70:	687a      	ldr	r2, [r7, #4]
 8004d72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2201      	movs	r2, #1
 8004d84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004d86:	7afb      	ldrb	r3, [r7, #11]
 8004d88:	f003 030f 	and.w	r3, r3, #15
 8004d8c:	b2da      	uxtb	r2, r3
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	691b      	ldr	r3, [r3, #16]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	d102      	bne.n	8004da0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8004d9a:	687a      	ldr	r2, [r7, #4]
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004da0:	7afb      	ldrb	r3, [r7, #11]
 8004da2:	f003 030f 	and.w	r3, r3, #15
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d109      	bne.n	8004dbe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6818      	ldr	r0, [r3, #0]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	691b      	ldr	r3, [r3, #16]
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	461a      	mov	r2, r3
 8004db6:	6979      	ldr	r1, [r7, #20]
 8004db8:	f002 ff1a 	bl	8007bf0 <USB_EP0StartXfer>
 8004dbc:	e008      	b.n	8004dd0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	6818      	ldr	r0, [r3, #0]
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	691b      	ldr	r3, [r3, #16]
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	6979      	ldr	r1, [r7, #20]
 8004dcc:	f002 fcc8 	bl	8007760 <USB_EPStartXfer>
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3718      	adds	r7, #24
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b084      	sub	sp, #16
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	460b      	mov	r3, r1
 8004de4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8004de6:	78fb      	ldrb	r3, [r7, #3]
 8004de8:	f003 020f 	and.w	r2, r3, #15
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d901      	bls.n	8004df8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e050      	b.n	8004e9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004df8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	da0f      	bge.n	8004e20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004e00:	78fb      	ldrb	r3, [r7, #3]
 8004e02:	f003 020f 	and.w	r2, r3, #15
 8004e06:	4613      	mov	r3, r2
 8004e08:	00db      	lsls	r3, r3, #3
 8004e0a:	4413      	add	r3, r2
 8004e0c:	009b      	lsls	r3, r3, #2
 8004e0e:	3338      	adds	r3, #56	; 0x38
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	4413      	add	r3, r2
 8004e14:	3304      	adds	r3, #4
 8004e16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	705a      	strb	r2, [r3, #1]
 8004e1e:	e00d      	b.n	8004e3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8004e20:	78fa      	ldrb	r2, [r7, #3]
 8004e22:	4613      	mov	r3, r2
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	4413      	add	r3, r2
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	4413      	add	r3, r2
 8004e32:	3304      	adds	r3, #4
 8004e34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	2200      	movs	r2, #0
 8004e3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004e42:	78fb      	ldrb	r3, [r7, #3]
 8004e44:	f003 030f 	and.w	r3, r3, #15
 8004e48:	b2da      	uxtb	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004e54:	2b01      	cmp	r3, #1
 8004e56:	d101      	bne.n	8004e5c <HAL_PCD_EP_SetStall+0x82>
 8004e58:	2302      	movs	r3, #2
 8004e5a:	e01e      	b.n	8004e9a <HAL_PCD_EP_SetStall+0xc0>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	68f9      	ldr	r1, [r7, #12]
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f003 f958 	bl	8008120 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8004e70:	78fb      	ldrb	r3, [r7, #3]
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d10a      	bne.n	8004e90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	b2d9      	uxtb	r1, r3
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f003 fb48 	bl	8008520 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}

08004ea2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004ea2:	b580      	push	{r7, lr}
 8004ea4:	b084      	sub	sp, #16
 8004ea6:	af00      	add	r7, sp, #0
 8004ea8:	6078      	str	r0, [r7, #4]
 8004eaa:	460b      	mov	r3, r1
 8004eac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8004eae:	78fb      	ldrb	r3, [r7, #3]
 8004eb0:	f003 020f 	and.w	r2, r3, #15
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	685b      	ldr	r3, [r3, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d901      	bls.n	8004ec0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8004ebc:	2301      	movs	r3, #1
 8004ebe:	e042      	b.n	8004f46 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8004ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	da0f      	bge.n	8004ee8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004ec8:	78fb      	ldrb	r3, [r7, #3]
 8004eca:	f003 020f 	and.w	r2, r3, #15
 8004ece:	4613      	mov	r3, r2
 8004ed0:	00db      	lsls	r3, r3, #3
 8004ed2:	4413      	add	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	3338      	adds	r3, #56	; 0x38
 8004ed8:	687a      	ldr	r2, [r7, #4]
 8004eda:	4413      	add	r3, r2
 8004edc:	3304      	adds	r3, #4
 8004ede:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	705a      	strb	r2, [r3, #1]
 8004ee6:	e00f      	b.n	8004f08 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004ee8:	78fb      	ldrb	r3, [r7, #3]
 8004eea:	f003 020f 	and.w	r2, r3, #15
 8004eee:	4613      	mov	r3, r2
 8004ef0:	00db      	lsls	r3, r3, #3
 8004ef2:	4413      	add	r3, r2
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004efa:	687a      	ldr	r2, [r7, #4]
 8004efc:	4413      	add	r3, r2
 8004efe:	3304      	adds	r3, #4
 8004f00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2200      	movs	r2, #0
 8004f06:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8004f0e:	78fb      	ldrb	r3, [r7, #3]
 8004f10:	f003 030f 	and.w	r3, r3, #15
 8004f14:	b2da      	uxtb	r2, r3
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d101      	bne.n	8004f28 <HAL_PCD_EP_ClrStall+0x86>
 8004f24:	2302      	movs	r3, #2
 8004f26:	e00e      	b.n	8004f46 <HAL_PCD_EP_ClrStall+0xa4>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2201      	movs	r2, #1
 8004f2c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68f9      	ldr	r1, [r7, #12]
 8004f36:	4618      	mov	r0, r3
 8004f38:	f003 f960 	bl	80081fc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8004f44:	2300      	movs	r3, #0
}
 8004f46:	4618      	mov	r0, r3
 8004f48:	3710      	adds	r7, #16
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bd80      	pop	{r7, pc}

08004f4e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8004f4e:	b580      	push	{r7, lr}
 8004f50:	b084      	sub	sp, #16
 8004f52:	af00      	add	r7, sp, #0
 8004f54:	6078      	str	r0, [r7, #4]
 8004f56:	460b      	mov	r3, r1
 8004f58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8004f5a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	da0c      	bge.n	8004f7c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8004f62:	78fb      	ldrb	r3, [r7, #3]
 8004f64:	f003 020f 	and.w	r2, r3, #15
 8004f68:	4613      	mov	r3, r2
 8004f6a:	00db      	lsls	r3, r3, #3
 8004f6c:	4413      	add	r3, r2
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	3338      	adds	r3, #56	; 0x38
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	4413      	add	r3, r2
 8004f76:	3304      	adds	r3, #4
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	e00c      	b.n	8004f96 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8004f7c:	78fb      	ldrb	r3, [r7, #3]
 8004f7e:	f003 020f 	and.w	r2, r3, #15
 8004f82:	4613      	mov	r3, r2
 8004f84:	00db      	lsls	r3, r3, #3
 8004f86:	4413      	add	r3, r2
 8004f88:	009b      	lsls	r3, r3, #2
 8004f8a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8004f8e:	687a      	ldr	r2, [r7, #4]
 8004f90:	4413      	add	r3, r2
 8004f92:	3304      	adds	r3, #4
 8004f94:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	68f9      	ldr	r1, [r7, #12]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f002 ff7f 	bl	8007ea0 <USB_EPStopXfer>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	72fb      	strb	r3, [r7, #11]

  return ret;
 8004fa6:	7afb      	ldrb	r3, [r7, #11]
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3710      	adds	r7, #16
 8004fac:	46bd      	mov	sp, r7
 8004fae:	bd80      	pop	{r7, pc}

08004fb0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	b08a      	sub	sp, #40	; 0x28
 8004fb4:	af02      	add	r7, sp, #8
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fc0:	697b      	ldr	r3, [r7, #20]
 8004fc2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	4613      	mov	r3, r2
 8004fc8:	00db      	lsls	r3, r3, #3
 8004fca:	4413      	add	r3, r2
 8004fcc:	009b      	lsls	r3, r3, #2
 8004fce:	3338      	adds	r3, #56	; 0x38
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	4413      	add	r3, r2
 8004fd4:	3304      	adds	r3, #4
 8004fd6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6a1a      	ldr	r2, [r3, #32]
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d901      	bls.n	8004fe8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e06c      	b.n	80050c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	6a1b      	ldr	r3, [r3, #32]
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	68db      	ldr	r3, [r3, #12]
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	429a      	cmp	r2, r3
 8004ffc:	d902      	bls.n	8005004 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	3303      	adds	r3, #3
 8005008:	089b      	lsrs	r3, r3, #2
 800500a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800500c:	e02b      	b.n	8005066 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	6a1b      	ldr	r3, [r3, #32]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	69fa      	ldr	r2, [r7, #28]
 8005020:	429a      	cmp	r2, r3
 8005022:	d902      	bls.n	800502a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800502a:	69fb      	ldr	r3, [r7, #28]
 800502c:	3303      	adds	r3, #3
 800502e:	089b      	lsrs	r3, r3, #2
 8005030:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	6919      	ldr	r1, [r3, #16]
 8005036:	683b      	ldr	r3, [r7, #0]
 8005038:	b2da      	uxtb	r2, r3
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005042:	b2db      	uxtb	r3, r3
 8005044:	9300      	str	r3, [sp, #0]
 8005046:	4603      	mov	r3, r0
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f002 ffd3 	bl	8007ff4 <USB_WritePacket>

    ep->xfer_buff  += len;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	691a      	ldr	r2, [r3, #16]
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	441a      	add	r2, r3
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	6a1a      	ldr	r2, [r3, #32]
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	441a      	add	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	015a      	lsls	r2, r3, #5
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	4413      	add	r3, r2
 800506e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005076:	69ba      	ldr	r2, [r7, #24]
 8005078:	429a      	cmp	r2, r3
 800507a:	d809      	bhi.n	8005090 <PCD_WriteEmptyTxFifo+0xe0>
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	6a1a      	ldr	r2, [r3, #32]
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005084:	429a      	cmp	r2, r3
 8005086:	d203      	bcs.n	8005090 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	699b      	ldr	r3, [r3, #24]
 800508c:	2b00      	cmp	r3, #0
 800508e:	d1be      	bne.n	800500e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	699a      	ldr	r2, [r3, #24]
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	429a      	cmp	r2, r3
 800509a:	d811      	bhi.n	80050c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	f003 030f 	and.w	r3, r3, #15
 80050a2:	2201      	movs	r2, #1
 80050a4:	fa02 f303 	lsl.w	r3, r2, r3
 80050a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	43db      	mvns	r3, r3
 80050b6:	6939      	ldr	r1, [r7, #16]
 80050b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050bc:	4013      	ands	r3, r2
 80050be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050dc:	69fb      	ldr	r3, [r7, #28]
 80050de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	333c      	adds	r3, #60	; 0x3c
 80050e4:	3304      	adds	r3, #4
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050f6:	689b      	ldr	r3, [r3, #8]
 80050f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	691b      	ldr	r3, [r3, #16]
 80050fe:	2b01      	cmp	r3, #1
 8005100:	d17b      	bne.n	80051fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005102:	693b      	ldr	r3, [r7, #16]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d015      	beq.n	8005138 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	4a61      	ldr	r2, [pc, #388]	; (8005294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005110:	4293      	cmp	r3, r2
 8005112:	f240 80b9 	bls.w	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800511c:	2b00      	cmp	r3, #0
 800511e:	f000 80b3 	beq.w	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	015a      	lsls	r2, r3, #5
 8005126:	69bb      	ldr	r3, [r7, #24]
 8005128:	4413      	add	r3, r2
 800512a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800512e:	461a      	mov	r2, r3
 8005130:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005134:	6093      	str	r3, [r2, #8]
 8005136:	e0a7      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	f003 0320 	and.w	r3, r3, #32
 800513e:	2b00      	cmp	r3, #0
 8005140:	d009      	beq.n	8005156 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	015a      	lsls	r2, r3, #5
 8005146:	69bb      	ldr	r3, [r7, #24]
 8005148:	4413      	add	r3, r2
 800514a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514e:	461a      	mov	r2, r3
 8005150:	2320      	movs	r3, #32
 8005152:	6093      	str	r3, [r2, #8]
 8005154:	e098      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005156:	693b      	ldr	r3, [r7, #16]
 8005158:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800515c:	2b00      	cmp	r3, #0
 800515e:	f040 8093 	bne.w	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	4a4b      	ldr	r2, [pc, #300]	; (8005294 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005166:	4293      	cmp	r3, r2
 8005168:	d90f      	bls.n	800518a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00a      	beq.n	800518a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69bb      	ldr	r3, [r7, #24]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005180:	461a      	mov	r2, r3
 8005182:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005186:	6093      	str	r3, [r2, #8]
 8005188:	e07e      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800518a:	683a      	ldr	r2, [r7, #0]
 800518c:	4613      	mov	r3, r2
 800518e:	00db      	lsls	r3, r3, #3
 8005190:	4413      	add	r3, r2
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8005198:	687a      	ldr	r2, [r7, #4]
 800519a:	4413      	add	r3, r2
 800519c:	3304      	adds	r3, #4
 800519e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	69da      	ldr	r2, [r3, #28]
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	0159      	lsls	r1, r3, #5
 80051a8:	69bb      	ldr	r3, [r7, #24]
 80051aa:	440b      	add	r3, r1
 80051ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051b6:	1ad2      	subs	r2, r2, r3
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d114      	bne.n	80051ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	699b      	ldr	r3, [r3, #24]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d109      	bne.n	80051de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6818      	ldr	r0, [r3, #0]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80051d4:	461a      	mov	r2, r3
 80051d6:	2101      	movs	r1, #1
 80051d8:	f003 f9a2 	bl	8008520 <USB_EP0_OutStart>
 80051dc:	e006      	b.n	80051ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	691a      	ldr	r2, [r3, #16]
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	6a1b      	ldr	r3, [r3, #32]
 80051e6:	441a      	add	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	b2db      	uxtb	r3, r3
 80051f0:	4619      	mov	r1, r3
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f005 f8d0 	bl	800a398 <HAL_PCD_DataOutStageCallback>
 80051f8:	e046      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80051fa:	697b      	ldr	r3, [r7, #20]
 80051fc:	4a26      	ldr	r2, [pc, #152]	; (8005298 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80051fe:	4293      	cmp	r3, r2
 8005200:	d124      	bne.n	800524c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005202:	693b      	ldr	r3, [r7, #16]
 8005204:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800520c:	683b      	ldr	r3, [r7, #0]
 800520e:	015a      	lsls	r2, r3, #5
 8005210:	69bb      	ldr	r3, [r7, #24]
 8005212:	4413      	add	r3, r2
 8005214:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005218:	461a      	mov	r2, r3
 800521a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800521e:	6093      	str	r3, [r2, #8]
 8005220:	e032      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005222:	693b      	ldr	r3, [r7, #16]
 8005224:	f003 0320 	and.w	r3, r3, #32
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	69bb      	ldr	r3, [r7, #24]
 8005232:	4413      	add	r3, r2
 8005234:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005238:	461a      	mov	r2, r3
 800523a:	2320      	movs	r3, #32
 800523c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	b2db      	uxtb	r3, r3
 8005242:	4619      	mov	r1, r3
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f005 f8a7 	bl	800a398 <HAL_PCD_DataOutStageCallback>
 800524a:	e01d      	b.n	8005288 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d114      	bne.n	800527c <PCD_EP_OutXfrComplete_int+0x1b0>
 8005252:	6879      	ldr	r1, [r7, #4]
 8005254:	683a      	ldr	r2, [r7, #0]
 8005256:	4613      	mov	r3, r2
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4413      	add	r3, r2
 800525c:	009b      	lsls	r3, r3, #2
 800525e:	440b      	add	r3, r1
 8005260:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d108      	bne.n	800527c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6818      	ldr	r0, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005274:	461a      	mov	r2, r3
 8005276:	2100      	movs	r1, #0
 8005278:	f003 f952 	bl	8008520 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	b2db      	uxtb	r3, r3
 8005280:	4619      	mov	r1, r3
 8005282:	6878      	ldr	r0, [r7, #4]
 8005284:	f005 f888 	bl	800a398 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005288:	2300      	movs	r3, #0
}
 800528a:	4618      	mov	r0, r3
 800528c:	3720      	adds	r7, #32
 800528e:	46bd      	mov	sp, r7
 8005290:	bd80      	pop	{r7, pc}
 8005292:	bf00      	nop
 8005294:	4f54300a 	.word	0x4f54300a
 8005298:	4f54310a 	.word	0x4f54310a

0800529c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
 80052a2:	6078      	str	r0, [r7, #4]
 80052a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052ac:	697b      	ldr	r3, [r7, #20]
 80052ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	333c      	adds	r3, #60	; 0x3c
 80052b4:	3304      	adds	r3, #4
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4a15      	ldr	r2, [pc, #84]	; (8005324 <PCD_EP_OutSetupPacket_int+0x88>)
 80052ce:	4293      	cmp	r3, r2
 80052d0:	d90e      	bls.n	80052f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80052d2:	68bb      	ldr	r3, [r7, #8]
 80052d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d009      	beq.n	80052f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80052dc:	683b      	ldr	r3, [r7, #0]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052e8:	461a      	mov	r2, r3
 80052ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f005 f83f 	bl	800a374 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4a0a      	ldr	r2, [pc, #40]	; (8005324 <PCD_EP_OutSetupPacket_int+0x88>)
 80052fa:	4293      	cmp	r3, r2
 80052fc:	d90c      	bls.n	8005318 <PCD_EP_OutSetupPacket_int+0x7c>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	2b01      	cmp	r3, #1
 8005304:	d108      	bne.n	8005318 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6818      	ldr	r0, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8005310:	461a      	mov	r2, r3
 8005312:	2101      	movs	r1, #1
 8005314:	f003 f904 	bl	8008520 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005318:	2300      	movs	r3, #0
}
 800531a:	4618      	mov	r0, r3
 800531c:	3718      	adds	r7, #24
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	4f54300a 	.word	0x4f54300a

08005328 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
 8005330:	460b      	mov	r3, r1
 8005332:	70fb      	strb	r3, [r7, #3]
 8005334:	4613      	mov	r3, r2
 8005336:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005340:	78fb      	ldrb	r3, [r7, #3]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d107      	bne.n	8005356 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005346:	883b      	ldrh	r3, [r7, #0]
 8005348:	0419      	lsls	r1, r3, #16
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68ba      	ldr	r2, [r7, #8]
 8005350:	430a      	orrs	r2, r1
 8005352:	629a      	str	r2, [r3, #40]	; 0x28
 8005354:	e028      	b.n	80053a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800535c:	0c1b      	lsrs	r3, r3, #16
 800535e:	68ba      	ldr	r2, [r7, #8]
 8005360:	4413      	add	r3, r2
 8005362:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005364:	2300      	movs	r3, #0
 8005366:	73fb      	strb	r3, [r7, #15]
 8005368:	e00d      	b.n	8005386 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	7bfb      	ldrb	r3, [r7, #15]
 8005370:	3340      	adds	r3, #64	; 0x40
 8005372:	009b      	lsls	r3, r3, #2
 8005374:	4413      	add	r3, r2
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	0c1b      	lsrs	r3, r3, #16
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	4413      	add	r3, r2
 800537e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005380:	7bfb      	ldrb	r3, [r7, #15]
 8005382:	3301      	adds	r3, #1
 8005384:	73fb      	strb	r3, [r7, #15]
 8005386:	7bfa      	ldrb	r2, [r7, #15]
 8005388:	78fb      	ldrb	r3, [r7, #3]
 800538a:	3b01      	subs	r3, #1
 800538c:	429a      	cmp	r2, r3
 800538e:	d3ec      	bcc.n	800536a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005390:	883b      	ldrh	r3, [r7, #0]
 8005392:	0418      	lsls	r0, r3, #16
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	6819      	ldr	r1, [r3, #0]
 8005398:	78fb      	ldrb	r3, [r7, #3]
 800539a:	3b01      	subs	r3, #1
 800539c:	68ba      	ldr	r2, [r7, #8]
 800539e:	4302      	orrs	r2, r0
 80053a0:	3340      	adds	r3, #64	; 0x40
 80053a2:	009b      	lsls	r3, r3, #2
 80053a4:	440b      	add	r3, r1
 80053a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80053a8:	2300      	movs	r3, #0
}
 80053aa:	4618      	mov	r0, r3
 80053ac:	3714      	adds	r7, #20
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr

080053b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80053b6:	b480      	push	{r7}
 80053b8:	b083      	sub	sp, #12
 80053ba:	af00      	add	r7, sp, #0
 80053bc:	6078      	str	r0, [r7, #4]
 80053be:	460b      	mov	r3, r1
 80053c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	887a      	ldrh	r2, [r7, #2]
 80053c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80053ca:	2300      	movs	r3, #0
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
 80053e0:	460b      	mov	r3, r1
 80053e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80053e4:	bf00      	nop
 80053e6:	370c      	adds	r7, #12
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d101      	bne.n	8005402 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053fe:	2301      	movs	r3, #1
 8005400:	e267      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f003 0301 	and.w	r3, r3, #1
 800540a:	2b00      	cmp	r3, #0
 800540c:	d075      	beq.n	80054fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800540e:	4b88      	ldr	r3, [pc, #544]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005410:	689b      	ldr	r3, [r3, #8]
 8005412:	f003 030c 	and.w	r3, r3, #12
 8005416:	2b04      	cmp	r3, #4
 8005418:	d00c      	beq.n	8005434 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800541a:	4b85      	ldr	r3, [pc, #532]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005422:	2b08      	cmp	r3, #8
 8005424:	d112      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005426:	4b82      	ldr	r3, [pc, #520]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800542e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005432:	d10b      	bne.n	800544c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005434:	4b7e      	ldr	r3, [pc, #504]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543c:	2b00      	cmp	r3, #0
 800543e:	d05b      	beq.n	80054f8 <HAL_RCC_OscConfig+0x108>
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	685b      	ldr	r3, [r3, #4]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d157      	bne.n	80054f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005448:	2301      	movs	r3, #1
 800544a:	e242      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005454:	d106      	bne.n	8005464 <HAL_RCC_OscConfig+0x74>
 8005456:	4b76      	ldr	r3, [pc, #472]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a75      	ldr	r2, [pc, #468]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800545c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	e01d      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	685b      	ldr	r3, [r3, #4]
 8005468:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800546c:	d10c      	bne.n	8005488 <HAL_RCC_OscConfig+0x98>
 800546e:	4b70      	ldr	r3, [pc, #448]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a6f      	ldr	r2, [pc, #444]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005474:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005478:	6013      	str	r3, [r2, #0]
 800547a:	4b6d      	ldr	r3, [pc, #436]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	4a6c      	ldr	r2, [pc, #432]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005480:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005484:	6013      	str	r3, [r2, #0]
 8005486:	e00b      	b.n	80054a0 <HAL_RCC_OscConfig+0xb0>
 8005488:	4b69      	ldr	r3, [pc, #420]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a68      	ldr	r2, [pc, #416]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800548e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005492:	6013      	str	r3, [r2, #0]
 8005494:	4b66      	ldr	r3, [pc, #408]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a65      	ldr	r2, [pc, #404]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800549a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800549e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d013      	beq.n	80054d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054a8:	f7fd fc3c 	bl	8002d24 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054b0:	f7fd fc38 	bl	8002d24 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b64      	cmp	r3, #100	; 0x64
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e207      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80054c2:	4b5b      	ldr	r3, [pc, #364]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d0f0      	beq.n	80054b0 <HAL_RCC_OscConfig+0xc0>
 80054ce:	e014      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054d0:	f7fd fc28 	bl	8002d24 <HAL_GetTick>
 80054d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054d6:	e008      	b.n	80054ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80054d8:	f7fd fc24 	bl	8002d24 <HAL_GetTick>
 80054dc:	4602      	mov	r2, r0
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	1ad3      	subs	r3, r2, r3
 80054e2:	2b64      	cmp	r3, #100	; 0x64
 80054e4:	d901      	bls.n	80054ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80054e6:	2303      	movs	r3, #3
 80054e8:	e1f3      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80054ea:	4b51      	ldr	r3, [pc, #324]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d1f0      	bne.n	80054d8 <HAL_RCC_OscConfig+0xe8>
 80054f6:	e000      	b.n	80054fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 0302 	and.w	r3, r3, #2
 8005502:	2b00      	cmp	r3, #0
 8005504:	d063      	beq.n	80055ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005506:	4b4a      	ldr	r3, [pc, #296]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005508:	689b      	ldr	r3, [r3, #8]
 800550a:	f003 030c 	and.w	r3, r3, #12
 800550e:	2b00      	cmp	r3, #0
 8005510:	d00b      	beq.n	800552a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005512:	4b47      	ldr	r3, [pc, #284]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800551a:	2b08      	cmp	r3, #8
 800551c:	d11c      	bne.n	8005558 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800551e:	4b44      	ldr	r3, [pc, #272]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005520:	685b      	ldr	r3, [r3, #4]
 8005522:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005526:	2b00      	cmp	r3, #0
 8005528:	d116      	bne.n	8005558 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800552a:	4b41      	ldr	r3, [pc, #260]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 0302 	and.w	r3, r3, #2
 8005532:	2b00      	cmp	r3, #0
 8005534:	d005      	beq.n	8005542 <HAL_RCC_OscConfig+0x152>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	68db      	ldr	r3, [r3, #12]
 800553a:	2b01      	cmp	r3, #1
 800553c:	d001      	beq.n	8005542 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800553e:	2301      	movs	r3, #1
 8005540:	e1c7      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005542:	4b3b      	ldr	r3, [pc, #236]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	00db      	lsls	r3, r3, #3
 8005550:	4937      	ldr	r1, [pc, #220]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005552:	4313      	orrs	r3, r2
 8005554:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005556:	e03a      	b.n	80055ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	68db      	ldr	r3, [r3, #12]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d020      	beq.n	80055a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005560:	4b34      	ldr	r3, [pc, #208]	; (8005634 <HAL_RCC_OscConfig+0x244>)
 8005562:	2201      	movs	r2, #1
 8005564:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005566:	f7fd fbdd 	bl	8002d24 <HAL_GetTick>
 800556a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800556c:	e008      	b.n	8005580 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800556e:	f7fd fbd9 	bl	8002d24 <HAL_GetTick>
 8005572:	4602      	mov	r2, r0
 8005574:	693b      	ldr	r3, [r7, #16]
 8005576:	1ad3      	subs	r3, r2, r3
 8005578:	2b02      	cmp	r3, #2
 800557a:	d901      	bls.n	8005580 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800557c:	2303      	movs	r3, #3
 800557e:	e1a8      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005580:	4b2b      	ldr	r3, [pc, #172]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0302 	and.w	r3, r3, #2
 8005588:	2b00      	cmp	r3, #0
 800558a:	d0f0      	beq.n	800556e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800558c:	4b28      	ldr	r3, [pc, #160]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	00db      	lsls	r3, r3, #3
 800559a:	4925      	ldr	r1, [pc, #148]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 800559c:	4313      	orrs	r3, r2
 800559e:	600b      	str	r3, [r1, #0]
 80055a0:	e015      	b.n	80055ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80055a2:	4b24      	ldr	r3, [pc, #144]	; (8005634 <HAL_RCC_OscConfig+0x244>)
 80055a4:	2200      	movs	r2, #0
 80055a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055a8:	f7fd fbbc 	bl	8002d24 <HAL_GetTick>
 80055ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055ae:	e008      	b.n	80055c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80055b0:	f7fd fbb8 	bl	8002d24 <HAL_GetTick>
 80055b4:	4602      	mov	r2, r0
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	1ad3      	subs	r3, r2, r3
 80055ba:	2b02      	cmp	r3, #2
 80055bc:	d901      	bls.n	80055c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80055be:	2303      	movs	r3, #3
 80055c0:	e187      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80055c2:	4b1b      	ldr	r3, [pc, #108]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f003 0302 	and.w	r3, r3, #2
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d1f0      	bne.n	80055b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0308 	and.w	r3, r3, #8
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d036      	beq.n	8005648 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d016      	beq.n	8005610 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055e2:	4b15      	ldr	r3, [pc, #84]	; (8005638 <HAL_RCC_OscConfig+0x248>)
 80055e4:	2201      	movs	r2, #1
 80055e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055e8:	f7fd fb9c 	bl	8002d24 <HAL_GetTick>
 80055ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80055ee:	e008      	b.n	8005602 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055f0:	f7fd fb98 	bl	8002d24 <HAL_GetTick>
 80055f4:	4602      	mov	r2, r0
 80055f6:	693b      	ldr	r3, [r7, #16]
 80055f8:	1ad3      	subs	r3, r2, r3
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d901      	bls.n	8005602 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80055fe:	2303      	movs	r3, #3
 8005600:	e167      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005602:	4b0b      	ldr	r3, [pc, #44]	; (8005630 <HAL_RCC_OscConfig+0x240>)
 8005604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005606:	f003 0302 	and.w	r3, r3, #2
 800560a:	2b00      	cmp	r3, #0
 800560c:	d0f0      	beq.n	80055f0 <HAL_RCC_OscConfig+0x200>
 800560e:	e01b      	b.n	8005648 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005610:	4b09      	ldr	r3, [pc, #36]	; (8005638 <HAL_RCC_OscConfig+0x248>)
 8005612:	2200      	movs	r2, #0
 8005614:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005616:	f7fd fb85 	bl	8002d24 <HAL_GetTick>
 800561a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800561c:	e00e      	b.n	800563c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800561e:	f7fd fb81 	bl	8002d24 <HAL_GetTick>
 8005622:	4602      	mov	r2, r0
 8005624:	693b      	ldr	r3, [r7, #16]
 8005626:	1ad3      	subs	r3, r2, r3
 8005628:	2b02      	cmp	r3, #2
 800562a:	d907      	bls.n	800563c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800562c:	2303      	movs	r3, #3
 800562e:	e150      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
 8005630:	40023800 	.word	0x40023800
 8005634:	42470000 	.word	0x42470000
 8005638:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800563c:	4b88      	ldr	r3, [pc, #544]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800563e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005640:	f003 0302 	and.w	r3, r3, #2
 8005644:	2b00      	cmp	r3, #0
 8005646:	d1ea      	bne.n	800561e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f003 0304 	and.w	r3, r3, #4
 8005650:	2b00      	cmp	r3, #0
 8005652:	f000 8097 	beq.w	8005784 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005656:	2300      	movs	r3, #0
 8005658:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800565a:	4b81      	ldr	r3, [pc, #516]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005662:	2b00      	cmp	r3, #0
 8005664:	d10f      	bne.n	8005686 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005666:	2300      	movs	r3, #0
 8005668:	60bb      	str	r3, [r7, #8]
 800566a:	4b7d      	ldr	r3, [pc, #500]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800566c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566e:	4a7c      	ldr	r2, [pc, #496]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 8005670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005674:	6413      	str	r3, [r2, #64]	; 0x40
 8005676:	4b7a      	ldr	r3, [pc, #488]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 8005678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800567e:	60bb      	str	r3, [r7, #8]
 8005680:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005682:	2301      	movs	r3, #1
 8005684:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005686:	4b77      	ldr	r3, [pc, #476]	; (8005864 <HAL_RCC_OscConfig+0x474>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800568e:	2b00      	cmp	r3, #0
 8005690:	d118      	bne.n	80056c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005692:	4b74      	ldr	r3, [pc, #464]	; (8005864 <HAL_RCC_OscConfig+0x474>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a73      	ldr	r2, [pc, #460]	; (8005864 <HAL_RCC_OscConfig+0x474>)
 8005698:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800569c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800569e:	f7fd fb41 	bl	8002d24 <HAL_GetTick>
 80056a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056a4:	e008      	b.n	80056b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80056a6:	f7fd fb3d 	bl	8002d24 <HAL_GetTick>
 80056aa:	4602      	mov	r2, r0
 80056ac:	693b      	ldr	r3, [r7, #16]
 80056ae:	1ad3      	subs	r3, r2, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d901      	bls.n	80056b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80056b4:	2303      	movs	r3, #3
 80056b6:	e10c      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80056b8:	4b6a      	ldr	r3, [pc, #424]	; (8005864 <HAL_RCC_OscConfig+0x474>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d0f0      	beq.n	80056a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	2b01      	cmp	r3, #1
 80056ca:	d106      	bne.n	80056da <HAL_RCC_OscConfig+0x2ea>
 80056cc:	4b64      	ldr	r3, [pc, #400]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80056ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056d0:	4a63      	ldr	r2, [pc, #396]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80056d2:	f043 0301 	orr.w	r3, r3, #1
 80056d6:	6713      	str	r3, [r2, #112]	; 0x70
 80056d8:	e01c      	b.n	8005714 <HAL_RCC_OscConfig+0x324>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2b05      	cmp	r3, #5
 80056e0:	d10c      	bne.n	80056fc <HAL_RCC_OscConfig+0x30c>
 80056e2:	4b5f      	ldr	r3, [pc, #380]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80056e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056e6:	4a5e      	ldr	r2, [pc, #376]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80056e8:	f043 0304 	orr.w	r3, r3, #4
 80056ec:	6713      	str	r3, [r2, #112]	; 0x70
 80056ee:	4b5c      	ldr	r3, [pc, #368]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80056f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056f2:	4a5b      	ldr	r2, [pc, #364]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80056f4:	f043 0301 	orr.w	r3, r3, #1
 80056f8:	6713      	str	r3, [r2, #112]	; 0x70
 80056fa:	e00b      	b.n	8005714 <HAL_RCC_OscConfig+0x324>
 80056fc:	4b58      	ldr	r3, [pc, #352]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80056fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005700:	4a57      	ldr	r2, [pc, #348]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 8005702:	f023 0301 	bic.w	r3, r3, #1
 8005706:	6713      	str	r3, [r2, #112]	; 0x70
 8005708:	4b55      	ldr	r3, [pc, #340]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	4a54      	ldr	r2, [pc, #336]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 0304 	bic.w	r3, r3, #4
 8005712:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	689b      	ldr	r3, [r3, #8]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d015      	beq.n	8005748 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800571c:	f7fd fb02 	bl	8002d24 <HAL_GetTick>
 8005720:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005722:	e00a      	b.n	800573a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005724:	f7fd fafe 	bl	8002d24 <HAL_GetTick>
 8005728:	4602      	mov	r2, r0
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	1ad3      	subs	r3, r2, r3
 800572e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005732:	4293      	cmp	r3, r2
 8005734:	d901      	bls.n	800573a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005736:	2303      	movs	r3, #3
 8005738:	e0cb      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800573a:	4b49      	ldr	r3, [pc, #292]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b00      	cmp	r3, #0
 8005744:	d0ee      	beq.n	8005724 <HAL_RCC_OscConfig+0x334>
 8005746:	e014      	b.n	8005772 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005748:	f7fd faec 	bl	8002d24 <HAL_GetTick>
 800574c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800574e:	e00a      	b.n	8005766 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005750:	f7fd fae8 	bl	8002d24 <HAL_GetTick>
 8005754:	4602      	mov	r2, r0
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	1ad3      	subs	r3, r2, r3
 800575a:	f241 3288 	movw	r2, #5000	; 0x1388
 800575e:	4293      	cmp	r3, r2
 8005760:	d901      	bls.n	8005766 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005762:	2303      	movs	r3, #3
 8005764:	e0b5      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005766:	4b3e      	ldr	r3, [pc, #248]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 8005768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d1ee      	bne.n	8005750 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005772:	7dfb      	ldrb	r3, [r7, #23]
 8005774:	2b01      	cmp	r3, #1
 8005776:	d105      	bne.n	8005784 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005778:	4b39      	ldr	r3, [pc, #228]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800577a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800577c:	4a38      	ldr	r2, [pc, #224]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800577e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005782:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	699b      	ldr	r3, [r3, #24]
 8005788:	2b00      	cmp	r3, #0
 800578a:	f000 80a1 	beq.w	80058d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800578e:	4b34      	ldr	r3, [pc, #208]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	f003 030c 	and.w	r3, r3, #12
 8005796:	2b08      	cmp	r3, #8
 8005798:	d05c      	beq.n	8005854 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	2b02      	cmp	r3, #2
 80057a0:	d141      	bne.n	8005826 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057a2:	4b31      	ldr	r3, [pc, #196]	; (8005868 <HAL_RCC_OscConfig+0x478>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a8:	f7fd fabc 	bl	8002d24 <HAL_GetTick>
 80057ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057ae:	e008      	b.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057b0:	f7fd fab8 	bl	8002d24 <HAL_GetTick>
 80057b4:	4602      	mov	r2, r0
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2b02      	cmp	r3, #2
 80057bc:	d901      	bls.n	80057c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80057be:	2303      	movs	r3, #3
 80057c0:	e087      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	4b27      	ldr	r3, [pc, #156]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d1f0      	bne.n	80057b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	69da      	ldr	r2, [r3, #28]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a1b      	ldr	r3, [r3, #32]
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057dc:	019b      	lsls	r3, r3, #6
 80057de:	431a      	orrs	r2, r3
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e4:	085b      	lsrs	r3, r3, #1
 80057e6:	3b01      	subs	r3, #1
 80057e8:	041b      	lsls	r3, r3, #16
 80057ea:	431a      	orrs	r2, r3
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057f0:	061b      	lsls	r3, r3, #24
 80057f2:	491b      	ldr	r1, [pc, #108]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f8:	4b1b      	ldr	r3, [pc, #108]	; (8005868 <HAL_RCC_OscConfig+0x478>)
 80057fa:	2201      	movs	r2, #1
 80057fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057fe:	f7fd fa91 	bl	8002d24 <HAL_GetTick>
 8005802:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005804:	e008      	b.n	8005818 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005806:	f7fd fa8d 	bl	8002d24 <HAL_GetTick>
 800580a:	4602      	mov	r2, r0
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	1ad3      	subs	r3, r2, r3
 8005810:	2b02      	cmp	r3, #2
 8005812:	d901      	bls.n	8005818 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005814:	2303      	movs	r3, #3
 8005816:	e05c      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005818:	4b11      	ldr	r3, [pc, #68]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005820:	2b00      	cmp	r3, #0
 8005822:	d0f0      	beq.n	8005806 <HAL_RCC_OscConfig+0x416>
 8005824:	e054      	b.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005826:	4b10      	ldr	r3, [pc, #64]	; (8005868 <HAL_RCC_OscConfig+0x478>)
 8005828:	2200      	movs	r2, #0
 800582a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800582c:	f7fd fa7a 	bl	8002d24 <HAL_GetTick>
 8005830:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005832:	e008      	b.n	8005846 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005834:	f7fd fa76 	bl	8002d24 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	693b      	ldr	r3, [r7, #16]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b02      	cmp	r3, #2
 8005840:	d901      	bls.n	8005846 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e045      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005846:	4b06      	ldr	r3, [pc, #24]	; (8005860 <HAL_RCC_OscConfig+0x470>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d1f0      	bne.n	8005834 <HAL_RCC_OscConfig+0x444>
 8005852:	e03d      	b.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d107      	bne.n	800586c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e038      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
 8005860:	40023800 	.word	0x40023800
 8005864:	40007000 	.word	0x40007000
 8005868:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800586c:	4b1b      	ldr	r3, [pc, #108]	; (80058dc <HAL_RCC_OscConfig+0x4ec>)
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	699b      	ldr	r3, [r3, #24]
 8005876:	2b01      	cmp	r3, #1
 8005878:	d028      	beq.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005884:	429a      	cmp	r2, r3
 8005886:	d121      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d11a      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800589c:	4013      	ands	r3, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80058a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d111      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b2:	085b      	lsrs	r3, r3, #1
 80058b4:	3b01      	subs	r3, #1
 80058b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058b8:	429a      	cmp	r2, r3
 80058ba:	d107      	bne.n	80058cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d001      	beq.n	80058d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80058cc:	2301      	movs	r3, #1
 80058ce:	e000      	b.n	80058d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80058d0:	2300      	movs	r3, #0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	40023800 	.word	0x40023800

080058e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	b084      	sub	sp, #16
 80058e4:	af00      	add	r7, sp, #0
 80058e6:	6078      	str	r0, [r7, #4]
 80058e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d101      	bne.n	80058f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058f0:	2301      	movs	r3, #1
 80058f2:	e0cc      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80058f4:	4b68      	ldr	r3, [pc, #416]	; (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	683a      	ldr	r2, [r7, #0]
 80058fe:	429a      	cmp	r2, r3
 8005900:	d90c      	bls.n	800591c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005902:	4b65      	ldr	r3, [pc, #404]	; (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005904:	683a      	ldr	r2, [r7, #0]
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800590a:	4b63      	ldr	r3, [pc, #396]	; (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	683a      	ldr	r2, [r7, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d001      	beq.n	800591c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005918:	2301      	movs	r3, #1
 800591a:	e0b8      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f003 0302 	and.w	r3, r3, #2
 8005924:	2b00      	cmp	r3, #0
 8005926:	d020      	beq.n	800596a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f003 0304 	and.w	r3, r3, #4
 8005930:	2b00      	cmp	r3, #0
 8005932:	d005      	beq.n	8005940 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005936:	689b      	ldr	r3, [r3, #8]
 8005938:	4a58      	ldr	r2, [pc, #352]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800593a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800593e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	f003 0308 	and.w	r3, r3, #8
 8005948:	2b00      	cmp	r3, #0
 800594a:	d005      	beq.n	8005958 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800594c:	4b53      	ldr	r3, [pc, #332]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800594e:	689b      	ldr	r3, [r3, #8]
 8005950:	4a52      	ldr	r2, [pc, #328]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005952:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005956:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005958:	4b50      	ldr	r3, [pc, #320]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 800595a:	689b      	ldr	r3, [r3, #8]
 800595c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	494d      	ldr	r1, [pc, #308]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005966:	4313      	orrs	r3, r2
 8005968:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0301 	and.w	r3, r3, #1
 8005972:	2b00      	cmp	r3, #0
 8005974:	d044      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	685b      	ldr	r3, [r3, #4]
 800597a:	2b01      	cmp	r3, #1
 800597c:	d107      	bne.n	800598e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800597e:	4b47      	ldr	r3, [pc, #284]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005986:	2b00      	cmp	r3, #0
 8005988:	d119      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800598a:	2301      	movs	r3, #1
 800598c:	e07f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	2b02      	cmp	r3, #2
 8005994:	d003      	beq.n	800599e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800599a:	2b03      	cmp	r3, #3
 800599c:	d107      	bne.n	80059ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800599e:	4b3f      	ldr	r3, [pc, #252]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d109      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059aa:	2301      	movs	r3, #1
 80059ac:	e06f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80059ae:	4b3b      	ldr	r3, [pc, #236]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0302 	and.w	r3, r3, #2
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d101      	bne.n	80059be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e067      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80059be:	4b37      	ldr	r3, [pc, #220]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059c0:	689b      	ldr	r3, [r3, #8]
 80059c2:	f023 0203 	bic.w	r2, r3, #3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	4934      	ldr	r1, [pc, #208]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059cc:	4313      	orrs	r3, r2
 80059ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80059d0:	f7fd f9a8 	bl	8002d24 <HAL_GetTick>
 80059d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059d6:	e00a      	b.n	80059ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059d8:	f7fd f9a4 	bl	8002d24 <HAL_GetTick>
 80059dc:	4602      	mov	r2, r0
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	1ad3      	subs	r3, r2, r3
 80059e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d901      	bls.n	80059ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e04f      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059ee:	4b2b      	ldr	r3, [pc, #172]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f003 020c 	and.w	r2, r3, #12
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	009b      	lsls	r3, r3, #2
 80059fc:	429a      	cmp	r2, r3
 80059fe:	d1eb      	bne.n	80059d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005a00:	4b25      	ldr	r3, [pc, #148]	; (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0307 	and.w	r3, r3, #7
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	429a      	cmp	r2, r3
 8005a0c:	d20c      	bcs.n	8005a28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a0e:	4b22      	ldr	r3, [pc, #136]	; (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a10:	683a      	ldr	r2, [r7, #0]
 8005a12:	b2d2      	uxtb	r2, r2
 8005a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a16:	4b20      	ldr	r3, [pc, #128]	; (8005a98 <HAL_RCC_ClockConfig+0x1b8>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	f003 0307 	and.w	r3, r3, #7
 8005a1e:	683a      	ldr	r2, [r7, #0]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d001      	beq.n	8005a28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e032      	b.n	8005a8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f003 0304 	and.w	r3, r3, #4
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d008      	beq.n	8005a46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005a34:	4b19      	ldr	r3, [pc, #100]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68db      	ldr	r3, [r3, #12]
 8005a40:	4916      	ldr	r1, [pc, #88]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a42:	4313      	orrs	r3, r2
 8005a44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f003 0308 	and.w	r3, r3, #8
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d009      	beq.n	8005a66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a54:	689b      	ldr	r3, [r3, #8]
 8005a56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	691b      	ldr	r3, [r3, #16]
 8005a5e:	00db      	lsls	r3, r3, #3
 8005a60:	490e      	ldr	r1, [pc, #56]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a62:	4313      	orrs	r3, r2
 8005a64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005a66:	f000 f821 	bl	8005aac <HAL_RCC_GetSysClockFreq>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	4b0b      	ldr	r3, [pc, #44]	; (8005a9c <HAL_RCC_ClockConfig+0x1bc>)
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	091b      	lsrs	r3, r3, #4
 8005a72:	f003 030f 	and.w	r3, r3, #15
 8005a76:	490a      	ldr	r1, [pc, #40]	; (8005aa0 <HAL_RCC_ClockConfig+0x1c0>)
 8005a78:	5ccb      	ldrb	r3, [r1, r3]
 8005a7a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a7e:	4a09      	ldr	r2, [pc, #36]	; (8005aa4 <HAL_RCC_ClockConfig+0x1c4>)
 8005a80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a82:	4b09      	ldr	r3, [pc, #36]	; (8005aa8 <HAL_RCC_ClockConfig+0x1c8>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4618      	mov	r0, r3
 8005a88:	f7fd f908 	bl	8002c9c <HAL_InitTick>

  return HAL_OK;
 8005a8c:	2300      	movs	r3, #0
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	40023c00 	.word	0x40023c00
 8005a9c:	40023800 	.word	0x40023800
 8005aa0:	0800bb24 	.word	0x0800bb24
 8005aa4:	20000020 	.word	0x20000020
 8005aa8:	20000024 	.word	0x20000024

08005aac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005aac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ab0:	b094      	sub	sp, #80	; 0x50
 8005ab2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab8:	2300      	movs	r3, #0
 8005aba:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005abc:	2300      	movs	r3, #0
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005ac4:	4b79      	ldr	r3, [pc, #484]	; (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f003 030c 	and.w	r3, r3, #12
 8005acc:	2b08      	cmp	r3, #8
 8005ace:	d00d      	beq.n	8005aec <HAL_RCC_GetSysClockFreq+0x40>
 8005ad0:	2b08      	cmp	r3, #8
 8005ad2:	f200 80e1 	bhi.w	8005c98 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_RCC_GetSysClockFreq+0x34>
 8005ada:	2b04      	cmp	r3, #4
 8005adc:	d003      	beq.n	8005ae6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005ade:	e0db      	b.n	8005c98 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ae0:	4b73      	ldr	r3, [pc, #460]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ae2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ae4:	e0db      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ae6:	4b73      	ldr	r3, [pc, #460]	; (8005cb4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005aea:	e0d8      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005aec:	4b6f      	ldr	r3, [pc, #444]	; (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005af4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005af6:	4b6d      	ldr	r3, [pc, #436]	; (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d063      	beq.n	8005bca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b02:	4b6a      	ldr	r3, [pc, #424]	; (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005b04:	685b      	ldr	r3, [r3, #4]
 8005b06:	099b      	lsrs	r3, r3, #6
 8005b08:	2200      	movs	r2, #0
 8005b0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005b0c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005b0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b10:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b14:	633b      	str	r3, [r7, #48]	; 0x30
 8005b16:	2300      	movs	r3, #0
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005b1e:	4622      	mov	r2, r4
 8005b20:	462b      	mov	r3, r5
 8005b22:	f04f 0000 	mov.w	r0, #0
 8005b26:	f04f 0100 	mov.w	r1, #0
 8005b2a:	0159      	lsls	r1, r3, #5
 8005b2c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b30:	0150      	lsls	r0, r2, #5
 8005b32:	4602      	mov	r2, r0
 8005b34:	460b      	mov	r3, r1
 8005b36:	4621      	mov	r1, r4
 8005b38:	1a51      	subs	r1, r2, r1
 8005b3a:	6139      	str	r1, [r7, #16]
 8005b3c:	4629      	mov	r1, r5
 8005b3e:	eb63 0301 	sbc.w	r3, r3, r1
 8005b42:	617b      	str	r3, [r7, #20]
 8005b44:	f04f 0200 	mov.w	r2, #0
 8005b48:	f04f 0300 	mov.w	r3, #0
 8005b4c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b50:	4659      	mov	r1, fp
 8005b52:	018b      	lsls	r3, r1, #6
 8005b54:	4651      	mov	r1, sl
 8005b56:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005b5a:	4651      	mov	r1, sl
 8005b5c:	018a      	lsls	r2, r1, #6
 8005b5e:	4651      	mov	r1, sl
 8005b60:	ebb2 0801 	subs.w	r8, r2, r1
 8005b64:	4659      	mov	r1, fp
 8005b66:	eb63 0901 	sbc.w	r9, r3, r1
 8005b6a:	f04f 0200 	mov.w	r2, #0
 8005b6e:	f04f 0300 	mov.w	r3, #0
 8005b72:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b76:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b7a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b7e:	4690      	mov	r8, r2
 8005b80:	4699      	mov	r9, r3
 8005b82:	4623      	mov	r3, r4
 8005b84:	eb18 0303 	adds.w	r3, r8, r3
 8005b88:	60bb      	str	r3, [r7, #8]
 8005b8a:	462b      	mov	r3, r5
 8005b8c:	eb49 0303 	adc.w	r3, r9, r3
 8005b90:	60fb      	str	r3, [r7, #12]
 8005b92:	f04f 0200 	mov.w	r2, #0
 8005b96:	f04f 0300 	mov.w	r3, #0
 8005b9a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b9e:	4629      	mov	r1, r5
 8005ba0:	024b      	lsls	r3, r1, #9
 8005ba2:	4621      	mov	r1, r4
 8005ba4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005ba8:	4621      	mov	r1, r4
 8005baa:	024a      	lsls	r2, r1, #9
 8005bac:	4610      	mov	r0, r2
 8005bae:	4619      	mov	r1, r3
 8005bb0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bb2:	2200      	movs	r2, #0
 8005bb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005bb6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005bb8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005bbc:	f7fa fb68 	bl	8000290 <__aeabi_uldivmod>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4613      	mov	r3, r2
 8005bc6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bc8:	e058      	b.n	8005c7c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bca:	4b38      	ldr	r3, [pc, #224]	; (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	099b      	lsrs	r3, r3, #6
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	4611      	mov	r1, r2
 8005bd6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005bda:	623b      	str	r3, [r7, #32]
 8005bdc:	2300      	movs	r3, #0
 8005bde:	627b      	str	r3, [r7, #36]	; 0x24
 8005be0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005be4:	4642      	mov	r2, r8
 8005be6:	464b      	mov	r3, r9
 8005be8:	f04f 0000 	mov.w	r0, #0
 8005bec:	f04f 0100 	mov.w	r1, #0
 8005bf0:	0159      	lsls	r1, r3, #5
 8005bf2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf6:	0150      	lsls	r0, r2, #5
 8005bf8:	4602      	mov	r2, r0
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	4641      	mov	r1, r8
 8005bfe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005c02:	4649      	mov	r1, r9
 8005c04:	eb63 0b01 	sbc.w	fp, r3, r1
 8005c08:	f04f 0200 	mov.w	r2, #0
 8005c0c:	f04f 0300 	mov.w	r3, #0
 8005c10:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005c14:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005c18:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005c1c:	ebb2 040a 	subs.w	r4, r2, sl
 8005c20:	eb63 050b 	sbc.w	r5, r3, fp
 8005c24:	f04f 0200 	mov.w	r2, #0
 8005c28:	f04f 0300 	mov.w	r3, #0
 8005c2c:	00eb      	lsls	r3, r5, #3
 8005c2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005c32:	00e2      	lsls	r2, r4, #3
 8005c34:	4614      	mov	r4, r2
 8005c36:	461d      	mov	r5, r3
 8005c38:	4643      	mov	r3, r8
 8005c3a:	18e3      	adds	r3, r4, r3
 8005c3c:	603b      	str	r3, [r7, #0]
 8005c3e:	464b      	mov	r3, r9
 8005c40:	eb45 0303 	adc.w	r3, r5, r3
 8005c44:	607b      	str	r3, [r7, #4]
 8005c46:	f04f 0200 	mov.w	r2, #0
 8005c4a:	f04f 0300 	mov.w	r3, #0
 8005c4e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005c52:	4629      	mov	r1, r5
 8005c54:	028b      	lsls	r3, r1, #10
 8005c56:	4621      	mov	r1, r4
 8005c58:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005c5c:	4621      	mov	r1, r4
 8005c5e:	028a      	lsls	r2, r1, #10
 8005c60:	4610      	mov	r0, r2
 8005c62:	4619      	mov	r1, r3
 8005c64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c66:	2200      	movs	r2, #0
 8005c68:	61bb      	str	r3, [r7, #24]
 8005c6a:	61fa      	str	r2, [r7, #28]
 8005c6c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c70:	f7fa fb0e 	bl	8000290 <__aeabi_uldivmod>
 8005c74:	4602      	mov	r2, r0
 8005c76:	460b      	mov	r3, r1
 8005c78:	4613      	mov	r3, r2
 8005c7a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c7c:	4b0b      	ldr	r3, [pc, #44]	; (8005cac <HAL_RCC_GetSysClockFreq+0x200>)
 8005c7e:	685b      	ldr	r3, [r3, #4]
 8005c80:	0c1b      	lsrs	r3, r3, #16
 8005c82:	f003 0303 	and.w	r3, r3, #3
 8005c86:	3301      	adds	r3, #1
 8005c88:	005b      	lsls	r3, r3, #1
 8005c8a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c94:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c96:	e002      	b.n	8005c9e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c98:	4b05      	ldr	r3, [pc, #20]	; (8005cb0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c9a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	3750      	adds	r7, #80	; 0x50
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005caa:	bf00      	nop
 8005cac:	40023800 	.word	0x40023800
 8005cb0:	00f42400 	.word	0x00f42400
 8005cb4:	007a1200 	.word	0x007a1200

08005cb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005cb8:	b480      	push	{r7}
 8005cba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005cbc:	4b03      	ldr	r3, [pc, #12]	; (8005ccc <HAL_RCC_GetHCLKFreq+0x14>)
 8005cbe:	681b      	ldr	r3, [r3, #0]
}
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	46bd      	mov	sp, r7
 8005cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000020 	.word	0x20000020

08005cd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005cd4:	f7ff fff0 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005cd8:	4602      	mov	r2, r0
 8005cda:	4b05      	ldr	r3, [pc, #20]	; (8005cf0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	0a9b      	lsrs	r3, r3, #10
 8005ce0:	f003 0307 	and.w	r3, r3, #7
 8005ce4:	4903      	ldr	r1, [pc, #12]	; (8005cf4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005ce6:	5ccb      	ldrb	r3, [r1, r3]
 8005ce8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005cec:	4618      	mov	r0, r3
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40023800 	.word	0x40023800
 8005cf4:	0800bb34 	.word	0x0800bb34

08005cf8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005cfc:	f7ff ffdc 	bl	8005cb8 <HAL_RCC_GetHCLKFreq>
 8005d00:	4602      	mov	r2, r0
 8005d02:	4b05      	ldr	r3, [pc, #20]	; (8005d18 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005d04:	689b      	ldr	r3, [r3, #8]
 8005d06:	0b5b      	lsrs	r3, r3, #13
 8005d08:	f003 0307 	and.w	r3, r3, #7
 8005d0c:	4903      	ldr	r1, [pc, #12]	; (8005d1c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005d0e:	5ccb      	ldrb	r3, [r1, r3]
 8005d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005d14:	4618      	mov	r0, r3
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	40023800 	.word	0x40023800
 8005d1c:	0800bb34 	.word	0x0800bb34

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005d28:	2300      	movs	r3, #0
 8005d2a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f003 0301 	and.w	r3, r3, #1
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d105      	bne.n	8005d48 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d038      	beq.n	8005dba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005d48:	4b68      	ldr	r3, [pc, #416]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d4a:	2200      	movs	r2, #0
 8005d4c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d4e:	f7fc ffe9 	bl	8002d24 <HAL_GetTick>
 8005d52:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d54:	e008      	b.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d56:	f7fc ffe5 	bl	8002d24 <HAL_GetTick>
 8005d5a:	4602      	mov	r2, r0
 8005d5c:	697b      	ldr	r3, [r7, #20]
 8005d5e:	1ad3      	subs	r3, r2, r3
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d901      	bls.n	8005d68 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005d64:	2303      	movs	r3, #3
 8005d66:	e0bd      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005d68:	4b61      	ldr	r3, [pc, #388]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d1f0      	bne.n	8005d56 <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	689b      	ldr	r3, [r3, #8]
 8005d7c:	019b      	lsls	r3, r3, #6
 8005d7e:	431a      	orrs	r2, r3
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	071b      	lsls	r3, r3, #28
 8005d86:	495a      	ldr	r1, [pc, #360]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005d8e:	4b57      	ldr	r3, [pc, #348]	; (8005eec <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8005d90:	2201      	movs	r2, #1
 8005d92:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d94:	f7fc ffc6 	bl	8002d24 <HAL_GetTick>
 8005d98:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005d9a:	e008      	b.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005d9c:	f7fc ffc2 	bl	8002d24 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	697b      	ldr	r3, [r7, #20]
 8005da4:	1ad3      	subs	r3, r2, r3
 8005da6:	2b02      	cmp	r3, #2
 8005da8:	d901      	bls.n	8005dae <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e09a      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005dae:	4b50      	ldr	r3, [pc, #320]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d0f0      	beq.n	8005d9c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8083 	beq.w	8005ece <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005dc8:	2300      	movs	r3, #0
 8005dca:	60fb      	str	r3, [r7, #12]
 8005dcc:	4b48      	ldr	r3, [pc, #288]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dd0:	4a47      	ldr	r2, [pc, #284]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dd2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd6:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd8:	4b45      	ldr	r3, [pc, #276]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ddc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005de0:	60fb      	str	r3, [r7, #12]
 8005de2:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005de4:	4b43      	ldr	r3, [pc, #268]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	4a42      	ldr	r2, [pc, #264]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dee:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005df0:	f7fc ff98 	bl	8002d24 <HAL_GetTick>
 8005df4:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005df8:	f7fc ff94 	bl	8002d24 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	697b      	ldr	r3, [r7, #20]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e06c      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e0a:	4b3a      	ldr	r3, [pc, #232]	; (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d0f0      	beq.n	8005df8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005e16:	4b36      	ldr	r3, [pc, #216]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e1a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e1e:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005e20:	693b      	ldr	r3, [r7, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d02f      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	691b      	ldr	r3, [r3, #16]
 8005e2a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	429a      	cmp	r2, r3
 8005e32:	d028      	beq.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005e34:	4b2e      	ldr	r3, [pc, #184]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e3c:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005e3e:	4b2e      	ldr	r3, [pc, #184]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e40:	2201      	movs	r2, #1
 8005e42:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005e44:	4b2c      	ldr	r3, [pc, #176]	; (8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005e46:	2200      	movs	r2, #0
 8005e48:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005e4a:	4a29      	ldr	r2, [pc, #164]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d114      	bne.n	8005e86 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005e5c:	f7fc ff62 	bl	8002d24 <HAL_GetTick>
 8005e60:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e62:	e00a      	b.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e64:	f7fc ff5e 	bl	8002d24 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	1ad3      	subs	r3, r2, r3
 8005e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e72:	4293      	cmp	r3, r2
 8005e74:	d901      	bls.n	8005e7a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e034      	b.n	8005ee4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e7e:	f003 0302 	and.w	r3, r3, #2
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d0ee      	beq.n	8005e64 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005e92:	d10d      	bne.n	8005eb0 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8005e94:	4b16      	ldr	r3, [pc, #88]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	691b      	ldr	r3, [r3, #16]
 8005ea0:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea8:	4911      	ldr	r1, [pc, #68]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eaa:	4313      	orrs	r3, r2
 8005eac:	608b      	str	r3, [r1, #8]
 8005eae:	e005      	b.n	8005ebc <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8005eb0:	4b0f      	ldr	r3, [pc, #60]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	4a0e      	ldr	r2, [pc, #56]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eb6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005eba:	6093      	str	r3, [r2, #8]
 8005ebc:	4b0c      	ldr	r3, [pc, #48]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005ebe:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005ec8:	4909      	ldr	r1, [pc, #36]	; (8005ef0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f003 0308 	and.w	r3, r3, #8
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	7d1a      	ldrb	r2, [r3, #20]
 8005ede:	4b07      	ldr	r3, [pc, #28]	; (8005efc <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8005ee0:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3718      	adds	r7, #24
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}
 8005eec:	42470068 	.word	0x42470068
 8005ef0:	40023800 	.word	0x40023800
 8005ef4:	40007000 	.word	0x40007000
 8005ef8:	42470e40 	.word	0x42470e40
 8005efc:	424711e0 	.word	0x424711e0

08005f00 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005f08:	2300      	movs	r3, #0
 8005f0a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f10:	2300      	movs	r3, #0
 8005f12:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f14:	2300      	movs	r3, #0
 8005f16:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b01      	cmp	r3, #1
 8005f1c:	d140      	bne.n	8005fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005f1e:	4b24      	ldr	r3, [pc, #144]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005f26:	60fb      	str	r3, [r7, #12]
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d005      	beq.n	8005f3a <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2b01      	cmp	r3, #1
 8005f32:	d131      	bne.n	8005f98 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005f34:	4b1f      	ldr	r3, [pc, #124]	; (8005fb4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005f36:	617b      	str	r3, [r7, #20]
          break;
 8005f38:	e031      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
      case RCC_I2SCLKSOURCE_PLLI2S:
        {
#if defined(STM32F411xE)
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005f3a:	4b1d      	ldr	r3, [pc, #116]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005f42:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005f46:	d109      	bne.n	8005f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f48:	4b19      	ldr	r3, [pc, #100]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f4a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f52:	4a19      	ldr	r2, [pc, #100]	; (8005fb8 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005f54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f58:	613b      	str	r3, [r7, #16]
 8005f5a:	e008      	b.n	8005f6e <HAL_RCCEx_GetPeriphCLKFreq+0x6e>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8005f5c:	4b14      	ldr	r3, [pc, #80]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f5e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005f66:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8005f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f6c:	613b      	str	r3, [r7, #16]
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005f6e:	4b10      	ldr	r3, [pc, #64]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f74:	099b      	lsrs	r3, r3, #6
 8005f76:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	fb02 f303 	mul.w	r3, r2, r3
 8005f80:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005f82:	4b0b      	ldr	r3, [pc, #44]	; (8005fb0 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005f84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005f88:	0f1b      	lsrs	r3, r3, #28
 8005f8a:	f003 0307 	and.w	r3, r3, #7
 8005f8e:	68ba      	ldr	r2, [r7, #8]
 8005f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005f94:	617b      	str	r3, [r7, #20]
          break;
 8005f96:	e002      	b.n	8005f9e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	617b      	str	r3, [r7, #20]
          break;
 8005f9c:	bf00      	nop
        }
      }
      break;
 8005f9e:	bf00      	nop
    }
  }
  return frequency;
 8005fa0:	697b      	ldr	r3, [r7, #20]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	371c      	adds	r7, #28
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr
 8005fae:	bf00      	nop
 8005fb0:	40023800 	.word	0x40023800
 8005fb4:	00bb8000 	.word	0x00bb8000
 8005fb8:	007a1200 	.word	0x007a1200
 8005fbc:	00f42400 	.word	0x00f42400

08005fc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005fc0:	b580      	push	{r7, lr}
 8005fc2:	b082      	sub	sp, #8
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d101      	bne.n	8005fd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005fce:	2301      	movs	r3, #1
 8005fd0:	e07b      	b.n	80060ca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d108      	bne.n	8005fec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005fe2:	d009      	beq.n	8005ff8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	61da      	str	r2, [r3, #28]
 8005fea:	e005      	b.n	8005ff8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006004:	b2db      	uxtb	r3, r3
 8006006:	2b00      	cmp	r3, #0
 8006008:	d106      	bne.n	8006018 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2200      	movs	r2, #0
 800600e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f7fc fc5c 	bl	80028d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2202      	movs	r2, #2
 800601c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	681a      	ldr	r2, [r3, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800602e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	685b      	ldr	r3, [r3, #4]
 8006034:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006040:	431a      	orrs	r2, r3
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800604a:	431a      	orrs	r2, r3
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	691b      	ldr	r3, [r3, #16]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	431a      	orrs	r2, r3
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	695b      	ldr	r3, [r3, #20]
 800605a:	f003 0301 	and.w	r3, r3, #1
 800605e:	431a      	orrs	r2, r3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006068:	431a      	orrs	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	69db      	ldr	r3, [r3, #28]
 800606e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006072:	431a      	orrs	r2, r3
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6a1b      	ldr	r3, [r3, #32]
 8006078:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800607c:	ea42 0103 	orr.w	r1, r2, r3
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006084:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	430a      	orrs	r2, r1
 800608e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	699b      	ldr	r3, [r3, #24]
 8006094:	0c1b      	lsrs	r3, r3, #16
 8006096:	f003 0104 	and.w	r1, r3, #4
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609e:	f003 0210 	and.w	r2, r3, #16
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	430a      	orrs	r2, r1
 80060a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	69da      	ldr	r2, [r3, #28]
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80060b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	2200      	movs	r2, #0
 80060be:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2201      	movs	r2, #1
 80060c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b088      	sub	sp, #32
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	60f8      	str	r0, [r7, #12]
 80060da:	60b9      	str	r1, [r7, #8]
 80060dc:	603b      	str	r3, [r7, #0]
 80060de:	4613      	mov	r3, r2
 80060e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80060e2:	2300      	movs	r3, #0
 80060e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d101      	bne.n	80060f4 <HAL_SPI_Transmit+0x22>
 80060f0:	2302      	movs	r3, #2
 80060f2:	e126      	b.n	8006342 <HAL_SPI_Transmit+0x270>
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	2201      	movs	r2, #1
 80060f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80060fc:	f7fc fe12 	bl	8002d24 <HAL_GetTick>
 8006100:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006102:	88fb      	ldrh	r3, [r7, #6]
 8006104:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b01      	cmp	r3, #1
 8006110:	d002      	beq.n	8006118 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006112:	2302      	movs	r3, #2
 8006114:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006116:	e10b      	b.n	8006330 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d002      	beq.n	8006124 <HAL_SPI_Transmit+0x52>
 800611e:	88fb      	ldrh	r3, [r7, #6]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d102      	bne.n	800612a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006124:	2301      	movs	r3, #1
 8006126:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006128:	e102      	b.n	8006330 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	2203      	movs	r2, #3
 800612e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	2200      	movs	r2, #0
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	68ba      	ldr	r2, [r7, #8]
 800613c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	88fa      	ldrh	r2, [r7, #6]
 8006142:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	88fa      	ldrh	r2, [r7, #6]
 8006148:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	2200      	movs	r2, #0
 800614e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2200      	movs	r2, #0
 8006154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	2200      	movs	r2, #0
 8006160:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	2200      	movs	r2, #0
 8006166:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	689b      	ldr	r3, [r3, #8]
 800616c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006170:	d10f      	bne.n	8006192 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006180:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	681a      	ldr	r2, [r3, #0]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006190:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800619c:	2b40      	cmp	r3, #64	; 0x40
 800619e:	d007      	beq.n	80061b0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	681a      	ldr	r2, [r3, #0]
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80061ae:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	68db      	ldr	r3, [r3, #12]
 80061b4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b8:	d14b      	bne.n	8006252 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_SPI_Transmit+0xf6>
 80061c2:	8afb      	ldrh	r3, [r7, #22]
 80061c4:	2b01      	cmp	r3, #1
 80061c6:	d13e      	bne.n	8006246 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061cc:	881a      	ldrh	r2, [r3, #0]
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061d8:	1c9a      	adds	r2, r3, #2
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	3b01      	subs	r3, #1
 80061e6:	b29a      	uxth	r2, r3
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80061ec:	e02b      	b.n	8006246 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	689b      	ldr	r3, [r3, #8]
 80061f4:	f003 0302 	and.w	r3, r3, #2
 80061f8:	2b02      	cmp	r3, #2
 80061fa:	d112      	bne.n	8006222 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006200:	881a      	ldrh	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800620c:	1c9a      	adds	r2, r3, #2
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006216:	b29b      	uxth	r3, r3
 8006218:	3b01      	subs	r3, #1
 800621a:	b29a      	uxth	r2, r3
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	86da      	strh	r2, [r3, #54]	; 0x36
 8006220:	e011      	b.n	8006246 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006222:	f7fc fd7f 	bl	8002d24 <HAL_GetTick>
 8006226:	4602      	mov	r2, r0
 8006228:	69bb      	ldr	r3, [r7, #24]
 800622a:	1ad3      	subs	r3, r2, r3
 800622c:	683a      	ldr	r2, [r7, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	d803      	bhi.n	800623a <HAL_SPI_Transmit+0x168>
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006238:	d102      	bne.n	8006240 <HAL_SPI_Transmit+0x16e>
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d102      	bne.n	8006246 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8006240:	2303      	movs	r3, #3
 8006242:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006244:	e074      	b.n	8006330 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800624a:	b29b      	uxth	r3, r3
 800624c:	2b00      	cmp	r3, #0
 800624e:	d1ce      	bne.n	80061ee <HAL_SPI_Transmit+0x11c>
 8006250:	e04c      	b.n	80062ec <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	685b      	ldr	r3, [r3, #4]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d002      	beq.n	8006260 <HAL_SPI_Transmit+0x18e>
 800625a:	8afb      	ldrh	r3, [r7, #22]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d140      	bne.n	80062e2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	330c      	adds	r3, #12
 800626a:	7812      	ldrb	r2, [r2, #0]
 800626c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800626e:	68fb      	ldr	r3, [r7, #12]
 8006270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800627c:	b29b      	uxth	r3, r3
 800627e:	3b01      	subs	r3, #1
 8006280:	b29a      	uxth	r2, r3
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006286:	e02c      	b.n	80062e2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	689b      	ldr	r3, [r3, #8]
 800628e:	f003 0302 	and.w	r3, r3, #2
 8006292:	2b02      	cmp	r3, #2
 8006294:	d113      	bne.n	80062be <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	330c      	adds	r3, #12
 80062a0:	7812      	ldrb	r2, [r2, #0]
 80062a2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80062a4:	68fb      	ldr	r3, [r7, #12]
 80062a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062a8:	1c5a      	adds	r2, r3, #1
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062b2:	b29b      	uxth	r3, r3
 80062b4:	3b01      	subs	r3, #1
 80062b6:	b29a      	uxth	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	86da      	strh	r2, [r3, #54]	; 0x36
 80062bc:	e011      	b.n	80062e2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80062be:	f7fc fd31 	bl	8002d24 <HAL_GetTick>
 80062c2:	4602      	mov	r2, r0
 80062c4:	69bb      	ldr	r3, [r7, #24]
 80062c6:	1ad3      	subs	r3, r2, r3
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d803      	bhi.n	80062d6 <HAL_SPI_Transmit+0x204>
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062d4:	d102      	bne.n	80062dc <HAL_SPI_Transmit+0x20a>
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d102      	bne.n	80062e2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80062dc:	2303      	movs	r3, #3
 80062de:	77fb      	strb	r3, [r7, #31]
          goto error;
 80062e0:	e026      	b.n	8006330 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80062e6:	b29b      	uxth	r3, r3
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d1cd      	bne.n	8006288 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80062ec:	69ba      	ldr	r2, [r7, #24]
 80062ee:	6839      	ldr	r1, [r7, #0]
 80062f0:	68f8      	ldr	r0, [r7, #12]
 80062f2:	f000 f8b3 	bl	800645c <SPI_EndRxTxTransaction>
 80062f6:	4603      	mov	r3, r0
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d002      	beq.n	8006302 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2220      	movs	r2, #32
 8006300:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	689b      	ldr	r3, [r3, #8]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d10a      	bne.n	8006320 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800630a:	2300      	movs	r3, #0
 800630c:	613b      	str	r3, [r7, #16]
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	68db      	ldr	r3, [r3, #12]
 8006314:	613b      	str	r3, [r7, #16]
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	689b      	ldr	r3, [r3, #8]
 800631c:	613b      	str	r3, [r7, #16]
 800631e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006324:	2b00      	cmp	r3, #0
 8006326:	d002      	beq.n	800632e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	77fb      	strb	r3, [r7, #31]
 800632c:	e000      	b.n	8006330 <HAL_SPI_Transmit+0x25e>
  }

error:
 800632e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	2200      	movs	r2, #0
 800633c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006340:	7ffb      	ldrb	r3, [r7, #31]
}
 8006342:	4618      	mov	r0, r3
 8006344:	3720      	adds	r7, #32
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
	...

0800634c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b088      	sub	sp, #32
 8006350:	af00      	add	r7, sp, #0
 8006352:	60f8      	str	r0, [r7, #12]
 8006354:	60b9      	str	r1, [r7, #8]
 8006356:	603b      	str	r3, [r7, #0]
 8006358:	4613      	mov	r3, r2
 800635a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800635c:	f7fc fce2 	bl	8002d24 <HAL_GetTick>
 8006360:	4602      	mov	r2, r0
 8006362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006364:	1a9b      	subs	r3, r3, r2
 8006366:	683a      	ldr	r2, [r7, #0]
 8006368:	4413      	add	r3, r2
 800636a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800636c:	f7fc fcda 	bl	8002d24 <HAL_GetTick>
 8006370:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006372:	4b39      	ldr	r3, [pc, #228]	; (8006458 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	015b      	lsls	r3, r3, #5
 8006378:	0d1b      	lsrs	r3, r3, #20
 800637a:	69fa      	ldr	r2, [r7, #28]
 800637c:	fb02 f303 	mul.w	r3, r2, r3
 8006380:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006382:	e054      	b.n	800642e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006384:	683b      	ldr	r3, [r7, #0]
 8006386:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800638a:	d050      	beq.n	800642e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800638c:	f7fc fcca 	bl	8002d24 <HAL_GetTick>
 8006390:	4602      	mov	r2, r0
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	1ad3      	subs	r3, r2, r3
 8006396:	69fa      	ldr	r2, [r7, #28]
 8006398:	429a      	cmp	r2, r3
 800639a:	d902      	bls.n	80063a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800639c:	69fb      	ldr	r3, [r7, #28]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d13d      	bne.n	800641e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	685a      	ldr	r2, [r3, #4]
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80063b0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	685b      	ldr	r3, [r3, #4]
 80063b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80063ba:	d111      	bne.n	80063e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	689b      	ldr	r3, [r3, #8]
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c4:	d004      	beq.n	80063d0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	689b      	ldr	r3, [r3, #8]
 80063ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80063ce:	d107      	bne.n	80063e0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063de:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063e8:	d10f      	bne.n	800640a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	681a      	ldr	r2, [r3, #0]
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80063f8:	601a      	str	r2, [r3, #0]
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006408:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	2200      	movs	r2, #0
 8006416:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800641a:	2303      	movs	r3, #3
 800641c:	e017      	b.n	800644e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800641e:	697b      	ldr	r3, [r7, #20]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d101      	bne.n	8006428 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006428:	697b      	ldr	r3, [r7, #20]
 800642a:	3b01      	subs	r3, #1
 800642c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	689a      	ldr	r2, [r3, #8]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	4013      	ands	r3, r2
 8006438:	68ba      	ldr	r2, [r7, #8]
 800643a:	429a      	cmp	r2, r3
 800643c:	bf0c      	ite	eq
 800643e:	2301      	moveq	r3, #1
 8006440:	2300      	movne	r3, #0
 8006442:	b2db      	uxtb	r3, r3
 8006444:	461a      	mov	r2, r3
 8006446:	79fb      	ldrb	r3, [r7, #7]
 8006448:	429a      	cmp	r2, r3
 800644a:	d19b      	bne.n	8006384 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800644c:	2300      	movs	r3, #0
}
 800644e:	4618      	mov	r0, r3
 8006450:	3720      	adds	r7, #32
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000020 	.word	0x20000020

0800645c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b088      	sub	sp, #32
 8006460:	af02      	add	r7, sp, #8
 8006462:	60f8      	str	r0, [r7, #12]
 8006464:	60b9      	str	r1, [r7, #8]
 8006466:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006468:	4b1b      	ldr	r3, [pc, #108]	; (80064d8 <SPI_EndRxTxTransaction+0x7c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	4a1b      	ldr	r2, [pc, #108]	; (80064dc <SPI_EndRxTxTransaction+0x80>)
 800646e:	fba2 2303 	umull	r2, r3, r2, r3
 8006472:	0d5b      	lsrs	r3, r3, #21
 8006474:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006478:	fb02 f303 	mul.w	r3, r2, r3
 800647c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	685b      	ldr	r3, [r3, #4]
 8006482:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006486:	d112      	bne.n	80064ae <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	9300      	str	r3, [sp, #0]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	2200      	movs	r2, #0
 8006490:	2180      	movs	r1, #128	; 0x80
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff ff5a 	bl	800634c <SPI_WaitFlagStateUntilTimeout>
 8006498:	4603      	mov	r3, r0
 800649a:	2b00      	cmp	r3, #0
 800649c:	d016      	beq.n	80064cc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064a2:	f043 0220 	orr.w	r2, r3, #32
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80064aa:	2303      	movs	r3, #3
 80064ac:	e00f      	b.n	80064ce <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	2b00      	cmp	r3, #0
 80064b2:	d00a      	beq.n	80064ca <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	3b01      	subs	r3, #1
 80064b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689b      	ldr	r3, [r3, #8]
 80064c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064c4:	2b80      	cmp	r3, #128	; 0x80
 80064c6:	d0f2      	beq.n	80064ae <SPI_EndRxTxTransaction+0x52>
 80064c8:	e000      	b.n	80064cc <SPI_EndRxTxTransaction+0x70>
        break;
 80064ca:	bf00      	nop
  }

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3718      	adds	r7, #24
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}
 80064d6:	bf00      	nop
 80064d8:	20000020 	.word	0x20000020
 80064dc:	165e9f81 	.word	0x165e9f81

080064e0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b082      	sub	sp, #8
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e03f      	b.n	8006572 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064f8:	b2db      	uxtb	r3, r3
 80064fa:	2b00      	cmp	r3, #0
 80064fc:	d106      	bne.n	800650c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f7fc fb14 	bl	8002b34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2224      	movs	r2, #36	; 0x24
 8006510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68da      	ldr	r2, [r3, #12]
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006522:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 f9cb 	bl	80068c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006538:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	695a      	ldr	r2, [r3, #20]
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006548:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	68da      	ldr	r2, [r3, #12]
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006558:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2220      	movs	r2, #32
 8006564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3708      	adds	r7, #8
 8006576:	46bd      	mov	sp, r7
 8006578:	bd80      	pop	{r7, pc}

0800657a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800657a:	b580      	push	{r7, lr}
 800657c:	b08a      	sub	sp, #40	; 0x28
 800657e:	af02      	add	r7, sp, #8
 8006580:	60f8      	str	r0, [r7, #12]
 8006582:	60b9      	str	r1, [r7, #8]
 8006584:	603b      	str	r3, [r7, #0]
 8006586:	4613      	mov	r3, r2
 8006588:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006594:	b2db      	uxtb	r3, r3
 8006596:	2b20      	cmp	r3, #32
 8006598:	d17c      	bne.n	8006694 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d002      	beq.n	80065a6 <HAL_UART_Transmit+0x2c>
 80065a0:	88fb      	ldrh	r3, [r7, #6]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e075      	b.n	8006696 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_UART_Transmit+0x3e>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e06e      	b.n	8006696 <HAL_UART_Transmit+0x11c>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	2200      	movs	r2, #0
 80065c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2221      	movs	r2, #33	; 0x21
 80065ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065ce:	f7fc fba9 	bl	8002d24 <HAL_GetTick>
 80065d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	88fa      	ldrh	r2, [r7, #6]
 80065d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065e8:	d108      	bne.n	80065fc <HAL_UART_Transmit+0x82>
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d104      	bne.n	80065fc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80065f2:	2300      	movs	r3, #0
 80065f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	61bb      	str	r3, [r7, #24]
 80065fa:	e003      	b.n	8006604 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006600:	2300      	movs	r3, #0
 8006602:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800660c:	e02a      	b.n	8006664 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800660e:	683b      	ldr	r3, [r7, #0]
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	2200      	movs	r2, #0
 8006616:	2180      	movs	r1, #128	; 0x80
 8006618:	68f8      	ldr	r0, [r7, #12]
 800661a:	f000 f8e2 	bl	80067e2 <UART_WaitOnFlagUntilTimeout>
 800661e:	4603      	mov	r3, r0
 8006620:	2b00      	cmp	r3, #0
 8006622:	d001      	beq.n	8006628 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006624:	2303      	movs	r3, #3
 8006626:	e036      	b.n	8006696 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006628:	69fb      	ldr	r3, [r7, #28]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d10b      	bne.n	8006646 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	881b      	ldrh	r3, [r3, #0]
 8006632:	461a      	mov	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800663c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800663e:	69bb      	ldr	r3, [r7, #24]
 8006640:	3302      	adds	r3, #2
 8006642:	61bb      	str	r3, [r7, #24]
 8006644:	e007      	b.n	8006656 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006646:	69fb      	ldr	r3, [r7, #28]
 8006648:	781a      	ldrb	r2, [r3, #0]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	3301      	adds	r3, #1
 8006654:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800665a:	b29b      	uxth	r3, r3
 800665c:	3b01      	subs	r3, #1
 800665e:	b29a      	uxth	r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d1cf      	bne.n	800660e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800666e:	683b      	ldr	r3, [r7, #0]
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	2200      	movs	r2, #0
 8006676:	2140      	movs	r1, #64	; 0x40
 8006678:	68f8      	ldr	r0, [r7, #12]
 800667a:	f000 f8b2 	bl	80067e2 <UART_WaitOnFlagUntilTimeout>
 800667e:	4603      	mov	r3, r0
 8006680:	2b00      	cmp	r3, #0
 8006682:	d001      	beq.n	8006688 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006684:	2303      	movs	r3, #3
 8006686:	e006      	b.n	8006696 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2220      	movs	r2, #32
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006690:	2300      	movs	r3, #0
 8006692:	e000      	b.n	8006696 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006694:	2302      	movs	r3, #2
  }
}
 8006696:	4618      	mov	r0, r3
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}

0800669e <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800669e:	b580      	push	{r7, lr}
 80066a0:	b08a      	sub	sp, #40	; 0x28
 80066a2:	af02      	add	r7, sp, #8
 80066a4:	60f8      	str	r0, [r7, #12]
 80066a6:	60b9      	str	r1, [r7, #8]
 80066a8:	603b      	str	r3, [r7, #0]
 80066aa:	4613      	mov	r3, r2
 80066ac:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b20      	cmp	r3, #32
 80066bc:	f040 808c 	bne.w	80067d8 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066c0:	68bb      	ldr	r3, [r7, #8]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d002      	beq.n	80066cc <HAL_UART_Receive+0x2e>
 80066c6:	88fb      	ldrh	r3, [r7, #6]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d101      	bne.n	80066d0 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	e084      	b.n	80067da <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066d6:	2b01      	cmp	r3, #1
 80066d8:	d101      	bne.n	80066de <HAL_UART_Receive+0x40>
 80066da:	2302      	movs	r3, #2
 80066dc:	e07d      	b.n	80067da <HAL_UART_Receive+0x13c>
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2201      	movs	r2, #1
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2222      	movs	r2, #34	; 0x22
 80066f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066fa:	f7fc fb13 	bl	8002d24 <HAL_GetTick>
 80066fe:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	88fa      	ldrh	r2, [r7, #6]
 8006704:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	88fa      	ldrh	r2, [r7, #6]
 800670a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006714:	d108      	bne.n	8006728 <HAL_UART_Receive+0x8a>
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d104      	bne.n	8006728 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800671e:	2300      	movs	r3, #0
 8006720:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	61bb      	str	r3, [r7, #24]
 8006726:	e003      	b.n	8006730 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800672c:	2300      	movs	r3, #0
 800672e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006738:	e043      	b.n	80067c2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	9300      	str	r3, [sp, #0]
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2200      	movs	r2, #0
 8006742:	2120      	movs	r1, #32
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f84c 	bl	80067e2 <UART_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	e042      	b.n	80067da <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8006754:	69fb      	ldr	r3, [r7, #28]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d10c      	bne.n	8006774 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	b29b      	uxth	r3, r3
 8006762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006766:	b29a      	uxth	r2, r3
 8006768:	69bb      	ldr	r3, [r7, #24]
 800676a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800676c:	69bb      	ldr	r3, [r7, #24]
 800676e:	3302      	adds	r3, #2
 8006770:	61bb      	str	r3, [r7, #24]
 8006772:	e01f      	b.n	80067b4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	689b      	ldr	r3, [r3, #8]
 8006778:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800677c:	d007      	beq.n	800678e <HAL_UART_Receive+0xf0>
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d10a      	bne.n	800679c <HAL_UART_Receive+0xfe>
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	691b      	ldr	r3, [r3, #16]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d106      	bne.n	800679c <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	b2da      	uxtb	r2, r3
 8006796:	69fb      	ldr	r3, [r7, #28]
 8006798:	701a      	strb	r2, [r3, #0]
 800679a:	e008      	b.n	80067ae <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	685b      	ldr	r3, [r3, #4]
 80067a2:	b2db      	uxtb	r3, r3
 80067a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80067a8:	b2da      	uxtb	r2, r3
 80067aa:	69fb      	ldr	r3, [r7, #28]
 80067ac:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80067ae:	69fb      	ldr	r3, [r7, #28]
 80067b0:	3301      	adds	r3, #1
 80067b2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067b8:	b29b      	uxth	r3, r3
 80067ba:	3b01      	subs	r3, #1
 80067bc:	b29a      	uxth	r2, r3
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80067c6:	b29b      	uxth	r3, r3
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1b6      	bne.n	800673a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	2220      	movs	r2, #32
 80067d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	e000      	b.n	80067da <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3720      	adds	r7, #32
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b090      	sub	sp, #64	; 0x40
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	60f8      	str	r0, [r7, #12]
 80067ea:	60b9      	str	r1, [r7, #8]
 80067ec:	603b      	str	r3, [r7, #0]
 80067ee:	4613      	mov	r3, r2
 80067f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80067f2:	e050      	b.n	8006896 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80067f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067fa:	d04c      	beq.n	8006896 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80067fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d007      	beq.n	8006812 <UART_WaitOnFlagUntilTimeout+0x30>
 8006802:	f7fc fa8f 	bl	8002d24 <HAL_GetTick>
 8006806:	4602      	mov	r2, r0
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	1ad3      	subs	r3, r2, r3
 800680c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800680e:	429a      	cmp	r2, r3
 8006810:	d241      	bcs.n	8006896 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	330c      	adds	r3, #12
 8006818:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800681a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800681c:	e853 3f00 	ldrex	r3, [r3]
 8006820:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006824:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006828:	63fb      	str	r3, [r7, #60]	; 0x3c
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	330c      	adds	r3, #12
 8006830:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006832:	637a      	str	r2, [r7, #52]	; 0x34
 8006834:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006836:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006838:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800683a:	e841 2300 	strex	r3, r2, [r1]
 800683e:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006842:	2b00      	cmp	r3, #0
 8006844:	d1e5      	bne.n	8006812 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	3314      	adds	r3, #20
 800684c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	e853 3f00 	ldrex	r3, [r3]
 8006854:	613b      	str	r3, [r7, #16]
   return(result);
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f023 0301 	bic.w	r3, r3, #1
 800685c:	63bb      	str	r3, [r7, #56]	; 0x38
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3314      	adds	r3, #20
 8006864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006866:	623a      	str	r2, [r7, #32]
 8006868:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686a:	69f9      	ldr	r1, [r7, #28]
 800686c:	6a3a      	ldr	r2, [r7, #32]
 800686e:	e841 2300 	strex	r3, r2, [r1]
 8006872:	61bb      	str	r3, [r7, #24]
   return(result);
 8006874:	69bb      	ldr	r3, [r7, #24]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d1e5      	bne.n	8006846 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	2220      	movs	r2, #32
 800687e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	2220      	movs	r2, #32
 8006886:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	2200      	movs	r2, #0
 800688e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006892:	2303      	movs	r3, #3
 8006894:	e00f      	b.n	80068b6 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	681a      	ldr	r2, [r3, #0]
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	4013      	ands	r3, r2
 80068a0:	68ba      	ldr	r2, [r7, #8]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	bf0c      	ite	eq
 80068a6:	2301      	moveq	r3, #1
 80068a8:	2300      	movne	r3, #0
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	461a      	mov	r2, r3
 80068ae:	79fb      	ldrb	r3, [r7, #7]
 80068b0:	429a      	cmp	r2, r3
 80068b2:	d09f      	beq.n	80067f4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80068b4:	2300      	movs	r3, #0
}
 80068b6:	4618      	mov	r0, r3
 80068b8:	3740      	adds	r7, #64	; 0x40
 80068ba:	46bd      	mov	sp, r7
 80068bc:	bd80      	pop	{r7, pc}
	...

080068c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068c4:	b0c0      	sub	sp, #256	; 0x100
 80068c6:	af00      	add	r7, sp, #0
 80068c8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80068d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068dc:	68d9      	ldr	r1, [r3, #12]
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	ea40 0301 	orr.w	r3, r0, r1
 80068e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	689a      	ldr	r2, [r3, #8]
 80068f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068f4:	691b      	ldr	r3, [r3, #16]
 80068f6:	431a      	orrs	r2, r3
 80068f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068fc:	695b      	ldr	r3, [r3, #20]
 80068fe:	431a      	orrs	r2, r3
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006904:	69db      	ldr	r3, [r3, #28]
 8006906:	4313      	orrs	r3, r2
 8006908:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800690c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006918:	f021 010c 	bic.w	r1, r1, #12
 800691c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006920:	681a      	ldr	r2, [r3, #0]
 8006922:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006926:	430b      	orrs	r3, r1
 8006928:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	695b      	ldr	r3, [r3, #20]
 8006932:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800693a:	6999      	ldr	r1, [r3, #24]
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	ea40 0301 	orr.w	r3, r0, r1
 8006946:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b8f      	ldr	r3, [pc, #572]	; (8006b8c <UART_SetConfig+0x2cc>)
 8006950:	429a      	cmp	r2, r3
 8006952:	d005      	beq.n	8006960 <UART_SetConfig+0xa0>
 8006954:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006958:	681a      	ldr	r2, [r3, #0]
 800695a:	4b8d      	ldr	r3, [pc, #564]	; (8006b90 <UART_SetConfig+0x2d0>)
 800695c:	429a      	cmp	r2, r3
 800695e:	d104      	bne.n	800696a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006960:	f7ff f9ca 	bl	8005cf8 <HAL_RCC_GetPCLK2Freq>
 8006964:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006968:	e003      	b.n	8006972 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800696a:	f7ff f9b1 	bl	8005cd0 <HAL_RCC_GetPCLK1Freq>
 800696e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006972:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800697c:	f040 810c 	bne.w	8006b98 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006980:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006984:	2200      	movs	r2, #0
 8006986:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800698a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800698e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8006992:	4622      	mov	r2, r4
 8006994:	462b      	mov	r3, r5
 8006996:	1891      	adds	r1, r2, r2
 8006998:	65b9      	str	r1, [r7, #88]	; 0x58
 800699a:	415b      	adcs	r3, r3
 800699c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800699e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80069a2:	4621      	mov	r1, r4
 80069a4:	eb12 0801 	adds.w	r8, r2, r1
 80069a8:	4629      	mov	r1, r5
 80069aa:	eb43 0901 	adc.w	r9, r3, r1
 80069ae:	f04f 0200 	mov.w	r2, #0
 80069b2:	f04f 0300 	mov.w	r3, #0
 80069b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069c2:	4690      	mov	r8, r2
 80069c4:	4699      	mov	r9, r3
 80069c6:	4623      	mov	r3, r4
 80069c8:	eb18 0303 	adds.w	r3, r8, r3
 80069cc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80069d0:	462b      	mov	r3, r5
 80069d2:	eb49 0303 	adc.w	r3, r9, r3
 80069d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80069da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80069de:	685b      	ldr	r3, [r3, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80069e6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80069ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80069ee:	460b      	mov	r3, r1
 80069f0:	18db      	adds	r3, r3, r3
 80069f2:	653b      	str	r3, [r7, #80]	; 0x50
 80069f4:	4613      	mov	r3, r2
 80069f6:	eb42 0303 	adc.w	r3, r2, r3
 80069fa:	657b      	str	r3, [r7, #84]	; 0x54
 80069fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006a00:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006a04:	f7f9 fc44 	bl	8000290 <__aeabi_uldivmod>
 8006a08:	4602      	mov	r2, r0
 8006a0a:	460b      	mov	r3, r1
 8006a0c:	4b61      	ldr	r3, [pc, #388]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006a0e:	fba3 2302 	umull	r2, r3, r3, r2
 8006a12:	095b      	lsrs	r3, r3, #5
 8006a14:	011c      	lsls	r4, r3, #4
 8006a16:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006a20:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006a24:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	464b      	mov	r3, r9
 8006a2c:	1891      	adds	r1, r2, r2
 8006a2e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006a30:	415b      	adcs	r3, r3
 8006a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006a34:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006a38:	4641      	mov	r1, r8
 8006a3a:	eb12 0a01 	adds.w	sl, r2, r1
 8006a3e:	4649      	mov	r1, r9
 8006a40:	eb43 0b01 	adc.w	fp, r3, r1
 8006a44:	f04f 0200 	mov.w	r2, #0
 8006a48:	f04f 0300 	mov.w	r3, #0
 8006a4c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a50:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a54:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a58:	4692      	mov	sl, r2
 8006a5a:	469b      	mov	fp, r3
 8006a5c:	4643      	mov	r3, r8
 8006a5e:	eb1a 0303 	adds.w	r3, sl, r3
 8006a62:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006a66:	464b      	mov	r3, r9
 8006a68:	eb4b 0303 	adc.w	r3, fp, r3
 8006a6c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	685b      	ldr	r3, [r3, #4]
 8006a76:	2200      	movs	r2, #0
 8006a78:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a7c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006a80:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006a84:	460b      	mov	r3, r1
 8006a86:	18db      	adds	r3, r3, r3
 8006a88:	643b      	str	r3, [r7, #64]	; 0x40
 8006a8a:	4613      	mov	r3, r2
 8006a8c:	eb42 0303 	adc.w	r3, r2, r3
 8006a90:	647b      	str	r3, [r7, #68]	; 0x44
 8006a92:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006a96:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8006a9a:	f7f9 fbf9 	bl	8000290 <__aeabi_uldivmod>
 8006a9e:	4602      	mov	r2, r0
 8006aa0:	460b      	mov	r3, r1
 8006aa2:	4611      	mov	r1, r2
 8006aa4:	4b3b      	ldr	r3, [pc, #236]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006aa6:	fba3 2301 	umull	r2, r3, r3, r1
 8006aaa:	095b      	lsrs	r3, r3, #5
 8006aac:	2264      	movs	r2, #100	; 0x64
 8006aae:	fb02 f303 	mul.w	r3, r2, r3
 8006ab2:	1acb      	subs	r3, r1, r3
 8006ab4:	00db      	lsls	r3, r3, #3
 8006ab6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8006aba:	4b36      	ldr	r3, [pc, #216]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006abc:	fba3 2302 	umull	r2, r3, r3, r2
 8006ac0:	095b      	lsrs	r3, r3, #5
 8006ac2:	005b      	lsls	r3, r3, #1
 8006ac4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006ac8:	441c      	add	r4, r3
 8006aca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ace:	2200      	movs	r2, #0
 8006ad0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ad4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8006ad8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006adc:	4642      	mov	r2, r8
 8006ade:	464b      	mov	r3, r9
 8006ae0:	1891      	adds	r1, r2, r2
 8006ae2:	63b9      	str	r1, [r7, #56]	; 0x38
 8006ae4:	415b      	adcs	r3, r3
 8006ae6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006ae8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006aec:	4641      	mov	r1, r8
 8006aee:	1851      	adds	r1, r2, r1
 8006af0:	6339      	str	r1, [r7, #48]	; 0x30
 8006af2:	4649      	mov	r1, r9
 8006af4:	414b      	adcs	r3, r1
 8006af6:	637b      	str	r3, [r7, #52]	; 0x34
 8006af8:	f04f 0200 	mov.w	r2, #0
 8006afc:	f04f 0300 	mov.w	r3, #0
 8006b00:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006b04:	4659      	mov	r1, fp
 8006b06:	00cb      	lsls	r3, r1, #3
 8006b08:	4651      	mov	r1, sl
 8006b0a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b0e:	4651      	mov	r1, sl
 8006b10:	00ca      	lsls	r2, r1, #3
 8006b12:	4610      	mov	r0, r2
 8006b14:	4619      	mov	r1, r3
 8006b16:	4603      	mov	r3, r0
 8006b18:	4642      	mov	r2, r8
 8006b1a:	189b      	adds	r3, r3, r2
 8006b1c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b20:	464b      	mov	r3, r9
 8006b22:	460a      	mov	r2, r1
 8006b24:	eb42 0303 	adc.w	r3, r2, r3
 8006b28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006b2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b30:	685b      	ldr	r3, [r3, #4]
 8006b32:	2200      	movs	r2, #0
 8006b34:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006b38:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006b3c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006b40:	460b      	mov	r3, r1
 8006b42:	18db      	adds	r3, r3, r3
 8006b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8006b46:	4613      	mov	r3, r2
 8006b48:	eb42 0303 	adc.w	r3, r2, r3
 8006b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006b4e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006b52:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006b56:	f7f9 fb9b 	bl	8000290 <__aeabi_uldivmod>
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	4b0d      	ldr	r3, [pc, #52]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006b60:	fba3 1302 	umull	r1, r3, r3, r2
 8006b64:	095b      	lsrs	r3, r3, #5
 8006b66:	2164      	movs	r1, #100	; 0x64
 8006b68:	fb01 f303 	mul.w	r3, r1, r3
 8006b6c:	1ad3      	subs	r3, r2, r3
 8006b6e:	00db      	lsls	r3, r3, #3
 8006b70:	3332      	adds	r3, #50	; 0x32
 8006b72:	4a08      	ldr	r2, [pc, #32]	; (8006b94 <UART_SetConfig+0x2d4>)
 8006b74:	fba2 2303 	umull	r2, r3, r2, r3
 8006b78:	095b      	lsrs	r3, r3, #5
 8006b7a:	f003 0207 	and.w	r2, r3, #7
 8006b7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	4422      	add	r2, r4
 8006b86:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b88:	e106      	b.n	8006d98 <UART_SetConfig+0x4d8>
 8006b8a:	bf00      	nop
 8006b8c:	40011000 	.word	0x40011000
 8006b90:	40011400 	.word	0x40011400
 8006b94:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b98:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b9c:	2200      	movs	r2, #0
 8006b9e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ba2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ba6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006baa:	4642      	mov	r2, r8
 8006bac:	464b      	mov	r3, r9
 8006bae:	1891      	adds	r1, r2, r2
 8006bb0:	6239      	str	r1, [r7, #32]
 8006bb2:	415b      	adcs	r3, r3
 8006bb4:	627b      	str	r3, [r7, #36]	; 0x24
 8006bb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bba:	4641      	mov	r1, r8
 8006bbc:	1854      	adds	r4, r2, r1
 8006bbe:	4649      	mov	r1, r9
 8006bc0:	eb43 0501 	adc.w	r5, r3, r1
 8006bc4:	f04f 0200 	mov.w	r2, #0
 8006bc8:	f04f 0300 	mov.w	r3, #0
 8006bcc:	00eb      	lsls	r3, r5, #3
 8006bce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bd2:	00e2      	lsls	r2, r4, #3
 8006bd4:	4614      	mov	r4, r2
 8006bd6:	461d      	mov	r5, r3
 8006bd8:	4643      	mov	r3, r8
 8006bda:	18e3      	adds	r3, r4, r3
 8006bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006be0:	464b      	mov	r3, r9
 8006be2:	eb45 0303 	adc.w	r3, r5, r3
 8006be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006bfa:	f04f 0200 	mov.w	r2, #0
 8006bfe:	f04f 0300 	mov.w	r3, #0
 8006c02:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006c06:	4629      	mov	r1, r5
 8006c08:	008b      	lsls	r3, r1, #2
 8006c0a:	4621      	mov	r1, r4
 8006c0c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c10:	4621      	mov	r1, r4
 8006c12:	008a      	lsls	r2, r1, #2
 8006c14:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006c18:	f7f9 fb3a 	bl	8000290 <__aeabi_uldivmod>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	460b      	mov	r3, r1
 8006c20:	4b60      	ldr	r3, [pc, #384]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006c22:	fba3 2302 	umull	r2, r3, r3, r2
 8006c26:	095b      	lsrs	r3, r3, #5
 8006c28:	011c      	lsls	r4, r3, #4
 8006c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006c2e:	2200      	movs	r2, #0
 8006c30:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006c34:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006c38:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006c3c:	4642      	mov	r2, r8
 8006c3e:	464b      	mov	r3, r9
 8006c40:	1891      	adds	r1, r2, r2
 8006c42:	61b9      	str	r1, [r7, #24]
 8006c44:	415b      	adcs	r3, r3
 8006c46:	61fb      	str	r3, [r7, #28]
 8006c48:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c4c:	4641      	mov	r1, r8
 8006c4e:	1851      	adds	r1, r2, r1
 8006c50:	6139      	str	r1, [r7, #16]
 8006c52:	4649      	mov	r1, r9
 8006c54:	414b      	adcs	r3, r1
 8006c56:	617b      	str	r3, [r7, #20]
 8006c58:	f04f 0200 	mov.w	r2, #0
 8006c5c:	f04f 0300 	mov.w	r3, #0
 8006c60:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c64:	4659      	mov	r1, fp
 8006c66:	00cb      	lsls	r3, r1, #3
 8006c68:	4651      	mov	r1, sl
 8006c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c6e:	4651      	mov	r1, sl
 8006c70:	00ca      	lsls	r2, r1, #3
 8006c72:	4610      	mov	r0, r2
 8006c74:	4619      	mov	r1, r3
 8006c76:	4603      	mov	r3, r0
 8006c78:	4642      	mov	r2, r8
 8006c7a:	189b      	adds	r3, r3, r2
 8006c7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006c80:	464b      	mov	r3, r9
 8006c82:	460a      	mov	r2, r1
 8006c84:	eb42 0303 	adc.w	r3, r2, r3
 8006c88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c90:	685b      	ldr	r3, [r3, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	67bb      	str	r3, [r7, #120]	; 0x78
 8006c96:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006c98:	f04f 0200 	mov.w	r2, #0
 8006c9c:	f04f 0300 	mov.w	r3, #0
 8006ca0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006ca4:	4649      	mov	r1, r9
 8006ca6:	008b      	lsls	r3, r1, #2
 8006ca8:	4641      	mov	r1, r8
 8006caa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006cae:	4641      	mov	r1, r8
 8006cb0:	008a      	lsls	r2, r1, #2
 8006cb2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006cb6:	f7f9 faeb 	bl	8000290 <__aeabi_uldivmod>
 8006cba:	4602      	mov	r2, r0
 8006cbc:	460b      	mov	r3, r1
 8006cbe:	4611      	mov	r1, r2
 8006cc0:	4b38      	ldr	r3, [pc, #224]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006cc2:	fba3 2301 	umull	r2, r3, r3, r1
 8006cc6:	095b      	lsrs	r3, r3, #5
 8006cc8:	2264      	movs	r2, #100	; 0x64
 8006cca:	fb02 f303 	mul.w	r3, r2, r3
 8006cce:	1acb      	subs	r3, r1, r3
 8006cd0:	011b      	lsls	r3, r3, #4
 8006cd2:	3332      	adds	r3, #50	; 0x32
 8006cd4:	4a33      	ldr	r2, [pc, #204]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8006cda:	095b      	lsrs	r3, r3, #5
 8006cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ce0:	441c      	add	r4, r3
 8006ce2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	673b      	str	r3, [r7, #112]	; 0x70
 8006cea:	677a      	str	r2, [r7, #116]	; 0x74
 8006cec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006cf0:	4642      	mov	r2, r8
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	1891      	adds	r1, r2, r2
 8006cf6:	60b9      	str	r1, [r7, #8]
 8006cf8:	415b      	adcs	r3, r3
 8006cfa:	60fb      	str	r3, [r7, #12]
 8006cfc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006d00:	4641      	mov	r1, r8
 8006d02:	1851      	adds	r1, r2, r1
 8006d04:	6039      	str	r1, [r7, #0]
 8006d06:	4649      	mov	r1, r9
 8006d08:	414b      	adcs	r3, r1
 8006d0a:	607b      	str	r3, [r7, #4]
 8006d0c:	f04f 0200 	mov.w	r2, #0
 8006d10:	f04f 0300 	mov.w	r3, #0
 8006d14:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d18:	4659      	mov	r1, fp
 8006d1a:	00cb      	lsls	r3, r1, #3
 8006d1c:	4651      	mov	r1, sl
 8006d1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d22:	4651      	mov	r1, sl
 8006d24:	00ca      	lsls	r2, r1, #3
 8006d26:	4610      	mov	r0, r2
 8006d28:	4619      	mov	r1, r3
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4642      	mov	r2, r8
 8006d2e:	189b      	adds	r3, r3, r2
 8006d30:	66bb      	str	r3, [r7, #104]	; 0x68
 8006d32:	464b      	mov	r3, r9
 8006d34:	460a      	mov	r2, r1
 8006d36:	eb42 0303 	adc.w	r3, r2, r3
 8006d3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d40:	685b      	ldr	r3, [r3, #4]
 8006d42:	2200      	movs	r2, #0
 8006d44:	663b      	str	r3, [r7, #96]	; 0x60
 8006d46:	667a      	str	r2, [r7, #100]	; 0x64
 8006d48:	f04f 0200 	mov.w	r2, #0
 8006d4c:	f04f 0300 	mov.w	r3, #0
 8006d50:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006d54:	4649      	mov	r1, r9
 8006d56:	008b      	lsls	r3, r1, #2
 8006d58:	4641      	mov	r1, r8
 8006d5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d5e:	4641      	mov	r1, r8
 8006d60:	008a      	lsls	r2, r1, #2
 8006d62:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006d66:	f7f9 fa93 	bl	8000290 <__aeabi_uldivmod>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	460b      	mov	r3, r1
 8006d6e:	4b0d      	ldr	r3, [pc, #52]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006d70:	fba3 1302 	umull	r1, r3, r3, r2
 8006d74:	095b      	lsrs	r3, r3, #5
 8006d76:	2164      	movs	r1, #100	; 0x64
 8006d78:	fb01 f303 	mul.w	r3, r1, r3
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	3332      	adds	r3, #50	; 0x32
 8006d82:	4a08      	ldr	r2, [pc, #32]	; (8006da4 <UART_SetConfig+0x4e4>)
 8006d84:	fba2 2303 	umull	r2, r3, r2, r3
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	f003 020f 	and.w	r2, r3, #15
 8006d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	4422      	add	r2, r4
 8006d96:	609a      	str	r2, [r3, #8]
}
 8006d98:	bf00      	nop
 8006d9a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006da4:	51eb851f 	.word	0x51eb851f

08006da8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006da8:	b084      	sub	sp, #16
 8006daa:	b580      	push	{r7, lr}
 8006dac:	b084      	sub	sp, #16
 8006dae:	af00      	add	r7, sp, #0
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	f107 001c 	add.w	r0, r7, #28
 8006db6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d122      	bne.n	8006e06 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	68db      	ldr	r3, [r3, #12]
 8006dd0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006dd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006de8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	d105      	bne.n	8006dfa <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	68db      	ldr	r3, [r3, #12]
 8006df2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f001 fbee 	bl	80085dc <USB_CoreReset>
 8006e00:	4603      	mov	r3, r0
 8006e02:	73fb      	strb	r3, [r7, #15]
 8006e04:	e01a      	b.n	8006e3c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 fbe2 	bl	80085dc <USB_CoreReset>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006e1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	639a      	str	r2, [r3, #56]	; 0x38
 8006e2e:	e005      	b.n	8006e3c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e34:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	2b01      	cmp	r3, #1
 8006e40:	d10b      	bne.n	8006e5a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	689b      	ldr	r3, [r3, #8]
 8006e46:	f043 0206 	orr.w	r2, r3, #6
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	689b      	ldr	r3, [r3, #8]
 8006e52:	f043 0220 	orr.w	r2, r3, #32
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006e5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3710      	adds	r7, #16
 8006e60:	46bd      	mov	sp, r7
 8006e62:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006e66:	b004      	add	sp, #16
 8006e68:	4770      	bx	lr
	...

08006e6c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b087      	sub	sp, #28
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	60f8      	str	r0, [r7, #12]
 8006e74:	60b9      	str	r1, [r7, #8]
 8006e76:	4613      	mov	r3, r2
 8006e78:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8006e7a:	79fb      	ldrb	r3, [r7, #7]
 8006e7c:	2b02      	cmp	r3, #2
 8006e7e:	d165      	bne.n	8006f4c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4a41      	ldr	r2, [pc, #260]	; (8006f88 <USB_SetTurnaroundTime+0x11c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d906      	bls.n	8006e96 <USB_SetTurnaroundTime+0x2a>
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	4a40      	ldr	r2, [pc, #256]	; (8006f8c <USB_SetTurnaroundTime+0x120>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d202      	bcs.n	8006e96 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8006e90:	230f      	movs	r3, #15
 8006e92:	617b      	str	r3, [r7, #20]
 8006e94:	e062      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8006e96:	68bb      	ldr	r3, [r7, #8]
 8006e98:	4a3c      	ldr	r2, [pc, #240]	; (8006f8c <USB_SetTurnaroundTime+0x120>)
 8006e9a:	4293      	cmp	r3, r2
 8006e9c:	d306      	bcc.n	8006eac <USB_SetTurnaroundTime+0x40>
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	4a3b      	ldr	r2, [pc, #236]	; (8006f90 <USB_SetTurnaroundTime+0x124>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d202      	bcs.n	8006eac <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8006ea6:	230e      	movs	r3, #14
 8006ea8:	617b      	str	r3, [r7, #20]
 8006eaa:	e057      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	4a38      	ldr	r2, [pc, #224]	; (8006f90 <USB_SetTurnaroundTime+0x124>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d306      	bcc.n	8006ec2 <USB_SetTurnaroundTime+0x56>
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	4a37      	ldr	r2, [pc, #220]	; (8006f94 <USB_SetTurnaroundTime+0x128>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d202      	bcs.n	8006ec2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8006ebc:	230d      	movs	r3, #13
 8006ebe:	617b      	str	r3, [r7, #20]
 8006ec0:	e04c      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	4a33      	ldr	r2, [pc, #204]	; (8006f94 <USB_SetTurnaroundTime+0x128>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d306      	bcc.n	8006ed8 <USB_SetTurnaroundTime+0x6c>
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	4a32      	ldr	r2, [pc, #200]	; (8006f98 <USB_SetTurnaroundTime+0x12c>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d802      	bhi.n	8006ed8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8006ed2:	230c      	movs	r3, #12
 8006ed4:	617b      	str	r3, [r7, #20]
 8006ed6:	e041      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4a2f      	ldr	r2, [pc, #188]	; (8006f98 <USB_SetTurnaroundTime+0x12c>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d906      	bls.n	8006eee <USB_SetTurnaroundTime+0x82>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4a2e      	ldr	r2, [pc, #184]	; (8006f9c <USB_SetTurnaroundTime+0x130>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d802      	bhi.n	8006eee <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8006ee8:	230b      	movs	r3, #11
 8006eea:	617b      	str	r3, [r7, #20]
 8006eec:	e036      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	4a2a      	ldr	r2, [pc, #168]	; (8006f9c <USB_SetTurnaroundTime+0x130>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	d906      	bls.n	8006f04 <USB_SetTurnaroundTime+0x98>
 8006ef6:	68bb      	ldr	r3, [r7, #8]
 8006ef8:	4a29      	ldr	r2, [pc, #164]	; (8006fa0 <USB_SetTurnaroundTime+0x134>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	d802      	bhi.n	8006f04 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8006efe:	230a      	movs	r3, #10
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	e02b      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	4a26      	ldr	r2, [pc, #152]	; (8006fa0 <USB_SetTurnaroundTime+0x134>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d906      	bls.n	8006f1a <USB_SetTurnaroundTime+0xae>
 8006f0c:	68bb      	ldr	r3, [r7, #8]
 8006f0e:	4a25      	ldr	r2, [pc, #148]	; (8006fa4 <USB_SetTurnaroundTime+0x138>)
 8006f10:	4293      	cmp	r3, r2
 8006f12:	d202      	bcs.n	8006f1a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8006f14:	2309      	movs	r3, #9
 8006f16:	617b      	str	r3, [r7, #20]
 8006f18:	e020      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <USB_SetTurnaroundTime+0x138>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d306      	bcc.n	8006f30 <USB_SetTurnaroundTime+0xc4>
 8006f22:	68bb      	ldr	r3, [r7, #8]
 8006f24:	4a20      	ldr	r2, [pc, #128]	; (8006fa8 <USB_SetTurnaroundTime+0x13c>)
 8006f26:	4293      	cmp	r3, r2
 8006f28:	d802      	bhi.n	8006f30 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8006f2a:	2308      	movs	r3, #8
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	e015      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	4a1d      	ldr	r2, [pc, #116]	; (8006fa8 <USB_SetTurnaroundTime+0x13c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d906      	bls.n	8006f46 <USB_SetTurnaroundTime+0xda>
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	4a1c      	ldr	r2, [pc, #112]	; (8006fac <USB_SetTurnaroundTime+0x140>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d202      	bcs.n	8006f46 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8006f40:	2307      	movs	r3, #7
 8006f42:	617b      	str	r3, [r7, #20]
 8006f44:	e00a      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8006f46:	2306      	movs	r3, #6
 8006f48:	617b      	str	r3, [r7, #20]
 8006f4a:	e007      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8006f4c:	79fb      	ldrb	r3, [r7, #7]
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d102      	bne.n	8006f58 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8006f52:	2309      	movs	r3, #9
 8006f54:	617b      	str	r3, [r7, #20]
 8006f56:	e001      	b.n	8006f5c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8006f58:	2309      	movs	r3, #9
 8006f5a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	68da      	ldr	r2, [r3, #12]
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	029b      	lsls	r3, r3, #10
 8006f70:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8006f74:	431a      	orrs	r2, r3
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	371c      	adds	r7, #28
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr
 8006f88:	00d8acbf 	.word	0x00d8acbf
 8006f8c:	00e4e1c0 	.word	0x00e4e1c0
 8006f90:	00f42400 	.word	0x00f42400
 8006f94:	01067380 	.word	0x01067380
 8006f98:	011a499f 	.word	0x011a499f
 8006f9c:	01312cff 	.word	0x01312cff
 8006fa0:	014ca43f 	.word	0x014ca43f
 8006fa4:	016e3600 	.word	0x016e3600
 8006fa8:	01a6ab1f 	.word	0x01a6ab1f
 8006fac:	01e84800 	.word	0x01e84800

08006fb0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fb0:	b480      	push	{r7}
 8006fb2:	b083      	sub	sp, #12
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	689b      	ldr	r3, [r3, #8]
 8006fbc:	f043 0201 	orr.w	r2, r3, #1
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fc4:	2300      	movs	r3, #0
}
 8006fc6:	4618      	mov	r0, r3
 8006fc8:	370c      	adds	r7, #12
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd0:	4770      	bx	lr

08006fd2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006fd2:	b480      	push	{r7}
 8006fd4:	b083      	sub	sp, #12
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	689b      	ldr	r3, [r3, #8]
 8006fde:	f023 0201 	bic.w	r2, r3, #1
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006fe6:	2300      	movs	r3, #0
}
 8006fe8:	4618      	mov	r0, r3
 8006fea:	370c      	adds	r7, #12
 8006fec:	46bd      	mov	sp, r7
 8006fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff2:	4770      	bx	lr

08006ff4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	460b      	mov	r3, r1
 8006ffe:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007000:	2300      	movs	r3, #0
 8007002:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	68db      	ldr	r3, [r3, #12]
 8007008:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007010:	78fb      	ldrb	r3, [r7, #3]
 8007012:	2b01      	cmp	r3, #1
 8007014:	d115      	bne.n	8007042 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	68db      	ldr	r3, [r3, #12]
 800701a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007022:	2001      	movs	r0, #1
 8007024:	f7fb fe8a 	bl	8002d3c <HAL_Delay>
      ms++;
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	3301      	adds	r3, #1
 800702c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800702e:	6878      	ldr	r0, [r7, #4]
 8007030:	f001 fa45 	bl	80084be <USB_GetMode>
 8007034:	4603      	mov	r3, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	d01e      	beq.n	8007078 <USB_SetCurrentMode+0x84>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2b31      	cmp	r3, #49	; 0x31
 800703e:	d9f0      	bls.n	8007022 <USB_SetCurrentMode+0x2e>
 8007040:	e01a      	b.n	8007078 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007042:	78fb      	ldrb	r3, [r7, #3]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d115      	bne.n	8007074 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	68db      	ldr	r3, [r3, #12]
 800704c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007054:	2001      	movs	r0, #1
 8007056:	f7fb fe71 	bl	8002d3c <HAL_Delay>
      ms++;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	3301      	adds	r3, #1
 800705e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007060:	6878      	ldr	r0, [r7, #4]
 8007062:	f001 fa2c 	bl	80084be <USB_GetMode>
 8007066:	4603      	mov	r3, r0
 8007068:	2b00      	cmp	r3, #0
 800706a:	d005      	beq.n	8007078 <USB_SetCurrentMode+0x84>
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2b31      	cmp	r3, #49	; 0x31
 8007070:	d9f0      	bls.n	8007054 <USB_SetCurrentMode+0x60>
 8007072:	e001      	b.n	8007078 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007074:	2301      	movs	r3, #1
 8007076:	e005      	b.n	8007084 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	2b32      	cmp	r3, #50	; 0x32
 800707c:	d101      	bne.n	8007082 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800707e:	2301      	movs	r3, #1
 8007080:	e000      	b.n	8007084 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800708c:	b084      	sub	sp, #16
 800708e:	b580      	push	{r7, lr}
 8007090:	b086      	sub	sp, #24
 8007092:	af00      	add	r7, sp, #0
 8007094:	6078      	str	r0, [r7, #4]
 8007096:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800709a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800709e:	2300      	movs	r3, #0
 80070a0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80070a6:	2300      	movs	r3, #0
 80070a8:	613b      	str	r3, [r7, #16]
 80070aa:	e009      	b.n	80070c0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80070ac:	687a      	ldr	r2, [r7, #4]
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	3340      	adds	r3, #64	; 0x40
 80070b2:	009b      	lsls	r3, r3, #2
 80070b4:	4413      	add	r3, r2
 80070b6:	2200      	movs	r2, #0
 80070b8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80070ba:	693b      	ldr	r3, [r7, #16]
 80070bc:	3301      	adds	r3, #1
 80070be:	613b      	str	r3, [r7, #16]
 80070c0:	693b      	ldr	r3, [r7, #16]
 80070c2:	2b0e      	cmp	r3, #14
 80070c4:	d9f2      	bls.n	80070ac <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80070c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d11c      	bne.n	8007106 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80070d2:	685b      	ldr	r3, [r3, #4]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80070da:	f043 0302 	orr.w	r3, r3, #2
 80070de:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070f0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070fc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	639a      	str	r2, [r3, #56]	; 0x38
 8007104:	e00b      	b.n	800711e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007116:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007124:	461a      	mov	r2, r3
 8007126:	2300      	movs	r3, #0
 8007128:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007130:	4619      	mov	r1, r3
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007138:	461a      	mov	r2, r3
 800713a:	680b      	ldr	r3, [r1, #0]
 800713c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800713e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007140:	2b01      	cmp	r3, #1
 8007142:	d10c      	bne.n	800715e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007144:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d104      	bne.n	8007154 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800714a:	2100      	movs	r1, #0
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f965 	bl	800741c <USB_SetDevSpeed>
 8007152:	e008      	b.n	8007166 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007154:	2101      	movs	r1, #1
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f960 	bl	800741c <USB_SetDevSpeed>
 800715c:	e003      	b.n	8007166 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800715e:	2103      	movs	r1, #3
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f000 f95b 	bl	800741c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007166:	2110      	movs	r1, #16
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f8f3 	bl	8007354 <USB_FlushTxFifo>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d001      	beq.n	8007178 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8007174:	2301      	movs	r3, #1
 8007176:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 f91f 	bl	80073bc <USB_FlushRxFifo>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d001      	beq.n	8007188 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8007184:	2301      	movs	r3, #1
 8007186:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800718e:	461a      	mov	r2, r3
 8007190:	2300      	movs	r3, #0
 8007192:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800719a:	461a      	mov	r2, r3
 800719c:	2300      	movs	r3, #0
 800719e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80071a6:	461a      	mov	r2, r3
 80071a8:	2300      	movs	r3, #0
 80071aa:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80071ac:	2300      	movs	r3, #0
 80071ae:	613b      	str	r3, [r7, #16]
 80071b0:	e043      	b.n	800723a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80071b2:	693b      	ldr	r3, [r7, #16]
 80071b4:	015a      	lsls	r2, r3, #5
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	4413      	add	r3, r2
 80071ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80071c4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80071c8:	d118      	bne.n	80071fc <USB_DevInit+0x170>
    {
      if (i == 0U)
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d10a      	bne.n	80071e6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80071d0:	693b      	ldr	r3, [r7, #16]
 80071d2:	015a      	lsls	r2, r3, #5
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4413      	add	r3, r2
 80071d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071dc:	461a      	mov	r2, r3
 80071de:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80071e2:	6013      	str	r3, [r2, #0]
 80071e4:	e013      	b.n	800720e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80071e6:	693b      	ldr	r3, [r7, #16]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80071f2:	461a      	mov	r2, r3
 80071f4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80071f8:	6013      	str	r3, [r2, #0]
 80071fa:	e008      	b.n	800720e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80071fc:	693b      	ldr	r3, [r7, #16]
 80071fe:	015a      	lsls	r2, r3, #5
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	4413      	add	r3, r2
 8007204:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007208:	461a      	mov	r2, r3
 800720a:	2300      	movs	r3, #0
 800720c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800720e:	693b      	ldr	r3, [r7, #16]
 8007210:	015a      	lsls	r2, r3, #5
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	4413      	add	r3, r2
 8007216:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800721a:	461a      	mov	r2, r3
 800721c:	2300      	movs	r3, #0
 800721e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	015a      	lsls	r2, r3, #5
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4413      	add	r3, r2
 8007228:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800722c:	461a      	mov	r2, r3
 800722e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007232:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007234:	693b      	ldr	r3, [r7, #16]
 8007236:	3301      	adds	r3, #1
 8007238:	613b      	str	r3, [r7, #16]
 800723a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723c:	693a      	ldr	r2, [r7, #16]
 800723e:	429a      	cmp	r2, r3
 8007240:	d3b7      	bcc.n	80071b2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007242:	2300      	movs	r3, #0
 8007244:	613b      	str	r3, [r7, #16]
 8007246:	e043      	b.n	80072d0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	015a      	lsls	r2, r3, #5
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	4413      	add	r3, r2
 8007250:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800725a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800725e:	d118      	bne.n	8007292 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d10a      	bne.n	800727c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	015a      	lsls	r2, r3, #5
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007272:	461a      	mov	r2, r3
 8007274:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007278:	6013      	str	r3, [r2, #0]
 800727a:	e013      	b.n	80072a4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	015a      	lsls	r2, r3, #5
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	4413      	add	r3, r2
 8007284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007288:	461a      	mov	r2, r3
 800728a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800728e:	6013      	str	r3, [r2, #0]
 8007290:	e008      	b.n	80072a4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	015a      	lsls	r2, r3, #5
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	4413      	add	r3, r2
 800729a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800729e:	461a      	mov	r2, r3
 80072a0:	2300      	movs	r3, #0
 80072a2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	015a      	lsls	r2, r3, #5
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	4413      	add	r3, r2
 80072ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072b0:	461a      	mov	r2, r3
 80072b2:	2300      	movs	r3, #0
 80072b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	015a      	lsls	r2, r3, #5
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	4413      	add	r3, r2
 80072be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80072c2:	461a      	mov	r2, r3
 80072c4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80072c8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80072ca:	693b      	ldr	r3, [r7, #16]
 80072cc:	3301      	adds	r3, #1
 80072ce:	613b      	str	r3, [r7, #16]
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	693a      	ldr	r2, [r7, #16]
 80072d4:	429a      	cmp	r2, r3
 80072d6:	d3b7      	bcc.n	8007248 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80072de:	691b      	ldr	r3, [r3, #16]
 80072e0:	68fa      	ldr	r2, [r7, #12]
 80072e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80072e6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80072ea:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80072f8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80072fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d105      	bne.n	800730c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	699b      	ldr	r3, [r3, #24]
 8007304:	f043 0210 	orr.w	r2, r3, #16
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	699a      	ldr	r2, [r3, #24]
 8007310:	4b0f      	ldr	r3, [pc, #60]	; (8007350 <USB_DevInit+0x2c4>)
 8007312:	4313      	orrs	r3, r2
 8007314:	687a      	ldr	r2, [r7, #4]
 8007316:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007318:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800731a:	2b00      	cmp	r3, #0
 800731c:	d005      	beq.n	800732a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	699b      	ldr	r3, [r3, #24]
 8007322:	f043 0208 	orr.w	r2, r3, #8
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800732a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800732c:	2b01      	cmp	r3, #1
 800732e:	d107      	bne.n	8007340 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	699b      	ldr	r3, [r3, #24]
 8007334:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007338:	f043 0304 	orr.w	r3, r3, #4
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007340:	7dfb      	ldrb	r3, [r7, #23]
}
 8007342:	4618      	mov	r0, r3
 8007344:	3718      	adds	r7, #24
 8007346:	46bd      	mov	sp, r7
 8007348:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800734c:	b004      	add	sp, #16
 800734e:	4770      	bx	lr
 8007350:	803c3800 	.word	0x803c3800

08007354 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800735e:	2300      	movs	r3, #0
 8007360:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	3301      	adds	r3, #1
 8007366:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	4a13      	ldr	r2, [pc, #76]	; (80073b8 <USB_FlushTxFifo+0x64>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d901      	bls.n	8007374 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007370:	2303      	movs	r3, #3
 8007372:	e01b      	b.n	80073ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	691b      	ldr	r3, [r3, #16]
 8007378:	2b00      	cmp	r3, #0
 800737a:	daf2      	bge.n	8007362 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800737c:	2300      	movs	r3, #0
 800737e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	019b      	lsls	r3, r3, #6
 8007384:	f043 0220 	orr.w	r2, r3, #32
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3301      	adds	r3, #1
 8007390:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	4a08      	ldr	r2, [pc, #32]	; (80073b8 <USB_FlushTxFifo+0x64>)
 8007396:	4293      	cmp	r3, r2
 8007398:	d901      	bls.n	800739e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800739a:	2303      	movs	r3, #3
 800739c:	e006      	b.n	80073ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	691b      	ldr	r3, [r3, #16]
 80073a2:	f003 0320 	and.w	r3, r3, #32
 80073a6:	2b20      	cmp	r3, #32
 80073a8:	d0f0      	beq.n	800738c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80073aa:	2300      	movs	r3, #0
}
 80073ac:	4618      	mov	r0, r3
 80073ae:	3714      	adds	r7, #20
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr
 80073b8:	00030d40 	.word	0x00030d40

080073bc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	3301      	adds	r3, #1
 80073cc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	4a11      	ldr	r2, [pc, #68]	; (8007418 <USB_FlushRxFifo+0x5c>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d901      	bls.n	80073da <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80073d6:	2303      	movs	r3, #3
 80073d8:	e018      	b.n	800740c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	691b      	ldr	r3, [r3, #16]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	daf2      	bge.n	80073c8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80073e2:	2300      	movs	r3, #0
 80073e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2210      	movs	r2, #16
 80073ea:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	4a08      	ldr	r2, [pc, #32]	; (8007418 <USB_FlushRxFifo+0x5c>)
 80073f6:	4293      	cmp	r3, r2
 80073f8:	d901      	bls.n	80073fe <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80073fa:	2303      	movs	r3, #3
 80073fc:	e006      	b.n	800740c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0310 	and.w	r3, r3, #16
 8007406:	2b10      	cmp	r3, #16
 8007408:	d0f0      	beq.n	80073ec <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800740a:	2300      	movs	r3, #0
}
 800740c:	4618      	mov	r0, r3
 800740e:	3714      	adds	r7, #20
 8007410:	46bd      	mov	sp, r7
 8007412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007416:	4770      	bx	lr
 8007418:	00030d40 	.word	0x00030d40

0800741c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007432:	681a      	ldr	r2, [r3, #0]
 8007434:	78fb      	ldrb	r3, [r7, #3]
 8007436:	68f9      	ldr	r1, [r7, #12]
 8007438:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800743c:	4313      	orrs	r3, r2
 800743e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3714      	adds	r7, #20
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr

0800744e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800744e:	b480      	push	{r7}
 8007450:	b087      	sub	sp, #28
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800745a:	693b      	ldr	r3, [r7, #16]
 800745c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007460:	689b      	ldr	r3, [r3, #8]
 8007462:	f003 0306 	and.w	r3, r3, #6
 8007466:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d102      	bne.n	8007474 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800746e:	2300      	movs	r3, #0
 8007470:	75fb      	strb	r3, [r7, #23]
 8007472:	e00a      	b.n	800748a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	2b02      	cmp	r3, #2
 8007478:	d002      	beq.n	8007480 <USB_GetDevSpeed+0x32>
 800747a:	68fb      	ldr	r3, [r7, #12]
 800747c:	2b06      	cmp	r3, #6
 800747e:	d102      	bne.n	8007486 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8007480:	2302      	movs	r3, #2
 8007482:	75fb      	strb	r3, [r7, #23]
 8007484:	e001      	b.n	800748a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8007486:	230f      	movs	r3, #15
 8007488:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800748a:	7dfb      	ldrb	r3, [r7, #23]
}
 800748c:	4618      	mov	r0, r3
 800748e:	371c      	adds	r7, #28
 8007490:	46bd      	mov	sp, r7
 8007492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007496:	4770      	bx	lr

08007498 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007498:	b480      	push	{r7}
 800749a:	b085      	sub	sp, #20
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	781b      	ldrb	r3, [r3, #0]
 80074aa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	785b      	ldrb	r3, [r3, #1]
 80074b0:	2b01      	cmp	r3, #1
 80074b2:	d13a      	bne.n	800752a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80074ba:	69da      	ldr	r2, [r3, #28]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	f003 030f 	and.w	r3, r3, #15
 80074c4:	2101      	movs	r1, #1
 80074c6:	fa01 f303 	lsl.w	r3, r1, r3
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	68f9      	ldr	r1, [r7, #12]
 80074ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80074d2:	4313      	orrs	r3, r2
 80074d4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80074d6:	68bb      	ldr	r3, [r7, #8]
 80074d8:	015a      	lsls	r2, r3, #5
 80074da:	68fb      	ldr	r3, [r7, #12]
 80074dc:	4413      	add	r3, r2
 80074de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d155      	bne.n	8007598 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	015a      	lsls	r2, r3, #5
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	4413      	add	r3, r2
 80074f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	68db      	ldr	r3, [r3, #12]
 80074fe:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8007502:	683b      	ldr	r3, [r7, #0]
 8007504:	791b      	ldrb	r3, [r3, #4]
 8007506:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007508:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	059b      	lsls	r3, r3, #22
 800750e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8007510:	4313      	orrs	r3, r2
 8007512:	68ba      	ldr	r2, [r7, #8]
 8007514:	0151      	lsls	r1, r2, #5
 8007516:	68fa      	ldr	r2, [r7, #12]
 8007518:	440a      	add	r2, r1
 800751a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800751e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007526:	6013      	str	r3, [r2, #0]
 8007528:	e036      	b.n	8007598 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007530:	69da      	ldr	r2, [r3, #28]
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	781b      	ldrb	r3, [r3, #0]
 8007536:	f003 030f 	and.w	r3, r3, #15
 800753a:	2101      	movs	r1, #1
 800753c:	fa01 f303 	lsl.w	r3, r1, r3
 8007540:	041b      	lsls	r3, r3, #16
 8007542:	68f9      	ldr	r1, [r7, #12]
 8007544:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007548:	4313      	orrs	r3, r2
 800754a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800754c:	68bb      	ldr	r3, [r7, #8]
 800754e:	015a      	lsls	r2, r3, #5
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	4413      	add	r3, r2
 8007554:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800755e:	2b00      	cmp	r3, #0
 8007560:	d11a      	bne.n	8007598 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	015a      	lsls	r2, r3, #5
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	4413      	add	r3, r2
 800756a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800756e:	681a      	ldr	r2, [r3, #0]
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	68db      	ldr	r3, [r3, #12]
 8007574:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	791b      	ldrb	r3, [r3, #4]
 800757c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800757e:	430b      	orrs	r3, r1
 8007580:	4313      	orrs	r3, r2
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	0151      	lsls	r1, r2, #5
 8007586:	68fa      	ldr	r2, [r7, #12]
 8007588:	440a      	add	r2, r1
 800758a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800758e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007592:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007596:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8007598:	2300      	movs	r3, #0
}
 800759a:	4618      	mov	r0, r3
 800759c:	3714      	adds	r7, #20
 800759e:	46bd      	mov	sp, r7
 80075a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a4:	4770      	bx	lr
	...

080075a8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b085      	sub	sp, #20
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
 80075b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80075b6:	683b      	ldr	r3, [r7, #0]
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 80075bc:	683b      	ldr	r3, [r7, #0]
 80075be:	785b      	ldrb	r3, [r3, #1]
 80075c0:	2b01      	cmp	r3, #1
 80075c2:	d161      	bne.n	8007688 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	015a      	lsls	r2, r3, #5
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80075d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80075da:	d11f      	bne.n	800761c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80075dc:	68bb      	ldr	r3, [r7, #8]
 80075de:	015a      	lsls	r2, r3, #5
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	4413      	add	r3, r2
 80075e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	0151      	lsls	r1, r2, #5
 80075ee:	68fa      	ldr	r2, [r7, #12]
 80075f0:	440a      	add	r2, r1
 80075f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80075f6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80075fa:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	015a      	lsls	r2, r3, #5
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4413      	add	r3, r2
 8007604:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	68ba      	ldr	r2, [r7, #8]
 800760c:	0151      	lsls	r1, r2, #5
 800760e:	68fa      	ldr	r2, [r7, #12]
 8007610:	440a      	add	r2, r1
 8007612:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007616:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800761a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007622:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007624:	683b      	ldr	r3, [r7, #0]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	f003 030f 	and.w	r3, r3, #15
 800762c:	2101      	movs	r1, #1
 800762e:	fa01 f303 	lsl.w	r3, r1, r3
 8007632:	b29b      	uxth	r3, r3
 8007634:	43db      	mvns	r3, r3
 8007636:	68f9      	ldr	r1, [r7, #12]
 8007638:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800763c:	4013      	ands	r3, r2
 800763e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007646:	69da      	ldr	r2, [r3, #28]
 8007648:	683b      	ldr	r3, [r7, #0]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	f003 030f 	and.w	r3, r3, #15
 8007650:	2101      	movs	r1, #1
 8007652:	fa01 f303 	lsl.w	r3, r1, r3
 8007656:	b29b      	uxth	r3, r3
 8007658:	43db      	mvns	r3, r3
 800765a:	68f9      	ldr	r1, [r7, #12]
 800765c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007660:	4013      	ands	r3, r2
 8007662:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	015a      	lsls	r2, r3, #5
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	4413      	add	r3, r2
 800766c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007670:	681a      	ldr	r2, [r3, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	0159      	lsls	r1, r3, #5
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	440b      	add	r3, r1
 800767a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800767e:	4619      	mov	r1, r3
 8007680:	4b35      	ldr	r3, [pc, #212]	; (8007758 <USB_DeactivateEndpoint+0x1b0>)
 8007682:	4013      	ands	r3, r2
 8007684:	600b      	str	r3, [r1, #0]
 8007686:	e060      	b.n	800774a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	015a      	lsls	r2, r3, #5
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	4413      	add	r3, r2
 8007690:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800769a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800769e:	d11f      	bne.n	80076e0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	68ba      	ldr	r2, [r7, #8]
 80076b0:	0151      	lsls	r1, r2, #5
 80076b2:	68fa      	ldr	r2, [r7, #12]
 80076b4:	440a      	add	r2, r1
 80076b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076ba:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80076be:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	015a      	lsls	r2, r3, #5
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	4413      	add	r3, r2
 80076c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68ba      	ldr	r2, [r7, #8]
 80076d0:	0151      	lsls	r1, r2, #5
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	440a      	add	r2, r1
 80076d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80076da:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80076de:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80076e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80076e8:	683b      	ldr	r3, [r7, #0]
 80076ea:	781b      	ldrb	r3, [r3, #0]
 80076ec:	f003 030f 	and.w	r3, r3, #15
 80076f0:	2101      	movs	r1, #1
 80076f2:	fa01 f303 	lsl.w	r3, r1, r3
 80076f6:	041b      	lsls	r3, r3, #16
 80076f8:	43db      	mvns	r3, r3
 80076fa:	68f9      	ldr	r1, [r7, #12]
 80076fc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007700:	4013      	ands	r3, r2
 8007702:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770a:	69da      	ldr	r2, [r3, #28]
 800770c:	683b      	ldr	r3, [r7, #0]
 800770e:	781b      	ldrb	r3, [r3, #0]
 8007710:	f003 030f 	and.w	r3, r3, #15
 8007714:	2101      	movs	r1, #1
 8007716:	fa01 f303 	lsl.w	r3, r1, r3
 800771a:	041b      	lsls	r3, r3, #16
 800771c:	43db      	mvns	r3, r3
 800771e:	68f9      	ldr	r1, [r7, #12]
 8007720:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007724:	4013      	ands	r3, r2
 8007726:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	015a      	lsls	r2, r3, #5
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	4413      	add	r3, r2
 8007730:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007734:	681a      	ldr	r2, [r3, #0]
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	0159      	lsls	r1, r3, #5
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	440b      	add	r3, r1
 800773e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007742:	4619      	mov	r1, r3
 8007744:	4b05      	ldr	r3, [pc, #20]	; (800775c <USB_DeactivateEndpoint+0x1b4>)
 8007746:	4013      	ands	r3, r2
 8007748:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800774a:	2300      	movs	r3, #0
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr
 8007758:	ec337800 	.word	0xec337800
 800775c:	eff37800 	.word	0xeff37800

08007760 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b08a      	sub	sp, #40	; 0x28
 8007764:	af02      	add	r7, sp, #8
 8007766:	60f8      	str	r0, [r7, #12]
 8007768:	60b9      	str	r1, [r7, #8]
 800776a:	4613      	mov	r3, r2
 800776c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	781b      	ldrb	r3, [r3, #0]
 8007776:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	785b      	ldrb	r3, [r3, #1]
 800777c:	2b01      	cmp	r3, #1
 800777e:	f040 815c 	bne.w	8007a3a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007782:	68bb      	ldr	r3, [r7, #8]
 8007784:	699b      	ldr	r3, [r3, #24]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d132      	bne.n	80077f0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800778a:	69bb      	ldr	r3, [r7, #24]
 800778c:	015a      	lsls	r2, r3, #5
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	4413      	add	r3, r2
 8007792:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	69ba      	ldr	r2, [r7, #24]
 800779a:	0151      	lsls	r1, r2, #5
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	440a      	add	r2, r1
 80077a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80077a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80077ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80077ae:	69bb      	ldr	r3, [r7, #24]
 80077b0:	015a      	lsls	r2, r3, #5
 80077b2:	69fb      	ldr	r3, [r7, #28]
 80077b4:	4413      	add	r3, r2
 80077b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	69ba      	ldr	r2, [r7, #24]
 80077be:	0151      	lsls	r1, r2, #5
 80077c0:	69fa      	ldr	r2, [r7, #28]
 80077c2:	440a      	add	r2, r1
 80077c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077c8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80077cc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077ce:	69bb      	ldr	r3, [r7, #24]
 80077d0:	015a      	lsls	r2, r3, #5
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	69ba      	ldr	r2, [r7, #24]
 80077de:	0151      	lsls	r1, r2, #5
 80077e0:	69fa      	ldr	r2, [r7, #28]
 80077e2:	440a      	add	r2, r1
 80077e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80077e8:	0cdb      	lsrs	r3, r3, #19
 80077ea:	04db      	lsls	r3, r3, #19
 80077ec:	6113      	str	r3, [r2, #16]
 80077ee:	e074      	b.n	80078da <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80077f0:	69bb      	ldr	r3, [r7, #24]
 80077f2:	015a      	lsls	r2, r3, #5
 80077f4:	69fb      	ldr	r3, [r7, #28]
 80077f6:	4413      	add	r3, r2
 80077f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077fc:	691b      	ldr	r3, [r3, #16]
 80077fe:	69ba      	ldr	r2, [r7, #24]
 8007800:	0151      	lsls	r1, r2, #5
 8007802:	69fa      	ldr	r2, [r7, #28]
 8007804:	440a      	add	r2, r1
 8007806:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800780a:	0cdb      	lsrs	r3, r3, #19
 800780c:	04db      	lsls	r3, r3, #19
 800780e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007810:	69bb      	ldr	r3, [r7, #24]
 8007812:	015a      	lsls	r2, r3, #5
 8007814:	69fb      	ldr	r3, [r7, #28]
 8007816:	4413      	add	r3, r2
 8007818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800781c:	691b      	ldr	r3, [r3, #16]
 800781e:	69ba      	ldr	r2, [r7, #24]
 8007820:	0151      	lsls	r1, r2, #5
 8007822:	69fa      	ldr	r2, [r7, #28]
 8007824:	440a      	add	r2, r1
 8007826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800782a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800782e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007832:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	015a      	lsls	r2, r3, #5
 8007838:	69fb      	ldr	r3, [r7, #28]
 800783a:	4413      	add	r3, r2
 800783c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007840:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	6999      	ldr	r1, [r3, #24]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	440b      	add	r3, r1
 800784c:	1e59      	subs	r1, r3, #1
 800784e:	68bb      	ldr	r3, [r7, #8]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	fbb1 f3f3 	udiv	r3, r1, r3
 8007856:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8007858:	4b9d      	ldr	r3, [pc, #628]	; (8007ad0 <USB_EPStartXfer+0x370>)
 800785a:	400b      	ands	r3, r1
 800785c:	69b9      	ldr	r1, [r7, #24]
 800785e:	0148      	lsls	r0, r1, #5
 8007860:	69f9      	ldr	r1, [r7, #28]
 8007862:	4401      	add	r1, r0
 8007864:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007868:	4313      	orrs	r3, r2
 800786a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800786c:	69bb      	ldr	r3, [r7, #24]
 800786e:	015a      	lsls	r2, r3, #5
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	4413      	add	r3, r2
 8007874:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007878:	691a      	ldr	r2, [r3, #16]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	699b      	ldr	r3, [r3, #24]
 800787e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007882:	69b9      	ldr	r1, [r7, #24]
 8007884:	0148      	lsls	r0, r1, #5
 8007886:	69f9      	ldr	r1, [r7, #28]
 8007888:	4401      	add	r1, r0
 800788a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800788e:	4313      	orrs	r3, r2
 8007890:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	791b      	ldrb	r3, [r3, #4]
 8007896:	2b01      	cmp	r3, #1
 8007898:	d11f      	bne.n	80078da <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800789a:	69bb      	ldr	r3, [r7, #24]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	69fb      	ldr	r3, [r7, #28]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	69ba      	ldr	r2, [r7, #24]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	69fa      	ldr	r2, [r7, #28]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078b4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80078b8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80078ba:	69bb      	ldr	r3, [r7, #24]
 80078bc:	015a      	lsls	r2, r3, #5
 80078be:	69fb      	ldr	r3, [r7, #28]
 80078c0:	4413      	add	r3, r2
 80078c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078c6:	691b      	ldr	r3, [r3, #16]
 80078c8:	69ba      	ldr	r2, [r7, #24]
 80078ca:	0151      	lsls	r1, r2, #5
 80078cc:	69fa      	ldr	r2, [r7, #28]
 80078ce:	440a      	add	r2, r1
 80078d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80078d4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80078d8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80078da:	79fb      	ldrb	r3, [r7, #7]
 80078dc:	2b01      	cmp	r3, #1
 80078de:	d14b      	bne.n	8007978 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	695b      	ldr	r3, [r3, #20]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d009      	beq.n	80078fc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	015a      	lsls	r2, r3, #5
 80078ec:	69fb      	ldr	r3, [r7, #28]
 80078ee:	4413      	add	r3, r2
 80078f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80078f4:	461a      	mov	r2, r3
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	695b      	ldr	r3, [r3, #20]
 80078fa:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	791b      	ldrb	r3, [r3, #4]
 8007900:	2b01      	cmp	r3, #1
 8007902:	d128      	bne.n	8007956 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007904:	69fb      	ldr	r3, [r7, #28]
 8007906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790a:	689b      	ldr	r3, [r3, #8]
 800790c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007910:	2b00      	cmp	r3, #0
 8007912:	d110      	bne.n	8007936 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8007914:	69bb      	ldr	r3, [r7, #24]
 8007916:	015a      	lsls	r2, r3, #5
 8007918:	69fb      	ldr	r3, [r7, #28]
 800791a:	4413      	add	r3, r2
 800791c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	69ba      	ldr	r2, [r7, #24]
 8007924:	0151      	lsls	r1, r2, #5
 8007926:	69fa      	ldr	r2, [r7, #28]
 8007928:	440a      	add	r2, r1
 800792a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800792e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007932:	6013      	str	r3, [r2, #0]
 8007934:	e00f      	b.n	8007956 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	015a      	lsls	r2, r3, #5
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	4413      	add	r3, r2
 800793e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	69ba      	ldr	r2, [r7, #24]
 8007946:	0151      	lsls	r1, r2, #5
 8007948:	69fa      	ldr	r2, [r7, #28]
 800794a:	440a      	add	r2, r1
 800794c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007954:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	015a      	lsls	r2, r3, #5
 800795a:	69fb      	ldr	r3, [r7, #28]
 800795c:	4413      	add	r3, r2
 800795e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69ba      	ldr	r2, [r7, #24]
 8007966:	0151      	lsls	r1, r2, #5
 8007968:	69fa      	ldr	r2, [r7, #28]
 800796a:	440a      	add	r2, r1
 800796c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007970:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007974:	6013      	str	r3, [r2, #0]
 8007976:	e133      	b.n	8007be0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007978:	69bb      	ldr	r3, [r7, #24]
 800797a:	015a      	lsls	r2, r3, #5
 800797c:	69fb      	ldr	r3, [r7, #28]
 800797e:	4413      	add	r3, r2
 8007980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	69ba      	ldr	r2, [r7, #24]
 8007988:	0151      	lsls	r1, r2, #5
 800798a:	69fa      	ldr	r2, [r7, #28]
 800798c:	440a      	add	r2, r1
 800798e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007992:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007996:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007998:	68bb      	ldr	r3, [r7, #8]
 800799a:	791b      	ldrb	r3, [r3, #4]
 800799c:	2b01      	cmp	r3, #1
 800799e:	d015      	beq.n	80079cc <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	699b      	ldr	r3, [r3, #24]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f000 811b 	beq.w	8007be0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80079aa:	69fb      	ldr	r3, [r7, #28]
 80079ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	f003 030f 	and.w	r3, r3, #15
 80079ba:	2101      	movs	r1, #1
 80079bc:	fa01 f303 	lsl.w	r3, r1, r3
 80079c0:	69f9      	ldr	r1, [r7, #28]
 80079c2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80079c6:	4313      	orrs	r3, r2
 80079c8:	634b      	str	r3, [r1, #52]	; 0x34
 80079ca:	e109      	b.n	8007be0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80079d2:	689b      	ldr	r3, [r3, #8]
 80079d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079d8:	2b00      	cmp	r3, #0
 80079da:	d110      	bne.n	80079fe <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80079dc:	69bb      	ldr	r3, [r7, #24]
 80079de:	015a      	lsls	r2, r3, #5
 80079e0:	69fb      	ldr	r3, [r7, #28]
 80079e2:	4413      	add	r3, r2
 80079e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	69ba      	ldr	r2, [r7, #24]
 80079ec:	0151      	lsls	r1, r2, #5
 80079ee:	69fa      	ldr	r2, [r7, #28]
 80079f0:	440a      	add	r2, r1
 80079f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80079f6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80079fa:	6013      	str	r3, [r2, #0]
 80079fc:	e00f      	b.n	8007a1e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80079fe:	69bb      	ldr	r3, [r7, #24]
 8007a00:	015a      	lsls	r2, r3, #5
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	4413      	add	r3, r2
 8007a06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	69ba      	ldr	r2, [r7, #24]
 8007a0e:	0151      	lsls	r1, r2, #5
 8007a10:	69fa      	ldr	r2, [r7, #28]
 8007a12:	440a      	add	r2, r1
 8007a14:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007a18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a1c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8007a1e:	68bb      	ldr	r3, [r7, #8]
 8007a20:	6919      	ldr	r1, [r3, #16]
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	781a      	ldrb	r2, [r3, #0]
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	b298      	uxth	r0, r3
 8007a2c:	79fb      	ldrb	r3, [r7, #7]
 8007a2e:	9300      	str	r3, [sp, #0]
 8007a30:	4603      	mov	r3, r0
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 fade 	bl	8007ff4 <USB_WritePacket>
 8007a38:	e0d2      	b.n	8007be0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007a3a:	69bb      	ldr	r3, [r7, #24]
 8007a3c:	015a      	lsls	r2, r3, #5
 8007a3e:	69fb      	ldr	r3, [r7, #28]
 8007a40:	4413      	add	r3, r2
 8007a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a46:	691b      	ldr	r3, [r3, #16]
 8007a48:	69ba      	ldr	r2, [r7, #24]
 8007a4a:	0151      	lsls	r1, r2, #5
 8007a4c:	69fa      	ldr	r2, [r7, #28]
 8007a4e:	440a      	add	r2, r1
 8007a50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a54:	0cdb      	lsrs	r3, r3, #19
 8007a56:	04db      	lsls	r3, r3, #19
 8007a58:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a66:	691b      	ldr	r3, [r3, #16]
 8007a68:	69ba      	ldr	r2, [r7, #24]
 8007a6a:	0151      	lsls	r1, r2, #5
 8007a6c:	69fa      	ldr	r2, [r7, #28]
 8007a6e:	440a      	add	r2, r1
 8007a70:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007a74:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007a78:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007a7c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	699b      	ldr	r3, [r3, #24]
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d126      	bne.n	8007ad4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007a92:	691a      	ldr	r2, [r3, #16]
 8007a94:	68bb      	ldr	r3, [r7, #8]
 8007a96:	68db      	ldr	r3, [r3, #12]
 8007a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007a9c:	69b9      	ldr	r1, [r7, #24]
 8007a9e:	0148      	lsls	r0, r1, #5
 8007aa0:	69f9      	ldr	r1, [r7, #28]
 8007aa2:	4401      	add	r1, r0
 8007aa4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	015a      	lsls	r2, r3, #5
 8007ab0:	69fb      	ldr	r3, [r7, #28]
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ab8:	691b      	ldr	r3, [r3, #16]
 8007aba:	69ba      	ldr	r2, [r7, #24]
 8007abc:	0151      	lsls	r1, r2, #5
 8007abe:	69fa      	ldr	r2, [r7, #28]
 8007ac0:	440a      	add	r2, r1
 8007ac2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007ac6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007aca:	6113      	str	r3, [r2, #16]
 8007acc:	e03a      	b.n	8007b44 <USB_EPStartXfer+0x3e4>
 8007ace:	bf00      	nop
 8007ad0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8007ad4:	68bb      	ldr	r3, [r7, #8]
 8007ad6:	699a      	ldr	r2, [r3, #24]
 8007ad8:	68bb      	ldr	r3, [r7, #8]
 8007ada:	68db      	ldr	r3, [r3, #12]
 8007adc:	4413      	add	r3, r2
 8007ade:	1e5a      	subs	r2, r3, #1
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ae8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8007aea:	68bb      	ldr	r3, [r7, #8]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	8afa      	ldrh	r2, [r7, #22]
 8007af0:	fb03 f202 	mul.w	r2, r3, r2
 8007af4:	68bb      	ldr	r3, [r7, #8]
 8007af6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8007af8:	69bb      	ldr	r3, [r7, #24]
 8007afa:	015a      	lsls	r2, r3, #5
 8007afc:	69fb      	ldr	r3, [r7, #28]
 8007afe:	4413      	add	r3, r2
 8007b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b04:	691a      	ldr	r2, [r3, #16]
 8007b06:	8afb      	ldrh	r3, [r7, #22]
 8007b08:	04d9      	lsls	r1, r3, #19
 8007b0a:	4b38      	ldr	r3, [pc, #224]	; (8007bec <USB_EPStartXfer+0x48c>)
 8007b0c:	400b      	ands	r3, r1
 8007b0e:	69b9      	ldr	r1, [r7, #24]
 8007b10:	0148      	lsls	r0, r1, #5
 8007b12:	69f9      	ldr	r1, [r7, #28]
 8007b14:	4401      	add	r1, r0
 8007b16:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8007b1e:	69bb      	ldr	r3, [r7, #24]
 8007b20:	015a      	lsls	r2, r3, #5
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	4413      	add	r3, r2
 8007b26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b2a:	691a      	ldr	r2, [r3, #16]
 8007b2c:	68bb      	ldr	r3, [r7, #8]
 8007b2e:	69db      	ldr	r3, [r3, #28]
 8007b30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007b34:	69b9      	ldr	r1, [r7, #24]
 8007b36:	0148      	lsls	r0, r1, #5
 8007b38:	69f9      	ldr	r1, [r7, #28]
 8007b3a:	4401      	add	r1, r0
 8007b3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007b40:	4313      	orrs	r3, r2
 8007b42:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007b44:	79fb      	ldrb	r3, [r7, #7]
 8007b46:	2b01      	cmp	r3, #1
 8007b48:	d10d      	bne.n	8007b66 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007b4a:	68bb      	ldr	r3, [r7, #8]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d009      	beq.n	8007b66 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007b52:	68bb      	ldr	r3, [r7, #8]
 8007b54:	6919      	ldr	r1, [r3, #16]
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b62:	460a      	mov	r2, r1
 8007b64:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8007b66:	68bb      	ldr	r3, [r7, #8]
 8007b68:	791b      	ldrb	r3, [r3, #4]
 8007b6a:	2b01      	cmp	r3, #1
 8007b6c:	d128      	bne.n	8007bc0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8007b6e:	69fb      	ldr	r3, [r7, #28]
 8007b70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007b74:	689b      	ldr	r3, [r3, #8]
 8007b76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d110      	bne.n	8007ba0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8007b7e:	69bb      	ldr	r3, [r7, #24]
 8007b80:	015a      	lsls	r2, r3, #5
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	4413      	add	r3, r2
 8007b86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69ba      	ldr	r2, [r7, #24]
 8007b8e:	0151      	lsls	r1, r2, #5
 8007b90:	69fa      	ldr	r2, [r7, #28]
 8007b92:	440a      	add	r2, r1
 8007b94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007b98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007b9c:	6013      	str	r3, [r2, #0]
 8007b9e:	e00f      	b.n	8007bc0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	015a      	lsls	r2, r3, #5
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	4413      	add	r3, r2
 8007ba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	69ba      	ldr	r2, [r7, #24]
 8007bb0:	0151      	lsls	r1, r2, #5
 8007bb2:	69fa      	ldr	r2, [r7, #28]
 8007bb4:	440a      	add	r2, r1
 8007bb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007bbe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007bc0:	69bb      	ldr	r3, [r7, #24]
 8007bc2:	015a      	lsls	r2, r3, #5
 8007bc4:	69fb      	ldr	r3, [r7, #28]
 8007bc6:	4413      	add	r3, r2
 8007bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	69ba      	ldr	r2, [r7, #24]
 8007bd0:	0151      	lsls	r1, r2, #5
 8007bd2:	69fa      	ldr	r2, [r7, #28]
 8007bd4:	440a      	add	r2, r1
 8007bd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007bda:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007bde:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007be0:	2300      	movs	r3, #0
}
 8007be2:	4618      	mov	r0, r3
 8007be4:	3720      	adds	r7, #32
 8007be6:	46bd      	mov	sp, r7
 8007be8:	bd80      	pop	{r7, pc}
 8007bea:	bf00      	nop
 8007bec:	1ff80000 	.word	0x1ff80000

08007bf0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	b087      	sub	sp, #28
 8007bf4:	af00      	add	r7, sp, #0
 8007bf6:	60f8      	str	r0, [r7, #12]
 8007bf8:	60b9      	str	r1, [r7, #8]
 8007bfa:	4613      	mov	r3, r2
 8007bfc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8007c02:	68bb      	ldr	r3, [r7, #8]
 8007c04:	781b      	ldrb	r3, [r3, #0]
 8007c06:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007c08:	68bb      	ldr	r3, [r7, #8]
 8007c0a:	785b      	ldrb	r3, [r3, #1]
 8007c0c:	2b01      	cmp	r3, #1
 8007c0e:	f040 80ce 	bne.w	8007dae <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8007c12:	68bb      	ldr	r3, [r7, #8]
 8007c14:	699b      	ldr	r3, [r3, #24]
 8007c16:	2b00      	cmp	r3, #0
 8007c18:	d132      	bne.n	8007c80 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	015a      	lsls	r2, r3, #5
 8007c1e:	697b      	ldr	r3, [r7, #20]
 8007c20:	4413      	add	r3, r2
 8007c22:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	693a      	ldr	r2, [r7, #16]
 8007c2a:	0151      	lsls	r1, r2, #5
 8007c2c:	697a      	ldr	r2, [r7, #20]
 8007c2e:	440a      	add	r2, r1
 8007c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c34:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007c38:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007c3c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007c3e:	693b      	ldr	r3, [r7, #16]
 8007c40:	015a      	lsls	r2, r3, #5
 8007c42:	697b      	ldr	r3, [r7, #20]
 8007c44:	4413      	add	r3, r2
 8007c46:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c4a:	691b      	ldr	r3, [r3, #16]
 8007c4c:	693a      	ldr	r2, [r7, #16]
 8007c4e:	0151      	lsls	r1, r2, #5
 8007c50:	697a      	ldr	r2, [r7, #20]
 8007c52:	440a      	add	r2, r1
 8007c54:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c58:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007c5c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	015a      	lsls	r2, r3, #5
 8007c62:	697b      	ldr	r3, [r7, #20]
 8007c64:	4413      	add	r3, r2
 8007c66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c6a:	691b      	ldr	r3, [r3, #16]
 8007c6c:	693a      	ldr	r2, [r7, #16]
 8007c6e:	0151      	lsls	r1, r2, #5
 8007c70:	697a      	ldr	r2, [r7, #20]
 8007c72:	440a      	add	r2, r1
 8007c74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c78:	0cdb      	lsrs	r3, r3, #19
 8007c7a:	04db      	lsls	r3, r3, #19
 8007c7c:	6113      	str	r3, [r2, #16]
 8007c7e:	e04e      	b.n	8007d1e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8007c80:	693b      	ldr	r3, [r7, #16]
 8007c82:	015a      	lsls	r2, r3, #5
 8007c84:	697b      	ldr	r3, [r7, #20]
 8007c86:	4413      	add	r3, r2
 8007c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007c8c:	691b      	ldr	r3, [r3, #16]
 8007c8e:	693a      	ldr	r2, [r7, #16]
 8007c90:	0151      	lsls	r1, r2, #5
 8007c92:	697a      	ldr	r2, [r7, #20]
 8007c94:	440a      	add	r2, r1
 8007c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007c9a:	0cdb      	lsrs	r3, r3, #19
 8007c9c:	04db      	lsls	r3, r3, #19
 8007c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8007ca0:	693b      	ldr	r3, [r7, #16]
 8007ca2:	015a      	lsls	r2, r3, #5
 8007ca4:	697b      	ldr	r3, [r7, #20]
 8007ca6:	4413      	add	r3, r2
 8007ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007cac:	691b      	ldr	r3, [r3, #16]
 8007cae:	693a      	ldr	r2, [r7, #16]
 8007cb0:	0151      	lsls	r1, r2, #5
 8007cb2:	697a      	ldr	r2, [r7, #20]
 8007cb4:	440a      	add	r2, r1
 8007cb6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cba:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007cbe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007cc2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8007cc4:	68bb      	ldr	r3, [r7, #8]
 8007cc6:	699a      	ldr	r2, [r3, #24]
 8007cc8:	68bb      	ldr	r3, [r7, #8]
 8007cca:	68db      	ldr	r3, [r3, #12]
 8007ccc:	429a      	cmp	r2, r3
 8007cce:	d903      	bls.n	8007cd8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	68da      	ldr	r2, [r3, #12]
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	015a      	lsls	r2, r3, #5
 8007cdc:	697b      	ldr	r3, [r7, #20]
 8007cde:	4413      	add	r3, r2
 8007ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	693a      	ldr	r2, [r7, #16]
 8007ce8:	0151      	lsls	r1, r2, #5
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	440a      	add	r2, r1
 8007cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007cf2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8007cf8:	693b      	ldr	r3, [r7, #16]
 8007cfa:	015a      	lsls	r2, r3, #5
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	4413      	add	r3, r2
 8007d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d04:	691a      	ldr	r2, [r3, #16]
 8007d06:	68bb      	ldr	r3, [r7, #8]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007d0e:	6939      	ldr	r1, [r7, #16]
 8007d10:	0148      	lsls	r0, r1, #5
 8007d12:	6979      	ldr	r1, [r7, #20]
 8007d14:	4401      	add	r1, r0
 8007d16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8007d1e:	79fb      	ldrb	r3, [r7, #7]
 8007d20:	2b01      	cmp	r3, #1
 8007d22:	d11e      	bne.n	8007d62 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	695b      	ldr	r3, [r3, #20]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d009      	beq.n	8007d40 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8007d2c:	693b      	ldr	r3, [r7, #16]
 8007d2e:	015a      	lsls	r2, r3, #5
 8007d30:	697b      	ldr	r3, [r7, #20]
 8007d32:	4413      	add	r3, r2
 8007d34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d38:	461a      	mov	r2, r3
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	695b      	ldr	r3, [r3, #20]
 8007d3e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	015a      	lsls	r2, r3, #5
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	4413      	add	r3, r2
 8007d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	693a      	ldr	r2, [r7, #16]
 8007d50:	0151      	lsls	r1, r2, #5
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	440a      	add	r2, r1
 8007d56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d5a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d5e:	6013      	str	r3, [r2, #0]
 8007d60:	e097      	b.n	8007e92 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	015a      	lsls	r2, r3, #5
 8007d66:	697b      	ldr	r3, [r7, #20]
 8007d68:	4413      	add	r3, r2
 8007d6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	693a      	ldr	r2, [r7, #16]
 8007d72:	0151      	lsls	r1, r2, #5
 8007d74:	697a      	ldr	r2, [r7, #20]
 8007d76:	440a      	add	r2, r1
 8007d78:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007d7c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007d80:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8007d82:	68bb      	ldr	r3, [r7, #8]
 8007d84:	699b      	ldr	r3, [r3, #24]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	f000 8083 	beq.w	8007e92 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8007d8c:	697b      	ldr	r3, [r7, #20]
 8007d8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	f003 030f 	and.w	r3, r3, #15
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8007da2:	6979      	ldr	r1, [r7, #20]
 8007da4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007da8:	4313      	orrs	r3, r2
 8007daa:	634b      	str	r3, [r1, #52]	; 0x34
 8007dac:	e071      	b.n	8007e92 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	015a      	lsls	r2, r3, #5
 8007db2:	697b      	ldr	r3, [r7, #20]
 8007db4:	4413      	add	r3, r2
 8007db6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dba:	691b      	ldr	r3, [r3, #16]
 8007dbc:	693a      	ldr	r2, [r7, #16]
 8007dbe:	0151      	lsls	r1, r2, #5
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	440a      	add	r2, r1
 8007dc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007dc8:	0cdb      	lsrs	r3, r3, #19
 8007dca:	04db      	lsls	r3, r3, #19
 8007dcc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8007dce:	693b      	ldr	r3, [r7, #16]
 8007dd0:	015a      	lsls	r2, r3, #5
 8007dd2:	697b      	ldr	r3, [r7, #20]
 8007dd4:	4413      	add	r3, r2
 8007dd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	693a      	ldr	r2, [r7, #16]
 8007dde:	0151      	lsls	r1, r2, #5
 8007de0:	697a      	ldr	r2, [r7, #20]
 8007de2:	440a      	add	r2, r1
 8007de4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007de8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8007dec:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8007df0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8007df2:	68bb      	ldr	r3, [r7, #8]
 8007df4:	699b      	ldr	r3, [r3, #24]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d003      	beq.n	8007e02 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8007dfa:	68bb      	ldr	r3, [r7, #8]
 8007dfc:	68da      	ldr	r2, [r3, #12]
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	68da      	ldr	r2, [r3, #12]
 8007e06:	68bb      	ldr	r3, [r7, #8]
 8007e08:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8007e0a:	693b      	ldr	r3, [r7, #16]
 8007e0c:	015a      	lsls	r2, r3, #5
 8007e0e:	697b      	ldr	r3, [r7, #20]
 8007e10:	4413      	add	r3, r2
 8007e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e16:	691b      	ldr	r3, [r3, #16]
 8007e18:	693a      	ldr	r2, [r7, #16]
 8007e1a:	0151      	lsls	r1, r2, #5
 8007e1c:	697a      	ldr	r2, [r7, #20]
 8007e1e:	440a      	add	r2, r1
 8007e20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e24:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8007e28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8007e2a:	693b      	ldr	r3, [r7, #16]
 8007e2c:	015a      	lsls	r2, r3, #5
 8007e2e:	697b      	ldr	r3, [r7, #20]
 8007e30:	4413      	add	r3, r2
 8007e32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e36:	691a      	ldr	r2, [r3, #16]
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	69db      	ldr	r3, [r3, #28]
 8007e3c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8007e40:	6939      	ldr	r1, [r7, #16]
 8007e42:	0148      	lsls	r0, r1, #5
 8007e44:	6979      	ldr	r1, [r7, #20]
 8007e46:	4401      	add	r1, r0
 8007e48:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8007e50:	79fb      	ldrb	r3, [r7, #7]
 8007e52:	2b01      	cmp	r3, #1
 8007e54:	d10d      	bne.n	8007e72 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d009      	beq.n	8007e72 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8007e5e:	68bb      	ldr	r3, [r7, #8]
 8007e60:	6919      	ldr	r1, [r3, #16]
 8007e62:	693b      	ldr	r3, [r7, #16]
 8007e64:	015a      	lsls	r2, r3, #5
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	4413      	add	r3, r2
 8007e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e6e:	460a      	mov	r2, r1
 8007e70:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8007e72:	693b      	ldr	r3, [r7, #16]
 8007e74:	015a      	lsls	r2, r3, #5
 8007e76:	697b      	ldr	r3, [r7, #20]
 8007e78:	4413      	add	r3, r2
 8007e7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	693a      	ldr	r2, [r7, #16]
 8007e82:	0151      	lsls	r1, r2, #5
 8007e84:	697a      	ldr	r2, [r7, #20]
 8007e86:	440a      	add	r2, r1
 8007e88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007e8c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8007e90:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8007e92:	2300      	movs	r3, #0
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	371c      	adds	r7, #28
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8007eae:	2300      	movs	r3, #0
 8007eb0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	785b      	ldrb	r3, [r3, #1]
 8007eba:	2b01      	cmp	r3, #1
 8007ebc:	d14a      	bne.n	8007f54 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007ebe:	683b      	ldr	r3, [r7, #0]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ed2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ed6:	f040 8086 	bne.w	8007fe6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	781b      	ldrb	r3, [r3, #0]
 8007ede:	015a      	lsls	r2, r3, #5
 8007ee0:	693b      	ldr	r3, [r7, #16]
 8007ee2:	4413      	add	r3, r2
 8007ee4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	683a      	ldr	r2, [r7, #0]
 8007eec:	7812      	ldrb	r2, [r2, #0]
 8007eee:	0151      	lsls	r1, r2, #5
 8007ef0:	693a      	ldr	r2, [r7, #16]
 8007ef2:	440a      	add	r2, r1
 8007ef4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007ef8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007efc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8007efe:	683b      	ldr	r3, [r7, #0]
 8007f00:	781b      	ldrb	r3, [r3, #0]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	693b      	ldr	r3, [r7, #16]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	683a      	ldr	r2, [r7, #0]
 8007f10:	7812      	ldrb	r2, [r2, #0]
 8007f12:	0151      	lsls	r1, r2, #5
 8007f14:	693a      	ldr	r2, [r7, #16]
 8007f16:	440a      	add	r2, r1
 8007f18:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8007f1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007f20:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	3301      	adds	r3, #1
 8007f26:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007f28:	68fb      	ldr	r3, [r7, #12]
 8007f2a:	f242 7210 	movw	r2, #10000	; 0x2710
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d902      	bls.n	8007f38 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	75fb      	strb	r3, [r7, #23]
          break;
 8007f36:	e056      	b.n	8007fe6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	781b      	ldrb	r3, [r3, #0]
 8007f3c:	015a      	lsls	r2, r3, #5
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	4413      	add	r3, r2
 8007f42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f50:	d0e7      	beq.n	8007f22 <USB_EPStopXfer+0x82>
 8007f52:	e048      	b.n	8007fe6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007f54:	683b      	ldr	r3, [r7, #0]
 8007f56:	781b      	ldrb	r3, [r3, #0]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007f68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007f6c:	d13b      	bne.n	8007fe6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	015a      	lsls	r2, r3, #5
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	683a      	ldr	r2, [r7, #0]
 8007f80:	7812      	ldrb	r2, [r2, #0]
 8007f82:	0151      	lsls	r1, r2, #5
 8007f84:	693a      	ldr	r2, [r7, #16]
 8007f86:	440a      	add	r2, r1
 8007f88:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007f8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8007f90:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	781b      	ldrb	r3, [r3, #0]
 8007f96:	015a      	lsls	r2, r3, #5
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	4413      	add	r3, r2
 8007f9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	683a      	ldr	r2, [r7, #0]
 8007fa4:	7812      	ldrb	r2, [r2, #0]
 8007fa6:	0151      	lsls	r1, r2, #5
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	440a      	add	r2, r1
 8007fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8007fb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007fb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8007fb6:	68fb      	ldr	r3, [r7, #12]
 8007fb8:	3301      	adds	r3, #1
 8007fba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8007fbc:	68fb      	ldr	r3, [r7, #12]
 8007fbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8007fc2:	4293      	cmp	r3, r2
 8007fc4:	d902      	bls.n	8007fcc <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8007fc6:	2301      	movs	r3, #1
 8007fc8:	75fb      	strb	r3, [r7, #23]
          break;
 8007fca:	e00c      	b.n	8007fe6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8007fcc:	683b      	ldr	r3, [r7, #0]
 8007fce:	781b      	ldrb	r3, [r3, #0]
 8007fd0:	015a      	lsls	r2, r3, #5
 8007fd2:	693b      	ldr	r3, [r7, #16]
 8007fd4:	4413      	add	r3, r2
 8007fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007fe0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007fe4:	d0e7      	beq.n	8007fb6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8007fe6:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fe8:	4618      	mov	r0, r3
 8007fea:	371c      	adds	r7, #28
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr

08007ff4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b089      	sub	sp, #36	; 0x24
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	4611      	mov	r1, r2
 8008000:	461a      	mov	r2, r3
 8008002:	460b      	mov	r3, r1
 8008004:	71fb      	strb	r3, [r7, #7]
 8008006:	4613      	mov	r3, r2
 8008008:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800800e:	68bb      	ldr	r3, [r7, #8]
 8008010:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8008012:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008016:	2b00      	cmp	r3, #0
 8008018:	d123      	bne.n	8008062 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800801a:	88bb      	ldrh	r3, [r7, #4]
 800801c:	3303      	adds	r3, #3
 800801e:	089b      	lsrs	r3, r3, #2
 8008020:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8008022:	2300      	movs	r3, #0
 8008024:	61bb      	str	r3, [r7, #24]
 8008026:	e018      	b.n	800805a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8008028:	79fb      	ldrb	r3, [r7, #7]
 800802a:	031a      	lsls	r2, r3, #12
 800802c:	697b      	ldr	r3, [r7, #20]
 800802e:	4413      	add	r3, r2
 8008030:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8008034:	461a      	mov	r2, r3
 8008036:	69fb      	ldr	r3, [r7, #28]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800803c:	69fb      	ldr	r3, [r7, #28]
 800803e:	3301      	adds	r3, #1
 8008040:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008042:	69fb      	ldr	r3, [r7, #28]
 8008044:	3301      	adds	r3, #1
 8008046:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8008048:	69fb      	ldr	r3, [r7, #28]
 800804a:	3301      	adds	r3, #1
 800804c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800804e:	69fb      	ldr	r3, [r7, #28]
 8008050:	3301      	adds	r3, #1
 8008052:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8008054:	69bb      	ldr	r3, [r7, #24]
 8008056:	3301      	adds	r3, #1
 8008058:	61bb      	str	r3, [r7, #24]
 800805a:	69ba      	ldr	r2, [r7, #24]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	429a      	cmp	r2, r3
 8008060:	d3e2      	bcc.n	8008028 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8008062:	2300      	movs	r3, #0
}
 8008064:	4618      	mov	r0, r3
 8008066:	3724      	adds	r7, #36	; 0x24
 8008068:	46bd      	mov	sp, r7
 800806a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806e:	4770      	bx	lr

08008070 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8008070:	b480      	push	{r7}
 8008072:	b08b      	sub	sp, #44	; 0x2c
 8008074:	af00      	add	r7, sp, #0
 8008076:	60f8      	str	r0, [r7, #12]
 8008078:	60b9      	str	r1, [r7, #8]
 800807a:	4613      	mov	r3, r2
 800807c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8008082:	68bb      	ldr	r3, [r7, #8]
 8008084:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8008086:	88fb      	ldrh	r3, [r7, #6]
 8008088:	089b      	lsrs	r3, r3, #2
 800808a:	b29b      	uxth	r3, r3
 800808c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800808e:	88fb      	ldrh	r3, [r7, #6]
 8008090:	f003 0303 	and.w	r3, r3, #3
 8008094:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8008096:	2300      	movs	r3, #0
 8008098:	623b      	str	r3, [r7, #32]
 800809a:	e014      	b.n	80080c6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800809c:	69bb      	ldr	r3, [r7, #24]
 800809e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080a6:	601a      	str	r2, [r3, #0]
    pDest++;
 80080a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080aa:	3301      	adds	r3, #1
 80080ac:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b0:	3301      	adds	r3, #1
 80080b2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080b6:	3301      	adds	r3, #1
 80080b8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80080ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080bc:	3301      	adds	r3, #1
 80080be:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80080c0:	6a3b      	ldr	r3, [r7, #32]
 80080c2:	3301      	adds	r3, #1
 80080c4:	623b      	str	r3, [r7, #32]
 80080c6:	6a3a      	ldr	r2, [r7, #32]
 80080c8:	697b      	ldr	r3, [r7, #20]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d3e6      	bcc.n	800809c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80080ce:	8bfb      	ldrh	r3, [r7, #30]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d01e      	beq.n	8008112 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80080d4:	2300      	movs	r3, #0
 80080d6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80080de:	461a      	mov	r2, r3
 80080e0:	f107 0310 	add.w	r3, r7, #16
 80080e4:	6812      	ldr	r2, [r2, #0]
 80080e6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	6a3b      	ldr	r3, [r7, #32]
 80080ec:	b2db      	uxtb	r3, r3
 80080ee:	00db      	lsls	r3, r3, #3
 80080f0:	fa22 f303 	lsr.w	r3, r2, r3
 80080f4:	b2da      	uxtb	r2, r3
 80080f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080f8:	701a      	strb	r2, [r3, #0]
      i++;
 80080fa:	6a3b      	ldr	r3, [r7, #32]
 80080fc:	3301      	adds	r3, #1
 80080fe:	623b      	str	r3, [r7, #32]
      pDest++;
 8008100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008102:	3301      	adds	r3, #1
 8008104:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8008106:	8bfb      	ldrh	r3, [r7, #30]
 8008108:	3b01      	subs	r3, #1
 800810a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800810c:	8bfb      	ldrh	r3, [r7, #30]
 800810e:	2b00      	cmp	r3, #0
 8008110:	d1ea      	bne.n	80080e8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8008112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008114:	4618      	mov	r0, r3
 8008116:	372c      	adds	r7, #44	; 0x2c
 8008118:	46bd      	mov	sp, r7
 800811a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811e:	4770      	bx	lr

08008120 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
 8008128:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	781b      	ldrb	r3, [r3, #0]
 8008132:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	785b      	ldrb	r3, [r3, #1]
 8008138:	2b01      	cmp	r3, #1
 800813a:	d12c      	bne.n	8008196 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800813c:	68bb      	ldr	r3, [r7, #8]
 800813e:	015a      	lsls	r2, r3, #5
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	4413      	add	r3, r2
 8008144:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	db12      	blt.n	8008174 <USB_EPSetStall+0x54>
 800814e:	68bb      	ldr	r3, [r7, #8]
 8008150:	2b00      	cmp	r3, #0
 8008152:	d00f      	beq.n	8008174 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8008154:	68bb      	ldr	r3, [r7, #8]
 8008156:	015a      	lsls	r2, r3, #5
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	4413      	add	r3, r2
 800815c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	0151      	lsls	r1, r2, #5
 8008166:	68fa      	ldr	r2, [r7, #12]
 8008168:	440a      	add	r2, r1
 800816a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800816e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8008172:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	015a      	lsls	r2, r3, #5
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	4413      	add	r3, r2
 800817c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68ba      	ldr	r2, [r7, #8]
 8008184:	0151      	lsls	r1, r2, #5
 8008186:	68fa      	ldr	r2, [r7, #12]
 8008188:	440a      	add	r2, r1
 800818a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800818e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8008192:	6013      	str	r3, [r2, #0]
 8008194:	e02b      	b.n	80081ee <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	015a      	lsls	r2, r3, #5
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	4413      	add	r3, r2
 800819e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	db12      	blt.n	80081ce <USB_EPSetStall+0xae>
 80081a8:	68bb      	ldr	r3, [r7, #8]
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d00f      	beq.n	80081ce <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80081ae:	68bb      	ldr	r3, [r7, #8]
 80081b0:	015a      	lsls	r2, r3, #5
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	4413      	add	r3, r2
 80081b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	68ba      	ldr	r2, [r7, #8]
 80081be:	0151      	lsls	r1, r2, #5
 80081c0:	68fa      	ldr	r2, [r7, #12]
 80081c2:	440a      	add	r2, r1
 80081c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80081cc:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80081ce:	68bb      	ldr	r3, [r7, #8]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	68ba      	ldr	r2, [r7, #8]
 80081de:	0151      	lsls	r1, r2, #5
 80081e0:	68fa      	ldr	r2, [r7, #12]
 80081e2:	440a      	add	r2, r1
 80081e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80081e8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80081ec:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80081ee:	2300      	movs	r3, #0
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80081fc:	b480      	push	{r7}
 80081fe:	b085      	sub	sp, #20
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
 8008204:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800820a:	683b      	ldr	r3, [r7, #0]
 800820c:	781b      	ldrb	r3, [r3, #0]
 800820e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	785b      	ldrb	r3, [r3, #1]
 8008214:	2b01      	cmp	r3, #1
 8008216:	d128      	bne.n	800826a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	015a      	lsls	r2, r3, #5
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4413      	add	r3, r2
 8008220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008224:	681b      	ldr	r3, [r3, #0]
 8008226:	68ba      	ldr	r2, [r7, #8]
 8008228:	0151      	lsls	r1, r2, #5
 800822a:	68fa      	ldr	r2, [r7, #12]
 800822c:	440a      	add	r2, r1
 800822e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008232:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008236:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	791b      	ldrb	r3, [r3, #4]
 800823c:	2b03      	cmp	r3, #3
 800823e:	d003      	beq.n	8008248 <USB_EPClearStall+0x4c>
 8008240:	683b      	ldr	r3, [r7, #0]
 8008242:	791b      	ldrb	r3, [r3, #4]
 8008244:	2b02      	cmp	r3, #2
 8008246:	d138      	bne.n	80082ba <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	015a      	lsls	r2, r3, #5
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	4413      	add	r3, r2
 8008250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	68ba      	ldr	r2, [r7, #8]
 8008258:	0151      	lsls	r1, r2, #5
 800825a:	68fa      	ldr	r2, [r7, #12]
 800825c:	440a      	add	r2, r1
 800825e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8008262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008266:	6013      	str	r3, [r2, #0]
 8008268:	e027      	b.n	80082ba <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800826a:	68bb      	ldr	r3, [r7, #8]
 800826c:	015a      	lsls	r2, r3, #5
 800826e:	68fb      	ldr	r3, [r7, #12]
 8008270:	4413      	add	r3, r2
 8008272:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	0151      	lsls	r1, r2, #5
 800827c:	68fa      	ldr	r2, [r7, #12]
 800827e:	440a      	add	r2, r1
 8008280:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008284:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008288:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	791b      	ldrb	r3, [r3, #4]
 800828e:	2b03      	cmp	r3, #3
 8008290:	d003      	beq.n	800829a <USB_EPClearStall+0x9e>
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	791b      	ldrb	r3, [r3, #4]
 8008296:	2b02      	cmp	r3, #2
 8008298:	d10f      	bne.n	80082ba <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	015a      	lsls	r2, r3, #5
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4413      	add	r3, r2
 80082a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	0151      	lsls	r1, r2, #5
 80082ac:	68fa      	ldr	r2, [r7, #12]
 80082ae:	440a      	add	r2, r1
 80082b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80082b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082b8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80082ba:	2300      	movs	r3, #0
}
 80082bc:	4618      	mov	r0, r3
 80082be:	3714      	adds	r7, #20
 80082c0:	46bd      	mov	sp, r7
 80082c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c6:	4770      	bx	lr

080082c8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80082c8:	b480      	push	{r7}
 80082ca:	b085      	sub	sp, #20
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	6078      	str	r0, [r7, #4]
 80082d0:	460b      	mov	r3, r1
 80082d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80082e6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80082ea:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80082f2:	681a      	ldr	r2, [r3, #0]
 80082f4:	78fb      	ldrb	r3, [r7, #3]
 80082f6:	011b      	lsls	r3, r3, #4
 80082f8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80082fc:	68f9      	ldr	r1, [r7, #12]
 80082fe:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008302:	4313      	orrs	r3, r2
 8008304:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	3714      	adds	r7, #20
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800832e:	f023 0303 	bic.w	r3, r3, #3
 8008332:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	68fa      	ldr	r2, [r7, #12]
 800833e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008342:	f023 0302 	bic.w	r3, r3, #2
 8008346:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3714      	adds	r7, #20
 800834e:	46bd      	mov	sp, r7
 8008350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008354:	4770      	bx	lr

08008356 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008356:	b480      	push	{r7}
 8008358:	b085      	sub	sp, #20
 800835a:	af00      	add	r7, sp, #0
 800835c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	68fa      	ldr	r2, [r7, #12]
 800836c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008370:	f023 0303 	bic.w	r3, r3, #3
 8008374:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	68fa      	ldr	r2, [r7, #12]
 8008380:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008384:	f043 0302 	orr.w	r3, r3, #2
 8008388:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800838a:	2300      	movs	r3, #0
}
 800838c:	4618      	mov	r0, r3
 800838e:	3714      	adds	r7, #20
 8008390:	46bd      	mov	sp, r7
 8008392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008396:	4770      	bx	lr

08008398 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8008398:	b480      	push	{r7}
 800839a:	b085      	sub	sp, #20
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	695b      	ldr	r3, [r3, #20]
 80083a4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	699b      	ldr	r3, [r3, #24]
 80083aa:	68fa      	ldr	r2, [r7, #12]
 80083ac:	4013      	ands	r3, r2
 80083ae:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80083b0:	68fb      	ldr	r3, [r7, #12]
}
 80083b2:	4618      	mov	r0, r3
 80083b4:	3714      	adds	r7, #20
 80083b6:	46bd      	mov	sp, r7
 80083b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083bc:	4770      	bx	lr

080083be <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083be:	b480      	push	{r7}
 80083c0:	b085      	sub	sp, #20
 80083c2:	af00      	add	r7, sp, #0
 80083c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083d0:	699b      	ldr	r3, [r3, #24]
 80083d2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	4013      	ands	r3, r2
 80083e0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80083e2:	68bb      	ldr	r3, [r7, #8]
 80083e4:	0c1b      	lsrs	r3, r3, #16
}
 80083e6:	4618      	mov	r0, r3
 80083e8:	3714      	adds	r7, #20
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80083f2:	b480      	push	{r7}
 80083f4:	b085      	sub	sp, #20
 80083f6:	af00      	add	r7, sp, #0
 80083f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008404:	699b      	ldr	r3, [r3, #24]
 8008406:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800840e:	69db      	ldr	r3, [r3, #28]
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	4013      	ands	r3, r2
 8008414:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	b29b      	uxth	r3, r3
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008426:	b480      	push	{r7}
 8008428:	b085      	sub	sp, #20
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	460b      	mov	r3, r1
 8008430:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8008436:	78fb      	ldrb	r3, [r7, #3]
 8008438:	015a      	lsls	r2, r3, #5
 800843a:	68fb      	ldr	r3, [r7, #12]
 800843c:	4413      	add	r3, r2
 800843e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008442:	689b      	ldr	r3, [r3, #8]
 8008444:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800844c:	695b      	ldr	r3, [r3, #20]
 800844e:	68ba      	ldr	r2, [r7, #8]
 8008450:	4013      	ands	r3, r2
 8008452:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8008454:	68bb      	ldr	r3, [r7, #8]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3714      	adds	r7, #20
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr

08008462 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8008462:	b480      	push	{r7}
 8008464:	b087      	sub	sp, #28
 8008466:	af00      	add	r7, sp, #0
 8008468:	6078      	str	r0, [r7, #4]
 800846a:	460b      	mov	r3, r1
 800846c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008482:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008484:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8008486:	78fb      	ldrb	r3, [r7, #3]
 8008488:	f003 030f 	and.w	r3, r3, #15
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	fa22 f303 	lsr.w	r3, r2, r3
 8008492:	01db      	lsls	r3, r3, #7
 8008494:	b2db      	uxtb	r3, r3
 8008496:	693a      	ldr	r2, [r7, #16]
 8008498:	4313      	orrs	r3, r2
 800849a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800849c:	78fb      	ldrb	r3, [r7, #3]
 800849e:	015a      	lsls	r2, r3, #5
 80084a0:	697b      	ldr	r3, [r7, #20]
 80084a2:	4413      	add	r3, r2
 80084a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	693a      	ldr	r2, [r7, #16]
 80084ac:	4013      	ands	r3, r2
 80084ae:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80084b0:	68bb      	ldr	r3, [r7, #8]
}
 80084b2:	4618      	mov	r0, r3
 80084b4:	371c      	adds	r7, #28
 80084b6:	46bd      	mov	sp, r7
 80084b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084bc:	4770      	bx	lr

080084be <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80084be:	b480      	push	{r7}
 80084c0:	b083      	sub	sp, #12
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	695b      	ldr	r3, [r3, #20]
 80084ca:	f003 0301 	and.w	r3, r3, #1
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	370c      	adds	r7, #12
 80084d2:	46bd      	mov	sp, r7
 80084d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d8:	4770      	bx	lr

080084da <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80084da:	b480      	push	{r7}
 80084dc:	b085      	sub	sp, #20
 80084de:	af00      	add	r7, sp, #0
 80084e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80084ec:	681b      	ldr	r3, [r3, #0]
 80084ee:	68fa      	ldr	r2, [r7, #12]
 80084f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80084f4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80084f8:	f023 0307 	bic.w	r3, r3, #7
 80084fc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800850c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008510:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008512:	2300      	movs	r3, #0
}
 8008514:	4618      	mov	r0, r3
 8008516:	3714      	adds	r7, #20
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8008520:	b480      	push	{r7}
 8008522:	b087      	sub	sp, #28
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	460b      	mov	r3, r1
 800852a:	607a      	str	r2, [r7, #4]
 800852c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	333c      	adds	r3, #60	; 0x3c
 8008536:	3304      	adds	r3, #4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800853c:	693b      	ldr	r3, [r7, #16]
 800853e:	4a26      	ldr	r2, [pc, #152]	; (80085d8 <USB_EP0_OutStart+0xb8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d90a      	bls.n	800855a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008544:	697b      	ldr	r3, [r7, #20]
 8008546:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008550:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008554:	d101      	bne.n	800855a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8008556:	2300      	movs	r3, #0
 8008558:	e037      	b.n	80085ca <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800855a:	697b      	ldr	r3, [r7, #20]
 800855c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008560:	461a      	mov	r2, r3
 8008562:	2300      	movs	r3, #0
 8008564:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008566:	697b      	ldr	r3, [r7, #20]
 8008568:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800856c:	691b      	ldr	r3, [r3, #16]
 800856e:	697a      	ldr	r2, [r7, #20]
 8008570:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008574:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8008578:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800857a:	697b      	ldr	r3, [r7, #20]
 800857c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008580:	691b      	ldr	r3, [r3, #16]
 8008582:	697a      	ldr	r2, [r7, #20]
 8008584:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8008588:	f043 0318 	orr.w	r3, r3, #24
 800858c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800858e:	697b      	ldr	r3, [r7, #20]
 8008590:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008594:	691b      	ldr	r3, [r3, #16]
 8008596:	697a      	ldr	r2, [r7, #20]
 8008598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800859c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80085a0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80085a2:	7afb      	ldrb	r3, [r7, #11]
 80085a4:	2b01      	cmp	r3, #1
 80085a6:	d10f      	bne.n	80085c8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ae:	461a      	mov	r2, r3
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 80085b4:	697b      	ldr	r3, [r7, #20]
 80085b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	697a      	ldr	r2, [r7, #20]
 80085be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80085c2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 80085c6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80085c8:	2300      	movs	r3, #0
}
 80085ca:	4618      	mov	r0, r3
 80085cc:	371c      	adds	r7, #28
 80085ce:	46bd      	mov	sp, r7
 80085d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	4f54300a 	.word	0x4f54300a

080085dc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80085dc:	b480      	push	{r7}
 80085de:	b085      	sub	sp, #20
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	3301      	adds	r3, #1
 80085ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	4a13      	ldr	r2, [pc, #76]	; (8008640 <USB_CoreReset+0x64>)
 80085f2:	4293      	cmp	r3, r2
 80085f4:	d901      	bls.n	80085fa <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80085f6:	2303      	movs	r3, #3
 80085f8:	e01b      	b.n	8008632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	691b      	ldr	r3, [r3, #16]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	daf2      	bge.n	80085e8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008602:	2300      	movs	r3, #0
 8008604:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	691b      	ldr	r3, [r3, #16]
 800860a:	f043 0201 	orr.w	r2, r3, #1
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3301      	adds	r3, #1
 8008616:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	4a09      	ldr	r2, [pc, #36]	; (8008640 <USB_CoreReset+0x64>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d901      	bls.n	8008624 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008620:	2303      	movs	r3, #3
 8008622:	e006      	b.n	8008632 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	691b      	ldr	r3, [r3, #16]
 8008628:	f003 0301 	and.w	r3, r3, #1
 800862c:	2b01      	cmp	r3, #1
 800862e:	d0f0      	beq.n	8008612 <USB_CoreReset+0x36>

  return HAL_OK;
 8008630:	2300      	movs	r3, #0
}
 8008632:	4618      	mov	r0, r3
 8008634:	3714      	adds	r7, #20
 8008636:	46bd      	mov	sp, r7
 8008638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800863c:	4770      	bx	lr
 800863e:	bf00      	nop
 8008640:	00030d40 	.word	0x00030d40

08008644 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	460b      	mov	r3, r1
 800864e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8008650:	2010      	movs	r0, #16
 8008652:	f002 f8ef 	bl	800a834 <USBD_static_malloc>
 8008656:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	2b00      	cmp	r3, #0
 800865c:	d109      	bne.n	8008672 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	32b0      	adds	r2, #176	; 0xb0
 8008668:	2100      	movs	r1, #0
 800866a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800866e:	2302      	movs	r3, #2
 8008670:	e048      	b.n	8008704 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	32b0      	adds	r2, #176	; 0xb0
 800867c:	68f9      	ldr	r1, [r7, #12]
 800867e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	32b0      	adds	r2, #176	; 0xb0
 800868c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	7c1b      	ldrb	r3, [r3, #16]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10d      	bne.n	80086ba <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800869e:	4b1b      	ldr	r3, [pc, #108]	; (800870c <USBD_HID_Init+0xc8>)
 80086a0:	781b      	ldrb	r3, [r3, #0]
 80086a2:	f003 020f 	and.w	r2, r3, #15
 80086a6:	6879      	ldr	r1, [r7, #4]
 80086a8:	4613      	mov	r3, r2
 80086aa:	009b      	lsls	r3, r3, #2
 80086ac:	4413      	add	r3, r2
 80086ae:	009b      	lsls	r3, r3, #2
 80086b0:	440b      	add	r3, r1
 80086b2:	3326      	adds	r3, #38	; 0x26
 80086b4:	2207      	movs	r2, #7
 80086b6:	801a      	strh	r2, [r3, #0]
 80086b8:	e00c      	b.n	80086d4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 80086ba:	4b14      	ldr	r3, [pc, #80]	; (800870c <USBD_HID_Init+0xc8>)
 80086bc:	781b      	ldrb	r3, [r3, #0]
 80086be:	f003 020f 	and.w	r2, r3, #15
 80086c2:	6879      	ldr	r1, [r7, #4]
 80086c4:	4613      	mov	r3, r2
 80086c6:	009b      	lsls	r3, r3, #2
 80086c8:	4413      	add	r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3326      	adds	r3, #38	; 0x26
 80086d0:	220a      	movs	r2, #10
 80086d2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80086d4:	4b0d      	ldr	r3, [pc, #52]	; (800870c <USBD_HID_Init+0xc8>)
 80086d6:	7819      	ldrb	r1, [r3, #0]
 80086d8:	2304      	movs	r3, #4
 80086da:	2203      	movs	r2, #3
 80086dc:	6878      	ldr	r0, [r7, #4]
 80086de:	f001 ff98 	bl	800a612 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80086e2:	4b0a      	ldr	r3, [pc, #40]	; (800870c <USBD_HID_Init+0xc8>)
 80086e4:	781b      	ldrb	r3, [r3, #0]
 80086e6:	f003 020f 	and.w	r2, r3, #15
 80086ea:	6879      	ldr	r1, [r7, #4]
 80086ec:	4613      	mov	r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	4413      	add	r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	440b      	add	r3, r1
 80086f6:	3324      	adds	r3, #36	; 0x24
 80086f8:	2201      	movs	r2, #1
 80086fa:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	2200      	movs	r2, #0
 8008700:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008702:	2300      	movs	r3, #0
}
 8008704:	4618      	mov	r0, r3
 8008706:	3710      	adds	r7, #16
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	200000ea 	.word	0x200000ea

08008710 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b082      	sub	sp, #8
 8008714:	af00      	add	r7, sp, #0
 8008716:	6078      	str	r0, [r7, #4]
 8008718:	460b      	mov	r3, r1
 800871a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 800871c:	4b1f      	ldr	r3, [pc, #124]	; (800879c <USBD_HID_DeInit+0x8c>)
 800871e:	781b      	ldrb	r3, [r3, #0]
 8008720:	4619      	mov	r1, r3
 8008722:	6878      	ldr	r0, [r7, #4]
 8008724:	f001 ff9b 	bl	800a65e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8008728:	4b1c      	ldr	r3, [pc, #112]	; (800879c <USBD_HID_DeInit+0x8c>)
 800872a:	781b      	ldrb	r3, [r3, #0]
 800872c:	f003 020f 	and.w	r2, r3, #15
 8008730:	6879      	ldr	r1, [r7, #4]
 8008732:	4613      	mov	r3, r2
 8008734:	009b      	lsls	r3, r3, #2
 8008736:	4413      	add	r3, r2
 8008738:	009b      	lsls	r3, r3, #2
 800873a:	440b      	add	r3, r1
 800873c:	3324      	adds	r3, #36	; 0x24
 800873e:	2200      	movs	r2, #0
 8008740:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8008742:	4b16      	ldr	r3, [pc, #88]	; (800879c <USBD_HID_DeInit+0x8c>)
 8008744:	781b      	ldrb	r3, [r3, #0]
 8008746:	f003 020f 	and.w	r2, r3, #15
 800874a:	6879      	ldr	r1, [r7, #4]
 800874c:	4613      	mov	r3, r2
 800874e:	009b      	lsls	r3, r3, #2
 8008750:	4413      	add	r3, r2
 8008752:	009b      	lsls	r3, r3, #2
 8008754:	440b      	add	r3, r1
 8008756:	3326      	adds	r3, #38	; 0x26
 8008758:	2200      	movs	r2, #0
 800875a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	32b0      	adds	r2, #176	; 0xb0
 8008766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d011      	beq.n	8008792 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	32b0      	adds	r2, #176	; 0xb0
 8008778:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800877c:	4618      	mov	r0, r3
 800877e:	f002 f867 	bl	800a850 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	32b0      	adds	r2, #176	; 0xb0
 800878c:	2100      	movs	r1, #0
 800878e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8008792:	2300      	movs	r3, #0
}
 8008794:	4618      	mov	r0, r3
 8008796:	3708      	adds	r7, #8
 8008798:	46bd      	mov	sp, r7
 800879a:	bd80      	pop	{r7, pc}
 800879c:	200000ea 	.word	0x200000ea

080087a0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b086      	sub	sp, #24
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	32b0      	adds	r2, #176	; 0xb0
 80087b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80087b8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 80087ba:	2300      	movs	r3, #0
 80087bc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 80087be:	2300      	movs	r3, #0
 80087c0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	2b00      	cmp	r3, #0
 80087c6:	d101      	bne.n	80087cc <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80087c8:	2303      	movs	r3, #3
 80087ca:	e0e8      	b.n	800899e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80087cc:	683b      	ldr	r3, [r7, #0]
 80087ce:	781b      	ldrb	r3, [r3, #0]
 80087d0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d046      	beq.n	8008866 <USBD_HID_Setup+0xc6>
 80087d8:	2b20      	cmp	r3, #32
 80087da:	f040 80d8 	bne.w	800898e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	785b      	ldrb	r3, [r3, #1]
 80087e2:	3b02      	subs	r3, #2
 80087e4:	2b09      	cmp	r3, #9
 80087e6:	d836      	bhi.n	8008856 <USBD_HID_Setup+0xb6>
 80087e8:	a201      	add	r2, pc, #4	; (adr r2, 80087f0 <USBD_HID_Setup+0x50>)
 80087ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087ee:	bf00      	nop
 80087f0:	08008847 	.word	0x08008847
 80087f4:	08008827 	.word	0x08008827
 80087f8:	08008857 	.word	0x08008857
 80087fc:	08008857 	.word	0x08008857
 8008800:	08008857 	.word	0x08008857
 8008804:	08008857 	.word	0x08008857
 8008808:	08008857 	.word	0x08008857
 800880c:	08008857 	.word	0x08008857
 8008810:	08008835 	.word	0x08008835
 8008814:	08008819 	.word	0x08008819
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	885b      	ldrh	r3, [r3, #2]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	461a      	mov	r2, r3
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	601a      	str	r2, [r3, #0]
          break;
 8008824:	e01e      	b.n	8008864 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	2201      	movs	r2, #1
 800882a:	4619      	mov	r1, r3
 800882c:	6878      	ldr	r0, [r7, #4]
 800882e:	f001 fba5 	bl	8009f7c <USBD_CtlSendData>
          break;
 8008832:	e017      	b.n	8008864 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	885b      	ldrh	r3, [r3, #2]
 8008838:	0a1b      	lsrs	r3, r3, #8
 800883a:	b29b      	uxth	r3, r3
 800883c:	b2db      	uxtb	r3, r3
 800883e:	461a      	mov	r2, r3
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	605a      	str	r2, [r3, #4]
          break;
 8008844:	e00e      	b.n	8008864 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	3304      	adds	r3, #4
 800884a:	2201      	movs	r2, #1
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f001 fb94 	bl	8009f7c <USBD_CtlSendData>
          break;
 8008854:	e006      	b.n	8008864 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008856:	6839      	ldr	r1, [r7, #0]
 8008858:	6878      	ldr	r0, [r7, #4]
 800885a:	f001 fb1e 	bl	8009e9a <USBD_CtlError>
          ret = USBD_FAIL;
 800885e:	2303      	movs	r3, #3
 8008860:	75fb      	strb	r3, [r7, #23]
          break;
 8008862:	bf00      	nop
      }
      break;
 8008864:	e09a      	b.n	800899c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008866:	683b      	ldr	r3, [r7, #0]
 8008868:	785b      	ldrb	r3, [r3, #1]
 800886a:	2b0b      	cmp	r3, #11
 800886c:	f200 8086 	bhi.w	800897c <USBD_HID_Setup+0x1dc>
 8008870:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <USBD_HID_Setup+0xd8>)
 8008872:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008876:	bf00      	nop
 8008878:	080088a9 	.word	0x080088a9
 800887c:	0800898b 	.word	0x0800898b
 8008880:	0800897d 	.word	0x0800897d
 8008884:	0800897d 	.word	0x0800897d
 8008888:	0800897d 	.word	0x0800897d
 800888c:	0800897d 	.word	0x0800897d
 8008890:	080088d3 	.word	0x080088d3
 8008894:	0800897d 	.word	0x0800897d
 8008898:	0800897d 	.word	0x0800897d
 800889c:	0800897d 	.word	0x0800897d
 80088a0:	0800892b 	.word	0x0800892b
 80088a4:	08008955 	.word	0x08008955
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088ae:	b2db      	uxtb	r3, r3
 80088b0:	2b03      	cmp	r3, #3
 80088b2:	d107      	bne.n	80088c4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80088b4:	f107 030a 	add.w	r3, r7, #10
 80088b8:	2202      	movs	r2, #2
 80088ba:	4619      	mov	r1, r3
 80088bc:	6878      	ldr	r0, [r7, #4]
 80088be:	f001 fb5d 	bl	8009f7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80088c2:	e063      	b.n	800898c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80088c4:	6839      	ldr	r1, [r7, #0]
 80088c6:	6878      	ldr	r0, [r7, #4]
 80088c8:	f001 fae7 	bl	8009e9a <USBD_CtlError>
            ret = USBD_FAIL;
 80088cc:	2303      	movs	r3, #3
 80088ce:	75fb      	strb	r3, [r7, #23]
          break;
 80088d0:	e05c      	b.n	800898c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	885b      	ldrh	r3, [r3, #2]
 80088d6:	0a1b      	lsrs	r3, r3, #8
 80088d8:	b29b      	uxth	r3, r3
 80088da:	2b22      	cmp	r3, #34	; 0x22
 80088dc:	d108      	bne.n	80088f0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	88db      	ldrh	r3, [r3, #6]
 80088e2:	2b4a      	cmp	r3, #74	; 0x4a
 80088e4:	bf28      	it	cs
 80088e6:	234a      	movcs	r3, #74	; 0x4a
 80088e8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80088ea:	4b2f      	ldr	r3, [pc, #188]	; (80089a8 <USBD_HID_Setup+0x208>)
 80088ec:	613b      	str	r3, [r7, #16]
 80088ee:	e015      	b.n	800891c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	885b      	ldrh	r3, [r3, #2]
 80088f4:	0a1b      	lsrs	r3, r3, #8
 80088f6:	b29b      	uxth	r3, r3
 80088f8:	2b21      	cmp	r3, #33	; 0x21
 80088fa:	d108      	bne.n	800890e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80088fc:	4b2b      	ldr	r3, [pc, #172]	; (80089ac <USBD_HID_Setup+0x20c>)
 80088fe:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8008900:	683b      	ldr	r3, [r7, #0]
 8008902:	88db      	ldrh	r3, [r3, #6]
 8008904:	2b09      	cmp	r3, #9
 8008906:	bf28      	it	cs
 8008908:	2309      	movcs	r3, #9
 800890a:	82bb      	strh	r3, [r7, #20]
 800890c:	e006      	b.n	800891c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800890e:	6839      	ldr	r1, [r7, #0]
 8008910:	6878      	ldr	r0, [r7, #4]
 8008912:	f001 fac2 	bl	8009e9a <USBD_CtlError>
            ret = USBD_FAIL;
 8008916:	2303      	movs	r3, #3
 8008918:	75fb      	strb	r3, [r7, #23]
            break;
 800891a:	e037      	b.n	800898c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800891c:	8abb      	ldrh	r3, [r7, #20]
 800891e:	461a      	mov	r2, r3
 8008920:	6939      	ldr	r1, [r7, #16]
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f001 fb2a 	bl	8009f7c <USBD_CtlSendData>
          break;
 8008928:	e030      	b.n	800898c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008930:	b2db      	uxtb	r3, r3
 8008932:	2b03      	cmp	r3, #3
 8008934:	d107      	bne.n	8008946 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	3308      	adds	r3, #8
 800893a:	2201      	movs	r2, #1
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 fb1c 	bl	8009f7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008944:	e022      	b.n	800898c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8008946:	6839      	ldr	r1, [r7, #0]
 8008948:	6878      	ldr	r0, [r7, #4]
 800894a:	f001 faa6 	bl	8009e9a <USBD_CtlError>
            ret = USBD_FAIL;
 800894e:	2303      	movs	r3, #3
 8008950:	75fb      	strb	r3, [r7, #23]
          break;
 8008952:	e01b      	b.n	800898c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800895a:	b2db      	uxtb	r3, r3
 800895c:	2b03      	cmp	r3, #3
 800895e:	d106      	bne.n	800896e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8008960:	683b      	ldr	r3, [r7, #0]
 8008962:	885b      	ldrh	r3, [r3, #2]
 8008964:	b2db      	uxtb	r3, r3
 8008966:	461a      	mov	r2, r3
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800896c:	e00e      	b.n	800898c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800896e:	6839      	ldr	r1, [r7, #0]
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f001 fa92 	bl	8009e9a <USBD_CtlError>
            ret = USBD_FAIL;
 8008976:	2303      	movs	r3, #3
 8008978:	75fb      	strb	r3, [r7, #23]
          break;
 800897a:	e007      	b.n	800898c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f001 fa8b 	bl	8009e9a <USBD_CtlError>
          ret = USBD_FAIL;
 8008984:	2303      	movs	r3, #3
 8008986:	75fb      	strb	r3, [r7, #23]
          break;
 8008988:	e000      	b.n	800898c <USBD_HID_Setup+0x1ec>
          break;
 800898a:	bf00      	nop
      }
      break;
 800898c:	e006      	b.n	800899c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800898e:	6839      	ldr	r1, [r7, #0]
 8008990:	6878      	ldr	r0, [r7, #4]
 8008992:	f001 fa82 	bl	8009e9a <USBD_CtlError>
      ret = USBD_FAIL;
 8008996:	2303      	movs	r3, #3
 8008998:	75fb      	strb	r3, [r7, #23]
      break;
 800899a:	bf00      	nop
  }

  return (uint8_t)ret;
 800899c:	7dfb      	ldrb	r3, [r7, #23]
}
 800899e:	4618      	mov	r0, r3
 80089a0:	3718      	adds	r7, #24
 80089a2:	46bd      	mov	sp, r7
 80089a4:	bd80      	pop	{r7, pc}
 80089a6:	bf00      	nop
 80089a8:	200000a0 	.word	0x200000a0
 80089ac:	20000088 	.word	0x20000088

080089b0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b084      	sub	sp, #16
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80089b8:	2181      	movs	r1, #129	; 0x81
 80089ba:	4809      	ldr	r0, [pc, #36]	; (80089e0 <USBD_HID_GetFSCfgDesc+0x30>)
 80089bc:	f000 fc35 	bl	800922a <USBD_GetEpDesc>
 80089c0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d002      	beq.n	80089ce <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	220a      	movs	r2, #10
 80089cc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2222      	movs	r2, #34	; 0x22
 80089d2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80089d4:	4b02      	ldr	r3, [pc, #8]	; (80089e0 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80089d6:	4618      	mov	r0, r3
 80089d8:	3710      	adds	r7, #16
 80089da:	46bd      	mov	sp, r7
 80089dc:	bd80      	pop	{r7, pc}
 80089de:	bf00      	nop
 80089e0:	20000064 	.word	0x20000064

080089e4 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80089ec:	2181      	movs	r1, #129	; 0x81
 80089ee:	4809      	ldr	r0, [pc, #36]	; (8008a14 <USBD_HID_GetHSCfgDesc+0x30>)
 80089f0:	f000 fc1b 	bl	800922a <USBD_GetEpDesc>
 80089f4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d002      	beq.n	8008a02 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	2207      	movs	r2, #7
 8008a00:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2222      	movs	r2, #34	; 0x22
 8008a06:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008a08:	4b02      	ldr	r3, [pc, #8]	; (8008a14 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3710      	adds	r7, #16
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
 8008a12:	bf00      	nop
 8008a14:	20000064 	.word	0x20000064

08008a18 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b084      	sub	sp, #16
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8008a20:	2181      	movs	r1, #129	; 0x81
 8008a22:	4809      	ldr	r0, [pc, #36]	; (8008a48 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8008a24:	f000 fc01 	bl	800922a <USBD_GetEpDesc>
 8008a28:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	d002      	beq.n	8008a36 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	220a      	movs	r2, #10
 8008a34:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	2222      	movs	r2, #34	; 0x22
 8008a3a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8008a3c:	4b02      	ldr	r3, [pc, #8]	; (8008a48 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8008a3e:	4618      	mov	r0, r3
 8008a40:	3710      	adds	r7, #16
 8008a42:	46bd      	mov	sp, r7
 8008a44:	bd80      	pop	{r7, pc}
 8008a46:	bf00      	nop
 8008a48:	20000064 	.word	0x20000064

08008a4c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b083      	sub	sp, #12
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	460b      	mov	r3, r1
 8008a56:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32b0      	adds	r2, #176	; 0xb0
 8008a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a66:	2200      	movs	r2, #0
 8008a68:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8008a6a:	2300      	movs	r3, #0
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	370c      	adds	r7, #12
 8008a70:	46bd      	mov	sp, r7
 8008a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a76:	4770      	bx	lr

08008a78 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	220a      	movs	r2, #10
 8008a84:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8008a86:	4b03      	ldr	r3, [pc, #12]	; (8008a94 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr
 8008a94:	20000094 	.word	0x20000094

08008a98 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b086      	sub	sp, #24
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	4613      	mov	r3, r2
 8008aa4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d101      	bne.n	8008ab0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008aac:	2303      	movs	r3, #3
 8008aae:	e01f      	b.n	8008af0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	2200      	movs	r2, #0
 8008abc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d003      	beq.n	8008ad6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	68ba      	ldr	r2, [r7, #8]
 8008ad2:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	2201      	movs	r2, #1
 8008ada:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	79fa      	ldrb	r2, [r7, #7]
 8008ae2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8008ae4:	68f8      	ldr	r0, [r7, #12]
 8008ae6:	f001 fd2d 	bl	800a544 <USBD_LL_Init>
 8008aea:	4603      	mov	r3, r0
 8008aec:	75fb      	strb	r3, [r7, #23]

  return ret;
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
}
 8008af0:	4618      	mov	r0, r3
 8008af2:	3718      	adds	r7, #24
 8008af4:	46bd      	mov	sp, r7
 8008af6:	bd80      	pop	{r7, pc}

08008af8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	b084      	sub	sp, #16
 8008afc:	af00      	add	r7, sp, #0
 8008afe:	6078      	str	r0, [r7, #4]
 8008b00:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008b02:	2300      	movs	r3, #0
 8008b04:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008b06:	683b      	ldr	r3, [r7, #0]
 8008b08:	2b00      	cmp	r3, #0
 8008b0a:	d101      	bne.n	8008b10 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e025      	b.n	8008b5c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	683a      	ldr	r2, [r7, #0]
 8008b14:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	32ae      	adds	r2, #174	; 0xae
 8008b22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d00f      	beq.n	8008b4c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	32ae      	adds	r2, #174	; 0xae
 8008b36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008b3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b3c:	f107 020e 	add.w	r2, r7, #14
 8008b40:	4610      	mov	r0, r2
 8008b42:	4798      	blx	r3
 8008b44:	4602      	mov	r2, r0
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8008b52:	1c5a      	adds	r2, r3, #1
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8008b5a:	2300      	movs	r3, #0
}
 8008b5c:	4618      	mov	r0, r3
 8008b5e:	3710      	adds	r7, #16
 8008b60:	46bd      	mov	sp, r7
 8008b62:	bd80      	pop	{r7, pc}

08008b64 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b082      	sub	sp, #8
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8008b6c:	6878      	ldr	r0, [r7, #4]
 8008b6e:	f001 fd35 	bl	800a5dc <USBD_LL_Start>
 8008b72:	4603      	mov	r3, r0
}
 8008b74:	4618      	mov	r0, r3
 8008b76:	3708      	adds	r7, #8
 8008b78:	46bd      	mov	sp, r7
 8008b7a:	bd80      	pop	{r7, pc}

08008b7c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8008b7c:	b480      	push	{r7}
 8008b7e:	b083      	sub	sp, #12
 8008b80:	af00      	add	r7, sp, #0
 8008b82:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008b84:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8008b86:	4618      	mov	r0, r3
 8008b88:	370c      	adds	r7, #12
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b90:	4770      	bx	lr

08008b92 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008b92:	b580      	push	{r7, lr}
 8008b94:	b084      	sub	sp, #16
 8008b96:	af00      	add	r7, sp, #0
 8008b98:	6078      	str	r0, [r7, #4]
 8008b9a:	460b      	mov	r3, r1
 8008b9c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ba8:	2b00      	cmp	r3, #0
 8008baa:	d009      	beq.n	8008bc0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	4611      	mov	r1, r2
 8008bb8:	6878      	ldr	r0, [r7, #4]
 8008bba:	4798      	blx	r3
 8008bbc:	4603      	mov	r3, r0
 8008bbe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3710      	adds	r7, #16
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b084      	sub	sp, #16
 8008bce:	af00      	add	r7, sp, #0
 8008bd0:	6078      	str	r0, [r7, #4]
 8008bd2:	460b      	mov	r3, r1
 8008bd4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	78fa      	ldrb	r2, [r7, #3]
 8008be4:	4611      	mov	r1, r2
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	4798      	blx	r3
 8008bea:	4603      	mov	r3, r0
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d001      	beq.n	8008bf4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8008bf0:	2303      	movs	r3, #3
 8008bf2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	3710      	adds	r7, #16
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c0e:	6839      	ldr	r1, [r7, #0]
 8008c10:	4618      	mov	r0, r3
 8008c12:	f001 f908 	bl	8009e26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2201      	movs	r2, #1
 8008c1a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8008c24:	461a      	mov	r2, r3
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c32:	f003 031f 	and.w	r3, r3, #31
 8008c36:	2b02      	cmp	r3, #2
 8008c38:	d01a      	beq.n	8008c70 <USBD_LL_SetupStage+0x72>
 8008c3a:	2b02      	cmp	r3, #2
 8008c3c:	d822      	bhi.n	8008c84 <USBD_LL_SetupStage+0x86>
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	d002      	beq.n	8008c48 <USBD_LL_SetupStage+0x4a>
 8008c42:	2b01      	cmp	r3, #1
 8008c44:	d00a      	beq.n	8008c5c <USBD_LL_SetupStage+0x5e>
 8008c46:	e01d      	b.n	8008c84 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c4e:	4619      	mov	r1, r3
 8008c50:	6878      	ldr	r0, [r7, #4]
 8008c52:	f000 fb5f 	bl	8009314 <USBD_StdDevReq>
 8008c56:	4603      	mov	r3, r0
 8008c58:	73fb      	strb	r3, [r7, #15]
      break;
 8008c5a:	e020      	b.n	8008c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c62:	4619      	mov	r1, r3
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f000 fbc7 	bl	80093f8 <USBD_StdItfReq>
 8008c6a:	4603      	mov	r3, r0
 8008c6c:	73fb      	strb	r3, [r7, #15]
      break;
 8008c6e:	e016      	b.n	8008c9e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008c76:	4619      	mov	r1, r3
 8008c78:	6878      	ldr	r0, [r7, #4]
 8008c7a:	f000 fc29 	bl	80094d0 <USBD_StdEPReq>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	73fb      	strb	r3, [r7, #15]
      break;
 8008c82:	e00c      	b.n	8008c9e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008c8a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008c8e:	b2db      	uxtb	r3, r3
 8008c90:	4619      	mov	r1, r3
 8008c92:	6878      	ldr	r0, [r7, #4]
 8008c94:	f001 fd02 	bl	800a69c <USBD_LL_StallEP>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8008c9c:	bf00      	nop
  }

  return ret;
 8008c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3710      	adds	r7, #16
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	bd80      	pop	{r7, pc}

08008ca8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008ca8:	b580      	push	{r7, lr}
 8008caa:	b086      	sub	sp, #24
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	60f8      	str	r0, [r7, #12]
 8008cb0:	460b      	mov	r3, r1
 8008cb2:	607a      	str	r2, [r7, #4]
 8008cb4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8008cb6:	2300      	movs	r3, #0
 8008cb8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8008cba:	7afb      	ldrb	r3, [r7, #11]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d16e      	bne.n	8008d9e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8008cc6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008cce:	2b03      	cmp	r3, #3
 8008cd0:	f040 8098 	bne.w	8008e04 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8008cd4:	693b      	ldr	r3, [r7, #16]
 8008cd6:	689a      	ldr	r2, [r3, #8]
 8008cd8:	693b      	ldr	r3, [r7, #16]
 8008cda:	68db      	ldr	r3, [r3, #12]
 8008cdc:	429a      	cmp	r2, r3
 8008cde:	d913      	bls.n	8008d08 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8008ce0:	693b      	ldr	r3, [r7, #16]
 8008ce2:	689a      	ldr	r2, [r3, #8]
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	68db      	ldr	r3, [r3, #12]
 8008ce8:	1ad2      	subs	r2, r2, r3
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8008cee:	693b      	ldr	r3, [r7, #16]
 8008cf0:	68da      	ldr	r2, [r3, #12]
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	689b      	ldr	r3, [r3, #8]
 8008cf6:	4293      	cmp	r3, r2
 8008cf8:	bf28      	it	cs
 8008cfa:	4613      	movcs	r3, r2
 8008cfc:	461a      	mov	r2, r3
 8008cfe:	6879      	ldr	r1, [r7, #4]
 8008d00:	68f8      	ldr	r0, [r7, #12]
 8008d02:	f001 f967 	bl	8009fd4 <USBD_CtlContinueRx>
 8008d06:	e07d      	b.n	8008e04 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008d0e:	f003 031f 	and.w	r3, r3, #31
 8008d12:	2b02      	cmp	r3, #2
 8008d14:	d014      	beq.n	8008d40 <USBD_LL_DataOutStage+0x98>
 8008d16:	2b02      	cmp	r3, #2
 8008d18:	d81d      	bhi.n	8008d56 <USBD_LL_DataOutStage+0xae>
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <USBD_LL_DataOutStage+0x7c>
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d003      	beq.n	8008d2a <USBD_LL_DataOutStage+0x82>
 8008d22:	e018      	b.n	8008d56 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8008d24:	2300      	movs	r3, #0
 8008d26:	75bb      	strb	r3, [r7, #22]
            break;
 8008d28:	e018      	b.n	8008d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	4619      	mov	r1, r3
 8008d34:	68f8      	ldr	r0, [r7, #12]
 8008d36:	f000 fa5e 	bl	80091f6 <USBD_CoreFindIF>
 8008d3a:	4603      	mov	r3, r0
 8008d3c:	75bb      	strb	r3, [r7, #22]
            break;
 8008d3e:	e00d      	b.n	8008d5c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8008d46:	b2db      	uxtb	r3, r3
 8008d48:	4619      	mov	r1, r3
 8008d4a:	68f8      	ldr	r0, [r7, #12]
 8008d4c:	f000 fa60 	bl	8009210 <USBD_CoreFindEP>
 8008d50:	4603      	mov	r3, r0
 8008d52:	75bb      	strb	r3, [r7, #22]
            break;
 8008d54:	e002      	b.n	8008d5c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8008d56:	2300      	movs	r3, #0
 8008d58:	75bb      	strb	r3, [r7, #22]
            break;
 8008d5a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8008d5c:	7dbb      	ldrb	r3, [r7, #22]
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d119      	bne.n	8008d96 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d68:	b2db      	uxtb	r3, r3
 8008d6a:	2b03      	cmp	r3, #3
 8008d6c:	d113      	bne.n	8008d96 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8008d6e:	7dba      	ldrb	r2, [r7, #22]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	32ae      	adds	r2, #174	; 0xae
 8008d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d78:	691b      	ldr	r3, [r3, #16]
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d00b      	beq.n	8008d96 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8008d7e:	7dba      	ldrb	r2, [r7, #22]
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8008d86:	7dba      	ldrb	r2, [r7, #22]
 8008d88:	68fb      	ldr	r3, [r7, #12]
 8008d8a:	32ae      	adds	r2, #174	; 0xae
 8008d8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008d90:	691b      	ldr	r3, [r3, #16]
 8008d92:	68f8      	ldr	r0, [r7, #12]
 8008d94:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008d96:	68f8      	ldr	r0, [r7, #12]
 8008d98:	f001 f92d 	bl	8009ff6 <USBD_CtlSendStatus>
 8008d9c:	e032      	b.n	8008e04 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8008d9e:	7afb      	ldrb	r3, [r7, #11]
 8008da0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008da4:	b2db      	uxtb	r3, r3
 8008da6:	4619      	mov	r1, r3
 8008da8:	68f8      	ldr	r0, [r7, #12]
 8008daa:	f000 fa31 	bl	8009210 <USBD_CoreFindEP>
 8008dae:	4603      	mov	r3, r0
 8008db0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008db2:	7dbb      	ldrb	r3, [r7, #22]
 8008db4:	2bff      	cmp	r3, #255	; 0xff
 8008db6:	d025      	beq.n	8008e04 <USBD_LL_DataOutStage+0x15c>
 8008db8:	7dbb      	ldrb	r3, [r7, #22]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	d122      	bne.n	8008e04 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dc4:	b2db      	uxtb	r3, r3
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	d117      	bne.n	8008dfa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8008dca:	7dba      	ldrb	r2, [r7, #22]
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	32ae      	adds	r2, #174	; 0xae
 8008dd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dd4:	699b      	ldr	r3, [r3, #24]
 8008dd6:	2b00      	cmp	r3, #0
 8008dd8:	d00f      	beq.n	8008dfa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8008dda:	7dba      	ldrb	r2, [r7, #22]
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8008de2:	7dba      	ldrb	r2, [r7, #22]
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	32ae      	adds	r2, #174	; 0xae
 8008de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	7afa      	ldrb	r2, [r7, #11]
 8008df0:	4611      	mov	r1, r2
 8008df2:	68f8      	ldr	r0, [r7, #12]
 8008df4:	4798      	blx	r3
 8008df6:	4603      	mov	r3, r0
 8008df8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8008dfa:	7dfb      	ldrb	r3, [r7, #23]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d001      	beq.n	8008e04 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8008e00:	7dfb      	ldrb	r3, [r7, #23]
 8008e02:	e000      	b.n	8008e06 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8008e04:	2300      	movs	r3, #0
}
 8008e06:	4618      	mov	r0, r3
 8008e08:	3718      	adds	r7, #24
 8008e0a:	46bd      	mov	sp, r7
 8008e0c:	bd80      	pop	{r7, pc}

08008e0e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008e0e:	b580      	push	{r7, lr}
 8008e10:	b086      	sub	sp, #24
 8008e12:	af00      	add	r7, sp, #0
 8008e14:	60f8      	str	r0, [r7, #12]
 8008e16:	460b      	mov	r3, r1
 8008e18:	607a      	str	r2, [r7, #4]
 8008e1a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8008e1c:	7afb      	ldrb	r3, [r7, #11]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d16f      	bne.n	8008f02 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	3314      	adds	r3, #20
 8008e26:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008e2e:	2b02      	cmp	r3, #2
 8008e30:	d15a      	bne.n	8008ee8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8008e32:	693b      	ldr	r3, [r7, #16]
 8008e34:	689a      	ldr	r2, [r3, #8]
 8008e36:	693b      	ldr	r3, [r7, #16]
 8008e38:	68db      	ldr	r3, [r3, #12]
 8008e3a:	429a      	cmp	r2, r3
 8008e3c:	d914      	bls.n	8008e68 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	689a      	ldr	r2, [r3, #8]
 8008e42:	693b      	ldr	r3, [r7, #16]
 8008e44:	68db      	ldr	r3, [r3, #12]
 8008e46:	1ad2      	subs	r2, r2, r3
 8008e48:	693b      	ldr	r3, [r7, #16]
 8008e4a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008e4c:	693b      	ldr	r3, [r7, #16]
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	461a      	mov	r2, r3
 8008e52:	6879      	ldr	r1, [r7, #4]
 8008e54:	68f8      	ldr	r0, [r7, #12]
 8008e56:	f001 f8ac 	bl	8009fb2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	2100      	movs	r1, #0
 8008e60:	68f8      	ldr	r0, [r7, #12]
 8008e62:	f001 fcc5 	bl	800a7f0 <USBD_LL_PrepareReceive>
 8008e66:	e03f      	b.n	8008ee8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	68da      	ldr	r2, [r3, #12]
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	689b      	ldr	r3, [r3, #8]
 8008e70:	429a      	cmp	r2, r3
 8008e72:	d11c      	bne.n	8008eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8008e74:	693b      	ldr	r3, [r7, #16]
 8008e76:	685a      	ldr	r2, [r3, #4]
 8008e78:	693b      	ldr	r3, [r7, #16]
 8008e7a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d316      	bcc.n	8008eae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8008e80:	693b      	ldr	r3, [r7, #16]
 8008e82:	685a      	ldr	r2, [r3, #4]
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d20f      	bcs.n	8008eae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8008e8e:	2200      	movs	r2, #0
 8008e90:	2100      	movs	r1, #0
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f001 f88d 	bl	8009fb2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	2200      	movs	r2, #0
 8008ea4:	2100      	movs	r1, #0
 8008ea6:	68f8      	ldr	r0, [r7, #12]
 8008ea8:	f001 fca2 	bl	800a7f0 <USBD_LL_PrepareReceive>
 8008eac:	e01c      	b.n	8008ee8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008eb4:	b2db      	uxtb	r3, r3
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d10f      	bne.n	8008eda <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec0:	68db      	ldr	r3, [r3, #12]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d009      	beq.n	8008eda <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	2200      	movs	r2, #0
 8008eca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ed4:	68db      	ldr	r3, [r3, #12]
 8008ed6:	68f8      	ldr	r0, [r7, #12]
 8008ed8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008eda:	2180      	movs	r1, #128	; 0x80
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f001 fbdd 	bl	800a69c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008ee2:	68f8      	ldr	r0, [r7, #12]
 8008ee4:	f001 f89a 	bl	800a01c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8008ee8:	68fb      	ldr	r3, [r7, #12]
 8008eea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d03a      	beq.n	8008f68 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8008ef2:	68f8      	ldr	r0, [r7, #12]
 8008ef4:	f7ff fe42 	bl	8008b7c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2200      	movs	r2, #0
 8008efc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008f00:	e032      	b.n	8008f68 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8008f02:	7afb      	ldrb	r3, [r7, #11]
 8008f04:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8008f08:	b2db      	uxtb	r3, r3
 8008f0a:	4619      	mov	r1, r3
 8008f0c:	68f8      	ldr	r0, [r7, #12]
 8008f0e:	f000 f97f 	bl	8009210 <USBD_CoreFindEP>
 8008f12:	4603      	mov	r3, r0
 8008f14:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8008f16:	7dfb      	ldrb	r3, [r7, #23]
 8008f18:	2bff      	cmp	r3, #255	; 0xff
 8008f1a:	d025      	beq.n	8008f68 <USBD_LL_DataInStage+0x15a>
 8008f1c:	7dfb      	ldrb	r3, [r7, #23]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d122      	bne.n	8008f68 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008f28:	b2db      	uxtb	r3, r3
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d11c      	bne.n	8008f68 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8008f2e:	7dfa      	ldrb	r2, [r7, #23]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	32ae      	adds	r2, #174	; 0xae
 8008f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f38:	695b      	ldr	r3, [r3, #20]
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d014      	beq.n	8008f68 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8008f3e:	7dfa      	ldrb	r2, [r7, #23]
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8008f46:	7dfa      	ldrb	r2, [r7, #23]
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	32ae      	adds	r2, #174	; 0xae
 8008f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	7afa      	ldrb	r2, [r7, #11]
 8008f54:	4611      	mov	r1, r2
 8008f56:	68f8      	ldr	r0, [r7, #12]
 8008f58:	4798      	blx	r3
 8008f5a:	4603      	mov	r3, r0
 8008f5c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8008f5e:	7dbb      	ldrb	r3, [r7, #22]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8008f64:	7dbb      	ldrb	r3, [r7, #22]
 8008f66:	e000      	b.n	8008f6a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8008f68:	2300      	movs	r3, #0
}
 8008f6a:	4618      	mov	r0, r3
 8008f6c:	3718      	adds	r7, #24
 8008f6e:	46bd      	mov	sp, r7
 8008f70:	bd80      	pop	{r7, pc}

08008f72 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008f72:	b580      	push	{r7, lr}
 8008f74:	b084      	sub	sp, #16
 8008f76:	af00      	add	r7, sp, #0
 8008f78:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2201      	movs	r2, #1
 8008f82:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	2200      	movs	r2, #0
 8008f8a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	2200      	movs	r2, #0
 8008f92:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	2200      	movs	r2, #0
 8008f98:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	2200      	movs	r2, #0
 8008fa0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d014      	beq.n	8008fd8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d00e      	beq.n	8008fd8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	687a      	ldr	r2, [r7, #4]
 8008fc4:	6852      	ldr	r2, [r2, #4]
 8008fc6:	b2d2      	uxtb	r2, r2
 8008fc8:	4611      	mov	r1, r2
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	4798      	blx	r3
 8008fce:	4603      	mov	r3, r0
 8008fd0:	2b00      	cmp	r3, #0
 8008fd2:	d001      	beq.n	8008fd8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8008fd4:	2303      	movs	r3, #3
 8008fd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008fd8:	2340      	movs	r3, #64	; 0x40
 8008fda:	2200      	movs	r2, #0
 8008fdc:	2100      	movs	r1, #0
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f001 fb17 	bl	800a612 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	2201      	movs	r2, #1
 8008fe8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2240      	movs	r2, #64	; 0x40
 8008ff0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ff4:	2340      	movs	r3, #64	; 0x40
 8008ff6:	2200      	movs	r2, #0
 8008ff8:	2180      	movs	r1, #128	; 0x80
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 fb09 	bl	800a612 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	2201      	movs	r2, #1
 8009004:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	2240      	movs	r2, #64	; 0x40
 800900a:	621a      	str	r2, [r3, #32]

  return ret;
 800900c:	7bfb      	ldrb	r3, [r7, #15]
}
 800900e:	4618      	mov	r0, r3
 8009010:	3710      	adds	r7, #16
 8009012:	46bd      	mov	sp, r7
 8009014:	bd80      	pop	{r7, pc}

08009016 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8009016:	b480      	push	{r7}
 8009018:	b083      	sub	sp, #12
 800901a:	af00      	add	r7, sp, #0
 800901c:	6078      	str	r0, [r7, #4]
 800901e:	460b      	mov	r3, r1
 8009020:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	78fa      	ldrb	r2, [r7, #3]
 8009026:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8009028:	2300      	movs	r3, #0
}
 800902a:	4618      	mov	r0, r3
 800902c:	370c      	adds	r7, #12
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr

08009036 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8009036:	b480      	push	{r7}
 8009038:	b083      	sub	sp, #12
 800903a:	af00      	add	r7, sp, #0
 800903c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009044:	b2da      	uxtb	r2, r3
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	2204      	movs	r2, #4
 8009050:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8009054:	2300      	movs	r3, #0
}
 8009056:	4618      	mov	r0, r3
 8009058:	370c      	adds	r7, #12
 800905a:	46bd      	mov	sp, r7
 800905c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009060:	4770      	bx	lr

08009062 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8009062:	b480      	push	{r7}
 8009064:	b083      	sub	sp, #12
 8009066:	af00      	add	r7, sp, #0
 8009068:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800906a:	687b      	ldr	r3, [r7, #4]
 800906c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009070:	b2db      	uxtb	r3, r3
 8009072:	2b04      	cmp	r3, #4
 8009074:	d106      	bne.n	8009084 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800907c:	b2da      	uxtb	r2, r3
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8009084:	2300      	movs	r3, #0
}
 8009086:	4618      	mov	r0, r3
 8009088:	370c      	adds	r7, #12
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090a0:	b2db      	uxtb	r3, r3
 80090a2:	2b03      	cmp	r3, #3
 80090a4:	d110      	bne.n	80090c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00b      	beq.n	80090c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d005      	beq.n	80090c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80090c2:	69db      	ldr	r3, [r3, #28]
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80090c8:	2300      	movs	r3, #0
}
 80090ca:	4618      	mov	r0, r3
 80090cc:	3708      	adds	r7, #8
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bd80      	pop	{r7, pc}

080090d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80090d2:	b580      	push	{r7, lr}
 80090d4:	b082      	sub	sp, #8
 80090d6:	af00      	add	r7, sp, #0
 80090d8:	6078      	str	r0, [r7, #4]
 80090da:	460b      	mov	r3, r1
 80090dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	32ae      	adds	r2, #174	; 0xae
 80090e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090ec:	2b00      	cmp	r3, #0
 80090ee:	d101      	bne.n	80090f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80090f0:	2303      	movs	r3, #3
 80090f2:	e01c      	b.n	800912e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80090fa:	b2db      	uxtb	r3, r3
 80090fc:	2b03      	cmp	r3, #3
 80090fe:	d115      	bne.n	800912c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	32ae      	adds	r2, #174	; 0xae
 800910a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800910e:	6a1b      	ldr	r3, [r3, #32]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d00b      	beq.n	800912c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	32ae      	adds	r2, #174	; 0xae
 800911e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009122:	6a1b      	ldr	r3, [r3, #32]
 8009124:	78fa      	ldrb	r2, [r7, #3]
 8009126:	4611      	mov	r1, r2
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800912c:	2300      	movs	r3, #0
}
 800912e:	4618      	mov	r0, r3
 8009130:	3708      	adds	r7, #8
 8009132:	46bd      	mov	sp, r7
 8009134:	bd80      	pop	{r7, pc}

08009136 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8009136:	b580      	push	{r7, lr}
 8009138:	b082      	sub	sp, #8
 800913a:	af00      	add	r7, sp, #0
 800913c:	6078      	str	r0, [r7, #4]
 800913e:	460b      	mov	r3, r1
 8009140:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	32ae      	adds	r2, #174	; 0xae
 800914c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009150:	2b00      	cmp	r3, #0
 8009152:	d101      	bne.n	8009158 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8009154:	2303      	movs	r3, #3
 8009156:	e01c      	b.n	8009192 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800915e:	b2db      	uxtb	r3, r3
 8009160:	2b03      	cmp	r3, #3
 8009162:	d115      	bne.n	8009190 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	32ae      	adds	r2, #174	; 0xae
 800916e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009174:	2b00      	cmp	r3, #0
 8009176:	d00b      	beq.n	8009190 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	32ae      	adds	r2, #174	; 0xae
 8009182:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009188:	78fa      	ldrb	r2, [r7, #3]
 800918a:	4611      	mov	r1, r2
 800918c:	6878      	ldr	r0, [r7, #4]
 800918e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8009190:	2300      	movs	r3, #0
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}

0800919a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800919a:	b480      	push	{r7}
 800919c:	b083      	sub	sp, #12
 800919e:	af00      	add	r7, sp, #0
 80091a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80091a2:	2300      	movs	r3, #0
}
 80091a4:	4618      	mov	r0, r3
 80091a6:	370c      	adds	r7, #12
 80091a8:	46bd      	mov	sp, r7
 80091aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091ae:	4770      	bx	lr

080091b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80091b8:	2300      	movs	r3, #0
 80091ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	2201      	movs	r2, #1
 80091c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d00e      	beq.n	80091ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	687a      	ldr	r2, [r7, #4]
 80091d8:	6852      	ldr	r2, [r2, #4]
 80091da:	b2d2      	uxtb	r2, r2
 80091dc:	4611      	mov	r1, r2
 80091de:	6878      	ldr	r0, [r7, #4]
 80091e0:	4798      	blx	r3
 80091e2:	4603      	mov	r3, r0
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d001      	beq.n	80091ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80091e8:	2303      	movs	r3, #3
 80091ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80091ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80091ee:	4618      	mov	r0, r3
 80091f0:	3710      	adds	r7, #16
 80091f2:	46bd      	mov	sp, r7
 80091f4:	bd80      	pop	{r7, pc}

080091f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80091f6:	b480      	push	{r7}
 80091f8:	b083      	sub	sp, #12
 80091fa:	af00      	add	r7, sp, #0
 80091fc:	6078      	str	r0, [r7, #4]
 80091fe:	460b      	mov	r3, r1
 8009200:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8009202:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8009204:	4618      	mov	r0, r3
 8009206:	370c      	adds	r7, #12
 8009208:	46bd      	mov	sp, r7
 800920a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920e:	4770      	bx	lr

08009210 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	6078      	str	r0, [r7, #4]
 8009218:	460b      	mov	r3, r1
 800921a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800921c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800921e:	4618      	mov	r0, r3
 8009220:	370c      	adds	r7, #12
 8009222:	46bd      	mov	sp, r7
 8009224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009228:	4770      	bx	lr

0800922a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800922a:	b580      	push	{r7, lr}
 800922c:	b086      	sub	sp, #24
 800922e:	af00      	add	r7, sp, #0
 8009230:	6078      	str	r0, [r7, #4]
 8009232:	460b      	mov	r3, r1
 8009234:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800923e:	2300      	movs	r3, #0
 8009240:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8009242:	68fb      	ldr	r3, [r7, #12]
 8009244:	885b      	ldrh	r3, [r3, #2]
 8009246:	b29a      	uxth	r2, r3
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	781b      	ldrb	r3, [r3, #0]
 800924c:	b29b      	uxth	r3, r3
 800924e:	429a      	cmp	r2, r3
 8009250:	d920      	bls.n	8009294 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	781b      	ldrb	r3, [r3, #0]
 8009256:	b29b      	uxth	r3, r3
 8009258:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800925a:	e013      	b.n	8009284 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800925c:	f107 030a 	add.w	r3, r7, #10
 8009260:	4619      	mov	r1, r3
 8009262:	6978      	ldr	r0, [r7, #20]
 8009264:	f000 f81b 	bl	800929e <USBD_GetNextDesc>
 8009268:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800926a:	697b      	ldr	r3, [r7, #20]
 800926c:	785b      	ldrb	r3, [r3, #1]
 800926e:	2b05      	cmp	r3, #5
 8009270:	d108      	bne.n	8009284 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8009272:	697b      	ldr	r3, [r7, #20]
 8009274:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8009276:	693b      	ldr	r3, [r7, #16]
 8009278:	789b      	ldrb	r3, [r3, #2]
 800927a:	78fa      	ldrb	r2, [r7, #3]
 800927c:	429a      	cmp	r2, r3
 800927e:	d008      	beq.n	8009292 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8009280:	2300      	movs	r3, #0
 8009282:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	885b      	ldrh	r3, [r3, #2]
 8009288:	b29a      	uxth	r2, r3
 800928a:	897b      	ldrh	r3, [r7, #10]
 800928c:	429a      	cmp	r2, r3
 800928e:	d8e5      	bhi.n	800925c <USBD_GetEpDesc+0x32>
 8009290:	e000      	b.n	8009294 <USBD_GetEpDesc+0x6a>
          break;
 8009292:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8009294:	693b      	ldr	r3, [r7, #16]
}
 8009296:	4618      	mov	r0, r3
 8009298:	3718      	adds	r7, #24
 800929a:	46bd      	mov	sp, r7
 800929c:	bd80      	pop	{r7, pc}

0800929e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800929e:	b480      	push	{r7}
 80092a0:	b085      	sub	sp, #20
 80092a2:	af00      	add	r7, sp, #0
 80092a4:	6078      	str	r0, [r7, #4]
 80092a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	881a      	ldrh	r2, [r3, #0]
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	781b      	ldrb	r3, [r3, #0]
 80092b4:	b29b      	uxth	r3, r3
 80092b6:	4413      	add	r3, r2
 80092b8:	b29a      	uxth	r2, r3
 80092ba:	683b      	ldr	r3, [r7, #0]
 80092bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	781b      	ldrb	r3, [r3, #0]
 80092c2:	461a      	mov	r2, r3
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	4413      	add	r3, r2
 80092c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80092ca:	68fb      	ldr	r3, [r7, #12]
}
 80092cc:	4618      	mov	r0, r3
 80092ce:	3714      	adds	r7, #20
 80092d0:	46bd      	mov	sp, r7
 80092d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092d6:	4770      	bx	lr

080092d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80092d8:	b480      	push	{r7}
 80092da:	b087      	sub	sp, #28
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80092e4:	697b      	ldr	r3, [r7, #20]
 80092e6:	781b      	ldrb	r3, [r3, #0]
 80092e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80092ea:	697b      	ldr	r3, [r7, #20]
 80092ec:	3301      	adds	r3, #1
 80092ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80092f0:	697b      	ldr	r3, [r7, #20]
 80092f2:	781b      	ldrb	r3, [r3, #0]
 80092f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80092f6:	8a3b      	ldrh	r3, [r7, #16]
 80092f8:	021b      	lsls	r3, r3, #8
 80092fa:	b21a      	sxth	r2, r3
 80092fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8009300:	4313      	orrs	r3, r2
 8009302:	b21b      	sxth	r3, r3
 8009304:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8009306:	89fb      	ldrh	r3, [r7, #14]
}
 8009308:	4618      	mov	r0, r3
 800930a:	371c      	adds	r7, #28
 800930c:	46bd      	mov	sp, r7
 800930e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009312:	4770      	bx	lr

08009314 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b084      	sub	sp, #16
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009322:	683b      	ldr	r3, [r7, #0]
 8009324:	781b      	ldrb	r3, [r3, #0]
 8009326:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800932a:	2b40      	cmp	r3, #64	; 0x40
 800932c:	d005      	beq.n	800933a <USBD_StdDevReq+0x26>
 800932e:	2b40      	cmp	r3, #64	; 0x40
 8009330:	d857      	bhi.n	80093e2 <USBD_StdDevReq+0xce>
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00f      	beq.n	8009356 <USBD_StdDevReq+0x42>
 8009336:	2b20      	cmp	r3, #32
 8009338:	d153      	bne.n	80093e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	32ae      	adds	r2, #174	; 0xae
 8009344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	6839      	ldr	r1, [r7, #0]
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	4798      	blx	r3
 8009350:	4603      	mov	r3, r0
 8009352:	73fb      	strb	r3, [r7, #15]
      break;
 8009354:	e04a      	b.n	80093ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	785b      	ldrb	r3, [r3, #1]
 800935a:	2b09      	cmp	r3, #9
 800935c:	d83b      	bhi.n	80093d6 <USBD_StdDevReq+0xc2>
 800935e:	a201      	add	r2, pc, #4	; (adr r2, 8009364 <USBD_StdDevReq+0x50>)
 8009360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009364:	080093b9 	.word	0x080093b9
 8009368:	080093cd 	.word	0x080093cd
 800936c:	080093d7 	.word	0x080093d7
 8009370:	080093c3 	.word	0x080093c3
 8009374:	080093d7 	.word	0x080093d7
 8009378:	08009397 	.word	0x08009397
 800937c:	0800938d 	.word	0x0800938d
 8009380:	080093d7 	.word	0x080093d7
 8009384:	080093af 	.word	0x080093af
 8009388:	080093a1 	.word	0x080093a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800938c:	6839      	ldr	r1, [r7, #0]
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f000 fa3c 	bl	800980c <USBD_GetDescriptor>
          break;
 8009394:	e024      	b.n	80093e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8009396:	6839      	ldr	r1, [r7, #0]
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f000 fba1 	bl	8009ae0 <USBD_SetAddress>
          break;
 800939e:	e01f      	b.n	80093e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80093a0:	6839      	ldr	r1, [r7, #0]
 80093a2:	6878      	ldr	r0, [r7, #4]
 80093a4:	f000 fbe0 	bl	8009b68 <USBD_SetConfig>
 80093a8:	4603      	mov	r3, r0
 80093aa:	73fb      	strb	r3, [r7, #15]
          break;
 80093ac:	e018      	b.n	80093e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80093ae:	6839      	ldr	r1, [r7, #0]
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f000 fc83 	bl	8009cbc <USBD_GetConfig>
          break;
 80093b6:	e013      	b.n	80093e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f000 fcb4 	bl	8009d28 <USBD_GetStatus>
          break;
 80093c0:	e00e      	b.n	80093e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80093c2:	6839      	ldr	r1, [r7, #0]
 80093c4:	6878      	ldr	r0, [r7, #4]
 80093c6:	f000 fce3 	bl	8009d90 <USBD_SetFeature>
          break;
 80093ca:	e009      	b.n	80093e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80093cc:	6839      	ldr	r1, [r7, #0]
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fd07 	bl	8009de2 <USBD_ClrFeature>
          break;
 80093d4:	e004      	b.n	80093e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80093d6:	6839      	ldr	r1, [r7, #0]
 80093d8:	6878      	ldr	r0, [r7, #4]
 80093da:	f000 fd5e 	bl	8009e9a <USBD_CtlError>
          break;
 80093de:	bf00      	nop
      }
      break;
 80093e0:	e004      	b.n	80093ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80093e2:	6839      	ldr	r1, [r7, #0]
 80093e4:	6878      	ldr	r0, [r7, #4]
 80093e6:	f000 fd58 	bl	8009e9a <USBD_CtlError>
      break;
 80093ea:	bf00      	nop
  }

  return ret;
 80093ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop

080093f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b084      	sub	sp, #16
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]
 8009400:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009402:	2300      	movs	r3, #0
 8009404:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	781b      	ldrb	r3, [r3, #0]
 800940a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800940e:	2b40      	cmp	r3, #64	; 0x40
 8009410:	d005      	beq.n	800941e <USBD_StdItfReq+0x26>
 8009412:	2b40      	cmp	r3, #64	; 0x40
 8009414:	d852      	bhi.n	80094bc <USBD_StdItfReq+0xc4>
 8009416:	2b00      	cmp	r3, #0
 8009418:	d001      	beq.n	800941e <USBD_StdItfReq+0x26>
 800941a:	2b20      	cmp	r3, #32
 800941c:	d14e      	bne.n	80094bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009424:	b2db      	uxtb	r3, r3
 8009426:	3b01      	subs	r3, #1
 8009428:	2b02      	cmp	r3, #2
 800942a:	d840      	bhi.n	80094ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800942c:	683b      	ldr	r3, [r7, #0]
 800942e:	889b      	ldrh	r3, [r3, #4]
 8009430:	b2db      	uxtb	r3, r3
 8009432:	2b01      	cmp	r3, #1
 8009434:	d836      	bhi.n	80094a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8009436:	683b      	ldr	r3, [r7, #0]
 8009438:	889b      	ldrh	r3, [r3, #4]
 800943a:	b2db      	uxtb	r3, r3
 800943c:	4619      	mov	r1, r3
 800943e:	6878      	ldr	r0, [r7, #4]
 8009440:	f7ff fed9 	bl	80091f6 <USBD_CoreFindIF>
 8009444:	4603      	mov	r3, r0
 8009446:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009448:	7bbb      	ldrb	r3, [r7, #14]
 800944a:	2bff      	cmp	r3, #255	; 0xff
 800944c:	d01d      	beq.n	800948a <USBD_StdItfReq+0x92>
 800944e:	7bbb      	ldrb	r3, [r7, #14]
 8009450:	2b00      	cmp	r3, #0
 8009452:	d11a      	bne.n	800948a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8009454:	7bba      	ldrb	r2, [r7, #14]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	32ae      	adds	r2, #174	; 0xae
 800945a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	2b00      	cmp	r3, #0
 8009462:	d00f      	beq.n	8009484 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8009464:	7bba      	ldrb	r2, [r7, #14]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800946c:	7bba      	ldrb	r2, [r7, #14]
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	32ae      	adds	r2, #174	; 0xae
 8009472:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009476:	689b      	ldr	r3, [r3, #8]
 8009478:	6839      	ldr	r1, [r7, #0]
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	4798      	blx	r3
 800947e:	4603      	mov	r3, r0
 8009480:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009482:	e004      	b.n	800948e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8009484:	2303      	movs	r3, #3
 8009486:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8009488:	e001      	b.n	800948e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800948a:	2303      	movs	r3, #3
 800948c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800948e:	683b      	ldr	r3, [r7, #0]
 8009490:	88db      	ldrh	r3, [r3, #6]
 8009492:	2b00      	cmp	r3, #0
 8009494:	d110      	bne.n	80094b8 <USBD_StdItfReq+0xc0>
 8009496:	7bfb      	ldrb	r3, [r7, #15]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d10d      	bne.n	80094b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f000 fdaa 	bl	8009ff6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80094a2:	e009      	b.n	80094b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80094a4:	6839      	ldr	r1, [r7, #0]
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f000 fcf7 	bl	8009e9a <USBD_CtlError>
          break;
 80094ac:	e004      	b.n	80094b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80094ae:	6839      	ldr	r1, [r7, #0]
 80094b0:	6878      	ldr	r0, [r7, #4]
 80094b2:	f000 fcf2 	bl	8009e9a <USBD_CtlError>
          break;
 80094b6:	e000      	b.n	80094ba <USBD_StdItfReq+0xc2>
          break;
 80094b8:	bf00      	nop
      }
      break;
 80094ba:	e004      	b.n	80094c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80094bc:	6839      	ldr	r1, [r7, #0]
 80094be:	6878      	ldr	r0, [r7, #4]
 80094c0:	f000 fceb 	bl	8009e9a <USBD_CtlError>
      break;
 80094c4:	bf00      	nop
  }

  return ret;
 80094c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80094c8:	4618      	mov	r0, r3
 80094ca:	3710      	adds	r7, #16
 80094cc:	46bd      	mov	sp, r7
 80094ce:	bd80      	pop	{r7, pc}

080094d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b084      	sub	sp, #16
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	6078      	str	r0, [r7, #4]
 80094d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80094da:	2300      	movs	r3, #0
 80094dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	889b      	ldrh	r3, [r3, #4]
 80094e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80094e4:	683b      	ldr	r3, [r7, #0]
 80094e6:	781b      	ldrb	r3, [r3, #0]
 80094e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80094ec:	2b40      	cmp	r3, #64	; 0x40
 80094ee:	d007      	beq.n	8009500 <USBD_StdEPReq+0x30>
 80094f0:	2b40      	cmp	r3, #64	; 0x40
 80094f2:	f200 817f 	bhi.w	80097f4 <USBD_StdEPReq+0x324>
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d02a      	beq.n	8009550 <USBD_StdEPReq+0x80>
 80094fa:	2b20      	cmp	r3, #32
 80094fc:	f040 817a 	bne.w	80097f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8009500:	7bbb      	ldrb	r3, [r7, #14]
 8009502:	4619      	mov	r1, r3
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f7ff fe83 	bl	8009210 <USBD_CoreFindEP>
 800950a:	4603      	mov	r3, r0
 800950c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800950e:	7b7b      	ldrb	r3, [r7, #13]
 8009510:	2bff      	cmp	r3, #255	; 0xff
 8009512:	f000 8174 	beq.w	80097fe <USBD_StdEPReq+0x32e>
 8009516:	7b7b      	ldrb	r3, [r7, #13]
 8009518:	2b00      	cmp	r3, #0
 800951a:	f040 8170 	bne.w	80097fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800951e:	7b7a      	ldrb	r2, [r7, #13]
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8009526:	7b7a      	ldrb	r2, [r7, #13]
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	32ae      	adds	r2, #174	; 0xae
 800952c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009530:	689b      	ldr	r3, [r3, #8]
 8009532:	2b00      	cmp	r3, #0
 8009534:	f000 8163 	beq.w	80097fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8009538:	7b7a      	ldrb	r2, [r7, #13]
 800953a:	687b      	ldr	r3, [r7, #4]
 800953c:	32ae      	adds	r2, #174	; 0xae
 800953e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009542:	689b      	ldr	r3, [r3, #8]
 8009544:	6839      	ldr	r1, [r7, #0]
 8009546:	6878      	ldr	r0, [r7, #4]
 8009548:	4798      	blx	r3
 800954a:	4603      	mov	r3, r0
 800954c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800954e:	e156      	b.n	80097fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009550:	683b      	ldr	r3, [r7, #0]
 8009552:	785b      	ldrb	r3, [r3, #1]
 8009554:	2b03      	cmp	r3, #3
 8009556:	d008      	beq.n	800956a <USBD_StdEPReq+0x9a>
 8009558:	2b03      	cmp	r3, #3
 800955a:	f300 8145 	bgt.w	80097e8 <USBD_StdEPReq+0x318>
 800955e:	2b00      	cmp	r3, #0
 8009560:	f000 809b 	beq.w	800969a <USBD_StdEPReq+0x1ca>
 8009564:	2b01      	cmp	r3, #1
 8009566:	d03c      	beq.n	80095e2 <USBD_StdEPReq+0x112>
 8009568:	e13e      	b.n	80097e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009570:	b2db      	uxtb	r3, r3
 8009572:	2b02      	cmp	r3, #2
 8009574:	d002      	beq.n	800957c <USBD_StdEPReq+0xac>
 8009576:	2b03      	cmp	r3, #3
 8009578:	d016      	beq.n	80095a8 <USBD_StdEPReq+0xd8>
 800957a:	e02c      	b.n	80095d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800957c:	7bbb      	ldrb	r3, [r7, #14]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00d      	beq.n	800959e <USBD_StdEPReq+0xce>
 8009582:	7bbb      	ldrb	r3, [r7, #14]
 8009584:	2b80      	cmp	r3, #128	; 0x80
 8009586:	d00a      	beq.n	800959e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009588:	7bbb      	ldrb	r3, [r7, #14]
 800958a:	4619      	mov	r1, r3
 800958c:	6878      	ldr	r0, [r7, #4]
 800958e:	f001 f885 	bl	800a69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8009592:	2180      	movs	r1, #128	; 0x80
 8009594:	6878      	ldr	r0, [r7, #4]
 8009596:	f001 f881 	bl	800a69c <USBD_LL_StallEP>
 800959a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800959c:	e020      	b.n	80095e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800959e:	6839      	ldr	r1, [r7, #0]
 80095a0:	6878      	ldr	r0, [r7, #4]
 80095a2:	f000 fc7a 	bl	8009e9a <USBD_CtlError>
              break;
 80095a6:	e01b      	b.n	80095e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80095a8:	683b      	ldr	r3, [r7, #0]
 80095aa:	885b      	ldrh	r3, [r3, #2]
 80095ac:	2b00      	cmp	r3, #0
 80095ae:	d10e      	bne.n	80095ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80095b0:	7bbb      	ldrb	r3, [r7, #14]
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00b      	beq.n	80095ce <USBD_StdEPReq+0xfe>
 80095b6:	7bbb      	ldrb	r3, [r7, #14]
 80095b8:	2b80      	cmp	r3, #128	; 0x80
 80095ba:	d008      	beq.n	80095ce <USBD_StdEPReq+0xfe>
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	88db      	ldrh	r3, [r3, #6]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d104      	bne.n	80095ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80095c4:	7bbb      	ldrb	r3, [r7, #14]
 80095c6:	4619      	mov	r1, r3
 80095c8:	6878      	ldr	r0, [r7, #4]
 80095ca:	f001 f867 	bl	800a69c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80095ce:	6878      	ldr	r0, [r7, #4]
 80095d0:	f000 fd11 	bl	8009ff6 <USBD_CtlSendStatus>

              break;
 80095d4:	e004      	b.n	80095e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80095d6:	6839      	ldr	r1, [r7, #0]
 80095d8:	6878      	ldr	r0, [r7, #4]
 80095da:	f000 fc5e 	bl	8009e9a <USBD_CtlError>
              break;
 80095de:	bf00      	nop
          }
          break;
 80095e0:	e107      	b.n	80097f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b02      	cmp	r3, #2
 80095ec:	d002      	beq.n	80095f4 <USBD_StdEPReq+0x124>
 80095ee:	2b03      	cmp	r3, #3
 80095f0:	d016      	beq.n	8009620 <USBD_StdEPReq+0x150>
 80095f2:	e04b      	b.n	800968c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80095f4:	7bbb      	ldrb	r3, [r7, #14]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d00d      	beq.n	8009616 <USBD_StdEPReq+0x146>
 80095fa:	7bbb      	ldrb	r3, [r7, #14]
 80095fc:	2b80      	cmp	r3, #128	; 0x80
 80095fe:	d00a      	beq.n	8009616 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8009600:	7bbb      	ldrb	r3, [r7, #14]
 8009602:	4619      	mov	r1, r3
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f001 f849 	bl	800a69c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800960a:	2180      	movs	r1, #128	; 0x80
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f001 f845 	bl	800a69c <USBD_LL_StallEP>
 8009612:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8009614:	e040      	b.n	8009698 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f000 fc3e 	bl	8009e9a <USBD_CtlError>
              break;
 800961e:	e03b      	b.n	8009698 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8009620:	683b      	ldr	r3, [r7, #0]
 8009622:	885b      	ldrh	r3, [r3, #2]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d136      	bne.n	8009696 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8009628:	7bbb      	ldrb	r3, [r7, #14]
 800962a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800962e:	2b00      	cmp	r3, #0
 8009630:	d004      	beq.n	800963c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8009632:	7bbb      	ldrb	r3, [r7, #14]
 8009634:	4619      	mov	r1, r3
 8009636:	6878      	ldr	r0, [r7, #4]
 8009638:	f001 f84f 	bl	800a6da <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800963c:	6878      	ldr	r0, [r7, #4]
 800963e:	f000 fcda 	bl	8009ff6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8009642:	7bbb      	ldrb	r3, [r7, #14]
 8009644:	4619      	mov	r1, r3
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff fde2 	bl	8009210 <USBD_CoreFindEP>
 800964c:	4603      	mov	r3, r0
 800964e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8009650:	7b7b      	ldrb	r3, [r7, #13]
 8009652:	2bff      	cmp	r3, #255	; 0xff
 8009654:	d01f      	beq.n	8009696 <USBD_StdEPReq+0x1c6>
 8009656:	7b7b      	ldrb	r3, [r7, #13]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d11c      	bne.n	8009696 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800965c:	7b7a      	ldrb	r2, [r7, #13]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8009664:	7b7a      	ldrb	r2, [r7, #13]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	32ae      	adds	r2, #174	; 0xae
 800966a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800966e:	689b      	ldr	r3, [r3, #8]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d010      	beq.n	8009696 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8009674:	7b7a      	ldrb	r2, [r7, #13]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	32ae      	adds	r2, #174	; 0xae
 800967a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800967e:	689b      	ldr	r3, [r3, #8]
 8009680:	6839      	ldr	r1, [r7, #0]
 8009682:	6878      	ldr	r0, [r7, #4]
 8009684:	4798      	blx	r3
 8009686:	4603      	mov	r3, r0
 8009688:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800968a:	e004      	b.n	8009696 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800968c:	6839      	ldr	r1, [r7, #0]
 800968e:	6878      	ldr	r0, [r7, #4]
 8009690:	f000 fc03 	bl	8009e9a <USBD_CtlError>
              break;
 8009694:	e000      	b.n	8009698 <USBD_StdEPReq+0x1c8>
              break;
 8009696:	bf00      	nop
          }
          break;
 8009698:	e0ab      	b.n	80097f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80096a0:	b2db      	uxtb	r3, r3
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d002      	beq.n	80096ac <USBD_StdEPReq+0x1dc>
 80096a6:	2b03      	cmp	r3, #3
 80096a8:	d032      	beq.n	8009710 <USBD_StdEPReq+0x240>
 80096aa:	e097      	b.n	80097dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80096ac:	7bbb      	ldrb	r3, [r7, #14]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d007      	beq.n	80096c2 <USBD_StdEPReq+0x1f2>
 80096b2:	7bbb      	ldrb	r3, [r7, #14]
 80096b4:	2b80      	cmp	r3, #128	; 0x80
 80096b6:	d004      	beq.n	80096c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80096b8:	6839      	ldr	r1, [r7, #0]
 80096ba:	6878      	ldr	r0, [r7, #4]
 80096bc:	f000 fbed 	bl	8009e9a <USBD_CtlError>
                break;
 80096c0:	e091      	b.n	80097e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80096c6:	2b00      	cmp	r3, #0
 80096c8:	da0b      	bge.n	80096e2 <USBD_StdEPReq+0x212>
 80096ca:	7bbb      	ldrb	r3, [r7, #14]
 80096cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80096d0:	4613      	mov	r3, r2
 80096d2:	009b      	lsls	r3, r3, #2
 80096d4:	4413      	add	r3, r2
 80096d6:	009b      	lsls	r3, r3, #2
 80096d8:	3310      	adds	r3, #16
 80096da:	687a      	ldr	r2, [r7, #4]
 80096dc:	4413      	add	r3, r2
 80096de:	3304      	adds	r3, #4
 80096e0:	e00b      	b.n	80096fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80096e2:	7bbb      	ldrb	r3, [r7, #14]
 80096e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80096e8:	4613      	mov	r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	4413      	add	r3, r2
 80096ee:	009b      	lsls	r3, r3, #2
 80096f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80096f4:	687a      	ldr	r2, [r7, #4]
 80096f6:	4413      	add	r3, r2
 80096f8:	3304      	adds	r3, #4
 80096fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80096fc:	68bb      	ldr	r3, [r7, #8]
 80096fe:	2200      	movs	r2, #0
 8009700:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009702:	68bb      	ldr	r3, [r7, #8]
 8009704:	2202      	movs	r2, #2
 8009706:	4619      	mov	r1, r3
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fc37 	bl	8009f7c <USBD_CtlSendData>
              break;
 800970e:	e06a      	b.n	80097e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8009710:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009714:	2b00      	cmp	r3, #0
 8009716:	da11      	bge.n	800973c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8009718:	7bbb      	ldrb	r3, [r7, #14]
 800971a:	f003 020f 	and.w	r2, r3, #15
 800971e:	6879      	ldr	r1, [r7, #4]
 8009720:	4613      	mov	r3, r2
 8009722:	009b      	lsls	r3, r3, #2
 8009724:	4413      	add	r3, r2
 8009726:	009b      	lsls	r3, r3, #2
 8009728:	440b      	add	r3, r1
 800972a:	3324      	adds	r3, #36	; 0x24
 800972c:	881b      	ldrh	r3, [r3, #0]
 800972e:	2b00      	cmp	r3, #0
 8009730:	d117      	bne.n	8009762 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009732:	6839      	ldr	r1, [r7, #0]
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f000 fbb0 	bl	8009e9a <USBD_CtlError>
                  break;
 800973a:	e054      	b.n	80097e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800973c:	7bbb      	ldrb	r3, [r7, #14]
 800973e:	f003 020f 	and.w	r2, r3, #15
 8009742:	6879      	ldr	r1, [r7, #4]
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8009752:	881b      	ldrh	r3, [r3, #0]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d104      	bne.n	8009762 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8009758:	6839      	ldr	r1, [r7, #0]
 800975a:	6878      	ldr	r0, [r7, #4]
 800975c:	f000 fb9d 	bl	8009e9a <USBD_CtlError>
                  break;
 8009760:	e041      	b.n	80097e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009762:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009766:	2b00      	cmp	r3, #0
 8009768:	da0b      	bge.n	8009782 <USBD_StdEPReq+0x2b2>
 800976a:	7bbb      	ldrb	r3, [r7, #14]
 800976c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009770:	4613      	mov	r3, r2
 8009772:	009b      	lsls	r3, r3, #2
 8009774:	4413      	add	r3, r2
 8009776:	009b      	lsls	r3, r3, #2
 8009778:	3310      	adds	r3, #16
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	4413      	add	r3, r2
 800977e:	3304      	adds	r3, #4
 8009780:	e00b      	b.n	800979a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8009782:	7bbb      	ldrb	r3, [r7, #14]
 8009784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8009788:	4613      	mov	r3, r2
 800978a:	009b      	lsls	r3, r3, #2
 800978c:	4413      	add	r3, r2
 800978e:	009b      	lsls	r3, r3, #2
 8009790:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	4413      	add	r3, r2
 8009798:	3304      	adds	r3, #4
 800979a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800979c:	7bbb      	ldrb	r3, [r7, #14]
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d002      	beq.n	80097a8 <USBD_StdEPReq+0x2d8>
 80097a2:	7bbb      	ldrb	r3, [r7, #14]
 80097a4:	2b80      	cmp	r3, #128	; 0x80
 80097a6:	d103      	bne.n	80097b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80097a8:	68bb      	ldr	r3, [r7, #8]
 80097aa:	2200      	movs	r2, #0
 80097ac:	601a      	str	r2, [r3, #0]
 80097ae:	e00e      	b.n	80097ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80097b0:	7bbb      	ldrb	r3, [r7, #14]
 80097b2:	4619      	mov	r1, r3
 80097b4:	6878      	ldr	r0, [r7, #4]
 80097b6:	f000 ffaf 	bl	800a718 <USBD_LL_IsStallEP>
 80097ba:	4603      	mov	r3, r0
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d003      	beq.n	80097c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	2201      	movs	r2, #1
 80097c4:	601a      	str	r2, [r3, #0]
 80097c6:	e002      	b.n	80097ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80097c8:	68bb      	ldr	r3, [r7, #8]
 80097ca:	2200      	movs	r2, #0
 80097cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	2202      	movs	r2, #2
 80097d2:	4619      	mov	r1, r3
 80097d4:	6878      	ldr	r0, [r7, #4]
 80097d6:	f000 fbd1 	bl	8009f7c <USBD_CtlSendData>
              break;
 80097da:	e004      	b.n	80097e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80097dc:	6839      	ldr	r1, [r7, #0]
 80097de:	6878      	ldr	r0, [r7, #4]
 80097e0:	f000 fb5b 	bl	8009e9a <USBD_CtlError>
              break;
 80097e4:	bf00      	nop
          }
          break;
 80097e6:	e004      	b.n	80097f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80097e8:	6839      	ldr	r1, [r7, #0]
 80097ea:	6878      	ldr	r0, [r7, #4]
 80097ec:	f000 fb55 	bl	8009e9a <USBD_CtlError>
          break;
 80097f0:	bf00      	nop
      }
      break;
 80097f2:	e005      	b.n	8009800 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80097f4:	6839      	ldr	r1, [r7, #0]
 80097f6:	6878      	ldr	r0, [r7, #4]
 80097f8:	f000 fb4f 	bl	8009e9a <USBD_CtlError>
      break;
 80097fc:	e000      	b.n	8009800 <USBD_StdEPReq+0x330>
      break;
 80097fe:	bf00      	nop
  }

  return ret;
 8009800:	7bfb      	ldrb	r3, [r7, #15]
}
 8009802:	4618      	mov	r0, r3
 8009804:	3710      	adds	r7, #16
 8009806:	46bd      	mov	sp, r7
 8009808:	bd80      	pop	{r7, pc}
	...

0800980c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800980c:	b580      	push	{r7, lr}
 800980e:	b084      	sub	sp, #16
 8009810:	af00      	add	r7, sp, #0
 8009812:	6078      	str	r0, [r7, #4]
 8009814:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8009816:	2300      	movs	r3, #0
 8009818:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800981a:	2300      	movs	r3, #0
 800981c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800981e:	2300      	movs	r3, #0
 8009820:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009822:	683b      	ldr	r3, [r7, #0]
 8009824:	885b      	ldrh	r3, [r3, #2]
 8009826:	0a1b      	lsrs	r3, r3, #8
 8009828:	b29b      	uxth	r3, r3
 800982a:	3b01      	subs	r3, #1
 800982c:	2b06      	cmp	r3, #6
 800982e:	f200 8128 	bhi.w	8009a82 <USBD_GetDescriptor+0x276>
 8009832:	a201      	add	r2, pc, #4	; (adr r2, 8009838 <USBD_GetDescriptor+0x2c>)
 8009834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009838:	08009855 	.word	0x08009855
 800983c:	0800986d 	.word	0x0800986d
 8009840:	080098ad 	.word	0x080098ad
 8009844:	08009a83 	.word	0x08009a83
 8009848:	08009a83 	.word	0x08009a83
 800984c:	08009a23 	.word	0x08009a23
 8009850:	08009a4f 	.word	0x08009a4f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	687a      	ldr	r2, [r7, #4]
 800985e:	7c12      	ldrb	r2, [r2, #16]
 8009860:	f107 0108 	add.w	r1, r7, #8
 8009864:	4610      	mov	r0, r2
 8009866:	4798      	blx	r3
 8009868:	60f8      	str	r0, [r7, #12]
      break;
 800986a:	e112      	b.n	8009a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	7c1b      	ldrb	r3, [r3, #16]
 8009870:	2b00      	cmp	r3, #0
 8009872:	d10d      	bne.n	8009890 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800987a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800987c:	f107 0208 	add.w	r2, r7, #8
 8009880:	4610      	mov	r0, r2
 8009882:	4798      	blx	r3
 8009884:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	3301      	adds	r3, #1
 800988a:	2202      	movs	r2, #2
 800988c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800988e:	e100      	b.n	8009a92 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009898:	f107 0208 	add.w	r2, r7, #8
 800989c:	4610      	mov	r0, r2
 800989e:	4798      	blx	r3
 80098a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	3301      	adds	r3, #1
 80098a6:	2202      	movs	r2, #2
 80098a8:	701a      	strb	r2, [r3, #0]
      break;
 80098aa:	e0f2      	b.n	8009a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	885b      	ldrh	r3, [r3, #2]
 80098b0:	b2db      	uxtb	r3, r3
 80098b2:	2b05      	cmp	r3, #5
 80098b4:	f200 80ac 	bhi.w	8009a10 <USBD_GetDescriptor+0x204>
 80098b8:	a201      	add	r2, pc, #4	; (adr r2, 80098c0 <USBD_GetDescriptor+0xb4>)
 80098ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098be:	bf00      	nop
 80098c0:	080098d9 	.word	0x080098d9
 80098c4:	0800990d 	.word	0x0800990d
 80098c8:	08009941 	.word	0x08009941
 80098cc:	08009975 	.word	0x08009975
 80098d0:	080099a9 	.word	0x080099a9
 80098d4:	080099dd 	.word	0x080099dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098de:	685b      	ldr	r3, [r3, #4]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d00b      	beq.n	80098fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80098ea:	685b      	ldr	r3, [r3, #4]
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	7c12      	ldrb	r2, [r2, #16]
 80098f0:	f107 0108 	add.w	r1, r7, #8
 80098f4:	4610      	mov	r0, r2
 80098f6:	4798      	blx	r3
 80098f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80098fa:	e091      	b.n	8009a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80098fc:	6839      	ldr	r1, [r7, #0]
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 facb 	bl	8009e9a <USBD_CtlError>
            err++;
 8009904:	7afb      	ldrb	r3, [r7, #11]
 8009906:	3301      	adds	r3, #1
 8009908:	72fb      	strb	r3, [r7, #11]
          break;
 800990a:	e089      	b.n	8009a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009912:	689b      	ldr	r3, [r3, #8]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d00b      	beq.n	8009930 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800991e:	689b      	ldr	r3, [r3, #8]
 8009920:	687a      	ldr	r2, [r7, #4]
 8009922:	7c12      	ldrb	r2, [r2, #16]
 8009924:	f107 0108 	add.w	r1, r7, #8
 8009928:	4610      	mov	r0, r2
 800992a:	4798      	blx	r3
 800992c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800992e:	e077      	b.n	8009a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009930:	6839      	ldr	r1, [r7, #0]
 8009932:	6878      	ldr	r0, [r7, #4]
 8009934:	f000 fab1 	bl	8009e9a <USBD_CtlError>
            err++;
 8009938:	7afb      	ldrb	r3, [r7, #11]
 800993a:	3301      	adds	r3, #1
 800993c:	72fb      	strb	r3, [r7, #11]
          break;
 800993e:	e06f      	b.n	8009a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009946:	68db      	ldr	r3, [r3, #12]
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00b      	beq.n	8009964 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009952:	68db      	ldr	r3, [r3, #12]
 8009954:	687a      	ldr	r2, [r7, #4]
 8009956:	7c12      	ldrb	r2, [r2, #16]
 8009958:	f107 0108 	add.w	r1, r7, #8
 800995c:	4610      	mov	r0, r2
 800995e:	4798      	blx	r3
 8009960:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009962:	e05d      	b.n	8009a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009964:	6839      	ldr	r1, [r7, #0]
 8009966:	6878      	ldr	r0, [r7, #4]
 8009968:	f000 fa97 	bl	8009e9a <USBD_CtlError>
            err++;
 800996c:	7afb      	ldrb	r3, [r7, #11]
 800996e:	3301      	adds	r3, #1
 8009970:	72fb      	strb	r3, [r7, #11]
          break;
 8009972:	e055      	b.n	8009a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800997a:	691b      	ldr	r3, [r3, #16]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d00b      	beq.n	8009998 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	7c12      	ldrb	r2, [r2, #16]
 800998c:	f107 0108 	add.w	r1, r7, #8
 8009990:	4610      	mov	r0, r2
 8009992:	4798      	blx	r3
 8009994:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009996:	e043      	b.n	8009a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009998:	6839      	ldr	r1, [r7, #0]
 800999a:	6878      	ldr	r0, [r7, #4]
 800999c:	f000 fa7d 	bl	8009e9a <USBD_CtlError>
            err++;
 80099a0:	7afb      	ldrb	r3, [r7, #11]
 80099a2:	3301      	adds	r3, #1
 80099a4:	72fb      	strb	r3, [r7, #11]
          break;
 80099a6:	e03b      	b.n	8009a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ae:	695b      	ldr	r3, [r3, #20]
 80099b0:	2b00      	cmp	r3, #0
 80099b2:	d00b      	beq.n	80099cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ba:	695b      	ldr	r3, [r3, #20]
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	7c12      	ldrb	r2, [r2, #16]
 80099c0:	f107 0108 	add.w	r1, r7, #8
 80099c4:	4610      	mov	r0, r2
 80099c6:	4798      	blx	r3
 80099c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099ca:	e029      	b.n	8009a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80099cc:	6839      	ldr	r1, [r7, #0]
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 fa63 	bl	8009e9a <USBD_CtlError>
            err++;
 80099d4:	7afb      	ldrb	r3, [r7, #11]
 80099d6:	3301      	adds	r3, #1
 80099d8:	72fb      	strb	r3, [r7, #11]
          break;
 80099da:	e021      	b.n	8009a20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099e2:	699b      	ldr	r3, [r3, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	d00b      	beq.n	8009a00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80099ee:	699b      	ldr	r3, [r3, #24]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	7c12      	ldrb	r2, [r2, #16]
 80099f4:	f107 0108 	add.w	r1, r7, #8
 80099f8:	4610      	mov	r0, r2
 80099fa:	4798      	blx	r3
 80099fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80099fe:	e00f      	b.n	8009a20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8009a00:	6839      	ldr	r1, [r7, #0]
 8009a02:	6878      	ldr	r0, [r7, #4]
 8009a04:	f000 fa49 	bl	8009e9a <USBD_CtlError>
            err++;
 8009a08:	7afb      	ldrb	r3, [r7, #11]
 8009a0a:	3301      	adds	r3, #1
 8009a0c:	72fb      	strb	r3, [r7, #11]
          break;
 8009a0e:	e007      	b.n	8009a20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8009a10:	6839      	ldr	r1, [r7, #0]
 8009a12:	6878      	ldr	r0, [r7, #4]
 8009a14:	f000 fa41 	bl	8009e9a <USBD_CtlError>
          err++;
 8009a18:	7afb      	ldrb	r3, [r7, #11]
 8009a1a:	3301      	adds	r3, #1
 8009a1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8009a1e:	bf00      	nop
      }
      break;
 8009a20:	e037      	b.n	8009a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	7c1b      	ldrb	r3, [r3, #16]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d109      	bne.n	8009a3e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a32:	f107 0208 	add.w	r2, r7, #8
 8009a36:	4610      	mov	r0, r2
 8009a38:	4798      	blx	r3
 8009a3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a3c:	e029      	b.n	8009a92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a3e:	6839      	ldr	r1, [r7, #0]
 8009a40:	6878      	ldr	r0, [r7, #4]
 8009a42:	f000 fa2a 	bl	8009e9a <USBD_CtlError>
        err++;
 8009a46:	7afb      	ldrb	r3, [r7, #11]
 8009a48:	3301      	adds	r3, #1
 8009a4a:	72fb      	strb	r3, [r7, #11]
      break;
 8009a4c:	e021      	b.n	8009a92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	7c1b      	ldrb	r3, [r3, #16]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d10d      	bne.n	8009a72 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a5e:	f107 0208 	add.w	r2, r7, #8
 8009a62:	4610      	mov	r0, r2
 8009a64:	4798      	blx	r3
 8009a66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	3301      	adds	r3, #1
 8009a6c:	2207      	movs	r2, #7
 8009a6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009a70:	e00f      	b.n	8009a92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8009a72:	6839      	ldr	r1, [r7, #0]
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f000 fa10 	bl	8009e9a <USBD_CtlError>
        err++;
 8009a7a:	7afb      	ldrb	r3, [r7, #11]
 8009a7c:	3301      	adds	r3, #1
 8009a7e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a80:	e007      	b.n	8009a92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8009a82:	6839      	ldr	r1, [r7, #0]
 8009a84:	6878      	ldr	r0, [r7, #4]
 8009a86:	f000 fa08 	bl	8009e9a <USBD_CtlError>
      err++;
 8009a8a:	7afb      	ldrb	r3, [r7, #11]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	72fb      	strb	r3, [r7, #11]
      break;
 8009a90:	bf00      	nop
  }

  if (err != 0U)
 8009a92:	7afb      	ldrb	r3, [r7, #11]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d11e      	bne.n	8009ad6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	88db      	ldrh	r3, [r3, #6]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	d016      	beq.n	8009ace <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8009aa0:	893b      	ldrh	r3, [r7, #8]
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d00e      	beq.n	8009ac4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	88da      	ldrh	r2, [r3, #6]
 8009aaa:	893b      	ldrh	r3, [r7, #8]
 8009aac:	4293      	cmp	r3, r2
 8009aae:	bf28      	it	cs
 8009ab0:	4613      	movcs	r3, r2
 8009ab2:	b29b      	uxth	r3, r3
 8009ab4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8009ab6:	893b      	ldrh	r3, [r7, #8]
 8009ab8:	461a      	mov	r2, r3
 8009aba:	68f9      	ldr	r1, [r7, #12]
 8009abc:	6878      	ldr	r0, [r7, #4]
 8009abe:	f000 fa5d 	bl	8009f7c <USBD_CtlSendData>
 8009ac2:	e009      	b.n	8009ad8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8009ac4:	6839      	ldr	r1, [r7, #0]
 8009ac6:	6878      	ldr	r0, [r7, #4]
 8009ac8:	f000 f9e7 	bl	8009e9a <USBD_CtlError>
 8009acc:	e004      	b.n	8009ad8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009ace:	6878      	ldr	r0, [r7, #4]
 8009ad0:	f000 fa91 	bl	8009ff6 <USBD_CtlSendStatus>
 8009ad4:	e000      	b.n	8009ad8 <USBD_GetDescriptor+0x2cc>
    return;
 8009ad6:	bf00      	nop
  }
}
 8009ad8:	3710      	adds	r7, #16
 8009ada:	46bd      	mov	sp, r7
 8009adc:	bd80      	pop	{r7, pc}
 8009ade:	bf00      	nop

08009ae0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009ae0:	b580      	push	{r7, lr}
 8009ae2:	b084      	sub	sp, #16
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
 8009ae8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	889b      	ldrh	r3, [r3, #4]
 8009aee:	2b00      	cmp	r3, #0
 8009af0:	d131      	bne.n	8009b56 <USBD_SetAddress+0x76>
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	88db      	ldrh	r3, [r3, #6]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d12d      	bne.n	8009b56 <USBD_SetAddress+0x76>
 8009afa:	683b      	ldr	r3, [r7, #0]
 8009afc:	885b      	ldrh	r3, [r3, #2]
 8009afe:	2b7f      	cmp	r3, #127	; 0x7f
 8009b00:	d829      	bhi.n	8009b56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8009b02:	683b      	ldr	r3, [r7, #0]
 8009b04:	885b      	ldrh	r3, [r3, #2]
 8009b06:	b2db      	uxtb	r3, r3
 8009b08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b14:	b2db      	uxtb	r3, r3
 8009b16:	2b03      	cmp	r3, #3
 8009b18:	d104      	bne.n	8009b24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8009b1a:	6839      	ldr	r1, [r7, #0]
 8009b1c:	6878      	ldr	r0, [r7, #4]
 8009b1e:	f000 f9bc 	bl	8009e9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b22:	e01d      	b.n	8009b60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	7bfa      	ldrb	r2, [r7, #15]
 8009b28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8009b2c:	7bfb      	ldrb	r3, [r7, #15]
 8009b2e:	4619      	mov	r1, r3
 8009b30:	6878      	ldr	r0, [r7, #4]
 8009b32:	f000 fe1d 	bl	800a770 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fa5d 	bl	8009ff6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8009b3c:	7bfb      	ldrb	r3, [r7, #15]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d004      	beq.n	8009b4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	2202      	movs	r2, #2
 8009b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b4a:	e009      	b.n	8009b60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009b54:	e004      	b.n	8009b60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8009b56:	6839      	ldr	r1, [r7, #0]
 8009b58:	6878      	ldr	r0, [r7, #4]
 8009b5a:	f000 f99e 	bl	8009e9a <USBD_CtlError>
  }
}
 8009b5e:	bf00      	nop
 8009b60:	bf00      	nop
 8009b62:	3710      	adds	r7, #16
 8009b64:	46bd      	mov	sp, r7
 8009b66:	bd80      	pop	{r7, pc}

08009b68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8009b72:	2300      	movs	r3, #0
 8009b74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8009b76:	683b      	ldr	r3, [r7, #0]
 8009b78:	885b      	ldrh	r3, [r3, #2]
 8009b7a:	b2da      	uxtb	r2, r3
 8009b7c:	4b4e      	ldr	r3, [pc, #312]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009b7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009b80:	4b4d      	ldr	r3, [pc, #308]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009b82:	781b      	ldrb	r3, [r3, #0]
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d905      	bls.n	8009b94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009b88:	6839      	ldr	r1, [r7, #0]
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f985 	bl	8009e9a <USBD_CtlError>
    return USBD_FAIL;
 8009b90:	2303      	movs	r3, #3
 8009b92:	e08c      	b.n	8009cae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b02      	cmp	r3, #2
 8009b9e:	d002      	beq.n	8009ba6 <USBD_SetConfig+0x3e>
 8009ba0:	2b03      	cmp	r3, #3
 8009ba2:	d029      	beq.n	8009bf8 <USBD_SetConfig+0x90>
 8009ba4:	e075      	b.n	8009c92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8009ba6:	4b44      	ldr	r3, [pc, #272]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009ba8:	781b      	ldrb	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d020      	beq.n	8009bf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8009bae:	4b42      	ldr	r3, [pc, #264]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009bb0:	781b      	ldrb	r3, [r3, #0]
 8009bb2:	461a      	mov	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009bb8:	4b3f      	ldr	r3, [pc, #252]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	4619      	mov	r1, r3
 8009bbe:	6878      	ldr	r0, [r7, #4]
 8009bc0:	f7fe ffe7 	bl	8008b92 <USBD_SetClassConfig>
 8009bc4:	4603      	mov	r3, r0
 8009bc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009bc8:	7bfb      	ldrb	r3, [r7, #15]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d008      	beq.n	8009be0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8009bce:	6839      	ldr	r1, [r7, #0]
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f962 	bl	8009e9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2202      	movs	r2, #2
 8009bda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009bde:	e065      	b.n	8009cac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009be0:	6878      	ldr	r0, [r7, #4]
 8009be2:	f000 fa08 	bl	8009ff6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	2203      	movs	r2, #3
 8009bea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009bee:	e05d      	b.n	8009cac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009bf0:	6878      	ldr	r0, [r7, #4]
 8009bf2:	f000 fa00 	bl	8009ff6 <USBD_CtlSendStatus>
      break;
 8009bf6:	e059      	b.n	8009cac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009bf8:	4b2f      	ldr	r3, [pc, #188]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d112      	bne.n	8009c26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	2202      	movs	r2, #2
 8009c04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009c08:	4b2b      	ldr	r3, [pc, #172]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009c0a:	781b      	ldrb	r3, [r3, #0]
 8009c0c:	461a      	mov	r2, r3
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c12:	4b29      	ldr	r3, [pc, #164]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009c14:	781b      	ldrb	r3, [r3, #0]
 8009c16:	4619      	mov	r1, r3
 8009c18:	6878      	ldr	r0, [r7, #4]
 8009c1a:	f7fe ffd6 	bl	8008bca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8009c1e:	6878      	ldr	r0, [r7, #4]
 8009c20:	f000 f9e9 	bl	8009ff6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8009c24:	e042      	b.n	8009cac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8009c26:	4b24      	ldr	r3, [pc, #144]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009c28:	781b      	ldrb	r3, [r3, #0]
 8009c2a:	461a      	mov	r2, r3
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	685b      	ldr	r3, [r3, #4]
 8009c30:	429a      	cmp	r2, r3
 8009c32:	d02a      	beq.n	8009c8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	685b      	ldr	r3, [r3, #4]
 8009c38:	b2db      	uxtb	r3, r3
 8009c3a:	4619      	mov	r1, r3
 8009c3c:	6878      	ldr	r0, [r7, #4]
 8009c3e:	f7fe ffc4 	bl	8008bca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8009c42:	4b1d      	ldr	r3, [pc, #116]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	461a      	mov	r2, r3
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009c4c:	4b1a      	ldr	r3, [pc, #104]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009c4e:	781b      	ldrb	r3, [r3, #0]
 8009c50:	4619      	mov	r1, r3
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f7fe ff9d 	bl	8008b92 <USBD_SetClassConfig>
 8009c58:	4603      	mov	r3, r0
 8009c5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8009c5c:	7bfb      	ldrb	r3, [r7, #15]
 8009c5e:	2b00      	cmp	r3, #0
 8009c60:	d00f      	beq.n	8009c82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8009c62:	6839      	ldr	r1, [r7, #0]
 8009c64:	6878      	ldr	r0, [r7, #4]
 8009c66:	f000 f918 	bl	8009e9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	685b      	ldr	r3, [r3, #4]
 8009c6e:	b2db      	uxtb	r3, r3
 8009c70:	4619      	mov	r1, r3
 8009c72:	6878      	ldr	r0, [r7, #4]
 8009c74:	f7fe ffa9 	bl	8008bca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2202      	movs	r2, #2
 8009c7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009c80:	e014      	b.n	8009cac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8009c82:	6878      	ldr	r0, [r7, #4]
 8009c84:	f000 f9b7 	bl	8009ff6 <USBD_CtlSendStatus>
      break;
 8009c88:	e010      	b.n	8009cac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f9b3 	bl	8009ff6 <USBD_CtlSendStatus>
      break;
 8009c90:	e00c      	b.n	8009cac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8009c92:	6839      	ldr	r1, [r7, #0]
 8009c94:	6878      	ldr	r0, [r7, #4]
 8009c96:	f000 f900 	bl	8009e9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8009c9a:	4b07      	ldr	r3, [pc, #28]	; (8009cb8 <USBD_SetConfig+0x150>)
 8009c9c:	781b      	ldrb	r3, [r3, #0]
 8009c9e:	4619      	mov	r1, r3
 8009ca0:	6878      	ldr	r0, [r7, #4]
 8009ca2:	f7fe ff92 	bl	8008bca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009ca6:	2303      	movs	r3, #3
 8009ca8:	73fb      	strb	r3, [r7, #15]
      break;
 8009caa:	bf00      	nop
  }

  return ret;
 8009cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cae:	4618      	mov	r0, r3
 8009cb0:	3710      	adds	r7, #16
 8009cb2:	46bd      	mov	sp, r7
 8009cb4:	bd80      	pop	{r7, pc}
 8009cb6:	bf00      	nop
 8009cb8:	20000554 	.word	0x20000554

08009cbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b082      	sub	sp, #8
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	6078      	str	r0, [r7, #4]
 8009cc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009cc6:	683b      	ldr	r3, [r7, #0]
 8009cc8:	88db      	ldrh	r3, [r3, #6]
 8009cca:	2b01      	cmp	r3, #1
 8009ccc:	d004      	beq.n	8009cd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8009cce:	6839      	ldr	r1, [r7, #0]
 8009cd0:	6878      	ldr	r0, [r7, #4]
 8009cd2:	f000 f8e2 	bl	8009e9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009cd6:	e023      	b.n	8009d20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	dc02      	bgt.n	8009cea <USBD_GetConfig+0x2e>
 8009ce4:	2b00      	cmp	r3, #0
 8009ce6:	dc03      	bgt.n	8009cf0 <USBD_GetConfig+0x34>
 8009ce8:	e015      	b.n	8009d16 <USBD_GetConfig+0x5a>
 8009cea:	2b03      	cmp	r3, #3
 8009cec:	d00b      	beq.n	8009d06 <USBD_GetConfig+0x4a>
 8009cee:	e012      	b.n	8009d16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	3308      	adds	r3, #8
 8009cfa:	2201      	movs	r2, #1
 8009cfc:	4619      	mov	r1, r3
 8009cfe:	6878      	ldr	r0, [r7, #4]
 8009d00:	f000 f93c 	bl	8009f7c <USBD_CtlSendData>
        break;
 8009d04:	e00c      	b.n	8009d20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	2201      	movs	r2, #1
 8009d0c:	4619      	mov	r1, r3
 8009d0e:	6878      	ldr	r0, [r7, #4]
 8009d10:	f000 f934 	bl	8009f7c <USBD_CtlSendData>
        break;
 8009d14:	e004      	b.n	8009d20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8009d16:	6839      	ldr	r1, [r7, #0]
 8009d18:	6878      	ldr	r0, [r7, #4]
 8009d1a:	f000 f8be 	bl	8009e9a <USBD_CtlError>
        break;
 8009d1e:	bf00      	nop
}
 8009d20:	bf00      	nop
 8009d22:	3708      	adds	r7, #8
 8009d24:	46bd      	mov	sp, r7
 8009d26:	bd80      	pop	{r7, pc}

08009d28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b082      	sub	sp, #8
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009d38:	b2db      	uxtb	r3, r3
 8009d3a:	3b01      	subs	r3, #1
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d81e      	bhi.n	8009d7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	88db      	ldrh	r3, [r3, #6]
 8009d44:	2b02      	cmp	r3, #2
 8009d46:	d004      	beq.n	8009d52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8009d48:	6839      	ldr	r1, [r7, #0]
 8009d4a:	6878      	ldr	r0, [r7, #4]
 8009d4c:	f000 f8a5 	bl	8009e9a <USBD_CtlError>
        break;
 8009d50:	e01a      	b.n	8009d88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	2201      	movs	r2, #1
 8009d56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d005      	beq.n	8009d6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8009d62:	687b      	ldr	r3, [r7, #4]
 8009d64:	68db      	ldr	r3, [r3, #12]
 8009d66:	f043 0202 	orr.w	r2, r3, #2
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	330c      	adds	r3, #12
 8009d72:	2202      	movs	r2, #2
 8009d74:	4619      	mov	r1, r3
 8009d76:	6878      	ldr	r0, [r7, #4]
 8009d78:	f000 f900 	bl	8009f7c <USBD_CtlSendData>
      break;
 8009d7c:	e004      	b.n	8009d88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8009d7e:	6839      	ldr	r1, [r7, #0]
 8009d80:	6878      	ldr	r0, [r7, #4]
 8009d82:	f000 f88a 	bl	8009e9a <USBD_CtlError>
      break;
 8009d86:	bf00      	nop
  }
}
 8009d88:	bf00      	nop
 8009d8a:	3708      	adds	r7, #8
 8009d8c:	46bd      	mov	sp, r7
 8009d8e:	bd80      	pop	{r7, pc}

08009d90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009d9a:	683b      	ldr	r3, [r7, #0]
 8009d9c:	885b      	ldrh	r3, [r3, #2]
 8009d9e:	2b01      	cmp	r3, #1
 8009da0:	d107      	bne.n	8009db2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	2201      	movs	r2, #1
 8009da6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f923 	bl	8009ff6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8009db0:	e013      	b.n	8009dda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8009db2:	683b      	ldr	r3, [r7, #0]
 8009db4:	885b      	ldrh	r3, [r3, #2]
 8009db6:	2b02      	cmp	r3, #2
 8009db8:	d10b      	bne.n	8009dd2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8009dba:	683b      	ldr	r3, [r7, #0]
 8009dbc:	889b      	ldrh	r3, [r3, #4]
 8009dbe:	0a1b      	lsrs	r3, r3, #8
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	b2da      	uxtb	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8009dca:	6878      	ldr	r0, [r7, #4]
 8009dcc:	f000 f913 	bl	8009ff6 <USBD_CtlSendStatus>
}
 8009dd0:	e003      	b.n	8009dda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8009dd2:	6839      	ldr	r1, [r7, #0]
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f860 	bl	8009e9a <USBD_CtlError>
}
 8009dda:	bf00      	nop
 8009ddc:	3708      	adds	r7, #8
 8009dde:	46bd      	mov	sp, r7
 8009de0:	bd80      	pop	{r7, pc}

08009de2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009de2:	b580      	push	{r7, lr}
 8009de4:	b082      	sub	sp, #8
 8009de6:	af00      	add	r7, sp, #0
 8009de8:	6078      	str	r0, [r7, #4]
 8009dea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009dec:	687b      	ldr	r3, [r7, #4]
 8009dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009df2:	b2db      	uxtb	r3, r3
 8009df4:	3b01      	subs	r3, #1
 8009df6:	2b02      	cmp	r3, #2
 8009df8:	d80b      	bhi.n	8009e12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009dfa:	683b      	ldr	r3, [r7, #0]
 8009dfc:	885b      	ldrh	r3, [r3, #2]
 8009dfe:	2b01      	cmp	r3, #1
 8009e00:	d10c      	bne.n	8009e1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009e0a:	6878      	ldr	r0, [r7, #4]
 8009e0c:	f000 f8f3 	bl	8009ff6 <USBD_CtlSendStatus>
      }
      break;
 8009e10:	e004      	b.n	8009e1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009e12:	6839      	ldr	r1, [r7, #0]
 8009e14:	6878      	ldr	r0, [r7, #4]
 8009e16:	f000 f840 	bl	8009e9a <USBD_CtlError>
      break;
 8009e1a:	e000      	b.n	8009e1e <USBD_ClrFeature+0x3c>
      break;
 8009e1c:	bf00      	nop
  }
}
 8009e1e:	bf00      	nop
 8009e20:	3708      	adds	r7, #8
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b084      	sub	sp, #16
 8009e2a:	af00      	add	r7, sp, #0
 8009e2c:	6078      	str	r0, [r7, #4]
 8009e2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	781a      	ldrb	r2, [r3, #0]
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	3301      	adds	r3, #1
 8009e40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	781a      	ldrb	r2, [r3, #0]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	3301      	adds	r3, #1
 8009e4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8009e50:	68f8      	ldr	r0, [r7, #12]
 8009e52:	f7ff fa41 	bl	80092d8 <SWAPBYTE>
 8009e56:	4603      	mov	r3, r0
 8009e58:	461a      	mov	r2, r3
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	3301      	adds	r3, #1
 8009e62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	3301      	adds	r3, #1
 8009e68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8009e6a:	68f8      	ldr	r0, [r7, #12]
 8009e6c:	f7ff fa34 	bl	80092d8 <SWAPBYTE>
 8009e70:	4603      	mov	r3, r0
 8009e72:	461a      	mov	r2, r3
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	3301      	adds	r3, #1
 8009e82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8009e84:	68f8      	ldr	r0, [r7, #12]
 8009e86:	f7ff fa27 	bl	80092d8 <SWAPBYTE>
 8009e8a:	4603      	mov	r3, r0
 8009e8c:	461a      	mov	r2, r3
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	80da      	strh	r2, [r3, #6]
}
 8009e92:	bf00      	nop
 8009e94:	3710      	adds	r7, #16
 8009e96:	46bd      	mov	sp, r7
 8009e98:	bd80      	pop	{r7, pc}

08009e9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009e9a:	b580      	push	{r7, lr}
 8009e9c:	b082      	sub	sp, #8
 8009e9e:	af00      	add	r7, sp, #0
 8009ea0:	6078      	str	r0, [r7, #4]
 8009ea2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8009ea4:	2180      	movs	r1, #128	; 0x80
 8009ea6:	6878      	ldr	r0, [r7, #4]
 8009ea8:	f000 fbf8 	bl	800a69c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009eac:	2100      	movs	r1, #0
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f000 fbf4 	bl	800a69c <USBD_LL_StallEP>
}
 8009eb4:	bf00      	nop
 8009eb6:	3708      	adds	r7, #8
 8009eb8:	46bd      	mov	sp, r7
 8009eba:	bd80      	pop	{r7, pc}

08009ebc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009ebc:	b580      	push	{r7, lr}
 8009ebe:	b086      	sub	sp, #24
 8009ec0:	af00      	add	r7, sp, #0
 8009ec2:	60f8      	str	r0, [r7, #12]
 8009ec4:	60b9      	str	r1, [r7, #8]
 8009ec6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8009ec8:	2300      	movs	r3, #0
 8009eca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009ecc:	68fb      	ldr	r3, [r7, #12]
 8009ece:	2b00      	cmp	r3, #0
 8009ed0:	d036      	beq.n	8009f40 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009ed2:	68fb      	ldr	r3, [r7, #12]
 8009ed4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8009ed6:	6938      	ldr	r0, [r7, #16]
 8009ed8:	f000 f836 	bl	8009f48 <USBD_GetLen>
 8009edc:	4603      	mov	r3, r0
 8009ede:	3301      	adds	r3, #1
 8009ee0:	b29b      	uxth	r3, r3
 8009ee2:	005b      	lsls	r3, r3, #1
 8009ee4:	b29a      	uxth	r2, r3
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009eea:	7dfb      	ldrb	r3, [r7, #23]
 8009eec:	68ba      	ldr	r2, [r7, #8]
 8009eee:	4413      	add	r3, r2
 8009ef0:	687a      	ldr	r2, [r7, #4]
 8009ef2:	7812      	ldrb	r2, [r2, #0]
 8009ef4:	701a      	strb	r2, [r3, #0]
  idx++;
 8009ef6:	7dfb      	ldrb	r3, [r7, #23]
 8009ef8:	3301      	adds	r3, #1
 8009efa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009efc:	7dfb      	ldrb	r3, [r7, #23]
 8009efe:	68ba      	ldr	r2, [r7, #8]
 8009f00:	4413      	add	r3, r2
 8009f02:	2203      	movs	r2, #3
 8009f04:	701a      	strb	r2, [r3, #0]
  idx++;
 8009f06:	7dfb      	ldrb	r3, [r7, #23]
 8009f08:	3301      	adds	r3, #1
 8009f0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009f0c:	e013      	b.n	8009f36 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009f0e:	7dfb      	ldrb	r3, [r7, #23]
 8009f10:	68ba      	ldr	r2, [r7, #8]
 8009f12:	4413      	add	r3, r2
 8009f14:	693a      	ldr	r2, [r7, #16]
 8009f16:	7812      	ldrb	r2, [r2, #0]
 8009f18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009f1a:	693b      	ldr	r3, [r7, #16]
 8009f1c:	3301      	adds	r3, #1
 8009f1e:	613b      	str	r3, [r7, #16]
    idx++;
 8009f20:	7dfb      	ldrb	r3, [r7, #23]
 8009f22:	3301      	adds	r3, #1
 8009f24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8009f26:	7dfb      	ldrb	r3, [r7, #23]
 8009f28:	68ba      	ldr	r2, [r7, #8]
 8009f2a:	4413      	add	r3, r2
 8009f2c:	2200      	movs	r2, #0
 8009f2e:	701a      	strb	r2, [r3, #0]
    idx++;
 8009f30:	7dfb      	ldrb	r3, [r7, #23]
 8009f32:	3301      	adds	r3, #1
 8009f34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8009f36:	693b      	ldr	r3, [r7, #16]
 8009f38:	781b      	ldrb	r3, [r3, #0]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d1e7      	bne.n	8009f0e <USBD_GetString+0x52>
 8009f3e:	e000      	b.n	8009f42 <USBD_GetString+0x86>
    return;
 8009f40:	bf00      	nop
  }
}
 8009f42:	3718      	adds	r7, #24
 8009f44:	46bd      	mov	sp, r7
 8009f46:	bd80      	pop	{r7, pc}

08009f48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8009f48:	b480      	push	{r7}
 8009f4a:	b085      	sub	sp, #20
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8009f50:	2300      	movs	r3, #0
 8009f52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8009f58:	e005      	b.n	8009f66 <USBD_GetLen+0x1e>
  {
    len++;
 8009f5a:	7bfb      	ldrb	r3, [r7, #15]
 8009f5c:	3301      	adds	r3, #1
 8009f5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8009f60:	68bb      	ldr	r3, [r7, #8]
 8009f62:	3301      	adds	r3, #1
 8009f64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	781b      	ldrb	r3, [r3, #0]
 8009f6a:	2b00      	cmp	r3, #0
 8009f6c:	d1f5      	bne.n	8009f5a <USBD_GetLen+0x12>
  }

  return len;
 8009f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009f70:	4618      	mov	r0, r3
 8009f72:	3714      	adds	r7, #20
 8009f74:	46bd      	mov	sp, r7
 8009f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7a:	4770      	bx	lr

08009f7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8009f7c:	b580      	push	{r7, lr}
 8009f7e:	b084      	sub	sp, #16
 8009f80:	af00      	add	r7, sp, #0
 8009f82:	60f8      	str	r0, [r7, #12]
 8009f84:	60b9      	str	r1, [r7, #8]
 8009f86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8009f88:	68fb      	ldr	r3, [r7, #12]
 8009f8a:	2202      	movs	r2, #2
 8009f8c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8009f96:	68fb      	ldr	r3, [r7, #12]
 8009f98:	687a      	ldr	r2, [r7, #4]
 8009f9a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	68ba      	ldr	r2, [r7, #8]
 8009fa0:	2100      	movs	r1, #0
 8009fa2:	68f8      	ldr	r0, [r7, #12]
 8009fa4:	f000 fc03 	bl	800a7ae <USBD_LL_Transmit>

  return USBD_OK;
 8009fa8:	2300      	movs	r3, #0
}
 8009faa:	4618      	mov	r0, r3
 8009fac:	3710      	adds	r7, #16
 8009fae:	46bd      	mov	sp, r7
 8009fb0:	bd80      	pop	{r7, pc}

08009fb2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009fb2:	b580      	push	{r7, lr}
 8009fb4:	b084      	sub	sp, #16
 8009fb6:	af00      	add	r7, sp, #0
 8009fb8:	60f8      	str	r0, [r7, #12]
 8009fba:	60b9      	str	r1, [r7, #8]
 8009fbc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	68ba      	ldr	r2, [r7, #8]
 8009fc2:	2100      	movs	r1, #0
 8009fc4:	68f8      	ldr	r0, [r7, #12]
 8009fc6:	f000 fbf2 	bl	800a7ae <USBD_LL_Transmit>

  return USBD_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	60f8      	str	r0, [r7, #12]
 8009fdc:	60b9      	str	r1, [r7, #8]
 8009fde:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	68ba      	ldr	r2, [r7, #8]
 8009fe4:	2100      	movs	r1, #0
 8009fe6:	68f8      	ldr	r0, [r7, #12]
 8009fe8:	f000 fc02 	bl	800a7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8009fec:	2300      	movs	r3, #0
}
 8009fee:	4618      	mov	r0, r3
 8009ff0:	3710      	adds	r7, #16
 8009ff2:	46bd      	mov	sp, r7
 8009ff4:	bd80      	pop	{r7, pc}

08009ff6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009ff6:	b580      	push	{r7, lr}
 8009ff8:	b082      	sub	sp, #8
 8009ffa:	af00      	add	r7, sp, #0
 8009ffc:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2204      	movs	r2, #4
 800a002:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800a006:	2300      	movs	r3, #0
 800a008:	2200      	movs	r2, #0
 800a00a:	2100      	movs	r1, #0
 800a00c:	6878      	ldr	r0, [r7, #4]
 800a00e:	f000 fbce 	bl	800a7ae <USBD_LL_Transmit>

  return USBD_OK;
 800a012:	2300      	movs	r3, #0
}
 800a014:	4618      	mov	r0, r3
 800a016:	3708      	adds	r7, #8
 800a018:	46bd      	mov	sp, r7
 800a01a:	bd80      	pop	{r7, pc}

0800a01c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800a01c:	b580      	push	{r7, lr}
 800a01e:	b082      	sub	sp, #8
 800a020:	af00      	add	r7, sp, #0
 800a022:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	2205      	movs	r2, #5
 800a028:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a02c:	2300      	movs	r3, #0
 800a02e:	2200      	movs	r2, #0
 800a030:	2100      	movs	r1, #0
 800a032:	6878      	ldr	r0, [r7, #4]
 800a034:	f000 fbdc 	bl	800a7f0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800a038:	2300      	movs	r3, #0
}
 800a03a:	4618      	mov	r0, r3
 800a03c:	3708      	adds	r7, #8
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
	...

0800a044 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800a048:	2200      	movs	r2, #0
 800a04a:	490e      	ldr	r1, [pc, #56]	; (800a084 <MX_USB_DEVICE_Init+0x40>)
 800a04c:	480e      	ldr	r0, [pc, #56]	; (800a088 <MX_USB_DEVICE_Init+0x44>)
 800a04e:	f7fe fd23 	bl	8008a98 <USBD_Init>
 800a052:	4603      	mov	r3, r0
 800a054:	2b00      	cmp	r3, #0
 800a056:	d001      	beq.n	800a05c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800a058:	f7f8 fbfe 	bl	8002858 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 800a05c:	490b      	ldr	r1, [pc, #44]	; (800a08c <MX_USB_DEVICE_Init+0x48>)
 800a05e:	480a      	ldr	r0, [pc, #40]	; (800a088 <MX_USB_DEVICE_Init+0x44>)
 800a060:	f7fe fd4a 	bl	8008af8 <USBD_RegisterClass>
 800a064:	4603      	mov	r3, r0
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800a06a:	f7f8 fbf5 	bl	8002858 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800a06e:	4806      	ldr	r0, [pc, #24]	; (800a088 <MX_USB_DEVICE_Init+0x44>)
 800a070:	f7fe fd78 	bl	8008b64 <USBD_Start>
 800a074:	4603      	mov	r3, r0
 800a076:	2b00      	cmp	r3, #0
 800a078:	d001      	beq.n	800a07e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800a07a:	f7f8 fbed 	bl	8002858 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800a07e:	bf00      	nop
 800a080:	bd80      	pop	{r7, pc}
 800a082:	bf00      	nop
 800a084:	200000ec 	.word	0x200000ec
 800a088:	20000558 	.word	0x20000558
 800a08c:	2000002c 	.word	0x2000002c

0800a090 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	4603      	mov	r3, r0
 800a098:	6039      	str	r1, [r7, #0]
 800a09a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	2212      	movs	r2, #18
 800a0a0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800a0a2:	4b03      	ldr	r3, [pc, #12]	; (800a0b0 <USBD_FS_DeviceDescriptor+0x20>)
}
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr
 800a0b0:	20000108 	.word	0x20000108

0800a0b4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0b4:	b480      	push	{r7}
 800a0b6:	b083      	sub	sp, #12
 800a0b8:	af00      	add	r7, sp, #0
 800a0ba:	4603      	mov	r3, r0
 800a0bc:	6039      	str	r1, [r7, #0]
 800a0be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	2204      	movs	r2, #4
 800a0c4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800a0c6:	4b03      	ldr	r3, [pc, #12]	; (800a0d4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800a0c8:	4618      	mov	r0, r3
 800a0ca:	370c      	adds	r7, #12
 800a0cc:	46bd      	mov	sp, r7
 800a0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d2:	4770      	bx	lr
 800a0d4:	2000011c 	.word	0x2000011c

0800a0d8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	4603      	mov	r3, r0
 800a0e0:	6039      	str	r1, [r7, #0]
 800a0e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a0e4:	79fb      	ldrb	r3, [r7, #7]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d105      	bne.n	800a0f6 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0ea:	683a      	ldr	r2, [r7, #0]
 800a0ec:	4907      	ldr	r1, [pc, #28]	; (800a10c <USBD_FS_ProductStrDescriptor+0x34>)
 800a0ee:	4808      	ldr	r0, [pc, #32]	; (800a110 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0f0:	f7ff fee4 	bl	8009ebc <USBD_GetString>
 800a0f4:	e004      	b.n	800a100 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800a0f6:	683a      	ldr	r2, [r7, #0]
 800a0f8:	4904      	ldr	r1, [pc, #16]	; (800a10c <USBD_FS_ProductStrDescriptor+0x34>)
 800a0fa:	4805      	ldr	r0, [pc, #20]	; (800a110 <USBD_FS_ProductStrDescriptor+0x38>)
 800a0fc:	f7ff fede 	bl	8009ebc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a100:	4b02      	ldr	r3, [pc, #8]	; (800a10c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800a102:	4618      	mov	r0, r3
 800a104:	3708      	adds	r7, #8
 800a106:	46bd      	mov	sp, r7
 800a108:	bd80      	pop	{r7, pc}
 800a10a:	bf00      	nop
 800a10c:	20000834 	.word	0x20000834
 800a110:	0800b4cc 	.word	0x0800b4cc

0800a114 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b082      	sub	sp, #8
 800a118:	af00      	add	r7, sp, #0
 800a11a:	4603      	mov	r3, r0
 800a11c:	6039      	str	r1, [r7, #0]
 800a11e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	4904      	ldr	r1, [pc, #16]	; (800a134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800a124:	4804      	ldr	r0, [pc, #16]	; (800a138 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800a126:	f7ff fec9 	bl	8009ebc <USBD_GetString>
  return USBD_StrDesc;
 800a12a:	4b02      	ldr	r3, [pc, #8]	; (800a134 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800a12c:	4618      	mov	r0, r3
 800a12e:	3708      	adds	r7, #8
 800a130:	46bd      	mov	sp, r7
 800a132:	bd80      	pop	{r7, pc}
 800a134:	20000834 	.word	0x20000834
 800a138:	0800b4e4 	.word	0x0800b4e4

0800a13c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a13c:	b580      	push	{r7, lr}
 800a13e:	b082      	sub	sp, #8
 800a140:	af00      	add	r7, sp, #0
 800a142:	4603      	mov	r3, r0
 800a144:	6039      	str	r1, [r7, #0]
 800a146:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800a148:	683b      	ldr	r3, [r7, #0]
 800a14a:	221a      	movs	r2, #26
 800a14c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800a14e:	f000 f843 	bl	800a1d8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800a152:	4b02      	ldr	r3, [pc, #8]	; (800a15c <USBD_FS_SerialStrDescriptor+0x20>)
}
 800a154:	4618      	mov	r0, r3
 800a156:	3708      	adds	r7, #8
 800a158:	46bd      	mov	sp, r7
 800a15a:	bd80      	pop	{r7, pc}
 800a15c:	20000120 	.word	0x20000120

0800a160 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a160:	b580      	push	{r7, lr}
 800a162:	b082      	sub	sp, #8
 800a164:	af00      	add	r7, sp, #0
 800a166:	4603      	mov	r3, r0
 800a168:	6039      	str	r1, [r7, #0]
 800a16a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800a16c:	79fb      	ldrb	r3, [r7, #7]
 800a16e:	2b00      	cmp	r3, #0
 800a170:	d105      	bne.n	800a17e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a172:	683a      	ldr	r2, [r7, #0]
 800a174:	4907      	ldr	r1, [pc, #28]	; (800a194 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a176:	4808      	ldr	r0, [pc, #32]	; (800a198 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a178:	f7ff fea0 	bl	8009ebc <USBD_GetString>
 800a17c:	e004      	b.n	800a188 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800a17e:	683a      	ldr	r2, [r7, #0]
 800a180:	4904      	ldr	r1, [pc, #16]	; (800a194 <USBD_FS_ConfigStrDescriptor+0x34>)
 800a182:	4805      	ldr	r0, [pc, #20]	; (800a198 <USBD_FS_ConfigStrDescriptor+0x38>)
 800a184:	f7ff fe9a 	bl	8009ebc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a188:	4b02      	ldr	r3, [pc, #8]	; (800a194 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3708      	adds	r7, #8
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	20000834 	.word	0x20000834
 800a198:	0800b4f8 	.word	0x0800b4f8

0800a19c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800a19c:	b580      	push	{r7, lr}
 800a19e:	b082      	sub	sp, #8
 800a1a0:	af00      	add	r7, sp, #0
 800a1a2:	4603      	mov	r3, r0
 800a1a4:	6039      	str	r1, [r7, #0]
 800a1a6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800a1a8:	79fb      	ldrb	r3, [r7, #7]
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d105      	bne.n	800a1ba <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1ae:	683a      	ldr	r2, [r7, #0]
 800a1b0:	4907      	ldr	r1, [pc, #28]	; (800a1d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1b2:	4808      	ldr	r0, [pc, #32]	; (800a1d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1b4:	f7ff fe82 	bl	8009ebc <USBD_GetString>
 800a1b8:	e004      	b.n	800a1c4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800a1ba:	683a      	ldr	r2, [r7, #0]
 800a1bc:	4904      	ldr	r1, [pc, #16]	; (800a1d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800a1be:	4805      	ldr	r0, [pc, #20]	; (800a1d4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800a1c0:	f7ff fe7c 	bl	8009ebc <USBD_GetString>
  }
  return USBD_StrDesc;
 800a1c4:	4b02      	ldr	r3, [pc, #8]	; (800a1d0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800a1c6:	4618      	mov	r0, r3
 800a1c8:	3708      	adds	r7, #8
 800a1ca:	46bd      	mov	sp, r7
 800a1cc:	bd80      	pop	{r7, pc}
 800a1ce:	bf00      	nop
 800a1d0:	20000834 	.word	0x20000834
 800a1d4:	0800b504 	.word	0x0800b504

0800a1d8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	b084      	sub	sp, #16
 800a1dc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800a1de:	4b0f      	ldr	r3, [pc, #60]	; (800a21c <Get_SerialNum+0x44>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800a1e4:	4b0e      	ldr	r3, [pc, #56]	; (800a220 <Get_SerialNum+0x48>)
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800a1ea:	4b0e      	ldr	r3, [pc, #56]	; (800a224 <Get_SerialNum+0x4c>)
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800a1f0:	68fa      	ldr	r2, [r7, #12]
 800a1f2:	687b      	ldr	r3, [r7, #4]
 800a1f4:	4413      	add	r3, r2
 800a1f6:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d009      	beq.n	800a212 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800a1fe:	2208      	movs	r2, #8
 800a200:	4909      	ldr	r1, [pc, #36]	; (800a228 <Get_SerialNum+0x50>)
 800a202:	68f8      	ldr	r0, [r7, #12]
 800a204:	f000 f814 	bl	800a230 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800a208:	2204      	movs	r2, #4
 800a20a:	4908      	ldr	r1, [pc, #32]	; (800a22c <Get_SerialNum+0x54>)
 800a20c:	68b8      	ldr	r0, [r7, #8]
 800a20e:	f000 f80f 	bl	800a230 <IntToUnicode>
  }
}
 800a212:	bf00      	nop
 800a214:	3710      	adds	r7, #16
 800a216:	46bd      	mov	sp, r7
 800a218:	bd80      	pop	{r7, pc}
 800a21a:	bf00      	nop
 800a21c:	1fff7a10 	.word	0x1fff7a10
 800a220:	1fff7a14 	.word	0x1fff7a14
 800a224:	1fff7a18 	.word	0x1fff7a18
 800a228:	20000122 	.word	0x20000122
 800a22c:	20000132 	.word	0x20000132

0800a230 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800a230:	b480      	push	{r7}
 800a232:	b087      	sub	sp, #28
 800a234:	af00      	add	r7, sp, #0
 800a236:	60f8      	str	r0, [r7, #12]
 800a238:	60b9      	str	r1, [r7, #8]
 800a23a:	4613      	mov	r3, r2
 800a23c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800a23e:	2300      	movs	r3, #0
 800a240:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800a242:	2300      	movs	r3, #0
 800a244:	75fb      	strb	r3, [r7, #23]
 800a246:	e027      	b.n	800a298 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	0f1b      	lsrs	r3, r3, #28
 800a24c:	2b09      	cmp	r3, #9
 800a24e:	d80b      	bhi.n	800a268 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	0f1b      	lsrs	r3, r3, #28
 800a254:	b2da      	uxtb	r2, r3
 800a256:	7dfb      	ldrb	r3, [r7, #23]
 800a258:	005b      	lsls	r3, r3, #1
 800a25a:	4619      	mov	r1, r3
 800a25c:	68bb      	ldr	r3, [r7, #8]
 800a25e:	440b      	add	r3, r1
 800a260:	3230      	adds	r2, #48	; 0x30
 800a262:	b2d2      	uxtb	r2, r2
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	e00a      	b.n	800a27e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	0f1b      	lsrs	r3, r3, #28
 800a26c:	b2da      	uxtb	r2, r3
 800a26e:	7dfb      	ldrb	r3, [r7, #23]
 800a270:	005b      	lsls	r3, r3, #1
 800a272:	4619      	mov	r1, r3
 800a274:	68bb      	ldr	r3, [r7, #8]
 800a276:	440b      	add	r3, r1
 800a278:	3237      	adds	r2, #55	; 0x37
 800a27a:	b2d2      	uxtb	r2, r2
 800a27c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	011b      	lsls	r3, r3, #4
 800a282:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800a284:	7dfb      	ldrb	r3, [r7, #23]
 800a286:	005b      	lsls	r3, r3, #1
 800a288:	3301      	adds	r3, #1
 800a28a:	68ba      	ldr	r2, [r7, #8]
 800a28c:	4413      	add	r3, r2
 800a28e:	2200      	movs	r2, #0
 800a290:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800a292:	7dfb      	ldrb	r3, [r7, #23]
 800a294:	3301      	adds	r3, #1
 800a296:	75fb      	strb	r3, [r7, #23]
 800a298:	7dfa      	ldrb	r2, [r7, #23]
 800a29a:	79fb      	ldrb	r3, [r7, #7]
 800a29c:	429a      	cmp	r2, r3
 800a29e:	d3d3      	bcc.n	800a248 <IntToUnicode+0x18>
  }
}
 800a2a0:	bf00      	nop
 800a2a2:	bf00      	nop
 800a2a4:	371c      	adds	r7, #28
 800a2a6:	46bd      	mov	sp, r7
 800a2a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ac:	4770      	bx	lr
	...

0800a2b0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b08a      	sub	sp, #40	; 0x28
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a2b8:	f107 0314 	add.w	r3, r7, #20
 800a2bc:	2200      	movs	r2, #0
 800a2be:	601a      	str	r2, [r3, #0]
 800a2c0:	605a      	str	r2, [r3, #4]
 800a2c2:	609a      	str	r2, [r3, #8]
 800a2c4:	60da      	str	r2, [r3, #12]
 800a2c6:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	681b      	ldr	r3, [r3, #0]
 800a2cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a2d0:	d147      	bne.n	800a362 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a2d2:	2300      	movs	r3, #0
 800a2d4:	613b      	str	r3, [r7, #16]
 800a2d6:	4b25      	ldr	r3, [pc, #148]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a2d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2da:	4a24      	ldr	r2, [pc, #144]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a2dc:	f043 0301 	orr.w	r3, r3, #1
 800a2e0:	6313      	str	r3, [r2, #48]	; 0x30
 800a2e2:	4b22      	ldr	r3, [pc, #136]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a2e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2e6:	f003 0301 	and.w	r3, r3, #1
 800a2ea:	613b      	str	r3, [r7, #16]
 800a2ec:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a2ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a2f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a2fc:	f107 0314 	add.w	r3, r7, #20
 800a300:	4619      	mov	r1, r3
 800a302:	481b      	ldr	r0, [pc, #108]	; (800a370 <HAL_PCD_MspInit+0xc0>)
 800a304:	f7f8 fe50 	bl	8002fa8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a308:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800a30c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a30e:	2302      	movs	r3, #2
 800a310:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a312:	2300      	movs	r3, #0
 800a314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a316:	2303      	movs	r3, #3
 800a318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a31a:	230a      	movs	r3, #10
 800a31c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a31e:	f107 0314 	add.w	r3, r7, #20
 800a322:	4619      	mov	r1, r3
 800a324:	4812      	ldr	r0, [pc, #72]	; (800a370 <HAL_PCD_MspInit+0xc0>)
 800a326:	f7f8 fe3f 	bl	8002fa8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a32a:	4b10      	ldr	r3, [pc, #64]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a32c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a32e:	4a0f      	ldr	r2, [pc, #60]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a330:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a334:	6353      	str	r3, [r2, #52]	; 0x34
 800a336:	2300      	movs	r3, #0
 800a338:	60fb      	str	r3, [r7, #12]
 800a33a:	4b0c      	ldr	r3, [pc, #48]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a33c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a33e:	4a0b      	ldr	r2, [pc, #44]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a340:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a344:	6453      	str	r3, [r2, #68]	; 0x44
 800a346:	4b09      	ldr	r3, [pc, #36]	; (800a36c <HAL_PCD_MspInit+0xbc>)
 800a348:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a34a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a34e:	60fb      	str	r3, [r7, #12]
 800a350:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a352:	2200      	movs	r2, #0
 800a354:	2100      	movs	r1, #0
 800a356:	2043      	movs	r0, #67	; 0x43
 800a358:	f7f8 fdef 	bl	8002f3a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a35c:	2043      	movs	r0, #67	; 0x43
 800a35e:	f7f8 fe08 	bl	8002f72 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a362:	bf00      	nop
 800a364:	3728      	adds	r7, #40	; 0x28
 800a366:	46bd      	mov	sp, r7
 800a368:	bd80      	pop	{r7, pc}
 800a36a:	bf00      	nop
 800a36c:	40023800 	.word	0x40023800
 800a370:	40020000 	.word	0x40020000

0800a374 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a374:	b580      	push	{r7, lr}
 800a376:	b082      	sub	sp, #8
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800a388:	4619      	mov	r1, r3
 800a38a:	4610      	mov	r0, r2
 800a38c:	f7fe fc37 	bl	8008bfe <USBD_LL_SetupStage>
}
 800a390:	bf00      	nop
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a398:	b580      	push	{r7, lr}
 800a39a:	b082      	sub	sp, #8
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
 800a3a0:	460b      	mov	r3, r1
 800a3a2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a3aa:	78fa      	ldrb	r2, [r7, #3]
 800a3ac:	6879      	ldr	r1, [r7, #4]
 800a3ae:	4613      	mov	r3, r2
 800a3b0:	00db      	lsls	r3, r3, #3
 800a3b2:	4413      	add	r3, r2
 800a3b4:	009b      	lsls	r3, r3, #2
 800a3b6:	440b      	add	r3, r1
 800a3b8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800a3bc:	681a      	ldr	r2, [r3, #0]
 800a3be:	78fb      	ldrb	r3, [r7, #3]
 800a3c0:	4619      	mov	r1, r3
 800a3c2:	f7fe fc71 	bl	8008ca8 <USBD_LL_DataOutStage>
}
 800a3c6:	bf00      	nop
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b082      	sub	sp, #8
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
 800a3d6:	460b      	mov	r3, r1
 800a3d8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800a3e0:	78fa      	ldrb	r2, [r7, #3]
 800a3e2:	6879      	ldr	r1, [r7, #4]
 800a3e4:	4613      	mov	r3, r2
 800a3e6:	00db      	lsls	r3, r3, #3
 800a3e8:	4413      	add	r3, r2
 800a3ea:	009b      	lsls	r3, r3, #2
 800a3ec:	440b      	add	r3, r1
 800a3ee:	334c      	adds	r3, #76	; 0x4c
 800a3f0:	681a      	ldr	r2, [r3, #0]
 800a3f2:	78fb      	ldrb	r3, [r7, #3]
 800a3f4:	4619      	mov	r1, r3
 800a3f6:	f7fe fd0a 	bl	8008e0e <USBD_LL_DataInStage>
}
 800a3fa:	bf00      	nop
 800a3fc:	3708      	adds	r7, #8
 800a3fe:	46bd      	mov	sp, r7
 800a400:	bd80      	pop	{r7, pc}

0800a402 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a402:	b580      	push	{r7, lr}
 800a404:	b082      	sub	sp, #8
 800a406:	af00      	add	r7, sp, #0
 800a408:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a410:	4618      	mov	r0, r3
 800a412:	f7fe fe3e 	bl	8009092 <USBD_LL_SOF>
}
 800a416:	bf00      	nop
 800a418:	3708      	adds	r7, #8
 800a41a:	46bd      	mov	sp, r7
 800a41c:	bd80      	pop	{r7, pc}

0800a41e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a41e:	b580      	push	{r7, lr}
 800a420:	b084      	sub	sp, #16
 800a422:	af00      	add	r7, sp, #0
 800a424:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800a426:	2301      	movs	r3, #1
 800a428:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	68db      	ldr	r3, [r3, #12]
 800a42e:	2b02      	cmp	r3, #2
 800a430:	d001      	beq.n	800a436 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800a432:	f7f8 fa11 	bl	8002858 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a43c:	7bfa      	ldrb	r2, [r7, #15]
 800a43e:	4611      	mov	r1, r2
 800a440:	4618      	mov	r0, r3
 800a442:	f7fe fde8 	bl	8009016 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a44c:	4618      	mov	r0, r3
 800a44e:	f7fe fd90 	bl	8008f72 <USBD_LL_Reset>
}
 800a452:	bf00      	nop
 800a454:	3710      	adds	r7, #16
 800a456:	46bd      	mov	sp, r7
 800a458:	bd80      	pop	{r7, pc}
	...

0800a45c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a45c:	b580      	push	{r7, lr}
 800a45e:	b082      	sub	sp, #8
 800a460:	af00      	add	r7, sp, #0
 800a462:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a46a:	4618      	mov	r0, r3
 800a46c:	f7fe fde3 	bl	8009036 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	681b      	ldr	r3, [r3, #0]
 800a474:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	687a      	ldr	r2, [r7, #4]
 800a47c:	6812      	ldr	r2, [r2, #0]
 800a47e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800a482:	f043 0301 	orr.w	r3, r3, #1
 800a486:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6a1b      	ldr	r3, [r3, #32]
 800a48c:	2b00      	cmp	r3, #0
 800a48e:	d005      	beq.n	800a49c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a490:	4b04      	ldr	r3, [pc, #16]	; (800a4a4 <HAL_PCD_SuspendCallback+0x48>)
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	4a03      	ldr	r2, [pc, #12]	; (800a4a4 <HAL_PCD_SuspendCallback+0x48>)
 800a496:	f043 0306 	orr.w	r3, r3, #6
 800a49a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}
 800a4a4:	e000ed00 	.word	0xe000ed00

0800a4a8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4a8:	b580      	push	{r7, lr}
 800a4aa:	b082      	sub	sp, #8
 800a4ac:	af00      	add	r7, sp, #0
 800a4ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4b6:	4618      	mov	r0, r3
 800a4b8:	f7fe fdd3 	bl	8009062 <USBD_LL_Resume>
}
 800a4bc:	bf00      	nop
 800a4be:	3708      	adds	r7, #8
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b082      	sub	sp, #8
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	6078      	str	r0, [r7, #4]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4d6:	78fa      	ldrb	r2, [r7, #3]
 800a4d8:	4611      	mov	r1, r2
 800a4da:	4618      	mov	r0, r3
 800a4dc:	f7fe fe2b 	bl	8009136 <USBD_LL_IsoOUTIncomplete>
}
 800a4e0:	bf00      	nop
 800a4e2:	3708      	adds	r7, #8
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	bd80      	pop	{r7, pc}

0800a4e8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a4e8:	b580      	push	{r7, lr}
 800a4ea:	b082      	sub	sp, #8
 800a4ec:	af00      	add	r7, sp, #0
 800a4ee:	6078      	str	r0, [r7, #4]
 800a4f0:	460b      	mov	r3, r1
 800a4f2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a4fa:	78fa      	ldrb	r2, [r7, #3]
 800a4fc:	4611      	mov	r1, r2
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7fe fde7 	bl	80090d2 <USBD_LL_IsoINIncomplete>
}
 800a504:	bf00      	nop
 800a506:	3708      	adds	r7, #8
 800a508:	46bd      	mov	sp, r7
 800a50a:	bd80      	pop	{r7, pc}

0800a50c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a50c:	b580      	push	{r7, lr}
 800a50e:	b082      	sub	sp, #8
 800a510:	af00      	add	r7, sp, #0
 800a512:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a51a:	4618      	mov	r0, r3
 800a51c:	f7fe fe3d 	bl	800919a <USBD_LL_DevConnected>
}
 800a520:	bf00      	nop
 800a522:	3708      	adds	r7, #8
 800a524:	46bd      	mov	sp, r7
 800a526:	bd80      	pop	{r7, pc}

0800a528 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b082      	sub	sp, #8
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800a536:	4618      	mov	r0, r3
 800a538:	f7fe fe3a 	bl	80091b0 <USBD_LL_DevDisconnected>
}
 800a53c:	bf00      	nop
 800a53e:	3708      	adds	r7, #8
 800a540:	46bd      	mov	sp, r7
 800a542:	bd80      	pop	{r7, pc}

0800a544 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800a544:	b580      	push	{r7, lr}
 800a546:	b082      	sub	sp, #8
 800a548:	af00      	add	r7, sp, #0
 800a54a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	781b      	ldrb	r3, [r3, #0]
 800a550:	2b00      	cmp	r3, #0
 800a552:	d13c      	bne.n	800a5ce <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800a554:	4a20      	ldr	r2, [pc, #128]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	4a1e      	ldr	r2, [pc, #120]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a560:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a564:	4b1c      	ldr	r3, [pc, #112]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a566:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800a56a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800a56c:	4b1a      	ldr	r3, [pc, #104]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a56e:	2204      	movs	r2, #4
 800a570:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800a572:	4b19      	ldr	r3, [pc, #100]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a574:	2202      	movs	r2, #2
 800a576:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a578:	4b17      	ldr	r3, [pc, #92]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800a57e:	4b16      	ldr	r3, [pc, #88]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a580:	2202      	movs	r2, #2
 800a582:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a584:	4b14      	ldr	r3, [pc, #80]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a586:	2200      	movs	r2, #0
 800a588:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800a58a:	4b13      	ldr	r3, [pc, #76]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a58c:	2200      	movs	r2, #0
 800a58e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800a590:	4b11      	ldr	r3, [pc, #68]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a592:	2200      	movs	r2, #0
 800a594:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800a596:	4b10      	ldr	r3, [pc, #64]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a598:	2201      	movs	r2, #1
 800a59a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800a59c:	4b0e      	ldr	r3, [pc, #56]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a59e:	2200      	movs	r2, #0
 800a5a0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800a5a2:	480d      	ldr	r0, [pc, #52]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a5a4:	f7f9 fcbe 	bl	8003f24 <HAL_PCD_Init>
 800a5a8:	4603      	mov	r3, r0
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d001      	beq.n	800a5b2 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800a5ae:	f7f8 f953 	bl	8002858 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800a5b2:	2180      	movs	r1, #128	; 0x80
 800a5b4:	4808      	ldr	r0, [pc, #32]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a5b6:	f7fa fefe 	bl	80053b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800a5ba:	2240      	movs	r2, #64	; 0x40
 800a5bc:	2100      	movs	r1, #0
 800a5be:	4806      	ldr	r0, [pc, #24]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a5c0:	f7fa feb2 	bl	8005328 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800a5c4:	2280      	movs	r2, #128	; 0x80
 800a5c6:	2101      	movs	r1, #1
 800a5c8:	4803      	ldr	r0, [pc, #12]	; (800a5d8 <USBD_LL_Init+0x94>)
 800a5ca:	f7fa fead 	bl	8005328 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800a5ce:	2300      	movs	r3, #0
}
 800a5d0:	4618      	mov	r0, r3
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}
 800a5d8:	20000a34 	.word	0x20000a34

0800a5dc <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800a5dc:	b580      	push	{r7, lr}
 800a5de:	b084      	sub	sp, #16
 800a5e0:	af00      	add	r7, sp, #0
 800a5e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a5e8:	2300      	movs	r3, #0
 800a5ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f7f9 fdb3 	bl	800415e <HAL_PCD_Start>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a5fc:	7bfb      	ldrb	r3, [r7, #15]
 800a5fe:	4618      	mov	r0, r3
 800a600:	f000 f930 	bl	800a864 <USBD_Get_USB_Status>
 800a604:	4603      	mov	r3, r0
 800a606:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a608:	7bbb      	ldrb	r3, [r7, #14]
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}

0800a612 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800a612:	b580      	push	{r7, lr}
 800a614:	b084      	sub	sp, #16
 800a616:	af00      	add	r7, sp, #0
 800a618:	6078      	str	r0, [r7, #4]
 800a61a:	4608      	mov	r0, r1
 800a61c:	4611      	mov	r1, r2
 800a61e:	461a      	mov	r2, r3
 800a620:	4603      	mov	r3, r0
 800a622:	70fb      	strb	r3, [r7, #3]
 800a624:	460b      	mov	r3, r1
 800a626:	70bb      	strb	r3, [r7, #2]
 800a628:	4613      	mov	r3, r2
 800a62a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a62c:	2300      	movs	r3, #0
 800a62e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a630:	2300      	movs	r3, #0
 800a632:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a63a:	78bb      	ldrb	r3, [r7, #2]
 800a63c:	883a      	ldrh	r2, [r7, #0]
 800a63e:	78f9      	ldrb	r1, [r7, #3]
 800a640:	f7fa fa84 	bl	8004b4c <HAL_PCD_EP_Open>
 800a644:	4603      	mov	r3, r0
 800a646:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a648:	7bfb      	ldrb	r3, [r7, #15]
 800a64a:	4618      	mov	r0, r3
 800a64c:	f000 f90a 	bl	800a864 <USBD_Get_USB_Status>
 800a650:	4603      	mov	r3, r0
 800a652:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a654:	7bbb      	ldrb	r3, [r7, #14]
}
 800a656:	4618      	mov	r0, r3
 800a658:	3710      	adds	r7, #16
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}

0800a65e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a65e:	b580      	push	{r7, lr}
 800a660:	b084      	sub	sp, #16
 800a662:	af00      	add	r7, sp, #0
 800a664:	6078      	str	r0, [r7, #4]
 800a666:	460b      	mov	r3, r1
 800a668:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a66a:	2300      	movs	r3, #0
 800a66c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a66e:	2300      	movs	r3, #0
 800a670:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a678:	78fa      	ldrb	r2, [r7, #3]
 800a67a:	4611      	mov	r1, r2
 800a67c:	4618      	mov	r0, r3
 800a67e:	f7fa facd 	bl	8004c1c <HAL_PCD_EP_Close>
 800a682:	4603      	mov	r3, r0
 800a684:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a686:	7bfb      	ldrb	r3, [r7, #15]
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 f8eb 	bl	800a864 <USBD_Get_USB_Status>
 800a68e:	4603      	mov	r3, r0
 800a690:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a692:	7bbb      	ldrb	r3, [r7, #14]
}
 800a694:	4618      	mov	r0, r3
 800a696:	3710      	adds	r7, #16
 800a698:	46bd      	mov	sp, r7
 800a69a:	bd80      	pop	{r7, pc}

0800a69c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a69c:	b580      	push	{r7, lr}
 800a69e:	b084      	sub	sp, #16
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
 800a6a4:	460b      	mov	r3, r1
 800a6a6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6a8:	2300      	movs	r3, #0
 800a6aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ac:	2300      	movs	r3, #0
 800a6ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6b6:	78fa      	ldrb	r2, [r7, #3]
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	4618      	mov	r0, r3
 800a6bc:	f7fa fb8d 	bl	8004dda <HAL_PCD_EP_SetStall>
 800a6c0:	4603      	mov	r3, r0
 800a6c2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a6c4:	7bfb      	ldrb	r3, [r7, #15]
 800a6c6:	4618      	mov	r0, r3
 800a6c8:	f000 f8cc 	bl	800a864 <USBD_Get_USB_Status>
 800a6cc:	4603      	mov	r3, r0
 800a6ce:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6d0:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6d2:	4618      	mov	r0, r3
 800a6d4:	3710      	adds	r7, #16
 800a6d6:	46bd      	mov	sp, r7
 800a6d8:	bd80      	pop	{r7, pc}

0800a6da <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a6da:	b580      	push	{r7, lr}
 800a6dc:	b084      	sub	sp, #16
 800a6de:	af00      	add	r7, sp, #0
 800a6e0:	6078      	str	r0, [r7, #4]
 800a6e2:	460b      	mov	r3, r1
 800a6e4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a6ea:	2300      	movs	r3, #0
 800a6ec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a6f4:	78fa      	ldrb	r2, [r7, #3]
 800a6f6:	4611      	mov	r1, r2
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f7fa fbd2 	bl	8004ea2 <HAL_PCD_EP_ClrStall>
 800a6fe:	4603      	mov	r3, r0
 800a700:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a702:	7bfb      	ldrb	r3, [r7, #15]
 800a704:	4618      	mov	r0, r3
 800a706:	f000 f8ad 	bl	800a864 <USBD_Get_USB_Status>
 800a70a:	4603      	mov	r3, r0
 800a70c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a70e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a710:	4618      	mov	r0, r3
 800a712:	3710      	adds	r7, #16
 800a714:	46bd      	mov	sp, r7
 800a716:	bd80      	pop	{r7, pc}

0800a718 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a718:	b480      	push	{r7}
 800a71a:	b085      	sub	sp, #20
 800a71c:	af00      	add	r7, sp, #0
 800a71e:	6078      	str	r0, [r7, #4]
 800a720:	460b      	mov	r3, r1
 800a722:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a72a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a72c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a730:	2b00      	cmp	r3, #0
 800a732:	da0b      	bge.n	800a74c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a73a:	68f9      	ldr	r1, [r7, #12]
 800a73c:	4613      	mov	r3, r2
 800a73e:	00db      	lsls	r3, r3, #3
 800a740:	4413      	add	r3, r2
 800a742:	009b      	lsls	r3, r3, #2
 800a744:	440b      	add	r3, r1
 800a746:	333e      	adds	r3, #62	; 0x3e
 800a748:	781b      	ldrb	r3, [r3, #0]
 800a74a:	e00b      	b.n	800a764 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a74c:	78fb      	ldrb	r3, [r7, #3]
 800a74e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a752:	68f9      	ldr	r1, [r7, #12]
 800a754:	4613      	mov	r3, r2
 800a756:	00db      	lsls	r3, r3, #3
 800a758:	4413      	add	r3, r2
 800a75a:	009b      	lsls	r3, r3, #2
 800a75c:	440b      	add	r3, r1
 800a75e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800a762:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a764:	4618      	mov	r0, r3
 800a766:	3714      	adds	r7, #20
 800a768:	46bd      	mov	sp, r7
 800a76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a76e:	4770      	bx	lr

0800a770 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af00      	add	r7, sp, #0
 800a776:	6078      	str	r0, [r7, #4]
 800a778:	460b      	mov	r3, r1
 800a77a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a77c:	2300      	movs	r3, #0
 800a77e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800a78a:	78fa      	ldrb	r2, [r7, #3]
 800a78c:	4611      	mov	r1, r2
 800a78e:	4618      	mov	r0, r3
 800a790:	f7fa f9b7 	bl	8004b02 <HAL_PCD_SetAddress>
 800a794:	4603      	mov	r3, r0
 800a796:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a798:	7bfb      	ldrb	r3, [r7, #15]
 800a79a:	4618      	mov	r0, r3
 800a79c:	f000 f862 	bl	800a864 <USBD_Get_USB_Status>
 800a7a0:	4603      	mov	r3, r0
 800a7a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7a4:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7a6:	4618      	mov	r0, r3
 800a7a8:	3710      	adds	r7, #16
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}

0800a7ae <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7ae:	b580      	push	{r7, lr}
 800a7b0:	b086      	sub	sp, #24
 800a7b2:	af00      	add	r7, sp, #0
 800a7b4:	60f8      	str	r0, [r7, #12]
 800a7b6:	607a      	str	r2, [r7, #4]
 800a7b8:	603b      	str	r3, [r7, #0]
 800a7ba:	460b      	mov	r3, r1
 800a7bc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a7cc:	7af9      	ldrb	r1, [r7, #11]
 800a7ce:	683b      	ldr	r3, [r7, #0]
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	f7fa fab8 	bl	8004d46 <HAL_PCD_EP_Transmit>
 800a7d6:	4603      	mov	r3, r0
 800a7d8:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a7da:	7dfb      	ldrb	r3, [r7, #23]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f000 f841 	bl	800a864 <USBD_Get_USB_Status>
 800a7e2:	4603      	mov	r3, r0
 800a7e4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a7e6:	7dbb      	ldrb	r3, [r7, #22]
}
 800a7e8:	4618      	mov	r0, r3
 800a7ea:	3718      	adds	r7, #24
 800a7ec:	46bd      	mov	sp, r7
 800a7ee:	bd80      	pop	{r7, pc}

0800a7f0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b086      	sub	sp, #24
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	607a      	str	r2, [r7, #4]
 800a7fa:	603b      	str	r3, [r7, #0]
 800a7fc:	460b      	mov	r3, r1
 800a7fe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a800:	2300      	movs	r3, #0
 800a802:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800a80e:	7af9      	ldrb	r1, [r7, #11]
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	f7fa fa4c 	bl	8004cb0 <HAL_PCD_EP_Receive>
 800a818:	4603      	mov	r3, r0
 800a81a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a81c:	7dfb      	ldrb	r3, [r7, #23]
 800a81e:	4618      	mov	r0, r3
 800a820:	f000 f820 	bl	800a864 <USBD_Get_USB_Status>
 800a824:	4603      	mov	r3, r0
 800a826:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a828:	7dbb      	ldrb	r3, [r7, #22]
}
 800a82a:	4618      	mov	r0, r3
 800a82c:	3718      	adds	r7, #24
 800a82e:	46bd      	mov	sp, r7
 800a830:	bd80      	pop	{r7, pc}
	...

0800a834 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a834:	b480      	push	{r7}
 800a836:	b083      	sub	sp, #12
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a83c:	4b03      	ldr	r3, [pc, #12]	; (800a84c <USBD_static_malloc+0x18>)
}
 800a83e:	4618      	mov	r0, r3
 800a840:	370c      	adds	r7, #12
 800a842:	46bd      	mov	sp, r7
 800a844:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a848:	4770      	bx	lr
 800a84a:	bf00      	nop
 800a84c:	20000f40 	.word	0x20000f40

0800a850 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a850:	b480      	push	{r7}
 800a852:	b083      	sub	sp, #12
 800a854:	af00      	add	r7, sp, #0
 800a856:	6078      	str	r0, [r7, #4]

}
 800a858:	bf00      	nop
 800a85a:	370c      	adds	r7, #12
 800a85c:	46bd      	mov	sp, r7
 800a85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a862:	4770      	bx	lr

0800a864 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a864:	b480      	push	{r7}
 800a866:	b085      	sub	sp, #20
 800a868:	af00      	add	r7, sp, #0
 800a86a:	4603      	mov	r3, r0
 800a86c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a86e:	2300      	movs	r3, #0
 800a870:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a872:	79fb      	ldrb	r3, [r7, #7]
 800a874:	2b03      	cmp	r3, #3
 800a876:	d817      	bhi.n	800a8a8 <USBD_Get_USB_Status+0x44>
 800a878:	a201      	add	r2, pc, #4	; (adr r2, 800a880 <USBD_Get_USB_Status+0x1c>)
 800a87a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87e:	bf00      	nop
 800a880:	0800a891 	.word	0x0800a891
 800a884:	0800a897 	.word	0x0800a897
 800a888:	0800a89d 	.word	0x0800a89d
 800a88c:	0800a8a3 	.word	0x0800a8a3
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a890:	2300      	movs	r3, #0
 800a892:	73fb      	strb	r3, [r7, #15]
    break;
 800a894:	e00b      	b.n	800a8ae <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a896:	2303      	movs	r3, #3
 800a898:	73fb      	strb	r3, [r7, #15]
    break;
 800a89a:	e008      	b.n	800a8ae <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a89c:	2301      	movs	r3, #1
 800a89e:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a0:	e005      	b.n	800a8ae <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a8a2:	2303      	movs	r3, #3
 800a8a4:	73fb      	strb	r3, [r7, #15]
    break;
 800a8a6:	e002      	b.n	800a8ae <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a8a8:	2303      	movs	r3, #3
 800a8aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a8ac:	bf00      	nop
  }
  return usb_status;
 800a8ae:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3714      	adds	r7, #20
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ba:	4770      	bx	lr

0800a8bc <siprintf>:
 800a8bc:	b40e      	push	{r1, r2, r3}
 800a8be:	b500      	push	{lr}
 800a8c0:	b09c      	sub	sp, #112	; 0x70
 800a8c2:	ab1d      	add	r3, sp, #116	; 0x74
 800a8c4:	9002      	str	r0, [sp, #8]
 800a8c6:	9006      	str	r0, [sp, #24]
 800a8c8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a8cc:	4809      	ldr	r0, [pc, #36]	; (800a8f4 <siprintf+0x38>)
 800a8ce:	9107      	str	r1, [sp, #28]
 800a8d0:	9104      	str	r1, [sp, #16]
 800a8d2:	4909      	ldr	r1, [pc, #36]	; (800a8f8 <siprintf+0x3c>)
 800a8d4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8d8:	9105      	str	r1, [sp, #20]
 800a8da:	6800      	ldr	r0, [r0, #0]
 800a8dc:	9301      	str	r3, [sp, #4]
 800a8de:	a902      	add	r1, sp, #8
 800a8e0:	f000 f8d6 	bl	800aa90 <_svfiprintf_r>
 800a8e4:	9b02      	ldr	r3, [sp, #8]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	b01c      	add	sp, #112	; 0x70
 800a8ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800a8f0:	b003      	add	sp, #12
 800a8f2:	4770      	bx	lr
 800a8f4:	20000188 	.word	0x20000188
 800a8f8:	ffff0208 	.word	0xffff0208

0800a8fc <strcat>:
 800a8fc:	b510      	push	{r4, lr}
 800a8fe:	4602      	mov	r2, r0
 800a900:	7814      	ldrb	r4, [r2, #0]
 800a902:	4613      	mov	r3, r2
 800a904:	3201      	adds	r2, #1
 800a906:	2c00      	cmp	r4, #0
 800a908:	d1fa      	bne.n	800a900 <strcat+0x4>
 800a90a:	3b01      	subs	r3, #1
 800a90c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a910:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a914:	2a00      	cmp	r2, #0
 800a916:	d1f9      	bne.n	800a90c <strcat+0x10>
 800a918:	bd10      	pop	{r4, pc}

0800a91a <strstr>:
 800a91a:	780a      	ldrb	r2, [r1, #0]
 800a91c:	b570      	push	{r4, r5, r6, lr}
 800a91e:	b96a      	cbnz	r2, 800a93c <strstr+0x22>
 800a920:	bd70      	pop	{r4, r5, r6, pc}
 800a922:	429a      	cmp	r2, r3
 800a924:	d109      	bne.n	800a93a <strstr+0x20>
 800a926:	460c      	mov	r4, r1
 800a928:	4605      	mov	r5, r0
 800a92a:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a92e:	2b00      	cmp	r3, #0
 800a930:	d0f6      	beq.n	800a920 <strstr+0x6>
 800a932:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a936:	429e      	cmp	r6, r3
 800a938:	d0f7      	beq.n	800a92a <strstr+0x10>
 800a93a:	3001      	adds	r0, #1
 800a93c:	7803      	ldrb	r3, [r0, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d1ef      	bne.n	800a922 <strstr+0x8>
 800a942:	4618      	mov	r0, r3
 800a944:	e7ec      	b.n	800a920 <strstr+0x6>

0800a946 <memset>:
 800a946:	4402      	add	r2, r0
 800a948:	4603      	mov	r3, r0
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d100      	bne.n	800a950 <memset+0xa>
 800a94e:	4770      	bx	lr
 800a950:	f803 1b01 	strb.w	r1, [r3], #1
 800a954:	e7f9      	b.n	800a94a <memset+0x4>
	...

0800a958 <__errno>:
 800a958:	4b01      	ldr	r3, [pc, #4]	; (800a960 <__errno+0x8>)
 800a95a:	6818      	ldr	r0, [r3, #0]
 800a95c:	4770      	bx	lr
 800a95e:	bf00      	nop
 800a960:	20000188 	.word	0x20000188

0800a964 <__libc_init_array>:
 800a964:	b570      	push	{r4, r5, r6, lr}
 800a966:	4d0d      	ldr	r5, [pc, #52]	; (800a99c <__libc_init_array+0x38>)
 800a968:	4c0d      	ldr	r4, [pc, #52]	; (800a9a0 <__libc_init_array+0x3c>)
 800a96a:	1b64      	subs	r4, r4, r5
 800a96c:	10a4      	asrs	r4, r4, #2
 800a96e:	2600      	movs	r6, #0
 800a970:	42a6      	cmp	r6, r4
 800a972:	d109      	bne.n	800a988 <__libc_init_array+0x24>
 800a974:	4d0b      	ldr	r5, [pc, #44]	; (800a9a4 <__libc_init_array+0x40>)
 800a976:	4c0c      	ldr	r4, [pc, #48]	; (800a9a8 <__libc_init_array+0x44>)
 800a978:	f000 fc72 	bl	800b260 <_init>
 800a97c:	1b64      	subs	r4, r4, r5
 800a97e:	10a4      	asrs	r4, r4, #2
 800a980:	2600      	movs	r6, #0
 800a982:	42a6      	cmp	r6, r4
 800a984:	d105      	bne.n	800a992 <__libc_init_array+0x2e>
 800a986:	bd70      	pop	{r4, r5, r6, pc}
 800a988:	f855 3b04 	ldr.w	r3, [r5], #4
 800a98c:	4798      	blx	r3
 800a98e:	3601      	adds	r6, #1
 800a990:	e7ee      	b.n	800a970 <__libc_init_array+0xc>
 800a992:	f855 3b04 	ldr.w	r3, [r5], #4
 800a996:	4798      	blx	r3
 800a998:	3601      	adds	r6, #1
 800a99a:	e7f2      	b.n	800a982 <__libc_init_array+0x1e>
 800a99c:	0800bc78 	.word	0x0800bc78
 800a9a0:	0800bc78 	.word	0x0800bc78
 800a9a4:	0800bc78 	.word	0x0800bc78
 800a9a8:	0800bc7c 	.word	0x0800bc7c

0800a9ac <__retarget_lock_acquire_recursive>:
 800a9ac:	4770      	bx	lr

0800a9ae <__retarget_lock_release_recursive>:
 800a9ae:	4770      	bx	lr

0800a9b0 <memcpy>:
 800a9b0:	440a      	add	r2, r1
 800a9b2:	4291      	cmp	r1, r2
 800a9b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800a9b8:	d100      	bne.n	800a9bc <memcpy+0xc>
 800a9ba:	4770      	bx	lr
 800a9bc:	b510      	push	{r4, lr}
 800a9be:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a9c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9c6:	4291      	cmp	r1, r2
 800a9c8:	d1f9      	bne.n	800a9be <memcpy+0xe>
 800a9ca:	bd10      	pop	{r4, pc}

0800a9cc <strcpy>:
 800a9cc:	4603      	mov	r3, r0
 800a9ce:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a9d2:	f803 2b01 	strb.w	r2, [r3], #1
 800a9d6:	2a00      	cmp	r2, #0
 800a9d8:	d1f9      	bne.n	800a9ce <strcpy+0x2>
 800a9da:	4770      	bx	lr

0800a9dc <__ssputs_r>:
 800a9dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a9e0:	688e      	ldr	r6, [r1, #8]
 800a9e2:	461f      	mov	r7, r3
 800a9e4:	42be      	cmp	r6, r7
 800a9e6:	680b      	ldr	r3, [r1, #0]
 800a9e8:	4682      	mov	sl, r0
 800a9ea:	460c      	mov	r4, r1
 800a9ec:	4690      	mov	r8, r2
 800a9ee:	d82c      	bhi.n	800aa4a <__ssputs_r+0x6e>
 800a9f0:	898a      	ldrh	r2, [r1, #12]
 800a9f2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800a9f6:	d026      	beq.n	800aa46 <__ssputs_r+0x6a>
 800a9f8:	6965      	ldr	r5, [r4, #20]
 800a9fa:	6909      	ldr	r1, [r1, #16]
 800a9fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800aa00:	eba3 0901 	sub.w	r9, r3, r1
 800aa04:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800aa08:	1c7b      	adds	r3, r7, #1
 800aa0a:	444b      	add	r3, r9
 800aa0c:	106d      	asrs	r5, r5, #1
 800aa0e:	429d      	cmp	r5, r3
 800aa10:	bf38      	it	cc
 800aa12:	461d      	movcc	r5, r3
 800aa14:	0553      	lsls	r3, r2, #21
 800aa16:	d527      	bpl.n	800aa68 <__ssputs_r+0x8c>
 800aa18:	4629      	mov	r1, r5
 800aa1a:	f000 f957 	bl	800accc <_malloc_r>
 800aa1e:	4606      	mov	r6, r0
 800aa20:	b360      	cbz	r0, 800aa7c <__ssputs_r+0xa0>
 800aa22:	6921      	ldr	r1, [r4, #16]
 800aa24:	464a      	mov	r2, r9
 800aa26:	f7ff ffc3 	bl	800a9b0 <memcpy>
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800aa30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800aa34:	81a3      	strh	r3, [r4, #12]
 800aa36:	6126      	str	r6, [r4, #16]
 800aa38:	6165      	str	r5, [r4, #20]
 800aa3a:	444e      	add	r6, r9
 800aa3c:	eba5 0509 	sub.w	r5, r5, r9
 800aa40:	6026      	str	r6, [r4, #0]
 800aa42:	60a5      	str	r5, [r4, #8]
 800aa44:	463e      	mov	r6, r7
 800aa46:	42be      	cmp	r6, r7
 800aa48:	d900      	bls.n	800aa4c <__ssputs_r+0x70>
 800aa4a:	463e      	mov	r6, r7
 800aa4c:	6820      	ldr	r0, [r4, #0]
 800aa4e:	4632      	mov	r2, r6
 800aa50:	4641      	mov	r1, r8
 800aa52:	f000 fb86 	bl	800b162 <memmove>
 800aa56:	68a3      	ldr	r3, [r4, #8]
 800aa58:	1b9b      	subs	r3, r3, r6
 800aa5a:	60a3      	str	r3, [r4, #8]
 800aa5c:	6823      	ldr	r3, [r4, #0]
 800aa5e:	4433      	add	r3, r6
 800aa60:	6023      	str	r3, [r4, #0]
 800aa62:	2000      	movs	r0, #0
 800aa64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800aa68:	462a      	mov	r2, r5
 800aa6a:	f000 fb4b 	bl	800b104 <_realloc_r>
 800aa6e:	4606      	mov	r6, r0
 800aa70:	2800      	cmp	r0, #0
 800aa72:	d1e0      	bne.n	800aa36 <__ssputs_r+0x5a>
 800aa74:	6921      	ldr	r1, [r4, #16]
 800aa76:	4650      	mov	r0, sl
 800aa78:	f000 fb9e 	bl	800b1b8 <_free_r>
 800aa7c:	230c      	movs	r3, #12
 800aa7e:	f8ca 3000 	str.w	r3, [sl]
 800aa82:	89a3      	ldrh	r3, [r4, #12]
 800aa84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800aa88:	81a3      	strh	r3, [r4, #12]
 800aa8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aa8e:	e7e9      	b.n	800aa64 <__ssputs_r+0x88>

0800aa90 <_svfiprintf_r>:
 800aa90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa94:	4698      	mov	r8, r3
 800aa96:	898b      	ldrh	r3, [r1, #12]
 800aa98:	061b      	lsls	r3, r3, #24
 800aa9a:	b09d      	sub	sp, #116	; 0x74
 800aa9c:	4607      	mov	r7, r0
 800aa9e:	460d      	mov	r5, r1
 800aaa0:	4614      	mov	r4, r2
 800aaa2:	d50e      	bpl.n	800aac2 <_svfiprintf_r+0x32>
 800aaa4:	690b      	ldr	r3, [r1, #16]
 800aaa6:	b963      	cbnz	r3, 800aac2 <_svfiprintf_r+0x32>
 800aaa8:	2140      	movs	r1, #64	; 0x40
 800aaaa:	f000 f90f 	bl	800accc <_malloc_r>
 800aaae:	6028      	str	r0, [r5, #0]
 800aab0:	6128      	str	r0, [r5, #16]
 800aab2:	b920      	cbnz	r0, 800aabe <_svfiprintf_r+0x2e>
 800aab4:	230c      	movs	r3, #12
 800aab6:	603b      	str	r3, [r7, #0]
 800aab8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800aabc:	e0d0      	b.n	800ac60 <_svfiprintf_r+0x1d0>
 800aabe:	2340      	movs	r3, #64	; 0x40
 800aac0:	616b      	str	r3, [r5, #20]
 800aac2:	2300      	movs	r3, #0
 800aac4:	9309      	str	r3, [sp, #36]	; 0x24
 800aac6:	2320      	movs	r3, #32
 800aac8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800aacc:	f8cd 800c 	str.w	r8, [sp, #12]
 800aad0:	2330      	movs	r3, #48	; 0x30
 800aad2:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800ac78 <_svfiprintf_r+0x1e8>
 800aad6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800aada:	f04f 0901 	mov.w	r9, #1
 800aade:	4623      	mov	r3, r4
 800aae0:	469a      	mov	sl, r3
 800aae2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aae6:	b10a      	cbz	r2, 800aaec <_svfiprintf_r+0x5c>
 800aae8:	2a25      	cmp	r2, #37	; 0x25
 800aaea:	d1f9      	bne.n	800aae0 <_svfiprintf_r+0x50>
 800aaec:	ebba 0b04 	subs.w	fp, sl, r4
 800aaf0:	d00b      	beq.n	800ab0a <_svfiprintf_r+0x7a>
 800aaf2:	465b      	mov	r3, fp
 800aaf4:	4622      	mov	r2, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	4638      	mov	r0, r7
 800aafa:	f7ff ff6f 	bl	800a9dc <__ssputs_r>
 800aafe:	3001      	adds	r0, #1
 800ab00:	f000 80a9 	beq.w	800ac56 <_svfiprintf_r+0x1c6>
 800ab04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab06:	445a      	add	r2, fp
 800ab08:	9209      	str	r2, [sp, #36]	; 0x24
 800ab0a:	f89a 3000 	ldrb.w	r3, [sl]
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	f000 80a1 	beq.w	800ac56 <_svfiprintf_r+0x1c6>
 800ab14:	2300      	movs	r3, #0
 800ab16:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ab1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ab1e:	f10a 0a01 	add.w	sl, sl, #1
 800ab22:	9304      	str	r3, [sp, #16]
 800ab24:	9307      	str	r3, [sp, #28]
 800ab26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ab2a:	931a      	str	r3, [sp, #104]	; 0x68
 800ab2c:	4654      	mov	r4, sl
 800ab2e:	2205      	movs	r2, #5
 800ab30:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab34:	4850      	ldr	r0, [pc, #320]	; (800ac78 <_svfiprintf_r+0x1e8>)
 800ab36:	f7f5 fb5b 	bl	80001f0 <memchr>
 800ab3a:	9a04      	ldr	r2, [sp, #16]
 800ab3c:	b9d8      	cbnz	r0, 800ab76 <_svfiprintf_r+0xe6>
 800ab3e:	06d0      	lsls	r0, r2, #27
 800ab40:	bf44      	itt	mi
 800ab42:	2320      	movmi	r3, #32
 800ab44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab48:	0711      	lsls	r1, r2, #28
 800ab4a:	bf44      	itt	mi
 800ab4c:	232b      	movmi	r3, #43	; 0x2b
 800ab4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ab52:	f89a 3000 	ldrb.w	r3, [sl]
 800ab56:	2b2a      	cmp	r3, #42	; 0x2a
 800ab58:	d015      	beq.n	800ab86 <_svfiprintf_r+0xf6>
 800ab5a:	9a07      	ldr	r2, [sp, #28]
 800ab5c:	4654      	mov	r4, sl
 800ab5e:	2000      	movs	r0, #0
 800ab60:	f04f 0c0a 	mov.w	ip, #10
 800ab64:	4621      	mov	r1, r4
 800ab66:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ab6a:	3b30      	subs	r3, #48	; 0x30
 800ab6c:	2b09      	cmp	r3, #9
 800ab6e:	d94d      	bls.n	800ac0c <_svfiprintf_r+0x17c>
 800ab70:	b1b0      	cbz	r0, 800aba0 <_svfiprintf_r+0x110>
 800ab72:	9207      	str	r2, [sp, #28]
 800ab74:	e014      	b.n	800aba0 <_svfiprintf_r+0x110>
 800ab76:	eba0 0308 	sub.w	r3, r0, r8
 800ab7a:	fa09 f303 	lsl.w	r3, r9, r3
 800ab7e:	4313      	orrs	r3, r2
 800ab80:	9304      	str	r3, [sp, #16]
 800ab82:	46a2      	mov	sl, r4
 800ab84:	e7d2      	b.n	800ab2c <_svfiprintf_r+0x9c>
 800ab86:	9b03      	ldr	r3, [sp, #12]
 800ab88:	1d19      	adds	r1, r3, #4
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	9103      	str	r1, [sp, #12]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	bfbb      	ittet	lt
 800ab92:	425b      	neglt	r3, r3
 800ab94:	f042 0202 	orrlt.w	r2, r2, #2
 800ab98:	9307      	strge	r3, [sp, #28]
 800ab9a:	9307      	strlt	r3, [sp, #28]
 800ab9c:	bfb8      	it	lt
 800ab9e:	9204      	strlt	r2, [sp, #16]
 800aba0:	7823      	ldrb	r3, [r4, #0]
 800aba2:	2b2e      	cmp	r3, #46	; 0x2e
 800aba4:	d10c      	bne.n	800abc0 <_svfiprintf_r+0x130>
 800aba6:	7863      	ldrb	r3, [r4, #1]
 800aba8:	2b2a      	cmp	r3, #42	; 0x2a
 800abaa:	d134      	bne.n	800ac16 <_svfiprintf_r+0x186>
 800abac:	9b03      	ldr	r3, [sp, #12]
 800abae:	1d1a      	adds	r2, r3, #4
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	9203      	str	r2, [sp, #12]
 800abb4:	2b00      	cmp	r3, #0
 800abb6:	bfb8      	it	lt
 800abb8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800abbc:	3402      	adds	r4, #2
 800abbe:	9305      	str	r3, [sp, #20]
 800abc0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800ac88 <_svfiprintf_r+0x1f8>
 800abc4:	7821      	ldrb	r1, [r4, #0]
 800abc6:	2203      	movs	r2, #3
 800abc8:	4650      	mov	r0, sl
 800abca:	f7f5 fb11 	bl	80001f0 <memchr>
 800abce:	b138      	cbz	r0, 800abe0 <_svfiprintf_r+0x150>
 800abd0:	9b04      	ldr	r3, [sp, #16]
 800abd2:	eba0 000a 	sub.w	r0, r0, sl
 800abd6:	2240      	movs	r2, #64	; 0x40
 800abd8:	4082      	lsls	r2, r0
 800abda:	4313      	orrs	r3, r2
 800abdc:	3401      	adds	r4, #1
 800abde:	9304      	str	r3, [sp, #16]
 800abe0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800abe4:	4825      	ldr	r0, [pc, #148]	; (800ac7c <_svfiprintf_r+0x1ec>)
 800abe6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800abea:	2206      	movs	r2, #6
 800abec:	f7f5 fb00 	bl	80001f0 <memchr>
 800abf0:	2800      	cmp	r0, #0
 800abf2:	d038      	beq.n	800ac66 <_svfiprintf_r+0x1d6>
 800abf4:	4b22      	ldr	r3, [pc, #136]	; (800ac80 <_svfiprintf_r+0x1f0>)
 800abf6:	bb1b      	cbnz	r3, 800ac40 <_svfiprintf_r+0x1b0>
 800abf8:	9b03      	ldr	r3, [sp, #12]
 800abfa:	3307      	adds	r3, #7
 800abfc:	f023 0307 	bic.w	r3, r3, #7
 800ac00:	3308      	adds	r3, #8
 800ac02:	9303      	str	r3, [sp, #12]
 800ac04:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac06:	4433      	add	r3, r6
 800ac08:	9309      	str	r3, [sp, #36]	; 0x24
 800ac0a:	e768      	b.n	800aade <_svfiprintf_r+0x4e>
 800ac0c:	fb0c 3202 	mla	r2, ip, r2, r3
 800ac10:	460c      	mov	r4, r1
 800ac12:	2001      	movs	r0, #1
 800ac14:	e7a6      	b.n	800ab64 <_svfiprintf_r+0xd4>
 800ac16:	2300      	movs	r3, #0
 800ac18:	3401      	adds	r4, #1
 800ac1a:	9305      	str	r3, [sp, #20]
 800ac1c:	4619      	mov	r1, r3
 800ac1e:	f04f 0c0a 	mov.w	ip, #10
 800ac22:	4620      	mov	r0, r4
 800ac24:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ac28:	3a30      	subs	r2, #48	; 0x30
 800ac2a:	2a09      	cmp	r2, #9
 800ac2c:	d903      	bls.n	800ac36 <_svfiprintf_r+0x1a6>
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d0c6      	beq.n	800abc0 <_svfiprintf_r+0x130>
 800ac32:	9105      	str	r1, [sp, #20]
 800ac34:	e7c4      	b.n	800abc0 <_svfiprintf_r+0x130>
 800ac36:	fb0c 2101 	mla	r1, ip, r1, r2
 800ac3a:	4604      	mov	r4, r0
 800ac3c:	2301      	movs	r3, #1
 800ac3e:	e7f0      	b.n	800ac22 <_svfiprintf_r+0x192>
 800ac40:	ab03      	add	r3, sp, #12
 800ac42:	9300      	str	r3, [sp, #0]
 800ac44:	462a      	mov	r2, r5
 800ac46:	4b0f      	ldr	r3, [pc, #60]	; (800ac84 <_svfiprintf_r+0x1f4>)
 800ac48:	a904      	add	r1, sp, #16
 800ac4a:	4638      	mov	r0, r7
 800ac4c:	f3af 8000 	nop.w
 800ac50:	1c42      	adds	r2, r0, #1
 800ac52:	4606      	mov	r6, r0
 800ac54:	d1d6      	bne.n	800ac04 <_svfiprintf_r+0x174>
 800ac56:	89ab      	ldrh	r3, [r5, #12]
 800ac58:	065b      	lsls	r3, r3, #25
 800ac5a:	f53f af2d 	bmi.w	800aab8 <_svfiprintf_r+0x28>
 800ac5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ac60:	b01d      	add	sp, #116	; 0x74
 800ac62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac66:	ab03      	add	r3, sp, #12
 800ac68:	9300      	str	r3, [sp, #0]
 800ac6a:	462a      	mov	r2, r5
 800ac6c:	4b05      	ldr	r3, [pc, #20]	; (800ac84 <_svfiprintf_r+0x1f4>)
 800ac6e:	a904      	add	r1, sp, #16
 800ac70:	4638      	mov	r0, r7
 800ac72:	f000 f919 	bl	800aea8 <_printf_i>
 800ac76:	e7eb      	b.n	800ac50 <_svfiprintf_r+0x1c0>
 800ac78:	0800bc3d 	.word	0x0800bc3d
 800ac7c:	0800bc47 	.word	0x0800bc47
 800ac80:	00000000 	.word	0x00000000
 800ac84:	0800a9dd 	.word	0x0800a9dd
 800ac88:	0800bc43 	.word	0x0800bc43

0800ac8c <sbrk_aligned>:
 800ac8c:	b570      	push	{r4, r5, r6, lr}
 800ac8e:	4e0e      	ldr	r6, [pc, #56]	; (800acc8 <sbrk_aligned+0x3c>)
 800ac90:	460c      	mov	r4, r1
 800ac92:	6831      	ldr	r1, [r6, #0]
 800ac94:	4605      	mov	r5, r0
 800ac96:	b911      	cbnz	r1, 800ac9e <sbrk_aligned+0x12>
 800ac98:	f000 fa7e 	bl	800b198 <_sbrk_r>
 800ac9c:	6030      	str	r0, [r6, #0]
 800ac9e:	4621      	mov	r1, r4
 800aca0:	4628      	mov	r0, r5
 800aca2:	f000 fa79 	bl	800b198 <_sbrk_r>
 800aca6:	1c43      	adds	r3, r0, #1
 800aca8:	d00a      	beq.n	800acc0 <sbrk_aligned+0x34>
 800acaa:	1cc4      	adds	r4, r0, #3
 800acac:	f024 0403 	bic.w	r4, r4, #3
 800acb0:	42a0      	cmp	r0, r4
 800acb2:	d007      	beq.n	800acc4 <sbrk_aligned+0x38>
 800acb4:	1a21      	subs	r1, r4, r0
 800acb6:	4628      	mov	r0, r5
 800acb8:	f000 fa6e 	bl	800b198 <_sbrk_r>
 800acbc:	3001      	adds	r0, #1
 800acbe:	d101      	bne.n	800acc4 <sbrk_aligned+0x38>
 800acc0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800acc4:	4620      	mov	r0, r4
 800acc6:	bd70      	pop	{r4, r5, r6, pc}
 800acc8:	20001094 	.word	0x20001094

0800accc <_malloc_r>:
 800accc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800acd0:	1ccd      	adds	r5, r1, #3
 800acd2:	f025 0503 	bic.w	r5, r5, #3
 800acd6:	3508      	adds	r5, #8
 800acd8:	2d0c      	cmp	r5, #12
 800acda:	bf38      	it	cc
 800acdc:	250c      	movcc	r5, #12
 800acde:	2d00      	cmp	r5, #0
 800ace0:	4607      	mov	r7, r0
 800ace2:	db01      	blt.n	800ace8 <_malloc_r+0x1c>
 800ace4:	42a9      	cmp	r1, r5
 800ace6:	d905      	bls.n	800acf4 <_malloc_r+0x28>
 800ace8:	230c      	movs	r3, #12
 800acea:	603b      	str	r3, [r7, #0]
 800acec:	2600      	movs	r6, #0
 800acee:	4630      	mov	r0, r6
 800acf0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800acf4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800adc8 <_malloc_r+0xfc>
 800acf8:	f000 f9f8 	bl	800b0ec <__malloc_lock>
 800acfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ad00:	461c      	mov	r4, r3
 800ad02:	bb5c      	cbnz	r4, 800ad5c <_malloc_r+0x90>
 800ad04:	4629      	mov	r1, r5
 800ad06:	4638      	mov	r0, r7
 800ad08:	f7ff ffc0 	bl	800ac8c <sbrk_aligned>
 800ad0c:	1c43      	adds	r3, r0, #1
 800ad0e:	4604      	mov	r4, r0
 800ad10:	d155      	bne.n	800adbe <_malloc_r+0xf2>
 800ad12:	f8d8 4000 	ldr.w	r4, [r8]
 800ad16:	4626      	mov	r6, r4
 800ad18:	2e00      	cmp	r6, #0
 800ad1a:	d145      	bne.n	800ada8 <_malloc_r+0xdc>
 800ad1c:	2c00      	cmp	r4, #0
 800ad1e:	d048      	beq.n	800adb2 <_malloc_r+0xe6>
 800ad20:	6823      	ldr	r3, [r4, #0]
 800ad22:	4631      	mov	r1, r6
 800ad24:	4638      	mov	r0, r7
 800ad26:	eb04 0903 	add.w	r9, r4, r3
 800ad2a:	f000 fa35 	bl	800b198 <_sbrk_r>
 800ad2e:	4581      	cmp	r9, r0
 800ad30:	d13f      	bne.n	800adb2 <_malloc_r+0xe6>
 800ad32:	6821      	ldr	r1, [r4, #0]
 800ad34:	1a6d      	subs	r5, r5, r1
 800ad36:	4629      	mov	r1, r5
 800ad38:	4638      	mov	r0, r7
 800ad3a:	f7ff ffa7 	bl	800ac8c <sbrk_aligned>
 800ad3e:	3001      	adds	r0, #1
 800ad40:	d037      	beq.n	800adb2 <_malloc_r+0xe6>
 800ad42:	6823      	ldr	r3, [r4, #0]
 800ad44:	442b      	add	r3, r5
 800ad46:	6023      	str	r3, [r4, #0]
 800ad48:	f8d8 3000 	ldr.w	r3, [r8]
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d038      	beq.n	800adc2 <_malloc_r+0xf6>
 800ad50:	685a      	ldr	r2, [r3, #4]
 800ad52:	42a2      	cmp	r2, r4
 800ad54:	d12b      	bne.n	800adae <_malloc_r+0xe2>
 800ad56:	2200      	movs	r2, #0
 800ad58:	605a      	str	r2, [r3, #4]
 800ad5a:	e00f      	b.n	800ad7c <_malloc_r+0xb0>
 800ad5c:	6822      	ldr	r2, [r4, #0]
 800ad5e:	1b52      	subs	r2, r2, r5
 800ad60:	d41f      	bmi.n	800ada2 <_malloc_r+0xd6>
 800ad62:	2a0b      	cmp	r2, #11
 800ad64:	d917      	bls.n	800ad96 <_malloc_r+0xca>
 800ad66:	1961      	adds	r1, r4, r5
 800ad68:	42a3      	cmp	r3, r4
 800ad6a:	6025      	str	r5, [r4, #0]
 800ad6c:	bf18      	it	ne
 800ad6e:	6059      	strne	r1, [r3, #4]
 800ad70:	6863      	ldr	r3, [r4, #4]
 800ad72:	bf08      	it	eq
 800ad74:	f8c8 1000 	streq.w	r1, [r8]
 800ad78:	5162      	str	r2, [r4, r5]
 800ad7a:	604b      	str	r3, [r1, #4]
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	f104 060b 	add.w	r6, r4, #11
 800ad82:	f000 f9b9 	bl	800b0f8 <__malloc_unlock>
 800ad86:	f026 0607 	bic.w	r6, r6, #7
 800ad8a:	1d23      	adds	r3, r4, #4
 800ad8c:	1af2      	subs	r2, r6, r3
 800ad8e:	d0ae      	beq.n	800acee <_malloc_r+0x22>
 800ad90:	1b9b      	subs	r3, r3, r6
 800ad92:	50a3      	str	r3, [r4, r2]
 800ad94:	e7ab      	b.n	800acee <_malloc_r+0x22>
 800ad96:	42a3      	cmp	r3, r4
 800ad98:	6862      	ldr	r2, [r4, #4]
 800ad9a:	d1dd      	bne.n	800ad58 <_malloc_r+0x8c>
 800ad9c:	f8c8 2000 	str.w	r2, [r8]
 800ada0:	e7ec      	b.n	800ad7c <_malloc_r+0xb0>
 800ada2:	4623      	mov	r3, r4
 800ada4:	6864      	ldr	r4, [r4, #4]
 800ada6:	e7ac      	b.n	800ad02 <_malloc_r+0x36>
 800ada8:	4634      	mov	r4, r6
 800adaa:	6876      	ldr	r6, [r6, #4]
 800adac:	e7b4      	b.n	800ad18 <_malloc_r+0x4c>
 800adae:	4613      	mov	r3, r2
 800adb0:	e7cc      	b.n	800ad4c <_malloc_r+0x80>
 800adb2:	230c      	movs	r3, #12
 800adb4:	603b      	str	r3, [r7, #0]
 800adb6:	4638      	mov	r0, r7
 800adb8:	f000 f99e 	bl	800b0f8 <__malloc_unlock>
 800adbc:	e797      	b.n	800acee <_malloc_r+0x22>
 800adbe:	6025      	str	r5, [r4, #0]
 800adc0:	e7dc      	b.n	800ad7c <_malloc_r+0xb0>
 800adc2:	605b      	str	r3, [r3, #4]
 800adc4:	deff      	udf	#255	; 0xff
 800adc6:	bf00      	nop
 800adc8:	20001090 	.word	0x20001090

0800adcc <_printf_common>:
 800adcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800add0:	4616      	mov	r6, r2
 800add2:	4699      	mov	r9, r3
 800add4:	688a      	ldr	r2, [r1, #8]
 800add6:	690b      	ldr	r3, [r1, #16]
 800add8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800addc:	4293      	cmp	r3, r2
 800adde:	bfb8      	it	lt
 800ade0:	4613      	movlt	r3, r2
 800ade2:	6033      	str	r3, [r6, #0]
 800ade4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ade8:	4607      	mov	r7, r0
 800adea:	460c      	mov	r4, r1
 800adec:	b10a      	cbz	r2, 800adf2 <_printf_common+0x26>
 800adee:	3301      	adds	r3, #1
 800adf0:	6033      	str	r3, [r6, #0]
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	0699      	lsls	r1, r3, #26
 800adf6:	bf42      	ittt	mi
 800adf8:	6833      	ldrmi	r3, [r6, #0]
 800adfa:	3302      	addmi	r3, #2
 800adfc:	6033      	strmi	r3, [r6, #0]
 800adfe:	6825      	ldr	r5, [r4, #0]
 800ae00:	f015 0506 	ands.w	r5, r5, #6
 800ae04:	d106      	bne.n	800ae14 <_printf_common+0x48>
 800ae06:	f104 0a19 	add.w	sl, r4, #25
 800ae0a:	68e3      	ldr	r3, [r4, #12]
 800ae0c:	6832      	ldr	r2, [r6, #0]
 800ae0e:	1a9b      	subs	r3, r3, r2
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	dc26      	bgt.n	800ae62 <_printf_common+0x96>
 800ae14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ae18:	1e13      	subs	r3, r2, #0
 800ae1a:	6822      	ldr	r2, [r4, #0]
 800ae1c:	bf18      	it	ne
 800ae1e:	2301      	movne	r3, #1
 800ae20:	0692      	lsls	r2, r2, #26
 800ae22:	d42b      	bmi.n	800ae7c <_printf_common+0xb0>
 800ae24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ae28:	4649      	mov	r1, r9
 800ae2a:	4638      	mov	r0, r7
 800ae2c:	47c0      	blx	r8
 800ae2e:	3001      	adds	r0, #1
 800ae30:	d01e      	beq.n	800ae70 <_printf_common+0xa4>
 800ae32:	6823      	ldr	r3, [r4, #0]
 800ae34:	6922      	ldr	r2, [r4, #16]
 800ae36:	f003 0306 	and.w	r3, r3, #6
 800ae3a:	2b04      	cmp	r3, #4
 800ae3c:	bf02      	ittt	eq
 800ae3e:	68e5      	ldreq	r5, [r4, #12]
 800ae40:	6833      	ldreq	r3, [r6, #0]
 800ae42:	1aed      	subeq	r5, r5, r3
 800ae44:	68a3      	ldr	r3, [r4, #8]
 800ae46:	bf0c      	ite	eq
 800ae48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ae4c:	2500      	movne	r5, #0
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	bfc4      	itt	gt
 800ae52:	1a9b      	subgt	r3, r3, r2
 800ae54:	18ed      	addgt	r5, r5, r3
 800ae56:	2600      	movs	r6, #0
 800ae58:	341a      	adds	r4, #26
 800ae5a:	42b5      	cmp	r5, r6
 800ae5c:	d11a      	bne.n	800ae94 <_printf_common+0xc8>
 800ae5e:	2000      	movs	r0, #0
 800ae60:	e008      	b.n	800ae74 <_printf_common+0xa8>
 800ae62:	2301      	movs	r3, #1
 800ae64:	4652      	mov	r2, sl
 800ae66:	4649      	mov	r1, r9
 800ae68:	4638      	mov	r0, r7
 800ae6a:	47c0      	blx	r8
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	d103      	bne.n	800ae78 <_printf_common+0xac>
 800ae70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800ae74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ae78:	3501      	adds	r5, #1
 800ae7a:	e7c6      	b.n	800ae0a <_printf_common+0x3e>
 800ae7c:	18e1      	adds	r1, r4, r3
 800ae7e:	1c5a      	adds	r2, r3, #1
 800ae80:	2030      	movs	r0, #48	; 0x30
 800ae82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ae86:	4422      	add	r2, r4
 800ae88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ae8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ae90:	3302      	adds	r3, #2
 800ae92:	e7c7      	b.n	800ae24 <_printf_common+0x58>
 800ae94:	2301      	movs	r3, #1
 800ae96:	4622      	mov	r2, r4
 800ae98:	4649      	mov	r1, r9
 800ae9a:	4638      	mov	r0, r7
 800ae9c:	47c0      	blx	r8
 800ae9e:	3001      	adds	r0, #1
 800aea0:	d0e6      	beq.n	800ae70 <_printf_common+0xa4>
 800aea2:	3601      	adds	r6, #1
 800aea4:	e7d9      	b.n	800ae5a <_printf_common+0x8e>
	...

0800aea8 <_printf_i>:
 800aea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aeac:	7e0f      	ldrb	r7, [r1, #24]
 800aeae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aeb0:	2f78      	cmp	r7, #120	; 0x78
 800aeb2:	4691      	mov	r9, r2
 800aeb4:	4680      	mov	r8, r0
 800aeb6:	460c      	mov	r4, r1
 800aeb8:	469a      	mov	sl, r3
 800aeba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aebe:	d807      	bhi.n	800aed0 <_printf_i+0x28>
 800aec0:	2f62      	cmp	r7, #98	; 0x62
 800aec2:	d80a      	bhi.n	800aeda <_printf_i+0x32>
 800aec4:	2f00      	cmp	r7, #0
 800aec6:	f000 80d4 	beq.w	800b072 <_printf_i+0x1ca>
 800aeca:	2f58      	cmp	r7, #88	; 0x58
 800aecc:	f000 80c0 	beq.w	800b050 <_printf_i+0x1a8>
 800aed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aed8:	e03a      	b.n	800af50 <_printf_i+0xa8>
 800aeda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aede:	2b15      	cmp	r3, #21
 800aee0:	d8f6      	bhi.n	800aed0 <_printf_i+0x28>
 800aee2:	a101      	add	r1, pc, #4	; (adr r1, 800aee8 <_printf_i+0x40>)
 800aee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aee8:	0800af41 	.word	0x0800af41
 800aeec:	0800af55 	.word	0x0800af55
 800aef0:	0800aed1 	.word	0x0800aed1
 800aef4:	0800aed1 	.word	0x0800aed1
 800aef8:	0800aed1 	.word	0x0800aed1
 800aefc:	0800aed1 	.word	0x0800aed1
 800af00:	0800af55 	.word	0x0800af55
 800af04:	0800aed1 	.word	0x0800aed1
 800af08:	0800aed1 	.word	0x0800aed1
 800af0c:	0800aed1 	.word	0x0800aed1
 800af10:	0800aed1 	.word	0x0800aed1
 800af14:	0800b059 	.word	0x0800b059
 800af18:	0800af81 	.word	0x0800af81
 800af1c:	0800b013 	.word	0x0800b013
 800af20:	0800aed1 	.word	0x0800aed1
 800af24:	0800aed1 	.word	0x0800aed1
 800af28:	0800b07b 	.word	0x0800b07b
 800af2c:	0800aed1 	.word	0x0800aed1
 800af30:	0800af81 	.word	0x0800af81
 800af34:	0800aed1 	.word	0x0800aed1
 800af38:	0800aed1 	.word	0x0800aed1
 800af3c:	0800b01b 	.word	0x0800b01b
 800af40:	682b      	ldr	r3, [r5, #0]
 800af42:	1d1a      	adds	r2, r3, #4
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	602a      	str	r2, [r5, #0]
 800af48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800af4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800af50:	2301      	movs	r3, #1
 800af52:	e09f      	b.n	800b094 <_printf_i+0x1ec>
 800af54:	6820      	ldr	r0, [r4, #0]
 800af56:	682b      	ldr	r3, [r5, #0]
 800af58:	0607      	lsls	r7, r0, #24
 800af5a:	f103 0104 	add.w	r1, r3, #4
 800af5e:	6029      	str	r1, [r5, #0]
 800af60:	d501      	bpl.n	800af66 <_printf_i+0xbe>
 800af62:	681e      	ldr	r6, [r3, #0]
 800af64:	e003      	b.n	800af6e <_printf_i+0xc6>
 800af66:	0646      	lsls	r6, r0, #25
 800af68:	d5fb      	bpl.n	800af62 <_printf_i+0xba>
 800af6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800af6e:	2e00      	cmp	r6, #0
 800af70:	da03      	bge.n	800af7a <_printf_i+0xd2>
 800af72:	232d      	movs	r3, #45	; 0x2d
 800af74:	4276      	negs	r6, r6
 800af76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af7a:	485a      	ldr	r0, [pc, #360]	; (800b0e4 <_printf_i+0x23c>)
 800af7c:	230a      	movs	r3, #10
 800af7e:	e012      	b.n	800afa6 <_printf_i+0xfe>
 800af80:	682b      	ldr	r3, [r5, #0]
 800af82:	6820      	ldr	r0, [r4, #0]
 800af84:	1d19      	adds	r1, r3, #4
 800af86:	6029      	str	r1, [r5, #0]
 800af88:	0605      	lsls	r5, r0, #24
 800af8a:	d501      	bpl.n	800af90 <_printf_i+0xe8>
 800af8c:	681e      	ldr	r6, [r3, #0]
 800af8e:	e002      	b.n	800af96 <_printf_i+0xee>
 800af90:	0641      	lsls	r1, r0, #25
 800af92:	d5fb      	bpl.n	800af8c <_printf_i+0xe4>
 800af94:	881e      	ldrh	r6, [r3, #0]
 800af96:	4853      	ldr	r0, [pc, #332]	; (800b0e4 <_printf_i+0x23c>)
 800af98:	2f6f      	cmp	r7, #111	; 0x6f
 800af9a:	bf0c      	ite	eq
 800af9c:	2308      	moveq	r3, #8
 800af9e:	230a      	movne	r3, #10
 800afa0:	2100      	movs	r1, #0
 800afa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800afa6:	6865      	ldr	r5, [r4, #4]
 800afa8:	60a5      	str	r5, [r4, #8]
 800afaa:	2d00      	cmp	r5, #0
 800afac:	bfa2      	ittt	ge
 800afae:	6821      	ldrge	r1, [r4, #0]
 800afb0:	f021 0104 	bicge.w	r1, r1, #4
 800afb4:	6021      	strge	r1, [r4, #0]
 800afb6:	b90e      	cbnz	r6, 800afbc <_printf_i+0x114>
 800afb8:	2d00      	cmp	r5, #0
 800afba:	d04b      	beq.n	800b054 <_printf_i+0x1ac>
 800afbc:	4615      	mov	r5, r2
 800afbe:	fbb6 f1f3 	udiv	r1, r6, r3
 800afc2:	fb03 6711 	mls	r7, r3, r1, r6
 800afc6:	5dc7      	ldrb	r7, [r0, r7]
 800afc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800afcc:	4637      	mov	r7, r6
 800afce:	42bb      	cmp	r3, r7
 800afd0:	460e      	mov	r6, r1
 800afd2:	d9f4      	bls.n	800afbe <_printf_i+0x116>
 800afd4:	2b08      	cmp	r3, #8
 800afd6:	d10b      	bne.n	800aff0 <_printf_i+0x148>
 800afd8:	6823      	ldr	r3, [r4, #0]
 800afda:	07de      	lsls	r6, r3, #31
 800afdc:	d508      	bpl.n	800aff0 <_printf_i+0x148>
 800afde:	6923      	ldr	r3, [r4, #16]
 800afe0:	6861      	ldr	r1, [r4, #4]
 800afe2:	4299      	cmp	r1, r3
 800afe4:	bfde      	ittt	le
 800afe6:	2330      	movle	r3, #48	; 0x30
 800afe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800afec:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800aff0:	1b52      	subs	r2, r2, r5
 800aff2:	6122      	str	r2, [r4, #16]
 800aff4:	f8cd a000 	str.w	sl, [sp]
 800aff8:	464b      	mov	r3, r9
 800affa:	aa03      	add	r2, sp, #12
 800affc:	4621      	mov	r1, r4
 800affe:	4640      	mov	r0, r8
 800b000:	f7ff fee4 	bl	800adcc <_printf_common>
 800b004:	3001      	adds	r0, #1
 800b006:	d14a      	bne.n	800b09e <_printf_i+0x1f6>
 800b008:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800b00c:	b004      	add	sp, #16
 800b00e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b012:	6823      	ldr	r3, [r4, #0]
 800b014:	f043 0320 	orr.w	r3, r3, #32
 800b018:	6023      	str	r3, [r4, #0]
 800b01a:	4833      	ldr	r0, [pc, #204]	; (800b0e8 <_printf_i+0x240>)
 800b01c:	2778      	movs	r7, #120	; 0x78
 800b01e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b022:	6823      	ldr	r3, [r4, #0]
 800b024:	6829      	ldr	r1, [r5, #0]
 800b026:	061f      	lsls	r7, r3, #24
 800b028:	f851 6b04 	ldr.w	r6, [r1], #4
 800b02c:	d402      	bmi.n	800b034 <_printf_i+0x18c>
 800b02e:	065f      	lsls	r7, r3, #25
 800b030:	bf48      	it	mi
 800b032:	b2b6      	uxthmi	r6, r6
 800b034:	07df      	lsls	r7, r3, #31
 800b036:	bf48      	it	mi
 800b038:	f043 0320 	orrmi.w	r3, r3, #32
 800b03c:	6029      	str	r1, [r5, #0]
 800b03e:	bf48      	it	mi
 800b040:	6023      	strmi	r3, [r4, #0]
 800b042:	b91e      	cbnz	r6, 800b04c <_printf_i+0x1a4>
 800b044:	6823      	ldr	r3, [r4, #0]
 800b046:	f023 0320 	bic.w	r3, r3, #32
 800b04a:	6023      	str	r3, [r4, #0]
 800b04c:	2310      	movs	r3, #16
 800b04e:	e7a7      	b.n	800afa0 <_printf_i+0xf8>
 800b050:	4824      	ldr	r0, [pc, #144]	; (800b0e4 <_printf_i+0x23c>)
 800b052:	e7e4      	b.n	800b01e <_printf_i+0x176>
 800b054:	4615      	mov	r5, r2
 800b056:	e7bd      	b.n	800afd4 <_printf_i+0x12c>
 800b058:	682b      	ldr	r3, [r5, #0]
 800b05a:	6826      	ldr	r6, [r4, #0]
 800b05c:	6961      	ldr	r1, [r4, #20]
 800b05e:	1d18      	adds	r0, r3, #4
 800b060:	6028      	str	r0, [r5, #0]
 800b062:	0635      	lsls	r5, r6, #24
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	d501      	bpl.n	800b06c <_printf_i+0x1c4>
 800b068:	6019      	str	r1, [r3, #0]
 800b06a:	e002      	b.n	800b072 <_printf_i+0x1ca>
 800b06c:	0670      	lsls	r0, r6, #25
 800b06e:	d5fb      	bpl.n	800b068 <_printf_i+0x1c0>
 800b070:	8019      	strh	r1, [r3, #0]
 800b072:	2300      	movs	r3, #0
 800b074:	6123      	str	r3, [r4, #16]
 800b076:	4615      	mov	r5, r2
 800b078:	e7bc      	b.n	800aff4 <_printf_i+0x14c>
 800b07a:	682b      	ldr	r3, [r5, #0]
 800b07c:	1d1a      	adds	r2, r3, #4
 800b07e:	602a      	str	r2, [r5, #0]
 800b080:	681d      	ldr	r5, [r3, #0]
 800b082:	6862      	ldr	r2, [r4, #4]
 800b084:	2100      	movs	r1, #0
 800b086:	4628      	mov	r0, r5
 800b088:	f7f5 f8b2 	bl	80001f0 <memchr>
 800b08c:	b108      	cbz	r0, 800b092 <_printf_i+0x1ea>
 800b08e:	1b40      	subs	r0, r0, r5
 800b090:	6060      	str	r0, [r4, #4]
 800b092:	6863      	ldr	r3, [r4, #4]
 800b094:	6123      	str	r3, [r4, #16]
 800b096:	2300      	movs	r3, #0
 800b098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b09c:	e7aa      	b.n	800aff4 <_printf_i+0x14c>
 800b09e:	6923      	ldr	r3, [r4, #16]
 800b0a0:	462a      	mov	r2, r5
 800b0a2:	4649      	mov	r1, r9
 800b0a4:	4640      	mov	r0, r8
 800b0a6:	47d0      	blx	sl
 800b0a8:	3001      	adds	r0, #1
 800b0aa:	d0ad      	beq.n	800b008 <_printf_i+0x160>
 800b0ac:	6823      	ldr	r3, [r4, #0]
 800b0ae:	079b      	lsls	r3, r3, #30
 800b0b0:	d413      	bmi.n	800b0da <_printf_i+0x232>
 800b0b2:	68e0      	ldr	r0, [r4, #12]
 800b0b4:	9b03      	ldr	r3, [sp, #12]
 800b0b6:	4298      	cmp	r0, r3
 800b0b8:	bfb8      	it	lt
 800b0ba:	4618      	movlt	r0, r3
 800b0bc:	e7a6      	b.n	800b00c <_printf_i+0x164>
 800b0be:	2301      	movs	r3, #1
 800b0c0:	4632      	mov	r2, r6
 800b0c2:	4649      	mov	r1, r9
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	47d0      	blx	sl
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d09d      	beq.n	800b008 <_printf_i+0x160>
 800b0cc:	3501      	adds	r5, #1
 800b0ce:	68e3      	ldr	r3, [r4, #12]
 800b0d0:	9903      	ldr	r1, [sp, #12]
 800b0d2:	1a5b      	subs	r3, r3, r1
 800b0d4:	42ab      	cmp	r3, r5
 800b0d6:	dcf2      	bgt.n	800b0be <_printf_i+0x216>
 800b0d8:	e7eb      	b.n	800b0b2 <_printf_i+0x20a>
 800b0da:	2500      	movs	r5, #0
 800b0dc:	f104 0619 	add.w	r6, r4, #25
 800b0e0:	e7f5      	b.n	800b0ce <_printf_i+0x226>
 800b0e2:	bf00      	nop
 800b0e4:	0800bc4e 	.word	0x0800bc4e
 800b0e8:	0800bc5f 	.word	0x0800bc5f

0800b0ec <__malloc_lock>:
 800b0ec:	4801      	ldr	r0, [pc, #4]	; (800b0f4 <__malloc_lock+0x8>)
 800b0ee:	f7ff bc5d 	b.w	800a9ac <__retarget_lock_acquire_recursive>
 800b0f2:	bf00      	nop
 800b0f4:	2000108c 	.word	0x2000108c

0800b0f8 <__malloc_unlock>:
 800b0f8:	4801      	ldr	r0, [pc, #4]	; (800b100 <__malloc_unlock+0x8>)
 800b0fa:	f7ff bc58 	b.w	800a9ae <__retarget_lock_release_recursive>
 800b0fe:	bf00      	nop
 800b100:	2000108c 	.word	0x2000108c

0800b104 <_realloc_r>:
 800b104:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b108:	4680      	mov	r8, r0
 800b10a:	4614      	mov	r4, r2
 800b10c:	460e      	mov	r6, r1
 800b10e:	b921      	cbnz	r1, 800b11a <_realloc_r+0x16>
 800b110:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b114:	4611      	mov	r1, r2
 800b116:	f7ff bdd9 	b.w	800accc <_malloc_r>
 800b11a:	b92a      	cbnz	r2, 800b128 <_realloc_r+0x24>
 800b11c:	f000 f84c 	bl	800b1b8 <_free_r>
 800b120:	4625      	mov	r5, r4
 800b122:	4628      	mov	r0, r5
 800b124:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b128:	f000 f892 	bl	800b250 <_malloc_usable_size_r>
 800b12c:	4284      	cmp	r4, r0
 800b12e:	4607      	mov	r7, r0
 800b130:	d802      	bhi.n	800b138 <_realloc_r+0x34>
 800b132:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b136:	d812      	bhi.n	800b15e <_realloc_r+0x5a>
 800b138:	4621      	mov	r1, r4
 800b13a:	4640      	mov	r0, r8
 800b13c:	f7ff fdc6 	bl	800accc <_malloc_r>
 800b140:	4605      	mov	r5, r0
 800b142:	2800      	cmp	r0, #0
 800b144:	d0ed      	beq.n	800b122 <_realloc_r+0x1e>
 800b146:	42bc      	cmp	r4, r7
 800b148:	4622      	mov	r2, r4
 800b14a:	4631      	mov	r1, r6
 800b14c:	bf28      	it	cs
 800b14e:	463a      	movcs	r2, r7
 800b150:	f7ff fc2e 	bl	800a9b0 <memcpy>
 800b154:	4631      	mov	r1, r6
 800b156:	4640      	mov	r0, r8
 800b158:	f000 f82e 	bl	800b1b8 <_free_r>
 800b15c:	e7e1      	b.n	800b122 <_realloc_r+0x1e>
 800b15e:	4635      	mov	r5, r6
 800b160:	e7df      	b.n	800b122 <_realloc_r+0x1e>

0800b162 <memmove>:
 800b162:	4288      	cmp	r0, r1
 800b164:	b510      	push	{r4, lr}
 800b166:	eb01 0402 	add.w	r4, r1, r2
 800b16a:	d902      	bls.n	800b172 <memmove+0x10>
 800b16c:	4284      	cmp	r4, r0
 800b16e:	4623      	mov	r3, r4
 800b170:	d807      	bhi.n	800b182 <memmove+0x20>
 800b172:	1e43      	subs	r3, r0, #1
 800b174:	42a1      	cmp	r1, r4
 800b176:	d008      	beq.n	800b18a <memmove+0x28>
 800b178:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b17c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b180:	e7f8      	b.n	800b174 <memmove+0x12>
 800b182:	4402      	add	r2, r0
 800b184:	4601      	mov	r1, r0
 800b186:	428a      	cmp	r2, r1
 800b188:	d100      	bne.n	800b18c <memmove+0x2a>
 800b18a:	bd10      	pop	{r4, pc}
 800b18c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b190:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b194:	e7f7      	b.n	800b186 <memmove+0x24>
	...

0800b198 <_sbrk_r>:
 800b198:	b538      	push	{r3, r4, r5, lr}
 800b19a:	4d06      	ldr	r5, [pc, #24]	; (800b1b4 <_sbrk_r+0x1c>)
 800b19c:	2300      	movs	r3, #0
 800b19e:	4604      	mov	r4, r0
 800b1a0:	4608      	mov	r0, r1
 800b1a2:	602b      	str	r3, [r5, #0]
 800b1a4:	f7f7 fc54 	bl	8002a50 <_sbrk>
 800b1a8:	1c43      	adds	r3, r0, #1
 800b1aa:	d102      	bne.n	800b1b2 <_sbrk_r+0x1a>
 800b1ac:	682b      	ldr	r3, [r5, #0]
 800b1ae:	b103      	cbz	r3, 800b1b2 <_sbrk_r+0x1a>
 800b1b0:	6023      	str	r3, [r4, #0]
 800b1b2:	bd38      	pop	{r3, r4, r5, pc}
 800b1b4:	20001098 	.word	0x20001098

0800b1b8 <_free_r>:
 800b1b8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b1ba:	2900      	cmp	r1, #0
 800b1bc:	d044      	beq.n	800b248 <_free_r+0x90>
 800b1be:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b1c2:	9001      	str	r0, [sp, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	f1a1 0404 	sub.w	r4, r1, #4
 800b1ca:	bfb8      	it	lt
 800b1cc:	18e4      	addlt	r4, r4, r3
 800b1ce:	f7ff ff8d 	bl	800b0ec <__malloc_lock>
 800b1d2:	4a1e      	ldr	r2, [pc, #120]	; (800b24c <_free_r+0x94>)
 800b1d4:	9801      	ldr	r0, [sp, #4]
 800b1d6:	6813      	ldr	r3, [r2, #0]
 800b1d8:	b933      	cbnz	r3, 800b1e8 <_free_r+0x30>
 800b1da:	6063      	str	r3, [r4, #4]
 800b1dc:	6014      	str	r4, [r2, #0]
 800b1de:	b003      	add	sp, #12
 800b1e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b1e4:	f7ff bf88 	b.w	800b0f8 <__malloc_unlock>
 800b1e8:	42a3      	cmp	r3, r4
 800b1ea:	d908      	bls.n	800b1fe <_free_r+0x46>
 800b1ec:	6825      	ldr	r5, [r4, #0]
 800b1ee:	1961      	adds	r1, r4, r5
 800b1f0:	428b      	cmp	r3, r1
 800b1f2:	bf01      	itttt	eq
 800b1f4:	6819      	ldreq	r1, [r3, #0]
 800b1f6:	685b      	ldreq	r3, [r3, #4]
 800b1f8:	1949      	addeq	r1, r1, r5
 800b1fa:	6021      	streq	r1, [r4, #0]
 800b1fc:	e7ed      	b.n	800b1da <_free_r+0x22>
 800b1fe:	461a      	mov	r2, r3
 800b200:	685b      	ldr	r3, [r3, #4]
 800b202:	b10b      	cbz	r3, 800b208 <_free_r+0x50>
 800b204:	42a3      	cmp	r3, r4
 800b206:	d9fa      	bls.n	800b1fe <_free_r+0x46>
 800b208:	6811      	ldr	r1, [r2, #0]
 800b20a:	1855      	adds	r5, r2, r1
 800b20c:	42a5      	cmp	r5, r4
 800b20e:	d10b      	bne.n	800b228 <_free_r+0x70>
 800b210:	6824      	ldr	r4, [r4, #0]
 800b212:	4421      	add	r1, r4
 800b214:	1854      	adds	r4, r2, r1
 800b216:	42a3      	cmp	r3, r4
 800b218:	6011      	str	r1, [r2, #0]
 800b21a:	d1e0      	bne.n	800b1de <_free_r+0x26>
 800b21c:	681c      	ldr	r4, [r3, #0]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	6053      	str	r3, [r2, #4]
 800b222:	440c      	add	r4, r1
 800b224:	6014      	str	r4, [r2, #0]
 800b226:	e7da      	b.n	800b1de <_free_r+0x26>
 800b228:	d902      	bls.n	800b230 <_free_r+0x78>
 800b22a:	230c      	movs	r3, #12
 800b22c:	6003      	str	r3, [r0, #0]
 800b22e:	e7d6      	b.n	800b1de <_free_r+0x26>
 800b230:	6825      	ldr	r5, [r4, #0]
 800b232:	1961      	adds	r1, r4, r5
 800b234:	428b      	cmp	r3, r1
 800b236:	bf04      	itt	eq
 800b238:	6819      	ldreq	r1, [r3, #0]
 800b23a:	685b      	ldreq	r3, [r3, #4]
 800b23c:	6063      	str	r3, [r4, #4]
 800b23e:	bf04      	itt	eq
 800b240:	1949      	addeq	r1, r1, r5
 800b242:	6021      	streq	r1, [r4, #0]
 800b244:	6054      	str	r4, [r2, #4]
 800b246:	e7ca      	b.n	800b1de <_free_r+0x26>
 800b248:	b003      	add	sp, #12
 800b24a:	bd30      	pop	{r4, r5, pc}
 800b24c:	20001090 	.word	0x20001090

0800b250 <_malloc_usable_size_r>:
 800b250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b254:	1f18      	subs	r0, r3, #4
 800b256:	2b00      	cmp	r3, #0
 800b258:	bfbc      	itt	lt
 800b25a:	580b      	ldrlt	r3, [r1, r0]
 800b25c:	18c0      	addlt	r0, r0, r3
 800b25e:	4770      	bx	lr

0800b260 <_init>:
 800b260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b262:	bf00      	nop
 800b264:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b266:	bc08      	pop	{r3}
 800b268:	469e      	mov	lr, r3
 800b26a:	4770      	bx	lr

0800b26c <_fini>:
 800b26c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b26e:	bf00      	nop
 800b270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b272:	bc08      	pop	{r3}
 800b274:	469e      	mov	lr, r3
 800b276:	4770      	bx	lr
